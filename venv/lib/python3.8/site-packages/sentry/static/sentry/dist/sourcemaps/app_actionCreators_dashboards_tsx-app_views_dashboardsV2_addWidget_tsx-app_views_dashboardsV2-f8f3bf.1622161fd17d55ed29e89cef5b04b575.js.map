{"version":3,"file":"chunks/app_actionCreators_dashboards_tsx-app_views_dashboardsV2_addWidget_tsx-app_views_dashboardsV2-f8f3bf.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/dashboards.tsx","webpack:///./app/components/dashboards/widgetQueriesForm.tsx","webpack:///./app/components/dashboards/widgetQueryFields.tsx","webpack:///./app/views/dashboardsV2/addWidget.tsx","webpack:///./app/views/dashboardsV2/layoutUtils.tsx","webpack:///./app/views/dashboardsV2/sortableWidget.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/releaseSearchBar.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/utils.tsx","webpack:///./app/views/dashboardsV2/widgetCard/widgetCardContextMenu.tsx","webpack:///./app/views/dashboardsV2/widgetCard/index.tsx","webpack:///./app/views/dashboardsV2/widgetViewer/widgetViewerContext.tsx","webpack:///./app/views/dashboardsV2/widgetWrapper.tsx"],"sourcesContent":["import omit from 'lodash/omit';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {flattenErrors} from 'sentry/views/dashboardsV2/utils';\n\nexport function fetchDashboards(api: Client, orgSlug: string) {\n  const promise: Promise<DashboardListItem[]> = api.requestPromise(\n    `/organizations/${orgSlug}/dashboards/`,\n    {\n      method: 'GET',\n      query: {sort: 'myDashboardsAndRecentlyViewed'},\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      const errors = flattenErrors(errorResponse, {});\n      addErrorMessage(errors[Object.keys(errors)[0]]);\n    } else {\n      addErrorMessage(t('Unable to fetch dashboards'));\n    }\n  });\n\n  return promise;\n}\n\nexport function createDashboard(\n  api: Client,\n  orgId: string,\n  newDashboard: DashboardDetails,\n  duplicate?: boolean\n): Promise<DashboardDetails> {\n  const {title, widgets} = newDashboard;\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/`,\n    {\n      method: 'POST',\n      data: {title, widgets: widgets.map(widget => omit(widget, ['tempId'])), duplicate},\n      query: {\n        // TODO: This should be replaced in the future with projects\n        // when we save Dashboard page filters. This is being sent to\n        // bypass validation when creating or updating dashboards\n        project: [ALL_ACCESS_PROJECTS],\n      },\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      const errors = flattenErrors(errorResponse, {});\n      addErrorMessage(errors[Object.keys(errors)[0]]);\n    } else {\n      addErrorMessage(t('Unable to create dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function updateDashboardVisit(\n  api: Client,\n  orgId: string,\n  dashboardId: string | string[]\n): Promise<void> {\n  const promise = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/visit/`,\n    {\n      method: 'POST',\n    }\n  );\n\n  return promise;\n}\n\nexport function fetchDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<DashboardDetails> {\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'GET',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      const errors = flattenErrors(errorResponse, {});\n      addErrorMessage(errors[Object.keys(errors)[0]]);\n    } else {\n      addErrorMessage(t('Unable to load dashboard'));\n    }\n  });\n  return promise;\n}\n\nexport function updateDashboard(\n  api: Client,\n  orgId: string,\n  dashboard: DashboardDetails\n): Promise<DashboardDetails> {\n  const data = {\n    title: dashboard.title,\n    widgets: dashboard.widgets.map(widget => omit(widget, ['tempId'])),\n  };\n\n  const promise: Promise<DashboardDetails> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboard.id}/`,\n    {\n      method: 'PUT',\n      data,\n      query: {\n        // TODO: This should be replaced in the future with projects\n        // when we save Dashboard page filters. This is being sent to\n        // bypass validation when creating or updating dashboards\n        project: [ALL_ACCESS_PROJECTS],\n      },\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      const errors = flattenErrors(errorResponse, {});\n      addErrorMessage(errors[Object.keys(errors)[0]]);\n    } else {\n      addErrorMessage(t('Unable to update dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function deleteDashboard(\n  api: Client,\n  orgId: string,\n  dashboardId: string\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/${dashboardId}/`,\n    {\n      method: 'DELETE',\n    }\n  );\n\n  promise.catch(response => {\n    const errorResponse = response?.responseJSON ?? null;\n\n    if (errorResponse) {\n      const errors = flattenErrors(errorResponse, {});\n      addErrorMessage(errors[Object.keys(errors)[0]]);\n    } else {\n      addErrorMessage(t('Unable to delete dashboard'));\n    }\n  });\n\n  return promise;\n}\n\nexport function validateWidget(\n  api: Client,\n  orgId: string,\n  widget: Widget\n): Promise<undefined> {\n  const promise: Promise<undefined> = api.requestPromise(\n    `/organizations/${orgId}/dashboards/widgets/`,\n    {\n      method: 'POST',\n      data: widget,\n      query: {\n        // TODO: This should be replaced in the future with projects\n        // when we save Dashboard page filters. This is being sent to\n        // bypass validation when creating or updating dashboards\n        project: [ALL_ACCESS_PROJECTS],\n      },\n    }\n  );\n  return promise;\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport Button from 'sentry/components/button';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  explodeField,\n  generateFieldAsString,\n  getColumnsAndAggregatesAsStrings,\n  isEquation,\n  stripDerivedMetricsPrefix,\n  stripEquationPrefix,\n} from 'sentry/utils/discover/fields';\nimport {Widget, WidgetQuery, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {ReleaseSearchBar} from 'sentry/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/releaseSearchBar';\nimport {\n  DISABLED_SORT,\n  TAG_SORT_DENY_LIST,\n} from 'sentry/views/dashboardsV2/widgetBuilder/releaseWidget/fields';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport WidgetQueryFields from './widgetQueryFields';\n\nexport const generateOrderOptions = ({\n  aggregates,\n  columns,\n  widgetType,\n  widgetBuilderNewDesign = false,\n}: {\n  aggregates: string[];\n  columns: string[];\n  widgetType: WidgetType;\n  widgetBuilderNewDesign?: boolean;\n}): SelectValue<string>[] => {\n  const isRelease = widgetType === WidgetType.RELEASE;\n  const options: SelectValue<string>[] = [];\n  let equations = 0;\n  (isRelease\n    ? [...aggregates.map(stripDerivedMetricsPrefix), ...columns]\n    : [...aggregates, ...columns]\n  )\n    .filter(field => !!field)\n    .filter(field => !DISABLED_SORT.includes(field))\n    .filter(field => (isRelease ? !TAG_SORT_DENY_LIST.includes(field) : true))\n    .forEach(field => {\n      let alias;\n      const label = stripEquationPrefix(field);\n      // Equations are referenced via a standard alias following this pattern\n      if (isEquation(field)) {\n        alias = `equation[${equations}]`;\n        equations += 1;\n      }\n\n      if (widgetBuilderNewDesign) {\n        options.push({label, value: alias ?? field});\n        return;\n      }\n\n      options.push({\n        label: t('%s asc', label),\n        value: alias ?? field,\n      });\n\n      options.push({\n        label: t('%s desc', label),\n        value: `-${alias ?? field}`,\n      });\n    });\n\n  return options;\n};\n\ntype Props = {\n  canAddSearchConditions: boolean;\n  displayType: Widget['displayType'];\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  handleAddSearchConditions: () => void;\n  handleDeleteQuery: (queryIndex: number) => void;\n  onChange: (queryIndex: number, widgetQuery: WidgetQuery) => void;\n  organization: Organization;\n  queries: WidgetQuery[];\n  selection: PageFilters;\n  errors?: Array<Record<string, any>>;\n  widgetType?: Widget['widgetType'];\n};\n\n/**\n * Contain widget queries interactions and signal changes via the onChange\n * callback. This component's state should live in the parent.\n */\nclass WidgetQueriesForm extends Component<Props> {\n  componentWillUnmount() {\n    window.clearTimeout(this.blurTimeout);\n  }\n\n  blurTimeout: number | undefined = undefined;\n\n  // Handle scalar field values changing.\n  handleFieldChange = (queryIndex: number, field: string) => {\n    const {queries, onChange} = this.props;\n    const widgetQuery = queries[queryIndex];\n\n    return function handleChange(value: string) {\n      const newQuery = {...widgetQuery, [field]: value};\n      onChange(queryIndex, newQuery);\n    };\n  };\n\n  getFirstQueryError(key: string) {\n    const {errors} = this.props;\n\n    if (!errors) {\n      return undefined;\n    }\n\n    return errors.find(queryError => queryError && queryError[key]);\n  }\n\n  renderSearchBar(widgetQuery: WidgetQuery, queryIndex: number) {\n    const {organization, selection, widgetType} = this.props;\n\n    return widgetType === WidgetType.RELEASE ? (\n      <ReleaseSearchBar\n        orgSlug={organization.slug}\n        query={widgetQuery}\n        onSearch={field => {\n          // SearchBar will call handlers for both onSearch and onBlur\n          // when selecting a value from the autocomplete dropdown. This can\n          // cause state issues for the search bar in our use case. To prevent\n          // this, we set a timer in our onSearch handler to block our onBlur\n          // handler from firing if it is within 200ms, ie from clicking an\n          // autocomplete value.\n          window.clearTimeout(this.blurTimeout);\n          this.blurTimeout = window.setTimeout(() => {\n            this.blurTimeout = undefined;\n          }, 200);\n          return this.handleFieldChange(queryIndex, 'conditions')(field);\n        }}\n        projectIds={selection.projects}\n      />\n    ) : (\n      <StyledSearchBar\n        searchSource=\"widget_builder\"\n        organization={organization}\n        projectIds={selection.projects}\n        query={widgetQuery.conditions}\n        fields={[]}\n        onSearch={field => {\n          // SearchBar will call handlers for both onSearch and onBlur\n          // when selecting a value from the autocomplete dropdown. This can\n          // cause state issues for the search bar in our use case. To prevent\n          // this, we set a timer in our onSearch handler to block our onBlur\n          // handler from firing if it is within 200ms, ie from clicking an\n          // autocomplete value.\n          if (this.blurTimeout) {\n            window.clearTimeout(this.blurTimeout);\n          }\n          this.blurTimeout = window.setTimeout(() => {\n            this.blurTimeout = undefined;\n          }, 200);\n          this.handleFieldChange(queryIndex, 'conditions')(field);\n        }}\n        onBlur={field => {\n          if (!this.blurTimeout) {\n            this.handleFieldChange(queryIndex, 'conditions')(field);\n          }\n        }}\n        useFormWrapper={false}\n        maxQueryLength={MAX_QUERY_LENGTH}\n      />\n    );\n  }\n\n  render() {\n    const {\n      organization,\n      errors,\n      queries,\n      canAddSearchConditions,\n      handleAddSearchConditions,\n      handleDeleteQuery,\n      displayType,\n      fieldOptions,\n      onChange,\n      widgetType = WidgetType.DISCOVER,\n    } = this.props;\n\n    const hideLegendAlias = ['table', 'world_map', 'big_number'].includes(displayType);\n    const query = queries[0];\n    const explodedFields = defined(query.fields)\n      ? query.fields.map(field => explodeField({field}))\n      : [...query.columns, ...query.aggregates].map(field => explodeField({field}));\n\n    return (\n      <QueryWrapper>\n        {queries.map((widgetQuery, queryIndex) => {\n          return (\n            <Field\n              key={queryIndex}\n              label={queryIndex === 0 ? t('Query') : null}\n              inline={false}\n              style={{paddingBottom: `8px`}}\n              flexibleControlStateSize\n              stacked\n              error={errors?.[queryIndex].conditions}\n            >\n              <SearchConditionsWrapper>\n                {this.renderSearchBar(widgetQuery, queryIndex)}\n                {!hideLegendAlias && (\n                  <LegendAliasInput\n                    type=\"text\"\n                    name=\"name\"\n                    required\n                    value={widgetQuery.name}\n                    placeholder={t('Legend Alias')}\n                    onChange={event =>\n                      this.handleFieldChange(queryIndex, 'name')(event.target.value)\n                    }\n                  />\n                )}\n                {queries.length > 1 && (\n                  <Button\n                    size=\"zero\"\n                    borderless\n                    onClick={event => {\n                      event.preventDefault();\n                      handleDeleteQuery(queryIndex);\n                    }}\n                    icon={<IconDelete />}\n                    title={t('Remove query')}\n                    aria-label={t('Remove query')}\n                  />\n                )}\n              </SearchConditionsWrapper>\n            </Field>\n          );\n        })}\n        {canAddSearchConditions && (\n          <Button\n            size=\"small\"\n            icon={<IconAdd isCircled />}\n            onClick={(event: React.MouseEvent) => {\n              event.preventDefault();\n              handleAddSearchConditions();\n            }}\n          >\n            {t('Add Query')}\n          </Button>\n        )}\n        <WidgetQueryFields\n          widgetType={widgetType}\n          displayType={displayType}\n          fieldOptions={fieldOptions}\n          errors={this.getFirstQueryError('fields')}\n          fields={explodedFields}\n          organization={organization}\n          onChange={fields => {\n            const {aggregates, columns} = getColumnsAndAggregatesAsStrings(fields);\n            const fieldStrings = fields.map(field => generateFieldAsString(field));\n\n            queries.forEach((widgetQuery, queryIndex) => {\n              const newQuery = cloneDeep(widgetQuery);\n              newQuery.fields = fieldStrings;\n              newQuery.aggregates = aggregates;\n              newQuery.columns = columns;\n              if (defined(widgetQuery.orderby)) {\n                const descending = widgetQuery.orderby.startsWith('-');\n                const orderby = widgetQuery.orderby.replace('-', '');\n                const prevFieldStrings = defined(widgetQuery.fields)\n                  ? widgetQuery.fields\n                  : [...widgetQuery.columns, ...widgetQuery.aggregates];\n                if (!aggregates.includes(orderby) && widgetQuery.orderby !== '') {\n                  if (prevFieldStrings.length === fields.length) {\n                    // The Field that was used in orderby has changed. Get the new field.\n                    newQuery.orderby = `${descending ? '-' : ''}${\n                      aggregates[prevFieldStrings.indexOf(orderby)]\n                    }`;\n                  } else {\n                    newQuery.orderby = '';\n                  }\n                }\n              }\n              onChange(queryIndex, newQuery);\n            });\n          }}\n        />\n        {['table', 'top_n'].includes(displayType) && (\n          <Field\n            label={t('Sort by')}\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            error={this.getFirstQueryError('orderby')?.orderby}\n            style={{marginBottom: space(1)}}\n          >\n            <SelectControl\n              value={queries[0].orderby}\n              name=\"orderby\"\n              options={generateOrderOptions({\n                widgetType,\n                columns: queries[0].columns,\n                aggregates: queries[0].aggregates,\n              })}\n              onChange={(option: SelectValue<string>) =>\n                this.handleFieldChange(0, 'orderby')(option.value)\n              }\n            />\n          </Field>\n        )}\n      </QueryWrapper>\n    );\n  }\n}\n\nconst QueryWrapper = styled('div')`\n  position: relative;\n`;\n\nexport const SearchConditionsWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n`;\n\nconst LegendAliasInput = styled(Input)`\n  width: 33%;\n`;\n\nexport default WidgetQueriesForm;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Field from 'sentry/components/forms/field';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {\n  aggregateFunctionOutputType,\n  isLegalYAxisType,\n  QueryFieldValue,\n} from 'sentry/utils/discover/fields';\nimport {DisplayType, Widget, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport ColumnEditCollection from 'sentry/views/eventsV2/table/columnEditCollection';\nimport {FieldValueOption, QueryField} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\ntype Props = {\n  /**\n   * The widget display type. Used to render different fieldsets.\n   */\n  displayType: Widget['displayType'];\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  /**\n   * The field list for the widget.\n   */\n  fields: QueryFieldValue[];\n  /**\n   * Fired when fields are added/removed/modified/reordered.\n   */\n  onChange: (fields: QueryFieldValue[]) => void;\n  /**\n   * Any errors that need to be rendered.\n   */\n  organization: Organization;\n  widgetType: Widget['widgetType'];\n  errors?: Record<string, any>;\n  style?: React.CSSProperties;\n};\n\nfunction WidgetQueryFields({\n  widgetType,\n  displayType,\n  errors,\n  fields,\n  fieldOptions,\n  organization,\n  onChange,\n  style,\n}: Props) {\n  const isReleaseWidget = widgetType === WidgetType.RELEASE;\n\n  // Handle new fields being added.\n  function handleAdd(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newFields = [\n      ...fields,\n      {kind: FieldValueKind.FIELD, field: ''} as QueryFieldValue,\n    ];\n    onChange(newFields);\n  }\n\n  function handleAddEquation(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newFields = [\n      ...fields,\n      {kind: FieldValueKind.EQUATION, field: ''} as QueryFieldValue,\n    ];\n    onChange(newFields);\n  }\n\n  function handleRemove(event: React.MouseEvent, fieldIndex: number) {\n    event.preventDefault();\n\n    const newFields = [...fields];\n    newFields.splice(fieldIndex, 1);\n    onChange(newFields);\n  }\n\n  function handleChangeField(value: QueryFieldValue, fieldIndex: number) {\n    const newFields = [...fields];\n    newFields[fieldIndex] = value;\n    onChange(newFields);\n  }\n\n  function handleTopNChangeField(value: QueryFieldValue) {\n    const newFields = [...fields];\n    newFields[fields.length - 1] = value;\n    onChange(newFields);\n  }\n\n  function handleTopNColumnChange(columns: QueryFieldValue[]) {\n    const newFields = [...columns, fields[fields.length - 1]];\n    onChange(newFields);\n  }\n\n  function handleColumnChange(columns: QueryFieldValue[]) {\n    onChange(columns);\n  }\n\n  // Any function/field choice for Big Number widgets is legal since the\n  // data source is from an endpoint that is not timeseries-based.\n  // The function/field choice for World Map widget will need to be numeric-like.\n  // Column builder for Table widget is already handled above.\n  const doNotValidateYAxis = displayType === 'big_number';\n\n  const filterPrimaryOptions = option => {\n    if (widgetType === WidgetType.RELEASE) {\n      if (displayType === DisplayType.TABLE) {\n        return [\n          FieldValueKind.FUNCTION,\n          FieldValueKind.TAG,\n          FieldValueKind.NUMERIC_METRICS,\n        ].includes(option.value.kind);\n      }\n      if (displayType === DisplayType.TOP_N) {\n        return option.value.kind === FieldValueKind.TAG;\n      }\n    }\n\n    // Only validate function names for timeseries widgets and\n    // world map widgets.\n    if (!doNotValidateYAxis && option.value.kind === FieldValueKind.FUNCTION) {\n      const primaryOutput = aggregateFunctionOutputType(\n        option.value.meta.name,\n        undefined\n      );\n      if (primaryOutput) {\n        // If a function returns a specific type, then validate it.\n        return isLegalYAxisType(primaryOutput);\n      }\n    }\n\n    return [FieldValueKind.FUNCTION, FieldValueKind.NUMERIC_METRICS].includes(\n      option.value.kind\n    );\n  };\n\n  const filterMetricsOptions = option => {\n    return [FieldValueKind.FUNCTION, FieldValueKind.NUMERIC_METRICS].includes(\n      option.value.kind\n    );\n  };\n\n  const filterAggregateParameters =\n    (fieldValue: QueryFieldValue) => (option: FieldValueOption) => {\n      // Only validate function parameters for timeseries widgets and\n      // world map widgets.\n      if (doNotValidateYAxis) {\n        return true;\n      }\n\n      if (fieldValue.kind !== FieldValueKind.FUNCTION) {\n        return true;\n      }\n\n      if (isReleaseWidget || option.value.kind === FieldValueKind.METRICS) {\n        return true;\n      }\n\n      const functionName = fieldValue.function[0];\n      const primaryOutput = aggregateFunctionOutputType(\n        functionName as string,\n        option.value.meta.name\n      );\n      if (primaryOutput) {\n        return isLegalYAxisType(primaryOutput);\n      }\n\n      if (\n        option.value.kind === FieldValueKind.FUNCTION ||\n        option.value.kind === FieldValueKind.EQUATION\n      ) {\n        // Functions and equations are not legal options as an aggregate/function parameter.\n        return false;\n      }\n\n      return isLegalYAxisType(option.value.meta.dataType);\n    };\n\n  const hideAddYAxisButton =\n    (['world_map', 'big_number'].includes(displayType) && fields.length === 1) ||\n    (['line', 'area', 'stacked_area', 'bar'].includes(displayType) &&\n      fields.length === 3);\n\n  const canDelete = fields.length > 1;\n\n  if (displayType === 'table') {\n    return (\n      <Field\n        data-test-id=\"columns\"\n        label={t('Columns')}\n        inline={false}\n        style={{padding: `${space(1)} 0`, ...(style ?? {})}}\n        error={errors?.fields}\n        flexibleControlStateSize\n        stacked\n        required\n      >\n        <StyledColumnEditCollection\n          columns={fields}\n          onChange={handleColumnChange}\n          fieldOptions={fieldOptions}\n          organization={organization}\n          filterPrimaryOptions={isReleaseWidget ? filterPrimaryOptions : undefined}\n          source={widgetType}\n        />\n      </Field>\n    );\n  }\n\n  if (displayType === 'top_n') {\n    const fieldValue = fields[fields.length - 1];\n    const columns = fields.slice(0, fields.length - 1);\n\n    return (\n      <Fragment>\n        <Field\n          data-test-id=\"columns\"\n          label={t('Columns')}\n          inline={false}\n          style={{padding: `${space(1)} 0`, ...(style ?? {})}}\n          error={errors?.fields}\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <StyledColumnEditCollection\n            columns={columns}\n            onChange={handleTopNColumnChange}\n            fieldOptions={fieldOptions}\n            organization={organization}\n            filterPrimaryOptions={isReleaseWidget ? filterPrimaryOptions : undefined}\n            source={widgetType}\n          />\n        </Field>\n        <Field\n          data-test-id=\"y-axis\"\n          label={t('Y-Axis')}\n          inline={false}\n          style={{padding: `${space(2)} 0 24px 0`, ...(style ?? {})}}\n          flexibleControlStateSize\n          error={errors?.fields}\n          required\n          stacked\n        >\n          <QueryFieldWrapper key={`${fieldValue}:0`}>\n            <QueryField\n              fieldValue={fieldValue}\n              fieldOptions={\n                isReleaseWidget ? fieldOptions : generateFieldOptions({organization})\n              }\n              onChange={value => handleTopNChangeField(value)}\n              filterPrimaryOptions={\n                isReleaseWidget ? filterMetricsOptions : filterPrimaryOptions\n              }\n              filterAggregateParameters={filterAggregateParameters(fieldValue)}\n            />\n          </QueryFieldWrapper>\n        </Field>\n      </Fragment>\n    );\n  }\n\n  return (\n    <Field\n      data-test-id=\"y-axis\"\n      label={t('Y-Axis')}\n      inline={false}\n      style={{padding: `${space(2)} 0 24px 0`, ...(style ?? {})}}\n      flexibleControlStateSize\n      error={errors?.fields}\n      required\n      stacked\n    >\n      {fields.map((field, i) => {\n        return (\n          <QueryFieldWrapper key={`${field}:${i}`}>\n            <QueryField\n              fieldValue={field}\n              fieldOptions={fieldOptions}\n              onChange={value => handleChangeField(value, i)}\n              filterPrimaryOptions={filterPrimaryOptions}\n              filterAggregateParameters={filterAggregateParameters(field)}\n              otherColumns={fields}\n            />\n            {(canDelete || field.kind === 'equation') && (\n              <Button\n                size=\"zero\"\n                borderless\n                onClick={event => handleRemove(event, i)}\n                icon={<IconDelete />}\n                title={t('Remove this Y-Axis')}\n                aria-label={t('Remove this Y-Axis')}\n              />\n            )}\n          </QueryFieldWrapper>\n        );\n      })}\n      {!hideAddYAxisButton && (\n        <Actions>\n          <Button size=\"small\" icon={<IconAdd isCircled />} onClick={handleAdd}>\n            {t('Add Overlay')}\n          </Button>\n          {!isReleaseWidget && (\n            <Button\n              size=\"small\"\n              aria-label={t('Add an Equation')}\n              onClick={handleAddEquation}\n              icon={<IconAdd isCircled />}\n            >\n              {t('Add an Equation')}\n            </Button>\n          )}\n        </Actions>\n      )}\n    </Field>\n  );\n}\n\nconst StyledColumnEditCollection = styled(ColumnEditCollection)`\n  margin-top: ${space(1)};\n`;\n\nexport const QueryFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst Actions = styled('div')`\n  grid-column: 2 / 3;\n\n  & button {\n    margin-right: ${space(1)};\n  }\n`;\n\nexport default WidgetQueryFields;\n","import {useSortable} from '@dnd-kit/sortable';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\nimport {DisplayType} from './types';\nimport WidgetWrapper from './widgetWrapper';\n\nexport const ADD_WIDGET_BUTTON_DRAG_ID = 'add-widget-button';\n\nconst initialStyles = {\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1,\n};\n\ntype Props = {\n  onAddWidget: () => void;\n};\n\nfunction AddWidget({onAddWidget}: Props) {\n  const {setNodeRef, transform} = useSortable({\n    disabled: true,\n    id: ADD_WIDGET_BUTTON_DRAG_ID,\n    transition: null,\n  });\n\n  return (\n    <WidgetWrapper\n      key=\"add\"\n      ref={setNodeRef}\n      displayType={DisplayType.BIG_NUMBER}\n      layoutId={ADD_WIDGET_BUTTON_DRAG_ID}\n      style={{originX: 0, originY: 0}}\n      animate={\n        transform\n          ? {\n              x: transform.x,\n              y: transform.y,\n              scaleX: transform?.scaleX && transform.scaleX <= 1 ? transform.scaleX : 1,\n              scaleY: transform?.scaleY && transform.scaleY <= 1 ? transform.scaleY : 1,\n            }\n          : initialStyles\n      }\n      transition={{\n        duration: 0.25,\n      }}\n    >\n      <InnerWrapper onClick={onAddWidget}>\n        <AddButton\n          data-test-id=\"widget-add\"\n          icon={<IconAdd size=\"lg\" isCircled color=\"inactive\" />}\n          aria-label={t('Add widget')}\n        />\n      </InnerWrapper>\n    </WidgetWrapper>\n  );\n}\n\nexport default AddWidget;\n\nconst AddButton = styled(Button)`\n  border: none;\n  &,\n  &:focus,\n  &:active,\n  &:hover {\n    background: transparent;\n    box-shadow: none;\n  }\n`;\n\nconst InnerWrapper = styled('div')<{onClick?: () => void}>`\n  width: 100%;\n  height: 110px;\n  border: 2px dashed ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: ${p => (p.onClick ? 'pointer' : '')};\n`;\n","import {Layout} from 'react-grid-layout';\nimport {compact} from 'react-grid-layout/build/utils';\nimport pickBy from 'lodash/pickBy';\nimport sortBy from 'lodash/sortBy';\nimport zip from 'lodash/zip';\n\nimport {defined} from 'sentry/utils';\nimport {uniqueId} from 'sentry/utils/guid';\n\nimport {NUM_DESKTOP_COLS} from './dashboard';\nimport {DisplayType, Widget, WidgetLayout} from './types';\n\nexport const DEFAULT_WIDGET_WIDTH = 2;\n\nconst WIDGET_PREFIX = 'grid-item';\n\n// Keys for grid layout values we track in the server\nconst STORE_KEYS = ['x', 'y', 'w', 'h', 'minW', 'maxW', 'minH', 'maxH'];\n\nexport type Position = Pick<Layout, 'x' | 'y'>;\n\ntype NextPosition = [position: Position, columnDepths: number[]];\n\nexport function generateWidgetId(widget: Widget, index: number) {\n  return widget.id ? `${widget.id}-index-${index}` : `index-${index}`;\n}\n\nexport function constructGridItemKey(widget: {id?: string; tempId?: string}) {\n  return `${WIDGET_PREFIX}-${widget.id ?? widget.tempId}`;\n}\n\nexport function assignTempId(widget: Widget) {\n  if (widget.id ?? widget.tempId) {\n    return widget;\n  }\n\n  return {...widget, tempId: uniqueId()};\n}\n\n/**\n * Naive positioning for widgets assuming no resizes.\n */\nexport function getDefaultPosition(index: number, displayType: DisplayType) {\n  return {\n    x: (DEFAULT_WIDGET_WIDTH * index) % NUM_DESKTOP_COLS,\n    y: Number.MAX_SAFE_INTEGER,\n    w: DEFAULT_WIDGET_WIDTH,\n    h: displayType === DisplayType.BIG_NUMBER ? 1 : 2,\n    minH: displayType === DisplayType.BIG_NUMBER ? 1 : 2,\n  };\n}\n\nexport function getMobileLayout(desktopLayout: Layout[], widgets: Widget[]) {\n  if (desktopLayout.length === 0) {\n    // Initial case where the user has no layout saved, but\n    // dashboard has widgets\n    return [];\n  }\n\n  const layoutWidgetPairs = zip(desktopLayout, widgets) as [Layout, Widget][];\n\n  // Sort by y and then subsort by x\n  const sorted = sortBy(layoutWidgetPairs, ['0.y', '0.x']);\n\n  const mobileLayout = sorted.map(([layout, widget], index) => ({\n    ...layout,\n    x: 0,\n    y: index * 2,\n    w: 2,\n    h: widget.displayType === DisplayType.BIG_NUMBER ? 1 : 2,\n  }));\n\n  return mobileLayout;\n}\n\n/**\n * Reads the layout from an array of widgets.\n */\nexport function getDashboardLayout(widgets: Widget[]): Layout[] {\n  type WidgetWithDefinedLayout = Omit<Widget, 'layout'> & {layout: WidgetLayout};\n  return widgets\n    .filter((widget): widget is WidgetWithDefinedLayout => defined(widget.layout))\n    .map(({layout, ...widget}) => ({\n      ...layout,\n      i: constructGridItemKey(widget),\n    }));\n}\n\nexport function pickDefinedStoreKeys(layout: Layout): WidgetLayout {\n  // TODO(nar): Fix the types here\n  return pickBy(\n    layout,\n    (value, key) => defined(value) && STORE_KEYS.includes(key)\n  ) as WidgetLayout;\n}\n\nexport function getDefaultWidgetHeight(displayType: DisplayType): number {\n  return displayType === DisplayType.BIG_NUMBER ? 1 : 2;\n}\n\nexport function getInitialColumnDepths() {\n  return Array(NUM_DESKTOP_COLS).fill(0);\n}\n\n/**\n * Creates an array from layouts where each column stores how deep it is.\n */\nexport function calculateColumnDepths(\n  layouts: Pick<Layout, 'h' | 'w' | 'x' | 'y'>[]\n): number[] {\n  const depths = getInitialColumnDepths();\n\n  // For each layout's x, record the max depth\n  layouts.forEach(({x, w, y, h}) => {\n    // Adjust the column depths for each column the widget takes up\n    for (let col = x; col < x + w; col++) {\n      depths[col] = Math.max(y + h, depths[col]);\n    }\n  });\n\n  return depths;\n}\n\n/**\n * Find the next place to place a widget and also returns the next\n * input when this operation needs to be called multiple times.\n *\n * @param columnDepths A profile of how deep the widgets in a column extend.\n * @param height The desired height of the next widget we want to place.\n * @returns An {x, y} positioning for the next available spot, as well as the\n * next columnDepths array if this position were used.\n */\nexport function getNextAvailablePosition(\n  initialColumnDepths: number[],\n  height: number\n): NextPosition {\n  const columnDepths = [...initialColumnDepths];\n  const maxColumnDepth = Math.max(...columnDepths);\n\n  // Look for an opening at each depth by scanning from 0, 0\n  // By scanning from 0 depth to the highest depth, we ensure\n  // we get the top-most available spot\n  for (let currDepth = 0; currDepth <= maxColumnDepth; currDepth++) {\n    for (let start = 0; start <= columnDepths.length - DEFAULT_WIDGET_WIDTH; start++) {\n      if (columnDepths[start] > currDepth) {\n        // There are potentially widgets in the way here, so skip\n        continue;\n      }\n\n      // If all of the columns from start to end (the size of the widget)\n      // have at most the current depth, then we've found a valid positioning\n      // No other widgets extend into the space we need\n      const end = start + DEFAULT_WIDGET_WIDTH;\n      if (columnDepths.slice(start, end).every(val => val <= currDepth)) {\n        for (let col = start; col < start + DEFAULT_WIDGET_WIDTH; col++) {\n          columnDepths[col] = currDepth + height;\n        }\n        return [{x: start, y: currDepth}, [...columnDepths]];\n      }\n    }\n  }\n\n  for (let col = 0; col < DEFAULT_WIDGET_WIDTH; col++) {\n    columnDepths[col] = maxColumnDepth;\n  }\n  return [{x: 0, y: maxColumnDepth}, [...columnDepths]];\n}\n\nexport function assignDefaultLayout<T extends Pick<Widget, 'displayType' | 'layout'>>(\n  widgets: T[],\n  initialColumnDepths: number[]\n): T[] {\n  let columnDepths = [...initialColumnDepths];\n  const newWidgets = widgets.map(widget => {\n    if (defined(widget.layout)) {\n      return widget;\n    }\n    const height = getDefaultWidgetHeight(widget.displayType);\n    const [nextPosition, nextColumnDepths] = getNextAvailablePosition(\n      columnDepths,\n      height\n    );\n    columnDepths = nextColumnDepths;\n\n    return {\n      ...widget,\n      layout: {...nextPosition, h: height, minH: height, w: DEFAULT_WIDGET_WIDTH},\n    };\n  });\n  return newWidgets;\n}\n\nexport function enforceWidgetHeightValues(widget: Widget): Widget {\n  const {displayType, layout} = widget;\n  const nextWidget = {\n    ...widget,\n  };\n  if (!defined(layout)) {\n    return nextWidget;\n  }\n\n  const minH = getDefaultWidgetHeight(displayType);\n  const nextLayout = {\n    ...layout,\n    h: Math.max(layout?.h ?? minH, minH),\n    minH,\n  };\n  return {...nextWidget, layout: nextLayout};\n}\n\nexport function generateWidgetsAfterCompaction(widgets: Widget[]) {\n  // Resolves any potential compactions that need to occur after a\n  // single widget change would affect other widget positions, e.g. deletion\n  const nextLayout = compact(getDashboardLayout(widgets), 'vertical', NUM_DESKTOP_COLS);\n  return widgets.map(widget => {\n    const layout = nextLayout.find(({i}) => i === constructGridItemKey(widget));\n    if (!layout) {\n      return widget;\n    }\n    return {...widget, layout};\n  });\n}\n","import {ComponentProps, useEffect} from 'react';\nimport {useSortable} from '@dnd-kit/sortable';\nimport styled from '@emotion/styled';\n\nimport {Organization} from 'sentry/types';\nimport theme from 'sentry/utils/theme';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\n\nimport {Widget} from './types';\nimport DnDKitWidgetWrapper from './widgetWrapper';\n\nconst TABLE_ITEM_LIMIT = 20;\n\ntype Props = {\n  dragId: string;\n  index: string;\n  isEditing: boolean;\n  onDelete: () => void;\n  onDuplicate: () => void;\n  onEdit: () => void;\n  organization: Organization;\n  widget: Widget;\n  widgetLimitReached: boolean;\n  isMobile?: boolean;\n  isPreview?: boolean;\n  windowWidth?: number;\n};\n\nfunction SortableWidget(props: Props) {\n  const {\n    organization,\n    widget,\n    dragId,\n    isEditing,\n    widgetLimitReached,\n    onDelete,\n    onEdit,\n    onDuplicate,\n    isPreview,\n    isMobile,\n    windowWidth,\n    index,\n  } = props;\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    isDragging: currentWidgetDragging,\n    isSorting,\n  } = useSortable({\n    id: dragId,\n    transition: null,\n  });\n\n  useEffect(() => {\n    if (!currentWidgetDragging) {\n      return undefined;\n    }\n\n    document.body.style.cursor = 'grabbing';\n\n    return function cleanup() {\n      document.body.style.cursor = '';\n    };\n  }, [currentWidgetDragging]);\n\n  let widgetProps: ComponentProps<typeof WidgetCard> = {\n    widget,\n    isEditing,\n    widgetLimitReached,\n    onDelete,\n    onEdit,\n    onDuplicate,\n    isSorting,\n    hideToolbar: isSorting,\n    currentWidgetDragging,\n    showContextMenu: true,\n    isPreview,\n    showWidgetViewerButton: organization.features.includes('widget-viewer-modal'),\n    index,\n  };\n\n  if (organization.features.includes('dashboard-grid-layout')) {\n    widgetProps = {\n      ...widgetProps,\n      isMobile,\n      windowWidth,\n      // TODO(nar): These aren't necessary for supporting RGL\n      isSorting: false,\n      currentWidgetDragging: false,\n      tableItemLimit: TABLE_ITEM_LIMIT,\n    };\n    return (\n      <GridWidgetWrapper>\n        <WidgetCard {...widgetProps} />\n      </GridWidgetWrapper>\n    );\n  }\n\n  const initialStyles: ComponentProps<typeof DnDKitWidgetWrapper>['animate'] = {\n    zIndex: 'auto',\n  };\n\n  widgetProps = {...widgetProps, draggableProps: {attributes, listeners}};\n  return (\n    <DnDKitWidgetWrapper\n      ref={setNodeRef}\n      displayType={widget.displayType}\n      layoutId={dragId}\n      style={{\n        // Origin is set to top right-hand corner where the drag handle is placed.\n        // Otherwise, set the origin to be the top left-hand corner when swapping widgets.\n        originX: currentWidgetDragging ? 1 : 0,\n        originY: 0,\n        boxShadow: currentWidgetDragging ? theme.dropShadowHeavy : 'none',\n        borderRadius: currentWidgetDragging ? theme.borderRadius : undefined,\n      }}\n      animate={\n        transform\n          ? {\n              x: transform.x,\n              y: transform.y,\n              scaleX: transform?.scaleX && transform.scaleX <= 1 ? transform.scaleX : 1,\n              scaleY: transform?.scaleY && transform.scaleY <= 1 ? transform.scaleY : 1,\n              zIndex: currentWidgetDragging ? theme.zIndex.modal : 'auto',\n            }\n          : initialStyles\n      }\n      transformTemplate={(___transform, generatedTransform) => {\n        if (isEditing && !!transform) {\n          return generatedTransform;\n        }\n        return 'none';\n      }}\n      transition={{\n        duration: !currentWidgetDragging ? 0.25 : 0,\n        easings: {\n          type: 'spring',\n        },\n      }}\n    >\n      <WidgetCard {...widgetProps} />\n    </DnDKitWidgetWrapper>\n  );\n}\n\nexport default withOrganization(SortableWidget);\n\nconst GridWidgetWrapper = styled('div')`\n  height: 100%;\n`;\n","import {ClassNames} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport {SearchBarProps} from 'sentry/components/events/searchBar';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH, NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization, SavedSearchType, Tag, TagValue} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport {WidgetQuery} from 'sentry/views/dashboardsV2/types';\nimport {\n  MAX_MENU_HEIGHT,\n  MAX_SEARCH_ITEMS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\n\nimport {SESSION_STATUSES, SESSIONS_FILTER_TAGS} from '../../releaseWidget/fields';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\ninterface Props {\n  onSearch: SearchBarProps['onSearch'];\n  orgSlug: Organization['slug'];\n  projectIds: SearchBarProps['projectIds'];\n  query: WidgetQuery;\n  onBlur?: SearchBarProps['onBlur'];\n}\n\nexport function ReleaseSearchBar({orgSlug, query, projectIds, onSearch, onBlur}: Props) {\n  const api = useApi();\n\n  /**\n   * Prepare query string (e.g. strip special characters like negation operator)\n   */\n  function prepareQuery(searchQuery: string) {\n    return searchQuery.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n  }\n\n  function getTagValues(tag: Tag, searchQuery: string): Promise<string[]> {\n    if (tag.name === 'session.status') {\n      return Promise.resolve(SESSION_STATUSES);\n    }\n    const projectIdStrings = projectIds?.map(String);\n    return fetchTagValues(api, orgSlug, tag.key, searchQuery, projectIdStrings).then(\n      tagValues => (tagValues as TagValue[]).map(({value}) => value),\n      () => {\n        throw new Error('Unable to fetch tag values');\n      }\n    );\n  }\n\n  const supportedTags = Object.values(SESSIONS_FILTER_TAGS).reduce((acc, key) => {\n    acc[key] = {key, name: key};\n    return acc;\n  }, {});\n\n  return (\n    <ClassNames>\n      {({css}) => (\n        <SearchBar\n          onGetTagValues={memoize(\n            getTagValues,\n            ({key}, searchQuery) => `${key}-${searchQuery}`\n          )}\n          supportedTags={supportedTags}\n          placeholder={t('Search for release version, session status, and more')}\n          prepareQuery={prepareQuery}\n          dropdownClassName={css`\n            max-height: ${MAX_MENU_HEIGHT ?? 300}px;\n            overflow-y: auto;\n          `}\n          onSearch={onSearch}\n          onBlur={onBlur}\n          maxQueryLength={MAX_QUERY_LENGTH}\n          maxSearchItems={MAX_SEARCH_ITEMS}\n          searchSource=\"widget_builder\"\n          query={query.conditions}\n          savedSearchType={SavedSearchType.SESSION}\n          hasRecentSearches\n        />\n      )}\n    </ClassNames>\n  );\n}\n\nconst SearchBar = styled(SmartSearchBar)`\n  flex-grow: 1;\n`;\n","import cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport trimStart from 'lodash/trimStart';\n\nimport {generateOrderOptions} from 'sentry/components/dashboards/widgetQueriesForm';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary, TagCollection} from 'sentry/types';\nimport {\n  aggregateFunctionOutputType,\n  aggregateOutputType,\n  getEquationAliasIndex,\n  isEquation,\n  isEquationAlias,\n  isLegalYAxisType,\n  stripDerivedMetricsPrefix,\n} from 'sentry/utils/discover/fields';\nimport {MeasurementCollection} from 'sentry/utils/measurements/measurements';\nimport {SPAN_OP_BREAKDOWN_FIELDS} from 'sentry/utils/performance/spanOperationBreakdowns/constants';\nimport {\n  DisplayType,\n  Widget,\n  WidgetQuery,\n  WidgetType,\n} from 'sentry/views/dashboardsV2/types';\nimport {FieldValueOption} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\nimport {IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport {FlatValidationError, getNumEquations, ValidationError} from '../utils';\n\n// Used in the widget builder to limit the number of lines plotted in the chart\nexport const DEFAULT_RESULTS_LIMIT = 5;\nconst RESULTS_LIMIT = 10;\n\n// Both dashboards and widgets use the 'new' keyword when creating\nexport const NEW_DASHBOARD_ID = 'new';\n\nexport enum DataSet {\n  EVENTS = 'events',\n  ISSUES = 'issues',\n  RELEASES = 'releases',\n}\n\nexport enum SortDirection {\n  HIGH_TO_LOW = 'high_to_low',\n  LOW_TO_HIGH = 'low_to_high',\n}\n\nexport const sortDirections = {\n  [SortDirection.HIGH_TO_LOW]: t('High to low'),\n  [SortDirection.LOW_TO_HIGH]: t('Low to high'),\n};\n\nexport const displayTypes = {\n  [DisplayType.AREA]: t('Area Chart'),\n  [DisplayType.BAR]: t('Bar Chart'),\n  [DisplayType.LINE]: t('Line Chart'),\n  [DisplayType.TABLE]: t('Table'),\n  [DisplayType.WORLD_MAP]: t('World Map'),\n  [DisplayType.BIG_NUMBER]: t('Big Number'),\n};\n\nexport function mapErrors(\n  data: ValidationError,\n  update: FlatValidationError\n): FlatValidationError {\n  Object.keys(data).forEach((key: string) => {\n    const value = data[key];\n    if (typeof value === 'string') {\n      update[key] = value;\n      return;\n    }\n    // Recurse into nested objects.\n    if (Array.isArray(value) && typeof value[0] === 'string') {\n      update[key] = value[0];\n      return;\n    }\n    if (Array.isArray(value) && typeof value[0] === 'object') {\n      update[key] = (value as ValidationError[]).map(item => mapErrors(item, {}));\n    } else {\n      update[key] = mapErrors(value as ValidationError, {});\n    }\n  });\n\n  return update;\n}\n\nexport function normalizeQueries({\n  displayType,\n  queries,\n  widgetType,\n  widgetBuilderNewDesign = false,\n}: {\n  displayType: DisplayType;\n  queries: Widget['queries'];\n  widgetBuilderNewDesign?: boolean;\n  widgetType?: Widget['widgetType'];\n}): Widget['queries'] {\n  const isTimeseriesChart = getIsTimeseriesChart(displayType);\n  const isTabularChart = [DisplayType.TABLE, DisplayType.TOP_N].includes(displayType);\n  queries = cloneDeep(queries);\n\n  if (\n    [DisplayType.TABLE, DisplayType.WORLD_MAP, DisplayType.BIG_NUMBER].includes(\n      displayType\n    )\n  ) {\n    // Some display types may only support at most 1 query.\n    queries = queries.slice(0, 1);\n  } else if (isTimeseriesChart) {\n    // Timeseries charts supports at most 3 queries.\n    queries = queries.slice(0, 3);\n  }\n\n  if (widgetBuilderNewDesign) {\n    queries = queries.map(query => {\n      const {fields = [], columns} = query;\n\n      if (isTabularChart) {\n        // If the groupBy field has values, port everything over to the columnEditCollect field.\n        query.fields = [...new Set([...fields, ...columns])];\n      } else {\n        // If columnEditCollect has field values , port everything over to the groupBy field.\n        query.fields = fields.filter(field => !columns.includes(field));\n      }\n\n      if (\n        getIsTimeseriesChart(displayType) &&\n        !query.columns.filter(column => !!column).length\n      ) {\n        // The orderby is only applicable for timeseries charts when there's a\n        // grouping selected, if all fields are empty then we also reset the orderby\n        query.orderby = '';\n        return query;\n      }\n\n      const queryOrderBy =\n        widgetType === WidgetType.RELEASE\n          ? stripDerivedMetricsPrefix(queries[0].orderby)\n          : queries[0].orderby;\n      const rawOrderBy = trimStart(queryOrderBy, '-');\n\n      const resetOrderBy =\n        // Raw Equation from Top N only applies to timeseries\n        (isTabularChart && isEquation(rawOrderBy)) ||\n        // Not contained as tag, field, or function\n        (!isEquation(rawOrderBy) &&\n          !isEquationAlias(rawOrderBy) &&\n          ![...query.columns, ...query.aggregates].includes(rawOrderBy)) ||\n        // Equation alias and not contained\n        (isEquationAlias(rawOrderBy) &&\n          getEquationAliasIndex(rawOrderBy) >\n            getNumEquations([...query.columns, ...query.aggregates]) - 1);\n      const orderBy =\n        (!resetOrderBy && trimStart(queryOrderBy, '-')) ||\n        (widgetType === WidgetType.ISSUE\n          ? IssueSortOptions.DATE\n          : generateOrderOptions({\n              widgetType: widgetType ?? WidgetType.DISCOVER,\n              widgetBuilderNewDesign,\n              columns: queries[0].columns,\n              aggregates: queries[0].aggregates,\n            })[0].value);\n\n      // A widget should be descending if:\n      // - There is no orderby, so we're defaulting to desc\n      // - Not an issues widget since issues doesn't support descending and\n      //   the original ordering was descending\n      const isDescending =\n        !query.orderby ||\n        (widgetType !== WidgetType.ISSUE && queryOrderBy.startsWith('-'));\n\n      query.orderby = isDescending ? `-${String(orderBy)}` : String(orderBy);\n\n      return query;\n    });\n  }\n\n  if (isTabularChart) {\n    return queries;\n  }\n\n  // Filter out non-aggregate fields\n  queries = queries.map(query => {\n    let aggregates = query.aggregates;\n\n    if (isTimeseriesChart || displayType === DisplayType.WORLD_MAP) {\n      // Filter out fields that will not generate numeric output types\n      aggregates = aggregates.filter(aggregate =>\n        isLegalYAxisType(aggregateOutputType(aggregate))\n      );\n    }\n\n    if (isTimeseriesChart && aggregates.length && aggregates.length > 3) {\n      // Timeseries charts supports at most 3 fields.\n      aggregates = aggregates.slice(0, 3);\n    }\n\n    return {\n      ...query,\n      fields: aggregates.length ? aggregates : ['count()'],\n      columns: widgetBuilderNewDesign && query.columns ? query.columns : [],\n      aggregates: aggregates.length ? aggregates : ['count()'],\n    };\n  });\n\n  if (isTimeseriesChart) {\n    // For timeseries widget, all queries must share identical set of fields.\n\n    const referenceAggregates = [...queries[0].aggregates];\n\n    queryLoop: for (const query of queries) {\n      if (referenceAggregates.length >= 3) {\n        break;\n      }\n\n      if (isEqual(referenceAggregates, query.aggregates)) {\n        continue;\n      }\n\n      for (const aggregate of query.aggregates) {\n        if (referenceAggregates.length >= 3) {\n          break queryLoop;\n        }\n\n        if (!referenceAggregates.includes(aggregate)) {\n          referenceAggregates.push(aggregate);\n        }\n      }\n    }\n\n    queries = queries.map(query => {\n      return {\n        ...query,\n        columns: widgetBuilderNewDesign && query.columns ? query.columns : [],\n        aggregates: referenceAggregates,\n        fields: referenceAggregates,\n      };\n    });\n  }\n\n  if ([DisplayType.WORLD_MAP, DisplayType.BIG_NUMBER].includes(displayType)) {\n    // For world map chart, cap fields of the queries to only one field.\n    queries = queries.map(query => {\n      return {\n        ...query,\n        fields: query.aggregates.slice(0, 1),\n        aggregates: query.aggregates.slice(0, 1),\n        orderby: '',\n        columns: [],\n      };\n    });\n  }\n\n  return queries;\n}\n\nexport function getParsedDefaultWidgetQuery(query = ''): WidgetQuery | undefined {\n  // \"any\" was needed here because it doesn't pass in getsentry\n  const urlSeachParams = new URLSearchParams(query) as any;\n  const parsedQuery = Object.fromEntries(urlSeachParams.entries());\n\n  if (!Object.keys(parsedQuery).length) {\n    return undefined;\n  }\n\n  const columns = parsedQuery.columns ? getFields(parsedQuery.columns) : [];\n  const aggregates = parsedQuery.aggregates ? getFields(parsedQuery.aggregates) : [];\n  const fields = [...columns, ...aggregates];\n\n  return {\n    ...parsedQuery,\n    fields,\n    columns,\n    aggregates,\n  } as WidgetQuery;\n}\n\nexport function getFields(fieldsString: string): string[] {\n  // Use a negative lookahead to avoid splitting on commas inside equation fields\n  return fieldsString.split(/,(?![^(]*\\))/g);\n}\n\nexport function getAmendedFieldOptions({\n  measurements,\n  organization,\n  tags,\n}: {\n  measurements: MeasurementCollection;\n  organization: OrganizationSummary;\n  tags: TagCollection;\n}) {\n  return generateFieldOptions({\n    organization,\n    tagKeys: Object.values(tags).map(({key}) => key),\n    measurementKeys: Object.values(measurements).map(({key}) => key),\n    spanOperationBreakdownKeys: SPAN_OP_BREAKDOWN_FIELDS,\n  });\n}\n\n// Extract metric names from aggregation functions present in the widget queries\nexport function getMetricFields(queries: WidgetQuery[]) {\n  return queries.reduce((acc, query) => {\n    for (const field of [...query.aggregates, ...query.columns]) {\n      const fieldParameter = /\\(([^)]*)\\)/.exec(field)?.[1];\n      if (fieldParameter && !acc.includes(fieldParameter)) {\n        acc.push(fieldParameter);\n      }\n    }\n\n    return acc;\n  }, [] as string[]);\n}\n\n// Used to limit the number of results of the \"filter your results\" fields dropdown\nexport const MAX_SEARCH_ITEMS = 5;\n\n// Used to set the max height of the smartSearchBar menu\nexport const MAX_MENU_HEIGHT = 250;\n\n// Any function/field choice for Big Number widgets is legal since the\n// data source is from an endpoint that is not timeseries-based.\n// The function/field choice for World Map widget will need to be numeric-like.\n// Column builder for Table widget is already handled above.\nexport function doNotValidateYAxis(displayType: DisplayType) {\n  return displayType === DisplayType.BIG_NUMBER;\n}\n\nexport function filterPrimaryOptions({\n  option,\n  widgetType,\n  displayType,\n}: {\n  displayType: DisplayType;\n  option: FieldValueOption;\n  widgetType?: WidgetType;\n}) {\n  if (widgetType === WidgetType.RELEASE) {\n    if (displayType === DisplayType.TABLE) {\n      return [\n        FieldValueKind.FUNCTION,\n        FieldValueKind.FIELD,\n        FieldValueKind.NUMERIC_METRICS,\n      ].includes(option.value.kind);\n    }\n    if (displayType === DisplayType.TOP_N) {\n      return option.value.kind === FieldValueKind.TAG;\n    }\n  }\n\n  // Only validate function names for timeseries widgets and\n  // world map widgets.\n  if (!doNotValidateYAxis(displayType) && option.value.kind === FieldValueKind.FUNCTION) {\n    const primaryOutput = aggregateFunctionOutputType(option.value.meta.name, undefined);\n    if (primaryOutput) {\n      // If a function returns a specific type, then validate it.\n      return isLegalYAxisType(primaryOutput);\n    }\n  }\n\n  return [FieldValueKind.FUNCTION, FieldValueKind.NUMERIC_METRICS].includes(\n    option.value.kind\n  );\n}\n\nexport function getResultsLimit(numQueries: number, numYAxes: number) {\n  if (numQueries === 0 || numYAxes === 0) {\n    return DEFAULT_RESULTS_LIMIT;\n  }\n\n  return Math.floor(RESULTS_LIMIT / (numQueries * numYAxes));\n}\n\nexport function getIsTimeseriesChart(displayType: DisplayType) {\n  return [DisplayType.LINE, DisplayType.AREA, DisplayType.BAR].includes(displayType);\n}\n","import {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {openDashboardWidgetQuerySelectorModal} from 'sentry/actionCreators/modal';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport DropdownMenuControlV2 from 'sentry/components/dropdownMenuControlV2';\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport {isWidgetViewerPath} from 'sentry/components/modals/widgetViewerModal/utils';\nimport Tag from 'sentry/components/tag';\nimport {IconEllipsis, IconExpand} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {TableDataRow, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport {getWidgetDiscoverUrl, getWidgetIssueUrl} from 'sentry/views/dashboardsV2/utils';\n\nimport {Widget, WidgetType} from '../types';\nimport {WidgetViewerContext} from '../widgetViewer/widgetViewerContext';\n\nimport {useDashboardsMEPContext} from './dashboardsMEPContext';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  widget: Widget;\n  widgetLimitReached: boolean;\n  index?: string;\n  isPreview?: boolean;\n  issuesData?: TableDataRow[];\n  onDelete?: () => void;\n  onDuplicate?: () => void;\n  onEdit?: () => void;\n  pageLinks?: string;\n  seriesData?: Series[];\n  showContextMenu?: boolean;\n  showWidgetViewerButton?: boolean;\n  tableData?: TableDataWithTitle[];\n  totalIssuesCount?: string;\n};\n\nfunction WidgetCardContextMenu({\n  organization,\n  selection,\n  widget,\n  widgetLimitReached,\n  onDelete,\n  onDuplicate,\n  onEdit,\n  showContextMenu,\n  isPreview,\n  showWidgetViewerButton,\n  router,\n  location,\n  index,\n  seriesData,\n  tableData,\n  issuesData,\n  pageLinks,\n  totalIssuesCount,\n}: Props) {\n  const {isMetricsData} = useDashboardsMEPContext();\n  if (!showContextMenu) {\n    return null;\n  }\n\n  const menuOptions: MenuItemProps[] = [];\n  const disabledKeys: string[] = [];\n\n  const openWidgetViewerPath = (id: string | undefined) => {\n    if (!isWidgetViewerPath(location.pathname)) {\n      router.push({\n        pathname: `${location.pathname}${\n          location.pathname.endsWith('/') ? '' : '/'\n        }widget/${id}/`,\n        query: location.query,\n      });\n    }\n  };\n\n  if (isPreview) {\n    return (\n      <WidgetViewerContext.Consumer>\n        {({setData}) => (\n          <ContextWrapper>\n            <StyledDropdownMenuControlV2\n              items={[\n                {\n                  key: 'preview',\n                  label: t(\n                    'This is a preview only. To edit, you must add this dashboard.'\n                  ),\n                },\n              ]}\n              triggerProps={{\n                'aria-label': t('Widget actions'),\n                size: 'xsmall',\n                borderless: true,\n                showChevron: false,\n                icon: <IconEllipsis direction=\"down\" size=\"sm\" />,\n              }}\n              placement=\"bottom right\"\n              disabledKeys={['preview']}\n            />\n            {showWidgetViewerButton && (\n              <OpenWidgetViewerButton\n                aria-label={t('Open Widget Viewer')}\n                priority=\"link\"\n                size=\"zero\"\n                icon={<IconExpand size=\"xs\" />}\n                onClick={() => {\n                  (seriesData || tableData || issuesData) &&\n                    setData({\n                      seriesData,\n                      tableData,\n                      issuesData,\n                      pageLinks,\n                      totalIssuesCount,\n                    });\n                  openWidgetViewerPath(index);\n                }}\n              />\n            )}\n          </ContextWrapper>\n        )}\n      </WidgetViewerContext.Consumer>\n    );\n  }\n\n  if (\n    organization.features.includes('discover-basic') &&\n    widget.widgetType === WidgetType.DISCOVER\n  ) {\n    // Open Widget in Discover\n    if (widget.queries.length) {\n      const discoverPath = getWidgetDiscoverUrl(widget, selection, organization);\n      menuOptions.push({\n        key: 'open-in-discover',\n        label: t('Open in Discover'),\n        to: widget.queries.length === 1 ? discoverPath : undefined,\n        onAction: () => {\n          if (widget.queries.length === 1) {\n            trackAdvancedAnalyticsEvent('dashboards_views.open_in_discover.opened', {\n              organization,\n              widget_type: widget.displayType,\n            });\n            return;\n          }\n\n          trackAdvancedAnalyticsEvent('dashboards_views.query_selector.opened', {\n            organization,\n            widget_type: widget.displayType,\n          });\n          openDashboardWidgetQuerySelectorModal({organization, widget});\n        },\n      });\n    }\n  }\n\n  if (widget.widgetType === WidgetType.ISSUE) {\n    const issuesLocation = getWidgetIssueUrl(widget, selection, organization);\n\n    menuOptions.push({\n      key: 'open-in-issues',\n      label: t('Open in Issues'),\n      to: issuesLocation,\n    });\n  }\n\n  if (organization.features.includes('dashboards-edit')) {\n    menuOptions.push({\n      key: 'duplicate-widget',\n      label: t('Duplicate Widget'),\n      onAction: () => onDuplicate?.(),\n    });\n    widgetLimitReached && disabledKeys.push('duplicate-widget');\n\n    menuOptions.push({\n      key: 'edit-widget',\n      label: t('Edit Widget'),\n      onAction: () => onEdit?.(),\n    });\n\n    menuOptions.push({\n      key: 'delete-widget',\n      label: t('Delete Widget'),\n      priority: 'danger',\n      onAction: () => {\n        openConfirmModal({\n          message: t('Are you sure you want to delete this widget?'),\n          priority: 'danger',\n          onConfirm: () => onDelete?.(),\n        });\n      },\n    });\n  }\n\n  if (!menuOptions.length) {\n    return null;\n  }\n\n  return (\n    <WidgetViewerContext.Consumer>\n      {({setData}) => (\n        <ContextWrapper>\n          <Feature organization={organization} features={['dashboards-mep']}>\n            {isMetricsData === false && (\n              <StoredTag\n                tooltipText={t('This widget is only applicable to stored event data.')}\n              >\n                {t('Stored')}\n              </StoredTag>\n            )}\n          </Feature>\n          <StyledDropdownMenuControlV2\n            items={menuOptions}\n            triggerProps={{\n              'aria-label': t('Widget actions'),\n              size: 'xsmall',\n              borderless: true,\n              showChevron: false,\n              icon: <IconEllipsis direction=\"down\" size=\"sm\" />,\n            }}\n            placement=\"bottom right\"\n            disabledKeys={disabledKeys}\n          />\n          {showWidgetViewerButton && (\n            <OpenWidgetViewerButton\n              aria-label={t('Open Widget Viewer')}\n              priority=\"link\"\n              size=\"zero\"\n              icon={<IconExpand size=\"xs\" />}\n              onClick={() => {\n                setData({\n                  seriesData,\n                  tableData,\n                  issuesData,\n                  pageLinks,\n                  totalIssuesCount,\n                });\n                openWidgetViewerPath(widget.id ?? index);\n              }}\n            />\n          )}\n        </ContextWrapper>\n      )}\n    </WidgetViewerContext.Consumer>\n  );\n}\n\nexport default WidgetCardContextMenu;\n\nconst ContextWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  height: ${space(3)};\n  margin-left: ${space(1)};\n`;\n\nconst StyledDropdownMenuControlV2 = styled(DropdownMenuControlV2)`\n  & > button {\n    z-index: auto;\n  }\n`;\n\nconst OpenWidgetViewerButton = styled(Button)`\n  padding: ${space(0.75)} ${space(1)};\n  color: ${p => p.theme.textColor};\n  &:hover {\n    color: ${p => p.theme.textColor};\n    background: ${p => p.theme.surface400};\n    border-color: transparent;\n  }\n`;\n\nconst StoredTag = styled(Tag)`\n  margin-right: ${space(0.5)};\n`;\n","import {Component} from 'react';\nimport LazyLoad from 'react-lazyload';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {useSortable} from '@dnd-kit/sortable';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport {HeaderTitle} from 'sentry/components/charts/styles';\nimport DateTime from 'sentry/components/dateTime';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconCopy, IconDelete, IconEdit, IconGrabbable} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {statsPeriodToDays} from 'sentry/utils/dates';\nimport {TableDataRow, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {DRAG_HANDLE_CLASS} from '../dashboard';\nimport {DisplayType, Widget, WidgetType} from '../types';\nimport {DEFAULT_RESULTS_LIMIT} from '../widgetBuilder/utils';\n\nimport {DashboardsMEPConsumer, DashboardsMEPProvider} from './dashboardsMEPContext';\nimport WidgetCardChartContainer from './widgetCardChartContainer';\nimport WidgetCardContextMenu from './widgetCardContextMenu';\n\ntype DraggableProps = Pick<ReturnType<typeof useSortable>, 'attributes' | 'listeners'>;\n\ntype Props = WithRouterProps & {\n  api: Client;\n  currentWidgetDragging: boolean;\n  isEditing: boolean;\n  isSorting: boolean;\n  location: Location;\n  organization: Organization;\n  selection: PageFilters;\n  widget: Widget;\n  widgetLimitReached: boolean;\n  draggableProps?: DraggableProps;\n  hideToolbar?: boolean;\n  index?: string;\n  isMobile?: boolean;\n  isPreview?: boolean;\n  noLazyLoad?: boolean;\n  onDelete?: () => void;\n  onDuplicate?: () => void;\n  onEdit?: () => void;\n  renderErrorMessage?: (errorMessage?: string) => React.ReactNode;\n  showContextMenu?: boolean;\n  showStoredAlert?: boolean;\n  showWidgetViewerButton?: boolean;\n  tableItemLimit?: number;\n  windowWidth?: number;\n};\n\ntype State = {\n  issuesData?: TableDataRow[];\n  pageLinks?: string;\n  seriesData?: Series[];\n  tableData?: TableDataWithTitle[];\n  totalIssuesCount?: string;\n};\n\nconst METRICS_BACKED_SESSIONS_START_DATE = new Date('2022-04-12');\n\nclass WidgetCard extends Component<Props, State> {\n  state: State = {};\n  renderToolbar() {\n    const {\n      onEdit,\n      onDelete,\n      onDuplicate,\n      draggableProps,\n      hideToolbar,\n      isEditing,\n      isMobile,\n    } = this.props;\n\n    if (!isEditing) {\n      return null;\n    }\n\n    return (\n      <ToolbarPanel>\n        <IconContainer style={{visibility: hideToolbar ? 'hidden' : 'visible'}}>\n          {!isMobile && (\n            <GrabbableButton\n              size=\"xsmall\"\n              aria-label={t('Drag Widget')}\n              icon={<IconGrabbable />}\n              borderless\n              className={DRAG_HANDLE_CLASS}\n              {...draggableProps?.listeners}\n              {...draggableProps?.attributes}\n            />\n          )}\n          <Button\n            data-test-id=\"widget-edit\"\n            aria-label={t('Edit Widget')}\n            size=\"xsmall\"\n            borderless\n            onClick={onEdit}\n            icon={<IconEdit />}\n          />\n          <Button\n            aria-label={t('Duplicate Widget')}\n            size=\"xsmall\"\n            borderless\n            onClick={onDuplicate}\n            icon={<IconCopy />}\n          />\n          <Button\n            data-test-id=\"widget-delete\"\n            aria-label={t('Delete Widget')}\n            borderless\n            size=\"xsmall\"\n            onClick={onDelete}\n            icon={<IconDelete />}\n          />\n        </IconContainer>\n      </ToolbarPanel>\n    );\n  }\n\n  renderContextMenu() {\n    const {\n      widget,\n      selection,\n      organization,\n      showContextMenu,\n      isPreview,\n      widgetLimitReached,\n      onEdit,\n      onDuplicate,\n      onDelete,\n      isEditing,\n      showWidgetViewerButton,\n      router,\n      location,\n      index,\n    } = this.props;\n\n    const {seriesData, tableData, issuesData, pageLinks, totalIssuesCount} = this.state;\n\n    if (isEditing) {\n      return null;\n    }\n\n    return (\n      <WidgetCardContextMenu\n        organization={organization}\n        widget={widget}\n        selection={selection}\n        showContextMenu={showContextMenu}\n        isPreview={isPreview}\n        widgetLimitReached={widgetLimitReached}\n        onDuplicate={onDuplicate}\n        onEdit={onEdit}\n        onDelete={onDelete}\n        showWidgetViewerButton={showWidgetViewerButton}\n        router={router}\n        location={location}\n        index={index}\n        seriesData={seriesData}\n        tableData={tableData}\n        issuesData={issuesData}\n        pageLinks={pageLinks}\n        totalIssuesCount={totalIssuesCount}\n      />\n    );\n  }\n\n  setData = ({\n    tableResults,\n    timeseriesResults,\n    issuesResults,\n    totalIssuesCount,\n    pageLinks,\n  }: {\n    issuesResults?: TableDataRow[];\n    pageLinks?: string;\n    tableResults?: TableDataWithTitle[];\n    timeseriesResults?: Series[];\n    totalIssuesCount?: string;\n  }) => {\n    this.setState({\n      seriesData: timeseriesResults,\n      tableData: tableResults,\n      issuesData: issuesResults,\n      totalIssuesCount,\n      pageLinks,\n    });\n  };\n\n  render() {\n    const {\n      api,\n      organization,\n      selection,\n      widget,\n      isMobile,\n      renderErrorMessage,\n      tableItemLimit,\n      windowWidth,\n      noLazyLoad,\n      showStoredAlert,\n    } = this.props;\n\n    const {start, period} = selection.datetime;\n    let showIncompleteDataAlert: boolean = false;\n    if (widget.widgetType === WidgetType.RELEASE && showStoredAlert) {\n      if (start) {\n        let startDate: Date | undefined = undefined;\n        if (typeof start === 'string') {\n          startDate = new Date(start);\n        } else {\n          startDate = start;\n        }\n        showIncompleteDataAlert = startDate < METRICS_BACKED_SESSIONS_START_DATE;\n      } else if (period) {\n        const periodInDays = statsPeriodToDays(period);\n        const current = new Date();\n        const prior = new Date(new Date().setDate(current.getDate() - periodInDays));\n        showIncompleteDataAlert = prior < METRICS_BACKED_SESSIONS_START_DATE;\n      }\n    }\n    if (widget.displayType === DisplayType.TOP_N) {\n      const queries = widget.queries.map(query => ({\n        ...query,\n        // Use the last aggregate because that's where the y-axis is stored\n        aggregates: query.aggregates.length\n          ? [query.aggregates[query.aggregates.length - 1]]\n          : [],\n      }));\n      widget.queries = queries;\n      widget.limit = DEFAULT_RESULTS_LIMIT;\n    }\n    return (\n      <ErrorBoundary\n        customComponent={<ErrorCard>{t('Error loading widget data')}</ErrorCard>}\n      >\n        <DashboardsMEPProvider>\n          <WidgetCardPanel isDragging={false}>\n            <WidgetHeader>\n              <Tooltip\n                title={widget.title}\n                containerDisplayMode=\"grid\"\n                showOnlyOnOverflow\n              >\n                <WidgetTitle>{widget.title}</WidgetTitle>\n              </Tooltip>\n              {this.renderContextMenu()}\n            </WidgetHeader>\n            {noLazyLoad ? (\n              <WidgetCardChartContainer\n                api={api}\n                organization={organization}\n                selection={selection}\n                widget={widget}\n                isMobile={isMobile}\n                renderErrorMessage={renderErrorMessage}\n                tableItemLimit={tableItemLimit}\n                windowWidth={windowWidth}\n                onDataFetched={this.setData}\n              />\n            ) : (\n              <LazyLoad once resize height={200}>\n                <WidgetCardChartContainer\n                  api={api}\n                  organization={organization}\n                  selection={selection}\n                  widget={widget}\n                  isMobile={isMobile}\n                  renderErrorMessage={renderErrorMessage}\n                  tableItemLimit={tableItemLimit}\n                  windowWidth={windowWidth}\n                  onDataFetched={this.setData}\n                />\n              </LazyLoad>\n            )}\n            {this.renderToolbar()}\n          </WidgetCardPanel>\n          <Feature organization={organization} features={['dashboards-mep']}>\n            <DashboardsMEPConsumer>\n              {({isMetricsData}) =>\n                showStoredAlert &&\n                widget.widgetType === WidgetType.DISCOVER &&\n                isMetricsData === false && (\n                  <StoredDataAlert showIcon>\n                    {tct(\n                      \"Your selection is only applicable to [storedData: stored event data]. We've automatically adjusted your results.\",\n                      {\n                        storedData: <ExternalLink href=\"https://docs.sentry.io/\" />, // TODO(dashboards): Update the docs URL\n                      }\n                    )}\n                  </StoredDataAlert>\n                )\n              }\n            </DashboardsMEPConsumer>\n          </Feature>\n          <Feature organization={organization} features={['dashboards-releases']}>\n            {showIncompleteDataAlert && (\n              <StoredDataAlert showIcon>\n                {tct(\n                  'Releases data is only available from [date]. Data may be incomplete as a result.',\n                  {\n                    date: <DateTime date={METRICS_BACKED_SESSIONS_START_DATE} dateOnly />,\n                  }\n                )}\n              </StoredDataAlert>\n            )}\n          </Feature>\n        </DashboardsMEPProvider>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default withApi(withOrganization(withPageFilters(withRouter(WidgetCard))));\n\nconst ErrorCard = styled(Placeholder)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${p => p.theme.alert.error.backgroundLight};\n  border: 1px solid ${p => p.theme.alert.error.border};\n  color: ${p => p.theme.alert.error.textLight};\n  border-radius: ${p => p.theme.borderRadius};\n  margin-bottom: ${space(2)};\n`;\n\nexport const WidgetCardPanel = styled(Panel, {\n  shouldForwardProp: prop => prop !== 'isDragging',\n})<{\n  isDragging: boolean;\n}>`\n  margin: 0;\n  visibility: ${p => (p.isDragging ? 'hidden' : 'visible')};\n  /* If a panel overflows due to a long title stretch its grid sibling */\n  height: 100%;\n  min-height: 96px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ToolbarPanel = styled('div')`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2;\n\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-start;\n\n  background-color: ${p => p.theme.overlayBackgroundAlpha};\n  border-radius: ${p => p.theme.borderRadius};\n`;\n\nconst IconContainer = styled('div')`\n  display: flex;\n  margin: ${space(1)};\n  touch-action: none;\n`;\n\nconst GrabbableButton = styled(Button)`\n  cursor: grab;\n`;\n\nconst WidgetTitle = styled(HeaderTitle)`\n  ${p => p.theme.overflowEllipsis};\n  font-weight: normal;\n`;\n\nconst WidgetHeader = styled('div')`\n  padding: ${space(2)} ${space(1)} 0 ${space(3)};\n  min-height: 36px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst StoredDataAlert = styled(Alert)`\n  margin-top: ${space(1)};\n  margin-bottom: 0;\n`;\n","import {createContext} from 'react';\n\nimport {Series} from 'sentry/types/echarts';\nimport {TableDataRow, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\n\nexport type WidgetViewerContextProps = {\n  setData: (data: {\n    issuesData?: TableDataRow[];\n    pageLinks?: string;\n    seriesData?: Series[];\n    tableData?: TableDataWithTitle[];\n    totalIssuesCount?: string;\n  }) => void;\n  issuesData?: TableDataRow[];\n  pageLinks?: string;\n  seriesData?: Series[];\n  tableData?: TableDataWithTitle[];\n  totalIssuesCount?: string;\n};\n\nexport const WidgetViewerContext = createContext<WidgetViewerContextProps>({\n  setData: () => undefined,\n});\n","import styled from '@emotion/styled';\nimport {motion} from 'framer-motion';\n\nimport {Widget} from './types';\n\nconst WidgetWrapper = styled(motion.div)<{displayType: Widget['displayType']}>`\n  position: relative;\n  touch-action: manipulation;\n\n  ${p => {\n    switch (p.displayType) {\n      case 'big_number':\n        return `\n          /* 2 cols */\n          grid-area: span 1 / span 2;\n\n          @media (min-width: ${p.theme.breakpoints.small}) {\n            /* 4 cols */\n            grid-area: span 1 / span 1;\n          }\n\n          @media (min-width: ${p.theme.breakpoints.xlarge}) {\n            /* 6 and 8 cols */\n            grid-area: span 1 / span 2;\n          }\n        `;\n      default:\n        return `\n          /* 2, 4, 6 and 8 cols */\n          grid-area: span 2 / span 2;\n        `;\n    }\n  }};\n`;\n\nexport default WidgetWrapper;\n"],"names":["fetchDashboards","api","orgSlug","promise","requestPromise","method","query","sort","catch","response","errorResponse","responseJSON","errors","flattenErrors","addErrorMessage","Object","keys","t","createDashboard","orgId","newDashboard","duplicate","title","widgets","data","map","widget","omit","project","ALL_ACCESS_PROJECTS","updateDashboardVisit","dashboardId","fetchDashboard","updateDashboard","dashboard","id","deleteDashboard","validateWidget","generateOrderOptions","aggregates","columns","widgetType","widgetBuilderNewDesign","isRelease","WidgetType","options","equations","stripDerivedMetricsPrefix","filter","field","DISABLED_SORT","TAG_SORT_DENY_LIST","forEach","alias","label","stripEquationPrefix","isEquation","push","value","WidgetQueriesForm","Component","undefined","queryIndex","queries","onChange","this","props","widgetQuery","newQuery","componentWillUnmount","window","clearTimeout","blurTimeout","getFirstQueryError","key","find","queryError","renderSearchBar","organization","selection","slug","onSearch","setTimeout","handleFieldChange","projectIds","projects","StyledSearchBar","searchSource","conditions","fields","onBlur","useFormWrapper","maxQueryLength","MAX_QUERY_LENGTH","render","canAddSearchConditions","handleAddSearchConditions","handleDeleteQuery","displayType","fieldOptions","hideLegendAlias","includes","explodedFields","defined","explodeField","QueryWrapper","inline","style","paddingBottom","flexibleControlStateSize","stacked","error","SearchConditionsWrapper","LegendAliasInput","type","name","required","placeholder","event","target","length","size","borderless","onClick","preventDefault","icon","isCircled","getColumnsAndAggregatesAsStrings","fieldStrings","generateFieldAsString","cloneDeep","orderby","descending","startsWith","replace","prevFieldStrings","indexOf","marginBottom","space","option","SearchBar","Input","WidgetQueryFields","isReleaseWidget","doNotValidateYAxis","filterPrimaryOptions","DisplayType","FieldValueKind","kind","primaryOutput","aggregateFunctionOutputType","meta","isLegalYAxisType","filterMetricsOptions","filterAggregateParameters","fieldValue","functionName","function","dataType","hideAddYAxisButton","canDelete","padding","StyledColumnEditCollection","source","slice","Fragment","newFields","QueryFieldWrapper","generateFieldOptions","handleTopNChangeField","i","fieldIndex","handleChangeField","otherColumns","splice","handleRemove","Actions","ColumnEditCollection","ADD_WIDGET_BUTTON_DRAG_ID","initialStyles","x","y","scaleX","scaleY","AddWidget","onAddWidget","setNodeRef","transform","useSortable","disabled","transition","ref","layoutId","originX","originY","animate","duration","InnerWrapper","AddButton","color","Button","p","theme","border","borderRadius","DEFAULT_WIDGET_WIDTH","STORE_KEYS","generateWidgetId","index","constructGridItemKey","tempId","assignTempId","uniqueId","getMobileLayout","desktopLayout","layoutWidgetPairs","zip","sortBy","layout","w","h","getDashboardLayout","pickDefinedStoreKeys","pickBy","getDefaultWidgetHeight","getInitialColumnDepths","Array","NUM_DESKTOP_COLS","fill","calculateColumnDepths","layouts","depths","col","Math","max","getNextAvailablePosition","initialColumnDepths","height","columnDepths","maxColumnDepth","currDepth","start","end","every","val","assignDefaultLayout","nextPosition","nextColumnDepths","minH","enforceWidgetHeightValues","nextWidget","nextLayout","generateWidgetsAfterCompaction","compact","SortableWidget","dragId","isEditing","widgetLimitReached","onDelete","onEdit","onDuplicate","isPreview","isMobile","windowWidth","attributes","listeners","isDragging","currentWidgetDragging","isSorting","useEffect","document","body","cursor","widgetProps","hideToolbar","showContextMenu","showWidgetViewerButton","features","tableItemLimit","GridWidgetWrapper","draggableProps","boxShadow","zIndex","transformTemplate","___transform","generatedTransform","easings","withOrganization","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","ReleaseSearchBar","useApi","prepareQuery","searchQuery","getTagValues","tag","Promise","resolve","SESSION_STATUSES","projectIdStrings","String","fetchTagValues","then","tagValues","Error","supportedTags","values","SESSIONS_FILTER_TAGS","reduce","acc","css","onGetTagValues","memoize","dropdownClassName","MAX_MENU_HEIGHT","maxSearchItems","MAX_SEARCH_ITEMS","savedSearchType","SavedSearchType","hasRecentSearches","SmartSearchBar","DEFAULT_RESULTS_LIMIT","NEW_DASHBOARD_ID","DataSet","SortDirection","sortDirections","HIGH_TO_LOW","LOW_TO_HIGH","displayTypes","mapErrors","update","isArray","item","normalizeQueries","isTimeseriesChart","getIsTimeseriesChart","isTabularChart","Set","column","queryOrderBy","rawOrderBy","trimStart","orderBy","isEquationAlias","getEquationAliasIndex","getNumEquations","IssueSortOptions","isDescending","aggregate","aggregateOutputType","referenceAggregates","queryLoop","isEqual","getParsedDefaultWidgetQuery","urlSeachParams","URLSearchParams","parsedQuery","fromEntries","entries","getFields","fieldsString","split","getAmendedFieldOptions","measurements","tags","tagKeys","measurementKeys","spanOperationBreakdownKeys","SPAN_OP_BREAKDOWN_FIELDS","getResultsLimit","numQueries","numYAxes","floor","WidgetCardContextMenu","router","location","seriesData","tableData","issuesData","pageLinks","totalIssuesCount","isMetricsData","useDashboardsMEPContext","menuOptions","disabledKeys","openWidgetViewerPath","isWidgetViewerPath","pathname","endsWith","setData","ContextWrapper","StyledDropdownMenuControlV2","items","triggerProps","showChevron","direction","placement","OpenWidgetViewerButton","priority","discoverPath","getWidgetDiscoverUrl","to","onAction","trackAdvancedAnalyticsEvent","widget_type","openDashboardWidgetQuerySelectorModal","issuesLocation","getWidgetIssueUrl","openConfirmModal","message","onConfirm","StoredTag","tooltipText","DropdownMenuControlV2","textColor","surface400","Tag","METRICS_BACKED_SESSIONS_START_DATE","Date","WidgetCard","tableResults","timeseriesResults","issuesResults","setState","renderToolbar","ToolbarPanel","IconContainer","visibility","GrabbableButton","className","DRAG_HANDLE_CLASS","renderContextMenu","state","renderErrorMessage","noLazyLoad","showStoredAlert","period","datetime","showIncompleteDataAlert","startDate","periodInDays","statsPeriodToDays","current","setDate","getDate","limit","customComponent","ErrorCard","WidgetCardPanel","WidgetHeader","containerDisplayMode","showOnlyOnOverflow","WidgetTitle","onDataFetched","once","resize","StoredDataAlert","showIcon","tct","storedData","href","date","dateOnly","withApi","withPageFilters","withRouter","Placeholder","alert","backgroundLight","textLight","Panel","shouldForwardProp","prop","overlayBackgroundAlpha","HeaderTitle","overflowEllipsis","Alert","WidgetViewerContext","createContext","motion","breakpoints","small","xlarge"],"sourceRoot":""}