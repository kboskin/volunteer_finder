{"version":3,"file":"chunks/app_actionCreators_events_tsx-app_components_charts_areaChart_tsx-app_components_charts_loadi-460d62.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/events.tsx","webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/events/searchBar.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/utils/getPeriod.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/eventsV2/table/arithmeticInput.tsx","webpack:///./app/views/eventsV2/table/queryField.tsx"],"sourcesContent":["import {LocationDescriptor} from 'history';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'sentry/api';\nimport {canIncludePreviousPeriod} from 'sentry/components/charts/utils';\nimport {\n  DateString,\n  EventsStats,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\ntype Options = {\n  organization: OrganizationSummary;\n  partial: boolean;\n  comparisonDelta?: number;\n  end?: DateString;\n  environment?: Readonly<string[]>;\n  excludeOther?: boolean;\n  field?: string[];\n  generatePathname?: (org: OrganizationSummary) => string;\n  includePrevious?: boolean;\n  interval?: string;\n  limit?: number;\n  orderby?: string;\n  period?: string | null;\n  project?: Readonly<number[]>;\n  query?: string;\n  queryBatching?: QueryBatching;\n  queryExtras?: Record<string, string>;\n  referrer?: string;\n  start?: DateString;\n  team?: Readonly<string | string[]>;\n  topEvents?: number;\n  userModified?: string;\n  withoutZerofill?: boolean;\n  yAxis?: string | string[];\n};\n\n/**\n * Make requests to `events-stats` endpoint\n *\n * @param {Object} api API client instance\n * @param {Object} options Request parameters\n * @param {Object} options.organization Organization object\n * @param {Number[]} options.project List of project ids\n * @param {String[]} options.environment List of environments to query for\n * @param {Boolean} options.excludeOther Exclude the \"Other\" series when making a topEvents query\n * @param {String[]} options.team List of teams to query for\n * @param {String} options.period Time period to query for, in the format: <integer><units> where units are \"d\" or \"h\"\n * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are \"d\", \"h\", \"m\", \"s\"\n * @param {Number} options.comparisonDelta Comparison delta for change alert event stats to include comparison stats\n * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?\n * @param {Number} options.limit The number of rows to return\n * @param {String} options.query Search query\n * @param {QueryBatching} options.queryBatching A container for batching functions from a provider\n * @param {Record<string, string>} options.queryExtras A list of extra query parameters\n * @param {(org: OrganizationSummary) => string} options.generatePathname A function that returns an override for the pathname\n */\nexport const doEventsRequest = (\n  api: Client,\n  {\n    organization,\n    project,\n    environment,\n    team,\n    period,\n    start,\n    end,\n    interval,\n    comparisonDelta,\n    includePrevious,\n    query,\n    yAxis,\n    field,\n    topEvents,\n    orderby,\n    partial,\n    withoutZerofill,\n    referrer,\n    queryBatching,\n    generatePathname,\n    queryExtras,\n    excludeOther,\n    userModified,\n  }: Options\n): Promise<EventsStats | MultiSeriesEventsStats> => {\n  const pathname =\n    generatePathname?.(organization) ??\n    `/organizations/${organization.slug}/events-stats/`;\n\n  const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      interval,\n      comparisonDelta,\n      project,\n      environment,\n      team,\n      query,\n      yAxis,\n      field,\n      topEvents,\n      orderby,\n      partial: partial ? '1' : undefined,\n      withoutZerofill: withoutZerofill ? '1' : undefined,\n      referrer: referrer ? referrer : 'api.organization-event-stats',\n      excludeOther: excludeOther ? '1' : undefined,\n      user_modified: pathname.includes('events-stats') ? userModified : undefined,\n    }).filter(([, value]) => typeof value !== 'undefined')\n  );\n\n  // Doubling period for absolute dates is not accurate unless starting and\n  // ending times are the same (at least for daily intervals). This is\n  // the tradeoff for now.\n  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});\n\n  const queryObject = {\n    query: {\n      ...urlQuery,\n      ...periodObj,\n      ...queryExtras,\n    },\n  };\n\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, pathname, queryObject);\n  }\n\n  return api.requestPromise(pathname, queryObject);\n};\n\nexport type EventQuery = {\n  field: string[];\n  query: string;\n  environment?: string[];\n  equation?: string[];\n  noPagination?: boolean;\n  per_page?: number;\n  project?: string | string[];\n  referrer?: string;\n  sort?: string | string[];\n  team?: string | string[];\n};\n\nexport type TagSegment = {\n  count: number;\n  name: string;\n  url: LocationDescriptor;\n  value: string;\n  isOther?: boolean;\n  key?: string;\n};\n\nexport type Tag = {\n  key: string;\n  topValues: Array<TagSegment>;\n};\n\n/**\n * Fetches tag facets for a query\n */\nexport function fetchTagFacets(\n  api: Client,\n  orgSlug: string,\n  query: EventQuery\n): Promise<Tag[]> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {\n    query: queryOption,\n  });\n}\n\n/**\n * Fetches total count of events for a given query\n */\nexport function fetchTotalCount(\n  api: Client,\n  orgSlug: String,\n  query: EventQuery & LocationQuery\n): Promise<number> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  type Response = {\n    count: number;\n  };\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {\n      query: queryOption,\n    })\n    .then((res: Response) => res.count);\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type AreaChartSeries = Series & Omit<LineSeriesOption, 'data' | 'name'>;\n\nexport interface AreaChartProps extends Omit<ChartProps, 'series'> {\n  series: AreaChartSeries[];\n  stacked?: boolean;\n}\n\nexport function AreaChart({series, stacked, colors, ...props}: AreaChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      data-test-id=\"area-chart\"\n      colors={colors}\n      series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n        AreaSeries({\n          stack: stacked ? 'area' : undefined,\n          name: seriesName,\n          data: data.map(({name, value}) => [name, value]),\n          lineStyle: {\n            color: colors?.[i],\n            opacity: 1,\n            width: 0.4,\n          },\n          areaStyle: {\n            color: colors?.[i],\n            opacity: 1.0,\n          },\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n          ...otherSeriesProps,\n        })\n      )}\n    />\n  );\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\n\nexport default function AreaSeries(props: LineSeriesOption = {}): LineSeriesOption {\n  return LineSeries({\n    ...props,\n  });\n}\n","import styled from '@emotion/styled';\n\nimport LoadingMask from 'sentry/components/loadingMask';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  height?: string;\n}\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  getFieldDoc,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags, SEMVER_TAGS);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          getFieldDoc={getFieldDoc}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import styled from '@emotion/styled';\n\nexport interface LoadingMaskProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst LoadingMask = styled('div')<LoadingMaskProps>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import moment from 'moment';\n\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {DateString} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\n\ntype DateObject = {\n  /**\n   * Ending date object\n   */\n  end?: DateString;\n  /**\n   * Relative period string in format \"<int><unit>\" (e.g. 4d for 4 days)\n   */\n  period?: string | null;\n  /**\n   * Starting date object\n   */\n  start?: DateString;\n};\n\ntype Options = {\n  /**\n   * Doubles the given period (useful for getting previous period data)\n   */\n  shouldDoublePeriod?: boolean;\n};\n\n/**\n * Gets the period to query with if we need to double the initial period in order\n * to get data for the previous period\n *\n * Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})\n */\nexport function getPeriod(\n  {period, start, end}: DateObject,\n  {shouldDoublePeriod}: Options = {}\n) {\n  if (!period && !start && !end) {\n    period = DEFAULT_STATS_PERIOD;\n  }\n\n  // you can not specify both relative and absolute periods\n  // relative period takes precedence\n  if (period) {\n    if (!shouldDoublePeriod) {\n      return {statsPeriod: period};\n    }\n    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/)!;\n\n    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};\n  }\n\n  if (!start || !end) {\n    throw new Error('start and end required');\n  }\n\n  const formattedStart = getUtcDateString(start);\n  const formattedEnd = getUtcDateString(end);\n\n  if (shouldDoublePeriod) {\n    // get duration of end - start and double\n    const diff = moment(end).diff(moment(start));\n\n    const previousPeriodStart = moment(start).subtract(diff);\n\n    // This is not as accurate as having 2 start/end objs\n    return {\n      start: getUtcDateString(previousPeriodStart),\n      end: formattedEnd,\n    };\n  }\n\n  return {\n    start: formattedStart,\n    end: formattedEnd,\n  };\n}\n","import {Fragment} from 'react';\n\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {createRef, Fragment, HTMLProps, PureComponent} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport Input from 'sentry/components/forms/controls/input';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  Column,\n  generateFieldAsString,\n  isLegalEquationColumn,\n} from 'sentry/utils/discover/fields';\n\nconst NONE_SELECTED = -1;\n\ntype DropdownOption = {\n  active: boolean;\n  kind: 'field' | 'operator';\n  value: string;\n};\n\ntype DropdownOptionGroup = {\n  options: DropdownOption[];\n  title: string;\n};\n\ntype DefaultProps = {\n  options: Column[];\n};\n\ntype Props = DefaultProps &\n  HTMLProps<HTMLInputElement> & {\n    onUpdate: (value: string) => void;\n    value: string;\n    hideFieldOptions?: boolean;\n  };\n\ntype State = {\n  activeSelection: number;\n  dropdownOptionGroups: DropdownOptionGroup[];\n  dropdownVisible: boolean;\n  partialTerm: string | null;\n  query: string;\n  rawOptions: Column[];\n};\n\nexport default class ArithmeticInput extends PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    options: [],\n  };\n\n  static getDerivedStateFromProps(props: Readonly<Props>, state: State): State {\n    const changed = !isEqual(state.rawOptions, props.options);\n\n    if (changed) {\n      return {\n        ...state,\n        rawOptions: props.options,\n        dropdownOptionGroups: makeOptions(\n          props.options,\n          state.partialTerm,\n          props.hideFieldOptions\n        ),\n        activeSelection: NONE_SELECTED,\n      };\n    }\n\n    return {...state};\n  }\n\n  state: State = {\n    query: this.props.value,\n    partialTerm: null,\n    rawOptions: this.props.options,\n    dropdownVisible: false,\n    dropdownOptionGroups: makeOptions(\n      this.props.options,\n      null,\n      this.props.hideFieldOptions\n    ),\n    activeSelection: NONE_SELECTED,\n  };\n\n  input = createRef<HTMLInputElement>();\n\n  blur = () => {\n    this.input.current?.blur();\n  };\n\n  focus = (position: number) => {\n    this.input.current?.focus();\n    this.input.current?.setSelectionRange(position, position);\n  };\n\n  getCursorPosition(): number {\n    return this.input.current?.selectionStart ?? -1;\n  }\n\n  splitQuery() {\n    const {query} = this.state;\n    const currentPosition = this.getCursorPosition();\n\n    // The current term is delimited by whitespaces. So if no spaces are found,\n    // the entire string is taken to be 1 term.\n    //\n    // TODO: add support for when there are no spaces\n\n    const matches = [...query.substring(0, currentPosition).matchAll(/\\s|^/g)];\n    const match = matches[matches.length - 1];\n    const startOfTerm = match[0] === '' ? 0 : (match.index || 0) + 1;\n\n    const cursorOffset = query.slice(currentPosition).search(/\\s|$/);\n    const endOfTerm = currentPosition + (cursorOffset === -1 ? 0 : cursorOffset);\n\n    return {\n      startOfTerm,\n      endOfTerm,\n      prefix: query.substring(0, startOfTerm),\n      term: query.substring(startOfTerm, endOfTerm),\n      suffix: query.substring(endOfTerm),\n    };\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const query = event.target.value.replace('\\n', '');\n    this.setState({query}, this.updateAutocompleteOptions);\n  };\n\n  handleClick = () => {\n    this.updateAutocompleteOptions();\n  };\n\n  handleFocus = () => {\n    this.setState({dropdownVisible: true});\n  };\n\n  handleBlur = () => {\n    this.props.onUpdate(this.state.query);\n    this.setState({dropdownVisible: false});\n  };\n\n  getSelection(selection: number): DropdownOption | null {\n    const {dropdownOptionGroups} = this.state;\n\n    for (const group of dropdownOptionGroups) {\n      if (selection >= group.options.length) {\n        selection -= group.options.length;\n        continue;\n      }\n\n      return group.options[selection];\n    }\n\n    return null;\n  }\n\n  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const {key} = event;\n\n    const {options, hideFieldOptions} = this.props;\n    const {activeSelection, partialTerm} = this.state;\n    const startedSelection = activeSelection >= 0;\n\n    // handle arrow navigation\n    if (key === 'ArrowDown' || key === 'ArrowUp') {\n      event.preventDefault();\n\n      const newOptionGroups = makeOptions(options, partialTerm, hideFieldOptions);\n      const flattenedOptions = newOptionGroups.map(group => group.options).flat();\n      if (flattenedOptions.length === 0) {\n        return;\n      }\n\n      let newSelection;\n      if (!startedSelection) {\n        newSelection = key === 'ArrowUp' ? flattenedOptions.length - 1 : 0;\n      } else {\n        newSelection =\n          key === 'ArrowUp'\n            ? (activeSelection - 1 + flattenedOptions.length) % flattenedOptions.length\n            : (activeSelection + 1) % flattenedOptions.length;\n      }\n      // This is modifying the `active` value of the references so make sure to\n      // use `newOptionGroups` at the end.\n      flattenedOptions[newSelection].active = true;\n\n      this.setState({\n        activeSelection: newSelection,\n        dropdownOptionGroups: newOptionGroups,\n      });\n      return;\n    }\n\n    // handle selection\n    if (startedSelection && (key === 'Tab' || key === 'Enter')) {\n      event.preventDefault();\n\n      const selection = this.getSelection(activeSelection);\n      if (selection) {\n        this.handleSelect(selection);\n      }\n      return;\n    }\n\n    if (key === 'Enter') {\n      this.blur();\n      return;\n    }\n  };\n\n  handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    // Other keys are managed at handleKeyDown function\n    if (event.key !== 'Escape') {\n      return;\n    }\n\n    event.preventDefault();\n\n    const {activeSelection} = this.state;\n    const startedSelection = activeSelection >= 0;\n\n    if (!startedSelection) {\n      this.blur();\n      return;\n    }\n  };\n\n  handleSelect = (option: DropdownOption) => {\n    const {prefix, suffix} = this.splitQuery();\n\n    this.setState(\n      {\n        // make sure to insert a space after the autocompleted term\n        query: `${prefix}${option.value} ${suffix}`,\n        activeSelection: NONE_SELECTED,\n      },\n      () => {\n        // updating the query will cause the input to lose focus\n        // and make sure to move the cursor behind the space after\n        // the end of the autocompleted term\n        this.focus(prefix.length + option.value.length + 1);\n        this.updateAutocompleteOptions();\n      }\n    );\n  };\n\n  updateAutocompleteOptions() {\n    const {options, hideFieldOptions} = this.props;\n\n    const {term} = this.splitQuery();\n    const partialTerm = term || null;\n\n    this.setState({\n      dropdownOptionGroups: makeOptions(options, partialTerm, hideFieldOptions),\n      partialTerm,\n    });\n  }\n\n  render() {\n    const {onUpdate: _onUpdate, options: _options, as: _as, ...props} = this.props;\n    const {dropdownVisible, dropdownOptionGroups} = this.state;\n    return (\n      <Container isOpen={dropdownVisible}>\n        <StyledInput\n          {...props}\n          ref={this.input}\n          autoComplete=\"off\"\n          className=\"form-control\"\n          value={this.state.query}\n          onClick={this.handleClick}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n          onKeyDown={this.handleKeyDown}\n          spellCheck={false}\n        />\n        <TermDropdown\n          isOpen={dropdownVisible}\n          optionGroups={dropdownOptionGroups}\n          handleSelect={this.handleSelect}\n        />\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')<{isOpen: boolean}>`\n  border: 1px solid ${p => p.theme.border};\n  box-shadow: inset ${p => p.theme.dropShadowLight};\n  background: ${p => p.theme.background};\n  position: relative;\n\n  border-radius: ${p =>\n    p.isOpen\n      ? `${p.theme.borderRadius} ${p.theme.borderRadius} 0 0`\n      : p.theme.borderRadius};\n\n  .show-sidebar & {\n    background: ${p => p.theme.backgroundSecondary};\n  }\n`;\n\nconst StyledInput = styled(Input)`\n  height: 40px;\n  padding: 7px 10px;\n  border: 0;\n  box-shadow: none;\n\n  &:hover,\n  &:focus {\n    border: 0;\n    box-shadow: none;\n  }\n`;\n\ntype TermDropdownProps = {\n  handleSelect: (option: DropdownOption) => void;\n  isOpen: boolean;\n  optionGroups: DropdownOptionGroup[];\n};\n\nfunction TermDropdown({isOpen, optionGroups, handleSelect}: TermDropdownProps) {\n  return (\n    <DropdownContainer isOpen={isOpen}>\n      <DropdownItemsList>\n        {optionGroups.map(group => {\n          const {title, options} = group;\n          return (\n            <Fragment key={title}>\n              <ListItem>\n                <DropdownTitle>{title}</DropdownTitle>\n              </ListItem>\n              {options.map(option => {\n                return (\n                  <DropdownListItem\n                    key={option.value}\n                    className={option.active ? 'active' : undefined}\n                    onClick={() => handleSelect(option)}\n                    // prevent the blur event on the input from firing\n                    onMouseDown={event => event.preventDefault()}\n                    // scroll into view if it is the active element\n                    ref={element =>\n                      option.active && element?.scrollIntoView?.({block: 'nearest'})\n                    }\n                  >\n                    <DropdownItemTitleWrapper>{option.value}</DropdownItemTitleWrapper>\n                  </DropdownListItem>\n                );\n              })}\n              {options.length === 0 && <Info>{t('No items found')}</Info>}\n            </Fragment>\n          );\n        })}\n      </DropdownItemsList>\n    </DropdownContainer>\n  );\n}\n\nfunction makeFieldOptions(\n  columns: Column[],\n  partialTerm: string | null\n): DropdownOptionGroup {\n  const fieldValues = new Set<string>();\n  const options = columns\n    .filter(({kind}) => kind !== 'equation')\n    .filter(isLegalEquationColumn)\n    .map(option => ({\n      kind: 'field' as const,\n      active: false,\n      value: generateFieldAsString(option),\n    }))\n    .filter(({value}) => {\n      if (fieldValues.has(value)) {\n        return false;\n      }\n      fieldValues.add(value);\n      return true;\n    })\n    .filter(({value}) => (partialTerm ? value.includes(partialTerm) : true));\n\n  return {\n    title: 'Fields',\n    options,\n  };\n}\n\nfunction makeOperatorOptions(partialTerm: string | null): DropdownOptionGroup {\n  const options = ['+', '-', '*', '/', '(', ')']\n    .filter(operator => (partialTerm ? operator.includes(partialTerm) : true))\n    .map(operator => ({\n      kind: 'operator' as const,\n      active: false,\n      value: operator,\n    }));\n\n  return {\n    title: 'Operators',\n    options,\n  };\n}\n\nfunction makeOptions(\n  columns: Column[],\n  partialTerm: string | null,\n  hideFieldOptions?: boolean\n): DropdownOptionGroup[] {\n  if (hideFieldOptions) {\n    return [makeOperatorOptions(partialTerm)];\n  }\n\n  return [makeFieldOptions(columns, partialTerm), makeOperatorOptions(partialTerm)];\n}\n\nconst DropdownContainer = styled('div')<{isOpen: boolean}>`\n  /* Container has a border that we need to account for */\n  display: ${p => (p.isOpen ? 'block' : 'none')};\n  position: absolute;\n  top: 100%;\n  left: -1px;\n  right: -1px;\n  z-index: ${p => p.theme.zIndex.dropdown};\n  background: ${p => p.theme.background};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadiusBottom};\n  max-height: 300px;\n  overflow-y: auto;\n`;\n\nconst DropdownItemsList = styled('ul')`\n  padding-left: 0;\n  list-style: none;\n  margin-bottom: 0;\n`;\n\nconst ListItem = styled('li')`\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n\nconst DropdownTitle = styled('header')`\n  display: flex;\n  align-items: center;\n\n  background-color: ${p => p.theme.backgroundSecondary};\n  color: ${p => p.theme.gray300};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  margin: 0;\n  padding: ${space(1)} ${space(2)};\n\n  & > svg {\n    margin-right: ${space(1)};\n  }\n`;\n\nconst DropdownListItem = styled(ListItem)`\n  scroll-margin: 40px 0;\n  font-size: ${p => p.theme.fontSizeLarge};\n  padding: ${space(1)} ${space(2)};\n  cursor: pointer;\n\n  &:hover,\n  &.active {\n    background: ${p => p.theme.hover};\n  }\n`;\n\nconst DropdownItemTitleWrapper = styled('div')`\n  color: ${p => p.theme.textColor};\n  font-weight: normal;\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  line-height: ${p => p.theme.text.lineHeightHeading};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst Info = styled('div')`\n  display: flex;\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeLarge};\n  color: ${p => p.theme.gray300};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n`;\n","import {Component, createRef} from 'react';\nimport {components, SingleValueProps} from 'react-select';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport Input, {InputProps} from 'sentry/components/forms/controls/input';\nimport SelectControl, {ControlProps} from 'sentry/components/forms/selectControl';\nimport Tag from 'sentry/components/tag';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {pulse} from 'sentry/styles/animations';\nimport space from 'sentry/styles/space';\nimport {SelectValue} from 'sentry/types';\nimport {\n  AggregateParameter,\n  AggregationKey,\n  AGGREGATIONS,\n  Column,\n  ColumnType,\n  DEPRECATED_FIELDS,\n  QueryFieldValue,\n  ValidateColumnTypes,\n} from 'sentry/utils/discover/fields';\nimport {SESSIONS_OPERATIONS} from 'sentry/views/dashboardsV2/widgetBuilder/releaseWidget/fields';\n\nimport ArithmeticInput from './arithmeticInput';\nimport {FieldValue, FieldValueColumns, FieldValueKind} from './types';\n\nexport type FieldValueOption = SelectValue<FieldValue>;\n\ntype FieldOptions = Record<string, FieldValueOption>;\n\n// Intermediate type that combines the current column\n// data with the AggregateParameter type.\ntype ParameterDescription =\n  | {\n      dataType: ColumnType;\n      kind: 'value';\n      required: boolean;\n      value: string;\n      placeholder?: string;\n    }\n  | {\n      kind: 'column';\n      options: FieldValueOption[];\n      required: boolean;\n      value: FieldValue | null;\n    }\n  | {\n      dataType: string;\n      kind: 'dropdown';\n      options: SelectValue<string>[];\n      required: boolean;\n      value: string;\n      placeholder?: string;\n    };\n\ntype Props = {\n  fieldOptions: FieldOptions;\n  fieldValue: QueryFieldValue;\n  onChange: (fieldValue: QueryFieldValue) => void;\n  className?: string;\n  disabled?: boolean;\n  error?: string;\n  /**\n   * Function to filter the options that are used as parameters for function/aggregate.\n   */\n  filterAggregateParameters?: (option: FieldValueOption) => boolean;\n  /**\n   * Filter the options in the primary selector. Useful if you only want to\n   * show a subset of selectable items.\n   *\n   * NOTE: This is different from passing an already filtered fieldOptions\n   * list, as tag items in the list may be used as parameters to functions.\n   */\n  filterPrimaryOptions?: (option: FieldValueOption) => boolean;\n  /**\n   * The number of columns to render. Columns that do not have a parameter will\n   * render an empty parameter placeholder. Leave blank to avoid adding spacers.\n   */\n  gridColumns?: number;\n  hideParameterSelector?: boolean;\n  hidePrimarySelector?: boolean;\n  /**\n   * Whether or not to add labels inside of the input fields, currently only\n   * used for the metric alert builder.\n   */\n  inFieldLabels?: boolean;\n  /**\n   * This will be displayed in the select if there are no fields\n   */\n  noFieldsMessage?: string;\n  otherColumns?: Column[];\n  placeholder?: string;\n  /**\n   * Whether or not to add the tag explaining the FieldValueKind of each field\n   */\n  shouldRenderTag?: boolean;\n  skipParameterPlaceholder?: boolean;\n  takeFocus?: boolean;\n};\n\n// Type for completing generics in react-select\ntype OptionType = {\n  label: string;\n  value: FieldValue;\n};\n\nclass QueryField extends Component<Props> {\n  FieldSelectComponents = {\n    SingleValue: ({data, ...props}: SingleValueProps<OptionType>) => {\n      return (\n        <components.SingleValue data={data} {...props}>\n          <span data-test-id=\"label\">{data.label}</span>\n          {data.value && this.renderTag(data.value.kind, data.label)}\n        </components.SingleValue>\n      );\n    },\n  };\n\n  FieldSelectStyles = {\n    singleValue(provided: React.CSSProperties) {\n      const custom = {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        width: 'calc(100% - 10px)',\n      };\n      return {...provided, ...custom};\n    },\n  };\n\n  handleFieldChange = (selected?: FieldValueOption | null) => {\n    if (!selected) {\n      return;\n    }\n    const {value} = selected;\n    const current = this.props.fieldValue;\n    let fieldValue: QueryFieldValue = cloneDeep(this.props.fieldValue);\n\n    switch (value.kind) {\n      case FieldValueKind.TAG:\n      case FieldValueKind.MEASUREMENT:\n      case FieldValueKind.BREAKDOWN:\n      case FieldValueKind.FIELD:\n        fieldValue = {kind: 'field', field: value.meta.name};\n        break;\n      case FieldValueKind.NUMERIC_METRICS:\n        fieldValue = {\n          kind: 'calculatedField',\n          field: value.meta.name,\n        };\n        break;\n      case FieldValueKind.FUNCTION:\n        if (current.kind === 'function') {\n          fieldValue = {\n            kind: 'function',\n            function: [\n              value.meta.name as AggregationKey,\n              current.function[1],\n              current.function[2],\n              current.function[3],\n            ],\n          };\n        } else {\n          fieldValue = {\n            kind: 'function',\n            function: [value.meta.name as AggregationKey, '', undefined, undefined],\n          };\n        }\n        break;\n      case FieldValueKind.EQUATION:\n        fieldValue = {\n          kind: 'equation',\n          field: value.meta.name,\n          alias: value.meta.name,\n        };\n        break;\n      default:\n        throw new Error('Invalid field type found in column picker');\n    }\n\n    if (value.kind === FieldValueKind.FUNCTION) {\n      value.meta.parameters.forEach((param: AggregateParameter, i: number) => {\n        if (fieldValue.kind !== 'function') {\n          return;\n        }\n        if (param.kind === 'column') {\n          const field = this.getFieldOrTagOrMeasurementValue(fieldValue.function[i + 1]);\n          if (field === null) {\n            fieldValue.function[i + 1] = param.defaultValue || '';\n          } else if (\n            (field.kind === FieldValueKind.FIELD ||\n              field.kind === FieldValueKind.TAG ||\n              field.kind === FieldValueKind.MEASUREMENT ||\n              field.kind === FieldValueKind.METRICS ||\n              field.kind === FieldValueKind.BREAKDOWN) &&\n            validateColumnTypes(param.columnTypes as ValidateColumnTypes, field)\n          ) {\n            // New function accepts current field.\n            fieldValue.function[i + 1] = field.meta.name;\n          } else {\n            // field does not fit within new function requirements, use the default.\n            fieldValue.function[i + 1] = param.defaultValue || '';\n            fieldValue.function[i + 2] = undefined;\n            fieldValue.function[i + 3] = undefined;\n          }\n        } else {\n          fieldValue.function[i + 1] = param.defaultValue || '';\n        }\n      });\n\n      if (fieldValue.kind === 'function') {\n        if (value.meta.parameters.length === 0) {\n          fieldValue.function = [fieldValue.function[0], '', undefined, undefined];\n        } else if (value.meta.parameters.length === 1) {\n          fieldValue.function[2] = undefined;\n          fieldValue.function[3] = undefined;\n        } else if (value.meta.parameters.length === 2) {\n          fieldValue.function[3] = undefined;\n        }\n      }\n    }\n\n    this.triggerChange(fieldValue);\n  };\n\n  handleEquationChange = (value: string) => {\n    const newColumn = cloneDeep(this.props.fieldValue);\n    if (newColumn.kind === FieldValueKind.EQUATION) {\n      newColumn.field = value;\n    }\n    this.triggerChange(newColumn);\n  };\n\n  handleFieldParameterChange = ({value}) => {\n    const newColumn = cloneDeep(this.props.fieldValue);\n    if (newColumn.kind === 'function') {\n      newColumn.function[1] = value.meta.name;\n    }\n    this.triggerChange(newColumn);\n  };\n\n  handleDropdownParameterChange = (index: number) => {\n    return (value: SelectValue<string>) => {\n      const newColumn = cloneDeep(this.props.fieldValue);\n      if (newColumn.kind === 'function') {\n        newColumn.function[index] = value.value;\n      }\n      this.triggerChange(newColumn);\n    };\n  };\n\n  handleScalarParameterChange = (index: number) => {\n    return (value: string) => {\n      const newColumn = cloneDeep(this.props.fieldValue);\n      if (newColumn.kind === 'function') {\n        newColumn.function[index] = value;\n      }\n      this.triggerChange(newColumn);\n    };\n  };\n\n  triggerChange(fieldValue: QueryFieldValue) {\n    this.props.onChange(fieldValue);\n  }\n\n  getFieldOrTagOrMeasurementValue(name: string | undefined): FieldValue | null {\n    const {fieldOptions} = this.props;\n    if (name === undefined) {\n      return null;\n    }\n\n    const fieldName = `field:${name}`;\n    if (fieldOptions[fieldName]) {\n      return fieldOptions[fieldName].value;\n    }\n\n    const measurementName = `measurement:${name}`;\n    if (fieldOptions[measurementName]) {\n      return fieldOptions[measurementName].value;\n    }\n\n    const spanOperationBreakdownName = `span_op_breakdown:${name}`;\n    if (fieldOptions[spanOperationBreakdownName]) {\n      return fieldOptions[spanOperationBreakdownName].value;\n    }\n\n    const equationName = `equation:${name}`;\n    if (fieldOptions[equationName]) {\n      return fieldOptions[equationName].value;\n    }\n\n    const tagName =\n      name.indexOf('tags[') === 0\n        ? `tag:${name.replace(/tags\\[(.*?)\\]/, '$1')}`\n        : `tag:${name}`;\n\n    if (fieldOptions[tagName]) {\n      return fieldOptions[tagName].value;\n    }\n\n    // Likely a tag that was deleted but left behind in a saved query\n    // Cook up a tag option so select control works.\n    if (name.length > 0) {\n      return {\n        kind: FieldValueKind.TAG,\n        meta: {\n          name,\n          dataType: 'string',\n          unknown: true,\n        },\n      };\n    }\n    return null;\n  }\n\n  getFieldData() {\n    let field: FieldValue | null = null;\n\n    const {fieldValue} = this.props;\n    let {fieldOptions} = this.props;\n\n    if (fieldValue?.kind === 'function') {\n      const funcName = `function:${fieldValue.function[0]}`;\n      if (fieldOptions[funcName] !== undefined) {\n        field = fieldOptions[funcName].value;\n      }\n    }\n\n    if (fieldValue?.kind === 'field' || fieldValue?.kind === 'calculatedField') {\n      field = this.getFieldOrTagOrMeasurementValue(fieldValue.field);\n      fieldOptions = this.appendFieldIfUnknown(fieldOptions, field);\n    }\n\n    let parameterDescriptions: ParameterDescription[] = [];\n    // Generate options and values for each parameter.\n    if (\n      field &&\n      field.kind === FieldValueKind.FUNCTION &&\n      field.meta.parameters.length > 0 &&\n      fieldValue?.kind === FieldValueKind.FUNCTION\n    ) {\n      parameterDescriptions = field.meta.parameters.map(\n        (param, index: number): ParameterDescription => {\n          if (param.kind === 'column') {\n            const fieldParameter = this.getFieldOrTagOrMeasurementValue(\n              fieldValue.function[1]\n            );\n            fieldOptions = this.appendFieldIfUnknown(fieldOptions, fieldParameter);\n            return {\n              kind: 'column',\n              value: fieldParameter,\n              required: param.required,\n              options: Object.values(fieldOptions).filter(\n                ({value}) =>\n                  (value.kind === FieldValueKind.FIELD ||\n                    value.kind === FieldValueKind.TAG ||\n                    value.kind === FieldValueKind.MEASUREMENT ||\n                    value.kind === FieldValueKind.METRICS ||\n                    value.kind === FieldValueKind.BREAKDOWN) &&\n                  validateColumnTypes(param.columnTypes as ValidateColumnTypes, value)\n              ),\n            };\n          }\n          if (param.kind === 'dropdown') {\n            return {\n              kind: 'dropdown',\n              options: param.options,\n              dataType: param.dataType,\n              required: param.required,\n              value:\n                (fieldValue.kind === 'function' && fieldValue.function[index + 1]) ||\n                param.defaultValue ||\n                '',\n            };\n          }\n\n          return {\n            kind: 'value',\n            value:\n              (fieldValue.kind === 'function' && fieldValue.function[index + 1]) ||\n              param.defaultValue ||\n              '',\n            dataType: param.dataType,\n            required: param.required,\n            placeholder: param.placeholder,\n          };\n        }\n      );\n    }\n    return {field, fieldOptions, parameterDescriptions};\n  }\n\n  appendFieldIfUnknown(\n    fieldOptions: FieldOptions,\n    field: FieldValue | null\n  ): FieldOptions {\n    if (!field) {\n      return fieldOptions;\n    }\n\n    if (field && field.kind === FieldValueKind.TAG && field.meta.unknown) {\n      // Clone the options so we don't mutate other rows.\n      fieldOptions = Object.assign({}, fieldOptions);\n      fieldOptions[field.meta.name] = {label: field.meta.name, value: field};\n    }\n\n    return fieldOptions;\n  }\n\n  renderParameterInputs(parameters: ParameterDescription[]): React.ReactNode[] {\n    const {\n      disabled,\n      inFieldLabels,\n      filterAggregateParameters,\n      hideParameterSelector,\n      skipParameterPlaceholder,\n    } = this.props;\n\n    const inputs = parameters.map((descriptor: ParameterDescription, index: number) => {\n      if (descriptor.kind === 'column' && descriptor.options.length > 0) {\n        if (hideParameterSelector) {\n          return null;\n        }\n        const aggregateParameters = filterAggregateParameters\n          ? descriptor.options.filter(filterAggregateParameters)\n          : descriptor.options;\n\n        aggregateParameters.forEach(opt => {\n          opt.trailingItems = this.renderTag(opt.value.kind, String(opt.label));\n        });\n\n        return (\n          <SelectControl\n            key=\"select\"\n            name=\"parameter\"\n            menuPlacement=\"auto\"\n            placeholder={t('Select value')}\n            options={aggregateParameters}\n            value={descriptor.value}\n            required={descriptor.required}\n            onChange={this.handleFieldParameterChange}\n            inFieldLabel={inFieldLabels ? t('Parameter: ') : undefined}\n            disabled={disabled}\n            styles={!inFieldLabels ? this.FieldSelectStyles : undefined}\n            components={this.FieldSelectComponents}\n          />\n        );\n      }\n      if (descriptor.kind === 'value') {\n        const inputProps = {\n          required: descriptor.required,\n          value: descriptor.value,\n          onUpdate: this.handleScalarParameterChange(index + 1),\n          placeholder: descriptor.placeholder,\n          disabled,\n        };\n        switch (descriptor.dataType) {\n          case 'number':\n            return (\n              <BufferedInput\n                name=\"refinement\"\n                key=\"parameter:number\"\n                type=\"text\"\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*(\\.[0-9]*)?\"\n                {...inputProps}\n              />\n            );\n          case 'integer':\n            return (\n              <BufferedInput\n                name=\"refinement\"\n                key=\"parameter:integer\"\n                type=\"text\"\n                inputMode=\"numeric\"\n                pattern=\"[0-9]*\"\n                {...inputProps}\n              />\n            );\n          default:\n            return (\n              <BufferedInput\n                name=\"refinement\"\n                key=\"parameter:text\"\n                type=\"text\"\n                {...inputProps}\n              />\n            );\n        }\n      }\n      if (descriptor.kind === 'dropdown') {\n        return (\n          <SelectControl\n            key=\"dropdown\"\n            name=\"dropdown\"\n            menuPlacement=\"auto\"\n            placeholder={t('Select value')}\n            options={descriptor.options}\n            value={descriptor.value}\n            required={descriptor.required}\n            onChange={this.handleDropdownParameterChange(index + 1)}\n            inFieldLabel={inFieldLabels ? t('Parameter: ') : undefined}\n            disabled={disabled}\n          />\n        );\n      }\n      throw new Error(`Unknown parameter type encountered for ${this.props.fieldValue}`);\n    });\n\n    if (skipParameterPlaceholder) {\n      return inputs;\n    }\n\n    // Add enough disabled inputs to fill the grid up.\n    // We always have 1 input.\n    const {gridColumns} = this.props;\n    const requiredInputs = (gridColumns ?? inputs.length + 1) - inputs.length - 1;\n    if (gridColumns !== undefined && requiredInputs > 0) {\n      for (let i = 0; i < requiredInputs; i++) {\n        inputs.push(<BlankSpace key={i} />);\n      }\n    }\n\n    return inputs;\n  }\n\n  renderTag(kind: FieldValueKind, label: string) {\n    const {shouldRenderTag} = this.props;\n    if (shouldRenderTag === false) {\n      return null;\n    }\n    let text, tagType;\n    switch (kind) {\n      case FieldValueKind.FUNCTION:\n        text = 'f(x)';\n        tagType = 'success';\n        break;\n      case FieldValueKind.MEASUREMENT:\n        text = 'field';\n        tagType = 'highlight';\n        break;\n      case FieldValueKind.BREAKDOWN:\n        text = 'field';\n        tagType = 'highlight';\n        break;\n      case FieldValueKind.TAG:\n        text = kind;\n        tagType = 'warning';\n        break;\n      case FieldValueKind.NUMERIC_METRICS:\n        text = 'f(x)';\n        tagType = 'success';\n        break;\n      case FieldValueKind.FIELD:\n      case FieldValueKind.METRICS:\n        text = DEPRECATED_FIELDS.includes(label) ? 'deprecated' : 'field';\n        tagType = 'highlight';\n        break;\n      default:\n        text = kind;\n    }\n    return <Tag type={tagType}>{text}</Tag>;\n  }\n\n  render() {\n    const {\n      className,\n      takeFocus,\n      filterPrimaryOptions,\n      fieldValue,\n      inFieldLabels,\n      disabled,\n      error,\n      hidePrimarySelector,\n      gridColumns,\n      otherColumns,\n      placeholder,\n      noFieldsMessage,\n      skipParameterPlaceholder,\n    } = this.props;\n    const {field, fieldOptions, parameterDescriptions} = this.getFieldData();\n\n    const allFieldOptions = filterPrimaryOptions\n      ? Object.values(fieldOptions).filter(filterPrimaryOptions)\n      : Object.values(fieldOptions);\n\n    allFieldOptions.forEach(opt => {\n      opt.trailingItems = this.renderTag(opt.value.kind, String(opt.label));\n    });\n\n    const selectProps: ControlProps<FieldValueOption> = {\n      name: 'field',\n      options: Object.values(allFieldOptions),\n      placeholder: placeholder ?? t('(Required)'),\n      value: field,\n      onChange: this.handleFieldChange,\n      inFieldLabel: inFieldLabels ? t('Function: ') : undefined,\n      disabled,\n      noOptionsMessage: () => noFieldsMessage,\n      menuPlacement: 'auto',\n    };\n    if (takeFocus && field === null) {\n      selectProps.autoFocus = true;\n    }\n\n    const parameters = this.renderParameterInputs(parameterDescriptions);\n\n    if (fieldValue?.kind === FieldValueKind.EQUATION) {\n      return (\n        <Container\n          className={className}\n          gridColumns={1}\n          tripleLayout={false}\n          error={error !== undefined}\n        >\n          <ArithmeticInput\n            name=\"arithmetic\"\n            key=\"parameter:text\"\n            type=\"text\"\n            required\n            value={fieldValue.field}\n            onUpdate={this.handleEquationChange}\n            options={otherColumns}\n            placeholder={t('Equation')}\n          />\n          {error ? (\n            <ArithmeticError title={error}>\n              <IconWarning color=\"red300\" />\n            </ArithmeticError>\n          ) : null}\n        </Container>\n      );\n    }\n\n    // if there's more than 2 parameters, set gridColumns to 2 so they go onto the next line instead\n    const containerColumns =\n      parameters.length > 2 ? 2 : gridColumns ? gridColumns : parameters.length + 1;\n\n    let gridColumnsQuantity: undefined | number = undefined;\n\n    if (skipParameterPlaceholder) {\n      // if the selected field is a function and has parameters, we would like to display each value in separate columns.\n      // Otherwise the field should be displayed in a column, taking up all available space and not displaying the \"no parameter\" field\n      if (fieldValue.kind !== 'function') {\n        gridColumnsQuantity = 1;\n      } else {\n        const operation =\n          AGGREGATIONS[fieldValue.function[0]] ??\n          SESSIONS_OPERATIONS[fieldValue.function[0]];\n        if (operation.parameters.length > 0) {\n          if (containerColumns === 3 && operation.parameters.length === 1) {\n            gridColumnsQuantity = 2;\n          } else {\n            gridColumnsQuantity = containerColumns;\n          }\n        } else {\n          gridColumnsQuantity = 1;\n        }\n      }\n    }\n\n    return (\n      <Container\n        className={className}\n        gridColumns={gridColumnsQuantity ?? containerColumns}\n        tripleLayout={gridColumns === 3 && parameters.length > 2}\n      >\n        {!hidePrimarySelector && (\n          <SelectControl\n            {...selectProps}\n            styles={!inFieldLabels ? this.FieldSelectStyles : undefined}\n            components={this.FieldSelectComponents}\n          />\n        )}\n        {parameters}\n      </Container>\n    );\n  }\n}\n\nfunction validateColumnTypes(\n  columnTypes: ValidateColumnTypes,\n  input: FieldValueColumns\n): boolean {\n  if (typeof columnTypes === 'function') {\n    return columnTypes({name: input.meta.name, dataType: input.meta.dataType});\n  }\n\n  return (columnTypes as string[]).includes(input.meta.dataType);\n}\n\nconst Container = styled('div')<{\n  gridColumns: number;\n  tripleLayout: boolean;\n  error?: boolean;\n}>`\n  display: grid;\n  ${p =>\n    p.tripleLayout\n      ? `grid-template-columns: 1fr 2fr;`\n      : `grid-template-columns: repeat(${p.gridColumns}, 1fr) ${p.error ? 'auto' : ''};`}\n  gap: ${space(1)};\n  align-items: center;\n\n  flex-grow: 1;\n`;\n\ninterface BufferedInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  onUpdate: (value: string) => void;\n  value: string;\n}\ntype InputState = {value: string};\n\n/**\n * Because controlled inputs fire onChange on every key stroke,\n * we can't update the QueryField that often as it would re-render\n * the input elements causing focus to be lost.\n *\n * Using a buffered input lets us throttle rendering and enforce data\n * constraints better.\n */\nclass BufferedInput extends Component<BufferedInputProps, InputState> {\n  constructor(props: BufferedInputProps) {\n    super(props);\n    this.input = createRef();\n  }\n\n  state: InputState = {\n    value: this.props.value,\n  };\n\n  private input: React.RefObject<HTMLInputElement>;\n\n  get isValid() {\n    if (!this.input.current) {\n      return true;\n    }\n    return this.input.current.validity.valid;\n  }\n\n  handleBlur = () => {\n    if (this.props.required && this.state.value === '') {\n      // Handle empty strings separately because we don't pass required\n      // to input elements, causing isValid to return true\n      this.setState({value: this.props.value});\n    } else if (this.isValid) {\n      this.props.onUpdate(this.state.value);\n    } else {\n      this.setState({value: this.props.value});\n    }\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (this.isValid) {\n      this.setState({value: event.target.value});\n    }\n  };\n\n  render() {\n    const {onUpdate: _, ...props} = this.props;\n    return (\n      <StyledInput\n        {...props}\n        ref={this.input}\n        className=\"form-control\"\n        value={this.state.value}\n        onChange={this.handleChange}\n        onBlur={this.handleBlur}\n      />\n    );\n  }\n}\n\n// Set a min-width to allow shrinkage in grid.\nconst StyledInput = styled(Input)<InputProps>`\n  /* Match the height of the select boxes */\n  height: 41px;\n  min-width: 50px;\n`;\n\nconst BlankSpace = styled('div')`\n  /* Match the height of the select boxes */\n  height: 41px;\n  min-width: 50px;\n  background: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:after {\n    font-size: ${p => p.theme.fontSizeMedium};\n    content: '${t('No parameter')}';\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nconst ArithmeticError = styled(Tooltip)`\n  color: ${p => p.theme.red300};\n  animation: ${() => pulse(1.15)} 1s ease infinite;\n  display: flex;\n`;\n\nexport {QueryField};\n"],"names":["doEventsRequest","api","organization","project","environment","team","period","start","end","interval","comparisonDelta","includePrevious","query","yAxis","field","topEvents","orderby","partial","withoutZerofill","referrer","queryBatching","generatePathname","queryExtras","excludeOther","userModified","pathname","slug","shouldDoublePeriod","canIncludePreviousPeriod","queryObject","Object","fromEntries","entries","undefined","user_modified","includes","filter","value","getPeriod","batchRequest","requestPromise","fetchTagFacets","orgSlug","queryOption","pick","values","PERFORMANCE_URL_PARAM","fetchTotalCount","then","res","count","AreaChart","series","stacked","colors","props","map","i","seriesName","data","otherSeriesProps","LineSeries","AreaSeries","stack","name","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","LoadingPanel","height","_height","p","defaultProps","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","maxSearchItems","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","endpointParams","projectIdStrings","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","results","flatten","defined","Error","getTagList","measurements","functionTags","item","keys","FIELD_TAGS","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","SEMVER_TAGS","has","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","getFieldDoc","withTags","theme","backgroundSecondary","borderRadius","DEFAULT_STATS_PERIOD","statsPeriod","periodNumber","periodLength","match","parseInt","formattedStart","getUtcDateString","formattedEnd","diff","moment","previousPeriodStart","subtract","measurementsFromDetails","details","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","Fragment","WrappedComponent","WithTags","Component","TagStore","this","setState","componentWillUnmount","unsubscribe","render","state","getDisplayName","ArithmeticInput","PureComponent","partialTerm","rawOptions","options","dropdownVisible","dropdownOptionGroups","makeOptions","hideFieldOptions","activeSelection","createRef","input","current","blur","position","focus","setSelectionRange","event","target","updateAutocompleteOptions","onUpdate","startedSelection","preventDefault","newOptionGroups","flattenedOptions","group","flat","length","newSelection","active","selection","getSelection","handleSelect","option","prefix","suffix","splitQuery","isEqual","getCursorPosition","selectionStart","currentPosition","matches","substring","matchAll","startOfTerm","index","cursorOffset","slice","search","endOfTerm","term","_onUpdate","_options","as","_as","Container","isOpen","StyledInput","ref","autoComplete","className","onClick","handleClick","onChange","handleChange","onBlur","handleBlur","onFocus","handleFocus","onKeyDown","handleKeyDown","spellCheck","TermDropdown","optionGroups","border","dropShadowLight","background","Input","DropdownContainer","DropdownItemsList","title","ListItem","DropdownTitle","DropdownListItem","onMouseDown","element","scrollIntoView","block","DropdownItemTitleWrapper","Info","t","makeFieldOptions","columns","fieldValues","Set","kind","isLegalEquationColumn","generateFieldAsString","add","makeOperatorOptions","operator","zIndex","dropdown","borderRadiusBottom","innerBorder","gray300","fontSizeMedium","space","fontSizeLarge","hover","textColor","text","lineHeightHeading","overflowEllipsis","QueryField","SingleValue","label","renderTag","singleValue","provided","display","justifyContent","alignItems","selected","fieldValue","cloneDeep","FieldValueKind","meta","function","alias","parameters","forEach","param","getFieldOrTagOrMeasurementValue","defaultValue","validateColumnTypes","columnTypes","triggerChange","newColumn","fieldOptions","fieldName","measurementName","spanOperationBreakdownName","equationName","tagName","indexOf","dataType","unknown","getFieldData","funcName","appendFieldIfUnknown","parameterDescriptions","fieldParameter","required","placeholder","renderParameterInputs","disabled","inFieldLabels","filterAggregateParameters","hideParameterSelector","skipParameterPlaceholder","inputs","descriptor","aggregateParameters","opt","trailingItems","menuPlacement","handleFieldParameterChange","inFieldLabel","styles","FieldSelectStyles","components","FieldSelectComponents","inputProps","handleScalarParameterChange","BufferedInput","type","inputMode","pattern","handleDropdownParameterChange","gridColumns","requiredInputs","push","BlankSpace","shouldRenderTag","tagType","DEPRECATED_FIELDS","takeFocus","filterPrimaryOptions","error","hidePrimarySelector","otherColumns","noFieldsMessage","allFieldOptions","selectProps","handleFieldChange","noOptionsMessage","autoFocus","tripleLayout","handleEquationChange","ArithmeticError","containerColumns","gridColumnsQuantity","operation","AGGREGATIONS","SESSIONS_OPERATIONS","constructor","super","isValid","validity","valid","_","Tooltip","red300","pulse"],"sourceRoot":""}