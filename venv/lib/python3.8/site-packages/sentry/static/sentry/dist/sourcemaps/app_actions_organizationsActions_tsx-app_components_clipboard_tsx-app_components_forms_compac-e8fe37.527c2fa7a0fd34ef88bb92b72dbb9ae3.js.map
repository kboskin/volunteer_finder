{"version":3,"file":"chunks/app_actions_organizationsActions_tsx-app_components_clipboard_tsx-app_components_forms_compac-e8fe37.xxxxxxxxxxxxxxxxxxxx.js","mappings":"uPAEA,MASA,GAT6BA,E,yCAAAA,eAAc,CACzC,SACA,YACA,aACA,SACA,gBACA,iB,8DCNF,MAwBA,GAxBuBA,E,yCAAAA,eAAc,CACnC,UACA,eACA,iBACA,aACA,gBACA,eACA,YACA,iBACA,6BACA,mBACA,gBACA,qBACA,uBACA,aACA,kBACA,oBACA,QACA,YACA,SACA,cACA,mB,8QCbF,MAoBA,GApBc,QAAO,QAAC,SAACC,EAAD,KAAWC,KAASC,GAArB,SACnB,mBAAUA,EAAV,SAAkBF,MAAAA,EAAAA,EAAYC,MADlB,sBAAH,kHASME,EAAAA,EAAAA,GAAM,IATZ,2DAaAC,IAAC,aAAIA,EAAEC,MAAMC,MAAR,UAAcF,EAAEG,YAAhB,QAAwB,WAAWC,QAbxC,gBAcKJ,IAAC,aAAIA,EAAEC,MAAMC,MAAR,UAAcF,EAAEG,YAAhB,QAAwB,WAAWE,aAd7C,2D,kVC2FX,QAvDA,YASU,IATS,aACjBC,GAAe,EADE,eAEjBC,GAAiBC,EAAAA,EAAAA,GAAE,uBAFF,aAGjBC,GAAeD,EAAAA,EAAAA,GAAE,8BAHA,MAIjBE,EAJiB,UAKjBC,EALiB,QAMjBC,EANiB,gBAOjBC,EAPiB,SAQjBjB,GACQ,EACR,MAAOkB,EAASC,IAAcC,EAAAA,EAAAA,YAExBC,GAAcC,EAAAA,EAAAA,cAAY,KAG9B,KAF0BC,EAAAA,EAAAA,GAAKT,GAO7B,OAJKJ,IACHc,EAAAA,EAAAA,IAAgBX,QAElBG,MAAAA,GAAAA,KAIGN,IACHe,EAAAA,EAAAA,IAAkBd,GAGpBI,MAAAA,GAAAA,MACC,CAACD,EAAOE,EAASD,EAAWF,EAAcF,EAAgBD,KAE7DgB,EAAAA,EAAAA,YAAU,KACRR,MAAAA,GAAAA,EAASS,iBAAiB,QAASN,GAC5B,IAAMH,MAAAA,OAAN,EAAMA,EAASU,oBAAoB,QAASP,KAClD,CAACA,EAAaH,IAKjB,MAAMW,GAAcP,EAAAA,EAAAA,cAAaQ,IAE/BX,GAAWY,EAAAA,EAAAA,aAAYD,MACtB,IAGH,QAAIb,GA/CI,WAAC,EAAAe,UAASC,6BAAV,OAAC,SAAiC,WAmDrCC,EAAAA,EAAAA,gBAAelC,IAIbmC,EAAAA,EAAAA,cAAanC,EAAU,CAAC8B,IAAKD,IAP3B,KAjDX,IAAuB,M,+XCpBvB,MAAMO,GAAiBC,EAAAA,EAAAA,aACrB,CAAC,EAUCP,KAVF,IACE,SACE9B,EADF,OAEEsC,EAFF,OAGEC,GAAS,EAHX,YAIEC,GAAc,EAJhB,SAKEC,GAAW,EALb,SAMEC,EAAW,UACRxC,GARP,SAYE,QAACyC,EAAD,IACMzC,EACJK,KAAK,SACLqC,YAAaN,EACbG,SAAUA,EACVC,SAAUA,EACVH,OAAQA,EACRT,IAAKA,EAPP,UASGQ,IAAU,QAACO,EAAD,UAAYP,IACtBtC,EACAwC,IACC,QAACM,EAAD,CAAeC,KAAK,KAAKC,UAAWT,EAAS,KAAO,OAAQ,cAAY,eAM1EO,GAAgB,OAAOG,EAAAA,GAAP,sBAAH,gBACF9C,EAAAA,EAAAA,GAAM,KADJ,mBAKbwC,GAAe,OAAOO,EAAAA,GAAP,sBAAH,+CASd9C,IAAMA,EAAEmC,QAAUnC,EAAEqC,WAAa,qBATnB,KAUdrC,GAAKA,EAAEwC,WAAc,GAAEO,EAAAA,0BAVT,KAaZN,GAAY,OAAO,OAAP,sBAAH,uDAMI1C,EAAAA,EAAAA,GAAM,KANV,KASf,K,o/BCPA,SAASiD,EACPC,EACAvC,GAEA,OAAOuC,EAAKC,QAAO,CAACC,EAAmCC,IACjDA,EAAIC,QACCF,EAAIG,OAAON,EAAmBI,EAAIC,QAAS3C,IAEhD0C,EAAI1C,QAAUA,EACTyC,EAAIG,OAAOF,GAEbD,GACN,IAKE,MAAMI,EAAuB,IAGyB,IAHxB,WACnCC,KACG1D,GACwD,EAC3D,MAAM,SAAC2D,EAAD,YAAWC,GAAe5D,GAC1B,aAAC6D,EAAD,UAAeC,EAAf,YAA0BC,EAA1B,UAAuCC,GAAaJ,EAE1D,OACE,QAAC,EAAAK,SAAD,YACIH,GAAaC,GAAeC,KAC5B,QAACE,EAAD,YACE,QAACC,EAAD,WACE,yBAAOL,MAERE,IAAa,QAACI,EAAD,CAAwBvB,KAAM,GAAIwB,MAAI,IACnDV,GAAYI,IAAgBC,IAC3B,QAACM,EAAD,CAAazB,KAAK,OAAO0B,YAAU,EAACC,QAAS,IAAMxE,EAAMyE,aAAzD,uBAMN,QAAC,YAAD,IACMzE,EACJ0D,WAAY,IAAIA,MAAiBG,GAAgB,CAAC,eAAe,UAUzE,SAASa,EAAT,GA2BsB,IA3B6D,QAEjFnB,EAFiF,SAGjFoB,EAHiF,aAIjFC,EACAhE,MAAOiE,EACPC,WAAYC,EANqE,aAOjFlB,GAAe,EAPkE,SAQjFmB,EARiF,YASjFC,EAAc,UATmE,iBAUjFC,EAViF,QAYjFC,EAZiF,aAajFC,EAbiF,aAcjFC,EAdiF,UAejFC,EAfiF,aAgBjFC,EAhBiF,OAkBjFC,EAAS,EAlBwE,YAmBjFC,EAAc,EAnBmE,iBAoBjFC,EAAmB,EApB8D,UAqBjFC,EAAY,cArBqE,cAsBjFC,GAAgB,EAtBiE,kBAuBjFC,GAAoB,EAvB6D,cAwBjFC,GAAgB,EAxBiE,UAyBjFhC,KACG9D,GACiB,EAEpB,MAAM8E,EAAaC,GAAoC,KAApBxB,MAAAA,OAAA,EAAAA,EAASwC,QACtCC,GAAaC,EAAAA,EAAAA,QAA0B,MACvCC,GAAQC,EAAAA,EAAAA,GAAoBnG,IAC5B,iBAACoG,IAAoBC,EAAAA,EAAAA,IACzB,CAAChG,KAAM,UAAWyE,WAAAA,GAClBoB,EACAF,IAEI,YAACM,IAAeC,EAAAA,EAAAA,GACpB,CAACC,QAAS,IAAMN,EAAMO,SAAU3B,WAAAA,KAAesB,GAC/CJ,GAIIU,GAAaT,EAAAA,EAAAA,QAAO,OACpB,aAACU,IAAgBC,EAAAA,EAAAA,IACrB,CACEC,QAASX,EAAMY,MACfzE,OAAQ6D,EAAM7D,OACdwD,kBAAAA,EACAC,cAAAA,EACAiB,6BAA8BC,IAAM,aAClCA,GAAUhB,EAAWiB,UAAYD,KAAU,UAAChB,EAAWiB,eAAZ,OAAC,EAAoBC,SAASF,MAE7EN,IAEKC,aAAcQ,IAAiBC,EAAAA,EAAAA,IAAmB,CACvDC,UAAWrB,EACXU,WAAAA,EACAlB,OAAAA,EACAC,YAAAA,EACAE,UAAAA,EACAD,iBAAAA,EACArD,OAAQ6D,EAAM7D,UAKTiF,EAAeC,IAAoBrG,EAAAA,EAAAA,UAAS2D,MAAAA,EAAAA,EAAaD,GAG1D4C,GAAWpG,EAAAA,EAAAA,cAAY,KAAuB,QAClD,MAAMqG,EAAW5C,MAAAA,EAAAA,EAAayC,EAExBI,GADWC,MAAMC,QAAQH,GAAYA,EAAW,CAACA,IAEpDI,KAAIC,GAAO5E,EAA+BK,EAASuE,KACnDC,OAEH,OACE,QAAC,EAAA9D,SAAD,YACE,QAAChB,EAAD,8BAAcyE,EAAgB,UAA9B,aAAc,EAAoBM,aAAlC,QAA2C,KAC1CN,EAAgB3B,OAAS,IACxB,QAACkC,EAAD,CAAalI,KAAO,KAAG2H,EAAgB3B,OAAS,UAIrD,CAACxC,EAASsB,EAAWyC,KAEjBU,EAAOE,IAAYhH,EAAAA,EAAAA,UAA0B,OACpDM,EAAAA,EAAAA,YAAU,KACR0G,EAASV,OACR,CAACA,IAIJ,MAAOW,EAAcC,KAAmBlH,EAAAA,EAAAA,YAElCmH,IAAqBjH,EAAAA,EAAAA,cAAYkH,UAAY,YAG3C,IAAIC,SAAQC,GAAWC,OAAOC,WAAWF,KAE/C,MAAMG,EAAe,UAAG3C,EAAWiB,eAAd,aAAG,EAAoB2B,YAC5CD,GAAmBP,GAAgBO,KAClC,CAAC3C,IAkFJ,OAjFA6C,EAAAA,EAAAA,IAAkB,CAACjH,IAAKoE,EAAY8C,SAAUT,MAG9C7G,EAAAA,EAAAA,YAAU,UAC6B,IAA1BiH,OAAOM,gBAGlBV,OACC,CAACA,MA0EF,QAACW,EAAD,CAAiB1D,UAAWA,EAAW2D,GAAI1D,EAAc2D,KAAK,eAA9D,UA5DI/D,EACKA,EAAQ,CACbnF,MAAO,IACFqF,KACAiB,EACHjE,OAAQ6D,EAAM7D,QAEhBT,IAAKoE,KAIP,QAAC,IAAD,CACEpE,IAAKoE,EACL3D,OAAQ6D,EAAM7D,UACVgD,KACAiB,EAJN,SAMGlB,MAAAA,EAAAA,EAAgB4C,IAMhB9B,EAAM7D,QAKT,QAAC,KAAD,CAAY8G,cAAY,EAACC,WAAS,EAAlC,UACE,QAACC,EAAD,CACEC,SAAUnB,EACVvG,IAAK8E,MACD6C,EAAAA,EAAAA,IAAW5C,EAAcQ,GAH/B,UAKE,QAAC,IAAD,CACEqC,WAAY,CAACC,QAAShG,EAAsBiG,eAAgB,SACxD1J,EACJuD,QAASA,EACT3C,MAAOiE,MAAAA,EAAAA,EAAayC,EACpBtC,SAAUA,EACVL,SApDV,SAAuBgF,GACrB,MAAMC,EAAW1E,MAAAA,EAAAA,EAAqB/B,GAAQA,EAAK0E,KAAIgC,GAAOA,EAAIjJ,QAC5D6G,EAAWE,MAAMC,QAAQ+B,GAAUC,EAASD,GAAUA,MAAAA,OAA3C,EAA2CA,EAAQ/I,MACpE2G,EAAiBE,GACjB9C,MAAAA,GAAAA,EAAWgF,GAEP/D,IAAkBZ,GACpBkB,EAAMY,SA8CAhD,UAAWA,EACXmB,YAAaA,EACbpB,aAAcA,EACdiG,cAAc,SACdC,YAAU,EACVC,WAAS,EACTC,0BAA0B,EAC1BC,qBAAqB,EACrBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,iBAAe,QA5Bd,QAxLA7G,EAAAA,YAAAA,uBAkCJiB,EAAAA,YAAAA,gBAiMT,UAEMsE,GAAkB,OAAO,MAAP,qBAAH,IAEf/F,GAAc,OAAO,OAAP,sBAChB/C,GAAKA,EAAEC,MAAMoK,kBADA,KAIXtC,GAAc,OAAOuC,EAAAA,EAAP,qBAAH,iDAKXnB,GAAU,OAAO,MAAP,qBAAH,0BACcpJ,EAAAA,EAAAA,GAAM,GADpB,oBAEMC,GAAKA,EAAEC,MAAMsK,cAFnB,gBAGGvK,GAAKA,EAAEC,MAAMuK,oBAHhB,0BAIaxK,GAAKA,EAAEC,MAAMwK,mBAJ1B,KAIgDzK,GAAKA,EAAEC,MAAMyK,iBAJ7D,eAKE1K,GAAKA,EAAEC,MAAM0K,gBALf,6BASA3K,GAAKA,EAAEC,MAAM2K,OAAOC,UATpB,eAWT7K,GAAKA,EAAEoJ,UAAa,cAAapJ,EAAEoJ,eAX1B,KAcPpF,GAAa,OAAO,MAAP,qBAAH,4FAKHjE,EAAAA,EAAAA,GAAM,KALH,KAKYA,EAAAA,EAAAA,GAAM,GALlB,KAKwBA,EAAAA,EAAAA,GAAM,KAL9B,KAKuCA,EAAAA,EAAAA,GAAM,KAL7C,wBAMQC,GAAKA,EAAEC,MAAM6K,wBANrB,eAUV7G,GAAY,OAAO,OAAP,qBAAH,8BAEAjE,GAAKA,EAAEC,MAAM8K,eAFb,WAGJ/K,GAAKA,EAAEC,MAAM+K,cAHT,qCAKGjL,EAAAA,EAAAA,GAAM,GALT,KAQTmE,GAAyB,OAAO+G,EAAAA,EAAP,qBAAH,cAEdlL,EAAAA,EAAAA,GAAM,IAFQ,KAEAA,EAAAA,EAAAA,GAAM,IAFN,KAEcA,EAAAA,EAAAA,GAAM,IAFpB,KAE4BA,EAAAA,EAAAA,GAAM,GAFlC,YAGdA,EAAAA,EAAAA,GAAM,KAHQ,WAIfA,EAAAA,EAAAA,GAAM,KAJS,MAQtBqE,GAAc,OAAOtB,EAAAA,GAAP,qBAAH,cACF9C,GAAKA,EAAEC,MAAM8K,eADX,WAEN/K,GAAKA,EAAEC,MAAMiL,SAFP,M,0WChVjB,SAASC,EAAoBrL,GAC3B,MAAM,SAACsL,EAAD,GAAWC,GAAMvL,EAEjBwL,GAAcC,EAAAA,EAAAA,IAA2BH,MAAAA,OAAD,EAACA,EAAUI,OACnDC,EAAiBC,OAAOC,KAAKL,GAAazF,OAAS,EACnD2F,EACU,iBAAPH,GAAmBA,EAAGG,MAAQ,IAAIF,KAAgBD,EAAGG,OAASF,EAEvE,GAAIF,EAAU,CACZ,MAAMQ,EAAyCH,EAE7B,iBAAPJ,EACP,CAACQ,SAAUR,EAAIG,MAAAA,GACf,IAAIH,EAAIG,MAAAA,GAHR,GAKEM,EAAcL,EAChB,IAAI3L,EAAOuL,GAAIO,GACf,IAAI9L,EAAOuL,GAAAA,GAEf,OAAO,QAAC,IAAD,IAAUS,IAGnB,IAAIC,EAAoB,GACN,iBAAPV,GAAmBA,EAAGW,SAC/BD,EAAoBE,EAAAA,MAASZ,EAAGW,SAGlCD,EAAoB,IAAIA,KAAsBT,GAE5B,iBAAPD,GAAmBA,EAAGG,QAC/BO,EAAoB,IAAIA,KAAsBV,EAAGG,QAGnD,MAAMU,EAAcD,EAAAA,UAAaF,GAC3BI,GACW,iBAAPd,EAAkBA,EAAKA,EAAGQ,WAAaK,EAAe,IAAGA,IAAgB,IAEnF,OAAO,gBAAOpM,EAAOsM,KAAMD,IArCpBhB,EAAAA,YAAAA,sBAwCT,SAAekB,EAAAA,EAAAA,YAAWlB,I,0vBCN1B,SAASmB,EAAT,GAeuC,IAfpB,KACjBC,EADiB,cAEjBC,EAFiB,SAGjB5M,EAHiB,UAIjBwF,EAJiB,mBAKjBqH,EALiB,OAMjBC,EANiB,OAOjBpH,EAPiB,KAQjBqH,EARiB,cASjBC,EATiB,eAUjBC,EAViB,SAWjBC,EAXiB,eAYjBC,EAZiB,eAajBC,EAAiB,IAbA,SAcjBC,EAAW,OAC0B,EACrC,MAAOC,EAASC,IAAcnM,EAAAA,EAAAA,WAAS,GAEjCoM,GAAYC,EAAAA,EAAAA,UAAQ,KAAMC,EAAAA,EAAAA,GAAM,eAAe,IAE/CC,GAA0BxH,EAAAA,EAAAA,aAA2ByH,IAE3DlM,EAAAA,EAAAA,YAAU,IACD,KACLiH,OAAOkF,aAAaF,EAAwBxG,WAE7C,IAEH,MAAM2G,GAAkBxM,EAAAA,EAAAA,cACrBR,IACC6H,OAAOkF,aAAaF,EAAwBxG,SAG5CwG,EAAwBxG,QAAUwB,OAAOC,YACvC,IAAM2E,EAAWzM,IACjBsM,KAGJ,CAACA,IAGGW,GAAYN,EAAAA,EAAAA,UAChB,IAAM,CACJ,CACEO,KAAM,OACNC,SAAS,GAEX,CACED,KAAM,gBACNvK,QAAS,CAMPyK,iBAAiB,IAGrB,CACEF,KAAM,QACNvK,QAAS,CAGP0K,QAAS,IAGb,CACEH,KAAM,kBACNC,SAAS,EACTxK,QAAS,CACP0K,QAAS,GACTC,SAAS,MAIf,IAIIC,OAAqBT,IAATb,EAAqBO,EAAUP,EAE3CuB,GAAab,EAAAA,EAAAA,UAAQ,SAKZG,IAATb,EACK,CACLwB,aAAc,IAAMT,GAAgB,GACpCU,aAAc,IAAMV,GAAgB,IAGjC,IACN,CAACf,EAAMe,IAEV,OACE,QAAC,KAAD,YACE,QAAC,IAAD,UACG,QAAC,IAAChM,GAAF,SACC,QAAC2M,EAAD,CACE3M,IAAKA,EACL,mBAAkB0L,EAClBhI,UAAWqH,EACXG,cAAeA,EACfG,eAAgBA,KACZmB,EANN,SAQGtO,QAIN0O,EAAAA,EAAAA,eACC,QAAC,IAAD,CAAQ7I,UAAWwH,EAAUU,UAAWA,EAAxC,SACG,IAAyC,IAAxC,IAACjM,EAAD,MAAM6M,EAAN,UAAa9I,EAAb,WAAwB+I,GAAgB,EAGxC,OAAKP,IAKA1B,GAASG,IAKZ,QAAC+B,EAAD,CAAoBF,MAAOA,EAAO7M,IAAKA,EAAvC,UACE,QAACgN,EAAD,CAAkBxB,QAASe,EAAWxI,UAAWA,EAAjD,UACE,QAACkJ,EAAD,CACEC,GAAIxB,EACJ3H,UAAWA,EACXH,OAAQA,EAERF,UAAWyJ,GAAAA,CAAW,YAAazJ,MAC/B8I,EANN,UAQGxB,GAAS,QAACoC,EAAD,UAASpC,IAAmB,KACrCH,GAAO,QAACwC,EAAD,CAAM3J,UAAWoH,EAAjB,SAAiCD,IAAe,MACxD,QAACyC,EAAD,CACEtN,IAAK8M,EAAW9M,IAChB6M,MAAOC,EAAWD,MAClB9I,UAAWA,EACXqH,SAAUA,EACVD,eAAgBA,WA1BjB,QAkCbjL,SAAS2K,SAUjB,SAASmC,EAAT,GAQuB,IARG,QACxBxB,EADwB,UAExBzH,EAFwB,SAGxB7F,GAKqB,EACrB,MAAMqP,EAAoBC,EAAgBzJ,GAEpC0J,EACkB,SAAtBF,EACI,EAfe,GAeG,GACI,UAAtBA,EACA,CAjBe,GAiBE,GACjB,CAAC,EAAG,GAEJG,EACkB,QAAtBH,EACI,EAtBe,GAsBG,GACI,WAAtBA,EACA,CAxBe,GAwBE,GACjB,CAAC,EAAG,GAEV,OACE,QAAC,QAAD,CACEI,QAAQ,SACRC,SAAU,CACRC,OAAQ,CACNC,QAAS,GAEXtC,QAAS,CACPsC,QAAS,CAAC,EAAG,GACbL,EAAAA,EACAC,EAAAA,IAGJK,QAASvC,EAAU,UAAY,SAC/BwC,WAAY,CAACC,SAAU,GAAKC,KAAM,aAbpC,SAeGhQ,IAKP,SAASsP,EACPzJ,GAEA,OAAKA,GAIU,CAAC,MAAO,SAAU,OAAQ,SAASoK,MAAKC,GAC9CrK,EAAUsK,WAAWD,MAJrB,MAnNFxD,EAAAA,YAAAA,YAiKAoC,EAAAA,YAAAA,mBA4DT,MAAML,GAAU,OAAO,OAAP,uBACZrO,GAAKA,EAAE4M,eAAiB5M,EAAEC,MAAM+P,iBAAiBhQ,EAAE+M,iBAD1C,KAIP0B,GAAqB,OAAO,MAAP,sBAAH,YAEXzO,GAAKA,EAAEC,MAAM2K,OAAOqF,WAFT,KAUlBtB,GAAkB,OAAO,MAAP,sBAAH,oCAEF3O,GAAKA,EAAEC,MAAMsK,cAFX,uEAOVvK,GAAKA,EAAEC,MAAMiQ,WAPH,sBAQClQ,GAAKA,EAAEC,MAAMkQ,QARd,gBASLnQ,GAAKA,EAAEC,MAAMI,YATR,qGAeJL,GAAKA,EAAEC,MAAMJ,KAAKuQ,QAfd,KAkBjBpQ,IAAC,YAAqB,QAAhBA,EAAEyF,UAAuB,kBAAD,UAAkBzF,EAAEsF,cAApB,SAA8BvF,EAAAA,EAAAA,GAAM,KAAO,KAlBxD,KAmBjBC,IAAC,YAAqB,WAAhBA,EAAEyF,UAA0B,eAAD,UAAezF,EAAEsF,cAAjB,SAA2BvF,EAAAA,EAAAA,GAAM,KAAO,KAnBxD,KAoBjBC,IAAC,YAAqB,SAAhBA,EAAEyF,UAAwB,iBAAD,UAAiBzF,EAAEsF,cAAnB,SAA6BvF,EAAAA,EAAAA,GAAM,KAAO,KApBxD,KAqBjBC,IAAC,YAAqB,UAAhBA,EAAEyF,UAAyB,gBAAD,UAAgBzF,EAAEsF,cAAlB,SAA4BvF,EAAAA,EAAAA,GAAM,KAAO,KArBxD,KAwBf+O,GAAS,OAAO,MAAP,sBAAH,cACG9O,GAAKA,EAAEC,MAAM0K,gBADhB,gBAEI3K,GAAKA,EAAEC,MAAMoQ,qBAFjB,6BAGiBrQ,GAAKA,EAAEC,MAAMkQ,QAH9B,mBAIOnQ,GAAKA,EAAEC,MAAMqQ,iBAJpB,kDAOCvQ,EAAAA,EAAAA,GAAM,KAPP,KAYNgP,GAAO,OAAO,MAAP,sBAAH,YACGhP,EAAAA,EAAAA,GAAM,GADT,qBAaJiP,GAAiB,OAAO,OAAP,sBAAH,mDAIThP,GAAsB,SAAhBA,EAAEyF,UAAuB,QAAU,QAJhC,UAKVzF,GAAsB,UAAhBA,EAAEyF,UAAwB,QAAU,QALhC,YAMRzF,GAAsB,QAAhBA,EAAEyF,UAAsB,QAAU,QANhC,SAOXzF,GAAsB,WAAhBA,EAAEyF,UAAyB,QAAU,QAPhC,qKAyBPzF,GAAKkP,EAAgBlP,EAAEyF,YAzBhB,WA0BZzF,GAAKA,EAAE6M,gBAAkB7M,EAAE8M,UAAY9M,EAAEC,MAAMkQ,QA1BnC,KA2BZnQ,GAAsB,WAAhBA,EAAEyF,UAAyB,YAAc,IA3BnC,KA4BZzF,GAAsB,SAAhBA,EAAEyF,UAAuB,qBAAuB,IA5B1C,KA6BZzF,GAAsB,UAAhBA,EAAEyF,UAAwB,qBAAuB,IA7B3C,oDAiCLzF,GAAKkP,EAAgBlP,EAAEyF,YAjClB,WAiCuCzF,IAAC,uBAC1DA,EAAE8M,gBADwD,QAC5C9M,EAAEC,MAAMI,aAlCJ,O,6JChWb,MAAMkQ,EAAY,CACvBC,MAAO,QACPC,IAAK,MACLC,IAAK,MACLC,OAAQ,cACRC,QAAS,UACTC,YAAa,eAGFC,EAAiB,CAC5BC,WAAY,YACZC,SAAU,UACVC,SAAU,UACVC,YAAa,mBAUFC,EAAiB,IAAIzF,OAAO0F,OAPhB,CACvBZ,MAAO,QACPC,IAAK,MACLE,OAAQ,SACRD,IAAK,QAGqD,eAE/CW,GAAuB,G,uSCmBpC,MAAMC,EAAuC,CAC3CC,UAAW,GACXC,SAAS,EACTC,qBAAsB,GAEtBC,OACEC,KAAKC,QAELD,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,eAA+BJ,KAAKK,YAEpDL,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,WAA2BJ,KAAKM,eAEhDN,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,cAA8BJ,KAAKO,kBAEnDP,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,aAA6BJ,KAAKQ,kBAElDR,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,iBAAiCJ,KAAKS,qBAEtDT,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,kBAAkCJ,KAAKU,eAEvDV,KAAKF,qBAAqBI,KAAKF,KAAKG,SAASC,EAAAA,EAAAA,MAAsBJ,KAAKC,QACxED,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASC,EAAAA,EAAAA,cAA8BJ,KAAKW,kBAGnDX,KAAKF,qBAAqBI,KACxBF,KAAKG,SAASS,EAAAA,EAAAA,kBAA+BZ,KAAKa,gBAItDZ,QACED,KAAKJ,UAAY,GACjBI,KAAKH,SAAU,GAGjBW,gBAAgBM,GACd,MAAMC,EAAUD,EAAM9K,KAAIgL,GAAW,CAACA,EAAQ/D,GAAI+D,KAElDhB,KAAKJ,UAAY7F,OAAOkH,YAAYF,GACpCf,KAAKH,SAAU,EAEfG,KAAK1M,QAAQ,IAAI4N,IAAInH,OAAOC,KAAKgG,KAAKJ,cAGxCU,aAAaa,EAAkBC,GAC7B,MAAMC,EAAcrB,KAAKsB,UAAUH,GAEnC,IAAKE,EACH,OAGF,MAAME,EAAa,IAAIF,EAAaG,KAAMJ,GAE1CpB,KAAKJ,UAAY,IAAII,KAAKJ,UAAW,CAAC2B,EAAWtE,IAAKsE,GACtDvB,KAAK1M,QAAQ,IAAI4N,IAAI,CAACG,EAAYpE,OAGpCsD,gBAAgBS,GACdhB,KAAKJ,UAAY,IAAII,KAAKJ,UAAW,CAACoB,EAAQ/D,IAAK+D,GACnDhB,KAAK1M,QAAQ,IAAI4N,IAAI,CAACF,EAAQ/D,OAGhC0D,gBAAgBc,GACd,MAAMT,EAAUhB,KAAK0B,QAAQD,EAAKxE,IAElC,IAAK+D,EACH,OAGF,MAAMO,EAAa,IAAIP,KAAYS,GAEnCzB,KAAKJ,UAAY,IAAII,KAAKJ,UAAW,CAACoB,EAAQ/D,IAAKsE,GACnDvB,KAAK1M,QAAQ,IAAI4N,IAAI,CAACO,EAAKxE,OAG7BwD,mBAAmBgB,GACjB,MAAME,EAAU5H,OAAO4H,QAAQF,GAAQ,IAAIG,QACzC,QAAEC,GAAF,SAAiBA,KAAa7B,KAAKJ,aAIrC+B,EAAQG,SAAQ,IAAwB,IAAtBD,EAAWE,GAAW,EACtC/B,KAAKJ,UAAUiC,GAAWE,MAAQA,KAGpC,MAAMC,EAAaL,EAAQ3L,KAAI,QAAE6L,GAAF,SAAiBA,KAChD7B,KAAK1M,QAAQ,IAAI4N,IAAIc,KAQvBnB,aAAaoB,GAEX,MAAMC,EAAWlC,KAAKmC,SAASP,QAAO,QAAC,MAACQ,GAAF,SACpCA,EAAMlE,MAAK,QAAC,KAACsD,GAAF,SAAYA,IAASS,QAGlCC,EAASJ,SAAQd,GAAWhB,KAAKqC,sBAAsBJ,EAAUjB,KAEjE,MAAMsB,EAAqBJ,EAASlM,KAAIgL,GAAWA,EAAQ/D,KAC3D+C,KAAK1M,QAAQ,IAAI4N,IAAIoB,KAGvB5B,aAAauB,EAAkBM,GAC7B,MAAMvB,EAAUhB,KAAKsB,UAAUiB,GAE1BvB,IAILhB,KAAKqC,sBAAsBJ,EAAUjB,GACrChB,KAAK1M,QAAQ,IAAI4N,IAAI,CAACF,EAAQ/D,QAGhCoD,UAAUmC,EAAYD,GACpB,MAAMvB,EAAUhB,KAAKsB,UAAUiB,GAG/B,IAAKvB,EACH,OAGF,MAAMO,EAAa,IAAIP,EAASoB,MAAO,IAAIpB,EAAQoB,MAAOI,IAE1DxC,KAAKJ,UAAY,IAAII,KAAKJ,UAAW,CAACoB,EAAQ/D,IAAKsE,GACnDvB,KAAK1M,QAAQ,IAAI4N,IAAI,CAACF,EAAQ/D,OAIhCoF,sBAAsBJ,EAAkBjB,GACtC,MAAMyB,EAAWzB,EAAQoB,MAAMR,QAAO,QAAC,KAACJ,GAAF,SAAYA,IAASS,KACrDV,EAAa,IAAIP,EAASoB,MAAOK,GAEvCzC,KAAKJ,UAAY,IAAII,KAAKJ,UAAW,CAACoB,EAAQ/D,IAAKsE,IAGrDpP,YACE,OAAO6N,KAAKH,SAGdsC,SACE,OAAOpI,OAAO0F,OAAOO,KAAKJ,WAAW8C,MAAK,CAACC,EAAGC,IAAMD,EAAEnB,KAAKqB,cAAcD,EAAEpB,SAG7EE,QAAQzE,GACN,OAAO+C,KAAKmC,SAASjE,MAAK8C,GAAWA,EAAQ/D,KAAOA,KAGtDqE,UAAUE,GACR,OAAOxB,KAAKmC,SAASjE,MAAK8C,GAAWA,EAAQQ,OAASA,KAGxDsB,WACE,MAAO,CACLZ,SAAUlC,KAAKmC,SACftC,QAASG,KAAKH,WAMpB,GADsBkD,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,GAAoBrD,K,4CCnNvC,SAASsD,EAAgBlI,GACtC,GAAe,OAAXA,GAA8B,KAAXA,EACrB,MAAO,GAGT,MAAMmI,EAAenI,EAAOoI,MAAM,KAC5BC,EAAQ,GAgBd,OAdAF,EAAapB,SAAQ7L,IACnB,MAAMoN,EACJ,2EAA2EC,KACzErN,GAEEsN,EAA2B,SAAdF,EAAO,IAAqC,UAAdA,EAAO,IAAyB,KAEjFD,EAAMC,EAAO,IAAM,CACjB5I,KAAM4I,EAAO,GACbG,QAASD,EACTE,OAAQJ,EAAO,OAIZD,E,mmBCiGT,MAAMM,UAAqBC,EAAAA,UAAwB,oEAKlC,CACbC,gBAAiB,GACjBC,kBAAmB,GACnBC,iBAAiB,EACjBC,UAAU,EACVC,aAAc,KACdC,QAAS,KACTC,WAAY,KACZC,WAAY,KACZC,WAAY,QAdmC,yBA2DvB,IAAIlD,MA3DmB,6BAgEemD,GAAAA,EAC9DnC,GAAY,IAAIoC,IAAIpC,EAASlM,KAAIgL,GAAW,CAACA,EAAQQ,KAAMR,UAjEZ,+BAuEiBqD,GAAAA,EAChEnC,GAAY,IAAIoC,IAAIpC,EAASlM,KAAIgL,GAAW,CAACuD,SAASvD,EAAQ/D,GAAI,IAAK+D,UAxExB,oCA+E1B,KACrB,MAAM,MAACwD,EAAD,SAAQtC,GAAYlC,KAAK7R,MAEzBsW,EAAczE,KAAK0E,eAAexC,IAIjCyC,EAASC,GAAcC,GAAAA,CAAUL,GAAOhD,GAAQiD,EAAYK,IAAItD,KAGjEqC,EAAoBc,EAAQ3O,KAAIwL,GAAQiD,EAAYM,IAAIvD,KAAOI,OAAOoD,EAAAA,IAG5EJ,EAAW9C,SAAQN,GAAQxB,KAAKiF,WAAWC,IAAI1D,KAE/CxB,KAAKmF,SAAS,CAEZvB,gBAAiBgB,EAAW5O,KAAIwL,IAAQ,CAAEA,KAAAA,MAE1CsC,kBAAmBa,EAAQzQ,OAC3B2P,kBAAAA,IAGGe,EAAW1Q,QAIhB8L,KAAKoF,4BA1G0C,2CAiHnB,KAC5B,MAAM,WAACC,EAAD,SAAanD,GAAYlC,KAAK7R,MAE9BsW,EAAczE,KAAKsF,iBAAiBpD,IAInCyC,EAASC,GAAcC,GAAAA,CAAUQ,GAAYpI,GAAMwH,EAAYK,IAAI7H,KAE1E,GAAI2H,EAAW1Q,OAEb,YADA8L,KAAKuF,kBAKP,MAAM1B,EAAoBc,EAAQ3O,KAAIiH,GAAMwH,EAAYM,IAAI9H,KAAK2E,OAAOoD,EAAAA,IAExEhF,KAAKmF,SAAS,CAEZrB,kBAAmBa,EAAQzQ,OAC3B2P,kBAAAA,QArI6C,qCA4IzBpN,UACtB,MAAM,IAAC+O,EAAD,MAAMC,EAAN,8BAAaC,GAAiC1F,KAAK7R,MAEzD,IAAK6R,KAAKiF,WAAWjU,KACnB,OAGFgP,KAAKmF,SAAS,CACZpB,UAAU,IAGZ,IAAI7B,EAAsB,GACtBkC,EAAa,KAEjB,IACE,MAAM,QAACZ,SAAiBmC,EAAcH,EAAKC,EAAO,CAChDjB,MAAO1O,MAAM8P,KAAK5F,KAAKiF,cAEzB/C,EAAWsB,EACX,MAAOqC,GACPC,QAAQC,MAAMF,GACdzB,EAAayB,EAGf,MAAMpB,EAAczE,KAAK0E,eAAexC,GAKlC8D,EAA0DlQ,MAAM8P,KACpE5F,KAAKiF,YAEJjP,KAAIwL,GACHiD,EAAYK,IAAItD,GACZiD,EAAYM,IAAIvD,GACdkE,EACF,CAAClE,KAAAA,GACD,OAELI,OAAOoD,EAAAA,IAEVhF,KAAKmF,SAAS,CACZvB,gBAAiBoC,EACjBhC,aAAchE,KAAKiF,WAAWjU,OAASkR,EAAShO,OAChD4P,iBAAiB,EACjBC,UAAU,EACVK,WAAAA,IAGFpE,KAAKiF,WAAWgB,YA7L+B,+BAwM/BxP,UAChB,MAAM,IAAC+O,EAAD,MAAMC,EAAN,MAAaS,EAAb,YAAoBC,GAAenG,KAAK7R,MAE9C6R,KAAKmF,SAAS,CACZpB,UAAU,IAGZ,IACE,MAAM,QAACP,EAAD,QAAUS,EAAV,WAAmBE,SAAoBwB,EAAcH,EAAKC,EAAO,CACrES,MAAAA,EACAC,YAAAA,IAGFnG,KAAKmF,SAAS,CACZpB,UAAU,EACVH,gBAAiBJ,EACjBM,iBAAiB,EACjBG,QAAAA,EACAE,WAAAA,IAEF,MAAO0B,GACPC,QAAQC,MAAMF,GAEd7F,KAAKmF,SAAS,CACZpB,UAAU,EACVH,gBAAiB,GACjBE,iBAAiB,EACjBM,WAAYyB,SAnO+B,4BAiPlCpP,eAAO4D,GAAsD,IAAtC,OAAC+L,GAAqC,uDAAP,GACnE,MAAM,IAACZ,EAAD,MAAMC,EAAN,MAAaS,GAAS,EAAK/X,OAC3B,WAAC+V,GAAc,EAAK7P,MACpBoP,EAAS,EAAKpP,MAAM8P,WAE1B,EAAKgB,SAAS,CAACpB,UAAU,IAEzB,IACE,MAAM,QAACP,EAAD,QAAUS,EAAV,WAAmBE,SAAoBwB,EAAcH,EAAKC,EAAO,CACrEpL,OAAAA,EACA6L,MAAAA,EACAhC,WAAAA,EACAT,OAAAA,IAGF,EAAK0B,UAAU9Q,IACb,IAAIuP,EAUJ,OAPEA,EAFEwC,EAEgBC,GAAAA,CAChB,IAAIhS,EAAMuP,mBAAoBJ,IAC9B,QAAC,KAAChC,GAAF,SAAYA,KAGIgC,EAEb,CACLI,gBAAAA,EACAK,QAAAA,EACAF,UAAU,EACVG,WAAY7J,EACZ8J,WAAAA,MAGJ,MAAO0B,GACPC,QAAQC,MAAMF,GAEd,EAAKV,SAAS,CACZpB,UAAU,EACVK,WAAYyB,QAvQlBS,oBACE,MAAM,MAAC9B,EAAD,WAAQa,GAAcrF,KAAK7R,MAE3BqW,MAAAA,GAAAA,EAAOtQ,OACX8L,KAAKuG,uBACMlB,MAAAA,GAAAA,EAAYnR,OACvB8L,KAAKwG,8BAELxG,KAAKuF,kBAITkB,mBAAmBC,GACjB,MAAM,SAACxE,GAAYlC,KAAK7R,MAEpB+T,IAAawE,EAAUxE,UACzBlC,KAAK2G,0BAOTA,0BACE,MAAM,YAACR,EAAD,SAAcjE,EAAd,MAAwBsC,GAASxE,KAAK7R,MAE5C,GAAIgY,EACFnG,KAAKmF,SAAS,CAACvB,gBAAiB1B,SAIlC,GAAMsC,MAAAA,GAAAA,EAAOtQ,OAAQ,CAEnB,MAAMuQ,EAAczE,KAAK0E,eAAexC,GAClC2B,EAAoBW,EAAMxO,KAAIwL,GAAQiD,EAAYM,IAAIvD,KAAOI,OAAOoD,EAAAA,IAC1EhF,KAAKmF,SAAS,CAACtB,kBAAAA,KAyOnB+C,SACE,MAAM,MAACpC,EAAD,SAAQvW,GAAY+R,KAAK7R,MAgC/B,OAAOF,EA9Ba,CAGlBiU,SAAUlC,KAAK3L,MAAMyP,gBACjB,IAAI9D,KAAK3L,MAAMuP,mBAAoB5D,KAAK3L,MAAMwP,mBAC7CW,GAASA,EAAMxO,KAAIwL,IAAQ,CAAEA,KAAAA,OAAY,GAG9CwC,aAAchE,KAAK3L,MAAM2P,aAGzBD,SAAU/D,KAAK3L,MAAM0P,SAIrBE,QAASjE,KAAK3L,MAAM4P,QAKpB4C,SAAU7G,KAAK8G,aAIfhD,gBAAiB9D,KAAK3L,MAAMyP,gBAG5BM,WAAYpE,KAAK3L,MAAM+P,cA3TvBV,EAAAA,YAAAA,gB,OAAAA,EAAAA,eACgC,CAClCgC,+BAA+B,IA0UnC,MAEA,GAFiBqB,EAAAA,EAAAA,IAAaC,EAAAA,EAAAA,GAAQtD,IAWtCjN,eAAekP,EACbH,EACAC,GAEA,IADA,MAACjB,EAAD,OAAQnK,EAAR,MAAgB6L,EAAhB,WAAuBhC,EAAvB,OAAmCT,EAAnC,YAA2C0C,GAC3C,uDADgF,GAEhF,MAAMtM,EAMF,CAEFoN,SAAU,CAAC,kBAoBb,GAjBIzC,GAASA,EAAMtQ,SACjB2F,EAAMA,MAAQ2K,EAAMxO,KAAIwL,GAAS,QAAOA,MAAQ0F,KAAK,MAGnD7M,IACFR,EAAMA,MAAS,GAAEA,EAAMA,MAAS,GAAEA,EAAMA,SAAW,KAAKQ,MAGnD6J,GAAe7J,IAAW6J,IAAe7J,IAAWoJ,IACzD5J,EAAM4J,OAASA,GAIbyC,IACFrM,EAAMsN,SAAWjB,GAGfC,EAAa,CACf,MAAMjE,EAAWkF,EAAAA,EAAAA,SAGjB,IAFgBA,EAAAA,EAAAA,YAGd,MAAO,CACL5D,QAAStB,EACT+B,SAAS,GAIbpK,EAAMwN,aAAe,EAGvB,IAAIpD,GAA0B,EAC1BE,EAA4B,KAChC,MAAO1C,EAAD,CAAS6F,SAAc9B,EAAI+B,eAAgB,kBAAiB9B,cAAmB,CACnF+B,gBAAgB,EAChB3N,MAAAA,IAGI4N,EAAYH,MAAAA,OAAH,EAAGA,EAAMI,kBAAkB,QAC1C,GAAID,EAAW,CACb,MAAME,GAAmB1E,EAAAA,EAAAA,GAAgBwE,GACzCxD,EACE0D,IACCA,EAAiBC,KAAKpE,SAAWmE,EAAiBE,SAASrE,SAC9DW,EAAawD,EAAiBC,KAAKnE,OAQrC,OAJI0C,GACF/F,EAAAA,EAAAA,aAA4BqB,GAGvB,CACL+B,QAAS/B,EACTwC,QAAAA,EACAE,WAAAA,K,uCCvhBG,SAAS2D,EAAWC,GACzB,GAAIA,aAAgBC,kBAAkC,SAAdD,EAAKvZ,KAC3CuZ,EAAKE,cACA,GAAIF,aAAgBG,MAAQtR,OAAOuR,aAAc,CACtD,MAAMC,EAAQnY,SAASoY,cACvBD,EAAME,WAAWP,GACjB,MAAMQ,EAAY3R,OAAOuR,eACrBI,IACFA,EAAUC,kBACVD,EAAUE,SAASL,K,ygBCiFzB3R,eAAekP,EACbH,EACAC,GAEA,IADA,MAACjB,EAAD,OAAQnK,EAAR,MAAgB6L,EAAhB,WAAuBwC,EAAvB,OAAmCjF,GACnC,uDADmE,GAEnE,MAAM5J,EAMF,CAEFoN,SAAU,CAAC,kBAOD,WAJEpL,IAAV2I,GAAuBA,EAAMtQ,OAAS,IACxC2F,EAAMA,MAAQ2K,EAAMxO,KAAIwL,GAAS,QAAOA,MAAQ0F,KAAK,MAGnD7M,IACFR,EAAMA,MAAS,GAAD,UAAGA,EAAMA,aAAT,QAAkB,KAAKQ,IAASsO,QAGhD,MAAMC,GAAsBF,IAAerO,GAAWqO,IAAerO,EAEjEuO,GAAqBnF,IACvB5J,EAAM4J,OAASA,QAGH5H,IAAVqK,IACFrM,EAAMsN,SAAWjB,GAGnB,IAAIjC,GAA0B,EAC1BE,EAA4B,KAChC,MAAO1C,EAAD,CAAS6F,SAAc9B,EAAI+B,eAAgB,kBAAiB9B,cAAmB,CACnF+B,gBAAgB,EAChB3N,MAAAA,IAGI4N,EAAYH,MAAAA,OAAH,EAAGA,EAAMI,kBAAkB,QAC1C,GAAID,EAAW,WACb,MAAME,GAAmB1E,EAAAA,EAAAA,GAAgBwE,GACzCxD,GAAU0D,MAAAA,GAAA,UAAAA,EAAkBC,YAAlB,eAAwBpE,WAAWmE,MAAAA,GAAnC,UAAmCA,EAAkBE,gBAArD,aAAmC,EAA4BrE,SACzEW,EAAawD,MAAAA,GAAH,UAAGA,EAAkBC,YAArB,aAAG,EAAwBnE,OAGvC,MAAO,CAACD,QAAS/B,EAAMwC,QAAAA,EAASE,WAAAA,GAgLlC,QApKA,WAAqE,UAAhD,MAAC+B,EAAD,MAAQ1B,EAAOiB,MAAOoD,GAA0B,uDAAJ,GAC/D,MAAMrD,GAAMsD,EAAAA,EAAAA,MAEN,aAACC,IAAgBC,EAAAA,EAAAA,GAAeC,EAAAA,GAChCC,GAAQF,EAAAA,EAAAA,GAAe5B,EAAAA,GAEvB3B,EAAQoD,MAAAA,EAAAA,EAAaE,MAAAA,OAAhB,EAAgBA,EAAcvH,KAEnC2H,EAAa,IAAIjI,IAAIgI,EAAMhH,SAASlM,KAAInH,GAAKA,EAAE2S,QAC/C4H,EAAW,UAAG5E,MAAAA,OAAH,EAAGA,EAAO5C,QAAOJ,IAAS2H,EAAWrE,IAAItD,YAAzC,QAAmD,GAC9D6H,EAAkBD,EAAYlV,OAAS,GAEtCG,EAAO8Q,IAAY9V,EAAAA,EAAAA,UAAgB,CACxCyU,iBAAkBoF,EAAMrJ,UAAYwJ,EACpCtF,SAAUsF,EACVpF,QAAS,KACTyE,WAAY,KACZvE,WAAY,KACZC,WAAY,OAGRkF,GAAWlV,EAAAA,EAAAA,QAA2B,MAiB5CqC,eAAe8S,IACb,QAAc1N,IAAV4J,EAAJ,CAMAN,EAAS,IAAI9Q,EAAO0P,UAAU,IAC9B,IACE,MAAM,QAACP,EAAD,QAAUS,EAAV,WAAmBE,SAAoBwB,EAAcH,EAAKC,EAAO,CACrEjB,MAAO4E,EACPlD,MAAAA,IAGItC,EAAkByC,GAAAA,CAAO,IAAI6C,EAAMhH,YAAasB,IAAU,QAAC,KAAChC,GAAF,SAAYA,KAC5EpB,EAAAA,EAAAA,aAA4BwD,GAE5BuB,EAAS,IACJ9Q,EACH4P,QAAAA,EACAF,UAAU,EACVD,iBAAiB,EACjBK,WAAAA,IAEF,MAAO0B,GACPC,QAAQC,MAAMF,GAEdV,EAAS,IACJ9Q,EACH0P,UAAU,EACVD,iBAAkBoF,EAAMrJ,QACxBuE,WAAYyB,UA5BdC,QAAQC,MAAM,sEAiClBtP,eAAeqQ,EAAazM,GAC1B,MAAM,WAACqO,GAAcrU,EACfoP,EAASpP,EAAM8P,WAErB,GAAe,KAAX9J,EAIJ,QAAcwB,IAAV4J,EAAJ,CAMAN,EAAS,IAAI9Q,EAAO0P,UAAU,IAE9B,IACEyB,EAAIS,QACJ,MAAM,QAACzC,EAAD,QAAUS,EAAV,WAAmBE,SAAoBwB,EAAcH,EAAKC,EAAO,CACrEpL,OAAAA,EACA6L,MAAAA,EACAwC,WAAAA,EACAjF,OAAAA,IAGIG,EAAkByC,GAAAA,CAAO,IAAI6C,EAAMhH,YAAasB,IAAU,QAAC,KAAChC,GAAF,SAAYA,KAGxEoC,EAAgB1P,OAASgV,EAAMhH,SAAShO,QAC1CkM,EAAAA,EAAAA,aAA4BwD,GAG9BuB,EAAS,IACJ9Q,EACH4P,QAAAA,EACAF,UAAU,EACV2E,WAAYrO,EACZ8J,WAAAA,IAEF,MAAO0B,GACPC,QAAQC,MAAMF,GAEdV,EAAS,IAAI9Q,EAAO0P,UAAU,EAAOK,WAAYyB,UAhCjDC,QAAQC,MAAM,2EA3DJlK,IAAV2I,IACuB,OAArB8E,EAASlU,UACXkU,EAASlU,QAAU,IAAI8L,IAAIsD,KAI3BA,EAAMtQ,SAAWoV,EAASlU,QAAQpE,MAClCwT,EAAMgF,MAAKhI,IAAI,cAAI,UAAC8H,EAASlU,eAAV,OAAC,EAAkB0P,IAAItD,UAE1C8H,EAASlU,QAAU,IAAI8L,IAAIsD,MAsF/B7U,EAAAA,EAAAA,YAAU,KAEJ0Z,GACFE,MAGD,CAACD,EAASlU,WAGbzF,EAAAA,EAAAA,YAAU,KACR,MAAM8Z,GAAeP,EAAMrJ,QAEvBxL,EAAMyP,kBAAoB2F,IAI1BJ,GAIJlE,EAAS,IAAI9Q,EAAOyP,gBAAiB2F,OACpC,CAACP,EAAMrJ,UAEV,MAAM,gBAACiE,EAAD,SAAkBC,EAAlB,WAA4BK,EAA5B,QAAwCH,GAAW5P,EAEnDqV,EAAmBlF,EACrB0E,EAAMhH,SAASN,QAAO/S,GAAK2V,EAAMmF,SAAS9a,EAAE2S,QAC5C0H,EAAMhH,SAEJ0H,EAAeR,EAAYpT,KAAIwL,IAAQ,CAAEA,KAAAA,MAEzCqI,EAAiB,CACrB3H,SAAUwH,EACVE,aAAAA,EACA7F,SAAUA,GAAYmF,EAAMrJ,QAC5BiE,gBAAAA,EACAM,WAAAA,EACAH,QAAAA,EACA4C,SAAUC,GAGZ,OAAO+C,I,uOC1RT,QAjBA,SACEC,GAIA,MAAMC,EAA2B5b,IAC/B,MAAM,SAAC+T,EAAD,gBAAW4B,IAAmBkG,EAAAA,EAAAA,KAC9BC,GAAmBnG,EAEzB,OAAO,QAACgG,EAAD,IAAuB3b,EAAkB+T,SAAAA,EAAU+H,gBAAAA,KAK5D,OAFAF,EAAQG,YAAe,iBAAeC,EAAAA,EAAAA,GAAeL,MAE9CC","sources":["webpack:///./app/actions/organizationsActions.tsx","webpack:///./app/actions/projectActions.tsx","webpack:///./app/components/badge.tsx","webpack:///./app/components/clipboard.tsx","webpack:///./app/components/dropdownButtonV2.tsx","webpack:///./app/components/forms/compactSelect.tsx","webpack:///./app/components/globalSelectionLink.tsx","webpack:///./app/components/hovercard.tsx","webpack:///./app/constants/pageFilters.tsx","webpack:///./app/stores/projectsStore.tsx","webpack:///./app/utils/parseLinkHeader.tsx","webpack:///./app/utils/projects.tsx","webpack:///./app/utils/selectText.tsx","webpack:///./app/utils/useProjects.tsx","webpack:///./app/utils/withProjects.tsx"],"sourcesContent":["import {createActions} from 'reflux';\n\nconst OrganizationsActions = createActions([\n  'update',\n  'setActive',\n  'changeSlug',\n  'remove',\n  'removeSuccess',\n  'removeError',\n]);\n\nexport default OrganizationsActions;\n","import {createActions} from 'reflux';\n\nconst ProjectActions = createActions([\n  'addTeam',\n  'addTeamError',\n  'addTeamSuccess',\n  'changeSlug',\n  'createSuccess',\n  'loadProjects',\n  'loadStats',\n  'loadStatsError',\n  'loadStatsForProjectSuccess',\n  'loadStatsSuccess',\n  'removeProject',\n  'removeProjectError',\n  'removeProjectSuccess',\n  'removeTeam',\n  'removeTeamError',\n  'removeTeamSuccess',\n  'reset',\n  'setActive',\n  'update',\n  'updateError',\n  'updateSuccess',\n]);\n\nexport default ProjectActions;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport type {Theme} from 'sentry/utils/theme';\n\ninterface Props extends React.HTMLAttributes<HTMLSpanElement> {\n  text?: string | number | null;\n  type?: keyof Theme['badge'];\n}\n\nconst Badge = styled(({children, text, ...props}: Props) => (\n  <span {...props}>{children ?? text}</span>\n))<Props>`\n  display: inline-block;\n  height: 20px;\n  min-width: 20px;\n  line-height: 20px;\n  border-radius: 20px;\n  padding: 0 5px;\n  margin-left: ${space(0.5)};\n  font-size: 75%;\n  font-weight: 600;\n  text-align: center;\n  color: ${p => p.theme.badge[p.type ?? 'default'].color};\n  background: ${p => p.theme.badge[p.type ?? 'default'].background};\n  transition: background 100ms linear;\n\n  position: relative;\n`;\n\nexport default Badge;\n","import {cloneElement, isValidElement, useCallback, useEffect, useState} from 'react';\nimport {findDOMNode} from 'react-dom';\nimport copy from 'copy-text-to-clipboard';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  children: React.ReactNode;\n  /**\n   * Text to be copied on click\n   */\n  value: string;\n  /**\n   * Toast message to show on copy failures\n   */\n  errorMessage?: string;\n  /**\n   * Do not show a toast message on success\n   */\n  hideMessages?: boolean;\n  /**\n   * Hide children if browser does not support copying\n   */\n  hideUnsupported?: boolean;\n  /**\n   * Triggered if we fail to copy\n   */\n  onError?: () => void;\n  /**\n   * Trigger if we successfully copy\n   */\n  onSuccess?: () => void;\n  /**\n   * Message to show when we successfully copy\n   */\n  successMessage?: string;\n};\n\n/**\n * copy-text-to-clipboard relies on `document.execCommand('copy')`\n */\nfunction isSupported() {\n  return !!document.queryCommandSupported?.('copy');\n}\n\nfunction Clipboard({\n  hideMessages = false,\n  successMessage = t('Copied to clipboard'),\n  errorMessage = t('Error copying to clipboard'),\n  value,\n  onSuccess,\n  onError,\n  hideUnsupported,\n  children,\n}: Props) {\n  const [element, setElement] = useState<ReturnType<typeof findDOMNode>>();\n\n  const handleClick = useCallback(() => {\n    const copyWasSuccessful = copy(value);\n\n    if (!copyWasSuccessful) {\n      if (!hideMessages) {\n        addErrorMessage(errorMessage);\n      }\n      onError?.();\n      return;\n    }\n\n    if (!hideMessages) {\n      addSuccessMessage(successMessage);\n    }\n\n    onSuccess?.();\n  }, [value, onError, onSuccess, errorMessage, successMessage, hideMessages]);\n\n  useEffect(() => {\n    element?.addEventListener('click', handleClick);\n    return () => element?.removeEventListener('click', handleClick);\n  }, [handleClick, element]);\n\n  // XXX: Instead of assigning the `onClick` to the cloned child element, we\n  // attach a event listener, otherwise we would wipeout whatever click handler\n  // may be assigne don the child.\n  const handleMount = useCallback((ref: HTMLElement) => {\n    // eslint-disable-next-line react/no-find-dom-node\n    setElement(findDOMNode(ref));\n  }, []);\n\n  // Browser doesn't support `execCommand`\n  if (hideUnsupported && !isSupported()) {\n    return null;\n  }\n\n  if (!isValidElement(children)) {\n    return null;\n  }\n\n  return cloneElement(children, {ref: handleMount});\n}\n\nexport default Clipboard;\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button, {ButtonLabel, ButtonProps} from 'sentry/components/button';\nimport {IconChevron} from 'sentry/icons';\nimport space from 'sentry/styles/space';\n\nexport type DropdownButtonProps = {\n  /**\n   * Whether or not the button should render as open\n   */\n  isOpen?: boolean;\n  /**\n   * The fixed prefix text to show in the button eg: 'Sort By'\n   */\n  prefix?: React.ReactNode;\n  /**\n   * Should a chevron icon be shown?\n   */\n  showChevron?: boolean;\n} & Omit<ButtonProps, 'type' | 'prefix'>;\n\nconst DropdownButton = forwardRef<HTMLElement, DropdownButtonProps>(\n  (\n    {\n      children,\n      prefix,\n      isOpen = false,\n      showChevron = true,\n      disabled = false,\n      priority = 'form',\n      ...props\n    }: DropdownButtonProps,\n    ref\n  ) => (\n    <StyledButton\n      {...props}\n      type=\"button\"\n      hasPrefix={!!prefix}\n      disabled={disabled}\n      priority={priority}\n      isOpen={isOpen}\n      ref={ref}\n    >\n      {prefix && <LabelText>{prefix}</LabelText>}\n      {children}\n      {showChevron && (\n        <StyledChevron size=\"xs\" direction={isOpen ? 'up' : 'down'} aria-hidden=\"true\" />\n      )}\n    </StyledButton>\n  )\n);\n\nconst StyledChevron = styled(IconChevron)`\n  margin-left: ${space(0.75)};\n  flex-shrink: 0;\n`;\n\nconst StyledButton = styled(Button)<\n  Required<Pick<DropdownButtonProps, 'isOpen' | 'disabled' | 'priority'>> & {\n    hasPrefix: boolean;\n  }\n>`\n  position: relative;\n  max-width: 100%;\n  z-index: 2;\n\n  ${p => (p.isOpen || p.disabled) && 'box-shadow: none;'}\n  ${p => p.hasPrefix && `${ButtonLabel} {font-weight: 400;}`}\n`;\n\nconst LabelText = styled('span')`\n  &:after {\n    content: ':';\n  }\n\n  font-weight: 600;\n  padding-right: ${space(0.75)};\n`;\n\nexport default DropdownButton;\n","import {Fragment, useCallback, useEffect, useRef, useState} from 'react';\nimport {components as selectComponents} from 'react-select';\nimport styled from '@emotion/styled';\nimport {useButton} from '@react-aria/button';\nimport {FocusScope} from '@react-aria/focus';\nimport {useMenuTrigger} from '@react-aria/menu';\nimport {\n  AriaPositionProps,\n  OverlayProps,\n  useOverlay,\n  useOverlayPosition,\n} from '@react-aria/overlays';\nimport {mergeProps, useResizeObserver} from '@react-aria/utils';\nimport {useMenuTriggerState} from '@react-stately/menu';\n\nimport Badge from 'sentry/components/badge';\nimport Button from 'sentry/components/button';\nimport DropdownButton, {DropdownButtonProps} from 'sentry/components/dropdownButtonV2';\nimport SelectControl, {\n  ControlProps,\n  GeneralSelectValue,\n} from 'sentry/components/forms/selectControl';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport space from 'sentry/styles/space';\n\ninterface TriggerRenderingProps {\n  props: Omit<DropdownButtonProps, 'children'>;\n  ref: React.RefObject<HTMLButtonElement>;\n}\n\ninterface Props<OptionType>\n  extends Omit<ControlProps<OptionType>, 'choices'>,\n    Partial<OverlayProps>,\n    Partial<AriaPositionProps> {\n  options: Array<OptionType & {options?: OptionType[]}>;\n  /**\n   * Pass class name to the outer wrap\n   */\n  className?: string;\n  /**\n   * Whether new options are being loaded. When true, CompactSelect will\n   * display a loading indicator in the header.\n   */\n  isLoading?: boolean;\n  onChangeValueMap?: (value: OptionType[]) => ControlProps<OptionType>['value'];\n  /**\n   * Tag name for the outer wrap, defaults to `div`\n   */\n  renderWrapAs?: React.ElementType;\n  /**\n   * Optionally replace the trigger button with a different component. Note\n   * that the replacement must have the `props` and `ref` (supplied in\n   * TriggerProps) forwarded its outer wrap, otherwise the accessibility\n   * features won't work correctly.\n   */\n  trigger?: (props: TriggerRenderingProps) => React.ReactNode;\n  /**\n   * By default, the menu trigger will be rendered as a button, with\n   * triggerLabel as the button label.\n   */\n  triggerLabel?: React.ReactNode;\n  /**\n   * If using the default button trigger (i.e. the custom `trigger` prop has\n   * not been provided), then `triggerProps` will be passed on to the button\n   * component.\n   */\n  triggerProps?: DropdownButtonProps;\n}\n\n/**\n * Recursively finds the selected option(s) from an options array. Useful for\n * non-flat arrays that contain sections (groups of options).\n */\nfunction getSelectedOptions<OptionType extends GeneralSelectValue = GeneralSelectValue>(\n  opts: Props<OptionType>['options'],\n  value: Props<OptionType>['value']\n): Props<OptionType>['options'] {\n  return opts.reduce((acc: Props<OptionType>['options'], cur) => {\n    if (cur.options) {\n      return acc.concat(getSelectedOptions(cur.options, value));\n    }\n    if (cur.value === value) {\n      return acc.concat(cur);\n    }\n    return acc;\n  }, []);\n}\n\n// Exported so we can further customize this component with react-select's\n// components prop elsewhere\nexport const CompactSelectControl = ({\n  innerProps,\n  ...props\n}: React.ComponentProps<typeof selectComponents.Control>) => {\n  const {hasValue, selectProps} = props;\n  const {isSearchable, menuTitle, isClearable, isLoading} = selectProps;\n\n  return (\n    <Fragment>\n      {(menuTitle || isClearable || isLoading) && (\n        <MenuHeader>\n          <MenuTitle>\n            <span>{menuTitle}</span>\n          </MenuTitle>\n          {isLoading && <StyledLoadingIndicator size={12} mini />}\n          {hasValue && isClearable && !isLoading && (\n            <ClearButton size=\"zero\" borderless onClick={() => props.clearValue()}>\n              Clear\n            </ClearButton>\n          )}\n        </MenuHeader>\n      )}\n      <selectComponents.Control\n        {...props}\n        innerProps={{...innerProps, ...(!isSearchable && {'aria-hidden': true})}}\n      />\n    </Fragment>\n  );\n};\n\n/**\n * A select component with a more compact trigger button. Accepts the same\n * props as SelectControl, plus some more for the trigger button & overlay.\n */\nfunction CompactSelect<OptionType extends GeneralSelectValue = GeneralSelectValue>({\n  // Select props\n  options,\n  onChange,\n  defaultValue,\n  value: valueProp,\n  isDisabled: disabledProp,\n  isSearchable = false,\n  multiple,\n  placeholder = 'Search…',\n  onChangeValueMap,\n  // Trigger button & wrapper props\n  trigger,\n  triggerLabel,\n  triggerProps,\n  className,\n  renderWrapAs,\n  // Overlay props\n  offset = 8,\n  crossOffset = 0,\n  containerPadding = 8,\n  placement = 'bottom left',\n  closeOnSelect = true,\n  shouldCloseOnBlur = true,\n  isDismissable = true,\n  menuTitle,\n  ...props\n}: Props<OptionType>) {\n  // Manage the dropdown menu's open state\n  const isDisabled = disabledProp || options?.length === 0;\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const state = useMenuTriggerState(props);\n  const {menuTriggerProps} = useMenuTrigger(\n    {type: 'listbox', isDisabled},\n    state,\n    triggerRef\n  );\n  const {buttonProps} = useButton(\n    {onPress: () => state.toggle(), isDisabled, ...menuTriggerProps},\n    triggerRef\n  );\n\n  // Control the overlay's position\n  const overlayRef = useRef(null);\n  const {overlayProps} = useOverlay(\n    {\n      onClose: state.close,\n      isOpen: state.isOpen,\n      shouldCloseOnBlur,\n      isDismissable,\n      shouldCloseOnInteractOutside: target =>\n        target && triggerRef.current !== target && !triggerRef.current?.contains(target),\n    },\n    overlayRef\n  );\n  const {overlayProps: positionProps} = useOverlayPosition({\n    targetRef: triggerRef,\n    overlayRef,\n    offset,\n    crossOffset,\n    placement,\n    containerPadding,\n    isOpen: state.isOpen,\n  });\n\n  // Keep an internal copy of the current select value and update the control\n  // button's label when the value changes\n  const [internalValue, setInternalValue] = useState(valueProp ?? defaultValue);\n\n  // Update the button label when the value changes\n  const getLabel = useCallback((): React.ReactNode => {\n    const newValue = valueProp ?? internalValue;\n    const valueSet = Array.isArray(newValue) ? newValue : [newValue];\n    const selectedOptions = valueSet\n      .map(val => getSelectedOptions<OptionType>(options, val))\n      .flat();\n\n    return (\n      <Fragment>\n        <ButtonLabel>{selectedOptions[0]?.label ?? ''}</ButtonLabel>\n        {selectedOptions.length > 1 && (\n          <StyledBadge text={`+${selectedOptions.length - 1}`} />\n        )}\n      </Fragment>\n    );\n  }, [options, valueProp, internalValue]);\n\n  const [label, setLabel] = useState<React.ReactNode>(null);\n  useEffect(() => {\n    setLabel(getLabel());\n  }, [getLabel]);\n\n  // Calculate the current trigger element's width. This will be used as\n  // the min width for the menu.\n  const [triggerWidth, setTriggerWidth] = useState<number>();\n  // Update triggerWidth when its size changes using useResizeObserver\n  const updateTriggerWidth = useCallback(async () => {\n    // Wait until the trigger element finishes rendering, otherwise\n    // ResizeObserver might throw an infinite loop error.\n    await new Promise(resolve => window.setTimeout(resolve));\n\n    const newTriggerWidth = triggerRef.current?.offsetWidth;\n    newTriggerWidth && setTriggerWidth(newTriggerWidth);\n  }, [triggerRef]);\n  useResizeObserver({ref: triggerRef, onResize: updateTriggerWidth});\n  // If ResizeObserver is not available, manually update the width\n  // when any of [trigger, triggerLabel, triggerProps] changes.\n  useEffect(() => {\n    if (typeof window.ResizeObserver !== 'undefined') {\n      return;\n    }\n    updateTriggerWidth();\n  }, [updateTriggerWidth]);\n\n  function onValueChange(option) {\n    const valueMap = onChangeValueMap ?? (opts => opts.map(opt => opt.value));\n    const newValue = Array.isArray(option) ? valueMap(option) : option?.value;\n    setInternalValue(newValue);\n    onChange?.(option);\n\n    if (closeOnSelect && !multiple) {\n      state.close();\n    }\n  }\n\n  function renderTrigger() {\n    if (trigger) {\n      return trigger({\n        props: {\n          ...triggerProps,\n          ...buttonProps,\n          isOpen: state.isOpen,\n        },\n        ref: triggerRef,\n      });\n    }\n    return (\n      <DropdownButton\n        ref={triggerRef}\n        isOpen={state.isOpen}\n        {...triggerProps}\n        {...buttonProps}\n      >\n        {triggerLabel ?? label}\n      </DropdownButton>\n    );\n  }\n\n  function renderMenu() {\n    if (!state.isOpen) {\n      return null;\n    }\n\n    return (\n      <FocusScope restoreFocus autoFocus>\n        <Overlay\n          minWidth={triggerWidth}\n          ref={overlayRef}\n          {...mergeProps(overlayProps, positionProps)}\n        >\n          <SelectControl\n            components={{Control: CompactSelectControl, ClearIndicator: null}}\n            {...props}\n            options={options}\n            value={valueProp ?? internalValue}\n            multiple={multiple}\n            onChange={onValueChange}\n            menuTitle={menuTitle}\n            placeholder={placeholder}\n            isSearchable={isSearchable}\n            menuPlacement=\"bottom\"\n            menuIsOpen\n            isCompact\n            controlShouldRenderValue={false}\n            hideSelectedOptions={false}\n            blurInputOnSelect={false}\n            closeMenuOnSelect={false}\n            closeMenuOnScroll={false}\n            openMenuOnFocus\n          />\n        </Overlay>\n      </FocusScope>\n    );\n  }\n\n  return (\n    <MenuControlWrap className={className} as={renderWrapAs} role=\"presentation\">\n      {renderTrigger()}\n      {renderMenu()}\n    </MenuControlWrap>\n  );\n}\n\nexport default CompactSelect;\n\nconst MenuControlWrap = styled('div')``;\n\nconst ButtonLabel = styled('span')`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst StyledBadge = styled(Badge)`\n  flex-shrink: 0;\n  top: auto;\n`;\n\nconst Overlay = styled('div')<{minWidth?: number}>`\n  max-width: calc(100% - ${space(2)});\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.theme.backgroundElevated};\n  box-shadow: 0 0 0 1px ${p => p.theme.translucentBorder}, ${p => p.theme.dropShadowHeavy};\n  font-size: ${p => p.theme.fontSizeMedium};\n  overflow: hidden;\n\n  /* Override z-index from useOverlayPosition */\n  z-index: ${p => p.theme.zIndex.dropdown} !important;\n\n  ${p => p.minWidth && `min-width: ${p.minWidth}px;`}\n`;\n\nconst MenuHeader = styled('div')`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: ${space(0.25)} ${space(1)} ${space(0.25)} ${space(1.5)};\n  box-shadow: 0 1px 0 ${p => p.theme.translucentInnerBorder};\n  z-index: 1;\n`;\n\nconst MenuTitle = styled('span')`\n  font-weight: 600;\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.headingColor};\n  white-space: nowrap;\n  margin-right: ${space(2)};\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  && {\n    margin: ${space(0.5)} ${space(0.5)} ${space(0.5)} ${space(1)};\n    height: ${space(1.5)};\n    width: ${space(1.5)};\n  }\n`;\n\nconst ClearButton = styled(Button)`\n  font-size: ${p => p.theme.fontSizeSmall};\n  color: ${p => p.theme.subText};\n`;\n","import {withRouter, WithRouterProps} from 'react-router';\nimport {LocationDescriptor} from 'history';\nimport * as qs from 'query-string';\n\nimport Link, {LinkProps} from 'sentry/components/links/link';\nimport {extractSelectionParameters} from 'sentry/components/organizations/pageFilters/utils';\n\ninterface Props extends WithRouterProps {\n  /**\n   * Location that is being linked to\n   */\n  to: LocationDescriptor;\n  children?: React.ReactNode;\n  /**\n   * Styles applied to the component's root\n   */\n  className?: string;\n  /**\n   * Click event (not for navigation)\n   */\n  onClick?: LinkProps['onClick'];\n  /**\n   * Inline styles\n   */\n  style?: React.CSSProperties;\n}\n\n/**\n * A modified link used for navigating between organization level pages that\n * will keep the global selection values (projects, environments, time) in the\n * querystring when navigating if it's present\n *\n * Falls back to <a> if there is no router present.\n */\nfunction GlobalSelectionLink(props: Props) {\n  const {location, to} = props;\n\n  const globalQuery = extractSelectionParameters(location?.query);\n  const hasGlobalQuery = Object.keys(globalQuery).length > 0;\n  const query =\n    typeof to === 'object' && to.query ? {...globalQuery, ...to.query} : globalQuery;\n\n  if (location) {\n    const toWithGlobalQuery: LocationDescriptor = !hasGlobalQuery\n      ? {}\n      : typeof to === 'string'\n      ? {pathname: to, query}\n      : {...to, query};\n\n    const routerProps = hasGlobalQuery\n      ? {...props, to: toWithGlobalQuery}\n      : {...props, to};\n\n    return <Link {...routerProps} />;\n  }\n\n  let queryStringObject = {};\n  if (typeof to === 'object' && to.search) {\n    queryStringObject = qs.parse(to.search);\n  }\n\n  queryStringObject = {...queryStringObject, ...globalQuery};\n\n  if (typeof to === 'object' && to.query) {\n    queryStringObject = {...queryStringObject, ...to.query};\n  }\n\n  const queryString = qs.stringify(queryStringObject);\n  const url =\n    (typeof to === 'string' ? to : to.pathname) + (queryString ? `?${queryString}` : '');\n\n  return <a {...props} href={url} />;\n}\n\nexport default withRouter(GlobalSelectionLink);\n","import {useCallback, useEffect, useMemo, useRef, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {Manager, Popper, PopperProps, Reference} from 'react-popper';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {motion} from 'framer-motion';\n\nimport space from 'sentry/styles/space';\nimport domId from 'sentry/utils/domId';\nimport {ColorOrAlias} from 'sentry/utils/theme';\n\ninterface HovercardProps {\n  /**\n   * Classname to apply to the hovercard\n   */\n  children: React.ReactNode;\n  /**\n   * Element to display in the body\n   */\n  body?: React.ReactNode;\n  /**\n   * Classname to apply to body container\n   */\n  bodyClassName?: string;\n  className?: string;\n  /**\n   * Classname to apply to the hovercard container\n   */\n  containerClassName?: string;\n  /**\n   * Time in ms until hovercard is hidden\n   */\n  displayTimeout?: number;\n  /**\n   * Element to display in the header\n   */\n  header?: React.ReactNode;\n  /**\n   * Offset for the arrow\n   */\n  offset?: string;\n  /**\n   * Position tooltip should take relative to the child element\n   */\n  position?: PopperProps<[]>['placement'];\n  /**\n   * If set, is used INSTEAD OF the hover action to determine whether the hovercard is shown\n   */\n  show?: boolean;\n  /**\n   * Whether to add a dotted underline to the trigger element, to indicate the\n   * presence of a tooltip.\n   */\n  showUnderline?: boolean;\n  /**\n   * Color of the arrow tip border\n   */\n  tipBorderColor?: string;\n  /**\n   * Color of the arrow tip\n   */\n  tipColor?: string;\n  /**\n   * Color of the dotted underline, if available. See also: showUnderline.\n   */\n  underlineColor?: ColorOrAlias;\n}\n\nfunction Hovercard({\n  body,\n  bodyClassName,\n  children,\n  className,\n  containerClassName,\n  header,\n  offset,\n  show,\n  showUnderline,\n  tipBorderColor,\n  tipColor,\n  underlineColor,\n  displayTimeout = 100,\n  position = 'top',\n}: HovercardProps): React.ReactElement {\n  const [visible, setVisible] = useState(false);\n\n  const tooltipId = useMemo(() => domId('hovercard-'), []);\n\n  const showHoverCardTimeoutRef = useRef<number | undefined>(undefined);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(showHoverCardTimeoutRef.current);\n    };\n  }, []);\n\n  const toggleHovercard = useCallback(\n    (value: boolean) => {\n      window.clearTimeout(showHoverCardTimeoutRef.current);\n\n      // Else enqueue a new timeout\n      showHoverCardTimeoutRef.current = window.setTimeout(\n        () => setVisible(value),\n        displayTimeout\n      );\n    },\n    [displayTimeout]\n  );\n\n  const modifiers = useMemo(\n    () => [\n      {\n        name: 'hide',\n        enabled: false,\n      },\n      {\n        name: 'computeStyles',\n        options: {\n          // Using the `transform` attribute causes our borders to get blurry\n          // in chrome. See [0]. This just causes it to use `top` / `left`\n          // positions, which should be fine.\n          //\n          // [0]: https://stackoverflow.com/questions/29543142/css3-transformation-blurry-borders\n          gpuAcceleration: false,\n        },\n      },\n      {\n        name: 'arrow',\n        options: {\n          // Set padding to avoid the arrow reaching the side of the tooltip\n          // and overflowing out of the rounded border\n          padding: 4,\n        },\n      },\n      {\n        name: 'preventOverflow',\n        enabled: true,\n        options: {\n          padding: 12,\n          altAxis: true,\n        },\n      },\n    ],\n    []\n  );\n\n  // If show is not set, then visibility state is uncontrolled\n  const isVisible = show === undefined ? visible : show;\n\n  const hoverProps = useMemo((): {\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\n  } => {\n    // If show is not set, then visibility state is controlled by mouse events\n    if (show === undefined) {\n      return {\n        onMouseEnter: () => toggleHovercard(true),\n        onMouseLeave: () => toggleHovercard(false),\n      };\n    }\n    return {};\n  }, [show, toggleHovercard]);\n\n  return (\n    <Manager>\n      <Reference>\n        {({ref}) => (\n          <Trigger\n            ref={ref}\n            aria-describedby={tooltipId}\n            className={containerClassName}\n            showUnderline={showUnderline}\n            underlineColor={underlineColor}\n            {...hoverProps}\n          >\n            {children}\n          </Trigger>\n        )}\n      </Reference>\n      {createPortal(\n        <Popper placement={position} modifiers={modifiers}>\n          {({ref, style, placement, arrowProps}) => {\n            // Element is not visible in neither controlled and uncontrolled\n            // state (show prop is not passed and card is not hovered)\n            if (!isVisible) {\n              return null;\n            }\n\n            // Nothing to render\n            if (!body && !header) {\n              return null;\n            }\n\n            return (\n              <HovercardContainer style={style} ref={ref}>\n                <SlideInAnimation visible={isVisible} placement={placement}>\n                  <StyledHovercard\n                    id={tooltipId}\n                    placement={placement}\n                    offset={offset}\n                    // Maintain the hovercard class name for BC with less styles\n                    className={classNames('hovercard', className)}\n                    {...hoverProps}\n                  >\n                    {header ? <Header>{header}</Header> : null}\n                    {body ? <Body className={bodyClassName}>{body}</Body> : null}\n                    <HovercardArrow\n                      ref={arrowProps.ref}\n                      style={arrowProps.style}\n                      placement={placement}\n                      tipColor={tipColor}\n                      tipBorderColor={tipBorderColor}\n                    />\n                  </StyledHovercard>\n                </SlideInAnimation>\n              </HovercardContainer>\n            );\n          }}\n        </Popper>,\n        document.body\n      )}\n    </Manager>\n  );\n}\n\nexport {Hovercard};\n\nconst SLIDE_DISTANCE = 10;\n\nfunction SlideInAnimation({\n  visible,\n  placement,\n  children,\n}: {\n  children: React.ReactNode;\n  placement: PopperProps<[]>['placement'];\n  visible: boolean;\n}): React.ReactElement {\n  const narrowedPlacement = getTipDirection(placement);\n\n  const x =\n    narrowedPlacement === 'left'\n      ? [-SLIDE_DISTANCE, 0]\n      : narrowedPlacement === 'right'\n      ? [SLIDE_DISTANCE, 0]\n      : [0, 0];\n\n  const y =\n    narrowedPlacement === 'top'\n      ? [-SLIDE_DISTANCE, 0]\n      : narrowedPlacement === 'bottom'\n      ? [SLIDE_DISTANCE, 0]\n      : [0, 0];\n\n  return (\n    <motion.div\n      initial=\"hidden\"\n      variants={{\n        hidden: {\n          opacity: 0,\n        },\n        visible: {\n          opacity: [0, 1],\n          x,\n          y,\n        },\n      }}\n      animate={visible ? 'visible' : 'hidden'}\n      transition={{duration: 0.1, ease: 'easeInOut'}}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nfunction getTipDirection(\n  placement: HovercardArrowProps['placement']\n): 'top' | 'bottom' | 'left' | 'right' {\n  if (!placement) {\n    return 'top';\n  }\n\n  const prefix = ['top', 'bottom', 'left', 'right'].find(pl => {\n    return placement.startsWith(pl);\n  });\n\n  return (prefix || 'top') as 'top' | 'bottom' | 'left' | 'right';\n}\n\nconst Trigger = styled('span')<{showUnderline?: boolean; underlineColor?: ColorOrAlias}>`\n  ${p => p.showUnderline && p.theme.tooltipUnderline(p.underlineColor)};\n`;\n\nconst HovercardContainer = styled('div')`\n  /* Some hovercards overlap the toplevel header and sidebar, and we need to appear on top */\n  z-index: ${p => p.theme.zIndex.hovercard};\n`;\n\ntype StyledHovercardProps = {\n  placement: PopperProps<[]>['placement'];\n  offset?: string;\n};\n\nconst StyledHovercard = styled('div')<StyledHovercardProps>`\n  position: relative;\n  border-radius: ${p => p.theme.borderRadius};\n  text-align: left;\n  padding: 0;\n  line-height: 1;\n  white-space: initial;\n  color: ${p => p.theme.textColor};\n  border: 1px solid ${p => p.theme.border};\n  background: ${p => p.theme.background};\n  background-clip: padding-box;\n  box-shadow: 0 0 35px 0 rgba(67, 62, 75, 0.2);\n  width: 295px;\n\n  /* The hovercard may appear in different contexts, don't inherit fonts */\n  font-family: ${p => p.theme.text.family};\n\n  /* Offset for the arrow */\n  ${p => (p.placement === 'top' ? `margin-bottom: ${p.offset ?? space(2)}` : '')};\n  ${p => (p.placement === 'bottom' ? `margin-top: ${p.offset ?? space(2)}` : '')};\n  ${p => (p.placement === 'left' ? `margin-right: ${p.offset ?? space(2)}` : '')};\n  ${p => (p.placement === 'right' ? `margin-left: ${p.offset ?? space(2)}` : '')};\n`;\n\nconst Header = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  background: ${p => p.theme.backgroundSecondary};\n  border-bottom: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadiusTop};\n  font-weight: 600;\n  word-wrap: break-word;\n  padding: ${space(1.5)};\n`;\n\nexport {Header};\n\nconst Body = styled('div')`\n  padding: ${space(2)};\n  min-height: 30px;\n`;\n\nexport {Body};\n\ntype HovercardArrowProps = {\n  placement: PopperProps<[]>['placement'];\n  tipBorderColor?: string;\n  tipColor?: string;\n};\n\nconst HovercardArrow = styled('span')<HovercardArrowProps>`\n  position: absolute;\n  width: 20px;\n  height: 20px;\n  right: ${p => (p.placement === 'left' ? '-20px' : 'auto')};\n  left: ${p => (p.placement === 'right' ? '-20px' : 'auto')};\n  bottom: ${p => (p.placement === 'top' ? '-20px' : 'auto')};\n  top: ${p => (p.placement === 'bottom' ? '-20px' : 'auto')};\n\n  &::before,\n  &::after {\n    content: '';\n    margin: auto;\n    position: absolute;\n    display: block;\n    width: 0;\n    height: 0;\n    top: 0;\n    left: 0;\n  }\n\n  /* before element is the hairline border, it is repositioned for each orientation */\n  &::before {\n    top: 1px;\n    border: 10px solid transparent;\n    border-${p => getTipDirection(p.placement)}-color:\n      ${p => p.tipBorderColor || p.tipColor || p.theme.border};\n      ${p => (p.placement === 'bottom' ? 'top: -1px' : '')};\n      ${p => (p.placement === 'left' ? 'top: 0; left: 1px;' : '')};\n      ${p => (p.placement === 'right' ? 'top: 0; left: -1px' : '')};\n    }\n    &::after {\n      border: 10px solid transparent;\n      border-${p => getTipDirection(p.placement)}-color: ${p =>\n  p.tipColor ?? p.theme.background};\n    }\n`;\n","export const URL_PARAM = {\n  START: 'start',\n  END: 'end',\n  UTC: 'utc',\n  PERIOD: 'statsPeriod',\n  PROJECT: 'project',\n  ENVIRONMENT: 'environment',\n};\n\nexport const PAGE_URL_PARAM = {\n  PAGE_START: 'pageStart',\n  PAGE_END: 'pageEnd',\n  PAGE_UTC: 'pageUtc',\n  PAGE_PERIOD: 'pageStatsPeriod',\n};\n\nexport const DATE_TIME = {\n  START: 'start',\n  END: 'end',\n  PERIOD: 'period',\n  UTC: 'utc',\n};\n\nexport const DATE_TIME_KEYS = [...Object.values(DATE_TIME), 'statsPeriod'];\n\nexport const ALL_ACCESS_PROJECTS = -1;\n","import {createStore} from 'reflux';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport TeamActions from 'sentry/actions/teamActions';\nimport {Project, Team} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\nimport {CommonStoreDefinition} from './types';\n\ntype State = {\n  loading: boolean;\n  projects: Project[];\n};\n\ntype StatsData = Record<string, Project['stats']>;\n\n/**\n * Attributes that need typing but aren't part of the external interface,\n */\ntype InternalDefinition = {\n  itemsById: Record<string, Project>;\n  loading: boolean;\n  removeTeamFromProject(teamSlug: string, project: Project): void;\n};\n\ninterface ProjectsStoreDefinition\n  extends InternalDefinition,\n    CommonStoreDefinition<State> {\n  getAll(): Project[];\n  getById(id?: string): Project | undefined;\n  getBySlug(slug?: string): Project | undefined;\n  init(): void;\n  isLoading(): boolean;\n  loadInitialData(projects: Project[]): void;\n  onAddTeam(team: Team, projectSlug: string): void;\n  onChangeSlug(prevSlug: string, newSlug: string): void;\n  onCreateSuccess(project: Project): void;\n  onDeleteTeam(slug: string): void;\n  onRemoveTeam(teamSlug: string, projectSlug: string): void;\n  onStatsLoadSuccess(data: StatsData): void;\n  onUpdateSuccess(data: Partial<Project>): void;\n  reset(): void;\n}\n\nconst storeConfig: ProjectsStoreDefinition = {\n  itemsById: {},\n  loading: true,\n  unsubscribeListeners: [],\n\n  init() {\n    this.reset();\n\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.changeSlug, this.onChangeSlug)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.loadProjects, this.loadInitialData)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess)\n    );\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam)\n    );\n    this.unsubscribeListeners.push(this.listenTo(ProjectActions.reset, this.reset));\n    this.unsubscribeListeners.push(\n      this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess)\n    );\n\n    this.unsubscribeListeners.push(\n      this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam)\n    );\n  },\n\n  reset() {\n    this.itemsById = {};\n    this.loading = true;\n  },\n\n  loadInitialData(items: Project[]) {\n    const mapping = items.map(project => [project.id, project] as const);\n\n    this.itemsById = Object.fromEntries(mapping);\n    this.loading = false;\n\n    this.trigger(new Set(Object.keys(this.itemsById)));\n  },\n\n  onChangeSlug(prevSlug: string, newSlug: string) {\n    const prevProject = this.getBySlug(prevSlug);\n\n    if (!prevProject) {\n      return;\n    }\n\n    const newProject = {...prevProject, slug: newSlug};\n\n    this.itemsById = {...this.itemsById, [newProject.id]: newProject};\n    this.trigger(new Set([prevProject.id]));\n  },\n\n  onCreateSuccess(project: Project) {\n    this.itemsById = {...this.itemsById, [project.id]: project};\n    this.trigger(new Set([project.id]));\n  },\n\n  onUpdateSuccess(data: Partial<Project>) {\n    const project = this.getById(data.id);\n\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, ...data};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([data.id]));\n  },\n\n  onStatsLoadSuccess(data) {\n    const entries = Object.entries(data || {}).filter(\n      ([projectId]) => projectId in this.itemsById\n    );\n\n    // Assign stats into projects\n    entries.forEach(([projectId, stats]) => {\n      this.itemsById[projectId].stats = stats;\n    });\n\n    const touchedIds = entries.map(([projectId]) => projectId);\n    this.trigger(new Set(touchedIds));\n  },\n\n  /**\n   * Listener for when a team is completely removed\n   *\n   * @param teamSlug Team Slug\n   */\n  onDeleteTeam(teamSlug: string) {\n    // Look for team in all projects\n    const projects = this.getAll().filter(({teams}) =>\n      teams.find(({slug}) => slug === teamSlug)\n    );\n\n    projects.forEach(project => this.removeTeamFromProject(teamSlug, project));\n\n    const affectedProjectIds = projects.map(project => project.id);\n    this.trigger(new Set(affectedProjectIds));\n  },\n\n  onRemoveTeam(teamSlug: string, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    if (!project) {\n      return;\n    }\n\n    this.removeTeamFromProject(teamSlug, project);\n    this.trigger(new Set([project.id]));\n  },\n\n  onAddTeam(team: Team, projectSlug: string) {\n    const project = this.getBySlug(projectSlug);\n\n    // Don't do anything if we can't find a project\n    if (!project) {\n      return;\n    }\n\n    const newProject = {...project, teams: [...project.teams, team]};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n    this.trigger(new Set([project.id]));\n  },\n\n  // Internal method, does not trigger\n  removeTeamFromProject(teamSlug: string, project: Project) {\n    const newTeams = project.teams.filter(({slug}) => slug !== teamSlug);\n    const newProject = {...project, teams: newTeams};\n\n    this.itemsById = {...this.itemsById, [project.id]: newProject};\n  },\n\n  isLoading() {\n    return this.loading;\n  },\n\n  getAll() {\n    return Object.values(this.itemsById).sort((a, b) => a.slug.localeCompare(b.slug));\n  },\n\n  getById(id) {\n    return this.getAll().find(project => project.id === id);\n  },\n\n  getBySlug(slug) {\n    return this.getAll().find(project => project.slug === slug);\n  },\n\n  getState() {\n    return {\n      projects: this.getAll(),\n      loading: this.loading,\n    };\n  },\n};\n\nconst ProjectsStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default ProjectsStore;\n","type Result = Record<string, {cursor: string; href: string; results: boolean | null}>;\n\nexport default function parseLinkHeader(header: string | null): Result {\n  if (header === null || header === '') {\n    return {};\n  }\n\n  const headerValues = header.split(',');\n  const links = {};\n\n  headerValues.forEach(val => {\n    const match =\n      /<([^>]+)>; rel=\"([^\"]+)\"(?:; results=\"([^\"]+)\")?(?:; cursor=\"([^\"]+)\")?/g.exec(\n        val\n      );\n    const hasResults = match![3] === 'true' ? true : match![3] === 'false' ? false : null;\n\n    links[match![2]] = {\n      href: match![1],\n      results: hasResults,\n      cursor: match![4],\n    };\n  });\n\n  return links;\n}\n","import {Component} from 'react';\nimport memoize from 'lodash/memoize';\nimport partition from 'lodash/partition';\nimport uniqBy from 'lodash/uniqBy';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport {Client} from 'sentry/api';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {AvatarProject, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\ntype ProjectPlaceholder = AvatarProject;\n\ntype State = {\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n\n  /**\n   * Projects from API\n   */\n  fetchedProjects: Project[] | ProjectPlaceholder[];\n\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n\n  /**\n   * Project results (from API) are paginated and there are more projects\n   * that are not in the initial queryset\n   */\n  hasMore: null | boolean;\n\n  /**\n   * Reflects whether or not the initial fetch for the requested projects\n   * was fulfilled\n   */\n  initiallyLoaded: boolean;\n\n  /**\n   * This is set when we fail to find some slugs from both store and API\n   */\n  isIncomplete: null | boolean;\n  prevSearch: null | string;\n  /**\n   * Projects fetched from store\n   */\n  projectsFromStore: Project[];\n\n  nextCursor?: null | string;\n};\n\ntype RenderProps = {\n  /**\n   * Calls API and searches for project, accepts a callback function with signature:\n   * fn(searchTerm, {append: bool})\n   */\n  onSearch: (searchTerm: string, {append: boolean}) => void;\n\n  /**\n   * We want to make sure that at the minimum, we return a list of objects with only `slug`\n   * while we load actual project data\n   */\n  projects: Project[] | ProjectPlaceholder[];\n} & Pick<\n  State,\n  'isIncomplete' | 'fetching' | 'hasMore' | 'initiallyLoaded' | 'fetchError'\n>;\ntype RenderFunc = (props: RenderProps) => React.ReactNode;\n\ntype DefaultProps = {\n  /**\n   * If slugs is passed, forward placeholder objects with slugs while fetching\n   */\n  passthroughPlaceholderProject?: boolean;\n};\n\ntype Props = {\n  api: Client;\n\n  children: RenderFunc;\n\n  /**\n   * Organization slug\n   */\n  orgId: string;\n\n  /**\n   * List of projects that have we already have summaries for (i.e. from store)\n   */\n  projects: Project[];\n\n  /**\n   * Whether to fetch all the projects in the organization of which the user\n   * has access to\n   * */\n  allProjects?: boolean;\n\n  /**\n   * Number of projects to return when not using `props.slugs`\n   */\n  limit?: number;\n\n  /**\n   * List of project ids to look for summaries for, this can be from `props.projects`,\n   * otherwise fetch from API\n   */\n  projectIds?: number[];\n  /**\n   * List of slugs to look for summaries for, this can be from `props.projects`,\n   * otherwise fetch from API\n   */\n  slugs?: string[];\n} & DefaultProps;\n\nclass BaseProjects extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    passthroughPlaceholderProject: true,\n  };\n\n  state: State = {\n    fetchedProjects: [],\n    projectsFromStore: [],\n    initiallyLoaded: false,\n    fetching: false,\n    isIncomplete: null,\n    hasMore: null,\n    prevSearch: null,\n    nextCursor: null,\n    fetchError: null,\n  };\n\n  componentDidMount() {\n    const {slugs, projectIds} = this.props;\n\n    if (!!slugs?.length) {\n      this.loadSpecificProjects();\n    } else if (!!projectIds?.length) {\n      this.loadSpecificProjectsFromIds();\n    } else {\n      this.loadAllProjects();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {projects} = this.props;\n\n    if (projects !== prevProps.projects) {\n      this.updateProjectsFromStore();\n    }\n  }\n\n  /**\n   * Function to update projects when the store emits updates\n   */\n  updateProjectsFromStore() {\n    const {allProjects, projects, slugs} = this.props;\n\n    if (allProjects) {\n      this.setState({fetchedProjects: projects});\n      return;\n    }\n\n    if (!!slugs?.length) {\n      // Extract the requested projects from the store based on props.slugs\n      const projectsMap = this.getProjectsMap(projects);\n      const projectsFromStore = slugs.map(slug => projectsMap.get(slug)).filter(defined);\n      this.setState({projectsFromStore});\n    }\n  }\n\n  /**\n   * List of projects that need to be fetched via API\n   */\n  fetchQueue: Set<string> = new Set();\n\n  /**\n   * Memoized function that returns a `Map<project.slug, project>`\n   */\n  getProjectsMap: (projects: Project[]) => Map<string, Project> = memoize(\n    projects => new Map(projects.map(project => [project.slug, project]))\n  );\n\n  /**\n   * Memoized function that returns a `Map<project.id, project>`\n   */\n  getProjectsIdMap: (projects: Project[]) => Map<number, Project> = memoize(\n    projects => new Map(projects.map(project => [parseInt(project.id, 10), project]))\n  );\n\n  /**\n   * When `props.slugs` is included, identifies what projects we already\n   * have summaries for and what projects need to be fetched from API\n   */\n  loadSpecificProjects = () => {\n    const {slugs, projects} = this.props;\n\n    const projectsMap = this.getProjectsMap(projects);\n\n    // Split slugs into projects that are in store and not in store\n    // (so we can request projects not in store)\n    const [inStore, notInStore] = partition(slugs, slug => projectsMap.has(slug));\n\n    // Get the actual summaries of projects that are in store\n    const projectsFromStore = inStore.map(slug => projectsMap.get(slug)).filter(defined);\n\n    // Add to queue\n    notInStore.forEach(slug => this.fetchQueue.add(slug));\n\n    this.setState({\n      // placeholders for projects we need to fetch\n      fetchedProjects: notInStore.map(slug => ({slug})),\n      // set initiallyLoaded if any projects were fetched from store\n      initiallyLoaded: !!inStore.length,\n      projectsFromStore,\n    });\n\n    if (!notInStore.length) {\n      return;\n    }\n\n    this.fetchSpecificProjects();\n  };\n\n  /**\n   * When `props.projectIds` is included, identifies if we already\n   * have summaries them, otherwise fetches all projects from API\n   */\n  loadSpecificProjectsFromIds = () => {\n    const {projectIds, projects} = this.props;\n\n    const projectsMap = this.getProjectsIdMap(projects);\n\n    // Split projectIds into projects that are in store and not in store\n    // (so we can request projects not in store)\n    const [inStore, notInStore] = partition(projectIds, id => projectsMap.has(id));\n\n    if (notInStore.length) {\n      this.loadAllProjects();\n      return;\n    }\n\n    // Get the actual summaries of projects that are in store\n    const projectsFromStore = inStore.map(id => projectsMap.get(id)).filter(defined);\n\n    this.setState({\n      // set initiallyLoaded if any projects were fetched from store\n      initiallyLoaded: !!inStore.length,\n      projectsFromStore,\n    });\n  };\n\n  /**\n   * These will fetch projects via API (using project slug) provided by `this.fetchQueue`\n   */\n  fetchSpecificProjects = async () => {\n    const {api, orgId, passthroughPlaceholderProject} = this.props;\n\n    if (!this.fetchQueue.size) {\n      return;\n    }\n\n    this.setState({\n      fetching: true,\n    });\n\n    let projects: Project[] = [];\n    let fetchError = null;\n\n    try {\n      const {results} = await fetchProjects(api, orgId, {\n        slugs: Array.from(this.fetchQueue),\n      });\n      projects = results;\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n      fetchError = err;\n    }\n\n    const projectsMap = this.getProjectsMap(projects);\n\n    // For each item in the fetch queue, lookup the project object and in the case\n    // where something wrong has happened and we were unable to get project summary from\n    // the server, just fill in with an object with only the slug\n    const projectsOrPlaceholder: Project[] | ProjectPlaceholder[] = Array.from(\n      this.fetchQueue\n    )\n      .map(slug =>\n        projectsMap.has(slug)\n          ? projectsMap.get(slug)\n          : !!passthroughPlaceholderProject\n          ? {slug}\n          : null\n      )\n      .filter(defined);\n\n    this.setState({\n      fetchedProjects: projectsOrPlaceholder,\n      isIncomplete: this.fetchQueue.size !== projects.length,\n      initiallyLoaded: true,\n      fetching: false,\n      fetchError,\n    });\n\n    this.fetchQueue.clear();\n  };\n\n  /**\n   * If `props.slugs` is not provided, request from API a list of paginated project summaries\n   * that are in `prop.orgId`.\n   *\n   * Provide render prop with results as well as `hasMore` to indicate there are more results.\n   * Downstream consumers should use this to notify users so that they can e.g. narrow down\n   * results using search\n   */\n  loadAllProjects = async () => {\n    const {api, orgId, limit, allProjects} = this.props;\n\n    this.setState({\n      fetching: true,\n    });\n\n    try {\n      const {results, hasMore, nextCursor} = await fetchProjects(api, orgId, {\n        limit,\n        allProjects,\n      });\n\n      this.setState({\n        fetching: false,\n        fetchedProjects: results,\n        initiallyLoaded: true,\n        hasMore,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      this.setState({\n        fetching: false,\n        fetchedProjects: [],\n        initiallyLoaded: true,\n        fetchError: err,\n      });\n    }\n  };\n\n  /**\n   * This is an action provided to consumers for them to update the current projects\n   * result set using a simple search query. You can allow the new results to either\n   * be appended or replace the existing results.\n   *\n   * @param {String} search The search term to use\n   * @param {Object} options Options object\n   * @param {Boolean} options.append Results should be appended to existing list (otherwise, will replace)\n   */\n  handleSearch = async (search: string, {append}: {append?: boolean} = {}) => {\n    const {api, orgId, limit} = this.props;\n    const {prevSearch} = this.state;\n    const cursor = this.state.nextCursor;\n\n    this.setState({fetching: true});\n\n    try {\n      const {results, hasMore, nextCursor} = await fetchProjects(api, orgId, {\n        search,\n        limit,\n        prevSearch,\n        cursor,\n      });\n\n      this.setState((state: State) => {\n        let fetchedProjects;\n        if (append) {\n          // Remove duplicates\n          fetchedProjects = uniqBy(\n            [...state.fetchedProjects, ...results],\n            ({slug}) => slug\n          );\n        } else {\n          fetchedProjects = results;\n        }\n        return {\n          fetchedProjects,\n          hasMore,\n          fetching: false,\n          prevSearch: search,\n          nextCursor,\n        };\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      this.setState({\n        fetching: false,\n        fetchError: err,\n      });\n    }\n  };\n\n  render() {\n    const {slugs, children} = this.props;\n\n    const renderProps = {\n      // We want to make sure that at the minimum, we return a list of objects with only `slug`\n      // while we load actual project data\n      projects: this.state.initiallyLoaded\n        ? [...this.state.fetchedProjects, ...this.state.projectsFromStore]\n        : (slugs && slugs.map(slug => ({slug}))) || [],\n\n      // This is set when we fail to find some slugs from both store and API\n      isIncomplete: this.state.isIncomplete,\n\n      // This is state for when fetching data from API\n      fetching: this.state.fetching,\n\n      // Project results (from API) are paginated and there are more projects\n      // that are not in the initial queryset\n      hasMore: this.state.hasMore,\n\n      // Calls API and searches for project, accepts a callback function with signature:\n      //\n      // fn(searchTerm, {append: bool})\n      onSearch: this.handleSearch,\n\n      // Reflects whether or not the initial fetch for the requested projects\n      // was fulfilled\n      initiallyLoaded: this.state.initiallyLoaded,\n\n      // The error that occurred if fetching failed\n      fetchError: this.state.fetchError,\n    };\n\n    return children(renderProps);\n  }\n}\n\n/**\n * @deprecated consider using useProjects if possible.\n *\n * This is a utility component that should be used to fetch an organization's projects (summary).\n * It can either fetch explicit projects (e.g. via slug) or a paginated list of projects.\n * These will be passed down to the render prop (`children`).\n *\n * The legacy way of handling this is that `ProjectSummary[]` is expected to be included in an\n * `Organization` as well as being saved to `ProjectsStore`.\n */\nconst Projects = withProjects(withApi(BaseProjects));\n\nexport default Projects;\n\ntype FetchProjectsOptions = {\n  cursor?: State['nextCursor'];\n  prevSearch?: State['prevSearch'];\n  search?: State['prevSearch'];\n  slugs?: string[];\n} & Pick<Props, 'limit' | 'allProjects'>;\n\nasync function fetchProjects(\n  api: Client,\n  orgId: string,\n  {slugs, search, limit, prevSearch, cursor, allProjects}: FetchProjectsOptions = {}\n) {\n  const query: {\n    collapse: string[];\n    all_projects?: number;\n    cursor?: typeof cursor;\n    per_page?: number;\n    query?: string;\n  } = {\n    // Never return latestDeploys project property from api\n    collapse: ['latestDeploys'],\n  };\n\n  if (slugs && slugs.length) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ? `${query.query} ` : ''}${search}`;\n  }\n\n  if (((!prevSearch && !search) || prevSearch === search) && cursor) {\n    query.cursor = cursor;\n  }\n\n  // \"0\" shouldn't be a valid value, so this check is fine\n  if (limit) {\n    query.per_page = limit;\n  }\n\n  if (allProjects) {\n    const projects = ProjectsStore.getAll();\n    const loading = ProjectsStore.isLoading();\n    // If the projects store is loaded then return all projects from the store\n    if (!loading) {\n      return {\n        results: projects,\n        hasMore: false,\n      };\n    }\n    // Otherwise mark the query to fetch all projects from the API\n    query.all_projects = 1;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/projects/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore =\n      paginationObject &&\n      (paginationObject.next.results || paginationObject.previous.results);\n    nextCursor = paginationObject.next.cursor;\n  }\n\n  // populate the projects store if all projects were fetched\n  if (allProjects) {\n    ProjectActions.loadProjects(data);\n  }\n\n  return {\n    results: data,\n    hasMore,\n    nextCursor,\n  };\n}\n","export function selectText(node: HTMLElement): void {\n  if (node instanceof HTMLInputElement && node.type === 'text') {\n    node.select();\n  } else if (node instanceof Node && window.getSelection) {\n    const range = document.createRange();\n    range.selectNode(node);\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n}\n","import {useEffect, useRef, useState} from 'react';\nimport uniqBy from 'lodash/uniqBy';\n\nimport ProjectActions from 'sentry/actions/projectActions';\nimport {Client} from 'sentry/api';\nimport OrganizationStore from 'sentry/stores/organizationStore';\nimport ProjectsStore from 'sentry/stores/projectsStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {AvatarProject, Project} from 'sentry/types';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport RequestError from 'sentry/utils/requestError/requestError';\nimport useApi from 'sentry/utils/useApi';\n\ntype ProjectPlaceholder = AvatarProject;\n\ntype State = {\n  /**\n   * The error that occurred if fetching failed\n   */\n  fetchError: null | RequestError;\n  /**\n   * This is state for when fetching data from API\n   */\n  fetching: boolean;\n  /**\n   * Indicates that Project results (from API) are paginated and there are more\n   * projects that are not in the initial response\n   */\n  hasMore: null | boolean;\n  /**\n   * Reflects whether or not the initial fetch for the requested projects\n   * was fulfilled. This accounts for both the store and specifically loaded\n   * slugs.\n   */\n  initiallyLoaded: boolean;\n  /**\n   * The last query we searched. Used to validate the cursor\n   */\n  lastSearch: null | string;\n  /**\n   * Pagination\n   */\n  nextCursor?: null | string;\n};\n\ntype Result = {\n  /**\n   * This is an action provided to consumers for them to update the current\n   * projects result set using a simple search query.\n   *\n   * Will always add new options into the store.\n   */\n  onSearch: (searchTerm: string) => Promise<void>;\n  /**\n   * When loading specific slugs, placeholder objects will be returned\n   */\n  placeholders: ProjectPlaceholder[];\n  /**\n   * The loaded projects list\n   */\n  projects: Project[];\n} & Pick<State, 'fetching' | 'hasMore' | 'fetchError' | 'initiallyLoaded'>;\n\ntype Options = {\n  /**\n   * Number of projects to return when not using `props.slugs`\n   */\n  limit?: number;\n  /**\n   * Specify an orgId, overriding the organization in the current context\n   */\n  orgId?: string;\n  /**\n   * List of slugs to look for summaries for, this can be from `props.projects`,\n   * otherwise fetch from API\n   */\n  slugs?: string[];\n};\n\ntype FetchProjectsOptions = {\n  cursor?: State['nextCursor'];\n  lastSearch?: State['lastSearch'];\n  limit?: Options['limit'];\n  search?: State['lastSearch'];\n  slugs?: string[];\n};\n\n/**\n * Helper function to actually load projects\n */\nasync function fetchProjects(\n  api: Client,\n  orgId: string,\n  {slugs, search, limit, lastSearch, cursor}: FetchProjectsOptions = {}\n) {\n  const query: {\n    collapse: string[];\n    all_projects?: number;\n    cursor?: typeof cursor;\n    per_page?: number;\n    query?: string;\n  } = {\n    // Never return latestDeploys project property from api\n    collapse: ['latestDeploys'],\n  };\n\n  if (slugs !== undefined && slugs.length > 0) {\n    query.query = slugs.map(slug => `slug:${slug}`).join(' ');\n  }\n\n  if (search) {\n    query.query = `${query.query ?? ''}${search}`.trim();\n  }\n\n  const prevSearchMatches = (!lastSearch && !search) || lastSearch === search;\n\n  if (prevSearchMatches && cursor) {\n    query.cursor = cursor;\n  }\n\n  if (limit !== undefined) {\n    query.per_page = limit;\n  }\n\n  let hasMore: null | boolean = false;\n  let nextCursor: null | string = null;\n  const [data, , resp] = await api.requestPromise(`/organizations/${orgId}/projects/`, {\n    includeAllArgs: true,\n    query,\n  });\n\n  const pageLinks = resp?.getResponseHeader('Link');\n  if (pageLinks) {\n    const paginationObject = parseLinkHeader(pageLinks);\n    hasMore = paginationObject?.next?.results || paginationObject?.previous?.results;\n    nextCursor = paginationObject?.next?.cursor;\n  }\n\n  return {results: data, hasMore, nextCursor};\n}\n\n/**\n * Provides projects from the ProjectStore\n *\n * This hook also provides a way to select specific project slugs, and search\n * (type-ahead) for more projects that may not be in the project store.\n *\n * NOTE: Currently ALL projects are always loaded, but this hook is designed\n * for future-compat in a world where we do _not_ load all projects.\n */\nfunction useProjects({limit, slugs, orgId: propOrgId}: Options = {}) {\n  const api = useApi();\n\n  const {organization} = useLegacyStore(OrganizationStore);\n  const store = useLegacyStore(ProjectsStore);\n\n  const orgId = propOrgId ?? organization?.slug;\n\n  const storeSlugs = new Set(store.projects.map(t => t.slug));\n  const slugsToLoad = slugs?.filter(slug => !storeSlugs.has(slug)) ?? [];\n  const shouldLoadSlugs = slugsToLoad.length > 0;\n\n  const [state, setState] = useState<State>({\n    initiallyLoaded: !store.loading && !shouldLoadSlugs,\n    fetching: shouldLoadSlugs,\n    hasMore: null,\n    lastSearch: null,\n    nextCursor: null,\n    fetchError: null,\n  });\n\n  const slugsRef = useRef<Set<string> | null>(null);\n\n  // Only initialize slugsRef.current once and modify it when we receive new\n  // slugs determined through set equality\n  if (slugs !== undefined) {\n    if (slugsRef.current === null) {\n      slugsRef.current = new Set(slugs);\n    }\n\n    if (\n      slugs.length !== slugsRef.current.size ||\n      slugs.some(slug => !slugsRef.current?.has(slug))\n    ) {\n      slugsRef.current = new Set(slugs);\n    }\n  }\n\n  async function loadProjectsBySlug() {\n    if (orgId === undefined) {\n      // eslint-disable-next-line no-console\n      console.error('Cannot use useProjects({slugs}) without an organization in context');\n      return;\n    }\n\n    setState({...state, fetching: true});\n    try {\n      const {results, hasMore, nextCursor} = await fetchProjects(api, orgId, {\n        slugs: slugsToLoad,\n        limit,\n      });\n\n      const fetchedProjects = uniqBy([...store.projects, ...results], ({slug}) => slug);\n      ProjectActions.loadProjects(fetchedProjects);\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        initiallyLoaded: true,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({\n        ...state,\n        fetching: false,\n        initiallyLoaded: !store.loading,\n        fetchError: err,\n      });\n    }\n  }\n\n  async function handleSearch(search: string) {\n    const {lastSearch} = state;\n    const cursor = state.nextCursor;\n\n    if (search === '') {\n      return;\n    }\n\n    if (orgId === undefined) {\n      // eslint-disable-next-line no-console\n      console.error('Cannot use useProjects.onSearch without an organization in context');\n      return;\n    }\n\n    setState({...state, fetching: true});\n\n    try {\n      api.clear();\n      const {results, hasMore, nextCursor} = await fetchProjects(api, orgId, {\n        search,\n        limit,\n        lastSearch,\n        cursor,\n      });\n\n      const fetchedProjects = uniqBy([...store.projects, ...results], ({slug}) => slug);\n\n      // Only update the store if we have more items\n      if (fetchedProjects.length > store.projects.length) {\n        ProjectActions.loadProjects(fetchedProjects);\n      }\n\n      setState({\n        ...state,\n        hasMore,\n        fetching: false,\n        lastSearch: search,\n        nextCursor,\n      });\n    } catch (err) {\n      console.error(err); // eslint-disable-line no-console\n\n      setState({...state, fetching: false, fetchError: err});\n    }\n  }\n\n  useEffect(() => {\n    // Load specified team slugs\n    if (shouldLoadSlugs) {\n      loadProjectsBySlug();\n      return;\n    }\n  }, [slugsRef.current]);\n\n  // Update initiallyLoaded when we finish loading within the projectStore\n  useEffect(() => {\n    const storeLoaded = !store.loading;\n\n    if (state.initiallyLoaded === storeLoaded) {\n      return;\n    }\n\n    if (shouldLoadSlugs) {\n      return;\n    }\n\n    setState({...state, initiallyLoaded: storeLoaded});\n  }, [store.loading]);\n\n  const {initiallyLoaded, fetching, fetchError, hasMore} = state;\n\n  const filteredProjects = slugs\n    ? store.projects.filter(t => slugs.includes(t.slug))\n    : store.projects;\n\n  const placeholders = slugsToLoad.map(slug => ({slug}));\n\n  const result: Result = {\n    projects: filteredProjects,\n    placeholders,\n    fetching: fetching || store.loading,\n    initiallyLoaded,\n    fetchError,\n    hasMore,\n    onSearch: handleSearch,\n  };\n\n  return result;\n}\n\nexport default useProjects;\n","import {Project} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useProjects from 'sentry/utils/useProjects';\n\ntype InjectedProjectsProps = {\n  projects: Project[];\n  loadingProjects?: boolean;\n};\n\n/**\n * Higher order component that uses ProjectsStore and provides a list of projects\n */\nfunction withProjects<P extends InjectedProjectsProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  type Props = Omit<P, keyof InjectedProjectsProps>;\n\n  const Wrapper: React.FC<Props> = props => {\n    const {projects, initiallyLoaded} = useProjects();\n    const loadingProjects = !initiallyLoaded;\n\n    return <WrappedComponent {...(props as P)} {...{projects, loadingProjects}} />;\n  };\n\n  Wrapper.displayName = `withProjects(${getDisplayName(WrappedComponent)})`;\n\n  return Wrapper;\n}\n\nexport default withProjects;\n"],"names":["createActions","children","text","props","space","p","theme","badge","type","color","background","hideMessages","successMessage","t","errorMessage","value","onSuccess","onError","hideUnsupported","element","setElement","useState","handleClick","useCallback","copy","addErrorMessage","addSuccessMessage","useEffect","addEventListener","removeEventListener","handleMount","ref","findDOMNode","document","queryCommandSupported","isValidElement","cloneElement","DropdownButton","forwardRef","prefix","isOpen","showChevron","disabled","priority","StyledButton","hasPrefix","LabelText","StyledChevron","size","direction","IconChevron","Button","ButtonLabel","getSelectedOptions","opts","reduce","acc","cur","options","concat","CompactSelectControl","innerProps","hasValue","selectProps","isSearchable","menuTitle","isClearable","isLoading","Fragment","MenuHeader","MenuTitle","StyledLoadingIndicator","mini","ClearButton","borderless","onClick","clearValue","CompactSelect","onChange","defaultValue","valueProp","isDisabled","disabledProp","multiple","placeholder","onChangeValueMap","trigger","triggerLabel","triggerProps","className","renderWrapAs","offset","crossOffset","containerPadding","placement","closeOnSelect","shouldCloseOnBlur","isDismissable","length","triggerRef","useRef","state","useMenuTriggerState","menuTriggerProps","useMenuTrigger","buttonProps","useButton","onPress","toggle","overlayRef","overlayProps","useOverlay","onClose","close","shouldCloseOnInteractOutside","target","current","contains","positionProps","useOverlayPosition","targetRef","internalValue","setInternalValue","getLabel","newValue","selectedOptions","Array","isArray","map","val","flat","label","StyledBadge","setLabel","triggerWidth","setTriggerWidth","updateTriggerWidth","async","Promise","resolve","window","setTimeout","newTriggerWidth","offsetWidth","useResizeObserver","onResize","ResizeObserver","MenuControlWrap","as","role","restoreFocus","autoFocus","Overlay","minWidth","mergeProps","components","Control","ClearIndicator","option","valueMap","opt","menuPlacement","menuIsOpen","isCompact","controlShouldRenderValue","hideSelectedOptions","blurInputOnSelect","closeMenuOnSelect","closeMenuOnScroll","openMenuOnFocus","overflowEllipsis","Badge","borderRadius","backgroundElevated","translucentBorder","dropShadowHeavy","fontSizeMedium","zIndex","dropdown","translucentInnerBorder","fontSizeSmall","headingColor","LoadingIndicator","subText","GlobalSelectionLink","location","to","globalQuery","extractSelectionParameters","query","hasGlobalQuery","Object","keys","toWithGlobalQuery","pathname","routerProps","queryStringObject","search","qs","queryString","url","href","withRouter","Hovercard","body","bodyClassName","containerClassName","header","show","showUnderline","tipBorderColor","tipColor","underlineColor","displayTimeout","position","visible","setVisible","tooltipId","useMemo","domId","showHoverCardTimeoutRef","undefined","clearTimeout","toggleHovercard","modifiers","name","enabled","gpuAcceleration","padding","altAxis","isVisible","hoverProps","onMouseEnter","onMouseLeave","Trigger","createPortal","style","arrowProps","HovercardContainer","SlideInAnimation","StyledHovercard","id","classNames","Header","Body","HovercardArrow","narrowedPlacement","getTipDirection","x","y","initial","variants","hidden","opacity","animate","transition","duration","ease","find","pl","startsWith","tooltipUnderline","hovercard","textColor","border","family","backgroundSecondary","borderRadiusTop","URL_PARAM","START","END","UTC","PERIOD","PROJECT","ENVIRONMENT","PAGE_URL_PARAM","PAGE_START","PAGE_END","PAGE_UTC","PAGE_PERIOD","DATE_TIME_KEYS","values","ALL_ACCESS_PROJECTS","storeConfig","itemsById","loading","unsubscribeListeners","init","this","reset","push","listenTo","ProjectActions","onAddTeam","onChangeSlug","onCreateSuccess","loadInitialData","onStatsLoadSuccess","onRemoveTeam","onUpdateSuccess","TeamActions","onDeleteTeam","items","mapping","project","fromEntries","Set","prevSlug","newSlug","prevProject","getBySlug","newProject","slug","data","getById","entries","filter","projectId","forEach","stats","touchedIds","teamSlug","projects","getAll","teams","removeTeamFromProject","affectedProjectIds","projectSlug","team","newTeams","sort","a","b","localeCompare","getState","createStore","makeSafeRefluxStore","parseLinkHeader","headerValues","split","links","match","exec","hasResults","results","cursor","BaseProjects","Component","fetchedProjects","projectsFromStore","initiallyLoaded","fetching","isIncomplete","hasMore","prevSearch","nextCursor","fetchError","memoize","Map","parseInt","slugs","projectsMap","getProjectsMap","inStore","notInStore","partition","has","get","defined","fetchQueue","add","setState","fetchSpecificProjects","projectIds","getProjectsIdMap","loadAllProjects","api","orgId","passthroughPlaceholderProject","fetchProjects","from","err","console","error","projectsOrPlaceholder","clear","limit","allProjects","append","uniqBy","componentDidMount","loadSpecificProjects","loadSpecificProjectsFromIds","componentDidUpdate","prevProps","updateProjectsFromStore","render","onSearch","handleSearch","withProjects","withApi","collapse","join","per_page","ProjectsStore","all_projects","resp","requestPromise","includeAllArgs","pageLinks","getResponseHeader","paginationObject","next","previous","selectText","node","HTMLInputElement","select","Node","getSelection","range","createRange","selectNode","selection","removeAllRanges","addRange","lastSearch","trim","prevSearchMatches","propOrgId","useApi","organization","useLegacyStore","OrganizationStore","store","storeSlugs","slugsToLoad","shouldLoadSlugs","slugsRef","loadProjectsBySlug","some","storeLoaded","filteredProjects","includes","placeholders","result","WrappedComponent","Wrapper","useProjects","loadingProjects","displayName","getDisplayName"],"sourceRoot":""}