{"version":3,"file":"chunks/app_components_charts_areaChart_tsx-app_components_charts_chartZoom_tsx-app_components_charts-e09939.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/events.tsx","webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/components/dataZoomSlider.tsx","webpack:///./app/components/charts/chartZoom.tsx","webpack:///./app/components/charts/components/dataZoomInside.tsx","webpack:///./app/components/charts/components/toolBox.tsx","webpack:///./app/components/charts/eventsRequest.tsx","webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/issues/groupListHeader.tsx","webpack:///./app/components/issues/groupList.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/utils/getPeriod.tsx","webpack:///./app/views/alerts/rules/metric/details/relatedIssuesNotAvailable.tsx"],"sourcesContent":["import {LocationDescriptor} from 'history';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'sentry/api';\nimport {canIncludePreviousPeriod} from 'sentry/components/charts/utils';\nimport {\n  DateString,\n  EventsStats,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\ntype Options = {\n  organization: OrganizationSummary;\n  partial: boolean;\n  comparisonDelta?: number;\n  end?: DateString;\n  environment?: Readonly<string[]>;\n  excludeOther?: boolean;\n  field?: string[];\n  generatePathname?: (org: OrganizationSummary) => string;\n  includePrevious?: boolean;\n  interval?: string;\n  limit?: number;\n  orderby?: string;\n  period?: string | null;\n  project?: Readonly<number[]>;\n  query?: string;\n  queryBatching?: QueryBatching;\n  queryExtras?: Record<string, string>;\n  referrer?: string;\n  start?: DateString;\n  team?: Readonly<string | string[]>;\n  topEvents?: number;\n  userModified?: string;\n  withoutZerofill?: boolean;\n  yAxis?: string | string[];\n};\n\n/**\n * Make requests to `events-stats` endpoint\n *\n * @param {Object} api API client instance\n * @param {Object} options Request parameters\n * @param {Object} options.organization Organization object\n * @param {Number[]} options.project List of project ids\n * @param {String[]} options.environment List of environments to query for\n * @param {Boolean} options.excludeOther Exclude the \"Other\" series when making a topEvents query\n * @param {String[]} options.team List of teams to query for\n * @param {String} options.period Time period to query for, in the format: <integer><units> where units are \"d\" or \"h\"\n * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are \"d\", \"h\", \"m\", \"s\"\n * @param {Number} options.comparisonDelta Comparison delta for change alert event stats to include comparison stats\n * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?\n * @param {Number} options.limit The number of rows to return\n * @param {String} options.query Search query\n * @param {QueryBatching} options.queryBatching A container for batching functions from a provider\n * @param {Record<string, string>} options.queryExtras A list of extra query parameters\n * @param {(org: OrganizationSummary) => string} options.generatePathname A function that returns an override for the pathname\n */\nexport const doEventsRequest = (\n  api: Client,\n  {\n    organization,\n    project,\n    environment,\n    team,\n    period,\n    start,\n    end,\n    interval,\n    comparisonDelta,\n    includePrevious,\n    query,\n    yAxis,\n    field,\n    topEvents,\n    orderby,\n    partial,\n    withoutZerofill,\n    referrer,\n    queryBatching,\n    generatePathname,\n    queryExtras,\n    excludeOther,\n    userModified,\n  }: Options\n): Promise<EventsStats | MultiSeriesEventsStats> => {\n  const pathname =\n    generatePathname?.(organization) ??\n    `/organizations/${organization.slug}/events-stats/`;\n\n  const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      interval,\n      comparisonDelta,\n      project,\n      environment,\n      team,\n      query,\n      yAxis,\n      field,\n      topEvents,\n      orderby,\n      partial: partial ? '1' : undefined,\n      withoutZerofill: withoutZerofill ? '1' : undefined,\n      referrer: referrer ? referrer : 'api.organization-event-stats',\n      excludeOther: excludeOther ? '1' : undefined,\n      user_modified: pathname.includes('events-stats') ? userModified : undefined,\n    }).filter(([, value]) => typeof value !== 'undefined')\n  );\n\n  // Doubling period for absolute dates is not accurate unless starting and\n  // ending times are the same (at least for daily intervals). This is\n  // the tradeoff for now.\n  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});\n\n  const queryObject = {\n    query: {\n      ...urlQuery,\n      ...periodObj,\n      ...queryExtras,\n    },\n  };\n\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, pathname, queryObject);\n  }\n\n  return api.requestPromise(pathname, queryObject);\n};\n\nexport type EventQuery = {\n  field: string[];\n  query: string;\n  environment?: string[];\n  equation?: string[];\n  noPagination?: boolean;\n  per_page?: number;\n  project?: string | string[];\n  referrer?: string;\n  sort?: string | string[];\n  team?: string | string[];\n};\n\nexport type TagSegment = {\n  count: number;\n  name: string;\n  url: LocationDescriptor;\n  value: string;\n  isOther?: boolean;\n  key?: string;\n};\n\nexport type Tag = {\n  key: string;\n  topValues: Array<TagSegment>;\n};\n\n/**\n * Fetches tag facets for a query\n */\nexport function fetchTagFacets(\n  api: Client,\n  orgSlug: string,\n  query: EventQuery\n): Promise<Tag[]> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {\n    query: queryOption,\n  });\n}\n\n/**\n * Fetches total count of events for a given query\n */\nexport function fetchTotalCount(\n  api: Client,\n  orgSlug: String,\n  query: EventQuery & LocationQuery\n): Promise<number> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  type Response = {\n    count: number;\n  };\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {\n      query: queryOption,\n    })\n    .then((res: Response) => res.count);\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type AreaChartSeries = Series & Omit<LineSeriesOption, 'data' | 'name'>;\n\nexport interface AreaChartProps extends Omit<ChartProps, 'series'> {\n  series: AreaChartSeries[];\n  stacked?: boolean;\n}\n\nexport function AreaChart({series, stacked, colors, ...props}: AreaChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      data-test-id=\"area-chart\"\n      colors={colors}\n      series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n        AreaSeries({\n          stack: stacked ? 'area' : undefined,\n          name: seriesName,\n          data: data.map(({name, value}) => [name, value]),\n          lineStyle: {\n            color: colors?.[i],\n            opacity: 1,\n            width: 0.4,\n          },\n          areaStyle: {\n            color: colors?.[i],\n            opacity: 1.0,\n          },\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n          ...otherSeriesProps,\n        })\n      )}\n    />\n  );\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\n\nexport default function AreaSeries(props: LineSeriesOption = {}): LineSeriesOption {\n  return LineSeries({\n    ...props,\n  });\n}\n","import 'echarts/lib/component/dataZoomSlider';\n\nimport type {SliderDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: SliderDataZoomComponentOption = {\n  realtime: false,\n  showDetail: false,\n  left: 0,\n  right: 6,\n  bottom: 8,\n};\n\nexport default function DataZoomSlider(\n  props: SliderDataZoomComponentOption | SliderDataZoomComponentOption[]\n): SliderDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import {Component} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport type {\n  DataZoomComponentOption,\n  InsideDataZoomComponentOption,\n  ToolboxComponentOption,\n  XAXisComponentOption,\n} from 'echarts';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport {updateDateTime} from 'sentry/actionCreators/pageFilters';\nimport DataZoomInside from 'sentry/components/charts/components/dataZoomInside';\nimport DataZoomSlider from 'sentry/components/charts/components/dataZoomSlider';\nimport ToolBox from 'sentry/components/charts/components/toolBox';\nimport {DateString} from 'sentry/types';\nimport {\n  EChartChartReadyHandler,\n  EChartDataZoomHandler,\n  EChartFinishedHandler,\n  EChartRestoreHandler,\n} from 'sentry/types/echarts';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport {getUtcDateString, getUtcToLocalDateObject} from 'sentry/utils/dates';\n\nconst getDate = date =>\n  date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;\n\ntype Period = {\n  end: DateString;\n  period: string | null;\n  start: DateString;\n};\n\nconst ZoomPropKeys = [\n  'period',\n  'xAxis',\n  'onChartReady',\n  'onDataZoom',\n  'onRestore',\n  'onFinished',\n] as const;\n\nexport type ZoomRenderProps = Pick<Props, typeof ZoomPropKeys[number]> & {\n  dataZoom?: DataZoomComponentOption[];\n  end?: Date;\n  isGroupedByDate?: boolean;\n  showTimeInTooltip?: boolean;\n  start?: Date;\n  toolBox?: ToolboxComponentOption;\n  utc?: boolean;\n};\n\ntype Props = {\n  children: (props: ZoomRenderProps) => React.ReactNode;\n  chartZoomOptions?: DataZoomComponentOption;\n  disabled?: boolean;\n  end?: DateString;\n  onChartReady?: EChartChartReadyHandler;\n  onDataZoom?: EChartDataZoomHandler;\n  onFinished?: EChartFinishedHandler;\n  onRestore?: EChartRestoreHandler;\n  onZoom?: (period: Period) => void;\n  period?: string | null;\n  router?: InjectedRouter;\n  showSlider?: boolean;\n  start?: DateString;\n  usePageDate?: boolean;\n  utc?: boolean | null;\n  xAxis?: XAXisComponentOption;\n  xAxisIndex?: number | number[];\n};\n\n/**\n * This is a very opinionated component that takes a render prop through `children`. It\n * will provide props to be passed to `BaseChart` to enable support of zooming without\n * eCharts' clunky zoom toolboxes.\n *\n * This also is very tightly coupled with the Global Selection Header. We can make it more\n * generic if need be in the future.\n */\nclass ChartZoom extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    // Zoom history\n    this.history = [];\n\n    // Initialize current period instance state for zoom history\n    this.saveCurrentPeriod(props);\n  }\n\n  componentDidUpdate() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    // When component updates, make sure we sync current period state\n    // for use in zoom history\n    this.saveCurrentPeriod(this.props);\n  }\n\n  history: Period[];\n  currentPeriod?: Period;\n  zooming: (() => void) | null = null;\n\n  /**\n   * Save current period state from period in props to be used\n   * in handling chart's zoom history state\n   */\n  saveCurrentPeriod = props => {\n    this.currentPeriod = {\n      period: props.period,\n      start: getDate(props.start),\n      end: getDate(props.end),\n    };\n  };\n\n  /**\n   * Sets the new period due to a zoom related action\n   *\n   * Saves the current period to an instance property so that we\n   * can control URL state when zoom history is being manipulated\n   * by the chart controls.\n   *\n   * Saves a callback function to be called after chart animation is completed\n   */\n  setPeriod = ({period, start, end}, saveHistory = false) => {\n    const {router, onZoom, usePageDate} = this.props;\n    const startFormatted = getDate(start);\n    const endFormatted = getDate(end);\n\n    // Save period so that we can revert back to it when using echarts \"back\" navigation\n    if (saveHistory) {\n      this.history.push(this.currentPeriod!);\n    }\n\n    // Callback to let parent component know zoom has changed\n    // This is required for some more perceived responsiveness since\n    // we delay updating URL state so that chart animation can finish\n    //\n    // Parent container can use this to change into a loading state before\n    // URL parameters are changed\n    callIfFunction(onZoom, {\n      period,\n      start: startFormatted,\n      end: endFormatted,\n    });\n\n    this.zooming = () => {\n      if (usePageDate && router) {\n        const newQuery = {\n          ...router.location.query,\n          pageStart: start ? getUtcDateString(start) : undefined,\n          pageEnd: end ? getUtcDateString(end) : undefined,\n          pageStatsPeriod: period ?? undefined,\n        };\n\n        // Only push new location if query params has changed because this will cause a heavy re-render\n        if (qs.stringify(newQuery) !== qs.stringify(router.location.query)) {\n          router.push({\n            pathname: router.location.pathname,\n            query: newQuery,\n          });\n        }\n      } else {\n        updateDateTime(\n          {\n            period,\n            start: startFormatted\n              ? getUtcToLocalDateObject(startFormatted)\n              : startFormatted,\n            end: endFormatted ? getUtcToLocalDateObject(endFormatted) : endFormatted,\n          },\n          router\n        );\n      }\n\n      this.saveCurrentPeriod({period, start, end});\n    };\n  };\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Restores the chart to initial viewport/zoom level\n   *\n   * Updates URL state to reflect initial params\n   */\n  handleZoomRestore = (evt, chart) => {\n    if (!this.history.length) {\n      return;\n    }\n\n    this.setPeriod(this.history[0]);\n\n    // reset history\n    this.history = [];\n\n    callIfFunction(this.props.onRestore, evt, chart);\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {startValue, endValue} = model._payload.batch[0];\n\n    // if `rangeStart` and `rangeEnd` are null, then we are going back\n    if (startValue === null && endValue === null) {\n      const previousPeriod = this.history.pop();\n\n      if (!previousPeriod) {\n        return;\n      }\n\n      this.setPeriod(previousPeriod);\n    } else {\n      const start = moment.utc(startValue);\n\n      // Add a day so we go until the end of the day (e.g. next day at midnight)\n      const end = moment.utc(endValue);\n\n      this.setPeriod({period: null, start, end}, true);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = (_props, chart) => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n\n    // This attempts to activate the area zoom toolbox feature\n    const zoom = chart._componentsViews?.find(c => c._features && c._features.dataZoom);\n    if (zoom && !zoom._features.dataZoom._isZoomActive) {\n      // Calling dispatchAction will re-trigger handleChartFinished\n      chart.dispatchAction({\n        type: 'takeGlobalCursor',\n        key: 'dataZoomSelect',\n        dataZoomSelectActive: true,\n      });\n    }\n\n    callIfFunction(this.props.onFinished);\n  };\n\n  render() {\n    const {\n      utc: _utc,\n      start: _start,\n      end: _end,\n      disabled,\n      children,\n      xAxisIndex,\n\n      router: _router,\n      onZoom: _onZoom,\n      onRestore: _onRestore,\n      onChartReady: _onChartReady,\n      onDataZoom: _onDataZoom,\n      onFinished: _onFinished,\n      showSlider,\n      chartZoomOptions,\n      ...props\n    } = this.props;\n\n    const utc = _utc ?? undefined;\n    const start = _start ? getUtcToLocalDateObject(_start) : undefined;\n    const end = _end ? getUtcToLocalDateObject(_end) : undefined;\n\n    if (disabled) {\n      return children({\n        utc,\n        start,\n        end,\n        ...props,\n      });\n    }\n    const renderProps = {\n      // Zooming only works when grouped by date\n      isGroupedByDate: true,\n      onChartReady: this.handleChartReady,\n      utc,\n      start,\n      end,\n      dataZoom: showSlider\n        ? [\n            ...DataZoomSlider({xAxisIndex, ...chartZoomOptions}),\n            ...DataZoomInside({\n              xAxisIndex,\n              ...(chartZoomOptions as InsideDataZoomComponentOption),\n            }),\n          ]\n        : DataZoomInside({\n            xAxisIndex,\n            ...(chartZoomOptions as InsideDataZoomComponentOption),\n          }),\n      showTimeInTooltip: true,\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n      onFinished: this.handleChartFinished,\n      onRestore: this.handleZoomRestore,\n      ...props,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default ChartZoom;\n","import 'echarts/lib/component/dataZoomInside';\n\nimport type {InsideDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: InsideDataZoomComponentOption = {\n  type: 'inside',\n  // Mouse wheel can not trigger zoom\n  zoomOnMouseWheel: false,\n  // The translation (by mouse drag or touch drag) is avialable but zoom is not\n  zoomLock: true,\n  throttle: 50,\n};\n\nexport default function DataZoomInside(\n  props: InsideDataZoomComponentOption | InsideDataZoomComponentOption[]\n): InsideDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import type {ToolboxComponentOption} from 'echarts';\n\nfunction getFeatures({\n  dataZoom,\n  ...features\n}: ToolboxComponentOption['feature'] = {}): ToolboxComponentOption['feature'] {\n  return {\n    ...(dataZoom\n      ? {\n          dataZoom: {\n            yAxisIndex: 'none',\n            title: {\n              zoom: 'zoom',\n              back: 'undo',\n            },\n            ...dataZoom,\n          },\n        }\n      : {}),\n    ...features,\n  };\n}\n\nexport default function ToolBox(\n  options: ToolboxComponentOption,\n  features: ToolboxComponentOption['feature']\n): ToolboxComponentOption {\n  return {\n    right: 0,\n    top: 0,\n    itemSize: 16,\n    // Stack the toolbox under the legend.\n    // so all series names are clickable.\n    z: -1,\n\n    feature: getFeatures(features),\n    ...options,\n  };\n}\n","import {PureComponent} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {doEventsRequest} from 'sentry/actionCreators/events';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {\n  canIncludePreviousPeriod,\n  getPreviousSeriesName,\n  isMultiSeriesStats,\n} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {\n  DateString,\n  EventsStats,\n  EventsStatsData,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {stripEquationPrefix} from 'sentry/utils/discover/fields';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\nexport type TimeSeriesData = {\n  allTimeseriesData?: EventsStatsData;\n  comparisonTimeseriesData?: Series[];\n  originalPreviousTimeseriesData?: EventsStatsData | null;\n  originalTimeseriesData?: EventsStatsData;\n  previousTimeseriesData?: Series[] | null;\n  timeAggregatedData?: Series | {};\n  timeframe?: {end: number; start: number};\n  // timeseries data\n  timeseriesData?: Series[];\n  timeseriesTotals?: {count: number};\n};\n\ntype LoadingStatus = {\n  /**\n   * Whether there was an error retrieving data\n   */\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  errorMessage?: string;\n};\n\n// Can hold additional data from the root an events stat object (eg. start, end, order, isMetricsData).\ninterface AdditionalSeriesInfo {\n  isMetricsData?: boolean;\n}\n\nexport type RenderProps = LoadingStatus &\n  TimeSeriesData & {\n    results?: Series[]; // Chart with multiple series.\n    seriesAdditionalInfo?: Record<string, AdditionalSeriesInfo>;\n  };\n\ntype DefaultProps = {\n  /**\n   * Include data for previous period\n   */\n  includePrevious: boolean;\n  /**\n   * Transform the response data to be something ingestible by charts\n   */\n  includeTransformedData: boolean;\n  /**\n   * Interval to group results in\n   *\n   * e.g. 1d, 1h, 1m, 1s\n   */\n  interval: string;\n  /**\n   * number of rows to return\n   */\n  limit: number;\n  /**\n   * The query string to search events by\n   */\n  query: string;\n  /**\n   * Time delta for comparing intervals of alert metrics, in seconds\n   */\n  comparisonDelta?: number;\n  /**\n   * Absolute end date for query\n   */\n  end?: DateString;\n  /**\n   * Relative time period for query.\n   *\n   * Use `start` and `end` for absolute dates.\n   *\n   * e.g. 24h, 7d, 30d\n   */\n  period?: string | null;\n  /**\n   * Absolute start date for query\n   */\n  start?: DateString;\n};\n\ntype EventsRequestPartialProps = {\n  /**\n   * API client instance\n   */\n  api: Client;\n  children: (renderProps: RenderProps) => React.ReactNode;\n  organization: OrganizationSummary;\n  /**\n   * Whether or not to include the last partial bucket. This happens for example when the\n   * current time is 11:26 and the last bucket ranges from 11:25-11:30. This means that\n   * the last bucket contains 1 minute worth of data while the rest contains 5 minutes.\n   *\n   * This flag indicates whether or not this last bucket should be included in the result.\n   */\n  partial: boolean;\n  /**\n   * Discover needs confirmation to run >30 day >10 project queries,\n   * optional and when not passed confirmation is not required.\n   */\n  confirmedQuery?: boolean;\n  /**\n   * Name used for display current series dataset tooltip\n   */\n  currentSeriesNames?: string[];\n  /**\n   * List of environments to query\n   */\n  environment?: Readonly<string[]>;\n  /**\n   * Is query out of retention\n   */\n  expired?: boolean;\n  /**\n   * List of fields to group with when doing a topEvents request.\n   */\n  field?: string[];\n  /**\n   * Allows overridding the pathname.\n   */\n  generatePathname?: (org: OrganizationSummary) => string;\n  /**\n   * Hide error toast (used for pages which also query eventsV2). Stops error appearing as a toast.\n   */\n  hideError?: boolean;\n  /**\n   * Initial loading state\n   */\n  loading?: boolean;\n  /**\n   * Query name used for displaying error toast if it is out of retention\n   */\n  name?: string;\n  /**\n   * A way to control error if error handling is not owned by the toast.\n   */\n  onError?: (error: string) => void;\n  /**\n   * How to order results when getting top events.\n   */\n  orderby?: string;\n  previousSeriesNames?: string[];\n  /**\n   * List of project ids to query\n   */\n  project?: Readonly<number[]>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  /**\n   * Should loading be shown.\n   */\n  showLoading?: boolean;\n  /**\n   * List of team ids to query\n   */\n  team?: Readonly<string | string[]>;\n  /**\n   * The number of top results to get. When set a multi-series result will be returned\n   * in the `results` child render function.\n   */\n  topEvents?: number;\n  /**\n   * Tracks whether the query was modified by a user in the search bar\n   */\n  userModified?: string;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n  /**\n   * The yAxis being plotted. If multiple yAxis are requested,\n   * the child render function will be called with `results`\n   */\n  yAxis?: string | string[];\n};\n\ntype TimeAggregationProps =\n  | {includeTimeAggregation: true; timeAggregationSeriesName: string}\n  | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};\n\nexport type EventsRequestProps = DefaultProps &\n  TimeAggregationProps &\n  EventsRequestPartialProps;\n\ntype EventsRequestState = {\n  errored: boolean;\n  fetchedWithPrevious: boolean;\n  reloading: boolean;\n  timeseriesData: null | EventsStats | MultiSeriesEventsStats;\n  errorMessage?: string;\n};\n\nconst propNamesToIgnore = [\n  'api',\n  'children',\n  'organization',\n  'loading',\n  'queryBatching',\n  'generatePathname',\n];\nconst omitIgnoredProps = (props: EventsRequestProps) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends PureComponent<EventsRequestProps, EventsRequestState> {\n  static defaultProps: DefaultProps = {\n    period: undefined,\n    start: null,\n    end: null,\n    interval: '1d',\n    comparisonDelta: undefined,\n    limit: 15,\n    query: '',\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  state: EventsRequestState = {\n    reloading: !!this.props.loading,\n    errored: false,\n    timeseriesData: null,\n    fetchedWithPrevious: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: EventsRequestProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {api, confirmedQuery, onError, expired, name, hideError, ...props} = this.props;\n    let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;\n\n    if (confirmedQuery === false) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n      errorMessage: undefined,\n    }));\n\n    let errorMessage;\n    if (expired) {\n      errorMessage = t(\n        '%s has an invalid date range. Please try a more recent date range.',\n        name\n      );\n      addErrorMessage(errorMessage, {append: true});\n\n      this.setState({\n        errored: true,\n        errorMessage,\n      });\n    } else {\n      try {\n        api.clear();\n        timeseriesData = await doEventsRequest(api, props);\n      } catch (resp) {\n        if (resp && resp.responseJSON && resp.responseJSON.detail) {\n          errorMessage = resp.responseJSON.detail;\n        } else {\n          errorMessage = t('Error loading chart data');\n        }\n        if (!hideError) {\n          addErrorMessage(errorMessage);\n        }\n        if (onError) {\n          onError(errorMessage);\n        }\n        this.setState({\n          errored: true,\n          errorMessage,\n        });\n      }\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n      fetchedWithPrevious: props.includePrevious,\n    });\n  };\n\n  /**\n   * Retrieves dataset for the current period (since data can potentially\n   * contain previous period's data), as well as the previous period if\n   * possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = (\n    data: EventsStatsData\n  ): {current: EventsStatsData; previous: EventsStatsData | null} => {\n    const {fetchedWithPrevious} = this.state;\n    const {period, includePrevious} = this.props;\n\n    const hasPreviousPeriod =\n      fetchedWithPrevious || canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n    return {\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp(\n    data: EventsStatsData,\n    getName: (\n      timestamp: number,\n      countArray: {count: number}[],\n      i: number\n    ) => number = timestamp => timestamp * 1000\n  ): SeriesDataUnit[] {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  }\n\n  /**\n   * Get previous period data, but transform timestamps so that data fits unto\n   * the current period's data axis\n   */\n  transformPreviousPeriodData(\n    current: EventsStatsData,\n    previous: EventsStatsData | null,\n    seriesName?: string\n  ): Series | null {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: seriesName ?? 'Previous',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (_timestamp, _countArray, i) => current[i][0] * 1000\n      ),\n      stack: 'previous',\n    };\n  }\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries(data: EventsStatsData, seriesName: string = ''): Series {\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  }\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {\n    return [\n      {\n        seriesName: seriesName || 'Current',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  }\n\n  /**\n   * Transforms comparisonCount in query response into timeseries data to be used in a comparison chart for change alerts\n   */\n  transformComparisonTimeseriesData(data: EventsStatsData): Series[] {\n    return [\n      {\n        seriesName: 'comparisonCount()',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce(\n            (acc, {comparisonCount}) => acc + (comparisonCount ?? 0),\n            0\n          ),\n        })),\n      },\n    ];\n  }\n\n  processData(response: EventsStats, seriesIndex: number = 0, seriesName?: string) {\n    const {data, isMetricsData, totals} = response;\n    const {\n      includeTransformedData,\n      includeTimeAggregation,\n      timeAggregationSeriesName,\n      currentSeriesNames,\n      previousSeriesNames,\n      comparisonDelta,\n    } = this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData\n      ? this.transformTimeseriesData(\n          current,\n          seriesName ?? currentSeriesNames?.[seriesIndex]\n        )\n      : [];\n    const transformedComparisonData =\n      includeTransformedData && comparisonDelta\n        ? this.transformComparisonTimeseriesData(current)\n        : [];\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(\n          current,\n          previous,\n          (seriesName ? getPreviousSeriesName(seriesName) : undefined) ??\n            previousSeriesNames?.[seriesIndex]\n        )\n      : null;\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName || '')\n      : {};\n    const timeframe =\n      response.start && response.end\n        ? !previous\n          ? {\n              start: response.start * 1000,\n              end: response.end * 1000,\n            }\n          : {\n              // Find the midpoint of start & end since previous includes 2x data\n              start: (response.start + response.end) * 500,\n              end: response.end * 1000,\n            }\n        : undefined;\n    return {\n      data: transformedData,\n      comparisonData: transformedComparisonData,\n      allData: data,\n      originalData: current,\n      totals,\n      isMetricsData,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n      timeframe,\n    };\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n    const {topEvents} = this.props;\n    const {timeseriesData, reloading, errored, errorMessage} = this.state;\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n    if (isMultiSeriesStats(timeseriesData, defined(topEvents))) {\n      // Convert multi-series results into chartable series. Multi series results\n      // are created when multiple yAxis are used or a topEvents request is made.\n      // Convert the timeseries data into a multi-series result set.\n      // As the server will have replied with a map like:\n      // {[titleString: string]: EventsStats}\n      let timeframe: {end: number; start: number} | undefined = undefined;\n      const seriesAdditionalInfo: Record<string, AdditionalSeriesInfo> = {};\n      const sortedTimeseriesData = Object.keys(timeseriesData)\n        .map(\n          (\n            seriesName: string,\n            index: number\n          ): [number, Series, Series | null, AdditionalSeriesInfo] => {\n            const seriesData: EventsStats = timeseriesData[seriesName];\n            const processedData = this.processData(\n              seriesData,\n              index,\n              stripEquationPrefix(seriesName)\n            );\n            if (!timeframe) {\n              timeframe = processedData.timeframe;\n            }\n            if (processedData.isMetricsData) {\n              seriesAdditionalInfo[seriesName] = {\n                isMetricsData: processedData.isMetricsData,\n              };\n            }\n            return [\n              seriesData.order || 0,\n              processedData.data[0],\n              processedData.previousData,\n              {isMetricsData: processedData.isMetricsData},\n            ];\n          }\n        )\n        .sort((a, b) => a[0] - b[0]);\n      const results: Series[] = sortedTimeseriesData.map(item => {\n        return item[1];\n      });\n      const previousTimeseriesData: Series[] | undefined = sortedTimeseriesData.some(\n        item => item[2] === null\n      )\n        ? undefined\n        : sortedTimeseriesData.map(item => {\n            return item[2] as Series;\n          });\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        results,\n        timeframe,\n        previousTimeseriesData,\n        seriesAdditionalInfo,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    if (timeseriesData) {\n      const {\n        data: transformedTimeseriesData,\n        comparisonData: transformedComparisonTimeseriesData,\n        allData: allTimeseriesData,\n        originalData: originalTimeseriesData,\n        totals: timeseriesTotals,\n        originalPreviousData: originalPreviousTimeseriesData,\n        previousData: previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        isMetricsData,\n      } = this.processData(timeseriesData);\n\n      const seriesAdditionalInfo = {\n        [this.props.currentSeriesNames?.[0] ?? 'current']: {isMetricsData},\n      };\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        // meta data,\n        seriesAdditionalInfo,\n        // timeseries data\n        timeseriesData: transformedTimeseriesData,\n        comparisonTimeseriesData: transformedComparisonTimeseriesData,\n        allTimeseriesData,\n        originalTimeseriesData,\n        timeseriesTotals,\n        originalPreviousTimeseriesData,\n        previousTimeseriesData: previousTimeseriesData\n          ? [previousTimeseriesData]\n          : previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    return children({\n      loading,\n      reloading,\n      errored,\n      errorMessage,\n      ...props,\n    });\n  }\n}\nexport default EventsRequest;\n","import styled from '@emotion/styled';\n\nimport LoadingMask from 'sentry/components/loadingMask';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  height?: string;\n}\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import styled from '@emotion/styled';\n\nimport {PanelHeader} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  withChart: boolean;\n  narrowGroups?: boolean;\n};\n\nconst GroupListHeader = ({withChart = true, narrowGroups = false}: Props) => (\n  <PanelHeader disablePadding>\n    <IssueWrapper>{t('Issue')}</IssueWrapper>\n    {withChart && (\n      <ChartWrapper className={`hidden-xs hidden-sm ${narrowGroups ? 'hidden-md' : ''}`}>\n        {t('Graph')}\n      </ChartWrapper>\n    )}\n    <EventUserWrapper>{t('events')}</EventUserWrapper>\n    <EventUserWrapper>{t('users')}</EventUserWrapper>\n    <AssigneeWrapper className=\"hidden-xs hidden-sm toolbar-header\">\n      {t('Assignee')}\n    </AssigneeWrapper>\n  </PanelHeader>\n);\n\nexport default GroupListHeader;\n\nconst Heading = styled('div')`\n  display: flex;\n  align-self: center;\n  margin: 0 ${space(2)};\n  color: ${p => p.theme.subText};\n`;\n\nconst IssueWrapper = styled(Heading)`\n  flex: 1;\n  width: 66.66%;\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    width: 50%;\n  }\n`;\n\nconst EventUserWrapper = styled(Heading)`\n  justify-content: flex-end;\n  width: 60px;\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    width: 80px;\n  }\n`;\n\nconst ChartWrapper = styled(Heading)`\n  justify-content: space-between;\n  width: 160px;\n`;\n\nconst AssigneeWrapper = styled(Heading)`\n  justify-content: flex-end;\n  width: 80px;\n`;\n","import {Component, Fragment} from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\nimport {fetchOrgMembers, indexMembersByProject} from 'sentry/actionCreators/members';\nimport {Client} from 'sentry/api';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {parseSearch, Token} from 'sentry/components/searchSyntax/parser';\nimport {treeResultLocator} from 'sentry/components/searchSyntax/utils';\nimport StreamGroup, {\n  DEFAULT_STREAM_GROUP_STATS_PERIOD,\n} from 'sentry/components/stream/group';\nimport {t} from 'sentry/locale';\nimport GroupStore from 'sentry/stores/groupStore';\nimport {Group} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport StreamManager from 'sentry/utils/streamManager';\nimport withApi from 'sentry/utils/withApi';\nimport {TimePeriodType} from 'sentry/views/alerts/rules/metric/details/constants';\nimport {RELATED_ISSUES_BOOLEAN_QUERY_ERROR} from 'sentry/views/alerts/rules/metric/details/relatedIssuesNotAvailable';\n\nimport GroupListHeader from './groupListHeader';\n\nconst defaultProps = {\n  canSelectGroups: true,\n  withChart: true,\n  withPagination: true,\n  useFilteredStats: true,\n  useTintRow: true,\n  narrowGroups: false,\n};\n\ntype Props = WithRouterProps & {\n  api: Client;\n  endpointPath: string;\n  orgId: string;\n  query: string;\n  customStatsPeriod?: TimePeriodType;\n  onFetchSuccess?: (\n    groupListState: State,\n    onCursor: (\n      cursor: string,\n      path: string,\n      query: Record<string, any>,\n      pageDiff: number\n    ) => void\n  ) => void;\n  queryFilterDescription?: string;\n  queryParams?: Record<string, number | string | string[] | undefined | null>;\n  renderEmptyMessage?: () => React.ReactNode;\n  renderErrorMessage?: ({detail: string}, retry: () => void) => React.ReactNode;\n} & Partial<typeof defaultProps>;\n\ntype State = {\n  error: boolean;\n  errorData: {detail: string} | null;\n  groups: Group[];\n  loading: boolean;\n  pageLinks: string | null;\n  memberList?: ReturnType<typeof indexMembersByProject>;\n};\n\nclass GroupList extends Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {\n    loading: true,\n    error: false,\n    errorData: null,\n    groups: [],\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      !isEqual(this.state, nextState) ||\n      nextProps.endpointPath !== this.props.endpointPath ||\n      nextProps.query !== this.props.query ||\n      !isEqual(nextProps.queryParams, this.props.queryParams)\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const ignoredQueryParams = ['end'];\n\n    if (\n      prevProps.orgId !== this.props.orgId ||\n      prevProps.endpointPath !== this.props.endpointPath ||\n      prevProps.query !== this.props.query ||\n      !isEqual(\n        omit(prevProps.queryParams, ignoredQueryParams),\n        omit(this.props.queryParams, ignoredQueryParams)\n      )\n    ) {\n      this.fetchData();\n    }\n  }\n\n  componentWillUnmount() {\n    GroupStore.reset();\n    callIfFunction(this.listener);\n  }\n\n  listener = GroupStore.listen(() => this.onGroupChange(), undefined);\n  private _streamManager = new StreamManager(GroupStore);\n\n  fetchData = async () => {\n    GroupStore.loadInitialData([]);\n    const {api, orgId, queryParams} = this.props;\n    api.clear();\n\n    this.setState({loading: true, error: false, errorData: null});\n\n    fetchOrgMembers(api, orgId).then(members => {\n      this.setState({memberList: indexMembersByProject(members)});\n    });\n\n    const endpoint = this.getGroupListEndpoint();\n\n    const parsedQuery = parseSearch((queryParams ?? this.getQueryParams()).query);\n    const hasLogicBoolean = parsedQuery\n      ? treeResultLocator<boolean>({\n          tree: parsedQuery,\n          noResultValue: false,\n          visitorTest: ({token, returnResult}) => {\n            return token.type === Token.LogicBoolean ? returnResult(true) : null;\n          },\n        })\n      : false;\n\n    // Check if the alert rule query has AND or OR\n    // logic queries haven't been implemented for issue search yet\n    if (hasLogicBoolean) {\n      this.setState({\n        error: true,\n        errorData: {detail: RELATED_ISSUES_BOOLEAN_QUERY_ERROR},\n        loading: false,\n      });\n      return;\n    }\n\n    try {\n      const [data, , jqXHR] = await api.requestPromise(endpoint, {\n        includeAllArgs: true,\n      });\n\n      this._streamManager.push(data);\n\n      this.setState(\n        {\n          error: false,\n          errorData: null,\n          loading: false,\n          pageLinks: jqXHR?.getResponseHeader('Link') ?? null,\n        },\n        () => {\n          this.props.onFetchSuccess?.(this.state, this.handleCursorChange);\n        }\n      );\n    } catch (error) {\n      this.setState({error: true, errorData: error.responseJSON, loading: false});\n    }\n  };\n\n  getGroupListEndpoint() {\n    const {orgId, endpointPath, queryParams} = this.props;\n    const path = endpointPath ?? `/organizations/${orgId}/issues/`;\n    const queryParameters = queryParams ?? this.getQueryParams();\n\n    return `${path}?${qs.stringify(queryParameters)}`;\n  }\n\n  getQueryParams() {\n    const {location, query} = this.props;\n\n    const queryParams = location.query;\n    queryParams.limit = 50;\n    queryParams.sort = 'new';\n    queryParams.query = query;\n\n    return queryParams;\n  }\n\n  handleCursorChange(\n    cursor: string | undefined,\n    path: string,\n    query: Record<string, any>,\n    pageDiff: number\n  ) {\n    const queryPageInt = parseInt(query.page, 10);\n    let nextPage: number | undefined = isNaN(queryPageInt)\n      ? pageDiff\n      : queryPageInt + pageDiff;\n\n    // unset cursor and page when we navigate back to the first page\n    // also reset cursor if somehow the previous button is enabled on\n    // first page and user attempts to go backwards\n    if (nextPage <= 0) {\n      cursor = undefined;\n      nextPage = undefined;\n    }\n\n    browserHistory.push({\n      pathname: path,\n      query: {...query, cursor, page: nextPage},\n    });\n  }\n\n  onGroupChange() {\n    const groups = this._streamManager.getAllItems();\n    if (!isEqual(groups, this.state.groups)) {\n      this.setState({groups});\n    }\n  }\n\n  render() {\n    const {\n      canSelectGroups,\n      withChart,\n      renderEmptyMessage,\n      renderErrorMessage,\n      withPagination,\n      useFilteredStats,\n      useTintRow,\n      customStatsPeriod,\n      queryParams,\n      queryFilterDescription,\n      narrowGroups,\n    } = this.props;\n    const {loading, error, errorData, groups, memberList, pageLinks} = this.state;\n\n    if (loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (error) {\n      if (typeof renderErrorMessage === 'function' && errorData) {\n        return renderErrorMessage(errorData, this.fetchData);\n      }\n\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    if (groups.length === 0) {\n      if (typeof renderEmptyMessage === 'function') {\n        return renderEmptyMessage();\n      }\n      return (\n        <Panel>\n          <PanelBody>\n            <EmptyStateWarning>\n              <p>{t(\"There don't seem to be any events fitting the query.\")}</p>\n            </EmptyStateWarning>\n          </PanelBody>\n        </Panel>\n      );\n    }\n\n    const statsPeriod =\n      queryParams?.groupStatsPeriod === 'auto'\n        ? queryParams?.groupStatsPeriod\n        : DEFAULT_STREAM_GROUP_STATS_PERIOD;\n\n    return (\n      <Fragment>\n        <Panel>\n          <GroupListHeader withChart={!!withChart} narrowGroups={narrowGroups} />\n          <PanelBody>\n            {groups.map(({id, project}) => {\n              const members = memberList?.hasOwnProperty(project.slug)\n                ? memberList[project.slug]\n                : undefined;\n\n              return (\n                <StreamGroup\n                  key={id}\n                  id={id}\n                  canSelect={canSelectGroups}\n                  withChart={withChart}\n                  memberList={members}\n                  useFilteredStats={useFilteredStats}\n                  useTintRow={useTintRow}\n                  customStatsPeriod={customStatsPeriod}\n                  statsPeriod={statsPeriod}\n                  queryFilterDescription={queryFilterDescription}\n                  narrowGroups={narrowGroups}\n                />\n              );\n            })}\n          </PanelBody>\n        </Panel>\n        {withPagination && (\n          <Pagination pageLinks={pageLinks} onCursor={this.handleCursorChange} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport {GroupList};\n\nexport default withApi(withRouter(GroupList));\n","import styled from '@emotion/styled';\n\nexport interface LoadingMaskProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst LoadingMask = styled('div')<LoadingMaskProps>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import moment from 'moment';\n\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {DateString} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\n\ntype DateObject = {\n  /**\n   * Ending date object\n   */\n  end?: DateString;\n  /**\n   * Relative period string in format \"<int><unit>\" (e.g. 4d for 4 days)\n   */\n  period?: string | null;\n  /**\n   * Starting date object\n   */\n  start?: DateString;\n};\n\ntype Options = {\n  /**\n   * Doubles the given period (useful for getting previous period data)\n   */\n  shouldDoublePeriod?: boolean;\n};\n\n/**\n * Gets the period to query with if we need to double the initial period in order\n * to get data for the previous period\n *\n * Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})\n */\nexport function getPeriod(\n  {period, start, end}: DateObject,\n  {shouldDoublePeriod}: Options = {}\n) {\n  if (!period && !start && !end) {\n    period = DEFAULT_STATS_PERIOD;\n  }\n\n  // you can not specify both relative and absolute periods\n  // relative period takes precedence\n  if (period) {\n    if (!shouldDoublePeriod) {\n      return {statsPeriod: period};\n    }\n    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/)!;\n\n    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};\n  }\n\n  if (!start || !end) {\n    throw new Error('start and end required');\n  }\n\n  const formattedStart = getUtcDateString(start);\n  const formattedEnd = getUtcDateString(end);\n\n  if (shouldDoublePeriod) {\n    // get duration of end - start and double\n    const diff = moment(end).diff(moment(start));\n\n    const previousPeriodStart = moment(start).subtract(diff);\n\n    // This is not as accurate as having 2 start/end objs\n    return {\n      start: getUtcDateString(previousPeriodStart),\n      end: formattedEnd,\n    };\n  }\n\n  return {\n    start: formattedStart,\n    end: formattedEnd,\n  };\n}\n","import styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport type {LinkProps} from 'sentry/components/links/link';\nimport {Panel} from 'sentry/components/panels';\n\ninterface Props {\n  buttonText: string;\n  buttonTo: LinkProps['to'];\n}\n\nexport const RELATED_ISSUES_BOOLEAN_QUERY_ERROR =\n  'Error parsing search query: Boolean statements containing \"OR\" or \"AND\" are not supported in this search';\n\n/**\n * Renders an Alert box of type \"info\" for boolean queries in alert details. Renders a discover link if the feature is available.\n */\nexport const RelatedIssuesNotAvailable = ({buttonTo, buttonText}: Props) => (\n  <StyledAlert\n    type=\"info\"\n    showIcon\n    trailingItems={\n      <Feature features={['discover-basic']}>\n        <Button type=\"button\" priority=\"default\" size=\"xsmall\" to={buttonTo}>\n          {buttonText}\n        </Button>\n      </Feature>\n    }\n  >\n    <div data-test-id=\"loading-error-message\">\n      Related Issues unavailable for this alert.\n    </div>\n  </StyledAlert>\n);\n\nconst StyledAlert = styled(Alert)`\n  ${/* sc-selector */ Panel} & {\n    border-radius: 0;\n    border-width: 1px 0;\n  }\n`;\n"],"names":["doEventsRequest","api","organization","project","environment","team","period","start","end","interval","comparisonDelta","includePrevious","query","yAxis","field","topEvents","orderby","partial","withoutZerofill","referrer","queryBatching","generatePathname","queryExtras","excludeOther","userModified","pathname","slug","shouldDoublePeriod","canIncludePreviousPeriod","queryObject","Object","fromEntries","entries","undefined","user_modified","includes","filter","value","getPeriod","batchRequest","requestPromise","fetchTagFacets","orgSlug","queryOption","pick","values","PERFORMANCE_URL_PARAM","fetchTotalCount","then","res","count","AreaChart","series","stacked","colors","props","map","i","seriesName","data","otherSeriesProps","LineSeries","AreaSeries","stack","name","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","DEFAULT","realtime","showDetail","left","right","bottom","DataZoomSlider","Array","isArray","getDate","date","moment","format","ChartZoom","Component","constructor","super","this","currentPeriod","saveHistory","router","onZoom","usePageDate","startFormatted","endFormatted","history","push","callIfFunction","zooming","newQuery","location","pageStart","getUtcDateString","pageEnd","pageStatsPeriod","qs","updateDateTime","getUtcToLocalDateObject","saveCurrentPeriod","chart","onChartReady","evt","length","setPeriod","onRestore","model","getModel","startValue","endValue","_payload","batch","previousPeriod","pop","onDataZoom","_props","zoom","_componentsViews","find","c","_features","dataZoom","_isZoomActive","dispatchAction","type","key","dataZoomSelectActive","onFinished","componentDidUpdate","disabled","render","utc","_utc","_start","_end","children","xAxisIndex","_router","_onZoom","_onRestore","_onChartReady","_onDataZoom","_onFinished","showSlider","chartZoomOptions","isGroupedByDate","handleChartReady","DataZoomInside","showTimeInTooltip","toolBox","ToolBox","title","back","iconStyle","borderWidth","handleDataZoom","handleChartFinished","handleZoomRestore","zoomOnMouseWheel","zoomLock","throttle","getFeatures","features","yAxisIndex","options","top","itemSize","z","feature","propNamesToIgnore","omitIgnoredProps","omitBy","_value","EventsRequest","PureComponent","reloading","loading","errored","timeseriesData","fetchedWithPrevious","async","confirmedQuery","onError","expired","hideError","errorMessage","setState","state","t","addErrorMessage","append","clear","resp","responseJSON","detail","unmounting","hasPreviousPeriod","dataMiddleIndex","Math","floor","current","slice","previous","componentDidMount","fetchData","prevProps","isEqual","componentWillUnmount","calculateTotalsPerTimestamp","getName","timestamp","countArray","reduce","acc","transformPreviousPeriodData","_timestamp","_countArray","transformAggregatedTimeseries","transformTimeseriesData","countsForTimestamp","transformComparisonTimeseriesData","comparisonCount","processData","response","seriesIndex","isMetricsData","totals","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","currentSeriesNames","previousSeriesNames","getData","comparisonData","allData","originalData","originalPreviousData","previousData","getPreviousSeriesName","timeAggregatedData","timeframe","showLoading","isMultiSeriesStats","defined","seriesAdditionalInfo","sortedTimeseriesData","keys","index","seriesData","processedData","stripEquationPrefix","order","sort","a","b","results","item","previousTimeseriesData","some","transformedTimeseriesData","transformedComparisonTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","comparisonTimeseriesData","limit","LoadingPanel","height","_height","p","defaultProps","GroupListHeader","withChart","narrowGroups","disablePadding","IssueWrapper","ChartWrapper","className","EventUserWrapper","AssigneeWrapper","Heading","space","theme","subText","breakpoints","medium","xlarge","GroupList","error","errorData","groups","pageLinks","GroupStore","onGroupChange","StreamManager","orgId","queryParams","fetchOrgMembers","members","memberList","indexMembersByProject","endpoint","getGroupListEndpoint","parsedQuery","parseSearch","getQueryParams","treeResultLocator","tree","noResultValue","visitorTest","token","returnResult","Token","RELATED_ISSUES_BOOLEAN_QUERY_ERROR","jqXHR","includeAllArgs","_streamManager","getResponseHeader","onFetchSuccess","handleCursorChange","shouldComponentUpdate","nextProps","nextState","endpointPath","ignoredQueryParams","omit","listener","path","queryParameters","cursor","pageDiff","queryPageInt","parseInt","page","nextPage","isNaN","browserHistory","getAllItems","canSelectGroups","renderEmptyMessage","renderErrorMessage","withPagination","useFilteredStats","useTintRow","customStatsPeriod","queryFilterDescription","onRetry","statsPeriod","groupStatsPeriod","DEFAULT_STREAM_GROUP_STATS_PERIOD","Fragment","id","hasOwnProperty","canSelect","onCursor","withApi","withRouter","backgroundSecondary","borderRadius","DEFAULT_STATS_PERIOD","periodNumber","periodLength","match","Error","formattedStart","formattedEnd","diff","previousPeriodStart","subtract","RelatedIssuesNotAvailable","buttonTo","buttonText","StyledAlert","showIcon","trailingItems","priority","size","to","Alert","Panel"],"sourceRoot":""}