{"version":3,"file":"chunks/app_components_charts_areaChart_tsx-app_components_charts_loadingPanel_tsx-app_components_mod-447532.xxxxxxxxxxxxxxxxxxxx.js","mappings":"4iBA+DO,MAAMA,EAAkB,CAC7BC,EAD6B,KA2BqB,UAzBlD,aACEC,EADF,QAEEC,EAFF,YAGEC,EAHF,KAIEC,EAJF,OAKEC,EALF,MAMEC,EANF,IAOEC,EAPF,SAQEC,EARF,gBASEC,EATF,gBAUEC,EAVF,MAWEC,EAXF,MAYEC,EAZF,MAaEC,EAbF,UAcEC,EAdF,QAeEC,EAfF,QAgBEC,EAhBF,gBAiBEC,EAjBF,SAkBEC,EAlBF,cAmBEC,EAnBF,iBAoBEC,EApBF,YAqBEC,EArBF,aAsBEC,EAtBF,aAuBEC,GAEgD,EAClD,MAAMC,EAAQ,UACZJ,MAAAA,OADY,EACZA,EAAmBnB,UADP,QAEX,kBAAiBA,EAAawB,qBAE3BC,GAAqBC,EAAAA,EAAAA,IAAyBjB,EAAiBL,GA0B/DuB,EAAc,CAClBjB,MAAO,IA1BQkB,OAAOC,YACtBD,OAAOE,QAAQ,CACbvB,SAAAA,EACAC,gBAAAA,EACAP,QAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAO,MAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,QAASA,EAAU,SAAMgB,EACzBf,gBAAiBA,EAAkB,SAAMe,EACzCd,SAAUA,GAAsB,+BAChCI,aAAcA,EAAe,SAAMU,EACnCC,cAAeT,EAASU,SAAS,gBAAkBX,OAAeS,IACjEG,QAAO,QAAE,CAAEC,GAAJ,cAAgC,IAAVA,UAMhBC,EAAAA,EAAAA,GAAU,CAAChC,OAAAA,EAAQC,MAAAA,EAAOC,IAAAA,GAAM,CAACmB,mBAAAA,OAM5CL,IAIP,OAAIF,MAAAA,GAAAA,EAAemB,aACVnB,EAAcmB,aAAatC,EAAKwB,EAAUI,GAG5C5B,EAAIuC,eAAef,EAAUI,IAiC/B,SAASY,EACdxC,EACAyC,EACA9B,GAEA,MAEM+B,EAAc,IAFFC,GAAAA,CAAKhC,EAAOkB,OAAOe,OAAOC,EAAAA,IAETlC,MAAOA,EAAMA,OAEhD,OAAOX,EAAIuC,eAAgB,kBAAiBE,mBAA0B,CACpE9B,MAAO+B,IAOJ,SAASI,EACd9C,EACAyC,EACA9B,GAEA,MAEM+B,EAAc,IAFFC,GAAAA,CAAKhC,EAAOkB,OAAOe,OAAOC,EAAAA,IAETlC,MAAOA,EAAMA,OAMhD,OAAOX,EACJuC,eAAgB,kBAAiBE,iBAAwB,CACxD9B,MAAO+B,IAERK,MAAMC,GAAkBA,EAAIC,U,gFCtMjC,MAEA,GAF4BC,E,yCAAAA,eAAc,CAAC,QAAS,gBAAiB,Y,sRCc9D,SAASC,EAAT,GAAwE,IAArD,OAACC,EAAD,QAASC,EAAT,OAAkBC,KAAWC,GAAwB,EAC7E,OACE,QAAC,IAAD,IACMA,EACJ,eAAa,aACbD,OAAQA,EACRF,OAAQA,EAAOI,KAAI,CAAC,EAAyCC,KAA1C,IAAC,WAACC,EAAD,KAAaC,KAASC,GAAvB,SClBV,WAAoE,IAAhDL,EAAgD,uDAAtB,GAC3D,OAAOM,EAAAA,EAAAA,GAAW,IACbN,IDiBCO,CAAW,CACTC,MAAOV,EAAU,YAASrB,EAC1BgC,KAAMN,EACNC,KAAMA,EAAKH,KAAI,QAAC,KAACQ,EAAD,MAAO5B,GAAR,QAAmB,CAAC4B,EAAM5B,MACzC6B,UAAW,CACTC,MAAOZ,MAAAA,OAAF,EAAEA,EAASG,GAChBU,QAAS,EACTC,MAAO,IAETC,UAAW,CACTH,MAAOZ,MAAAA,OAAF,EAAEA,EAASG,GAChBU,QAAS,GAEXG,WAAW,EACXC,mBAAoB,EACpBC,kBAAmB,KAChBZ,SAvBGT,EAAAA,YAAAA,a,mTERhB,MAAMsB,GAAe,QAAO,QAAEC,OAAQC,KAAYpB,GAAtB,SAC1B,kBAASA,EAAT,UACE,QAAC,IAAD,QAFiB,qBAAH,gDAQNqB,GAAKA,EAAEF,QARD,gEAclBD,EAAaI,aAAe,CAC1BH,OAAQ,SAGV,W,gYCNA,SAASI,EAAT,GAAwF,IAAtE,MAACC,EAAD,MAAQC,EAAR,QAAeC,EAAf,iBAAwBC,EAAxB,QAA0CC,EAA1C,UAAmDC,GAAmB,EACtF,MAAMC,EAASH,IAEf,IAAKG,IAAWJ,EACd,OAAO,QAACK,EAAD,CAAeP,MAAOA,EAAtB,SAA8BC,IAGvC,MAAMO,EAASH,GACb,QAACI,EAAD,CAAiBC,KAAK,KAAKL,UAAyB,SAAdA,EAAuB,OAAS,OAD7C,KAI3B,OACE,QAACM,EAAD,CAAYX,MAAOA,EAAOY,GAAIN,EAAQF,QAASA,EAA/C,UACGH,EADH,IACWO,KAbNT,EAAAA,YAAAA,WAqBT,MAAMY,GAAa,QAAQnC,IACzB,MAAMqC,EAAeC,GAAAA,CAAKtC,EAAO,CAAC,UAClC,OAAO,QAAC,IAAD,IAAUqC,MAFA,sBAAH,gHAgBXhB,GAAwBA,EAAEG,MAAS,eAAcH,EAAEG,SAAW,IAhBnD,KAmBVO,GAAgB,OAAO,MAAP,sBAAH,gDAIdV,GAA4BA,EAAEG,MAAS,eAAcH,EAAEG,SAAW,IAJpD,KAObS,GAAkB,OAAOM,EAAAA,GAAP,sBAAH,6CAIrB,K,2ECnEA,MAUA,GAVoB,E,kFAAA,GAAO,MAAP,sBAAH,qBACKlB,GAAKA,EAAEmB,MAAMC,qBADlB,mBAEEpB,GAAKA,EAAEmB,MAAME,cAFf,sD,8oFCoCjB,MAYaC,GACX,QAAC,SAACC,EAAD,OAAWC,EAAX,UAAmBC,EAAnB,aAA8BpG,EAA9B,cAA4CqG,GAA7C,QACA,CAACC,EAAyCC,KACxC,MAAMC,EAAYJ,MAAAA,OAAH,EAAGA,EAAWK,KACvB3B,GAAQ4B,EAAAA,EAAAA,IAAeJ,EAAOvC,KAAMuC,EAAOK,KAAMH,GACjDI,GAAYC,EAAAA,EAAAA,GAAaC,OAAOR,EAAOS,MAE7C,OACE,SAAC,IAAD,CACEjC,MAAOA,EACPC,OAAO,SAACiC,GAAD,CAAejC,MAAOuB,EAAOvC,KAA7B,SAAoCuC,EAAOvC,OAClDoB,UAAWgB,EAAOc,QAAQ,GAAGnG,UAAY8F,EAAY,YAAS7E,EAC9DiD,UAAW4B,EACX3B,iBAAkB,KAAM,IACnBiB,EACHxF,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,MAA8BN,EAC/B,CAACM,EAAAA,EAAAA,WAA8BnF,EAC/B,CAACmF,EAAAA,EAAAA,aAAgCnF,KAGrCmD,QAAS,KACPmB,MAAAA,GAAAA,KACAc,EAAAA,EAAAA,GAA4B,sCAAuC,CACjEnH,aAAAA,EACAoH,YAAaC,EAAAA,GAAAA,MACbC,aAAcnB,EAAOoB,YACrBjB,OAAQA,EAAOvC,KACfyD,MAAO,cAONC,GACX,QAAC,SAACvB,EAAD,UAAWwB,EAAX,OAAsBvB,EAAtB,UAA8BC,EAA9B,aAAyCpG,EAAzC,cAAuDqG,GAAxD,QACA,CAACC,EAAyCC,KACxC,MAAM,QAACzF,GAAWqF,EAAOc,QAAQ,GAE3BU,EAAyB,GAC7B7G,EAAQ8G,WAAW,KAAO,IAAM,MAC/BC,EAAAA,EAAAA,IAAkBC,GAAAA,CAAUhH,EAAS,QAClCiH,GAAYC,EAAAA,EAAAA,IAChB7B,EAAOpB,MACP,IAAIoB,EAAOc,QAAQ,GAAInG,QAAS6G,GAChCD,EACAvB,EAAOoB,aAEHf,EAAYJ,MAAAA,OAAH,EAAGA,EAAWK,KACvB3B,GAAQ4B,EAAAA,EAAAA,IAAeJ,EAAOvC,KAAMuC,EAAOK,KAAMH,GACjD5F,EAAQ,CAACA,MAAOkG,OAAOR,EAAOS,KAAM5C,MAAOmC,EAAOnC,OAoBlD8D,EAAcF,EAAUG,aAAatH,EAAO4F,GAC5CxB,GAAUmD,EAAAA,EAAAA,IAAgBvH,EAAO4F,GACjC4B,GAAYC,EAAAA,EAAAA,IAAgB/B,EAAOvC,MACrCgE,EAAUO,gBAAeC,EAAAA,EAAAA,IAAsBjC,EAAOvC,OACtDuC,EAAOvC,KAEX,OACE,SAAC,IAAD,CACEe,MAAOA,EACPC,OAAO,SAACiC,GAAD,CAAejC,MAAOqD,EAAtB,SAAkCA,IACzCjD,UAAW8C,EAAcA,EAAYO,UAAOzG,EAC5CiD,QAASA,EACTC,iBA/BJ,WACE,IAAKuB,EACH,OAGF,MACMiC,EADgBV,EAAUW,YAAY9H,EAAO4F,OAAWzE,GAAW,GACjC4G,4BAExC,MAAO,IACFzC,EACHxF,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,MAA8BuB,EAAkBG,KACjD,CAAC1B,EAAAA,EAAAA,WAA8BnF,EAC/B,CAACmF,EAAAA,EAAAA,aAAgCnF,KAkBnCmD,QAAS,KACPmB,MAAAA,GAAAA,KACAc,EAAAA,EAAAA,GAA4B,sCAAuC,CACjEnH,aAAAA,EACAoH,YAAaC,EAAAA,GAAAA,SACbC,aAAcnB,EAAOoB,YACrBjB,OAAQA,EAAOvC,KACfyD,MAA6B,UAAtBS,MAAAA,OAAA,EAAAA,EAAaO,MAAkB,MAAQ,cAO7CK,GACX,QAAC,SAAC3C,EAAD,aAAWlG,EAAX,OAAyBmG,EAAzB,UAAiCC,EAAjC,YAA4C0C,GAA7C,QACA,CACExC,EACAyC,EACAC,EACAC,KACoB,MACpB,MAAMC,EAAYpC,OAAOR,EAAOS,KAC1BoC,EAAchD,EAAOoB,cAAgB6B,EAAAA,GAAAA,MAC3C,IAAIC,EACJ,MAAMC,GACHtJ,EAAauJ,SAAStH,SAAS,0CAChCkE,EAAOqD,aAAenC,EAAAA,GAAAA,QACxB,OAAQlB,EAAOqD,YACb,KAAKnC,EAAAA,GAAAA,MACHgC,GAAO,WACLI,EAAAA,EAAAA,GAAsBP,UADjB,SAC+BQ,EAAAA,EAAAA,IAAiBR,EAAWS,EAAAA,KAChEZ,EAAS,CAAC/I,aAAAA,EAAckG,SAAAA,IAC1B,MACF,KAAKmB,EAAAA,GAAAA,SACL,QACE,IAAKjB,IAAcA,EAAUK,KAC3B,OAAOsC,EAAQzC,EAAOS,KAExBsC,GAAOK,EAAAA,EAAAA,IACLR,EACA9C,EAAUK,KACV6C,EAHKI,CAILX,EAAS,CACT/I,aAAAA,EACAkG,SAAAA,IAGF,MAAM0D,GAAY/B,EAAAA,EAAAA,IAAkBqB,GAC9B/G,EAAQ4G,EAAQa,GACtB,GAAkC,YAA9BxD,EAAUK,KAAKmD,KAA4BC,EAAAA,EAAAA,IAAQ1H,IAAUA,EAAQ,IACvE,OACE,SAAC,IAAD,CACE4C,MAAO5C,EAAM2H,iBACbC,qBAAqB,QACrBC,SAAS,QAHX,SAKGX,IAMX,MAAMY,EAAkB7D,EACpB8D,KAAKC,IAAI/D,MAAAA,OAAT,EAASA,EAAW1C,KAAK0G,OAjKF,KAmK3B,OACE,SAAC,EAAAC,SAAD,WACGlB,GACDL,GACAE,EAvKuB,GAwKP,IAAhBC,GACE,SAAC,IAAD,CAAqBjG,MAAOiH,EAAiBK,MAAOtB,IAClD,KACHK,OA6CIkB,GACX,QAAC,SAACrE,EAAD,OAAWC,EAAX,UAAmBC,EAAnB,aAA8BpG,EAA9B,cAA4CqG,GAA7C,QACA,CAACC,EAAyCC,KACxC,MAAMC,EAAYJ,MAAAA,OAAH,EAAGA,EAAWK,KACvB3B,GAAQ4B,EAAAA,EAAAA,IAAeJ,EAAOvC,KAAMuC,EAAOK,KAAMH,GACjDgE,EAAgBrE,EAAOc,QAAQ,GAAGnG,QAClC8H,EAAa,CACjBJ,KAAMgC,EAAc5C,WAAW,KAAO,OAAS,MAC/ChH,MAAO4J,EAAc5C,WAAW,KAAO4C,EAAcC,MAAM,GAAKD,GAE5DxF,GAAU0F,EAAAA,EAAAA,IAAiBpE,EAAOvC,MAClCqE,EAAY9B,EAAOvC,KAoBzB,OACE,SAAC,IAAD,CACEe,MAAOA,EACPC,OAAO,SAACiC,GAAD,CAAejC,MAAOqD,EAAtB,SAAkCA,IACzCjD,UAAWyD,EAAKhI,QAAU0F,EAAOvC,KAAO6E,EAAKJ,UAAOzG,EACpDiD,QAASA,EACTC,iBAxBJ,WACE,MAAM0F,EACJrE,EAAOvC,OAAS6E,EAAKhI,MACjB,IAAIgI,EAAMJ,KAAoB,SAAdI,EAAKJ,KAAkB,MAAQ,QAC/C,CAACA,KAAM,OAAQ5H,MAAO0F,EAAOvC,MAEnC,MAAO,IACFmC,EACHxF,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,MACqB,SAApByD,EAAWnC,KAAmB,IAAGmC,EAAW/J,QAAU+J,EAAW/J,MACnE,CAACsG,EAAAA,EAAAA,WAA8BnF,EAC/B,CAACmF,EAAAA,EAAAA,aAAgCnF,KAYnCmD,QAAS,KACPmB,MAAAA,GAAAA,KACAc,EAAAA,EAAAA,GAA4B,sCAAuC,CACjEnH,aAAAA,EACAoH,YAAaC,EAAAA,GAAAA,QACbC,aAAcnB,EAAOoB,YACrBjB,OAAQA,EAAOvC,KACfyD,MAAsB,UAAfoB,MAAAA,OAAA,EAAAA,EAAMJ,MAAkB,MAAQ,cAO7CxB,IAAgB,OAAO4D,EAAAA,EAAP,sBAAH,2CCvNbC,GAAmB,mBAEnBC,GAAmB,0BAEnBC,GAA4B,CAACC,EAAW1H,KAC5C,MAAM2H,EAAmB3H,EAAMoE,YAAcsD,EAAUtD,UACjDwD,EACJ5H,EAAM4C,SAASxF,MAAMwG,EAAAA,EAAAA,QACrB8D,EAAU9E,SAASxF,MAAMwG,EAAAA,EAAAA,MACrBiE,EAA0BC,GAAAA,CAC9B9H,EAAM+H,iBACNL,EAAUK,kBAENC,EACJhI,EAAM6C,OAAOoB,cAAgB6B,EAAAA,GAAAA,SAAsBS,EAAAA,EAAAA,IAAQvG,EAAM6C,OAAOoF,OAC1E,OAAON,GAAoBE,IAA4BD,GAAeI,IAMlEE,IAAmCC,EAAAA,EAAAA,MACvCC,EAAAA,EACAX,IAEIY,IAA0BF,EAAAA,EAAAA,MAAKG,EAAAA,EAAiBb,IAyBtD,SAASc,GAAkBvI,GAAc,QACvC,MAAM,aACJtD,EADI,OAEJmG,EAFI,UAGJuB,EAHI,SAIJxB,EAJI,OAKJ4F,EALI,KAMJC,EANI,OAOJC,EAPI,WAQJC,EARI,OASJC,EATI,OAUJC,EAVI,OAWJC,EAXI,OAYJC,EAZI,WAaJC,EAbI,UAcJlG,EAdI,WAeJmG,EAfI,iBAgBJC,EACAC,UAAWC,GACTpJ,EACEqJ,GAAmB3M,EAAauJ,SAAStH,SAAS,+BAGlD5B,IAAQuM,EAAAA,EAAAA,IAAa1G,EAASxF,MAAMwG,EAAAA,EAAAA,QACpC5G,IAAMsM,EAAAA,EAAAA,IAAa1G,EAASxF,MAAMwG,EAAAA,EAAAA,MAClC2F,GAAgB1G,EAAOoB,cAAgB6B,EAAAA,GAAAA,MACvC0D,IAAqBC,EAAAA,EAAAA,UACzB,IACE1M,IAASC,GACL,IACKoH,EACHsF,SAAU,CAAC3M,MAAAA,GAAOC,IAAAA,GAAKF,OAAQ,KAAM6M,IAAK,OAE5CvF,GACN,CAACrH,GAAOC,GAAKoH,KAGRwF,GAAiBC,KAAsBC,EAAAA,EAAAA,WAAkB,IAEzD/B,GAAkBgC,KAAuBD,EAAAA,EAAAA,UAAkC,CAChF/M,MAAO,EACPC,IAAK,OAMAgN,GAAqBC,KAC1BH,EAAAA,EAAAA,UAAsBN,IAClBU,IAAsBC,EAAAA,EAAAA,QAAOH,KAInCI,EAAAA,EAAAA,YAAU,KACgB,QAApBxH,EAASyH,SACXJ,GAAuBT,IAErBO,GADEhN,IAASC,GACS,CAClBsN,WAAuC,IAA3BC,IAAAA,IAAWxN,IAAOyN,OAC9BC,SAAmC,IAAzBF,IAAAA,IAAWvN,IAAKwN,QAGR,CAACzN,MAAO,EAAGC,IAAK,SAGvC,CAACA,GAAK4F,EAAU4G,GAAoBzM,KAIvC,MAAO2N,GAAiBC,KAAsBb,EAAAA,EAAAA,WAC5Cc,EAAAA,EAAAA,IAAWhI,EAASxF,MAAMwG,EAAAA,EAAAA,SAAgCiH,QAAO,CAACC,EAAKC,KACrED,EAAIC,IAAU,EACPD,IACN,MAEEE,GAAcC,KAAmBnB,EAAAA,EAAAA,YAGlCoB,GAAkB,WACtBC,EAAAA,EAAAA,IAAcvI,EAASxF,MAAMwG,EAAAA,EAAAA,eADP,QACyC,EAG3DwH,GAAI,WAAGD,EAAAA,EAAAA,IAAcvI,EAASxF,MAAMwG,EAAAA,EAAAA,cAAhC,QAAiE,EACrEyH,IAAS/B,EAAAA,EAAAA,IAAa1G,EAASxF,MAAMwG,EAAAA,EAAAA,SAGrC0H,IAASV,EAAAA,EAAAA,IAAWhI,EAASxF,MAAMwG,EAAAA,EAAAA,QAGnC0B,IAAOgE,EAAAA,EAAAA,IAAa1G,EAASxF,MAAMwG,EAAAA,EAAAA,OACnC2H,GAAgBC,GAAAA,CACpBlG,GAAOzC,EAAOc,QAAQ1D,KAAI7C,IAAS,IAAKA,EAAOI,QAAS8H,OAAUzC,EAAOc,SAKrE8H,GACJ5I,EAAOoB,cAAgB6B,EAAAA,GAAAA,YAAsCrH,IAAjBoE,EAAOoF,MAC/C,IAAIpF,EAAQc,QAAS4H,IACrB1I,EACApG,IAAMiP,EAAAA,EAAAA,KAGNC,GAAc,IACfH,GAAAA,CAAU,IAAI3I,EAAQc,QAAS,CAAC4H,GAAcL,OACjDjH,YAAa6B,EAAAA,GAAAA,QAET,WAAC8F,GAAD,QAAaC,IAAWF,GAAYhI,QAAQ,IAC5C,QAACnG,IAAWqF,EAAOc,QAAQ,GAC3BO,GAAQ1G,GAAQ8G,WAAW,KAC3BwH,GAAatH,GAAAA,CAAUhH,GAAS,KAEhCuO,IAASxF,EAAAA,EAAAA,IAAQoF,GAAYhI,QAAQ,GAAGoI,QAC1CJ,GAAYhI,QAAQ,GAAGoI,OACvB,IAAIF,MAAYD,IAOlB/I,EAAOqD,aAAenC,EAAAA,GAAAA,WACtBvG,KACCuH,EAAAA,EAAAA,IAAgB+G,KAChBC,GAAOpN,SAASmN,MAEjBC,GAAOC,KAAKF,IACZ,CAACH,GAAaF,IAAeQ,SAAQC,KAC/B9E,EAAAA,EAAAA,IAAiB0E,MAAeK,EAAAA,EAAAA,IAAWL,IAC7CI,EAAqBvI,QAAQsI,SAAQ7O,IAC9BA,EAAMwO,WAAWjN,SAASmN,KAC7B1O,EAAMwO,WAAWI,KAAKF,OAI1BI,EAAqBvI,QAAQsI,SAAQ7O,IAC9BA,EAAMyO,QAAQlN,SAASmN,KAC1B1O,EAAMyO,QAAQG,KAAKF,YASzBK,EAAAA,EAAAA,IAAWL,KAAeH,GAAYhI,QAAQ,GAAGnG,UAAYA,KAC/DmO,GAAYhI,QAAQ,GAAGnG,QAAW,GAAE0G,GAAQ,IAAM,eAChDkI,EAAAA,EAAAA,IAAgBL,IAAU,MAM5BlJ,EAAOoB,cAAgB6B,EAAAA,GAAAA,WACtB+F,GAAQlN,SAAS4I,MAElBwE,GAAOM,QAAQ9E,IACfsE,GAAQQ,QAAQ9E,KAGlB,MAAM+E,GACJ,CACExG,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,KACAnH,SAASkE,EAAOoB,cAClBpB,EAAOqD,YACP,CAACnC,EAAAA,GAAAA,SAAqBA,EAAAA,GAAAA,SAAoBpF,SAASkE,EAAOqD,eACzDK,EAAAA,EAAAA,IAAQ1D,EAAOoF,OAsBlB,GAnBKsB,KACoBgD,EAAAA,EAAAA,IAAuBR,IAC/BE,SAAQO,KACjBpF,EAAAA,EAAAA,IAAiBoF,KAAUZ,GAAWjN,SAAS6N,IACjDZ,GAAWS,QAAQG,IAEhBpF,EAAAA,EAAAA,IAAiBoF,IAAUX,GAAQlN,SAAS6N,IAC/CX,GAAQQ,QAAQG,MAMtBX,GAAQI,SAAQjJ,IACT+I,GAAOpN,SAASqE,IACnB+I,GAAOM,QAAQrJ,MAIfsJ,GACF,OAAQzJ,EAAOqD,YACb,KAAKnC,EAAAA,GAAAA,SACmB,IAAlBgI,GAAOjF,SACT6E,GAAYhI,QAAQ,GAAGnG,QACrBmO,GAAYhI,QAAQ,GAAGnG,SAAY,IAAGuO,GAAO,MAEjDA,GAAOM,QAAQ,SACfR,GAAQQ,QAAQ,SAChB,MACF,KAAKtI,EAAAA,GAAAA,QACHgI,GAAOM,QAAQ,WACfR,GAAQQ,QAAQ,WAOtB,MAAM5H,IAAYC,EAAAA,EAAAA,IAChBiH,GAAYlK,MACZkK,GAAYhI,QAAQ,GACpBqG,GACA2B,GAAY1H,aAGd,IAAIwI,IAAcC,EAAAA,EAAAA,IAChBX,GAAO9L,KAAI3C,IAAS,CAClBA,MAAAA,MAEFZ,EAAauJ,SAAStH,SAAS,0CAEjC,MAAMgO,GAAelI,GAAUmI,WAC/BH,GAAcA,GAAYxM,KAAI,CAAC+C,EAAQgE,KAAT,IACzBhE,EACHnC,MAAOgM,SAASvB,GAAOtE,GAAQ,MAAQ,MAGzC,MAAM8F,GAAevB,GAActL,KAAI,CAAC,EAAoB+G,KAAU,IAA9B,KAACvG,EAAD,WAAOsM,GAAuB,EAEpE,MAAMC,GAAiBvM,GAAUsM,GAAaE,EAAAA,EAAAA,IAAYF,GAAc,KAWxE,MAAO,CACLG,OAAOC,EAAAA,EAAAA,IAAS1M,GAAQsM,EAAY,KACpClO,MAAOmI,EACPoG,oBAZAC,GAEuB,OAAhBL,GACL,SAACM,GAAD,IAAwBD,EAAxB,UACE,SAAC,IAAD,CAAgBL,YAAaA,WAE7BvO,MAUF8O,GAAiB,CAAC5H,EAAqB6H,KAC3C,MAAMC,EAAWD,EAAW3M,MAAQ6M,OAAOF,EAAW3M,OAAS8M,EAAAA,GACzDC,EAAsB,IAAIC,MAAMjH,KAAKkH,IAAInI,EAAa2F,GAAOxE,SAASiH,KAC1EJ,EAAAA,IAEFrC,GAAOW,SAAQ,CAACpL,EAAOmG,IAAW4G,EAAU5G,GAAS6F,SAAShM,EAAO,MACrE+M,EAAUjI,GAAe8H,EACzB5E,EAAOmF,QAAQ,CACb/P,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,OAA+BgK,MAkBtC,SAASK,GAAT,GAAgF,UAAjD,SAACC,GAAgD,EAC9EvD,GAAmBuD,GACnBrF,EAAOmF,QAAQ,CACb/P,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,QAAgCtF,OAAO6P,KAAKD,GAAUtP,QACrD6E,IAAQyK,EAASzK,SAIvBI,EAAAA,EAAAA,GAA4B,+CAAgD,CAC1EnH,aAAAA,EACAoH,YAAW,UAAEjB,EAAOqD,kBAAT,QAAuBnC,EAAAA,GAAAA,SAClCC,aAAcnB,EAAOoB,eA1BzBmG,EAAAA,EAAAA,YAAU,KACkBgE,WACpBvL,EAAOqD,aAAenC,EAAAA,GAAAA,UACxBkH,SArSRmD,eACE3R,EACAC,EACAkG,EACA6B,GAEA,GAAKA,EAAU4J,UAIf,IAME,aALoB9O,EAAAA,EAAAA,IAClB9C,EACAC,EAAawB,KACbuG,EAAU6J,oBAAoB1L,KAEnB4D,iBACb,MAAO+H,GAEP,YADAC,EAAAA,GAAwBD,IAmREE,CAAmBhS,GAAKC,EAAckG,EAAU6B,MAG1EiK,KAIC,CAACxD,KAoBJ,MAAMyD,GAA0D,IAI1D,kBAJ2D,aAC/DC,EAD+D,QAE/DC,EAF+D,UAG/D1F,GACI,EACJ,MAAM2F,GAAQC,EAAAA,EAAAA,GAAgB5F,MAAAA,EAAAA,EAAa,MACrC3D,GAA0C,KAA5B,UAAAsJ,EAAME,gBAAN,eAAgBC,SACpC,OACE,SAAC,EAAAlI,SAAD,YACE,SAAC,KAAD,CACEmI,UAAWL,EACXzO,KAAI,UAAEwO,MAAAA,GAAF,UAAEA,EAAe,UAAjB,aAAE,EAAmBxO,YAArB,QAA6B,GACjCqM,YAAaA,GACbE,aAAcA,GACdwC,KAAM,CACJC,eAAgBjL,GAA6B,IACxCnE,EACH6C,OAAQ8I,GACR7I,UAAW8L,MAAAA,OAAF,EAAEA,EAAe,GAC1B7L,cAAe,MAEX,CAAC+C,EAAAA,GAAAA,MAAmBA,EAAAA,GAAAA,OAAmBnH,SAASkE,EAAOoB,eACvDsC,EAAAA,EAAAA,IAAQ1D,EAAOoF,SAEf4B,IAAmB,MAIzBwF,eAAgB9J,GAAmB,IAC9BvF,EACH8C,UAAW8L,MAAAA,OAAF,EAAEA,EAAe,GAC1BpJ,YAAAA,IAEF+H,eAAAA,IAEF3K,SAAUA,MAEVkM,MAAAA,GAAA,UAAAA,EAAOE,gBAAP,eAAiBC,WAAWH,MAAAA,GAA5B,UAA4BA,EAAOQ,YAAnC,aAA4B,EAAaL,YACzC,SAAC,IAAD,CACE9F,UAAWA,EACXoG,SAAUC,IACR3G,EAAOmF,QAAQ,CACb/P,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,QAAgC4L,KAIjC3M,EAAOoB,cAAgB6B,EAAAA,GAAAA,OACzB+D,IAAmB,IAGrBhG,EAAAA,EAAAA,GAA4B,0CAA2C,CACrEnH,aAAAA,EACAoH,YAAaC,EAAAA,GAAAA,SACbC,aAAcnB,EAAOoB,qBAS7BwL,GAA6D,IAK7D,YAL8D,mBAClEC,EADkE,QAElEb,EAFkE,UAGlE1F,EAHkE,WAIlEwG,GACI,OACiBlR,IAAjBuM,IAA8B2E,GAChC1E,GAAgB0E,GAElB,MAAMb,GAAQC,EAAAA,EAAAA,GAAgB5F,MAAAA,EAAAA,EAAa,MAC3C,OACE,SAAC,EAAApC,SAAD,YACE,SAAC,KAAD,CACEmI,UAAWL,EACXzO,KAAMsP,EACNjD,YAAaA,GACbE,aAAcA,GACdwC,KAAM,CACJC,eAAgBzM,GAA0B,CACxCC,SAAAA,EACAlG,aAAAA,EACA0H,UAAAA,EACAvB,OAAQ8I,GACR5I,cAAe,KACb8G,IAAmB,MAGvBwF,eAAgB9J,GAAmB,CACjC3C,SAAAA,EACAlG,aAAAA,EACA0H,UAAAA,EACAvB,OAAQ8I,KAEV4B,eAAAA,IAEF3K,SAAUA,MAEVkM,MAAAA,GAAA,UAAAA,EAAOE,gBAAP,eAAiBC,WAAWH,MAAAA,GAA5B,UAA4BA,EAAOQ,YAAnC,aAA4B,EAAaL,YACzC,SAAC,IAAD,CACE9F,UAAWA,EACXoG,SAAU,CAACK,EAAYC,EAAOC,EAAQC,KACpC,IAAIC,EAAWC,MAAM7E,IAAQ2E,EAAQ3E,GAAO2E,EACxCP,EAAYI,EAIZI,GAAY,IACdR,OAAY/Q,EACZuR,EAAW,GAEbnH,EAAOmF,QAAQ,CACb/P,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,QAAgC4L,EACjC,CAAC5L,EAAAA,EAAAA,MAA8BoM,KAI/BnN,EAAOoB,cAAgB6B,EAAAA,GAAAA,OACzB+D,IAAmB,IAGrBhG,EAAAA,EAAAA,GAA4B,0CAA2C,CACrEnH,aAAAA,EACAoH,YAAaC,EAAAA,GAAAA,MACbC,aAAcnB,EAAOoB,qBAS7BiM,GAAgE,IAIhE,kBAJiE,aACrEtB,EADqE,QAErEC,EAFqE,UAGrE1F,GACI,EACJ,MAAM2F,GAAQC,EAAAA,EAAAA,GAAgB5F,MAAAA,EAAAA,EAAa,MACrC3D,GAA0C,KAA5B,UAAAsJ,EAAME,gBAAN,eAAgBC,SACpC,OACE,SAAC,EAAAlI,SAAD,YACE,SAAC,KAAD,CACEmI,UAAWL,EACXzO,KAAI,UAAEwO,MAAAA,GAAF,UAAEA,EAAe,UAAjB,aAAE,EAAmBxO,YAArB,QAA6B,GACjCqM,YAAaA,GACbE,aAAcA,GACdwC,KAAM,CACJC,eAAgBnI,GAA4B,IACvCjH,EACH6C,OAAQ8I,GACR7I,UAAW8L,MAAAA,OAAF,EAAEA,EAAe,GAC1B7L,cAAe,MAEX,CAAC+C,EAAAA,GAAAA,MAAmBA,EAAAA,GAAAA,OAAmBnH,SAASkE,EAAOoB,eACvDsC,EAAAA,EAAAA,IAAQ1D,EAAOoF,SAEf4B,IAAmB,MAIzBwF,eAAgB9J,GAAmB,IAC9BvF,EACH8C,UAAW8L,MAAAA,OAAF,EAAEA,EAAe,GAC1BpJ,YAAAA,IAEF+H,eAAAA,IAEF3K,SAAUA,KAEV+I,GAAYhI,QAAQ,GAAGnG,QAAQ2S,MAAM,kBACpCrB,MAAAA,GAAA,UAAAA,EAAOE,gBAAP,eAAiBC,WAAWH,MAAAA,GAA5B,UAA4BA,EAAOQ,YAAnC,aAA4B,EAAaL,YACxC,SAAC,IAAD,CACE9F,UAAWA,EACXoG,SAAUC,IACR3G,EAAOmF,QAAQ,CACb/P,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,QAAgC4L,MAGrC3L,EAAAA,EAAAA,GAA4B,0CAA2C,CACrEnH,aAAAA,EACAoH,YAAaC,EAAAA,GAAAA,QACbC,aAAcnB,EAAOoB,qBAS/BmM,GAAyC,CAACC,EAAKC,KAAU,UAE7D,MAAMC,EAAQD,EAAME,YACd,YAACC,EAAD,UAAcC,GAAaL,EACjC,IAAI/F,EAAYG,EAChBH,EAAU,UAAGiG,EAAMI,SAASC,aAAlB,aAAG,EAAuB,GAAGtG,WACvCG,EAAQ,UAAG8F,EAAMI,SAASC,aAAlB,aAAG,EAAuB,GAAGnG,SACrC,MAAMoG,EAAkBJ,EAAc,IAAIK,KAAKL,GAAaM,eAAYtS,EAClEuS,EAAgBN,EAAY,IAAII,KAAKJ,GAAWK,eAAYtS,EAGlE,QAAmBA,IAAf6L,QAAyC7L,IAAbgM,EAAwB,CACtD,IAAIoG,IAAmBG,EAKrB,OALoC,CACpC,MAAMC,EAAOD,EAAgBH,EAC7BvG,EAAa2G,EAAOV,EAAMI,SAAS5T,MAAQ,IAAO8T,EAClDpG,EAAWwG,EAAOV,EAAMI,SAAS3T,IAAM,IAAO6T,GAKlD9G,GAAoB,CAACO,WAAAA,EAAYG,SAAAA,IACjC,MAAMyG,GAAWC,EAAAA,EAAAA,IAAiB5G,IAAAA,IAAWD,IACvC8G,GAASD,EAAAA,EAAAA,IAAiB5G,IAAAA,IAAWE,IAC3CR,GAAuB,IAClBD,GACHN,SAAU,IACLM,GAAoBN,SACvB3M,MAAOmU,EACPlU,IAAKoU,EACLtU,OAAQ,QAGZ+L,EAAOmD,KAAK,CACV/N,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,OAA+BsN,EAChC,CAACtN,EAAAA,EAAAA,KAA6BwN,MAGlCvN,EAAAA,EAAAA,GAA4B,sCAAuC,CACjEnH,aAAAA,EACAoH,YAAW,UAAEjB,EAAOqD,kBAAT,QAAuBnC,EAAAA,GAAAA,SAClCC,aAAcnB,EAAOoB,eAqPzB,IAAIoN,GACAC,GACJ,OAAQzO,EAAOqD,YACb,KAAKnC,EAAAA,GAAAA,MACHsN,IAAYE,EAAAA,EAAAA,GAAE,kBACdD,IAAOE,EAAAA,EAAAA,IAAkB/F,GAAezB,GAAqBtN,GAC7D,MACF,KAAKqH,EAAAA,GAAAA,QACHsN,IAAYE,EAAAA,EAAAA,GAAE,oBACdD,IAAOG,EAAAA,EAAAA,IAAqBhG,GAAezB,GAAqBtN,GAChE,MACF,KAAKqH,EAAAA,GAAAA,SACL,QACEsN,IAAYE,EAAAA,EAAAA,GAAE,oBACdD,IAAOI,EAAAA,EAAAA,IACL,IAAIjG,GAAe9H,QAAS,CAAC8H,GAAc9H,QAAQuH,MACnDlB,GACAtN,GAKN,OACE,SAAC,EAAAqK,SAAD,YACE,SAAC2B,EAAD,CAAQiJ,aAAW,EAAnB,UACE,wBAAK9O,EAAOpB,WAEd,SAACgH,EAAD,WAzLA,SAAC,EAAA1B,SAAD,WACGlE,EAAOoB,cAAgB6B,EAAAA,GAAAA,QACtB,SAAC8L,GAAD,CACEzQ,OACE0B,EAAOoB,cAAgB6B,EAAAA,GAAAA,WAzqBP,KA2qBXuD,IACD,CACEvD,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,KACAA,EAAAA,GAAAA,IACAA,EAAAA,GAAAA,OACAnH,SAASkE,EAAOoB,aACd4N,EAAAA,EACA,GACJ,KAbR,UAgBM7I,GAAgBlG,IAAc8G,IAChC,SAACvB,GAAD,CACEyJ,kBAAmB9I,EACnB4F,aAAc9L,EACdiP,kBAActT,EACdoQ,SAAS,EACTjM,SAAUA,EACVC,OAAQA,EACRuB,UAAWA,EACXyE,OAAQA,EACRnM,aAAcA,EACd0T,OAAQA,GACRnC,sBAAuBA,GACvB+D,cAAe,CAAC9D,SAAUxD,IAC1BuH,eAAa,EACbC,WAAY7I,GACZ8I,WAAS,EACTpK,iBAAkBA,MAGpB,SAACG,GAAD,CACEtF,SAAUA,EACViG,OAAQA,EACRC,OAAQA,EACRC,OAAQA,EACRtM,IAAKA,GACLC,aAAcA,EACd0H,UAAW8F,GAAoBkI,QAE/BvP,OAAQ4I,GACR2E,OAAQA,GACRnC,sBAAuBA,GACvB+D,cAAe,CAAC9D,SAAUxD,IAC1BuH,eAAa,EACbC,WAAY7I,GACZ8I,WAAS,EACTpK,iBAAkBA,OAKzBlF,EAAOc,QAAQmD,OAAS,IACvB,SAAC,IAAD,CAAOzD,KAAK,OAAOgP,UAAQ,EAA3B,UACGd,EAAAA,EAAAA,GACC,0JAIJ1O,EAAOc,QAAQmD,OAAS,GAAKjE,EAAOc,QAAQ,GAAGoJ,cAC/C,SAACuF,GAAD,YACE,SAAC,IAAD,CACEzT,MAAOqM,GACPqH,QAASzF,GACT0F,SAAWC,IAAgC,MACzC5J,EAAOmF,QAAQ,CACb/P,SAAU2E,EAAS3E,SACnBb,MAAO,IACFwF,EAASxF,MACZ,CAACwG,EAAAA,EAAAA,OAA+B6O,EAAO5T,MACvC,CAAC+E,EAAAA,EAAAA,WAA8BnF,EAC/B,CAACmF,EAAAA,EAAAA,aAAgCnF,MAIrCoF,EAAAA,EAAAA,GACE,8CACA,CACEnH,aAAAA,EACAoH,YAAW,UAAEjB,EAAOqD,kBAAT,QAAuBnC,EAAAA,GAAAA,SAClCC,aAAcnB,EAAOoB,eAI3ByO,WAAY,CAEVC,YAAaC,IAAkB,MAC7B,OACE,SAAC,gBAAD,IACMA,EAEJC,UAAW,KAAM,CACfC,UAAW,aACXC,KAAM,EACNC,QAAS,OACTC,QAAU,MAAIC,EAAAA,EAAAA,GAAM,QAPxB,mBAUGpG,GAAa5B,IAAoBkC,oBAAoB,CACpD4F,QAAS,iBAXb,QAaKlG,GAAa5B,IAAoBgC,QAChC,SAACiG,GAAD,UAAsB3L,QAMhC4L,OAAQR,IACN,MAAMS,EAAmBT,EAAexS,KAAKgN,oBAAoB,CAC/D4F,QAAS,SAEX,OACE,SAAC,IAAD,IACOK,EACD,IACKT,EACH1F,MAAOmG,GAETT,EAAe1F,MACf0F,EACA,IACKA,EACH1F,OACE,SAACiG,GAAD,UACG3L,YAQb3E,EAAOc,QAAQmD,OAAS,EAAI,CAACwM,oBAAqBC,GAAK,MAAQ,IAErEC,cAAc,EACdC,WAAY5Q,EAAOc,QAAQmD,OAAS,IAEX,IAA1BjE,EAAOc,QAAQmD,SACd,SAAC4M,GAAD,CACEjS,OAAO8P,EAAAA,EAAAA,GAAE,iDACTrP,KAAK,UAvOnB,WACE,OAAQW,EAAOqD,YACb,KAAKnC,EAAAA,GAAAA,MACH,OAAIkF,GAAcW,IAAmB/G,EAAOoB,cAAgB6B,EAAAA,GAAAA,MACnD2J,GAAkB,CACvBC,mBAAoBzG,EACpB4F,SAAS,EACTkD,kBAActT,EACd0K,UAAWC,EACXuG,WAAYzG,KAId,SAAC,IAAD,CACEzM,IAAKA,GACLC,aAAcA,EACdmG,OAAQ8I,GACRvH,UAAW4F,GACX/B,MACEpF,EAAOoB,cAAgB6B,EAAAA,GAAAA,MAxmBP,GACA,GA2mBlBuF,OAAQA,GAVV,SAYGoE,KAGP,KAAK1L,EAAAA,GAAAA,QACH,OAAIjB,GAAa8G,IAAmB/G,EAAOoB,cAAgB6B,EAAAA,GAAAA,MAClDoK,GAAmB,CACxBtB,aAAc9L,EACd+L,SAAS,EACT1F,UAAWC,KAIb,SAAC,KAAD,CACE3M,IAAKA,GACLC,aAAcA,EACdmG,OAAQ8I,GACRvH,UAAW4F,GACX/B,MACEpF,EAAOoB,cAAgB6B,EAAAA,GAAAA,MAhoBP,GACA,GAmoBlB6N,gBAAc,EACdtI,OAAQA,GAXV,SAaG6E,KAGP,KAAKnM,EAAAA,GAAAA,SACL,QACE,OAAIjB,GAAa8G,IAAmB/G,EAAOoB,cAAgB6B,EAAAA,GAAAA,MAClD6I,GAAoB,CACzBC,aAAc9L,EACd+L,SAAS,EACT1F,UAAWC,KAIb,SAAC,KAAD,CACE3M,IAAKA,GACLC,aAAcA,EACdmG,OAAQ8I,GACRvH,UAAW4F,GACX/B,MACEpF,EAAOoB,cAAgB6B,EAAAA,GAAAA,MA1pBP,GACA,GA6pBlBuF,OAAQA,GAVV,SAYGsD,MAiKJiF,SAiCH,SAACpL,EAAD,WACE,SAACqL,GAAD,WACGC,GAAmB9I,GAAcnI,EAAOqD,aACzC,SAAC,KAAD,CAAW6N,IAAK,EAAhB,UACGnL,GAAU/F,EAAOmR,KAChB,SAAC,KAAD,CACE3Q,KAAK,SACLzB,QAAS,KAAM,MACb+G,IACAC,KACA/E,EAAAA,EAAAA,GAA4B,sCAAuC,CACjEnH,aAAAA,EACAoH,YAAW,UAAEjB,EAAOqD,kBAAT,QAAuBnC,EAAAA,GAAAA,SAClCC,aAAcnB,EAAOoB,eAR3B,UAYGsN,EAAAA,EAAAA,GAAE,iBAGN1O,EAAOqD,aACN,SAAC,KAAD,CACE9D,GAAIkP,GACJ2C,SAAS,UACT5Q,KAAK,SACLzB,QAAS,KAAM,OACbiC,EAAAA,EAAAA,GACE,6CACA,CACEnH,aAAAA,EACAoH,YAAW,UAAEjB,EAAOqD,kBAAT,QAAuBnC,EAAAA,GAAAA,SAClCC,aAAcnB,EAAOoB,eAV7B,SAeGoN,gBAUjB,SAASyC,GAAmB9I,EAAuB9E,GACjD,QAAqBzH,IAAjBuM,EACF,OAAO,oBAET,OAAQ9E,GACN,KAAKnC,EAAAA,GAAAA,MACH,OACE,2BACGmQ,EAAAA,EAAAA,IAAI,sCAAuC,CAC1CC,aAAa,sBACbC,MAAwB,SAAjBpJ,EAA0B,QAAUA,MAInD,KAAKjH,EAAAA,GAAAA,SACH,OACE,2BACGmQ,EAAAA,EAAAA,IAAI,sCAAuC,CAC1CC,aAAa,sBACbC,MAAOpJ,MAIf,QACE,OAAO,qBAp3BJzC,GAAAA,YAAAA,oBAw3BF,MAAM8L,GAAW,CAAH,oDAKfzC,IAAY,OAAO,MAAP,qBAAH,WACHvQ,GAAMA,EAAEF,OAAU,GAAEE,EAAEF,WAAa,QADhC,sCAGK+R,EAAAA,EAAAA,GAAM,GAHX,KAMTZ,IAAiB,OAAO,MAAP,qBAAH,kBACDY,EAAAA,EAAAA,GAAM,GADL,uBAKdQ,IAAwB,OAAOY,EAAAA,EAAP,qBAAH,0BAElBpB,EAAAA,EAAAA,GAAM,KAFY,WAGhBA,EAAAA,EAAAA,GAAM,GAHU,KAMrB5F,IAAqB,OAAO,OAAP,qBAAH,YACXjM,GAAKA,EAAE2R,SADI,SAEfE,EAAAA,EAAAA,GAAM,GAFS,iBAGP7R,GAAKA,EAAEmB,MAAM+R,KAAKC,YAHX,eAITnT,GAAKA,EAAEmB,MAAMiS,eAJJ,0BASlBZ,IAAmB,OAAO,MAAP,qBAAH,uDAIbX,EAAAA,EAAAA,GAAM,GAJO,wBAMC7R,GAAKA,EAAEmB,MAAMkS,YAAYC,OAN1B,2EAahBxB,IAAsB,OAAO,OAAP,qBAAH,UACd9R,GAAKA,EAAEmB,MAAMoS,UADC,KAIzB,IAAeC,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,GAAgBvM,M,qfCnhC1C,MAAMwM,EAAiC,CAAC1J,EAAQiG,EAAMlU,EAAO4X,IAC3DC,EAAAA,eAAAA,KAAoB,CAClBhX,SAAUqT,EACVlU,MAAO,IAAIA,EAAOiO,OAAAA,KAGhB6J,EAAa,IAUN,YAVO,GAClB9S,EADkB,SAElBQ,EAFkB,UAGlBuS,EAHkB,SAIlB5F,EAAWwF,EAJO,yBAKlBK,EALkB,UAMlBjM,EANkB,KAOlBjH,EAAO,QAPW,QAQlBmT,EARkB,SASlBT,GAAW,GACA,EACX,IAAKzL,EACH,OAAO,KAGT,MAAMmI,EAAOlP,MAAAA,EAAAA,EAAMQ,EAAS3E,SACtBb,EAAQwF,EAASxF,MACjB0R,GAAQC,EAAAA,EAAAA,GAAgB5F,GACxBmM,EAAmBV,IAAwC,KAA5B,UAAA9F,EAAME,gBAAN,eAAgBC,SAC/CsG,EAAeX,IAAoC,KAAxB,UAAA9F,EAAMQ,YAAN,eAAYL,SAE7C,OACE,QAACuG,EAAD,CAASL,UAAWA,EAApB,UACGE,IAAW,QAACI,EAAD,UAAoBJ,KAChC,QAAC,KAAD,CAAWK,QAAM,EAAjB,WACE,QAAC,KAAD,CACEC,MAAM,QAAC,KAAD,CAAa9T,UAAU,OAAOK,KAAK,OACzC,cAAYqP,EAAAA,EAAAA,GAAE,YACdrP,KAAMA,EACN0S,SAAUU,EACV1T,QAAS,KAAM,MACb2N,MAAAA,GAAAA,EAAQ,UAAGT,EAAME,gBAAT,aAAG,EAAgB3D,OAAQiG,EAAMlU,GAAQ,GACjDgY,MAAAA,GAAAA,EAA2B,gBAG/B,QAAC,KAAD,CACEO,MAAM,QAAC,KAAD,CAAa9T,UAAU,QAAQK,KAAK,OAC1C,cAAYqP,EAAAA,EAAAA,GAAE,QACdrP,KAAMA,EACN0S,SAAUW,EACV3T,QAAS,KAAM,MACb2N,MAAAA,GAAAA,EAAQ,UAAGT,EAAMQ,YAAT,aAAG,EAAYjE,OAAQiG,EAAMlU,EAAO,GAC5CgY,MAAAA,GAAAA,EAA2B,kBA1CjCF,EAAAA,YAAAA,aAkDN,MAAMM,GAAU,OAAO,MAAP,qBAAH,oEAIDtC,EAAAA,EAAAA,GAAM,GAJL,WAOPuC,GAAoB,OAAO,OAAP,qBAAH,UACZpU,GAAKA,EAAEmB,MAAMoT,SADD,eAERvU,GAAKA,EAAEmB,MAAMqT,gBAFL,kBAGL3C,EAAAA,EAAAA,GAAM,GAHD,KAMvB,GAAe2B,EAAAA,EAAAA,YAAWK,I,8SC3E1B,MAAMY,EAA2C,CAC/CC,qBAAsB,GAEtBC,OACEC,KAAKC,QACLD,KAAKF,qBAAqB/J,KACxBiK,KAAKE,SAASC,EAAAA,EAAAA,OAA4BH,KAAKI,WAEjDJ,KAAKF,qBAAqB/J,KAAKiK,KAAKE,SAASC,EAAAA,EAAAA,MAA2BH,KAAKC,QAC7ED,KAAKF,qBAAqB/J,KACxBiK,KAAKE,SAASC,EAAAA,EAAAA,cAAmCH,KAAKK,mBAI1DJ,QACED,KAAKpH,SAAU,EACfoH,KAAKM,MAAQ,KACbN,KAAKO,UAAY,KACjBP,KAAKvZ,aAAe,KACpBuZ,KAAKQ,OAAQ,EACbR,KAAKS,QAAQT,KAAKU,QAGpBN,SAASO,GAAiE,IAAvC,QAAC5I,GAAU,GAA4B,uDAAJ,GACpEiI,KAAKpH,SAAU,EACfoH,KAAKM,MAAQ,KACbN,KAAKO,UAAY,KACjBP,KAAKvZ,aAAesR,EAAU4I,EAAa,IAAIX,KAAKvZ,gBAAiBka,GACrEX,KAAKQ,OAAQ,EACbR,KAAKS,QAAQT,KAAKU,QAGpBL,gBAAgB/H,GAId,OAHA0H,KAAKvZ,aAAe,KACpBuZ,KAAKO,UAAY,KAETjI,MAAAA,OAAR,EAAQA,EAAKsI,QACX,KAAK,IACHZ,KAAKO,UAAYM,EAAAA,GAAAA,cACjB,MACF,KAAK,IACHb,KAAKO,UAAYM,EAAAA,GAAAA,cAIrBb,KAAKpH,SAAU,EACfoH,KAAKM,MAAQhI,EACb0H,KAAKQ,OAAQ,EACbR,KAAKS,QAAQT,KAAKU,QAGpBA,MACE,MAAO,CACLja,aAAcuZ,KAAKvZ,aACnB6Z,MAAON,KAAKM,MACZ1H,QAASoH,KAAKpH,QACd2H,UAAWP,KAAKO,UAChBC,MAAOR,KAAKQ,QAIhBM,WACE,OAAOd,KAAKU,QAMhB,GAF0BK,EAAAA,EAAAA,cAAYC,EAAAA,EAAAA,GAAoBnB,K,0FCrFnD,MAAMoB,EAAqD,CAChE,yBAA0B,qC,8FCQ5B,MAsHaC,EAAgE,CAC3E,yCACE,gDACF,2CACE,gDACF,2CAA4C,yCAC5C,sCAAuC,gDACvC,6CACE,8CACF,6CACE,2CACF,yCAA0C,yCAC1C,2BAA4B,6BAC5B,gCAAiC,sCACjC,iCAAkC,+CAClC,qCAAsC,8CACtC,kCAAmC,qCACnC,sCAAuC,yCACvC,sCAAuC,0CACvC,sCAAuC,wBACvC,6CACE,2CACF,0CAA2C,0BAC3C,8CAA+C,gCAC/C,sCAAuC,8BACvC,+CAAgD,gCAChD,sCAAuC,8BA5IvC,6CACE,0DACF,4CAA6C,wCAC7C,2CAA4C,uCAC5C,2CACE,iDACF,4CACE,4DACF,yCACE,qFAyBF,yCAA0C,gCAC1C,uCAAwC,iCACxC,yCAA0C,gC,4FCrDrC,MAAMC,EAA4D,CACvE,6CACE,2CACF,0CACE,qD,0FCiIG,MAAMC,EAA4D,CACvE,6CACE,8CACF,4CACE,6CACF,8CACE,+CACF,gCAAiC,iCACjC,yBAA0B,0BAC1B,iCAAkC,kCAClC,yBAA0B,0BAC1B,yCACE,+CACF,wCAAyC,+CACzC,yCACE,gDACF,6CACE,oDACF,yBAA0B,qCAC1B,iCAAkC,uCAClC,+BAAgC,qCAChC,qCAAsC,sCACtC,iCAAkC,kCAClC,kCAAmC,mCACnC,mCAAoC,oCACpC,sCAAuC,uCACvC,2CAA4C,4CAC5C,iDACE,kDACF,oDACE,qDACF,oCAAqC,qCACrC,gDACE,iDACF,0BAA2B,0BAC3B,wBAAyB,wBACzB,mCAAoC,oCACpC,qCAAsC,sCACtC,+BAAgC,gCAChC,+CAAgD,kCAChD,mDACE,sCACF,8CACE,+CACF,8CACE,+CACF,4CACE,2DACF,8BAA+B,8BAC/B,sBAAuB,uBACvB,sBAAuB,uBACvB,wBAAyB,yBACzB,4BAA6B,6BAC7B,6BAA8B,8BAC9B,mBAAoB,oBACpB,sBAAuB,uBACvB,sBAAuB,uBACvB,2BAA4B,2BAC5B,4BAA6B,4BAC7B,6BAA8B,KAC9B,uBAAwB,uBACxB,sBAAuB,wB,yFCzJlB,MAAMC,EAAsD,CACjE,qBAAsB,KACtB,2BAA4B,2BAC5B,sBAAuB,sBACvB,wBAAyB,wBACzB,4BAA6B,4BAC7B,oBAAqB,oBACrB,sBAAuB,uBACvB,+BAAgC,+BAChC,0BAA2B,+BAC3B,8BAA+B,mCAC/B,+BAAgC,oCAChC,wBAAyB,wBACzBC,cAAe,gBACf,cAAe,iB,+FC6BV,MAAMC,EAAkE,CAC7E,8CAA+C,yCAC/C,+BAAgC,gCAChC,iCAAkC,kCAClC,+BAAgC,gCAChC,gDACE,iDACF,8CACE,2CACF,wCAAyC,yCACzC,iDACE,gDACF,4CACE,6CACF,4CACE,4CACF,6CAA8C,yCAC9C,+CACE,kEACF,8CACE,0DACF,oCAAqC,gDACrC,sCAAuC,6CACvC,kCAAmC,+CACnC,oCAAqC,iDACrC,sCAAuC,yCACvC,oCAAqC,uCACrC,6DACE,+DACF,+DACE,yEACF,gDACE,qEACF,oCACE,oDACF,yCACE,gEACF,6CACE,8CACF,8CACE,+CACF,6CACE,gDACF,2CACE,sD,4FC5GG,MAAMC,EAAyD,CACpE,yBAA0B,yBAC1B,kCAAmC,yBACnC,8BAA+B,qBAC/B,gCAAiC,uBACjC,gCAAiC,uBACjC,gCAAiC,yB,0FCU5B,MAAMC,EAAwD,CACnE,kBAAmB,2BACnB,gCAAiC,iCACjC,qCACE,mDACF,uBAAwB,uBACxB,uBAAwB,uBACxB,oBAAqB,oBACrB,yBAA0B,yBAC1B,yBAA0B,yBAC1B,sBAAuB,sBACvB,wBAAyB,wBACzB,wBAAyB,wBACzB,qBAAsB,qBACtB,mCAAoC,qCACpC,yBAA0B,2BAC1B,wBAAyB,0BACzB,yBAA0B,2BAC1B,uCAAwC,2C,4FChDnC,MAAMC,EAA4D,CACvE,0CAA2C,2CAC3C,2CAA4C,4CAC5C,+CACE,kD,4FCyCG,MAAMC,EAAgE,CAC3E,uBAAwB,wBACxB,uBAAwB,wBACxB,4BAA6B,6BAC7B,qBAAsB,sBACtB,sBAAuB,uBACvB,+BAAgC,gCAChC,6BAA8B,8BAC9B,0BAA2B,2BAC3B,yBAA0B,0BAC1B,wCAAyC,yCACzC,kCAAmC,mCACnC,+BAAgC,gCAChC,mCAAoC,oCACpC,yCAA0C,0CAC1C,uBAAwB,wBACxB,wBAAyB,yBACzB,uBAAwB,0B,mTCzCnB,SAAS9Y,EAAT,GAGL,IAFA,OAAChC,EAAD,MAASC,EAAT,IAAgBC,GAEhB,GADA,mBAACmB,GACD,uDADgC,GAQhC,GANKrB,GAAWC,GAAUC,IACxBF,EAAS+a,EAAAA,IAKP/a,EAAQ,CACV,IAAKqB,EACH,MAAO,CAAC2Z,YAAahb,GAEvB,MAAO,CAAEib,EAAcC,GAAgBlb,EAAOqT,MAAM,oBAEpD,MAAO,CAAC2H,YAAc,GAA+B,EAA7BjL,SAASkL,EAAc,MAAUC,KAG3D,IAAKjb,IAAUC,EACb,MAAM,IAAIib,MAAM,0BAGlB,MAAMC,GAAiB/G,EAAAA,EAAAA,IAAiBpU,GAClCob,GAAehH,EAAAA,EAAAA,IAAiBnU,GAEtC,GAAImB,EAAoB,CAEtB,MAAM8S,EAAO1G,GAAAA,CAAOvN,GAAKiU,KAAK1G,GAAAA,CAAOxN,IAE/Bqb,EAAsB7N,GAAAA,CAAOxN,GAAOsb,SAASpH,GAGnD,MAAO,CACLlU,OAAOoU,EAAAA,EAAAA,IAAiBiH,GACxBpb,IAAKmb,GAIT,MAAO,CACLpb,MAAOmb,EACPlb,IAAKmb,K,+VCzDT,SAASG,EACPC,GAEA,OAAOja,OAAOC,YACZD,OAAOE,QAAQ+Z,GAAStY,KAAI,IAAkB,IAAhBwD,EAAK5E,GAAW,EAK5C,MAAO,CAAC4E,EAJsB,CAC5BhD,KAAM5B,EAAM4B,KACZgD,IAAAA,QAOR,MAAM+U,EAAsBF,EAAwBG,EAAAA,IAC9CC,EAAmBJ,EAAwBK,EAAAA,IAE1C,SAASC,IACd,MAAO,IAAIF,KAAqBF,GAWlC,SAASK,EAAT,GAAyC,IAAnB,SAACC,GAAkB,EACvC,MAAMC,EAAeH,IACrB,OAAO,QAAC,EAAA7R,SAAD,UAAW+R,EAAS,CAACC,aAAAA,MAFrBF,EAAAA,YAAAA,eAKT,W,gICFA,QAvBA,WAAmE,IAAnD,gBAACG,EAAiBvc,IAAKwc,GAA4B,uDAAJ,GAC7D,MAAMC,GAAW/O,EAAAA,EAAAA,eAGQ1L,IAArBya,EAAS9G,cAAyC3T,IAAhBwa,IACpCC,EAAS9G,QAAU,IAAI+G,EAAAA,IAIzB,MAAM1c,EAAMwc,MAAAA,EAAAA,EAAeC,EAAS9G,QAG9BgH,GAAiBC,EAAAA,EAAAA,cAAY,KAC5BL,GACHvc,EAAI6c,UAEL,CAAC7c,EAAKuc,IAIT,OAFA5O,EAAAA,EAAAA,YAAU,IAAMgP,GAAgB,CAACA,IAE1B3c,I,0OC5BT,MAeA,EAfgB,SACd8c,GAEG,IADHhH,EACG,uDADqC,GAExC,MAAMiH,EAAqC,IAA+B,IAA7B/c,IAAKgd,KAAazZ,GAAW,EACxE,MAAMvD,GAAMiP,EAAAA,EAAAA,GAAO,CAACjP,IAAKgd,KAAalH,IAEtC,OAAO,QAACgH,EAAD,IAAuBvZ,EAAavD,IAAKA,KAKlD,OAFA+c,EAAQE,YAAe,YAAUC,EAAAA,EAAAA,GAAeJ,MAEzCC,I,uDC/BT,IAAII,EAAc,EAAQ,0CAmB1BC,EAAOC,QARP,SAAyBC,EAAYC,GAInC,IAHA,IAAIhT,GAAS,EACTF,EAASiT,EAAWjT,SAEfE,EAAQF,GAAU8S,EAAYI,EAAYD,EAAW/S,GAAQ,IAAM,IAC5E,OAAOA,I,gDChBT,IAAIiT,EAAY,EAAQ,wCA4BxBJ,EAAOC,QAJP,SAAmBjb,GACjB,OAAOob,EAAUpb,EAAOqb,K,gDCzB1B,IAAIC,EAAY,EAAQ,uCAgCxBN,EAAOC,QAJP,SAAmBjb,GACjB,MAAuB,iBAATA,GAAqBA,GAASsb,EAAUtb,K,sCCLxDgb,EAAOC,QAJP,SAAejb,GACb,OAAgB,MAATA,I,2CCrBT,IAAIub,EAAW,EAAQ,uCAoBnBhb,EAnBW,EAAQ,sCAmBZib,EAAS,SAASC,EAAQC,GACnC,OAAiB,MAAVD,EAAiB,GAAKF,EAASE,EAAQC,MAGhDV,EAAOC,QAAU1a,G,gDCxBjB,IAAIob,EAAe,EAAQ,2CACvBC,EAAY,EAAQ,wCACpBC,EAAkB,EAAQ,8CAC1BC,EAAgB,EAAQ,4CACxBC,EAAW,EAAQ,sCAGnBC,EAAc,OAmClBhB,EAAOC,QAdP,SAAmBgB,EAAQC,EAAOC,GAEhC,IADAF,EAASF,EAASE,MACHE,QAAmBvc,IAAVsc,GACtB,OAAOD,EAAO9M,QAAQ6M,EAAa,IAErC,IAAKC,KAAYC,EAAQP,EAAaO,IACpC,OAAOD,EAET,IAAIf,EAAaY,EAAcG,GAC3B/d,EAAQ2d,EAAgBX,EAAYY,EAAcI,IAEtD,OAAON,EAAUV,EAAYhd,GAAOke,KAAK","sources":["webpack:///./app/actionCreators/events.tsx","webpack:///./app/actions/organizationActions.tsx","webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/components/modals/widgetViewerModal/widgetViewerTableCell.tsx","webpack:///./app/components/modals/widgetViewerModal.tsx","webpack:///./app/components/pagination.tsx","webpack:///./app/stores/organizationStore.tsx","webpack:///./app/utils/analytics/coreuiAnalyticsEvents.tsx","webpack:///./app/utils/analytics/dashboardsAnalyticsEvents.tsx","webpack:///./app/utils/analytics/discoverAnalyticsEvents.tsx","webpack:///./app/utils/analytics/growthAnalyticsEvents.tsx","webpack:///./app/utils/analytics/issueAnalyticsEvents.tsx","webpack:///./app/utils/analytics/performanceAnalyticsEvents.tsx","webpack:///./app/utils/analytics/samplingAnalyticsEvents.tsx","webpack:///./app/utils/analytics/searchAnalyticsEvents.tsx","webpack:///./app/utils/analytics/settingsAnalyticsEvents.tsx","webpack:///./app/utils/analytics/workflowAnalyticsEvents.tsx","webpack:///./app/utils/getPeriod.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/useApi.tsx","webpack:///./app/utils/withApi.tsx","webpack:///../node_modules/lodash/_charsStartIndex.js","webpack:///../node_modules/lodash/cloneDeep.js","webpack:///../node_modules/lodash/isInteger.js","webpack:///../node_modules/lodash/isNil.js","webpack:///../node_modules/lodash/pick.js","webpack:///../node_modules/lodash/trimStart.js"],"sourcesContent":["import {LocationDescriptor} from 'history';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'sentry/api';\nimport {canIncludePreviousPeriod} from 'sentry/components/charts/utils';\nimport {\n  DateString,\n  EventsStats,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\ntype Options = {\n  organization: OrganizationSummary;\n  partial: boolean;\n  comparisonDelta?: number;\n  end?: DateString;\n  environment?: Readonly<string[]>;\n  excludeOther?: boolean;\n  field?: string[];\n  generatePathname?: (org: OrganizationSummary) => string;\n  includePrevious?: boolean;\n  interval?: string;\n  limit?: number;\n  orderby?: string;\n  period?: string | null;\n  project?: Readonly<number[]>;\n  query?: string;\n  queryBatching?: QueryBatching;\n  queryExtras?: Record<string, string>;\n  referrer?: string;\n  start?: DateString;\n  team?: Readonly<string | string[]>;\n  topEvents?: number;\n  userModified?: string;\n  withoutZerofill?: boolean;\n  yAxis?: string | string[];\n};\n\n/**\n * Make requests to `events-stats` endpoint\n *\n * @param {Object} api API client instance\n * @param {Object} options Request parameters\n * @param {Object} options.organization Organization object\n * @param {Number[]} options.project List of project ids\n * @param {String[]} options.environment List of environments to query for\n * @param {Boolean} options.excludeOther Exclude the \"Other\" series when making a topEvents query\n * @param {String[]} options.team List of teams to query for\n * @param {String} options.period Time period to query for, in the format: <integer><units> where units are \"d\" or \"h\"\n * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are \"d\", \"h\", \"m\", \"s\"\n * @param {Number} options.comparisonDelta Comparison delta for change alert event stats to include comparison stats\n * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?\n * @param {Number} options.limit The number of rows to return\n * @param {String} options.query Search query\n * @param {QueryBatching} options.queryBatching A container for batching functions from a provider\n * @param {Record<string, string>} options.queryExtras A list of extra query parameters\n * @param {(org: OrganizationSummary) => string} options.generatePathname A function that returns an override for the pathname\n */\nexport const doEventsRequest = (\n  api: Client,\n  {\n    organization,\n    project,\n    environment,\n    team,\n    period,\n    start,\n    end,\n    interval,\n    comparisonDelta,\n    includePrevious,\n    query,\n    yAxis,\n    field,\n    topEvents,\n    orderby,\n    partial,\n    withoutZerofill,\n    referrer,\n    queryBatching,\n    generatePathname,\n    queryExtras,\n    excludeOther,\n    userModified,\n  }: Options\n): Promise<EventsStats | MultiSeriesEventsStats> => {\n  const pathname =\n    generatePathname?.(organization) ??\n    `/organizations/${organization.slug}/events-stats/`;\n\n  const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      interval,\n      comparisonDelta,\n      project,\n      environment,\n      team,\n      query,\n      yAxis,\n      field,\n      topEvents,\n      orderby,\n      partial: partial ? '1' : undefined,\n      withoutZerofill: withoutZerofill ? '1' : undefined,\n      referrer: referrer ? referrer : 'api.organization-event-stats',\n      excludeOther: excludeOther ? '1' : undefined,\n      user_modified: pathname.includes('events-stats') ? userModified : undefined,\n    }).filter(([, value]) => typeof value !== 'undefined')\n  );\n\n  // Doubling period for absolute dates is not accurate unless starting and\n  // ending times are the same (at least for daily intervals). This is\n  // the tradeoff for now.\n  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});\n\n  const queryObject = {\n    query: {\n      ...urlQuery,\n      ...periodObj,\n      ...queryExtras,\n    },\n  };\n\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, pathname, queryObject);\n  }\n\n  return api.requestPromise(pathname, queryObject);\n};\n\nexport type EventQuery = {\n  field: string[];\n  query: string;\n  environment?: string[];\n  equation?: string[];\n  noPagination?: boolean;\n  per_page?: number;\n  project?: string | string[];\n  referrer?: string;\n  sort?: string | string[];\n  team?: string | string[];\n};\n\nexport type TagSegment = {\n  count: number;\n  name: string;\n  url: LocationDescriptor;\n  value: string;\n  isOther?: boolean;\n  key?: string;\n};\n\nexport type Tag = {\n  key: string;\n  topValues: Array<TagSegment>;\n};\n\n/**\n * Fetches tag facets for a query\n */\nexport function fetchTagFacets(\n  api: Client,\n  orgSlug: string,\n  query: EventQuery\n): Promise<Tag[]> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {\n    query: queryOption,\n  });\n}\n\n/**\n * Fetches total count of events for a given query\n */\nexport function fetchTotalCount(\n  api: Client,\n  orgSlug: String,\n  query: EventQuery & LocationQuery\n): Promise<number> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  type Response = {\n    count: number;\n  };\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {\n      query: queryOption,\n    })\n    .then((res: Response) => res.count);\n}\n","import {createActions} from 'reflux';\n\nconst OrganizationActions = createActions(['reset', 'fetchOrgError', 'update']);\n\nexport default OrganizationActions;\n","import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type AreaChartSeries = Series & Omit<LineSeriesOption, 'data' | 'name'>;\n\nexport interface AreaChartProps extends Omit<ChartProps, 'series'> {\n  series: AreaChartSeries[];\n  stacked?: boolean;\n}\n\nexport function AreaChart({series, stacked, colors, ...props}: AreaChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      data-test-id=\"area-chart\"\n      colors={colors}\n      series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n        AreaSeries({\n          stack: stacked ? 'area' : undefined,\n          name: seriesName,\n          data: data.map(({name, value}) => [name, value]),\n          lineStyle: {\n            color: colors?.[i],\n            opacity: 1,\n            width: 0.4,\n          },\n          areaStyle: {\n            color: colors?.[i],\n            opacity: 1.0,\n          },\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n          ...otherSeriesProps,\n        })\n      )}\n    />\n  );\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\n\nexport default function AreaSeries(props: LineSeriesOption = {}): LineSeriesOption {\n  return LineSeries({\n    ...props,\n  });\n}\n","import styled from '@emotion/styled';\n\nimport LoadingMask from 'sentry/components/loadingMask';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  height?: string;\n}\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport omit from 'lodash/omit';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n};\n\nfunction SortLink({align, title, canSort, generateSortLink, onClick, direction}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  return (\n    <StyledLink align={align} to={target} onClick={onClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  const forwardProps = omit(props, ['align']);\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import styled from '@emotion/styled';\n\nexport interface LoadingMaskProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst LoadingMask = styled('div')<LoadingMaskProps>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\nimport trimStart from 'lodash/trimStart';\n\nimport {GridColumnOrder} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {\n  getIssueFieldRenderer,\n  getSortField,\n} from 'sentry/utils/dashboards/issueFieldRenderers';\nimport {TableDataRow, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  fieldAlignment,\n  getAggregateAlias,\n  getEquationAliasIndex,\n  isAggregateField,\n  isEquationAlias,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {\n  eventDetailsRouteWithEventView,\n  generateEventSlug,\n} from 'sentry/utils/discover/urls';\nimport {DisplayType, Widget, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {eventViewFromWidget} from 'sentry/views/dashboardsV2/utils';\nimport {ISSUE_FIELDS} from 'sentry/views/dashboardsV2/widgetBuilder/issueWidget/fields';\nimport TopResultsIndicator from 'sentry/views/eventsV2/table/topResultsIndicator';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\n\nimport {WidgetViewerQueryField} from './utils';\n// Dashboards only supports top 5 for now\nconst DEFAULT_NUM_TOP_EVENTS = 5;\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  selection: PageFilters;\n  widget: Widget;\n  isFirstPage?: boolean;\n  onHeaderClick?: () => void;\n  tableData?: TableDataWithTitle;\n};\n\nexport const renderIssueGridHeaderCell =\n  ({location, widget, tableData, organization, onHeaderClick}: Props) =>\n  (column: TableColumn<keyof TableDataRow>, _columnIndex: number): React.ReactNode => {\n    const tableMeta = tableData?.meta;\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const sortField = getSortField(String(column.key));\n\n    return (\n      <SortLink\n        align={align}\n        title={<StyledTooltip title={column.name}>{column.name}</StyledTooltip>}\n        direction={widget.queries[0].orderby === sortField ? 'desc' : undefined}\n        canSort={!!sortField}\n        generateSortLink={() => ({\n          ...location,\n          query: {\n            ...location.query,\n            [WidgetViewerQueryField.SORT]: sortField,\n            [WidgetViewerQueryField.PAGE]: undefined,\n            [WidgetViewerQueryField.CURSOR]: undefined,\n          },\n        })}\n        onClick={() => {\n          onHeaderClick?.();\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.sort', {\n            organization,\n            widget_type: WidgetType.ISSUE,\n            display_type: widget.displayType,\n            column: column.name,\n            order: 'desc',\n          });\n        }}\n      />\n    );\n  };\n\nexport const renderDiscoverGridHeaderCell =\n  ({location, selection, widget, tableData, organization, onHeaderClick}: Props) =>\n  (column: TableColumn<keyof TableDataRow>, _columnIndex: number): React.ReactNode => {\n    const {orderby} = widget.queries[0];\n    // Need to convert orderby to aggregate alias because eventView still uses aggregate alias format\n    const aggregateAliasOrderBy = `${\n      orderby.startsWith('-') ? '-' : ''\n    }${getAggregateAlias(trimStart(orderby, '-'))}`;\n    const eventView = eventViewFromWidget(\n      widget.title,\n      {...widget.queries[0], orderby: aggregateAliasOrderBy},\n      selection,\n      widget.displayType\n    );\n    const tableMeta = tableData?.meta;\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const field = {field: String(column.key), width: column.width};\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, tableMeta, undefined, true);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {\n          ...location.query,\n          [WidgetViewerQueryField.SORT]: queryStringObject.sort,\n          [WidgetViewerQueryField.PAGE]: undefined,\n          [WidgetViewerQueryField.CURSOR]: undefined,\n        },\n      };\n    }\n\n    const currentSort = eventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n    const titleText = isEquationAlias(column.name)\n      ? eventView.getEquations()[getEquationAliasIndex(column.name)]\n      : column.name;\n\n    return (\n      <SortLink\n        align={align}\n        title={<StyledTooltip title={titleText}>{titleText}</StyledTooltip>}\n        direction={currentSort ? currentSort.kind : undefined}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => {\n          onHeaderClick?.();\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.sort', {\n            organization,\n            widget_type: WidgetType.DISCOVER,\n            display_type: widget.displayType,\n            column: column.name,\n            order: currentSort?.kind === 'desc' ? 'asc' : 'desc',\n          });\n        }}\n      />\n    );\n  };\n\nexport const renderGridBodyCell =\n  ({location, organization, widget, tableData, isFirstPage}: Props) =>\n  (\n    column: GridColumnOrder,\n    dataRow: Record<string, any>,\n    rowIndex: number,\n    columnIndex: number\n  ): React.ReactNode => {\n    const columnKey = String(column.key);\n    const isTopEvents = widget.displayType === DisplayType.TOP_N;\n    let cell: React.ReactNode;\n    const isAlias =\n      !organization.features.includes('discover-frontend-use-events-endpoint') &&\n      widget.widgetType !== WidgetType.RELEASE;\n    switch (widget.widgetType) {\n      case WidgetType.ISSUE:\n        cell = (\n          getIssueFieldRenderer(columnKey) ?? getFieldRenderer(columnKey, ISSUE_FIELDS)\n        )(dataRow, {organization, location});\n        break;\n      case WidgetType.DISCOVER:\n      default:\n        if (!tableData || !tableData.meta) {\n          return dataRow[column.key];\n        }\n        cell = getFieldRenderer(\n          columnKey,\n          tableData.meta,\n          isAlias\n        )(dataRow, {\n          organization,\n          location,\n        });\n\n        const fieldName = getAggregateAlias(columnKey);\n        const value = dataRow[fieldName];\n        if (tableData.meta[fieldName] === 'integer' && defined(value) && value > 999) {\n          return (\n            <Tooltip\n              title={value.toLocaleString()}\n              containerDisplayMode=\"block\"\n              position=\"right\"\n            >\n              {cell}\n            </Tooltip>\n          );\n        }\n        break;\n    }\n    const topResultsCount = tableData\n      ? Math.min(tableData?.data.length, DEFAULT_NUM_TOP_EVENTS)\n      : DEFAULT_NUM_TOP_EVENTS;\n    return (\n      <Fragment>\n        {isTopEvents &&\n        isFirstPage &&\n        rowIndex < DEFAULT_NUM_TOP_EVENTS &&\n        columnIndex === 0 ? (\n          <TopResultsIndicator count={topResultsCount} index={rowIndex} />\n        ) : null}\n        {cell}\n      </Fragment>\n    );\n  };\n\nexport const renderPrependColumns =\n  ({location, organization, tableData, eventView}: Props & {eventView: EventView}) =>\n  (isHeader: boolean, dataRow?: any, rowIndex?: number): React.ReactNode[] => {\n    if (isHeader) {\n      return [\n        <PrependHeader key=\"header-event-id\">\n          <SortLink\n            align=\"left\"\n            title={t('event id')}\n            direction={undefined}\n            canSort={false}\n            generateSortLink={() => undefined}\n          />\n        </PrependHeader>,\n      ];\n    }\n    let value = dataRow.id;\n\n    if (tableData?.meta) {\n      const fieldRenderer = getFieldRenderer('id', tableData?.meta);\n      value = fieldRenderer(dataRow, {organization, location});\n    }\n\n    const eventSlug = generateEventSlug(dataRow);\n\n    const target = eventDetailsRouteWithEventView({\n      orgSlug: organization.slug,\n      eventSlug,\n      eventView,\n    });\n\n    return [\n      <Tooltip key={`eventlink${rowIndex}`} title={t('View Event')}>\n        <Link data-test-id=\"view-event\" to={target}>\n          {value}\n        </Link>\n      </Tooltip>,\n    ];\n  };\n\nexport const renderReleaseGridHeaderCell =\n  ({location, widget, tableData, organization, onHeaderClick}: Props) =>\n  (column: TableColumn<keyof TableDataRow>, _columnIndex: number): React.ReactNode => {\n    const tableMeta = tableData?.meta;\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const widgetOrderBy = widget.queries[0].orderby;\n    const sort: Sort = {\n      kind: widgetOrderBy.startsWith('-') ? 'desc' : 'asc',\n      field: widgetOrderBy.startsWith('-') ? widgetOrderBy.slice(1) : widgetOrderBy,\n    };\n    const canSort = isAggregateField(column.name);\n    const titleText = column.name;\n\n    function generateSortLink(): LocationDescriptorObject {\n      const columnSort =\n        column.name === sort.field\n          ? {...sort, kind: sort.kind === 'desc' ? 'asc' : 'desc'}\n          : {kind: 'desc', field: column.name};\n\n      return {\n        ...location,\n        query: {\n          ...location.query,\n          [WidgetViewerQueryField.SORT]:\n            columnSort.kind === 'desc' ? `-${columnSort.field}` : columnSort.field,\n          [WidgetViewerQueryField.PAGE]: undefined,\n          [WidgetViewerQueryField.CURSOR]: undefined,\n        },\n      };\n    }\n\n    return (\n      <SortLink\n        align={align}\n        title={<StyledTooltip title={titleText}>{titleText}</StyledTooltip>}\n        direction={sort.field === column.name ? sort.kind : undefined}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => {\n          onHeaderClick?.();\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.sort', {\n            organization,\n            widget_type: WidgetType.RELEASE,\n            display_type: widget.displayType,\n            column: column.name,\n            order: sort?.kind === 'desc' ? 'asc' : 'desc',\n          });\n        }}\n      />\n    );\n  };\n\nconst StyledTooltip = styled(Tooltip)`\n  display: initial;\n`;\n\nconst PrependHeader = styled('span')`\n  color: ${p => p.theme.subText};\n`;\n","import {Fragment, memo, useEffect, useMemo, useRef, useState} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {components} from 'react-select';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {truncate} from '@sentry/utils';\nimport type {DataZoomComponentOption} from 'echarts';\nimport {Location} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport trimStart from 'lodash/trimStart';\nimport moment from 'moment';\n\nimport {fetchTotalCount} from 'sentry/actionCreators/events';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Option from 'sentry/components/forms/selectOption';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport Pagination from 'sentry/components/pagination';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {parseSearch} from 'sentry/components/searchSyntax/parser';\nimport HighlightQuery from 'sentry/components/searchSyntax/renderer';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, SelectValue} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableDataRow, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  isAggregateField,\n  isEquation,\n  isEquationAlias,\n} from 'sentry/utils/discover/fields';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport {decodeInteger, decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport {DisplayType, Widget, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {\n  eventViewFromWidget,\n  getFieldsFromEquations,\n  getNumEquations,\n  getWidgetDiscoverUrl,\n  getWidgetIssueUrl,\n  getWidgetReleasesUrl,\n} from 'sentry/views/dashboardsV2/utils';\nimport WidgetCardChart, {\n  AugmentedEChartDataZoomHandler,\n  SLIDER_HEIGHT,\n} from 'sentry/views/dashboardsV2/widgetCard/chart';\nimport IssueWidgetQueries from 'sentry/views/dashboardsV2/widgetCard/issueWidgetQueries';\nimport ReleaseWidgetQueries from 'sentry/views/dashboardsV2/widgetCard/releaseWidgetQueries';\nimport {WidgetCardChartContainer} from 'sentry/views/dashboardsV2/widgetCard/widgetCardChartContainer';\nimport WidgetQueries from 'sentry/views/dashboardsV2/widgetCard/widgetQueries';\nimport {decodeColumnOrder} from 'sentry/views/eventsV2/utils';\n\nimport {WidgetViewerQueryField} from './widgetViewerModal/utils';\nimport {\n  renderDiscoverGridHeaderCell,\n  renderGridBodyCell,\n  renderIssueGridHeaderCell,\n  renderReleaseGridHeaderCell,\n} from './widgetViewerModal/widgetViewerTableCell';\n\nexport interface WidgetViewerModalOptions {\n  organization: Organization;\n  widget: Widget;\n  issuesData?: TableDataRow[];\n  onEdit?: () => void;\n  pageLinks?: string;\n  seriesData?: Series[];\n  tableData?: TableDataWithTitle[];\n  totalIssuesCount?: string;\n}\n\ninterface Props extends ModalRenderProps, WithRouterProps, WidgetViewerModalOptions {\n  organization: Organization;\n  selection: PageFilters;\n}\n\nconst FULL_TABLE_ITEM_LIMIT = 20;\nconst HALF_TABLE_ITEM_LIMIT = 10;\nconst GEO_COUNTRY_CODE = 'geo.country_code';\nconst HALF_CONTAINER_HEIGHT = 300;\nconst EMPTY_QUERY_NAME = '(Empty Query Condition)';\n\nconst shouldWidgetCardChartMemo = (prevProps, props) => {\n  const selectionMatches = props.selection === prevProps.selection;\n  const sortMatches =\n    props.location.query[WidgetViewerQueryField.SORT] ===\n    prevProps.location.query[WidgetViewerQueryField.SORT];\n  const chartZoomOptionsMatches = isEqual(\n    props.chartZoomOptions,\n    prevProps.chartZoomOptions\n  );\n  const isNotTopNWidget =\n    props.widget.displayType !== DisplayType.TOP_N && !defined(props.widget.limit);\n  return selectionMatches && chartZoomOptionsMatches && (sortMatches || isNotTopNWidget);\n};\n\n// WidgetCardChartContainer and WidgetCardChart rerenders if selection was changed.\n// This is required because we want to prevent ECharts interactions from causing\n// unnecessary rerenders which can break legends and zoom functionality.\nconst MemoizedWidgetCardChartContainer = memo(\n  WidgetCardChartContainer,\n  shouldWidgetCardChartMemo\n);\nconst MemoizedWidgetCardChart = memo(WidgetCardChart, shouldWidgetCardChartMemo);\n\nasync function fetchDiscoverTotal(\n  api: Client,\n  organization: Organization,\n  location: Location,\n  eventView: EventView\n): Promise<string | undefined> {\n  if (!eventView.isValid()) {\n    return undefined;\n  }\n\n  try {\n    const total = await fetchTotalCount(\n      api,\n      organization.slug,\n      eventView.getEventsAPIPayload(location)\n    );\n    return total.toLocaleString();\n  } catch (err) {\n    Sentry.captureException(err);\n    return undefined;\n  }\n}\n\nfunction WidgetViewerModal(props: Props) {\n  const {\n    organization,\n    widget,\n    selection,\n    location,\n    Footer,\n    Body,\n    Header,\n    closeModal,\n    onEdit,\n    router,\n    routes,\n    params,\n    seriesData,\n    tableData,\n    issuesData,\n    totalIssuesCount,\n    pageLinks: defaultPageLinks,\n  } = props;\n  const shouldShowSlider = organization.features.includes('widget-viewer-modal-minimap');\n  // Get widget zoom from location\n  // We use the start and end query params for just the initial state\n  const start = decodeScalar(location.query[WidgetViewerQueryField.START]);\n  const end = decodeScalar(location.query[WidgetViewerQueryField.END]);\n  const isTableWidget = widget.displayType === DisplayType.TABLE;\n  const locationPageFilter = useMemo(\n    () =>\n      start && end\n        ? {\n            ...selection,\n            datetime: {start, end, period: null, utc: null},\n          }\n        : selection,\n    [start, end, selection]\n  );\n\n  const [chartUnmodified, setChartUnmodified] = useState<boolean>(true);\n\n  const [chartZoomOptions, setChartZoomOptions] = useState<DataZoomComponentOption>({\n    start: 0,\n    end: 100,\n  });\n\n  // We wrap the modalChartSelection in a useRef because we do not want to recalculate this value\n  // (which would cause an unnecessary rerender on calculation) except for the initial load.\n  // We use this for when a user visit a widget viewer url directly.\n  const [modalTableSelection, setModalTableSelection] =\n    useState<PageFilters>(locationPageFilter);\n  const modalChartSelection = useRef(modalTableSelection);\n\n  // Detect when a user clicks back and set the PageFilter state to match the location\n  // We need to use useEffect to prevent infinite looping rerenders due to the setModalTableSelection call\n  useEffect(() => {\n    if (location.action === 'POP') {\n      setModalTableSelection(locationPageFilter);\n      if (start && end) {\n        setChartZoomOptions({\n          startValue: moment.utc(start).unix() * 1000,\n          endValue: moment.utc(end).unix() * 1000,\n        });\n      } else {\n        setChartZoomOptions({start: 0, end: 100});\n      }\n    }\n  }, [end, location, locationPageFilter, start]);\n\n  // Get legends toggle settings from location\n  // We use the legend query params for just the initial state\n  const [disabledLegends, setDisabledLegends] = useState<{[key: string]: boolean}>(\n    decodeList(location.query[WidgetViewerQueryField.LEGEND]).reduce((acc, legend) => {\n      acc[legend] = false;\n      return acc;\n    }, {})\n  );\n  const [totalResults, setTotalResults] = useState<string | undefined>();\n\n  // Get query selection settings from location\n  const selectedQueryIndex =\n    decodeInteger(location.query[WidgetViewerQueryField.QUERY]) ?? 0;\n\n  // Get pagination settings from location\n  const page = decodeInteger(location.query[WidgetViewerQueryField.PAGE]) ?? 0;\n  const cursor = decodeScalar(location.query[WidgetViewerQueryField.CURSOR]);\n\n  // Get table column widths from location\n  const widths = decodeList(location.query[WidgetViewerQueryField.WIDTH]);\n\n  // Get table sort settings from location\n  const sort = decodeScalar(location.query[WidgetViewerQueryField.SORT]);\n  const sortedQueries = cloneDeep(\n    sort ? widget.queries.map(query => ({...query, orderby: sort})) : widget.queries\n  );\n\n  // Top N widget charts (including widgets with limits) results rely on the sorting of the query\n  // Set the orderby of the widget chart to match the location query params\n  const primaryWidget =\n    widget.displayType === DisplayType.TOP_N || widget.limit !== undefined\n      ? {...widget, queries: sortedQueries}\n      : widget;\n  const api = useApi();\n\n  // Create Table widget\n  const tableWidget = {\n    ...cloneDeep({...widget, queries: [sortedQueries[selectedQueryIndex]]}),\n    displayType: DisplayType.TABLE,\n  };\n  const {aggregates, columns} = tableWidget.queries[0];\n  const {orderby} = widget.queries[0];\n  const order = orderby.startsWith('-');\n  const rawOrderby = trimStart(orderby, '-');\n\n  const fields = defined(tableWidget.queries[0].fields)\n    ? tableWidget.queries[0].fields\n    : [...columns, ...aggregates];\n\n  // Some Discover Widgets (Line, Area, Bar) allow the user to specify an orderby\n  // that is not explicitly selected as an aggregate or column. We need to explictly\n  // include the orderby in the table widget aggregates and columns otherwise\n  // eventsv2 will complain about sorting on an unselected field.\n  if (\n    widget.widgetType === WidgetType.DISCOVER &&\n    orderby &&\n    !isEquationAlias(rawOrderby) &&\n    !fields.includes(rawOrderby)\n  ) {\n    fields.push(rawOrderby);\n    [tableWidget, primaryWidget].forEach(aggregatesAndColumns => {\n      if (isAggregateField(rawOrderby) || isEquation(rawOrderby)) {\n        aggregatesAndColumns.queries.forEach(query => {\n          if (!query.aggregates.includes(rawOrderby)) {\n            query.aggregates.push(rawOrderby);\n          }\n        });\n      } else {\n        aggregatesAndColumns.queries.forEach(query => {\n          if (!query.columns.includes(rawOrderby)) {\n            query.columns.push(rawOrderby);\n          }\n        });\n      }\n    });\n  }\n\n  // Need to set the orderby of the eventsv2 query to equation[index] format\n  // since eventsv2 does not accept the raw equation as a valid sort payload\n  if (isEquation(rawOrderby) && tableWidget.queries[0].orderby === orderby) {\n    tableWidget.queries[0].orderby = `${order ? '-' : ''}equation[${\n      getNumEquations(fields) - 1\n    }]`;\n  }\n\n  // World Map view should always have geo.country in the table chart\n  if (\n    widget.displayType === DisplayType.WORLD_MAP &&\n    !columns.includes(GEO_COUNTRY_CODE)\n  ) {\n    fields.unshift(GEO_COUNTRY_CODE);\n    columns.unshift(GEO_COUNTRY_CODE);\n  }\n  // Default table columns for visualizations that don't have a column setting\n  const shouldReplaceTableColumns =\n    [\n      DisplayType.AREA,\n      DisplayType.LINE,\n      DisplayType.BIG_NUMBER,\n      DisplayType.BAR,\n    ].includes(widget.displayType) &&\n    widget.widgetType &&\n    [WidgetType.DISCOVER, WidgetType.RELEASE].includes(widget.widgetType) &&\n    !defined(widget.limit);\n\n  // Updates fields by adding any individual terms from equation fields as a column\n  if (!isTableWidget) {\n    const equationFields = getFieldsFromEquations(fields);\n    equationFields.forEach(term => {\n      if (isAggregateField(term) && !aggregates.includes(term)) {\n        aggregates.unshift(term);\n      }\n      if (!isAggregateField(term) && !columns.includes(term)) {\n        columns.unshift(term);\n      }\n    });\n  }\n\n  // Add any group by columns into table fields if missing\n  columns.forEach(column => {\n    if (!fields.includes(column)) {\n      fields.unshift(column);\n    }\n  });\n\n  if (shouldReplaceTableColumns) {\n    switch (widget.widgetType) {\n      case WidgetType.DISCOVER:\n        if (fields.length === 1) {\n          tableWidget.queries[0].orderby =\n            tableWidget.queries[0].orderby || `-${fields[0]}`;\n        }\n        fields.unshift('title');\n        columns.unshift('title');\n        break;\n      case WidgetType.RELEASE:\n        fields.unshift('release');\n        columns.unshift('release');\n        break;\n      default:\n        break;\n    }\n  }\n\n  const eventView = eventViewFromWidget(\n    tableWidget.title,\n    tableWidget.queries[0],\n    modalTableSelection,\n    tableWidget.displayType\n  );\n\n  let columnOrder = decodeColumnOrder(\n    fields.map(field => ({\n      field,\n    })),\n    organization.features.includes('discover-frontend-use-events-endpoint')\n  );\n  const columnSortBy = eventView.getSorts();\n  columnOrder = columnOrder.map((column, index) => ({\n    ...column,\n    width: parseInt(widths[index], 10) || -1,\n  }));\n\n  const queryOptions = sortedQueries.map(({name, conditions}, index) => {\n    // Creates the highlighted query elements to be used in the Query Select\n    const parsedQuery = !!!name && !!conditions ? parseSearch(conditions) : null;\n    const getHighlightedQuery = (\n      highlightedContainerProps: React.ComponentProps<typeof HighlightContainer>\n    ) => {\n      return parsedQuery !== null ? (\n        <HighlightContainer {...highlightedContainerProps}>\n          <HighlightQuery parsedQuery={parsedQuery} />\n        </HighlightContainer>\n      ) : undefined;\n    };\n\n    return {\n      label: truncate(name || conditions, 120),\n      value: index,\n      getHighlightedQuery,\n    };\n  });\n\n  const onResizeColumn = (columnIndex: number, nextColumn: GridColumnOrder) => {\n    const newWidth = nextColumn.width ? Number(nextColumn.width) : COL_WIDTH_UNDEFINED;\n    const newWidths: number[] = new Array(Math.max(columnIndex, widths.length)).fill(\n      COL_WIDTH_UNDEFINED\n    );\n    widths.forEach((width, index) => (newWidths[index] = parseInt(width, 10)));\n    newWidths[columnIndex] = newWidth;\n    router.replace({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        [WidgetViewerQueryField.WIDTH]: newWidths,\n      },\n    });\n  };\n\n  // Get discover result totals\n  useEffect(() => {\n    const getDiscoverTotals = async () => {\n      if (widget.widgetType === WidgetType.DISCOVER) {\n        setTotalResults(await fetchDiscoverTotal(api, organization, location, eventView));\n      }\n    };\n    getDiscoverTotals();\n    // Disabling this for now since this effect should only run on initial load and query index changes\n    // Including all exhaustive deps would cause fetchDiscoverTotal on nearly every update\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedQueryIndex]);\n\n  function onLegendSelectChanged({selected}: {selected: Record<string, boolean>}) {\n    setDisabledLegends(selected);\n    router.replace({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        [WidgetViewerQueryField.LEGEND]: Object.keys(selected).filter(\n          key => !selected[key]\n        ),\n      },\n    });\n    trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.toggle_legend', {\n      organization,\n      widget_type: widget.widgetType ?? WidgetType.DISCOVER,\n      display_type: widget.displayType,\n    });\n  }\n\n  const renderDiscoverTable: WidgetQueries['props']['children'] = ({\n    tableResults,\n    loading,\n    pageLinks,\n  }) => {\n    const links = parseLinkHeader(pageLinks ?? null);\n    const isFirstPage = links.previous?.results === false;\n    return (\n      <Fragment>\n        <GridEditable\n          isLoading={loading}\n          data={tableResults?.[0]?.data ?? []}\n          columnOrder={columnOrder}\n          columnSortBy={columnSortBy}\n          grid={{\n            renderHeadCell: renderDiscoverGridHeaderCell({\n              ...props,\n              widget: tableWidget,\n              tableData: tableResults?.[0],\n              onHeaderClick: () => {\n                if (\n                  [DisplayType.TOP_N, DisplayType.TABLE].includes(widget.displayType) ||\n                  defined(widget.limit)\n                ) {\n                  setChartUnmodified(false);\n                }\n              },\n            }) as (column: GridColumnOrder, columnIndex: number) => React.ReactNode,\n            renderBodyCell: renderGridBodyCell({\n              ...props,\n              tableData: tableResults?.[0],\n              isFirstPage,\n            }),\n            onResizeColumn,\n          }}\n          location={location}\n        />\n        {(links?.previous?.results || links?.next?.results) && (\n          <Pagination\n            pageLinks={pageLinks}\n            onCursor={newCursor => {\n              router.replace({\n                pathname: location.pathname,\n                query: {\n                  ...location.query,\n                  [WidgetViewerQueryField.CURSOR]: newCursor,\n                },\n              });\n\n              if (widget.displayType === DisplayType.TABLE) {\n                setChartUnmodified(false);\n              }\n\n              trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.paginate', {\n                organization,\n                widget_type: WidgetType.DISCOVER,\n                display_type: widget.displayType,\n              });\n            }}\n          />\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderIssuesTable: IssueWidgetQueries['props']['children'] = ({\n    transformedResults,\n    loading,\n    pageLinks,\n    totalCount,\n  }) => {\n    if (totalResults === undefined && totalCount) {\n      setTotalResults(totalCount);\n    }\n    const links = parseLinkHeader(pageLinks ?? null);\n    return (\n      <Fragment>\n        <GridEditable\n          isLoading={loading}\n          data={transformedResults}\n          columnOrder={columnOrder}\n          columnSortBy={columnSortBy}\n          grid={{\n            renderHeadCell: renderIssueGridHeaderCell({\n              location,\n              organization,\n              selection,\n              widget: tableWidget,\n              onHeaderClick: () => {\n                setChartUnmodified(false);\n              },\n            }) as (column: GridColumnOrder, columnIndex: number) => React.ReactNode,\n            renderBodyCell: renderGridBodyCell({\n              location,\n              organization,\n              selection,\n              widget: tableWidget,\n            }),\n            onResizeColumn,\n          }}\n          location={location}\n        />\n        {(links?.previous?.results || links?.next?.results) && (\n          <Pagination\n            pageLinks={pageLinks}\n            onCursor={(nextCursor, _path, _query, delta) => {\n              let nextPage = isNaN(page) ? delta : page + delta;\n              let newCursor = nextCursor;\n              // unset cursor and page when we navigate back to the first page\n              // also reset cursor if somehow the previous button is enabled on\n              // first page and user attempts to go backwards\n              if (nextPage <= 0) {\n                newCursor = undefined;\n                nextPage = 0;\n              }\n              router.replace({\n                pathname: location.pathname,\n                query: {\n                  ...location.query,\n                  [WidgetViewerQueryField.CURSOR]: newCursor,\n                  [WidgetViewerQueryField.PAGE]: nextPage,\n                },\n              });\n\n              if (widget.displayType === DisplayType.TABLE) {\n                setChartUnmodified(false);\n              }\n\n              trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.paginate', {\n                organization,\n                widget_type: WidgetType.ISSUE,\n                display_type: widget.displayType,\n              });\n            }}\n          />\n        )}\n      </Fragment>\n    );\n  };\n\n  const renderReleaseTable: ReleaseWidgetQueries['props']['children'] = ({\n    tableResults,\n    loading,\n    pageLinks,\n  }) => {\n    const links = parseLinkHeader(pageLinks ?? null);\n    const isFirstPage = links.previous?.results === false;\n    return (\n      <Fragment>\n        <GridEditable\n          isLoading={loading}\n          data={tableResults?.[0]?.data ?? []}\n          columnOrder={columnOrder}\n          columnSortBy={columnSortBy}\n          grid={{\n            renderHeadCell: renderReleaseGridHeaderCell({\n              ...props,\n              widget: tableWidget,\n              tableData: tableResults?.[0],\n              onHeaderClick: () => {\n                if (\n                  [DisplayType.TOP_N, DisplayType.TABLE].includes(widget.displayType) ||\n                  defined(widget.limit)\n                ) {\n                  setChartUnmodified(false);\n                }\n              },\n            }) as (column: GridColumnOrder, columnIndex: number) => React.ReactNode,\n            renderBodyCell: renderGridBodyCell({\n              ...props,\n              tableData: tableResults?.[0],\n              isFirstPage,\n            }),\n            onResizeColumn,\n          }}\n          location={location}\n        />\n        {!tableWidget.queries[0].orderby.match(/^-?release$/) &&\n          (links?.previous?.results || links?.next?.results) && (\n            <Pagination\n              pageLinks={pageLinks}\n              onCursor={newCursor => {\n                router.replace({\n                  pathname: location.pathname,\n                  query: {\n                    ...location.query,\n                    [WidgetViewerQueryField.CURSOR]: newCursor,\n                  },\n                });\n                trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.paginate', {\n                  organization,\n                  widget_type: WidgetType.RELEASE,\n                  display_type: widget.displayType,\n                });\n              }}\n            />\n          )}\n      </Fragment>\n    );\n  };\n\n  const onZoom: AugmentedEChartDataZoomHandler = (evt, chart) => {\n    // @ts-ignore getModel() is private but we need this to retrieve datetime values of zoomed in region\n    const model = chart.getModel();\n    const {seriesStart, seriesEnd} = evt;\n    let startValue, endValue;\n    startValue = model._payload.batch?.[0].startValue;\n    endValue = model._payload.batch?.[0].endValue;\n    const seriesStartTime = seriesStart ? new Date(seriesStart).getTime() : undefined;\n    const seriesEndTime = seriesEnd ? new Date(seriesEnd).getTime() : undefined;\n    // Slider zoom events don't contain the raw date time value, only the percentage\n    // We use the percentage with the start and end of the series to calculate the adjusted zoom\n    if (startValue === undefined || endValue === undefined) {\n      if (seriesStartTime && seriesEndTime) {\n        const diff = seriesEndTime - seriesStartTime;\n        startValue = diff * model._payload.start * 0.01 + seriesStartTime;\n        endValue = diff * model._payload.end * 0.01 + seriesStartTime;\n      } else {\n        return;\n      }\n    }\n    setChartZoomOptions({startValue, endValue});\n    const newStart = getUtcDateString(moment.utc(startValue));\n    const newEnd = getUtcDateString(moment.utc(endValue));\n    setModalTableSelection({\n      ...modalTableSelection,\n      datetime: {\n        ...modalTableSelection.datetime,\n        start: newStart,\n        end: newEnd,\n        period: null,\n      },\n    });\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        [WidgetViewerQueryField.START]: newStart,\n        [WidgetViewerQueryField.END]: newEnd,\n      },\n    });\n    trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.zoom', {\n      organization,\n      widget_type: widget.widgetType ?? WidgetType.DISCOVER,\n      display_type: widget.displayType,\n    });\n  };\n\n  function renderWidgetViewerTable() {\n    switch (widget.widgetType) {\n      case WidgetType.ISSUE:\n        if (issuesData && chartUnmodified && widget.displayType === DisplayType.TABLE) {\n          return renderIssuesTable({\n            transformedResults: issuesData,\n            loading: false,\n            errorMessage: undefined,\n            pageLinks: defaultPageLinks,\n            totalCount: totalIssuesCount,\n          });\n        }\n        return (\n          <IssueWidgetQueries\n            api={api}\n            organization={organization}\n            widget={tableWidget}\n            selection={modalTableSelection}\n            limit={\n              widget.displayType === DisplayType.TABLE\n                ? FULL_TABLE_ITEM_LIMIT\n                : HALF_TABLE_ITEM_LIMIT\n            }\n            cursor={cursor}\n          >\n            {renderIssuesTable}\n          </IssueWidgetQueries>\n        );\n      case WidgetType.RELEASE:\n        if (tableData && chartUnmodified && widget.displayType === DisplayType.TABLE) {\n          return renderReleaseTable({\n            tableResults: tableData,\n            loading: false,\n            pageLinks: defaultPageLinks,\n          });\n        }\n        return (\n          <ReleaseWidgetQueries\n            api={api}\n            organization={organization}\n            widget={tableWidget}\n            selection={modalTableSelection}\n            limit={\n              widget.displayType === DisplayType.TABLE\n                ? FULL_TABLE_ITEM_LIMIT\n                : HALF_TABLE_ITEM_LIMIT\n            }\n            includeAllArgs\n            cursor={cursor}\n          >\n            {renderReleaseTable}\n          </ReleaseWidgetQueries>\n        );\n      case WidgetType.DISCOVER:\n      default:\n        if (tableData && chartUnmodified && widget.displayType === DisplayType.TABLE) {\n          return renderDiscoverTable({\n            tableResults: tableData,\n            loading: false,\n            pageLinks: defaultPageLinks,\n          });\n        }\n        return (\n          <WidgetQueries\n            api={api}\n            organization={organization}\n            widget={tableWidget}\n            selection={modalTableSelection}\n            limit={\n              widget.displayType === DisplayType.TABLE\n                ? FULL_TABLE_ITEM_LIMIT\n                : HALF_TABLE_ITEM_LIMIT\n            }\n            cursor={cursor}\n          >\n            {renderDiscoverTable}\n          </WidgetQueries>\n        );\n    }\n  }\n\n  function renderWidgetViewer() {\n    return (\n      <Fragment>\n        {widget.displayType !== DisplayType.TABLE && (\n          <Container\n            height={\n              widget.displayType !== DisplayType.BIG_NUMBER\n                ? HALF_CONTAINER_HEIGHT +\n                  (shouldShowSlider &&\n                  [\n                    DisplayType.AREA,\n                    DisplayType.LINE,\n                    DisplayType.BAR,\n                    DisplayType.TOP_N,\n                  ].includes(widget.displayType)\n                    ? SLIDER_HEIGHT\n                    : 0)\n                : null\n            }\n          >\n            {(!!seriesData || !!tableData) && chartUnmodified ? (\n              <MemoizedWidgetCardChart\n                timeseriesResults={seriesData}\n                tableResults={tableData}\n                errorMessage={undefined}\n                loading={false}\n                location={location}\n                widget={widget}\n                selection={selection}\n                router={router}\n                organization={organization}\n                onZoom={onZoom}\n                onLegendSelectChanged={onLegendSelectChanged}\n                legendOptions={{selected: disabledLegends}}\n                expandNumbers\n                showSlider={shouldShowSlider}\n                noPadding\n                chartZoomOptions={chartZoomOptions}\n              />\n            ) : (\n              <MemoizedWidgetCardChartContainer\n                location={location}\n                router={router}\n                routes={routes}\n                params={params}\n                api={api}\n                organization={organization}\n                selection={modalChartSelection.current}\n                // Top N charts rely on the orderby of the table\n                widget={primaryWidget}\n                onZoom={onZoom}\n                onLegendSelectChanged={onLegendSelectChanged}\n                legendOptions={{selected: disabledLegends}}\n                expandNumbers\n                showSlider={shouldShowSlider}\n                noPadding\n                chartZoomOptions={chartZoomOptions}\n              />\n            )}\n          </Container>\n        )}\n        {widget.queries.length > 1 && (\n          <Alert type=\"info\" showIcon>\n            {t(\n              'This widget was built with multiple queries. Table data can only be displayed for one query at a time. To edit any of the queries, edit the widget.'\n            )}\n          </Alert>\n        )}\n        {(widget.queries.length > 1 || widget.queries[0].conditions) && (\n          <QueryContainer>\n            <SelectControl\n              value={selectedQueryIndex}\n              options={queryOptions}\n              onChange={(option: SelectValue<number>) => {\n                router.replace({\n                  pathname: location.pathname,\n                  query: {\n                    ...location.query,\n                    [WidgetViewerQueryField.QUERY]: option.value,\n                    [WidgetViewerQueryField.PAGE]: undefined,\n                    [WidgetViewerQueryField.CURSOR]: undefined,\n                  },\n                });\n\n                trackAdvancedAnalyticsEvent(\n                  'dashboards_views.widget_viewer.select_query',\n                  {\n                    organization,\n                    widget_type: widget.widgetType ?? WidgetType.DISCOVER,\n                    display_type: widget.displayType,\n                  }\n                );\n              }}\n              components={{\n                // Replaces the displayed selected value\n                SingleValue: containerProps => {\n                  return (\n                    <components.SingleValue\n                      {...containerProps}\n                      // Overwrites some of the default styling that interferes with highlighted query text\n                      getStyles={() => ({\n                        wordBreak: 'break-word',\n                        flex: 1,\n                        display: 'flex',\n                        padding: `0 ${space(0.5)}`,\n                      })}\n                    >\n                      {queryOptions[selectedQueryIndex].getHighlightedQuery({\n                        display: 'block',\n                      }) ??\n                        (queryOptions[selectedQueryIndex].label || (\n                          <EmptyQueryContainer>{EMPTY_QUERY_NAME}</EmptyQueryContainer>\n                        ))}\n                    </components.SingleValue>\n                  );\n                },\n                // Replaces the dropdown options\n                Option: containerProps => {\n                  const highlightedQuery = containerProps.data.getHighlightedQuery({\n                    display: 'flex',\n                  });\n                  return (\n                    <Option\n                      {...(highlightedQuery\n                        ? {\n                            ...containerProps,\n                            label: highlightedQuery,\n                          }\n                        : containerProps.label\n                        ? containerProps\n                        : {\n                            ...containerProps,\n                            label: (\n                              <EmptyQueryContainer>\n                                {EMPTY_QUERY_NAME}\n                              </EmptyQueryContainer>\n                            ),\n                          })}\n                    />\n                  );\n                },\n                // Hide the dropdown indicator if there is only one option\n                ...(widget.queries.length < 2 ? {IndicatorsContainer: _ => null} : {}),\n              }}\n              isSearchable={false}\n              isDisabled={widget.queries.length < 2}\n            />\n            {widget.queries.length === 1 && (\n              <StyledQuestionTooltip\n                title={t('To edit this query, you must edit the widget.')}\n                size=\"sm\"\n              />\n            )}\n          </QueryContainer>\n        )}\n        {renderWidgetViewerTable()}\n      </Fragment>\n    );\n  }\n\n  let openLabel: string;\n  let path: string;\n  switch (widget.widgetType) {\n    case WidgetType.ISSUE:\n      openLabel = t('Open in Issues');\n      path = getWidgetIssueUrl(primaryWidget, modalTableSelection, organization);\n      break;\n    case WidgetType.RELEASE:\n      openLabel = t('Open in Releases');\n      path = getWidgetReleasesUrl(primaryWidget, modalTableSelection, organization);\n      break;\n    case WidgetType.DISCOVER:\n    default:\n      openLabel = t('Open in Discover');\n      path = getWidgetDiscoverUrl(\n        {...primaryWidget, queries: [primaryWidget.queries[selectedQueryIndex]]},\n        modalTableSelection,\n        organization\n      );\n      break;\n  }\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h3>{widget.title}</h3>\n      </Header>\n      <Body>{renderWidgetViewer()}</Body>\n      <Footer>\n        <ResultsContainer>\n          {renderTotalResults(totalResults, widget.widgetType)}\n          <ButtonBar gap={1}>\n            {onEdit && widget.id && (\n              <Button\n                type=\"button\"\n                onClick={() => {\n                  closeModal();\n                  onEdit();\n                  trackAdvancedAnalyticsEvent('dashboards_views.widget_viewer.edit', {\n                    organization,\n                    widget_type: widget.widgetType ?? WidgetType.DISCOVER,\n                    display_type: widget.displayType,\n                  });\n                }}\n              >\n                {t('Edit Widget')}\n              </Button>\n            )}\n            {widget.widgetType && (\n              <Button\n                to={path}\n                priority=\"primary\"\n                type=\"button\"\n                onClick={() => {\n                  trackAdvancedAnalyticsEvent(\n                    'dashboards_views.widget_viewer.open_source',\n                    {\n                      organization,\n                      widget_type: widget.widgetType ?? WidgetType.DISCOVER,\n                      display_type: widget.displayType,\n                    }\n                  );\n                }}\n              >\n                {openLabel}\n              </Button>\n            )}\n          </ButtonBar>\n        </ResultsContainer>\n      </Footer>\n    </Fragment>\n  );\n}\n\nfunction renderTotalResults(totalResults?: string, widgetType?: WidgetType) {\n  if (totalResults === undefined) {\n    return <span />;\n  }\n  switch (widgetType) {\n    case WidgetType.ISSUE:\n      return (\n        <span>\n          {tct('[description:Total Issues:] [total]', {\n            description: <strong />,\n            total: totalResults === '1000' ? '1000+' : totalResults,\n          })}\n        </span>\n      );\n    case WidgetType.DISCOVER:\n      return (\n        <span>\n          {tct('[description:Total Events:] [total]', {\n            description: <strong />,\n            total: totalResults,\n          })}\n        </span>\n      );\n    default:\n      return <span />;\n  }\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 1200px;\n`;\n\nconst Container = styled('div')<{height?: number | null}>`\n  height: ${p => (p.height ? `${p.height}px` : 'auto')};\n  position: relative;\n  padding-bottom: ${space(3)};\n`;\n\nconst QueryContainer = styled('div')`\n  margin-bottom: ${space(2)};\n  position: relative;\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n  position: absolute;\n  top: ${space(1.5)};\n  right: ${space(2)};\n`;\n\nconst HighlightContainer = styled('span')<{display?: 'block' | 'flex'}>`\n  display: ${p => p.display};\n  gap: ${space(1)};\n  font-family: ${p => p.theme.text.familyMono};\n  font-size: ${p => p.theme.fontSizeSmall};\n  line-height: 2;\n  flex: 1;\n`;\n\nconst ResultsContainer = styled('div')`\n  display: flex;\n  flex-grow: 1;\n  flex-direction: column;\n  gap: ${space(1)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    align-items: center;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n`;\n\nconst EmptyQueryContainer = styled('span')`\n  color: ${p => p.theme.disabled};\n`;\n\nexport default withRouter(withPageFilters(WidgetViewerModal));\n","import {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Query} from 'history';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\n\n/**\n * @param cursor The string cursor value\n * @param path   The current page pathname\n * @param query  The current query object\n * @param delta  The delta in page number change triggered by the\n *               click. A negative delta would be a \"previous\" page.\n */\nexport type CursorHandler = (\n  cursor: string | undefined,\n  path: string,\n  query: Query,\n  delta: number\n) => void;\n\ntype Props = WithRouterProps & {\n  caption?: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  onCursor?: CursorHandler;\n  pageLinks?: string | null;\n  paginationAnalyticsEvent?: (direction: string) => void;\n  size?: 'zero' | 'xsmall' | 'small';\n  to?: string;\n};\n\nconst defaultOnCursor: CursorHandler = (cursor, path, query, _direction) =>\n  browserHistory.push({\n    pathname: path,\n    query: {...query, cursor},\n  });\n\nconst Pagination = ({\n  to,\n  location,\n  className,\n  onCursor = defaultOnCursor,\n  paginationAnalyticsEvent,\n  pageLinks,\n  size = 'small',\n  caption,\n  disabled = false,\n}: Props) => {\n  if (!pageLinks) {\n    return null;\n  }\n\n  const path = to ?? location.pathname;\n  const query = location.query;\n  const links = parseLinkHeader(pageLinks);\n  const previousDisabled = disabled || links.previous?.results === false;\n  const nextDisabled = disabled || links.next?.results === false;\n\n  return (\n    <Wrapper className={className}>\n      {caption && <PaginationCaption>{caption}</PaginationCaption>}\n      <ButtonBar merged>\n        <Button\n          icon={<IconChevron direction=\"left\" size=\"sm\" />}\n          aria-label={t('Previous')}\n          size={size}\n          disabled={previousDisabled}\n          onClick={() => {\n            onCursor?.(links.previous?.cursor, path, query, -1);\n            paginationAnalyticsEvent?.('Previous');\n          }}\n        />\n        <Button\n          icon={<IconChevron direction=\"right\" size=\"sm\" />}\n          aria-label={t('Next')}\n          size={size}\n          disabled={nextDisabled}\n          onClick={() => {\n            onCursor?.(links.next?.cursor, path, query, 1);\n            paginationAnalyticsEvent?.('Next');\n          }}\n        />\n      </ButtonBar>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin: ${space(3)} 0 0 0;\n`;\n\nconst PaginationCaption = styled('span')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(2)};\n`;\n\nexport default withRouter(Pagination);\n","import {createStore} from 'reflux';\n\nimport OrganizationActions from 'sentry/actions/organizationActions';\nimport {ORGANIZATION_FETCH_ERROR_TYPES} from 'sentry/constants';\nimport {Organization} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\nimport RequestError from 'sentry/utils/requestError/requestError';\n\nimport {CommonStoreDefinition} from './types';\n\ntype UpdateOptions = {\n  replace?: boolean;\n};\n\ntype State = {\n  dirty: boolean;\n  loading: boolean;\n  organization: Organization | null;\n  error?: RequestError | null;\n  errorType?: string | null;\n};\n\ninterface OrganizationStoreDefinition extends CommonStoreDefinition<State> {\n  get(): State;\n  init(): void;\n  onFetchOrgError(err: RequestError): void;\n  onUpdate(org: Organization, options: UpdateOptions): void;\n  reset(): void;\n}\n\nconst storeConfig: OrganizationStoreDefinition = {\n  unsubscribeListeners: [],\n\n  init() {\n    this.reset();\n    this.unsubscribeListeners.push(\n      this.listenTo(OrganizationActions.update, this.onUpdate)\n    );\n    this.unsubscribeListeners.push(this.listenTo(OrganizationActions.reset, this.reset));\n    this.unsubscribeListeners.push(\n      this.listenTo(OrganizationActions.fetchOrgError, this.onFetchOrgError)\n    );\n  },\n\n  reset() {\n    this.loading = true;\n    this.error = null;\n    this.errorType = null;\n    this.organization = null;\n    this.dirty = false;\n    this.trigger(this.get());\n  },\n\n  onUpdate(updatedOrg: Organization, {replace = false}: UpdateOptions = {}) {\n    this.loading = false;\n    this.error = null;\n    this.errorType = null;\n    this.organization = replace ? updatedOrg : {...this.organization, ...updatedOrg};\n    this.dirty = false;\n    this.trigger(this.get());\n  },\n\n  onFetchOrgError(err: RequestError) {\n    this.organization = null;\n    this.errorType = null;\n\n    switch (err?.status) {\n      case 401:\n        this.errorType = ORGANIZATION_FETCH_ERROR_TYPES.ORG_NO_ACCESS;\n        break;\n      case 404:\n        this.errorType = ORGANIZATION_FETCH_ERROR_TYPES.ORG_NOT_FOUND;\n        break;\n      default:\n    }\n    this.loading = false;\n    this.error = err;\n    this.dirty = false;\n    this.trigger(this.get());\n  },\n\n  get() {\n    return {\n      organization: this.organization,\n      error: this.error,\n      loading: this.loading,\n      errorType: this.errorType,\n      dirty: this.dirty,\n    };\n  },\n\n  getState() {\n    return this.get();\n  },\n};\n\nconst OrganizationStore = createStore(makeSafeRefluxStore(storeConfig));\n\nexport default OrganizationStore;\n","import {PinnedPageFilter} from 'sentry/types';\n\nexport type CoreUIEventParameters = {\n  'page_filters.pin_click': {\n    filter: PinnedPageFilter;\n    pin: boolean;\n  };\n};\n\ntype CoreUIAnalyticsKey = keyof CoreUIEventParameters;\n\nexport const coreUIEventMap: Record<CoreUIAnalyticsKey, string> = {\n  'page_filters.pin_click': 'Page Filters: Pin Button Clicked',\n};\n","// The add/edit widget modal is currently being ported to the widget builder full-page and\n// this will be removed once that is done.\ntype DashboardsEventParametersAddWidgetModal = {\n  'dashboards_views.add_widget_modal.change': {\n    field: string;\n    from: string;\n    value: string;\n    widget_type: string;\n  };\n  'dashboards_views.add_widget_modal.confirm': {\n    data_set: string;\n  };\n  'dashboards_views.add_widget_modal.opened': {};\n  'dashboards_views.add_widget_modal.save': {\n    data_set: string;\n  };\n  'dashboards_views.edit_widget_modal.confirm': {};\n  'dashboards_views.edit_widget_modal.opened': {};\n};\n\nconst dashboardsEventMapAddWidgetModal: Record<\n  keyof DashboardsEventParametersAddWidgetModal,\n  string | null\n> = {\n  'dashboards_views.edit_widget_modal.confirm':\n    'Dashboards2: Edit Dashboard Widget modal form submitted',\n  'dashboards_views.edit_widget_modal.opened': 'Dashboards2: Edit Widget Modal Opened',\n  'dashboards_views.add_widget_modal.opened': 'Dashboards2: Add Widget Modal opened',\n  'dashboards_views.add_widget_modal.change':\n    'Dashboards2: Field changed in Add Widget Modal',\n  'dashboards_views.add_widget_modal.confirm':\n    'Dashboards2: Add Widget to Dashboard modal form submitted',\n  'dashboards_views.add_widget_modal.save':\n    'Dashboards2: Widget saved directly to Dashboard from Add Widget to Dashboard modal',\n};\n\n// Used in the full-page widget builder\ntype DashboardsEventParametersWidgetBuilder = {\n  'dashboards_views.widget_builder.change': {\n    field: string;\n    from: string;\n    new_widget: boolean;\n    value: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_builder.opened': {\n    new_widget: boolean;\n  };\n  'dashboards_views.widget_builder.save': {\n    data_set: string;\n    new_widget: boolean;\n  };\n};\n\nconst dashboardsEventMapWidgetBuilder: Record<\n  keyof DashboardsEventParametersWidgetBuilder,\n  string | null\n> = {\n  'dashboards_views.widget_builder.change': 'Widget Builder: Field changed',\n  'dashboards_views.widget_builder.save': 'Widget Builder: Form submitted',\n  'dashboards_views.widget_builder.opened': 'Widget Builder: Page opened',\n};\n\nexport type DashboardsEventParameters = {\n  'dashboards_manage.change_sort': {\n    sort: string;\n  };\n  'dashboards_manage.create.start': {};\n  'dashboards_manage.search': {};\n  'dashboards_manage.templates.add': {\n    dashboard_id: string;\n    dashboard_title: string;\n    was_previewed: boolean;\n  };\n  'dashboards_manage.templates.preview': {\n    dashboard_id: string;\n  };\n  'dashboards_manage.templates.toggle': {\n    show_templates: boolean;\n  };\n  'dashboards_views.open_in_discover.opened': {\n    widget_type: string;\n  };\n  'dashboards_views.query_selector.opened': {\n    widget_type: string;\n  };\n  'dashboards_views.query_selector.selected': {\n    widget_type: string;\n  };\n  'dashboards_views.widget_library.add': {\n    num_widgets: number;\n  };\n  'dashboards_views.widget_library.add_widget': {\n    title: string;\n  };\n  'dashboards_views.widget_library.opened': {};\n  'dashboards_views.widget_library.switch_tab': {\n    to: string;\n  };\n  'dashboards_views.widget_viewer.edit': {\n    display_type: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.open': {\n    display_type: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.open_source': {\n    display_type: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.paginate': {\n    display_type: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.select_query': {\n    display_type: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.sort': {\n    column: string;\n    display_type: string;\n    order: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.toggle_legend': {\n    display_type: string;\n    widget_type: string;\n  };\n  'dashboards_views.widget_viewer.zoom': {\n    display_type: string;\n    widget_type: string;\n  };\n} & DashboardsEventParametersAddWidgetModal &\n  DashboardsEventParametersWidgetBuilder;\n\nexport type DashboardsEventKey = keyof DashboardsEventParameters;\n\nexport const dashboardsEventMap: Record<DashboardsEventKey, string | null> = {\n  'dashboards_views.query_selector.opened':\n    'Dashboards2: Query Selector opened for Widget',\n  'dashboards_views.query_selector.selected':\n    'Dashboards2: Query selected in Query Selector',\n  'dashboards_views.open_in_discover.opened': 'Dashboards2: Widget Opened In Discover',\n  'dashboards_views.widget_library.add': 'Dashboards2: Number of prebuilt widgets added',\n  'dashboards_views.widget_library.add_widget':\n    'Dashboards2: Title of prebuilt widget added',\n  'dashboards_views.widget_library.switch_tab':\n    'Dashboards2: Widget Library tab switched',\n  'dashboards_views.widget_library.opened': 'Dashboards2: Add Widget Library opened',\n  'dashboards_manage.search': 'Dashboards Manager: Search',\n  'dashboards_manage.change_sort': 'Dashboards Manager: Sort By Changed',\n  'dashboards_manage.create.start': 'Dashboards Manager: Dashboard Create Started',\n  'dashboards_manage.templates.toggle': 'Dashboards Manager: Template Toggle Changed',\n  'dashboards_manage.templates.add': 'Dashboards Manager: Template Added',\n  'dashboards_manage.templates.preview': 'Dashboards Manager: Template Previewed',\n  'dashboards_views.widget_viewer.edit': 'Widget Viewer: Edit Widget Modal Opened',\n  'dashboards_views.widget_viewer.open': 'Widget Viewer: Opened',\n  'dashboards_views.widget_viewer.open_source':\n    'Widget Viewer: Opened in Discover/Issues',\n  'dashboards_views.widget_viewer.paginate': 'Widget Viewer: Paginate',\n  'dashboards_views.widget_viewer.select_query': 'Widget Viewer: Query Selected',\n  'dashboards_views.widget_viewer.sort': 'Widget Viewer: Table Sorted',\n  'dashboards_views.widget_viewer.toggle_legend': 'Widget Viewer: Legend Toggled',\n  'dashboards_views.widget_viewer.zoom': 'Widget Viewer: Chart zoomed',\n  ...dashboardsEventMapAddWidgetModal,\n  ...dashboardsEventMapWidgetBuilder,\n};\n","export type DiscoverEventParameters = {\n  'discover_views.add_to_dashboard.confirm': {};\n  'discover_views.add_to_dashboard.modal_open': {saved_query: boolean};\n};\n\nexport type DiscoverEventKey = keyof DiscoverEventParameters;\n\nexport const discoverEventMap: Record<DiscoverEventKey, string | null> = {\n  'discover_views.add_to_dashboard.modal_open':\n    'Discover2: Add to Dashboard modal opened',\n  'discover_views.add_to_dashboard.confirm':\n    'Discover2: Add to Dashboard modal form submitted',\n};\n","import {PlatformKey} from 'sentry/data/platformCategories';\n\ntype MobilePromptBannerParams = {\n  matchedUserAgentString: string;\n};\n\ntype PlatformParam = {\n  platform: PlatformKey;\n};\n\ntype PlatformCategory = {\n  category: string;\n  source?: string;\n};\n\ntype PlatformPickerParam = {\n  platform_id: string;\n  source?: string;\n};\n\ntype PlatformSearchParam = {\n  num_results: number;\n  search: string;\n  source?: string;\n};\n\ntype SampleEventParam = {\n  platform?: PlatformKey;\n};\n\ntype IntegrationParam = {\n  all_selected_integrations?: string;\n  integration?: string;\n};\n\ntype InviteRequestParam = {\n  invite_status: string;\n  member_id: number;\n};\n\ntype InviteModal = {\n  modal_session: string;\n};\n\ntype SampleEvent = {\n  duration: number;\n  interval: number;\n  platform: string;\n  project_id: string;\n  retries: number;\n  source: string;\n};\n\n// define the event key to payload mappings\nexport type GrowthEventParameters = {\n  'growth.clicked_enter_sandbox': {\n    scenario: string;\n    source?: string;\n  };\n  'growth.clicked_mobile_prompt_ask_teammate': MobilePromptBannerParams;\n  'growth.clicked_mobile_prompt_setup_project': MobilePromptBannerParams;\n  'growth.clicked_sidebar': {\n    item: string;\n  };\n  'growth.demo_click_docs': {};\n  'growth.demo_click_get_started': {cta?: string};\n  'growth.demo_click_request_demo': {};\n  'growth.demo_modal_clicked_continue': {};\n  'growth.demo_modal_clicked_signup': {};\n  'growth.issue_open_in_discover_btn_clicked': {};\n  'growth.onboarding_clicked_instrument_app': {source?: string};\n  'growth.onboarding_clicked_integration_in_sidebar': {integration: string};\n  'growth.onboarding_clicked_project_in_sidebar': {platform: string};\n  'growth.onboarding_clicked_setup_integration_later': {\n    integration: string;\n    integration_index: number;\n  };\n  'growth.onboarding_clicked_setup_platform_later': PlatformParam & {\n    project_index: number;\n  };\n  'growth.onboarding_clicked_skip': {source?: string};\n  'growth.onboarding_load_choose_platform': {};\n  'growth.onboarding_quick_start_cta': SampleEventParam;\n  'growth.onboarding_quick_start_cta_integration': IntegrationParam;\n  'growth.onboarding_set_up_your_integrations': {\n    integration_count: number;\n    integrations: string;\n  };\n  'growth.onboarding_set_up_your_project': PlatformParam;\n  'growth.onboarding_set_up_your_projects': {platform_count: number; platforms: string};\n  'growth.onboarding_start_onboarding': {\n    source?: string;\n  };\n  'growth.onboarding_take_to_error': {};\n  'growth.onboarding_view_full_docs': {};\n  'growth.onboarding_view_sample_event': SampleEventParam;\n  'growth.platformpicker_category': PlatformCategory;\n  'growth.platformpicker_search': PlatformSearchParam;\n  'growth.sample_error_onboarding_link_clicked': {\n    platform?: string;\n    project_id?: string;\n  };\n  'growth.sample_transaction_docs_link_clicked': {\n    project_id: string;\n  };\n  'growth.select_platform': PlatformPickerParam;\n  'growth.submitted_mobile_prompt_ask_teammate': MobilePromptBannerParams;\n  'invite_modal.add_more': InviteModal;\n  'invite_modal.closed': InviteModal;\n  'invite_modal.invites_sent': InviteModal;\n  'invite_modal.opened': InviteModal & {\n    can_invite: boolean;\n    source?: string;\n  };\n  'invite_modal.requests_sent': InviteModal;\n  'invite_request.approved': InviteRequestParam;\n  'invite_request.denied': InviteRequestParam;\n  'member_settings_page.loaded': {\n    num_invite_requests: number;\n    num_members: number;\n  };\n  'onboarding.wizard_clicked': {\n    action: string;\n    todo_id: string;\n    todo_title: string;\n  };\n  'onboarding.wizard_opened': {};\n  'sample_event.button_viewed': {\n    project_id: string;\n    source: string;\n  };\n  'sample_event.created': SampleEvent;\n  'sample_event.failed': SampleEvent;\n  'sdk_updates.clicked': {};\n  'sdk_updates.seen': {};\n  'sdk_updates.snoozed': {};\n};\n\ntype GrowthAnalyticsKey = keyof GrowthEventParameters;\n\nexport const growthEventMap: Record<GrowthAnalyticsKey, string | null> = {\n  'growth.clicked_mobile_prompt_setup_project':\n    'Growth: Clicked Mobile Prompt Setup Project',\n  'growth.clicked_mobile_prompt_ask_teammate':\n    'Growth: Clicked Mobile Prompt Ask Teammate',\n  'growth.submitted_mobile_prompt_ask_teammate':\n    'Growth: Submitted Mobile Prompt Ask Teammate',\n  'growth.demo_click_get_started': 'Growth: Demo Click Get Started',\n  'growth.demo_click_docs': 'Growth: Demo Click Docs',\n  'growth.demo_click_request_demo': 'Growth: Demo Click Request Demo',\n  'growth.clicked_sidebar': 'Growth: Clicked Sidebar',\n  'growth.onboarding_load_choose_platform':\n    'Growth: Onboarding Load Choose Platform Page',\n  'growth.onboarding_set_up_your_project': 'Growth: Onboarding Click Set Up Your Project',\n  'growth.onboarding_set_up_your_projects':\n    'Growth: Onboarding Click Set Up Your Projects',\n  'growth.onboarding_set_up_your_integrations':\n    'Growth: Onboarding Click Set Up Your Integrations',\n  'growth.select_platform': 'Growth: Onboarding Choose Platform',\n  'growth.platformpicker_category': 'Growth: Onboarding Platform Category',\n  'growth.platformpicker_search': 'Growth: Onboarding Platform Search',\n  'growth.onboarding_start_onboarding': 'Growth: Onboarding Start Onboarding',\n  'growth.onboarding_clicked_skip': 'Growth: Onboarding Clicked Skip',\n  'growth.onboarding_take_to_error': 'Growth: Onboarding Take to Error',\n  'growth.onboarding_view_full_docs': 'Growth: Onboarding View Full Docs',\n  'growth.onboarding_view_sample_event': 'Growth: Onboarding View Sample Event',\n  'growth.onboarding_clicked_instrument_app': 'Growth: Onboarding Clicked Instrument App',\n  'growth.onboarding_clicked_setup_platform_later':\n    'Growth: Onboarding Clicked Setup Platform Later',\n  'growth.onboarding_clicked_setup_integration_later':\n    'Growth: Onboarding Clicked Setup Integration Later',\n  'growth.onboarding_quick_start_cta': 'Growth: Quick Start Onboarding CTA',\n  'growth.onboarding_quick_start_cta_integration':\n    'Growth: Quick Start Onboarding Integration CTA',\n  'invite_request.approved': 'Invite Request Approved',\n  'invite_request.denied': 'Invite Request Denied',\n  'growth.demo_modal_clicked_signup': 'Growth: Demo Modal Clicked Signup',\n  'growth.demo_modal_clicked_continue': 'Growth: Demo Modal Clicked Continue',\n  'growth.clicked_enter_sandbox': 'Growth: Clicked Enter Sandbox',\n  'growth.onboarding_clicked_project_in_sidebar': 'Growth: Clicked Project Sidebar',\n  'growth.onboarding_clicked_integration_in_sidebar':\n    'Growth: Clicked Integration Sidebar',\n  'growth.sample_transaction_docs_link_clicked':\n    'Growth: Sample Transaction Docs Link Clicked',\n  'growth.sample_error_onboarding_link_clicked':\n    'Growth: Sample Error Onboarding Link Clicked',\n  'growth.issue_open_in_discover_btn_clicked':\n    'Growth: Open in Discover Button in Issue Details clicked',\n  'member_settings_page.loaded': 'Member Settings Page Loaded',\n  'invite_modal.opened': 'Invite Modal: Opened',\n  'invite_modal.closed': 'Invite Modal: Closed',\n  'invite_modal.add_more': 'Invite Modal: Add More',\n  'invite_modal.invites_sent': 'Invite Modal: Invites Sent',\n  'invite_modal.requests_sent': 'Invite Modal: Requests Sent',\n  'sdk_updates.seen': 'SDK Updates: Seen',\n  'sdk_updates.snoozed': 'SDK Updates: Snoozed',\n  'sdk_updates.clicked': 'SDK Updates: Clicked',\n  'onboarding.wizard_opened': 'Onboarding Wizard Opened',\n  'onboarding.wizard_clicked': 'Onboarding Wizard Clicked',\n  'sample_event.button_viewed': null, // high-volume event\n  'sample_event.created': 'Sample Event Created',\n  'sample_event.failed': 'Sample Event Failed',\n};\n","type IssueStream = {\n  group_id: string;\n  tab: string;\n  was_shown_suggestion: boolean;\n};\n\nexport type IssueEventParameters = {\n  'event_cause.dismissed': {};\n  'event_cause.docs_clicked': {};\n  'event_cause.snoozed': {};\n  'event_cause.viewed': {\n    platform?: string;\n    project_id?: string;\n  };\n  'inbox_tab.issue_clicked': {\n    group_id: string;\n  };\n  'issue.search_sidebar_clicked': {};\n  'issue.shared_publicly': {};\n  'issue_error_banner.viewed': {\n    error_message: string[];\n    error_type: string[];\n    group?: string;\n    platform?: string;\n  };\n  'issue_search.failed': {\n    error: string;\n    search_source: string;\n    search_type: string;\n  };\n  'issues_stream.issue_assigned': IssueStream & {\n    assigned_type: string;\n    did_assign_suggestion: boolean;\n    assigned_suggestion_reason?: string;\n  };\n  'issues_stream.issue_clicked': IssueStream;\n  'issues_tab.viewed': {\n    num_issues: number;\n    tab: string;\n  };\n  resolve_issue: {release: string};\n  'tag.clicked': {\n    is_clickable: boolean;\n  };\n};\n\nexport type IssueEventKey = keyof IssueEventParameters;\n\nexport const issueEventMap: Record<IssueEventKey, string | null> = {\n  'event_cause.viewed': null, // send to main event store only due to high event volume\n  'event_cause.docs_clicked': 'Event Cause Docs Clicked',\n  'event_cause.snoozed': 'Event Cause Snoozed',\n  'event_cause.dismissed': 'Event Cause Dismissed',\n  'issue_error_banner.viewed': 'Issue Error Banner Viewed',\n  'issues_tab.viewed': 'Viewed Issues Tab', // high volume but send to our secondary event store anyways\n  'issue_search.failed': 'Issue Search: Failed',\n  'issue.search_sidebar_clicked': 'Issue Search Sidebar Clicked',\n  'inbox_tab.issue_clicked': 'Clicked Issue from Inbox Tab',\n  'issues_stream.issue_clicked': 'Clicked Issue from Issues Stream',\n  'issues_stream.issue_assigned': 'Assigned Issue from Issues Stream',\n  'issue.shared_publicly': 'Issue Shared Publicly',\n  resolve_issue: 'Resolve Issue',\n  'tag.clicked': 'Tag: Clicked',\n};\n","import {PlatformKey} from 'sentry/data/platformCategories';\n\ntype SampleTransactionParam = {\n  platform?: PlatformKey;\n};\n\ntype PerformanceTourParams = {\n  duration: number;\n  step: number;\n};\n\nexport type PerformanceEventParameters = {\n  'performance_views.all_events.open_in_discover': {};\n  'performance_views.create_sample_transaction': SampleTransactionParam;\n  'performance_views.landingv2.transactions.sort': {\n    direction?: string;\n    field?: string;\n  };\n  'performance_views.landingv3.batch_queries': {\n    num_collected: number;\n    num_saved: number;\n    num_sent: number;\n  };\n  'performance_views.landingv3.display_change': {\n    change_to_display: string;\n    current_display: string;\n    default_display: string;\n    is_default: boolean;\n  };\n  'performance_views.landingv3.table_pagination': {\n    direction: string;\n  };\n  'performance_views.landingv3.widget.interaction': {\n    widget_type?: string;\n  };\n  'performance_views.landingv3.widget.switch': {\n    from_default?: boolean;\n    from_widget?: string;\n    to_widget?: string;\n  };\n  'performance_views.overview.cellaction': {action?: string};\n  'performance_views.overview.navigate.summary': {};\n  'performance_views.overview.search': {};\n  'performance_views.overview.view': {\n    show_onboarding: boolean;\n  };\n  'performance_views.span_summary.change_chart': {\n    change_to_display: string;\n  };\n  'performance_views.spans.change_op': {\n    operation_name?: string;\n  };\n  'performance_views.spans.change_sort': {\n    sort_column?: string;\n  };\n  'performance_views.tags.change_tag': {\n    from_tag: string;\n    is_other_tag: boolean;\n    to_tag: string;\n  };\n  'performance_views.tags.jump_to_release': {};\n  'performance_views.team_key_transaction.set': {\n    action: string;\n  };\n  'performance_views.tour.advance': PerformanceTourParams;\n  'performance_views.tour.close': PerformanceTourParams;\n  'performance_views.tour.start': {};\n  'performance_views.trace_view.view': {};\n  'performance_views.transaction_summary.change_chart_display': {\n    from_chart: string;\n    to_chart: string;\n  };\n  'performance_views.transaction_summary.status_breakdown_click': {\n    status: string;\n  };\n  'performance_views.trends.change_duration': {\n    value: string;\n    widget_type: string;\n  };\n  'performance_views.trends.widget_interaction': {\n    widget_type: string;\n  };\n  'performance_views.trends.widget_pagination': {\n    direction: string;\n    widget_type: string;\n  };\n  'performance_views.vital_detail.view': {};\n};\n\nexport type PerformanceEventKey = keyof PerformanceEventParameters;\n\nexport const performanceEventMap: Record<PerformanceEventKey, string | null> = {\n  'performance_views.create_sample_transaction': 'Growth: Performance Sample Transaction',\n  'performance_views.tour.start': 'Performance Views: Tour Start',\n  'performance_views.tour.advance': 'Performance Views: Tour Advance',\n  'performance_views.tour.close': 'Performance Views: Tour Close',\n  'performance_views.landingv2.transactions.sort':\n    'Performance Views: Landing Transactions Sorted',\n  'performance_views.overview.navigate.summary':\n    'Performance Views: Overview view summary',\n  'performance_views.overview.cellaction': 'Performance Views: Cell Action Clicked',\n  'performance_views.landingv3.widget.interaction':\n    'Performance Views: Landing Widget Interaction',\n  'performance_views.landingv3.widget.switch':\n    'Performance Views: Landing Widget Switched',\n  'performance_views.landingv3.batch_queries':\n    'Performance Views: Landing Query Batching',\n  'performance_views.landingv3.display_change': 'Performance Views: Switch Landing Tabs',\n  'performance_views.landingv3.table_pagination':\n    'Performance Views: Landing Page Transactions Table Page Changed',\n  'performance_views.span_summary.change_chart':\n    'Performance Views: Span Summary displayed chart changed',\n  'performance_views.spans.change_op': 'Performance Views: Change span operation name',\n  'performance_views.spans.change_sort': 'Performance Views: Change span sort column',\n  'performance_views.overview.view': 'Performance Views: Transaction overview view',\n  'performance_views.overview.search': 'Performance Views: Transaction overview search',\n  'performance_views.vital_detail.view': 'Performance Views: Vital Detail viewed',\n  'performance_views.trace_view.view': 'Performance Views: Trace View viewed',\n  'performance_views.transaction_summary.change_chart_display':\n    'Performance Views: Transaction Summary chart display changed',\n  'performance_views.transaction_summary.status_breakdown_click':\n    'Performance Views: Transaction Summary status breakdown option clicked',\n  'performance_views.all_events.open_in_discover':\n    'Performance Views: All Events page open in Discover button clicked',\n  'performance_views.tags.change_tag':\n    'Performance Views: Tags Page changed selected tag',\n  'performance_views.tags.jump_to_release':\n    'Performance Views: Tags Page link to release in table clicked',\n  'performance_views.team_key_transaction.set':\n    'Performance Views: Set Team Key Transaction',\n  'performance_views.trends.widget_interaction':\n    'Performance Views: Trends Widget Interaction',\n  'performance_views.trends.widget_pagination':\n    'Performance Views: Trends Widget Page Changed',\n  'performance_views.trends.change_duration':\n    'Performance Views: Trends Widget Duration Changed',\n};\n","import {SamplingInnerName} from 'sentry/types/sampling';\n\ntype Rule = {\n  conditions: SamplingInnerName[] | string[];\n  conditions_stringified: string;\n  project_id: string;\n  sampling_rate: number | null;\n};\n\nexport type SamplingEventParameters = {\n  'sampling.settings.condition.add': {\n    conditions: SamplingInnerName[] | string[];\n    project_id: string;\n  };\n  'sampling.settings.rule.create': Rule;\n  'sampling.settings.rule.delete': Rule;\n  'sampling.settings.rule.save': Rule;\n  'sampling.settings.rule.update': Rule & {\n    old_conditions: Rule['conditions'];\n    old_conditions_stringified: string;\n    old_sampling_rate: Rule['sampling_rate'];\n  };\n  'sampling.settings.view': {project_id: string};\n};\n\ntype SamplingAnalyticsKey = keyof SamplingEventParameters;\n\nexport const samplingEventMap: Record<SamplingAnalyticsKey, string> = {\n  'sampling.settings.view': 'View Sampling Settings',\n  'sampling.settings.condition.add': 'Add Sampling Condition',\n  'sampling.settings.rule.save': 'Save Sampling Rule', // fired for both create and update\n  'sampling.settings.rule.create': 'Create Sampling Rule',\n  'sampling.settings.rule.update': 'Update Sampling Rule',\n  'sampling.settings.rule.delete': 'Delete Sampling Rule',\n};\n","type SearchEventBase = {\n  query: string;\n  search_type: string;\n  search_source?: string;\n};\n\ntype OpenEvent = {};\ntype SelectEvent = {result_type: string; source_type: string; query?: string};\ntype QueryEvent = {query: string};\ntype ProjectSelectorEvent = {path: string};\n\nexport type SearchEventParameters = {\n  'command_palette.open': OpenEvent;\n  'command_palette.query': QueryEvent;\n  'command_palette.select': SelectEvent;\n  'organization_saved_search.selected': {\n    id: number;\n    search_type: string;\n  };\n  'projectselector.clear': ProjectSelectorEvent;\n  'projectselector.direct_selection': ProjectSelectorEvent;\n  'projectselector.multi_button_clicked': ProjectSelectorEvent & {\n    button_type: 'all' | 'my';\n  };\n  'projectselector.toggle': ProjectSelectorEvent & {\n    action: 'added' | 'removed';\n  };\n  'projectselector.update': ProjectSelectorEvent & {\n    count: number;\n    multi: boolean;\n  };\n  'search.operator_autocompleted': SearchEventBase & {search_operator: string};\n  'search.searched': SearchEventBase & {search_source?: string};\n  'settings_search.open': OpenEvent;\n  'settings_search.query': QueryEvent;\n  'settings_search.select': SelectEvent;\n  'sidebar_help.open': OpenEvent;\n  'sidebar_help.query': QueryEvent;\n  'sidebar_help.select': SelectEvent;\n};\n\nexport type SearchEventKey = keyof SearchEventParameters;\n\nexport const searchEventMap: Record<SearchEventKey, string | null> = {\n  'search.searched': 'Search: Performed search',\n  'search.operator_autocompleted': 'Search: Operator Autocompleted',\n  'organization_saved_search.selected':\n    'Organization Saved Search: Selected saved search',\n  'settings_search.open': 'settings_search Open',\n  'command_palette.open': 'command_palette Open',\n  'sidebar_help.open': 'sidebar_help Open',\n  'settings_search.select': 'settings_search Select',\n  'command_palette.select': 'command_palette Select',\n  'sidebar_help.select': 'sidebar_help Select',\n  'settings_search.query': 'settings_search Query',\n  'command_palette.query': 'command_palette Query',\n  'sidebar_help.query': 'sidebar_help Query',\n  'projectselector.direct_selection': 'Project Selector: Direct Selection',\n  'projectselector.update': 'Project Selector: Update',\n  'projectselector.clear': 'Project Selector: Clear',\n  'projectselector.toggle': 'Project Selector: Toggle',\n  'projectselector.multi_button_clicked': 'Project Selector: Multi Button Clicked',\n};\n","export type SettingsEventParameters = {\n  'notification_settings.index_page_viewed': {};\n  'notification_settings.tuning_page_viewed': {\n    notification_type: string;\n  };\n  'notification_settings.updated_tuning_setting': {\n    notification_type: string;\n    tuning_field_type: string;\n  };\n};\n\nexport type SettingsEventKey = keyof SettingsEventParameters;\n\nexport const settingsEventMap: Record<SettingsEventKey, string | null> = {\n  'notification_settings.index_page_viewed': 'Notification Settings: Index Page Viewed',\n  'notification_settings.tuning_page_viewed': 'Notification Settings: Tuning Page Viewed',\n  'notification_settings.updated_tuning_setting':\n    'Notification Settings: Updated Tuning Setting',\n};\n","import type {ResolutionStatus} from 'sentry/types';\n\ntype RuleViewed = {\n  alert_type: 'issue' | 'metric';\n  project_id: string;\n};\n\ntype IssueDetailsWithAlert = {\n  group_id: number;\n  project_id: number;\n  /** The time that the alert was initially fired. */\n  alert_date?: string;\n  /** Id of the rule that triggered the alert */\n  alert_rule_id?: string;\n  /**  The type of alert notification - email/slack */\n  alert_type?: string;\n};\n\nexport type TeamInsightsEventParameters = {\n  'alert_builder.filter': {query: string; session_id?: string};\n  'alert_details.viewed': {alert_id: number};\n  'alert_rule_details.viewed': {alert: string; has_chartcuterie: string; rule_id: number};\n  'alert_rules.viewed': {sort: string};\n  'alert_stream.viewed': {};\n  'alert_wizard.option_selected': {alert_type: string};\n  'alert_wizard.option_viewed': {alert_type: string};\n  'edit_alert_rule.add_row': {\n    name: string;\n    project_id: string;\n    type: string;\n  };\n  'edit_alert_rule.viewed': RuleViewed;\n  'issue_alert_rule_details.edit_clicked': {rule_id: number};\n  'issue_alert_rule_details.viewed': {rule_id: number};\n  'issue_details.action_clicked': IssueDetailsWithAlert & {\n    action_type:\n      | 'deleted'\n      | 'mark_reviewed'\n      | 'bookmarked'\n      | 'subscribed'\n      | 'shared'\n      | 'discarded'\n      | 'open_in_discover'\n      | ResolutionStatus;\n  };\n  'issue_details.event_json_clicked': {group_id: number};\n  'issue_details.event_navigation_clicked': {button: string; project_id: number};\n  'issue_details.viewed': IssueDetailsWithAlert;\n  'new_alert_rule.viewed': RuleViewed & {\n    duplicate_rule: string;\n    session_id: string;\n    wizard_v3: string;\n  };\n  'team_insights.viewed': {};\n};\n\nexport type TeamInsightsEventKey = keyof TeamInsightsEventParameters;\n\nexport const workflowEventMap: Record<TeamInsightsEventKey, string | null> = {\n  'alert_builder.filter': 'Alert Builder: Filter',\n  'alert_details.viewed': 'Alert Details: Viewed',\n  'alert_rule_details.viewed': 'Alert Rule Details: Viewed',\n  'alert_rules.viewed': 'Alert Rules: Viewed',\n  'alert_stream.viewed': 'Alert Stream: Viewed',\n  'alert_wizard.option_selected': 'Alert Wizard: Option Selected',\n  'alert_wizard.option_viewed': 'Alert Wizard: Option Viewed',\n  'edit_alert_rule.add_row': 'Edit Alert Rule: Add Row',\n  'edit_alert_rule.viewed': 'Edit Alert Rule: Viewed',\n  'issue_alert_rule_details.edit_clicked': 'Issue Alert Rule Details: Edit Clicked',\n  'issue_alert_rule_details.viewed': 'Issue Alert Rule Details: Viewed',\n  'issue_details.action_clicked': 'Issue Details: Action Clicked',\n  'issue_details.event_json_clicked': 'Issue Details: Event JSON Clicked',\n  'issue_details.event_navigation_clicked': 'Issue Details: Event Navigation Clicked',\n  'issue_details.viewed': 'Issue Details: Viewed',\n  'new_alert_rule.viewed': 'New Alert Rule: Viewed',\n  'team_insights.viewed': 'Team Insights: Viewed',\n};\n","import moment from 'moment';\n\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {DateString} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\n\ntype DateObject = {\n  /**\n   * Ending date object\n   */\n  end?: DateString;\n  /**\n   * Relative period string in format \"<int><unit>\" (e.g. 4d for 4 days)\n   */\n  period?: string | null;\n  /**\n   * Starting date object\n   */\n  start?: DateString;\n};\n\ntype Options = {\n  /**\n   * Doubles the given period (useful for getting previous period data)\n   */\n  shouldDoublePeriod?: boolean;\n};\n\n/**\n * Gets the period to query with if we need to double the initial period in order\n * to get data for the previous period\n *\n * Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})\n */\nexport function getPeriod(\n  {period, start, end}: DateObject,\n  {shouldDoublePeriod}: Options = {}\n) {\n  if (!period && !start && !end) {\n    period = DEFAULT_STATS_PERIOD;\n  }\n\n  // you can not specify both relative and absolute periods\n  // relative period takes precedence\n  if (period) {\n    if (!shouldDoublePeriod) {\n      return {statsPeriod: period};\n    }\n    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/)!;\n\n    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};\n  }\n\n  if (!start || !end) {\n    throw new Error('start and end required');\n  }\n\n  const formattedStart = getUtcDateString(start);\n  const formattedEnd = getUtcDateString(end);\n\n  if (shouldDoublePeriod) {\n    // get duration of end - start and double\n    const diff = moment(end).diff(moment(start));\n\n    const previousPeriodStart = moment(start).subtract(diff);\n\n    // This is not as accurate as having 2 start/end objs\n    return {\n      start: getUtcDateString(previousPeriodStart),\n      end: formattedEnd,\n    };\n  }\n\n  return {\n    start: formattedStart,\n    end: formattedEnd,\n  };\n}\n","import {Fragment} from 'react';\n\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {useCallback, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\n\ntype Options = {\n  /**\n   * An existing API client may be provided.\n   *\n   * This is a continent way to re-use clients and still inherit the\n   * persistInFlight configuration.\n   */\n  api?: Client;\n  /**\n   * Enabling this option will disable clearing in-flight requests when the\n   * component is unmounted.\n   *\n   * This may be useful in situations where your component needs to finish up\n   * somewhere the client was passed into some type of action creator and the\n   * component is unmounted.\n   */\n  persistInFlight?: boolean;\n};\n\n/**\n * Returns an API client that will have it's requests canceled when the owning\n * React component is unmounted (may be disabled via options).\n */\nfunction useApi({persistInFlight, api: providedApi}: Options = {}) {\n  const localApi = useRef<Client>();\n\n  // Lazily construct the client if we weren't provided with one\n  if (localApi.current === undefined && providedApi === undefined) {\n    localApi.current = new Client();\n  }\n\n  // Use the provided client if available\n  const api = providedApi ?? localApi.current!;\n\n  // Clear API calls on unmount (if persistInFlight is disabled\n  const clearOnUnmount = useCallback(() => {\n    if (!persistInFlight) {\n      api.clear();\n    }\n  }, [api, persistInFlight]);\n\n  useEffect(() => clearOnUnmount, [clearOnUnmount]);\n\n  return api;\n}\n\nexport default useApi;\n","import {Client} from 'sentry/api';\nimport getDisplayName from 'sentry/utils/getDisplayName';\nimport useApi from 'sentry/utils/useApi';\n\ntype InjectedApiProps = {\n  api: Client;\n};\n\ntype WrappedProps<P> = Omit<P, keyof InjectedApiProps> & Partial<InjectedApiProps>;\n\n/**\n * XXX: Prefer useApi if you are wrapping a Function Component!\n *\n * React Higher-Order Component (HoC) that provides \"api\" client when mounted,\n * and clears API requests when component is unmounted.\n *\n * If an `api` prop is provided when the component is invoked it will be passed\n * through.\n */\nconst withApi = <P extends InjectedApiProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: Parameters<typeof useApi>[0] = {}\n) => {\n  const WithApi: React.FC<WrappedProps<P>> = ({api: propsApi, ...props}) => {\n    const api = useApi({api: propsApi, ...options});\n\n    return <WrappedComponent {...(props as P)} api={api} />;\n  };\n\n  WithApi.displayName = `withApi(${getDisplayName(WrappedComponent)})`;\n\n  return WithApi;\n};\n\nexport default withApi;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n */\nfunction charsStartIndex(strSymbols, chrSymbols) {\n  var index = -1,\n      length = strSymbols.length;\n\n  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}\n  return index;\n}\n\nmodule.exports = charsStartIndex;\n","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","var toInteger = require('./toInteger');\n\n/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on\n * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n * @example\n *\n * _.isInteger(3);\n * // => true\n *\n * _.isInteger(Number.MIN_VALUE);\n * // => false\n *\n * _.isInteger(Infinity);\n * // => false\n *\n * _.isInteger('3');\n * // => false\n */\nfunction isInteger(value) {\n  return typeof value == 'number' && value == toInteger(value);\n}\n\nmodule.exports = isInteger;\n","/**\n * Checks if `value` is `null` or `undefined`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * _.isNil(null);\n * // => true\n *\n * _.isNil(void 0);\n * // => true\n *\n * _.isNil(NaN);\n * // => false\n */\nfunction isNil(value) {\n  return value == null;\n}\n\nmodule.exports = isNil;\n","var basePick = require('./_basePick'),\n    flatRest = require('./_flatRest');\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n","var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * Removes leading whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trimStart('  abc  ');\n * // => 'abc  '\n *\n * _.trimStart('-_-abc-_-', '_-');\n * // => 'abc-_-'\n */\nfunction trimStart(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrimStart, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      start = charsStartIndex(strSymbols, stringToArray(chars));\n\n  return castSlice(strSymbols, start).join('');\n}\n\nmodule.exports = trimStart;\n"],"names":["doEventsRequest","api","organization","project","environment","team","period","start","end","interval","comparisonDelta","includePrevious","query","yAxis","field","topEvents","orderby","partial","withoutZerofill","referrer","queryBatching","generatePathname","queryExtras","excludeOther","userModified","pathname","slug","shouldDoublePeriod","canIncludePreviousPeriod","queryObject","Object","fromEntries","entries","undefined","user_modified","includes","filter","value","getPeriod","batchRequest","requestPromise","fetchTagFacets","orgSlug","queryOption","pick","values","PERFORMANCE_URL_PARAM","fetchTotalCount","then","res","count","createActions","AreaChart","series","stacked","colors","props","map","i","seriesName","data","otherSeriesProps","LineSeries","AreaSeries","stack","name","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","LoadingPanel","height","_height","p","defaultProps","SortLink","align","title","canSort","generateSortLink","onClick","direction","target","StyledNonLink","arrow","StyledIconArrow","size","StyledLink","to","forwardProps","omit","IconArrow","theme","backgroundSecondary","borderRadius","renderIssueGridHeaderCell","location","widget","tableData","onHeaderClick","column","_columnIndex","tableMeta","meta","fieldAlignment","type","sortField","getSortField","String","key","StyledTooltip","queries","WidgetViewerQueryField","trackAdvancedAnalyticsEvent","widget_type","WidgetType","display_type","displayType","order","renderDiscoverGridHeaderCell","selection","aggregateAliasOrderBy","startsWith","getAggregateAlias","trimStart","eventView","eventViewFromWidget","currentSort","sortForField","isFieldSortable","titleText","isEquationAlias","getEquations","getEquationAliasIndex","kind","queryStringObject","sortOnField","generateQueryStringObject","sort","renderGridBodyCell","isFirstPage","dataRow","rowIndex","columnIndex","columnKey","isTopEvents","DisplayType","cell","isAlias","features","widgetType","getIssueFieldRenderer","getFieldRenderer","ISSUE_FIELDS","fieldName","defined","toLocaleString","containerDisplayMode","position","topResultsCount","Math","min","length","Fragment","index","renderReleaseGridHeaderCell","widgetOrderBy","slice","isAggregateField","columnSort","Tooltip","GEO_COUNTRY_CODE","EMPTY_QUERY_NAME","shouldWidgetCardChartMemo","prevProps","selectionMatches","sortMatches","chartZoomOptionsMatches","isEqual","chartZoomOptions","isNotTopNWidget","limit","MemoizedWidgetCardChartContainer","memo","WidgetCardChartContainer","MemoizedWidgetCardChart","WidgetCardChart","WidgetViewerModal","Footer","Body","Header","closeModal","onEdit","router","routes","params","seriesData","issuesData","totalIssuesCount","pageLinks","defaultPageLinks","shouldShowSlider","decodeScalar","isTableWidget","locationPageFilter","useMemo","datetime","utc","chartUnmodified","setChartUnmodified","useState","setChartZoomOptions","modalTableSelection","setModalTableSelection","modalChartSelection","useRef","useEffect","action","startValue","moment","unix","endValue","disabledLegends","setDisabledLegends","decodeList","reduce","acc","legend","totalResults","setTotalResults","selectedQueryIndex","decodeInteger","page","cursor","widths","sortedQueries","cloneDeep","primaryWidget","useApi","tableWidget","aggregates","columns","rawOrderby","fields","push","forEach","aggregatesAndColumns","isEquation","getNumEquations","unshift","shouldReplaceTableColumns","getFieldsFromEquations","term","columnOrder","decodeColumnOrder","columnSortBy","getSorts","parseInt","queryOptions","conditions","parsedQuery","parseSearch","label","truncate","getHighlightedQuery","highlightedContainerProps","HighlightContainer","onResizeColumn","nextColumn","newWidth","Number","COL_WIDTH_UNDEFINED","newWidths","Array","max","fill","replace","onLegendSelectChanged","selected","keys","async","isValid","getEventsAPIPayload","err","Sentry","fetchDiscoverTotal","getDiscoverTotals","renderDiscoverTable","tableResults","loading","links","parseLinkHeader","previous","results","isLoading","grid","renderHeadCell","renderBodyCell","next","onCursor","newCursor","renderIssuesTable","transformedResults","totalCount","nextCursor","_path","_query","delta","nextPage","isNaN","renderReleaseTable","match","onZoom","evt","chart","model","getModel","seriesStart","seriesEnd","_payload","batch","seriesStartTime","Date","getTime","seriesEndTime","diff","newStart","getUtcDateString","newEnd","openLabel","path","t","getWidgetIssueUrl","getWidgetReleasesUrl","getWidgetDiscoverUrl","closeButton","Container","SLIDER_HEIGHT","timeseriesResults","errorMessage","legendOptions","expandNumbers","showSlider","noPadding","current","showIcon","QueryContainer","options","onChange","option","components","SingleValue","containerProps","getStyles","wordBreak","flex","display","padding","space","EmptyQueryContainer","Option","highlightedQuery","IndicatorsContainer","_","isSearchable","isDisabled","StyledQuestionTooltip","includeAllArgs","renderWidgetViewerTable","ResultsContainer","renderTotalResults","gap","id","priority","tct","description","total","modalCss","QuestionTooltip","text","familyMono","fontSizeSmall","breakpoints","small","disabled","withRouter","withPageFilters","defaultOnCursor","_direction","browserHistory","Pagination","className","paginationAnalyticsEvent","caption","previousDisabled","nextDisabled","Wrapper","PaginationCaption","merged","icon","subText","fontSizeMedium","storeConfig","unsubscribeListeners","init","this","reset","listenTo","OrganizationActions","onUpdate","onFetchOrgError","error","errorType","dirty","trigger","get","updatedOrg","status","ORGANIZATION_FETCH_ERROR_TYPES","getState","createStore","makeSafeRefluxStore","coreUIEventMap","dashboardsEventMap","discoverEventMap","growthEventMap","issueEventMap","resolve_issue","performanceEventMap","samplingEventMap","searchEventMap","settingsEventMap","workflowEventMap","DEFAULT_STATS_PERIOD","statsPeriod","periodNumber","periodLength","Error","formattedStart","formattedEnd","previousPeriodStart","subtract","measurementsFromDetails","details","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","measurements","persistInFlight","providedApi","localApi","Client","clearOnUnmount","useCallback","clear","WrappedComponent","WithApi","propsApi","displayName","getDisplayName","baseIndexOf","module","exports","strSymbols","chrSymbols","baseClone","CLONE_DEEP_FLAG","toInteger","basePick","flatRest","object","paths","baseToString","castSlice","charsStartIndex","stringToArray","toString","reTrimStart","string","chars","guard","join"],"sourceRoot":""}