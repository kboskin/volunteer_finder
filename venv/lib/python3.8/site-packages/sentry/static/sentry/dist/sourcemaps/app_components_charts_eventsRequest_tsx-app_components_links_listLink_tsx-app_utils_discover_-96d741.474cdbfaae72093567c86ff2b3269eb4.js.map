{"version":3,"file":"chunks/app_components_charts_eventsRequest_tsx-app_components_links_listLink_tsx-app_utils_discover_-96d741.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/events.tsx","webpack:///./app/components/charts/barChartZoom.tsx","webpack:///./app/components/charts/components/dataZoomInside.tsx","webpack:///./app/components/charts/components/toolBox.tsx","webpack:///./app/components/charts/eventsRequest.tsx","webpack:///./app/components/charts/loadingPanel.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/components/links/listLink.tsx","webpack:///./app/components/loadingMask.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/getPeriod.tsx","webpack:///./app/utils/performance/histogram/constants.tsx","webpack:///./app/utils/performance/histogram/histogramQuery.tsx","webpack:///./app/utils/performance/histogram/index.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/views/performance/transactionSummary/transactionVitals/constants.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/styles.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/vitalCard.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/vitalsPanel.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/index.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx"],"sourcesContent":["import {LocationDescriptor} from 'history';\nimport pick from 'lodash/pick';\n\nimport {Client} from 'sentry/api';\nimport {canIncludePreviousPeriod} from 'sentry/components/charts/utils';\nimport {\n  DateString,\n  EventsStats,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {LocationQuery} from 'sentry/utils/discover/eventView';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {PERFORMANCE_URL_PARAM} from 'sentry/utils/performance/constants';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\ntype Options = {\n  organization: OrganizationSummary;\n  partial: boolean;\n  comparisonDelta?: number;\n  end?: DateString;\n  environment?: Readonly<string[]>;\n  excludeOther?: boolean;\n  field?: string[];\n  generatePathname?: (org: OrganizationSummary) => string;\n  includePrevious?: boolean;\n  interval?: string;\n  limit?: number;\n  orderby?: string;\n  period?: string | null;\n  project?: Readonly<number[]>;\n  query?: string;\n  queryBatching?: QueryBatching;\n  queryExtras?: Record<string, string>;\n  referrer?: string;\n  start?: DateString;\n  team?: Readonly<string | string[]>;\n  topEvents?: number;\n  userModified?: string;\n  withoutZerofill?: boolean;\n  yAxis?: string | string[];\n};\n\n/**\n * Make requests to `events-stats` endpoint\n *\n * @param {Object} api API client instance\n * @param {Object} options Request parameters\n * @param {Object} options.organization Organization object\n * @param {Number[]} options.project List of project ids\n * @param {String[]} options.environment List of environments to query for\n * @param {Boolean} options.excludeOther Exclude the \"Other\" series when making a topEvents query\n * @param {String[]} options.team List of teams to query for\n * @param {String} options.period Time period to query for, in the format: <integer><units> where units are \"d\" or \"h\"\n * @param {String} options.interval Time interval to group results in, in the format: <integer><units> where units are \"d\", \"h\", \"m\", \"s\"\n * @param {Number} options.comparisonDelta Comparison delta for change alert event stats to include comparison stats\n * @param {Boolean} options.includePrevious Should request also return reqsults for previous period?\n * @param {Number} options.limit The number of rows to return\n * @param {String} options.query Search query\n * @param {QueryBatching} options.queryBatching A container for batching functions from a provider\n * @param {Record<string, string>} options.queryExtras A list of extra query parameters\n * @param {(org: OrganizationSummary) => string} options.generatePathname A function that returns an override for the pathname\n */\nexport const doEventsRequest = (\n  api: Client,\n  {\n    organization,\n    project,\n    environment,\n    team,\n    period,\n    start,\n    end,\n    interval,\n    comparisonDelta,\n    includePrevious,\n    query,\n    yAxis,\n    field,\n    topEvents,\n    orderby,\n    partial,\n    withoutZerofill,\n    referrer,\n    queryBatching,\n    generatePathname,\n    queryExtras,\n    excludeOther,\n    userModified,\n  }: Options\n): Promise<EventsStats | MultiSeriesEventsStats> => {\n  const pathname =\n    generatePathname?.(organization) ??\n    `/organizations/${organization.slug}/events-stats/`;\n\n  const shouldDoublePeriod = canIncludePreviousPeriod(includePrevious, period);\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      interval,\n      comparisonDelta,\n      project,\n      environment,\n      team,\n      query,\n      yAxis,\n      field,\n      topEvents,\n      orderby,\n      partial: partial ? '1' : undefined,\n      withoutZerofill: withoutZerofill ? '1' : undefined,\n      referrer: referrer ? referrer : 'api.organization-event-stats',\n      excludeOther: excludeOther ? '1' : undefined,\n      user_modified: pathname.includes('events-stats') ? userModified : undefined,\n    }).filter(([, value]) => typeof value !== 'undefined')\n  );\n\n  // Doubling period for absolute dates is not accurate unless starting and\n  // ending times are the same (at least for daily intervals). This is\n  // the tradeoff for now.\n  const periodObj = getPeriod({period, start, end}, {shouldDoublePeriod});\n\n  const queryObject = {\n    query: {\n      ...urlQuery,\n      ...periodObj,\n      ...queryExtras,\n    },\n  };\n\n  if (queryBatching?.batchRequest) {\n    return queryBatching.batchRequest(api, pathname, queryObject);\n  }\n\n  return api.requestPromise(pathname, queryObject);\n};\n\nexport type EventQuery = {\n  field: string[];\n  query: string;\n  environment?: string[];\n  equation?: string[];\n  noPagination?: boolean;\n  per_page?: number;\n  project?: string | string[];\n  referrer?: string;\n  sort?: string | string[];\n  team?: string | string[];\n};\n\nexport type TagSegment = {\n  count: number;\n  name: string;\n  url: LocationDescriptor;\n  value: string;\n  isOther?: boolean;\n  key?: string;\n};\n\nexport type Tag = {\n  key: string;\n  topValues: Array<TagSegment>;\n};\n\n/**\n * Fetches tag facets for a query\n */\nexport function fetchTagFacets(\n  api: Client,\n  orgSlug: string,\n  query: EventQuery\n): Promise<Tag[]> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  return api.requestPromise(`/organizations/${orgSlug}/events-facets/`, {\n    query: queryOption,\n  });\n}\n\n/**\n * Fetches total count of events for a given query\n */\nexport function fetchTotalCount(\n  api: Client,\n  orgSlug: String,\n  query: EventQuery & LocationQuery\n): Promise<number> {\n  const urlParams = pick(query, Object.values(PERFORMANCE_URL_PARAM));\n\n  const queryOption = {...urlParams, query: query.query};\n\n  type Response = {\n    count: number;\n  };\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/events-meta/`, {\n      query: queryOption,\n    })\n    .then((res: Response) => res.count);\n}\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport DataZoomInside from 'sentry/components/charts/components/dataZoomInside';\nimport ToolBox from 'sentry/components/charts/components/toolBox';\nimport {EChartChartReadyHandler, EChartDataZoomHandler} from 'sentry/types/echarts';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\n\ntype RenderProps = {\n  dataZoom: ReturnType<typeof DataZoomInside>;\n  onChartReady: EChartChartReadyHandler;\n  onDataZoom: EChartDataZoomHandler;\n  toolBox: ReturnType<typeof ToolBox>;\n};\n\nexport type BarChartBucket = {\n  end: number;\n  start: number;\n};\n\ntype Props = {\n  /**\n   * This is the list of bucket start and end ranges. This is used by the\n   * component to determine the start and end of the zoom.\n   */\n  buckets: BarChartBucket[];\n  /**\n   * The children function that will receive the render props and return\n   * a rendered chart.\n   */\n  children: (props: RenderProps) => React.ReactNode;\n  location: Location;\n  /**\n   * This is the query parameter the end of the zoom will be propagated to.\n   */\n  paramEnd: string;\n  /**\n   * This is the query parameter the start of the zoom will be propagated to.\n   */\n  paramStart: string;\n  /**\n   * If you need the dataZoom control to control more than one chart.\n   * you can provide a list of the axis indexes.\n   */\n  xAxisIndex: number[];\n  /**\n   * This is the minimum width of the zoom. If the targeted zoom area is\n   * smaller than is specified by this parameter, the zoom will be cancelled\n   * and the `onDataZoomCancelled` callback will be called.\n   */\n  minZoomWidth?: number;\n  onChartReady?: EChartChartReadyHandler;\n  onDataZoom?: EChartDataZoomHandler;\n  /**\n   * This callback is called when the zoom action was cancelled. It can happen\n   * when `minZoomWidth` is specified and the user tries to zoom on an area\n   * smaller than that.\n   */\n  onDataZoomCancelled?: () => void;\n  /**\n   *\n   */\n  onHistoryPush?: (start: number, end: number) => void;\n};\n\nclass BarChartZoom extends Component<Props> {\n  zooming: (() => void) | null = null;\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = (_props, chart) => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n\n    // This attempts to activate the area zoom toolbox feature\n    const zoom = chart._componentsViews?.find(c => c._features && c._features.dataZoom);\n    if (zoom && !zoom._features.dataZoom._isZoomActive) {\n      // Calling dispatchAction will re-trigger handleChartFinished\n      chart.dispatchAction({\n        type: 'takeGlobalCursor',\n        key: 'dataZoomSelect',\n        dataZoomSelectActive: true,\n      });\n    }\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {startValue, endValue} = model._payload.batch[0];\n\n    // Both of these values should not be null, but we include it just in case.\n    // These values are null when the user uses the toolbox included in ECharts\n    // to navigate back through zoom history, but we hide it below.\n    if (startValue !== null && endValue !== null) {\n      const {buckets, location, paramStart, paramEnd, minZoomWidth, onHistoryPush} =\n        this.props;\n      const {start} = buckets[startValue];\n      const {end} = buckets[endValue];\n\n      if (minZoomWidth === undefined || end - start > minZoomWidth) {\n        const target = {\n          pathname: location.pathname,\n          query: {\n            ...location.query,\n            [paramStart]: start,\n            [paramEnd]: end,\n          },\n        };\n        if (onHistoryPush) {\n          onHistoryPush(start, end);\n        } else {\n          browserHistory.push(target);\n        }\n      } else {\n        // Dispatch the restore action here to stop ECharts from zooming\n        chart.dispatchAction({type: 'restore'});\n        callIfFunction(this.props.onDataZoomCancelled);\n      }\n    } else {\n      // Dispatch the restore action here to stop ECharts from zooming\n      chart.dispatchAction({type: 'restore'});\n      callIfFunction(this.props.onDataZoomCancelled);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  render() {\n    const {children, xAxisIndex} = this.props;\n\n    const renderProps = {\n      onChartReady: this.handleChartReady,\n      onFinished: this.handleChartFinished,\n      dataZoom: DataZoomInside({xAxisIndex}),\n      // We must include data zoom in the toolbox for the zoom to work,\n      // but we do not want to show the toolbox components.\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default BarChartZoom;\n","import 'echarts/lib/component/dataZoomInside';\n\nimport type {InsideDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: InsideDataZoomComponentOption = {\n  type: 'inside',\n  // Mouse wheel can not trigger zoom\n  zoomOnMouseWheel: false,\n  // The translation (by mouse drag or touch drag) is avialable but zoom is not\n  zoomLock: true,\n  throttle: 50,\n};\n\nexport default function DataZoomInside(\n  props: InsideDataZoomComponentOption | InsideDataZoomComponentOption[]\n): InsideDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import type {ToolboxComponentOption} from 'echarts';\n\nfunction getFeatures({\n  dataZoom,\n  ...features\n}: ToolboxComponentOption['feature'] = {}): ToolboxComponentOption['feature'] {\n  return {\n    ...(dataZoom\n      ? {\n          dataZoom: {\n            yAxisIndex: 'none',\n            title: {\n              zoom: 'zoom',\n              back: 'undo',\n            },\n            ...dataZoom,\n          },\n        }\n      : {}),\n    ...features,\n  };\n}\n\nexport default function ToolBox(\n  options: ToolboxComponentOption,\n  features: ToolboxComponentOption['feature']\n): ToolboxComponentOption {\n  return {\n    right: 0,\n    top: 0,\n    itemSize: 16,\n    // Stack the toolbox under the legend.\n    // so all series names are clickable.\n    z: -1,\n\n    feature: getFeatures(features),\n    ...options,\n  };\n}\n","import {PureComponent} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {doEventsRequest} from 'sentry/actionCreators/events';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {\n  canIncludePreviousPeriod,\n  getPreviousSeriesName,\n  isMultiSeriesStats,\n} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {\n  DateString,\n  EventsStats,\n  EventsStatsData,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {stripEquationPrefix} from 'sentry/utils/discover/fields';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\nexport type TimeSeriesData = {\n  allTimeseriesData?: EventsStatsData;\n  comparisonTimeseriesData?: Series[];\n  originalPreviousTimeseriesData?: EventsStatsData | null;\n  originalTimeseriesData?: EventsStatsData;\n  previousTimeseriesData?: Series[] | null;\n  timeAggregatedData?: Series | {};\n  timeframe?: {end: number; start: number};\n  // timeseries data\n  timeseriesData?: Series[];\n  timeseriesTotals?: {count: number};\n};\n\ntype LoadingStatus = {\n  /**\n   * Whether there was an error retrieving data\n   */\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  errorMessage?: string;\n};\n\n// Can hold additional data from the root an events stat object (eg. start, end, order, isMetricsData).\ninterface AdditionalSeriesInfo {\n  isMetricsData?: boolean;\n}\n\nexport type RenderProps = LoadingStatus &\n  TimeSeriesData & {\n    results?: Series[]; // Chart with multiple series.\n    seriesAdditionalInfo?: Record<string, AdditionalSeriesInfo>;\n  };\n\ntype DefaultProps = {\n  /**\n   * Include data for previous period\n   */\n  includePrevious: boolean;\n  /**\n   * Transform the response data to be something ingestible by charts\n   */\n  includeTransformedData: boolean;\n  /**\n   * Interval to group results in\n   *\n   * e.g. 1d, 1h, 1m, 1s\n   */\n  interval: string;\n  /**\n   * number of rows to return\n   */\n  limit: number;\n  /**\n   * The query string to search events by\n   */\n  query: string;\n  /**\n   * Time delta for comparing intervals of alert metrics, in seconds\n   */\n  comparisonDelta?: number;\n  /**\n   * Absolute end date for query\n   */\n  end?: DateString;\n  /**\n   * Relative time period for query.\n   *\n   * Use `start` and `end` for absolute dates.\n   *\n   * e.g. 24h, 7d, 30d\n   */\n  period?: string | null;\n  /**\n   * Absolute start date for query\n   */\n  start?: DateString;\n};\n\ntype EventsRequestPartialProps = {\n  /**\n   * API client instance\n   */\n  api: Client;\n  children: (renderProps: RenderProps) => React.ReactNode;\n  organization: OrganizationSummary;\n  /**\n   * Whether or not to include the last partial bucket. This happens for example when the\n   * current time is 11:26 and the last bucket ranges from 11:25-11:30. This means that\n   * the last bucket contains 1 minute worth of data while the rest contains 5 minutes.\n   *\n   * This flag indicates whether or not this last bucket should be included in the result.\n   */\n  partial: boolean;\n  /**\n   * Discover needs confirmation to run >30 day >10 project queries,\n   * optional and when not passed confirmation is not required.\n   */\n  confirmedQuery?: boolean;\n  /**\n   * Name used for display current series dataset tooltip\n   */\n  currentSeriesNames?: string[];\n  /**\n   * List of environments to query\n   */\n  environment?: Readonly<string[]>;\n  /**\n   * Is query out of retention\n   */\n  expired?: boolean;\n  /**\n   * List of fields to group with when doing a topEvents request.\n   */\n  field?: string[];\n  /**\n   * Allows overridding the pathname.\n   */\n  generatePathname?: (org: OrganizationSummary) => string;\n  /**\n   * Hide error toast (used for pages which also query eventsV2). Stops error appearing as a toast.\n   */\n  hideError?: boolean;\n  /**\n   * Initial loading state\n   */\n  loading?: boolean;\n  /**\n   * Query name used for displaying error toast if it is out of retention\n   */\n  name?: string;\n  /**\n   * A way to control error if error handling is not owned by the toast.\n   */\n  onError?: (error: string) => void;\n  /**\n   * How to order results when getting top events.\n   */\n  orderby?: string;\n  previousSeriesNames?: string[];\n  /**\n   * List of project ids to query\n   */\n  project?: Readonly<number[]>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  /**\n   * Should loading be shown.\n   */\n  showLoading?: boolean;\n  /**\n   * List of team ids to query\n   */\n  team?: Readonly<string | string[]>;\n  /**\n   * The number of top results to get. When set a multi-series result will be returned\n   * in the `results` child render function.\n   */\n  topEvents?: number;\n  /**\n   * Tracks whether the query was modified by a user in the search bar\n   */\n  userModified?: string;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n  /**\n   * The yAxis being plotted. If multiple yAxis are requested,\n   * the child render function will be called with `results`\n   */\n  yAxis?: string | string[];\n};\n\ntype TimeAggregationProps =\n  | {includeTimeAggregation: true; timeAggregationSeriesName: string}\n  | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};\n\nexport type EventsRequestProps = DefaultProps &\n  TimeAggregationProps &\n  EventsRequestPartialProps;\n\ntype EventsRequestState = {\n  errored: boolean;\n  fetchedWithPrevious: boolean;\n  reloading: boolean;\n  timeseriesData: null | EventsStats | MultiSeriesEventsStats;\n  errorMessage?: string;\n};\n\nconst propNamesToIgnore = [\n  'api',\n  'children',\n  'organization',\n  'loading',\n  'queryBatching',\n  'generatePathname',\n];\nconst omitIgnoredProps = (props: EventsRequestProps) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends PureComponent<EventsRequestProps, EventsRequestState> {\n  static defaultProps: DefaultProps = {\n    period: undefined,\n    start: null,\n    end: null,\n    interval: '1d',\n    comparisonDelta: undefined,\n    limit: 15,\n    query: '',\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  state: EventsRequestState = {\n    reloading: !!this.props.loading,\n    errored: false,\n    timeseriesData: null,\n    fetchedWithPrevious: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: EventsRequestProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {api, confirmedQuery, onError, expired, name, hideError, ...props} = this.props;\n    let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;\n\n    if (confirmedQuery === false) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n      errorMessage: undefined,\n    }));\n\n    let errorMessage;\n    if (expired) {\n      errorMessage = t(\n        '%s has an invalid date range. Please try a more recent date range.',\n        name\n      );\n      addErrorMessage(errorMessage, {append: true});\n\n      this.setState({\n        errored: true,\n        errorMessage,\n      });\n    } else {\n      try {\n        api.clear();\n        timeseriesData = await doEventsRequest(api, props);\n      } catch (resp) {\n        if (resp && resp.responseJSON && resp.responseJSON.detail) {\n          errorMessage = resp.responseJSON.detail;\n        } else {\n          errorMessage = t('Error loading chart data');\n        }\n        if (!hideError) {\n          addErrorMessage(errorMessage);\n        }\n        if (onError) {\n          onError(errorMessage);\n        }\n        this.setState({\n          errored: true,\n          errorMessage,\n        });\n      }\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n      fetchedWithPrevious: props.includePrevious,\n    });\n  };\n\n  /**\n   * Retrieves dataset for the current period (since data can potentially\n   * contain previous period's data), as well as the previous period if\n   * possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = (\n    data: EventsStatsData\n  ): {current: EventsStatsData; previous: EventsStatsData | null} => {\n    const {fetchedWithPrevious} = this.state;\n    const {period, includePrevious} = this.props;\n\n    const hasPreviousPeriod =\n      fetchedWithPrevious || canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n    return {\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp(\n    data: EventsStatsData,\n    getName: (\n      timestamp: number,\n      countArray: {count: number}[],\n      i: number\n    ) => number = timestamp => timestamp * 1000\n  ): SeriesDataUnit[] {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  }\n\n  /**\n   * Get previous period data, but transform timestamps so that data fits unto\n   * the current period's data axis\n   */\n  transformPreviousPeriodData(\n    current: EventsStatsData,\n    previous: EventsStatsData | null,\n    seriesName?: string\n  ): Series | null {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: seriesName ?? 'Previous',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (_timestamp, _countArray, i) => current[i][0] * 1000\n      ),\n      stack: 'previous',\n    };\n  }\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries(data: EventsStatsData, seriesName: string = ''): Series {\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  }\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {\n    return [\n      {\n        seriesName: seriesName || 'Current',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  }\n\n  /**\n   * Transforms comparisonCount in query response into timeseries data to be used in a comparison chart for change alerts\n   */\n  transformComparisonTimeseriesData(data: EventsStatsData): Series[] {\n    return [\n      {\n        seriesName: 'comparisonCount()',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce(\n            (acc, {comparisonCount}) => acc + (comparisonCount ?? 0),\n            0\n          ),\n        })),\n      },\n    ];\n  }\n\n  processData(response: EventsStats, seriesIndex: number = 0, seriesName?: string) {\n    const {data, isMetricsData, totals} = response;\n    const {\n      includeTransformedData,\n      includeTimeAggregation,\n      timeAggregationSeriesName,\n      currentSeriesNames,\n      previousSeriesNames,\n      comparisonDelta,\n    } = this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData\n      ? this.transformTimeseriesData(\n          current,\n          seriesName ?? currentSeriesNames?.[seriesIndex]\n        )\n      : [];\n    const transformedComparisonData =\n      includeTransformedData && comparisonDelta\n        ? this.transformComparisonTimeseriesData(current)\n        : [];\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(\n          current,\n          previous,\n          (seriesName ? getPreviousSeriesName(seriesName) : undefined) ??\n            previousSeriesNames?.[seriesIndex]\n        )\n      : null;\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName || '')\n      : {};\n    const timeframe =\n      response.start && response.end\n        ? !previous\n          ? {\n              start: response.start * 1000,\n              end: response.end * 1000,\n            }\n          : {\n              // Find the midpoint of start & end since previous includes 2x data\n              start: (response.start + response.end) * 500,\n              end: response.end * 1000,\n            }\n        : undefined;\n    return {\n      data: transformedData,\n      comparisonData: transformedComparisonData,\n      allData: data,\n      originalData: current,\n      totals,\n      isMetricsData,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n      timeframe,\n    };\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n    const {topEvents} = this.props;\n    const {timeseriesData, reloading, errored, errorMessage} = this.state;\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n    if (isMultiSeriesStats(timeseriesData, defined(topEvents))) {\n      // Convert multi-series results into chartable series. Multi series results\n      // are created when multiple yAxis are used or a topEvents request is made.\n      // Convert the timeseries data into a multi-series result set.\n      // As the server will have replied with a map like:\n      // {[titleString: string]: EventsStats}\n      let timeframe: {end: number; start: number} | undefined = undefined;\n      const seriesAdditionalInfo: Record<string, AdditionalSeriesInfo> = {};\n      const sortedTimeseriesData = Object.keys(timeseriesData)\n        .map(\n          (\n            seriesName: string,\n            index: number\n          ): [number, Series, Series | null, AdditionalSeriesInfo] => {\n            const seriesData: EventsStats = timeseriesData[seriesName];\n            const processedData = this.processData(\n              seriesData,\n              index,\n              stripEquationPrefix(seriesName)\n            );\n            if (!timeframe) {\n              timeframe = processedData.timeframe;\n            }\n            if (processedData.isMetricsData) {\n              seriesAdditionalInfo[seriesName] = {\n                isMetricsData: processedData.isMetricsData,\n              };\n            }\n            return [\n              seriesData.order || 0,\n              processedData.data[0],\n              processedData.previousData,\n              {isMetricsData: processedData.isMetricsData},\n            ];\n          }\n        )\n        .sort((a, b) => a[0] - b[0]);\n      const results: Series[] = sortedTimeseriesData.map(item => {\n        return item[1];\n      });\n      const previousTimeseriesData: Series[] | undefined = sortedTimeseriesData.some(\n        item => item[2] === null\n      )\n        ? undefined\n        : sortedTimeseriesData.map(item => {\n            return item[2] as Series;\n          });\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        results,\n        timeframe,\n        previousTimeseriesData,\n        seriesAdditionalInfo,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    if (timeseriesData) {\n      const {\n        data: transformedTimeseriesData,\n        comparisonData: transformedComparisonTimeseriesData,\n        allData: allTimeseriesData,\n        originalData: originalTimeseriesData,\n        totals: timeseriesTotals,\n        originalPreviousData: originalPreviousTimeseriesData,\n        previousData: previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        isMetricsData,\n      } = this.processData(timeseriesData);\n\n      const seriesAdditionalInfo = {\n        [this.props.currentSeriesNames?.[0] ?? 'current']: {isMetricsData},\n      };\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        // meta data,\n        seriesAdditionalInfo,\n        // timeseries data\n        timeseriesData: transformedTimeseriesData,\n        comparisonTimeseriesData: transformedComparisonTimeseriesData,\n        allTimeseriesData,\n        originalTimeseriesData,\n        timeseriesTotals,\n        originalPreviousTimeseriesData,\n        previousTimeseriesData: previousTimeseriesData\n          ? [previousTimeseriesData]\n          : previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    return children({\n      loading,\n      reloading,\n      errored,\n      errorMessage,\n      ...props,\n    });\n  }\n}\nexport default EventsRequest;\n","import styled from '@emotion/styled';\n\nimport LoadingMask from 'sentry/components/loadingMask';\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n  height?: string;\n}\n\nconst LoadingPanel = styled(({height: _height, ...props}: Props) => (\n  <div {...props}>\n    <LoadingMask />\n  </div>\n))`\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n\nLoadingPanel.defaultProps = {\n  height: '200px',\n};\n\nexport default LoadingPanel;\n","import styled from '@emotion/styled';\n\nimport LoadingMask, {LoadingMaskProps} from 'sentry/components/loadingMask';\n\ninterface TransparentLoadingMaskProps extends LoadingMaskProps {\n  visible: boolean;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: TransparentLoadingMaskProps) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<TransparentLoadingMaskProps>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import {Component} from 'react';\nimport {Link as RouterLink, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {LocationDescriptor} from 'history';\nimport omit from 'lodash/omit';\nimport * as qs from 'query-string';\n\ntype DefaultProps = {\n  activeClassName: string;\n  disabled: boolean;\n  index: boolean;\n};\n\ntype LinkProps = Omit<React.ComponentProps<typeof RouterLink>, 'to'>;\n\ntype Props = WithRouterProps &\n  Partial<DefaultProps> &\n  LinkProps & {\n    /**\n     * Link target. We don't want to expose the ToLocationFunction on this component.\n     */\n    to: LocationDescriptor;\n    // If supplied by parent component, decides whether link element\n    // is \"active\" or not ... overriding default behavior of strict\n    // route matching\n    isActive?: (location: LocationDescriptor, indexOnly?: boolean) => boolean;\n    query?: string;\n  };\n\nclass ListLink extends Component<Props> {\n  static displayName = 'ListLink';\n\n  static defaultProps: DefaultProps = {\n    activeClassName: 'active',\n    index: false,\n    disabled: false,\n  };\n\n  isActive() {\n    const {isActive, to, query, index, router} = this.props;\n    const queryData = query ? qs.parse(query) : undefined;\n    const target: LocationDescriptor =\n      typeof to === 'string' ? {pathname: to, query: queryData} : to;\n\n    if (typeof isActive === 'function') {\n      return isActive(target, index);\n    }\n\n    return router.isActive(target, index);\n  }\n\n  getClassName = () => {\n    const _classNames = {};\n    const {className, activeClassName} = this.props;\n\n    if (className) {\n      _classNames[className] = true;\n    }\n\n    if (this.isActive() && activeClassName) {\n      _classNames[activeClassName] = true;\n    }\n\n    return classNames(_classNames);\n  };\n\n  render() {\n    const {index, children, to, disabled, ...props} = this.props;\n    const carriedProps = omit(\n      props,\n      'activeClassName',\n      'css',\n      'isActive',\n      'index',\n      'router',\n      'location'\n    );\n\n    return (\n      <StyledLi className={this.getClassName()} disabled={disabled}>\n        <RouterLink {...carriedProps} onlyActiveOnIndex={index} to={disabled ? '' : to}>\n          {children}\n        </RouterLink>\n      </StyledLi>\n    );\n  }\n}\n\nexport default withRouter(ListLink);\n\nconst StyledLi = styled('li', {\n  shouldForwardProp: prop => prop !== 'disabled',\n})<{disabled?: boolean}>`\n  ${p =>\n    p.disabled &&\n    `\n   a {\n    color:${p.theme.disabled} !important;\n    pointer-events: none;\n    :hover {\n      color: ${p.theme.disabled}  !important;\n    }\n   }\n`}\n`;\n","import styled from '@emotion/styled';\n\nexport interface LoadingMaskProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst LoadingMask = styled('div')<LoadingMaskProps>`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n`;\n\nexport default LoadingMask;\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import moment from 'moment';\n\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {DateString} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\n\ntype DateObject = {\n  /**\n   * Ending date object\n   */\n  end?: DateString;\n  /**\n   * Relative period string in format \"<int><unit>\" (e.g. 4d for 4 days)\n   */\n  period?: string | null;\n  /**\n   * Starting date object\n   */\n  start?: DateString;\n};\n\ntype Options = {\n  /**\n   * Doubles the given period (useful for getting previous period data)\n   */\n  shouldDoublePeriod?: boolean;\n};\n\n/**\n * Gets the period to query with if we need to double the initial period in order\n * to get data for the previous period\n *\n * Returns an object with either a period or start/end dates ({statsPeriod: string} or {start: string, end: string})\n */\nexport function getPeriod(\n  {period, start, end}: DateObject,\n  {shouldDoublePeriod}: Options = {}\n) {\n  if (!period && !start && !end) {\n    period = DEFAULT_STATS_PERIOD;\n  }\n\n  // you can not specify both relative and absolute periods\n  // relative period takes precedence\n  if (period) {\n    if (!shouldDoublePeriod) {\n      return {statsPeriod: period};\n    }\n    const [, periodNumber, periodLength] = period.match(/([0-9]+)([mhdw])/)!;\n\n    return {statsPeriod: `${parseInt(periodNumber, 10) * 2}${periodLength}`};\n  }\n\n  if (!start || !end) {\n    throw new Error('start and end required');\n  }\n\n  const formattedStart = getUtcDateString(start);\n  const formattedEnd = getUtcDateString(end);\n\n  if (shouldDoublePeriod) {\n    // get duration of end - start and double\n    const diff = moment(end).diff(moment(start));\n\n    const previousPeriodStart = moment(start).subtract(diff);\n\n    // This is not as accurate as having 2 start/end objs\n    return {\n      start: getUtcDateString(previousPeriodStart),\n      end: formattedEnd,\n    };\n  }\n\n  return {\n    start: formattedStart,\n    end: formattedEnd,\n  };\n}\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nimport {DataFilter} from './types';\n\nexport const FILTER_OPTIONS: SelectValue<DataFilter>[] = [\n  {label: t('Exclude'), value: 'exclude_outliers'},\n  {label: t('Include'), value: 'all'},\n];\n","import {Fragment} from 'react';\nimport omit from 'lodash/omit';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {DataFilter, HistogramData} from 'sentry/utils/performance/histogram/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Histograms = Record<string, HistogramData>;\n\ntype HistogramProps = {\n  fields: string[];\n  numBuckets: number;\n  dataFilter?: DataFilter;\n  didReceiveMultiAxis?: (axisCounts: Record<string, number>) => void;\n  max?: number;\n  min?: number;\n  precision?: number;\n};\n\ntype RequestProps = DiscoverQueryProps & HistogramProps;\n\nexport type HistogramQueryChildrenProps = Omit<\n  GenericChildrenProps<HistogramProps>,\n  'tableData'\n> & {\n  histograms: Histograms | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: HistogramQueryChildrenProps) => React.ReactNode;\n};\n\nfunction getHistogramRequestPayload(props: RequestProps) {\n  const {fields, numBuckets, min, max, precision, dataFilter, eventView, location} =\n    props;\n  const baseApiPayload = {\n    field: fields,\n    numBuckets,\n    min,\n    max,\n    precision,\n    dataFilter,\n  };\n  const additionalApiPayload = omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n  ]);\n  const apiPayload = Object.assign(baseApiPayload, additionalApiPayload);\n  return apiPayload;\n}\n\nfunction HistogramQuery(props: Props) {\n  const {children, fields, didReceiveMultiAxis} = props;\n\n  function didFetch(data: Histograms) {\n    if (didReceiveMultiAxis) {\n      const counts: Record<string, number> = {};\n      Object.entries(data).forEach(\n        ([key, values]) =>\n          (counts[key] = values.length\n            ? values.reduce((prev, curr) => prev + curr.count, 0)\n            : 0)\n      );\n      didReceiveMultiAxis(counts);\n    }\n  }\n\n  if (fields.length === 0) {\n    return (\n      <Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          pageLinks: null,\n          histograms: {},\n        })}\n      </Fragment>\n    );\n  }\n\n  return (\n    <GenericDiscoverQuery<Histograms, HistogramProps>\n      route=\"events-histogram\"\n      getRequestPayload={getHistogramRequestPayload}\n      didFetch={didFetch}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({histograms: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(HistogramQuery);\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {SelectValue} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {FILTER_OPTIONS} from './constants';\nimport {DataFilter} from './types';\n\ntype HistogramChildrenProps = {\n  activeFilter: SelectValue<DataFilter>;\n  filterOptions: typeof FILTER_OPTIONS;\n  handleFilterChange: (option: string) => void;\n  handleResetView: () => void;\n  isZoomed: boolean;\n};\n\ntype Props = {\n  children: (props: HistogramChildrenProps) => React.ReactNode;\n  location: Location;\n  zoomKeys: string[];\n};\n\nclass Histogram extends Component<Props> {\n  isZoomed() {\n    const {location, zoomKeys} = this.props;\n    return zoomKeys.map(key => location.query[key]).some(value => value !== undefined);\n  }\n\n  handleResetView = () => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: removeHistogramQueryStrings(location, zoomKeys),\n    });\n  };\n\n  getActiveFilter() {\n    const {location} = this.props;\n\n    const dataFilter = location.query.dataFilter\n      ? decodeScalar(location.query.dataFilter)\n      : FILTER_OPTIONS[0].value;\n    return FILTER_OPTIONS.find(item => item.value === dataFilter) || FILTER_OPTIONS[0];\n  }\n\n  handleFilterChange = (value: string) => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...removeHistogramQueryStrings(location, zoomKeys),\n        dataFilter: value,\n      },\n    });\n  };\n\n  render() {\n    const childrenProps = {\n      isZoomed: this.isZoomed(),\n      handleResetView: this.handleResetView,\n      activeFilter: this.getActiveFilter(),\n      handleFilterChange: this.handleFilterChange,\n      filterOptions: FILTER_OPTIONS,\n    };\n    return this.props.children(childrenProps);\n  }\n}\n\nexport function removeHistogramQueryStrings(location: Location, zoomKeys: string[]) {\n  const query: Location['query'] = {...location.query, cursor: undefined};\n\n  delete query.dataFilter;\n  // reset all zoom parameters\n  zoomKeys.forEach(key => delete query[key]);\n\n  return query;\n}\n\nexport default Histogram;\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {WebVital} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {VitalGroup} from 'sentry/utils/performance/vitals/types';\nimport theme from 'sentry/utils/theme';\n\nexport const NUM_BUCKETS = 100;\n\nexport const PERCENTILE = 0.75;\n\n/**\n * This defines the grouping for histograms. Histograms that are in the same group\n * will be queried together on initial load for alignment. However, the zoom controls\n * are defined for each measurement independently.\n */\nconst _VITAL_GROUPS = [\n  {\n    vitals: [WebVital.FP, WebVital.FCP, WebVital.LCP],\n    min: 0,\n  },\n  {\n    vitals: [WebVital.FID],\n    min: 0,\n    precision: 2,\n  },\n  {\n    vitals: [WebVital.CLS],\n    min: 0,\n    precision: 2,\n  },\n];\n\nconst _COLORS = [\n  ...theme.charts.getColorPalette(\n    _VITAL_GROUPS.reduce((count, {vitals}) => count + vitals.length, 0) - 1\n  ),\n].reverse();\n\nexport const VITAL_GROUPS: VitalGroup[] = _VITAL_GROUPS.map(group => ({\n  ...group,\n  colors: _COLORS.splice(0, group.vitals.length),\n}));\n\nexport const ZOOM_KEYS = _VITAL_GROUPS.reduce((keys: string[], {vitals}) => {\n  vitals.forEach(vital => {\n    const vitalSlug = WEB_VITAL_DETAILS[vital].slug;\n    keys.push(`${vitalSlug}Start`);\n    keys.push(`${vitalSlug}End`);\n  });\n  return keys;\n}, []);\n","import styled from '@emotion/styled';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport {PanelItem} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\n\nexport const Card = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: 325px minmax(100px, auto);\n  padding: 0;\n`;\n\nexport const CardSection = styled('div')`\n  padding: ${space(3)};\n`;\n\nexport const CardSummary = styled(CardSection)`\n  position: relative;\n  border-right: 1px solid ${p => p.theme.border};\n  grid-column: 1/1;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const CardSectionHeading = styled(SectionHeading)`\n  margin: 0px;\n`;\n\nexport const Description = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.subText};\n`;\n\nexport const StatNumber = styled('div')`\n  font-size: 32px;\n`;\n","import {Component} from 'react';\nimport {withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport throttle from 'lodash/throttle';\n\nimport Button from 'sentry/components/button';\nimport {BarChart, BarChartSeries} from 'sentry/components/charts/barChart';\nimport BarChartZoom from 'sentry/components/charts/barChartZoom';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getAggregateAlias, WebVital} from 'sentry/utils/discover/fields';\nimport {formatAbbreviatedNumber, formatFloat, getDuration} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {DataFilter, HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {\n  computeBuckets,\n  formatHistogramData,\n} from 'sentry/utils/performance/histogram/utils';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\nimport {VitalData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {Theme} from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {EventsDisplayFilterName} from 'sentry/views/performance/transactionSummary/transactionEvents/utils';\n\nimport {VitalBar} from '../../landing/vitalsCards';\nimport {\n  VitalState,\n  vitalStateColors,\n  webVitalMeh,\n  webVitalPoor,\n} from '../../vitalDetail/utils';\n\nimport {NUM_BUCKETS, PERCENTILE} from './constants';\nimport {Card, CardSectionHeading, CardSummary, Description, StatNumber} from './styles';\nimport {Rectangle} from './types';\nimport {asPixelRect, findNearestBucketIndex, getRefRect, mapPoint} from './utils';\n\ntype Props = {\n  chartData: HistogramData;\n  colors: [string];\n  error: boolean;\n  eventView: EventView;\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  summaryData: VitalData | null;\n  theme: Theme;\n  vital: WebVital;\n  vitalDetails: Vital;\n  dataFilter?: DataFilter;\n  max?: number;\n  min?: number;\n  precision?: number;\n};\n\ntype State = {\n  /**\n   * This is a pair of reference points on the graph that we can use to map any\n   * other points to their pixel coordinates on the graph.\n   *\n   * The x values  here are the index of the cooresponding bucket and the y value\n   * are the respective counts.\n   *\n   * Invariances:\n   * - refDataRect.point1.x < refDataRect.point2.x\n   * - refDataRect.point1.y < refDataRect.point2.y\n   */\n  refDataRect: Rectangle | null;\n  /**\n   * This is the cooresponding pixel coordinate of the references points from refDataRect.\n   *\n   * ECharts' pixel coordinates are relative to the top left whereas the axis coordinates\n   * used here are relative to the bottom right. Because of this and the invariances imposed\n   * on refDataRect, these points have the difference invariances.\n   *\n   * Invariances:\n   * - refPixelRect.point1.x < refPixelRect.point2.x\n   * - refPixelRect.point1.y > refPixelRect.point2.y\n   */\n  refPixelRect: Rectangle | null;\n};\n\nclass VitalCard extends Component<Props, State> {\n  state: State = {\n    refDataRect: null,\n    refPixelRect: null,\n  };\n\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State) {\n    const {isLoading, error, chartData} = nextProps;\n\n    if (isLoading || error === null) {\n      return {...prevState};\n    }\n\n    const refDataRect = getRefRect(chartData);\n    if (\n      prevState.refDataRect === null ||\n      (refDataRect !== null && !isEqual(refDataRect, prevState.refDataRect))\n    ) {\n      return {\n        ...prevState,\n        refDataRect,\n      };\n    }\n\n    return {...prevState};\n  }\n\n  trackOpenInDiscoverClicked = () => {\n    const {organization} = this.props;\n    const {vitalDetails: vital} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.vitals.open_in_discover',\n      eventName: 'Performance Views: Open vitals in discover',\n      organization_id: organization.id,\n      vital: vital.slug,\n    });\n  };\n\n  trackOpenAllEventsClicked = () => {\n    const {organization} = this.props;\n    const {vitalDetails: vital} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.vitals.open_all_events',\n      eventName: 'Performance Views: Open vitals in all events',\n      organization_id: organization.id,\n      vital: vital.slug,\n    });\n  };\n\n  get summary() {\n    const {summaryData} = this.props;\n    return summaryData?.p75 ?? null;\n  }\n\n  get failureRate() {\n    const {summaryData} = this.props;\n    const numerator = summaryData?.poor ?? 0;\n    const denominator = summaryData?.total ?? 0;\n    return denominator <= 0 ? 0 : numerator / denominator;\n  }\n\n  getFormattedStatNumber() {\n    const {vitalDetails: vital} = this.props;\n    const summary = this.summary;\n    const {type} = vital;\n\n    return summary === null\n      ? '\\u2014'\n      : type === 'duration'\n      ? getDuration(summary / 1000, 2, true)\n      : formatFloat(summary, 2);\n  }\n\n  renderSummary() {\n    const {\n      vitalDetails: vital,\n      eventView,\n      organization,\n      min,\n      max,\n      dataFilter,\n    } = this.props;\n    const {slug, name, description} = vital;\n\n    const column = `measurements.${slug}`;\n\n    const newEventView = eventView\n      .withColumns([\n        {kind: 'field', field: 'transaction'},\n        {\n          kind: 'function',\n          function: ['percentile', column, PERCENTILE.toString(), undefined],\n        },\n        {kind: 'function', function: ['count', '', '', undefined]},\n      ])\n      .withSorts([\n        {\n          kind: 'desc',\n          field: getAggregateAlias(`percentile(${column},${PERCENTILE.toString()})`),\n        },\n      ]);\n\n    const query = new MutableSearch(newEventView.query ?? '');\n    query.addFilterValues('has', [column]);\n    // add in any range constraints if any\n    if (min !== undefined || max !== undefined) {\n      if (min !== undefined) {\n        query.addFilterValues(column, [`>=${min}`]);\n      }\n      if (max !== undefined) {\n        query.addFilterValues(column, [`<=${max}`]);\n      }\n    }\n    newEventView.query = query.formatString();\n\n    return (\n      <CardSummary>\n        <SummaryHeading>\n          <CardSectionHeading>{`${name} (${slug.toUpperCase()})`}</CardSectionHeading>\n        </SummaryHeading>\n        <StatNumber>\n          {getDynamicText({\n            value: this.getFormattedStatNumber(),\n            fixed: '\\u2014',\n          })}\n        </StatNumber>\n        <Description>{description}</Description>\n        <div>\n          <Button\n            size=\"xsmall\"\n            to={newEventView\n              .withColumns([{kind: 'field', field: column}])\n              .withSorts([{kind: 'desc', field: column}])\n              .getPerformanceTransactionEventsViewUrlTarget(organization.slug, {\n                showTransactions:\n                  dataFilter === 'all'\n                    ? EventsDisplayFilterName.p100\n                    : EventsDisplayFilterName.p75,\n                webVital: column as WebVital,\n              })}\n            onClick={this.trackOpenAllEventsClicked}\n          >\n            {t('View All Events')}\n          </Button>\n        </div>\n      </CardSummary>\n    );\n  }\n\n  /**\n   * This callback happens everytime ECharts renders. This is NOT when ECharts\n   * finishes rendering, so it can be called quite frequently. The calculations\n   * here can get expensive if done frequently, furthermore, this can trigger a\n   * state change leading to a re-render. So slow down the updates here as they\n   * do not need to be updated every single time.\n   */\n  handleRendered = throttle(\n    (_, chartRef) => {\n      const {chartData} = this.props;\n      const {refDataRect} = this.state;\n\n      if (refDataRect === null || chartData.length < 1) {\n        return;\n      }\n\n      const refPixelRect =\n        refDataRect === null ? null : asPixelRect(chartRef, refDataRect!);\n      if (refPixelRect !== null && !isEqual(refPixelRect, this.state.refPixelRect)) {\n        this.setState({refPixelRect});\n      }\n    },\n    200,\n    {leading: true}\n  );\n\n  handleDataZoomCancelled = () => {};\n\n  renderHistogram() {\n    const {\n      theme,\n      location,\n      isLoading,\n      chartData,\n      summaryData,\n      error,\n      colors,\n      vital,\n      vitalDetails,\n      precision = 0,\n    } = this.props;\n    const {slug} = vitalDetails;\n\n    const series = this.getSeries();\n\n    const xAxis = {\n      type: 'category' as const,\n      truncate: true,\n      axisTick: {\n        alignWithLabel: true,\n      },\n    };\n\n    const values = series.data.map(point => point.value);\n    const max = values.length ? Math.max(...values) : undefined;\n\n    const yAxis = {\n      type: 'value' as const,\n      max,\n      axisLabel: {\n        color: theme.chartLabel,\n        formatter: formatAbbreviatedNumber,\n      },\n    };\n\n    const allSeries = [series];\n    if (!isLoading && !error) {\n      const baselineSeries = this.getBaselineSeries();\n      if (baselineSeries !== null) {\n        allSeries.push(baselineSeries);\n      }\n    }\n\n    const vitalData =\n      !isLoading && !error && summaryData !== null ? {[vital]: summaryData} : {};\n\n    return (\n      <BarChartZoom\n        minZoomWidth={10 ** -precision * NUM_BUCKETS}\n        location={location}\n        paramStart={`${slug}Start`}\n        paramEnd={`${slug}End`}\n        xAxisIndex={[0]}\n        buckets={computeBuckets(chartData)}\n        onDataZoomCancelled={this.handleDataZoomCancelled}\n      >\n        {zoomRenderProps => (\n          <Container>\n            <TransparentLoadingMask visible={isLoading} />\n            <PercentContainer>\n              <VitalBar\n                isLoading={isLoading}\n                data={vitalData}\n                vital={vital}\n                showBar={false}\n                showStates={false}\n                showVitalPercentNames={false}\n                showVitalThresholds={false}\n                showDurationDetail={false}\n              />\n            </PercentContainer>\n            {getDynamicText({\n              value: (\n                <BarChart\n                  series={allSeries}\n                  xAxis={xAxis}\n                  yAxis={yAxis}\n                  colors={colors}\n                  onRendered={this.handleRendered}\n                  grid={{\n                    left: space(3),\n                    right: space(3),\n                    top: space(3),\n                    bottom: space(1.5),\n                  }}\n                  stacked\n                  {...zoomRenderProps}\n                />\n              ),\n              fixed: <Placeholder testId=\"skeleton-ui\" height=\"200px\" />,\n            })}\n          </Container>\n        )}\n      </BarChartZoom>\n    );\n  }\n\n  bucketWidth() {\n    const {chartData} = this.props;\n    // We can assume that all buckets are of equal width, use the first two\n    // buckets to get the width. The value of each histogram function indicates\n    // the beginning of the bucket.\n    return chartData.length >= 2 ? chartData[1].bin - chartData[0].bin : 0;\n  }\n\n  getSeries() {\n    const {theme, chartData, precision, vitalDetails, vital} = this.props;\n\n    const additionalFieldsFn = bucket => {\n      return {\n        itemStyle: {color: theme[this.getVitalsColor(vital, bucket)]},\n      };\n    };\n\n    const data = formatHistogramData(chartData, {\n      precision: precision === 0 ? undefined : precision,\n      type: vitalDetails.type,\n      additionalFieldsFn,\n    });\n\n    return {\n      seriesName: t('Count'),\n      data,\n    };\n  }\n\n  getVitalsColor(vital: WebVital, value: number) {\n    const poorThreshold = webVitalPoor[vital];\n    const mehThreshold = webVitalMeh[vital];\n\n    if (value >= poorThreshold) {\n      return vitalStateColors[VitalState.POOR];\n    }\n    if (value >= mehThreshold) {\n      return vitalStateColors[VitalState.MEH];\n    }\n    return vitalStateColors[VitalState.GOOD];\n  }\n\n  getBaselineSeries(): BarChartSeries | null {\n    const {theme, chartData} = this.props;\n    const summary = this.summary;\n    if (summary === null || this.state.refPixelRect === null) {\n      return null;\n    }\n\n    const summaryBucket = findNearestBucketIndex(chartData, summary);\n    if (summaryBucket === null || summaryBucket === -1) {\n      return null;\n    }\n\n    const thresholdPixelBottom = mapPoint(\n      {\n        // subtract 0.5 from the x here to ensure that the threshold lies between buckets\n        x: summaryBucket - 0.5,\n        y: 0,\n      },\n      this.state.refDataRect!,\n      this.state.refPixelRect!\n    );\n    if (thresholdPixelBottom === null) {\n      return null;\n    }\n\n    const thresholdPixelTop = mapPoint(\n      {\n        // subtract 0.5 from the x here to ensure that the threshold lies between buckets\n        x: summaryBucket - 0.5,\n        y: Math.max(...chartData.map(data => data.count)) || 1,\n      },\n      this.state.refDataRect!,\n      this.state.refPixelRect!\n    );\n    if (thresholdPixelTop === null) {\n      return null;\n    }\n\n    const markLine = MarkLine({\n      animationDuration: 200,\n      data: [[thresholdPixelBottom, thresholdPixelTop] as any],\n      label: {\n        show: false,\n      },\n      lineStyle: {\n        color: theme.textColor,\n        type: 'solid',\n      },\n      tooltip: {\n        formatter: () => {\n          return [\n            '<div class=\"tooltip-series tooltip-series-solo\">',\n            '<span class=\"tooltip-label\">',\n            `<strong>${t('p75')}</strong>`,\n            '</span>',\n            '</div>',\n            '<div class=\"tooltip-arrow\"></div>',\n          ].join('');\n        },\n      },\n    });\n\n    return {\n      seriesName: t('p75'),\n      data: [],\n      markLine,\n    };\n  }\n\n  render() {\n    return (\n      <Card>\n        {this.renderSummary()}\n        {this.renderHistogram()}\n      </Card>\n    );\n  }\n}\n\nconst SummaryHeading = styled('div')`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Container = styled('div')`\n  position: relative;\n`;\n\nconst PercentContainer = styled('div')`\n  position: absolute;\n  top: ${space(2)};\n  right: ${space(3)};\n  z-index: 2;\n`;\n\nexport default withTheme(VitalCard);\n","import {Component, Fragment} from 'react';\nimport {Location} from 'history';\n\nimport {Panel} from 'sentry/components/panels';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport HistogramQuery from 'sentry/utils/performance/histogram/histogramQuery';\nimport {DataFilter, HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {VitalGroup} from 'sentry/utils/performance/vitals/types';\nimport {VitalData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {NUM_BUCKETS, VITAL_GROUPS} from './constants';\nimport VitalCard from './vitalCard';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  results: object;\n  dataFilter?: DataFilter;\n};\n\nclass VitalsPanel extends Component<Props> {\n  renderVitalCard(\n    vital: WebVital,\n    isLoading: boolean,\n    error: boolean,\n    data: VitalData | null,\n    histogram: HistogramData,\n    color: [string],\n    min?: number,\n    max?: number,\n    precision?: number\n  ) {\n    const {location, organization, eventView, dataFilter} = this.props;\n    const vitalDetails = WEB_VITAL_DETAILS[vital];\n\n    const zoomed = min !== undefined || max !== undefined;\n\n    return (\n      <HistogramQuery\n        location={location}\n        orgSlug={organization.slug}\n        eventView={eventView}\n        numBuckets={NUM_BUCKETS}\n        fields={zoomed ? [vital] : []}\n        min={min}\n        max={max}\n        precision={precision}\n        dataFilter={dataFilter}\n      >\n        {results => {\n          const loading = zoomed ? results.isLoading : isLoading;\n          const errored = zoomed ? results.error !== null : error;\n          const chartData = zoomed ? results.histograms?.[vital] ?? histogram : histogram;\n          return (\n            <VitalCard\n              location={location}\n              isLoading={loading}\n              error={errored}\n              vital={vital}\n              vitalDetails={vitalDetails}\n              summaryData={data}\n              chartData={chartData}\n              colors={color}\n              eventView={eventView}\n              organization={organization}\n              min={min}\n              max={max}\n              precision={precision}\n              dataFilter={dataFilter}\n            />\n          );\n        }}\n      </HistogramQuery>\n    );\n  }\n\n  renderVitalGroup(group: VitalGroup, summaryResults) {\n    const {location, organization, eventView, dataFilter} = this.props;\n    const {vitals, colors, min, max, precision} = group;\n\n    const bounds = vitals.reduce(\n      (\n        allBounds: Partial<\n          Record<WebVital, {end: string | undefined; start: string | undefined}>\n        >,\n        vital: WebVital\n      ) => {\n        const slug = WEB_VITAL_DETAILS[vital].slug;\n        allBounds[vital] = {\n          start: decodeScalar(location.query[`${slug}Start`]),\n          end: decodeScalar(location.query[`${slug}End`]),\n        };\n        return allBounds;\n      },\n      {}\n    );\n\n    return (\n      <HistogramQuery\n        location={location}\n        orgSlug={organization.slug}\n        eventView={eventView}\n        numBuckets={NUM_BUCKETS}\n        fields={vitals}\n        min={min}\n        max={max}\n        precision={precision}\n        dataFilter={dataFilter}\n      >\n        {multiHistogramResults => {\n          const isLoading = summaryResults.isLoading || multiHistogramResults.isLoading;\n          const error =\n            summaryResults.error !== null || multiHistogramResults.error !== null;\n          return (\n            <Fragment>\n              {vitals.map((vital, index) => {\n                const data = summaryResults?.vitalsData?.[vital] ?? null;\n                const histogram = multiHistogramResults.histograms?.[vital] ?? [];\n                const {start, end} = bounds[vital] ?? {};\n\n                return (\n                  <Fragment key={vital}>\n                    {this.renderVitalCard(\n                      vital,\n                      isLoading,\n                      error,\n                      data,\n                      histogram,\n                      [colors[index]],\n                      parseBound(start, precision),\n                      parseBound(end, precision),\n                      precision\n                    )}\n                  </Fragment>\n                );\n              })}\n            </Fragment>\n          );\n        }}\n      </HistogramQuery>\n    );\n  }\n\n  render() {\n    const {results} = this.props;\n\n    return (\n      <Panel>\n        <Fragment>\n          {VITAL_GROUPS.map(vitalGroup => (\n            <Fragment key={vitalGroup.vitals.join('')}>\n              {this.renderVitalGroup(vitalGroup, results)}\n            </Fragment>\n          ))}\n        </Fragment>\n      </Panel>\n    );\n  }\n}\n\nfunction parseBound(\n  boundString: string | undefined,\n  precision: number | undefined\n): number | undefined {\n  if (boundString === undefined) {\n    return undefined;\n  }\n  if (precision === undefined || precision === 0) {\n    return parseInt(boundString, 10);\n  }\n  return parseFloat(boundString);\n}\n\nexport default VitalsPanel;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport Histogram from 'sentry/utils/performance/histogram';\nimport {FILTER_OPTIONS} from 'sentry/utils/performance/histogram/constants';\nimport VitalsCardsDiscoverQuery from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {VITAL_GROUPS, ZOOM_KEYS} from './constants';\nimport {isMissingVitalsData} from './utils';\nimport VitalsPanel from './vitalsPanel';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction VitalsContent(props: Props) {\n  const {location, organization, eventView} = props;\n  const query = decodeScalar(location.query.query, '');\n\n  const handleSearch = (newQuery: string) => {\n    const queryParams = normalizeDateTimeParams({\n      ...(location.query || {}),\n      query: newQuery,\n    });\n\n    // do not propagate pagination when making a new search\n    delete queryParams.cursor;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: queryParams,\n    });\n  };\n\n  const allVitals = VITAL_GROUPS.reduce((keys: WebVital[], {vitals}) => {\n    return keys.concat(vitals);\n  }, []);\n\n  return (\n    <Histogram location={location} zoomKeys={ZOOM_KEYS}>\n      {({activeFilter, handleFilterChange, handleResetView, isZoomed}) => (\n        <Layout.Main fullWidth>\n          <VitalsCardsDiscoverQuery\n            eventView={eventView}\n            orgSlug={organization.slug}\n            location={location}\n            vitals={allVitals}\n          >\n            {results => {\n              const shouldDisplayMissingVitalsAlert =\n                !results.isLoading && isMissingVitalsData(results.vitalsData, allVitals);\n\n              return (\n                <Fragment>\n                  {shouldDisplayMissingVitalsAlert && (\n                    <Alert type=\"info\" showIcon>\n                      {tct(\n                        'If this page is looking a little bare, keep in mind not all browsers support these vitals. [link]',\n                        {\n                          link: (\n                            <ExternalLink href=\"https://docs.sentry.io/product/performance/web-vitals/#browser-support\">\n                              {t('Read more about browser support.')}\n                            </ExternalLink>\n                          ),\n                        }\n                      )}\n                    </Alert>\n                  )}\n                  <FilterActions>\n                    <PageFilterBar condensed>\n                      <EnvironmentPageFilter />\n                      <DatePageFilter alignDropdown=\"left\" />\n                    </PageFilterBar>\n                    <StyledSearchBar\n                      organization={organization}\n                      projectIds={eventView.project}\n                      query={query}\n                      fields={eventView.fields}\n                      onSearch={handleSearch}\n                    />\n                    <CompactSelect\n                      value={activeFilter.value}\n                      options={FILTER_OPTIONS}\n                      onChange={opt => {\n                        trackAnalyticsEvent({\n                          eventKey: 'performance_views.vitals.filter_changed',\n                          eventName: 'Performance Views: Change vitals filter',\n                          organization_id: organization.id,\n                          value: opt.value,\n                        });\n                        handleFilterChange(opt.value);\n                      }}\n                      triggerProps={{prefix: t('Outliers')}}\n                      triggerLabel={activeFilter.label}\n                    />\n                    <Button\n                      onClick={() => {\n                        trackAnalyticsEvent({\n                          eventKey: 'performance_views.vitals.reset_view',\n                          eventName: 'Performance Views: Reset vitals view',\n                          organization_id: organization.id,\n                        });\n\n                        handleResetView();\n                      }}\n                      disabled={!isZoomed}\n                      data-test-id=\"reset-view\"\n                    >\n                      {t('Reset View')}\n                    </Button>\n                  </FilterActions>\n                  <VitalsPanel\n                    organization={organization}\n                    location={location}\n                    eventView={eventView}\n                    dataFilter={activeFilter.value}\n                    results={results}\n                  />\n                </Fragment>\n              );\n            }}\n          </VitalsCardsDiscoverQuery>\n        </Layout.Main>\n      )}\n    </Histogram>\n  );\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(3, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto 1fr auto auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/5;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default VitalsContent;\n","import {Location} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {isAggregateField, WebVital} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport PageLayout from '../pageLayout';\nimport Tab from '../tabs';\n\nimport {PERCENTILE, VITAL_GROUPS} from './constants';\nimport VitalsContent from './content';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n};\n\nfunction TransactionVitals(props: Props) {\n  const {location, organization, projects} = props;\n\n  return (\n    <PageLayout\n      location={location}\n      organization={organization}\n      projects={projects}\n      tab={Tab.WebVitals}\n      getDocumentTitle={getDocumentTitle}\n      generateEventView={generateEventView}\n      childComponent={VitalsContent}\n    />\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Vitals')].join(' \\u2014 ');\n  }\n\n  return [t('Summary'), t('Vitals')].join(' \\u2014 ');\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  const vitals = VITAL_GROUPS.reduce((allVitals: WebVital[], group) => {\n    return allVitals.concat(group.vitals);\n  }, []);\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields: [\n        ...vitals.map(vital => `percentile(${vital}, ${PERCENTILE})`),\n        ...vitals.map(vital => `count_at_least(${vital}, 0)`),\n        ...vitals.map(\n          vital => `count_at_least(${vital}, ${WEB_VITAL_DETAILS[vital].poorThreshold})`\n        ),\n      ],\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n}\n\nexport default withProjects(withOrganization(TransactionVitals));\n","import styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n"],"names":["doEventsRequest","api","organization","project","environment","team","period","start","end","interval","comparisonDelta","includePrevious","query","yAxis","field","topEvents","orderby","partial","withoutZerofill","referrer","queryBatching","generatePathname","queryExtras","excludeOther","userModified","pathname","slug","shouldDoublePeriod","canIncludePreviousPeriod","queryObject","Object","fromEntries","entries","undefined","user_modified","includes","filter","value","getPeriod","batchRequest","requestPromise","fetchTagFacets","orgSlug","queryOption","pick","values","PERFORMANCE_URL_PARAM","fetchTotalCount","then","res","count","BarChartZoom","Component","chart","callIfFunction","this","props","onChartReady","_props","zooming","zoom","_componentsViews","find","c","_features","dataZoom","_isZoomActive","dispatchAction","type","key","dataZoomSelectActive","evt","model","getModel","startValue","endValue","_payload","batch","buckets","location","paramStart","paramEnd","minZoomWidth","onHistoryPush","target","browserHistory","onDataZoomCancelled","onDataZoom","render","children","xAxisIndex","handleChartReady","onFinished","handleChartFinished","DataZoomInside","toolBox","ToolBox","title","back","iconStyle","borderWidth","color","opacity","handleDataZoom","DEFAULT","zoomOnMouseWheel","zoomLock","throttle","Array","isArray","getFeatures","features","yAxisIndex","options","right","top","itemSize","z","feature","propNamesToIgnore","omitIgnoredProps","omitBy","_value","EventsRequest","PureComponent","reloading","loading","errored","timeseriesData","fetchedWithPrevious","async","confirmedQuery","onError","expired","name","hideError","errorMessage","setState","state","t","addErrorMessage","append","clear","resp","responseJSON","detail","unmounting","data","hasPreviousPeriod","dataMiddleIndex","Math","floor","length","current","slice","previous","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","componentWillUnmount","calculateTotalsPerTimestamp","getName","timestamp","map","i","countArray","reduce","acc","transformPreviousPeriodData","seriesName","_timestamp","_countArray","stack","transformAggregatedTimeseries","transformTimeseriesData","countsForTimestamp","transformComparisonTimeseriesData","comparisonCount","processData","response","seriesIndex","isMetricsData","totals","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","currentSeriesNames","previousSeriesNames","getData","comparisonData","allData","originalData","originalPreviousData","previousData","getPreviousSeriesName","timeAggregatedData","timeframe","showLoading","isMultiSeriesStats","defined","seriesAdditionalInfo","sortedTimeseriesData","keys","index","seriesData","processedData","stripEquationPrefix","order","sort","a","b","results","item","previousTimeseriesData","some","transformedTimeseriesData","transformedComparisonTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","comparisonTimeseriesData","limit","LoadingPanel","height","_height","p","defaultProps","className","visible","other","ListLink","_classNames","activeClassName","isActive","classNames","to","router","queryData","qs","disabled","carriedProps","omit","StyledLi","getClassName","onlyActiveOnIndex","withRouter","shouldForwardProp","prop","theme","backgroundSecondary","borderRadius","shouldRefetchData","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","endpoint","useEvents","afterFetch","_","fields","otherMeta","meta","route","withApi","DEFAULT_STATS_PERIOD","statsPeriod","periodNumber","periodLength","match","parseInt","Error","formattedStart","getUtcDateString","formattedEnd","diff","moment","previousPeriodStart","subtract","FILTER_OPTIONS","label","getHistogramRequestPayload","numBuckets","min","max","precision","dataFilter","eventView","baseApiPayload","additionalApiPayload","getEventsAPIPayload","assign","HistogramQuery","didReceiveMultiAxis","Fragment","isLoading","error","pageLinks","histograms","getRequestPayload","didFetch","counts","forEach","prev","curr","tableData","rest","Histogram","zoomKeys","removeHistogramQueryStrings","isZoomed","getActiveFilter","decodeScalar","childrenProps","handleResetView","activeFilter","handleFilterChange","filterOptions","cursor","getTransactionDetailsUrl","eventSlug","transaction","spanId","locationQuery","hash","spanTargetHash","NUM_BUCKETS","PERCENTILE","_VITAL_GROUPS","vitals","WebVital","_COLORS","reverse","VITAL_GROUPS","group","colors","splice","ZOOM_KEYS","vital","vitalSlug","WEB_VITAL_DETAILS","push","Card","PanelItem","CardSection","space","CardSummary","border","CardSectionHeading","SectionHeading","Description","fontSizeMedium","subText","StatNumber","VitalCard","refDataRect","refPixelRect","vitalDetails","trackAnalyticsEvent","eventKey","eventName","organization_id","id","chartRef","chartData","asPixelRect","leading","prevState","getRefRect","summary","summaryData","p75","failureRate","numerator","poor","denominator","total","getFormattedStatNumber","getDuration","formatFloat","renderSummary","description","column","newEventView","withColumns","kind","function","withSorts","getAggregateAlias","MutableSearch","addFilterValues","formatString","SummaryHeading","toUpperCase","getDynamicText","fixed","size","getPerformanceTransactionEventsViewUrlTarget","showTransactions","EventsDisplayFilterName","webVital","onClick","trackOpenAllEventsClicked","renderHistogram","series","getSeries","xAxis","truncate","axisTick","alignWithLabel","point","axisLabel","chartLabel","formatter","formatAbbreviatedNumber","allSeries","baselineSeries","getBaselineSeries","vitalData","computeBuckets","handleDataZoomCancelled","zoomRenderProps","Container","PercentContainer","showBar","showStates","showVitalPercentNames","showVitalThresholds","showDurationDetail","onRendered","handleRendered","grid","left","bottom","stacked","testId","bucketWidth","bin","formatHistogramData","additionalFieldsFn","bucket","itemStyle","getVitalsColor","poorThreshold","webVitalPoor","mehThreshold","webVitalMeh","vitalStateColors","VitalState","summaryBucket","findNearestBucketIndex","thresholdPixelBottom","mapPoint","x","y","thresholdPixelTop","markLine","MarkLine","animationDuration","show","lineStyle","textColor","tooltip","join","withTheme","VitalsPanel","renderVitalCard","histogram","zoomed","renderVitalGroup","summaryResults","bounds","allBounds","multiHistogramResults","vitalsData","parseBound","vitalGroup","boundString","parseFloat","VitalsContent","handleSearch","newQuery","queryParams","normalizeDateTimeParams","allVitals","concat","fullWidth","shouldDisplayMissingVitalsAlert","isMissingVitalsData","showIcon","tct","link","href","FilterActions","condensed","alignDropdown","StyledSearchBar","projectIds","onSearch","onChange","opt","triggerProps","prefix","triggerLabel","breakpoints","small","xlarge","SearchBar","TransactionVitals","projects","tab","Tab","getDocumentTitle","generateEventView","childComponent","String","trim","conditions","setFilterValues","filters","isAggregateField","removeFilter","EventView","version","withProjects","withOrganization","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","transactionSummaryRouteWithQuery","projectID","unselectedSeries","display","trendFunction","trendColumn","additionalQuery","generateTransactionSummaryRoute","searchFilter","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","generateEventSlug","SidebarSpacer"],"sourceRoot":""}