{"version":3,"file":"chunks/app_components_createAlertButton_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"wqCAsEA,SAASA,EAAT,GAKe,IALiB,kBAC9BC,EAD8B,UAE9BC,EAF8B,MAG9BC,EAH8B,QAI9BC,GACa,EACb,MAAM,gBAACC,EAAD,oBAAkBC,EAAlB,kBAAuCC,EAAvC,cAA0DC,GAC9DP,EAEIQ,EAAcC,OAAOC,OAAOV,GAAmBW,QAAOC,GAAOA,IAAKC,OAElEC,EAAiBb,EAAUc,QACjCD,EAAeE,OAAS,oBACxB,MAAMC,EAAuBhB,EAAUc,QACvCE,EAAqBD,OAAS,0BAC9B,MAAME,EAAmBjB,EAAUc,QACnCG,EAAiBF,OAAS,sBAC1B,MAAMG,EAAwBlB,EAAUc,QACxCI,EAAsBH,OAAS,0CAC/B,MAAMI,EAAY,kBAAiBlB,sBAE7BmB,EAAiB,CACrBC,OACE,QAAC,IAAD,CACEC,GAAI,CACFH,SAAAA,EACAJ,MAAOF,EAAeU,+BAI5BC,SACE,QAAC,IAAD,CACEF,GAAI,CACFH,SAAAA,EACAJ,MAAOE,EAAiBM,+BAI9BE,aACE,QAAC,IAAD,CACEH,GAAI,CACFH,SAAAA,EACAJ,MAAOC,EAAqBO,+BAIlCG,cACE,QAAC,IAAD,CACEJ,GAAI,CACFH,SAAAA,EACAJ,MAAOG,EAAsBK,gCAMrC,OACE,QAACI,EAAD,CACEC,KAAK,UACLC,UAAQ,EACRC,eACE,QAAC,KAAD,CACEC,MAAM,QAAC,KAAD,CAAWC,KAAK,OACtB,cAAYC,EAAAA,EAAAA,GAAE,SACdD,KAAK,OACLE,QAAShC,EACTiC,YAAU,IAThB,UAamB,IAAhB5B,IACC,QAAC,EAAA6B,SAAD,WACGjC,IACC8B,EAAAA,EAAAA,GAAE,0EACH7B,IACC6B,EAAAA,EAAAA,GACE,6FAEH5B,IACCgC,EAAAA,EAAAA,IACE,oNACAjB,GAEHd,IACC+B,EAAAA,EAAAA,IACE,uFACA,CACEC,OAAO,QAACC,EAAD,UAAavC,EAAUwC,kBAKvCjC,EAAc,IACb,QAAC,EAAA6B,SAAD,YACGH,EAAAA,EAAAA,GAAE,uEACH,QAACQ,EAAD,WACGtC,IAAmB,wBAAK8B,EAAAA,EAAAA,GAAE,yBAC1B7B,IACC,wBAAK6B,EAAAA,EAAAA,GAAE,sDAER5B,IACC,wBACGgC,EAAAA,EAAAA,IACC,wKACAjB,KAILd,IACC,wBACG+B,EAAAA,EAAAA,IACC,uFACA,CACEC,OAAO,QAACC,EAAD,UAAavC,EAAUwC,0BAkFlD,SAASE,EAAT,GAUmC,YAVA,SACjCC,EADiC,UAEjC3C,EAFiC,aAGjC4C,EAHiC,SAIjCC,EAJiC,oBAKjCC,EALiC,UAMjCC,EANiC,iBAOjCC,EAPiC,UAQjCC,KACGC,GAC8B,EAEjC,MAAM/C,EAA+C,IAA7BH,EAAUmD,QAAQvC,SAA0C,IAA1BZ,EAAUmD,QAAQ,GAEtE/C,EAAsBJ,EAAUoD,YAAYxC,OAAS,EAErDP,EAA4D,QAAxCgD,EAAAA,EAAAA,IAAmBrD,EAAUe,OAEjDT,EA/DR,SAA2BN,GAA+B,MACxD,MAAMsD,GAASC,EAAAA,EAAAA,IAAmBvD,EAAUwC,YAC5C,GACkB,UAAhBc,EAAOE,MACS,aAAhBF,EAAOE,MACS,oBAAhBF,EAAOE,KAEP,OAAO,EAGT,MAAMC,EAAiBzD,EAAUe,MAAM2C,MAAM,mCAC7C,IAAKD,EACH,OAAO,EAGT,MACME,EAA0B,UADhBF,EAAe,GACWG,EAAAA,GAAmBC,EAAAA,GAEvDC,GAAmBH,EAAYI,aAAaC,SAASV,EAAOW,SAAS,IAErEC,EAAuCC,EAAAA,GAAab,EAAOW,SAAS,IAC1E,IAAKC,EACH,OAAO,EAGT,MAAME,EAAqBF,EAAYG,WAAWC,MAChDC,GAAwB,UAAfA,EAAMf,MAAuC,WAAnBe,EAAMC,WAIrCC,EAAoB,CACxB,MACGd,EAAYe,UACf,UAAIf,EAAYgB,uBAAhB,QAAmC,IAE/BC,GACHR,IAAuBK,EAAkBT,SAASV,EAAOW,SAAS,IAErE,OAAOH,GAAmBc,EAyBJC,CAAkB7E,GAClC8E,EAAsC,CAC1C3E,gBAAAA,EACAC,oBAAAA,EACAC,kBAAAA,EACAC,cAAAA,GAEI6C,EAAUR,EAASoC,MAAKC,GAAKA,EAAEC,KAAQ,GAAEjF,EAAUmD,QAAQ,OAC3D+B,EAAclF,EAAUuB,4BAC9B,UAAI2D,EAAYnE,aAAhB,OAAI,EAAmBiD,SAAU,WAAUb,MAAAA,OAAX,EAAWA,EAASgC,UAClDD,EAAYnE,MAASmE,EAAYnE,MAAiBqE,QAC/C,WAAUjC,MAAAA,OAAX,EAAWA,EAASgC,OACpB,KAGJ,MAAME,EAAY7E,OAAOC,OAAOqE,GAAQR,MAAKgB,GAAKA,IAE5CC,EAAgBtC,EAClBuC,EAAAA,GAAyBvC,GACzBwC,EAAAA,GAEEnE,EAAK+D,OACPK,EACA,CACEvE,SAAU6B,EACL,kBAAiBJ,EAAauC,0BAC9B,kBAAiBvC,EAAauC,eAAehC,MAAAA,OAA9C,EAA8CA,EAASgC,YAC3DpE,MAAO,IACFmE,EACHS,oBAAoB,EACpB9C,SAAAA,KACIG,EACA,IACKuC,EACHpC,QAASA,MAAAA,OAAF,EAAEA,EAASgC,KAClBS,UAAS,UAAEV,EAAY5C,aAAd,QAAuBiD,EAAcK,WAEhD,KAwBZ,OACE,QAACC,EAAD,CACEjD,aAAcA,EACdV,QAvBiB4D,IACnB,GAAIT,EAaF,OAZAS,EAAMC,sBACNjD,GACGkD,IACC,QAAClG,EAAD,CACEC,kBAAmB+E,EACnB9E,UAAWA,EACXC,MAAO2C,EAAauC,KACpBjF,QAAS8F,KAGblB,GAKJ/B,KAOEzB,GAAIA,EACJ,cAAYW,EAAAA,EAAAA,GAAE,mBACViB,IAxRDpD,EAAAA,YAAAA,yBAmMA4C,EAAAA,YAAAA,4BAoGT,MAAMmD,GAAoBI,EAAAA,EAAAA,aACxB,IASa,IATZ,aACCrD,EADD,YAECsD,EAFD,UAGCC,EAHD,SAICtD,EAJD,OAKCuD,EALD,SAMCC,EAND,oBAOCC,KACGpD,GACQ,EACX,MAAMqD,GAAMC,EAAAA,EAAAA,KACNC,EAAkBC,IACtB,MAAMC,EAAmB/D,EAAagE,SAAS5C,SAAS,mBAClD6C,EAAgBF,EACjB,kBAAiB/D,EAAauC,cAC9B,kBAAiBvC,EAAauC,eAAeuB,IAC5CI,EAAa,CACdjE,EAAY,YAAWA,IAAa,GAErC8D,GAAoBD,GAAiC,eAAjBA,EAC/B,WAAUA,IACX,IAENhG,QAAOqG,GAAiB,KAATA,IAEjB,MAAQ,GAAEF,YAAwBC,EAAWlG,OAAS,IAAM,KAAKkG,EAAWE,KAC1E,QAIJ,SAASC,EAA0BnB,GACjCA,EAAMC,kBAENmB,EAAAA,EAAAA,GAAWT,EAAe,cAAeL,GAG3Ce,eAAeC,IACb,MAAMC,EAAoB,kBAAiBzE,EAAauC,SACxDmC,EAAAA,EAAAA,MACA,UACQf,EAAIgB,eAAeF,EAAkB,CACzCG,OAAQ,MACRC,KAAM,CACJC,mBAAmB,MAGvBC,EAAAA,EAAAA,KAAkB1F,EAAAA,EAAAA,GAAE,+CACpB,MAAO2F,IACPC,EAAAA,EAAAA,KAAgB5F,EAAAA,EAAAA,GAAE,4CAItB,MAAM6F,GAAwBzF,EAAAA,EAAAA,IAC5B,yFACA,CAAC0F,cAAc,QAAC,IAAD,CAAMzG,GAAK,aAAYsB,EAAauC,WAG/C6C,EAAgBC,IAAD,aACnB,QAAC,KAAD,CACEC,UAAWD,EACXE,MAAQF,OAAoCvC,EAAxBoC,EACpB/F,MAAOsE,IAAY,QAAC,KAAD,IAAeF,IAClC7E,GAAI4E,EAAcO,EAAeP,QAAeR,EAChD0C,aAAc,CACZC,aAAa,EACbC,SAAU,MACVC,aAAc,CACZC,SAAU,UAGdtG,QAASgE,OAAcR,EAAYuB,KAC/B/D,EAbN,mBAeGA,EAAYuF,gBAff,SAe2BxG,EAAAA,EAAAA,GAAE,mBAIzByG,GAAa9F,EAAa8E,qBAAuBpB,EAEvD,OACE,QAAC,IAAD,CAAQ1D,aAAcA,EAAc+F,OAAQ,CAAC,gBAA7C,SACG,QAAC,UAACV,GAAF,SACCS,GACE,QAAC,IAAD,CAAQ9F,aAAcA,EAAc+F,OAAQ,CAAC,aAA7C,SACG,QAAEV,UAAWW,GAAb,SACC,QAAC,IAAD,CACEC,OAAQD,EAAa,qBAAuB,sBAC5CE,SAAUF,EAAaxB,OAA0B1B,EAFnD,SAIGsC,EAAaC,QAKpBD,EAAaC,SASzB,IAEMtG,GAAc,OAAOoH,EAAAA,EAAP,sBAAH,UACN/D,GAAKA,EAAEgE,MAAMC,WADP,qBAKXxG,GAAsB,OAAO,KAAP,sBAAH,2CAInBF,GAAa,OAAO,OAAP,sBAAH,mE,mMC9cT,SAAS2G,EAAiBC,GAAuD,IAAjCC,EAAiC,uDAAZ,GAC1E,KAAKC,EAAAA,EAAAA,IAAQF,GACX,MAAO,IAET,QAAQG,EAAAA,EAAAA,IAAoBF,IAC1B,IAAK,UACL,IAAK,SACH,OAAOD,EAAMI,iBACf,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBL,EAAO,GACjC,IAAK,WACH,OAAOM,EAAAA,EAAAA,IAAYN,EAAQ,IAAM,GAAG,GACtC,QACE,OAAOA,EAAMO,YAQZ,SAASC,EACdR,EACAC,GAEQ,IADRQ,EACQ,wDACR,QAAQN,EAAAA,EAAAA,IAAoBF,IAC1B,IAAK,UACL,IAAK,SACH,OAAOQ,GAAeC,EAAAA,EAAAA,IAAwBV,GAASA,EAAMI,iBAC/D,IAAK,aACH,OAAOC,EAAAA,EAAAA,IAAiBL,EAAO,GACjC,IAAK,WACH,OAAOW,EAAaX,GACtB,QACE,OAAOA,EAAMO,YAWZ,SAASI,EAAaX,GAC3B,GAAc,IAAVA,EACF,MAAO,IAET,GAAIA,GAASY,EAAAA,GAAM,CACjB,MAAMC,GAASb,EAAQY,EAAAA,IAAME,QAAQ,GACrC,OAAOhI,EAAAA,EAAAA,GAAE,OAAQ+H,GAEnB,GAAIb,GAASe,EAAAA,GAAK,CAChB,MAAMF,GAASb,EAAQe,EAAAA,IAAKD,QAAQ,GACpC,OAAOhI,EAAAA,EAAAA,GAAE,MAAO+H,GAElB,GAAIb,GAASgB,EAAAA,GAAM,CACjB,MAAMH,GAASb,EAAQgB,EAAAA,IAAMF,QAAQ,GACrC,OAAOhI,EAAAA,EAAAA,GAAE,OAAQ+H,GAEnB,GAAIb,GAASiB,EAAAA,GAAQ,CACnB,MAAMJ,GAASb,EAAQiB,EAAAA,IAAQH,QAAQ,GACvC,OAAOhI,EAAAA,EAAAA,GAAE,QAAS+H,GAEpB,GAAIb,GAASkB,EAAAA,GAAQ,CACnB,MAAML,GAASb,EAAQkB,EAAAA,IAAQJ,QAAQ,GACvC,OAAOhI,EAAAA,EAAAA,GAAE,MAAO+H,GAElB,MAAMA,EAAQb,EAAMc,QAAQ,GAC5B,OAAOhI,EAAAA,EAAAA,GAAE,OAAQ+H,K,whBCnEZ,MAAMM,EAA4B,EAC5BC,EAA6B,GAC7BC,EAA4B,MAE5BC,EAAoB,UACpBC,EAAgC,4BAEhCC,EAA6B,CACxC,CAACC,EAAAA,GAAAA,QAAiB,mBAClB,CAACA,EAAAA,GAAAA,cAAuB,0BAGbC,EAAgC,CAC3C,CAACC,EAAAA,GAAAA,eAA2B,8BAC5B,CAACA,EAAAA,GAAAA,OAAmB,mBACpB,CAACA,EAAAA,GAAAA,SAAqB,qBACtB,CAACA,EAAAA,GAAAA,aAAyB,0BAYflH,EAAiC,CAC5CG,aAAc,CAAC,QAAS,gBACxBW,OAAQ,CAAC,SAGLqG,EAAuC,CAC3C,MACA,aACA,MACA,MACA,MACA,MACA,QAGIC,EAAoC,IACrCD,EACH,eACA,QACA,SAGWE,EAAkC,CAC7C,UACA,aACA,YACA,QACA,aACA,kBACA,WACA,cACA,mBACA,gBACA,QACA,OACA,YACA,mBAGWC,EAAmC,CAAC,iBAAkB,SAEtDC,EAAkC,CAC7C,OACA,aACA,mBACA,iBACA,WAGWC,EAA2B,CACtC,CAACjC,MAAO,EAAGa,OAAO/H,EAAAA,EAAAA,GAAE,4BACpB,CAACkH,MAAO,GAAIa,OAAO/H,EAAAA,EAAAA,GAAE,6BACrB,CAACkH,MAAO,GAAIa,OAAO/H,EAAAA,EAAAA,GAAE,2BACrB,CAACkH,MAAO,KAAMa,OAAO/H,EAAAA,EAAAA,GAAE,0BACvB,CAACkH,MAAO,MAAOa,OAAO/H,EAAAA,EAAAA,GAAE,2BACxB,CAACkH,MAAO,MAAOa,OAAO/H,EAAAA,EAAAA,GAAE,6BAGnB,SAASoJ,EACdpI,EACAqI,GAEA,MAAkB,WAAdrI,GAA0BqI,IAAYV,EAAAA,GAAAA,OACjChH,EAOF,CACLG,aAJc,UAAdd,GAAuC,WAAdA,EACrB+H,EACAD,EAGJrG,OAAQ,CAAC,wBACTC,gBAAiBnE,OAAO+K,KAAKC,EAAAA,KAO1B,MAAM3H,EAAuC,CAClDE,aAAciH,EACdtG,OAAQ,CAAC,wBACTC,gBAAiBnE,OAAO+K,KAAKC,EAAAA,KAGxB,SAASC,EAAqBzB,GACnC,MAAO,CACLA,MAAAA,EACA0B,eAAgB,GAChBC,QAAS,IAIN,SAASC,IAEK,IADnBC,EACmB,uDAD8B,GAEjD,MAAO,CACLP,QAASV,EAAAA,GAAAA,OACTkB,WAAY,CAACC,EAAAA,GAAAA,OACbnG,UAAW6E,EACX1J,MAAO,GACPiL,WAAY,GACZC,gBAAiB,EACjBC,SAAU,CACRT,EAAqBU,EAAAA,GAAAA,UACrBV,EAAqBU,EAAAA,GAAAA,UAEvBxJ,SAAU,GACVS,YAAa,KACbgJ,iBAAkB,GAClBC,cAAeC,EAAAA,GAAAA,SACZT,GAOA,SAASU,EAAwBvM,GAAyC,MAC/E,MAAMwM,GAAcnJ,EAAAA,EAAAA,IAAmBrD,EAAUe,OAC3C0L,EAAuBD,EACzBE,EAAAA,GAAmCF,EAAYG,QAC/CD,EAAAA,GAAAA,MAEJ,IAAI9G,EAAY5F,EAAUwC,WAS1B,MAPmC,iBAAjCiK,EAAqBnB,SACrB,gBAAgBsB,KAAK5M,EAAUwC,cAG/BoD,EAAY5F,EAAUwC,WAAWqK,MAAM,EAAG,GAAK,0BAG1C,IACFjB,OACAa,EACH1L,MAAK,UAAEyL,MAAAA,OAAF,EAAEA,EAAazL,aAAf,QAAwBf,EAAUe,MACvC6E,UAAAA,EACAxC,YAAapD,EAAUoD,YAAYxC,OAASZ,EAAUoD,YAAY,GAAK,MAIpE,SAAS0J,EACdC,GAEA,MAAM,WAACjB,EAAD,UAAalG,EAAb,QAAwB0F,GAAWyB,EACnClB,EAAiD,GAWvD,OATImB,EAAAA,EAAAA,IAAmBpH,KACrBiG,EAAmBQ,cAAgBC,EAAAA,GAAAA,MACnCT,EAAmBG,WAAaiB,EAAAA,GAAAA,UAG9BrH,EAAU5B,SAAS,WACrB6H,EAAmBQ,cAAgBC,EAAAA,GAAAA,OAG9B,IACFV,EAAkBC,GACrBC,WAAY,CAACA,GACblG,UAAAA,EACA0F,QAAAA,GAIG,SAAS4B,EACdtH,EACAuH,GAGA,OACEH,EAAAA,EAAAA,IAAmBpH,IACnBuH,IAAmBC,EAAAA,GAAAA,OAEZ,IAGLxH,EAAU5B,SAAS,oBACd,GAGL4B,EAAU5B,SAAS,aAAe4B,EAAU5B,SAAS,gBAChD,KAGF,K,gNCvOF,IAAKsI,EAKAH,EAMAiB,EAKAxC,EAQAmB,EAQAjB,EAYAuC,EA+DAC,EAUAL,EAYAM,G,SAjIAjB,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,MAAAA,GAAAA,Q,CAAAA,IAAAA,EAAAA,K,SAKAH,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,UAAAA,EAAAA,QAAAA,U,CAAAA,IAAAA,EAAAA,K,SAMAiB,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,OAAAA,S,CAAAA,IAAAA,EAAAA,K,SAKAxC,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,aAAAA,eAAAA,EAAAA,SAAAA,WAAAA,EAAAA,QAAAA,U,CAAAA,IAAAA,EAAAA,K,SAQAmB,GAAAA,EAAAA,QAAAA,UAAAA,EAAAA,MAAAA,QAAAA,EAAAA,YAAAA,cAAAA,EAAAA,KAAAA,OAAAA,EAAAA,QAAAA,U,CAAAA,IAAAA,EAAAA,K,SAQAjB,GAAAA,EAAAA,cAAAA,gBAAAA,EAAAA,QAAAA,UAAAA,EAAAA,MAAAA,QAAAA,EAAAA,YAAAA,c,CAAAA,IAAAA,EAAAA,K,SAYAuC,GAAAA,EAAAA,oBAAAA,wEAAAA,EAAAA,iBAAAA,kE,CAAAA,IAAAA,EAAAA,K,SA+DAC,GAAAA,EAAAA,UAAAA,KAAAA,EAAAA,QAAAA,KAAAA,EAAAA,WAAAA,KAAAA,EAAAA,WAAAA,SAAAA,EAAAA,cAAAA,MAAAA,EAAAA,YAAAA,M,CAAAA,IAAAA,EAAAA,K,SAUAL,GAAAA,EAAAA,EAAAA,WAAAA,GAAAA,aAAAA,EAAAA,EAAAA,aAAAA,GAAAA,eAAAA,EAAAA,EAAAA,YAAAA,IAAAA,cAAAA,EAAAA,EAAAA,gBAAAA,IAAAA,kBAAAA,EAAAA,EAAAA,eAAAA,IAAAA,iBAAAA,EAAAA,EAAAA,SAAAA,IAAAA,WAAAA,EAAAA,EAAAA,UAAAA,KAAAA,YAAAA,EAAAA,EAAAA,WAAAA,KAAAA,aAAAA,EAAAA,EAAAA,QAAAA,MAAAA,U,CAAAA,IAAAA,EAAAA,K,SAYAM,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,MAAAA,QAAAA,EAAAA,UAAAA,YAAAA,EAAAA,QAAAA,UAAAA,EAAAA,WAAAA,a,CAAAA,IAAAA,EAAAA,KAQL,MAAMC,EAAc,CAGzB,CAACD,EAAWE,QAAQxL,EAAAA,EAAAA,GAAE,UACtB,CAACsL,EAAWG,QAAQzL,EAAAA,EAAAA,GAAE,SACtB,CAACsL,EAAWI,YAAY1L,EAAAA,EAAAA,GAAE,aAC1B,CAACsL,EAAWK,UAAU3L,EAAAA,EAAAA,GAAE,YACxB,CAACsL,EAAWM,aAAa5L,EAAAA,EAAAA,GAAE,iBAGtB,IAAK6L,G,SAAAA,GAAAA,EAAAA,SAAAA,WAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,OAAAA,EAAAA,WAAAA,a,CAAAA,IAAAA,EAAAA,KAcL,MAAMC,EAAc,CACzB,CAACD,EAAWE,OAAO/L,EAAAA,EAAAA,GAAE,UACrB,CAAC6L,EAAWG,OAAOhM,EAAAA,EAAAA,GAAE,U,yCClKhB,IAAKiM,EAmDAC,EAQAC,EAOAC,EAMAC,EAMAC,E,+DA9EAL,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,MAAAA,Q,CAAAA,IAAAA,EAAAA,K,SAmDAC,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,cAAAA,GAAAA,gBAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,QAAAA,GAAAA,U,CAAAA,IAAAA,EAAAA,K,SAQAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,QAAAA,IAAAA,UAAAA,EAAAA,EAAAA,SAAAA,IAAAA,W,CAAAA,IAAAA,EAAAA,K,SAOAC,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,aAAAA,GAAAA,eAAAA,EAAAA,EAAAA,eAAAA,GAAAA,iB,CAAAA,IAAAA,EAAAA,K,SAMAC,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,SAAAA,GAAAA,W,CAAAA,IAAAA,EAAAA,K,SAMAC,GAAAA,EAAAA,OAAAA,aAAAA,EAAAA,MAAAA,O,CAAAA,IAAAA,EAAAA,M,4kBC9DL,SAASC,EAAqBC,GAMnC,MAAO,CAACC,OALMC,EAAAA,EAAAA,IAA+C,IAA9BF,EAAMG,WAAWnH,KAAK,GAAG,IAKzCoH,KAJHF,EAAAA,EAAAA,IACmD,IAA7DF,EAAMG,WAAWnH,KAAKgH,EAAMG,WAAWnH,KAAK7G,OAAS,GAAG,KAMrD,SAASkO,EACdrH,GAEA,OAAQA,EAAKsH,eAAe,YAGvB,MAAMC,EAAqB,CAChC,CAACpE,EAAAA,GAAAA,SAAiB3I,EAAAA,EAAAA,GAAE,UACpB,CAAC2I,EAAAA,GAAAA,eAAuB3I,EAAAA,EAAAA,GAAE,gBAC1B,CAAC6I,EAAAA,GAAAA,eAA2B,yCAC5B,CAACA,EAAAA,GAAAA,OAAmB,mBACpB,CAACA,EAAAA,GAAAA,SAAqB,qBACtB,CAACA,EAAAA,GAAAA,aAAyB,0BAIf4B,EAAqC,CAChD,CAAC5B,EAAAA,GAAAA,eAA2B,CAC1BQ,QAASV,EAAAA,GAAAA,OACTkB,WAAY,CAACC,EAAAA,GAAAA,MAAkBA,EAAAA,GAAAA,UAEjC,CAACjB,EAAAA,GAAAA,OAAmB,CAClBQ,QAASV,EAAAA,GAAAA,OACTkB,WAAY,CAACC,EAAAA,GAAAA,QAEf,CAACjB,EAAAA,GAAAA,SAAqB,CACpBQ,QAASV,EAAAA,GAAAA,OACTkB,WAAY,CAACC,EAAAA,GAAAA,UAEf,CAACjB,EAAAA,GAAAA,aAAyB,CACxBQ,QAASV,EAAAA,GAAAA,aACTkB,WAAY,CAACC,EAAAA,GAAAA,eAKV,SAASkD,EACd3D,EACAQ,GAGA,OAAIR,IAAYV,EAAAA,GAAAA,aACPE,EAAAA,GAAAA,YAGJgB,EAIDA,EAAW9H,SAAS+H,EAAAA,GAAAA,UAAuBD,EAAW9H,SAAS+H,EAAAA,GAAAA,OAC1DjB,EAAAA,GAAAA,cAELgB,EAAW9H,SAAS+H,EAAAA,GAAAA,SACfjB,EAAAA,GAAAA,QAEFA,EAAAA,GAAAA,MATEA,EAAAA,GAAAA,MAkBJ,SAASzH,EACdtC,GAEA,IAAI2C,EAAQ3C,EAAM2C,MAChB,uGAEF,OAAIA,EAGiB,kBADAA,EAAMmJ,MAAM,EAAG,GAAGqC,OAAOlI,KAAK,KAExC,KAGF,CAAC2F,OAAQ7B,EAAAA,GAAAA,cAA0B/J,MAAOA,EAAMqE,QAAQ1B,EAAM,GAAI,IAAIyL,SAG/EzL,EAAQ3C,EAAM2C,MAAM,kDAChBA,GAASoH,EAAAA,GAAWpH,EAAM,GAAG0L,eACxB,CACLzC,OAAQ7B,EAAAA,GAAWpH,EAAM,GAAG0L,eAC5BrO,MAAOA,EAAMqE,QAAQ1B,EAAM,GAAI,IAAIyL,QAIhC,MAGF,SAASnC,EAAmBpH,GACjC,OAAOpF,OAAOC,OAAO4M,EAAAA,IAAmBrJ,SAAS4B,GAG5C,MAAMyJ,EAA6B,CACxC,CAAChC,EAAAA,GAAAA,qBAAwCiC,EAAAA,GAAAA,SACzC,CAACjC,EAAAA,GAAAA,kBAAqCiC,EAAAA,GAAAA,OAGjC,SAASC,EAAmBpG,EAAeC,EAAoBxD,GACpE,OAAIoH,EAAmBpH,IACdyD,EAAAA,EAAAA,IAAQF,GAAU,GAAEqG,GAAAA,CAAMrG,EAAO,MAAQ,KAG3CQ,EAAAA,EAAAA,IAAmBR,EAAOC,GAG5B,SAASqG,EACdtG,EACAC,EACAxD,GAEA,OAAIoH,EAAmBpH,IACdyD,EAAAA,EAAAA,IAAQF,GAAU,GAAEA,KAAW,KAGjCD,EAAAA,EAAAA,IAAiBC,EAAOC,GAG1B,MAAMsG,EAA6B,KAEnC,SAASC,EAAsB/J,GAGpC,OAAOoH,EAAmBpH,GAGrB,SAASgK,EAAiBhN,EAA4BiN,GAC3D,MAAQ,kBAAiBjN,EAAauC,6BACpC0K,EAASC,UAAUC,SAAWzB,EAAAA,GAAAA,UAC9BuB,EAASC,UAAUE,oBACfH,EAASC,UAAUE,oBACnBH,EAASC,UAAU7K,MAOpB,SAASgL,EAAeF,GAC7B,OAAIG,MAAMC,QAAQJ,IAAsB,KAAXA,EACpB,MAGF,CAAC,OAAQ,UAAU/L,SAAS+L,GAAUA,EAAS,MAGxD,MAAMK,EAAiC,CAAC,UAAW,cAK5C,SAASC,EAAcC,GAC5B,YAAa5K,IAAT4K,EACKF,EAGI,KAATE,EACK,GAGLJ,MAAMC,QAAQG,GACTA,EAGF,CAACA,K,sUC5KH,MAAMC,EAAmD,CAC9DC,QAAQvO,EAAAA,EAAAA,GAAE,UACVwO,YAAYxO,EAAAA,EAAAA,GAAE,oBACdyO,2BAA2BzO,EAAAA,EAAAA,GAAE,6BAC7B0O,YAAY1O,EAAAA,EAAAA,GAAE,cACd2O,gBAAgB3O,EAAAA,EAAAA,GAAE,wBAClB4O,OAAO5O,EAAAA,EAAAA,GAAE,SACT6O,cAAc7O,EAAAA,EAAAA,GAAE,gBAChB8O,KAAK9O,EAAAA,EAAAA,GAAE,4BACP+O,KAAK/O,EAAAA,EAAAA,GAAE,qBACPgP,KAAKhP,EAAAA,EAAAA,GAAE,2BACPiP,QAAQjP,EAAAA,EAAAA,GAAE,iBACVkP,qBAAqBlP,EAAAA,EAAAA,GAAE,2BACvBmP,kBAAkBnP,EAAAA,EAAAA,GAAE,yBAOToP,EAA4BC,GAA6C,CACpF,CACEC,iBAAiBtP,EAAAA,EAAAA,GAAE,UACnBuP,QAAS,CAAC,SAAU,aAAc,iCAEhCF,EAAI1K,SAAS5C,SAAS,qBACtB,CACE,CACEuN,iBAAiBtP,EAAAA,EAAAA,GAAE,YACnBuP,QAAS,CAAC,sBAAuB,sBAGrC,GACJ,CACED,iBAAiBtP,EAAAA,EAAAA,GAAE,eACnBuP,QAAS,CACP,aACA,iBACA,QACA,eACA,MACA,MACA,QAGJ,CACED,iBAAiBtP,EAAAA,EAAAA,GAAE,SACnBuP,QAAS,CAAC,YAUDhM,EAGT,CACFiL,WAAY,CACV7K,UAAW,UACX0F,QAASV,EAAAA,GAAAA,OACTkB,WAAYC,EAAAA,GAAAA,OAEd2E,0BAA2B,CACzB9K,UAAW,qBACX0F,QAASV,EAAAA,GAAAA,OACTkB,WAAYC,EAAAA,GAAAA,OAEd4E,WAAY,CACV/K,UAAW,UACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEd6E,eAAgB,CACdhL,UAAW,4BACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEd8E,MAAO,CACLjL,UAAW,aACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEd+E,aAAc,CACZlL,UAAW,iBACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEdgF,IAAK,CACHnL,UAAW,wBACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEdiF,IAAK,CACHpL,UAAW,wBACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEdkF,IAAK,CACHrL,UAAW,wBACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEdmF,OAAQ,CACNtL,UAAW,uBACX0F,QAASV,EAAAA,GAAAA,aACTkB,WAAYC,EAAAA,GAAAA,aAEdoF,oBAAqB,CACnBvL,UAAWyH,EAAAA,GAAAA,oBAEX/B,QAASV,EAAAA,GAAAA,SACTkB,WAAYC,EAAAA,GAAAA,SAEdqF,iBAAkB,CAChBxL,UAAWyH,EAAAA,GAAAA,iBAEX/B,QAASV,EAAAA,GAAAA,SACTkB,WAAYC,EAAAA,GAAAA,OAIHtG,EAA0BD,EAAyBiL,WAEnDgB,EAAyB,IAAIC,IAAe,CACvD,aACA,4BACA,aACA,QACA,eACA,sBACA,qBAGWC,EAA2B,IAAID,IAAe,CACzD,iBACA,MACA,MACA,QAGK,SAASE,EAAoB3O,GAIlC,MAAM4O,GAAiB5P,EAAAA,EAAAA,GAAE,QACzB,MAAkB,UAAdgB,EACK,CACL6O,WAAW7P,EAAAA,EAAAA,GAAE,4CACb4P,eAAAA,GAGAJ,EAAuBM,IAAI9O,GACtB,CACL6O,WAAW7P,EAAAA,EAAAA,GAAE,yBAGV,CACL6P,WAAW7P,EAAAA,EAAAA,GAAE,qCACb4P,eAAAA","sources":["webpack:///./app/components/createAlertButton.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/alerts/rules/metric/constants.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconClose, IconSiren} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Aggregation,\n  AGGREGATIONS,\n  explodeFieldString,\n} from 'sentry/utils/discover/fields';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  errorFieldConfig,\n  transactionFieldConfig,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {getQueryDatasource} from 'sentry/views/alerts/utils';\nimport {\n  AlertType,\n  AlertWizardRuleTemplates,\n  DEFAULT_WIZARD_TEMPLATE,\n} from 'sentry/views/alerts/wizard/options';\n\n/**\n * Discover query supports more features than alert rules\n * To create an alert rule from a discover query, some parameters need to be adjusted\n */\ntype IncompatibleQueryProperties = {\n  /**\n   * Must have zero or one environments\n   */\n  hasEnvironmentError: boolean;\n  /**\n   * event.type must be error or transaction\n   */\n  hasEventTypeError: boolean;\n  /**\n   * Must have exactly one project selected and not -1 (all projects)\n   */\n  hasProjectError: boolean;\n  hasYAxisError: boolean;\n};\n\ntype AlertProps = {\n  eventView: EventView;\n  incompatibleQuery: IncompatibleQueryProperties;\n  /**\n   * Dismiss alert\n   */\n  onClose: () => void;\n  orgId: string;\n};\n\n/**\n * Displays messages to the user on what needs to change in their query\n */\nfunction IncompatibleQueryAlert({\n  incompatibleQuery,\n  eventView,\n  orgId,\n  onClose,\n}: AlertProps) {\n  const {hasProjectError, hasEnvironmentError, hasEventTypeError, hasYAxisError} =\n    incompatibleQuery;\n\n  const totalErrors = Object.values(incompatibleQuery).filter(val => val).length;\n\n  const eventTypeError = eventView.clone();\n  eventTypeError.query += ' event.type:error';\n  const eventTypeTransaction = eventView.clone();\n  eventTypeTransaction.query += ' event.type:transaction';\n  const eventTypeDefault = eventView.clone();\n  eventTypeDefault.query += ' event.type:default';\n  const eventTypeErrorDefault = eventView.clone();\n  eventTypeErrorDefault.query += ' event.type:error or event.type:default';\n  const pathname = `/organizations/${orgId}/discover/results/`;\n\n  const eventTypeLinks = {\n    error: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeError.generateQueryStringObject(),\n        }}\n      />\n    ),\n    default: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n    transaction: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeTransaction.generateQueryStringObject(),\n        }}\n      />\n    ),\n    errorDefault: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeErrorDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n  };\n\n  return (\n    <StyledAlert\n      type=\"warning\"\n      showIcon\n      trailingItems={\n        <Button\n          icon={<IconClose size=\"sm\" />}\n          aria-label={t('Close')}\n          size=\"zero\"\n          onClick={onClose}\n          borderless\n        />\n      }\n    >\n      {totalErrors === 1 && (\n        <Fragment>\n          {hasProjectError &&\n            t('An alert can use data from only one Project. Select one and try again.')}\n          {hasEnvironmentError &&\n            t(\n              'An alert supports data from a single Environment or All Environments. Pick one try again.'\n            )}\n          {hasEventTypeError &&\n            tct(\n              'An alert needs a filter of [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)]. Use one of these and try again.',\n              eventTypeLinks\n            )}\n          {hasYAxisError &&\n            tct(\n              'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n              {\n                yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n              }\n            )}\n        </Fragment>\n      )}\n      {totalErrors > 1 && (\n        <Fragment>\n          {t('Yikes! That button didn’t work. Please fix the following problems:')}\n          <StyledUnorderedList>\n            {hasProjectError && <li>{t('Select one Project.')}</li>}\n            {hasEnvironmentError && (\n              <li>{t('Select a single Environment or All Environments.')}</li>\n            )}\n            {hasEventTypeError && (\n              <li>\n                {tct(\n                  'Use the filter [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)].',\n                  eventTypeLinks\n                )}\n              </li>\n            )}\n            {hasYAxisError && (\n              <li>\n                {tct(\n                  'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n                  {\n                    yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n                  }\n                )}\n              </li>\n            )}\n          </StyledUnorderedList>\n        </Fragment>\n      )}\n    </StyledAlert>\n  );\n}\n\ntype CreateAlertFromViewButtonProps = ButtonProps & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  /**\n   * Called when the current eventView does not meet the requirements of alert rules\n   * @returns a function that takes an alert close function argument\n   */\n  onIncompatibleQuery: (\n    incompatibleAlertNoticeFn: (onAlertClose: () => void) => React.ReactNode,\n    errors: IncompatibleQueryProperties\n  ) => void;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onSuccess: () => void;\n  organization: Organization;\n  projects: Project[];\n  alertType?: AlertType;\n  className?: string;\n  referrer?: string;\n  useAlertWizardV3?: boolean;\n};\n\nfunction incompatibleYAxis(eventView: EventView): boolean {\n  const column = explodeFieldString(eventView.getYAxis());\n  if (\n    column.kind === 'field' ||\n    column.kind === 'equation' ||\n    column.kind === 'calculatedField'\n  ) {\n    return true;\n  }\n\n  const eventTypeMatch = eventView.query.match(/event\\.type:(transaction|error)/);\n  if (!eventTypeMatch) {\n    return false;\n  }\n\n  const dataset = eventTypeMatch[1];\n  const yAxisConfig = dataset === 'error' ? errorFieldConfig : transactionFieldConfig;\n\n  const invalidFunction = !yAxisConfig.aggregations.includes(column.function[0]);\n  // Allow empty parameters, allow all numeric parameters - eg. apdex(300)\n  const aggregation: Aggregation | undefined = AGGREGATIONS[column.function[0]];\n  if (!aggregation) {\n    return false;\n  }\n\n  const isNumericParameter = aggregation.parameters.some(\n    param => param.kind === 'value' && param.dataType === 'number'\n  );\n  // There are other measurements possible, but for the time being, only allow alerting\n  // on the predefined set of measurements for alerts.\n  const allowedParameters = [\n    '',\n    ...yAxisConfig.fields,\n    ...(yAxisConfig.measurementKeys ?? []),\n  ];\n  const invalidParameter =\n    !isNumericParameter && !allowedParameters.includes(column.function[1]);\n\n  return invalidFunction || invalidParameter;\n}\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onIncompatibleQuery,\n  onSuccess,\n  useAlertWizardV3,\n  alertType,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  // Must have exactly one project selected and not -1 (all projects)\n  const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;\n  // Must have one or zero environments\n  const hasEnvironmentError = eventView.environment.length > 1;\n  // Must have event.type of error or transaction\n  const hasEventTypeError = getQueryDatasource(eventView.query) === null;\n  // yAxis must be a function and enabled on alerts\n  const hasYAxisError = incompatibleYAxis(eventView);\n  const errors: IncompatibleQueryProperties = {\n    hasProjectError,\n    hasEnvironmentError,\n    hasEventTypeError,\n    hasYAxisError,\n  };\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n  const hasErrors = Object.values(errors).some(x => x);\n\n  const alertTemplate = alertType\n    ? AlertWizardRuleTemplates[alertType]\n    : DEFAULT_WIZARD_TEMPLATE;\n\n  const to = hasErrors\n    ? undefined\n    : {\n        pathname: useAlertWizardV3\n          ? `/organizations/${organization.slug}/alerts/new/metric/`\n          : `/organizations/${organization.slug}/alerts/${project?.slug}/new/`,\n        query: {\n          ...queryParams,\n          createFromDiscover: true,\n          referrer,\n          ...(useAlertWizardV3\n            ? {\n                ...alertTemplate,\n                project: project?.slug,\n                aggregate: queryParams.yAxis ?? alertTemplate.aggregate,\n              }\n            : {}),\n        },\n      };\n\n  const handleClick = (event: React.MouseEvent) => {\n    if (hasErrors) {\n      event.preventDefault();\n      onIncompatibleQuery(\n        (onAlertClose: () => void) => (\n          <IncompatibleQueryAlert\n            incompatibleQuery={errors}\n            eventView={eventView}\n            orgId={organization.slug}\n            onClose={onAlertClose}\n          />\n        ),\n        errors\n      );\n      return;\n    }\n\n    onSuccess();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype Props = {\n  organization: Organization;\n  hideIcon?: boolean;\n  iconProps?: SVGIconProps;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  ButtonProps;\n\nconst CreateAlertButton = withRouter(\n  ({\n    organization,\n    projectSlug,\n    iconProps,\n    referrer,\n    router,\n    hideIcon,\n    showPermissionGuide,\n    ...buttonProps\n  }: Props) => {\n    const api = useApi();\n    const createAlertUrl = (providedProj: string) => {\n      const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n      const alertsBaseUrl = hasAlertWizardV3\n        ? `/organizations/${organization.slug}/alerts`\n        : `/organizations/${organization.slug}/alerts/${providedProj}`;\n      const alertsArgs = [\n        `${referrer ? `referrer=${referrer}` : ''}`,\n        `${\n          hasAlertWizardV3 && providedProj && providedProj !== ':projectId'\n            ? `project=${providedProj}`\n            : ''\n        }`,\n      ].filter(item => item !== '');\n\n      return `${alertsBaseUrl}/wizard/${alertsArgs.length ? '?' : ''}${alertsArgs.join(\n        '&'\n      )}`;\n    };\n\n    function handleClickWithoutProject(event: React.MouseEvent) {\n      event.preventDefault();\n\n      navigateTo(createAlertUrl(':projectId'), router);\n    }\n\n    async function enableAlertsMemberWrite() {\n      const settingsEndpoint = `/organizations/${organization.slug}/`;\n      addLoadingMessage();\n      try {\n        await api.requestPromise(settingsEndpoint, {\n          method: 'PUT',\n          data: {\n            alertsMemberWrite: true,\n          },\n        });\n        addSuccessMessage(t('Successfully updated organization settings'));\n      } catch (err) {\n        addErrorMessage(t('Unable to update organization settings'));\n      }\n    }\n\n    const permissionTooltipText = tct(\n      'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n      {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n    );\n\n    const renderButton = (hasAccess: boolean) => (\n      <Button\n        disabled={!hasAccess}\n        title={!hasAccess ? permissionTooltipText : undefined}\n        icon={!hideIcon && <IconSiren {...iconProps} />}\n        to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n        tooltipProps={{\n          isHoverable: true,\n          position: 'top',\n          overlayStyle: {\n            maxWidth: '270px',\n          },\n        }}\n        onClick={projectSlug ? undefined : handleClickWithoutProject}\n        {...buttonProps}\n      >\n        {buttonProps.children ?? t('Create Alert')}\n      </Button>\n    );\n\n    const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n    return (\n      <Access organization={organization} access={['alerts:write']}>\n        {({hasAccess}) =>\n          showGuide ? (\n            <Access organization={organization} access={['org:write']}>\n              {({hasAccess: isOrgAdmin}) => (\n                <GuideAnchor\n                  target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                  onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                >\n                  {renderButton(hasAccess)}\n                </GuideAnchor>\n              )}\n            </Access>\n          ) : (\n            renderButton(hasAccess)\n          )\n        }\n      </Access>\n    );\n  }\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n\nconst StyledAlert = styled(Alert)`\n  color: ${p => p.theme.textColor};\n  margin-bottom: 0;\n`;\n\nconst StyledUnorderedList = styled('ul')`\n  margin-bottom: 0;\n`;\n\nconst StyledCode = styled('code')`\n  background-color: transparent;\n  padding: 0;\n`;\n","import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AggregationKey, LooseFieldKey} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  TimeWindow,\n  Trigger,\n  UnsavedMetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n  isSessionAggregate,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nexport const DEFAULT_COUNT_TIME_WINDOW = 1; // 1min\nexport const DEFAULT_CHANGE_TIME_WINDOW = 60; // 1h\nexport const DEFAULT_CHANGE_COMP_DELTA = 10080; // 1w\n\nexport const DEFAULT_AGGREGATE = 'count()';\nexport const DEFAULT_TRANSACTION_AGGREGATE = 'p95(transaction.duration)';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: 'event.type:[error, default]',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\nexport type OptionConfig = {\n  aggregations: AggregationKey[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: ['count', 'count_unique'],\n  fields: ['user'],\n};\n\nconst commonAggregations: AggregationKey[] = [\n  'avg',\n  'percentile',\n  'p50',\n  'p75',\n  'p95',\n  'p99',\n  'p100',\n];\n\nconst allAggregations: AggregationKey[] = [\n  ...commonAggregations,\n  'failure_rate',\n  'apdex',\n  'count',\n];\n\nexport const DuplicateMetricFields: string[] = [\n  'dataset',\n  'eventTypes',\n  'aggregate',\n  'query',\n  'timeWindow',\n  'thresholdPeriod',\n  'projects',\n  'environment',\n  'resolveThreshold',\n  'thresholdType',\n  'owner',\n  'name',\n  'projectId',\n  'comparisonDelta',\n];\n\nexport const DuplicateTriggerFields: string[] = ['alertThreshold', 'label'];\n\nexport const DuplicateActionFields: string[] = [\n  'type',\n  'targetType',\n  'targetIdentifier',\n  'inputChannelId',\n  'options',\n];\n\nexport const COMPARISON_DELTA_OPTIONS = [\n  {value: 5, label: t('same time 5 minutes ago')}, // 5 minutes\n  {value: 15, label: t('same time 15 minutes ago')}, // 15 minutes\n  {value: 60, label: t('same time one hour ago')}, // one hour\n  {value: 1440, label: t('same time one day ago')}, // one day\n  {value: 10080, label: t('same time one week ago')}, // one week\n  {value: 43200, label: t('same time one month ago')}, // 30 days\n];\n\nexport function getWizardAlertFieldConfig(\n  alertType: AlertType,\n  dataset: Dataset\n): OptionConfig {\n  if (alertType === 'custom' && dataset === Dataset.ERRORS) {\n    return errorFieldConfig;\n  }\n  // If user selected apdex we must include that in the OptionConfig as it has a user specified column\n  const aggregations =\n    alertType === 'apdex' || alertType === 'custom'\n      ? allAggregations\n      : commonAggregations;\n  return {\n    aggregations,\n    fields: ['transaction.duration'],\n    measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n  };\n}\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: allAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: AlertRuleTriggerType): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(\n  defaultRuleOptions: Partial<UnsavedMetricRule> = {}\n): UnsavedMetricRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 60,\n    thresholdPeriod: 1,\n    triggers: [\n      createDefaultTrigger(AlertRuleTriggerType.CRITICAL),\n      createDefaultTrigger(AlertRuleTriggerType.WARNING),\n    ],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n    ...defaultRuleOptions,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedMetricRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n\n  let aggregate = eventView.getYAxis();\n  if (\n    datasetAndEventtypes.dataset === 'transactions' &&\n    /^p\\d{2,3}\\(\\)/.test(eventView.getYAxis())\n  ) {\n    // p95() -> p95(transaction.duration)\n    aggregate = eventView.getYAxis().slice(0, 3) + '(transaction.duration)';\n  }\n\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate,\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n\nexport function createRuleFromWizardTemplate(\n  wizardTemplate: WizardRuleTemplate\n): UnsavedMetricRule {\n  const {eventTypes, aggregate, dataset} = wizardTemplate;\n  const defaultRuleOptions: Partial<UnsavedMetricRule> = {};\n\n  if (isSessionAggregate(aggregate)) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n    defaultRuleOptions.timeWindow = TimeWindow.ONE_HOUR;\n  }\n\n  if (aggregate.includes('apdex')) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n  }\n\n  return {\n    ...createDefaultRule(defaultRuleOptions),\n    eventTypes: [eventTypes],\n    aggregate,\n    dataset,\n  };\n}\n\nexport function getThresholdUnits(\n  aggregate: string,\n  comparisonType: AlertRuleComparisonType\n): string {\n  // cls is a number not a measurement of time\n  if (\n    isSessionAggregate(aggregate) ||\n    comparisonType === AlertRuleComparisonType.CHANGE\n  ) {\n    return '%';\n  }\n\n  if (aggregate.includes('measurements.cls')) {\n    return '';\n  }\n\n  if (aggregate.includes('duration') || aggregate.includes('measurements')) {\n    return 'ms';\n  }\n\n  return '';\n}\n","import {t} from 'sentry/locale';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions only has one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, seriesName);\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, seriesName);\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n","import {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex threshold and time interval'),\n      timeWindowText,\n    };\n  }\n  if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  }\n  return {\n    labelText: t('Select function and time interval'),\n    timeWindowText,\n  };\n}\n"],"names":["IncompatibleQueryAlert","incompatibleQuery","eventView","orgId","onClose","hasProjectError","hasEnvironmentError","hasEventTypeError","hasYAxisError","totalErrors","Object","values","filter","val","length","eventTypeError","clone","query","eventTypeTransaction","eventTypeDefault","eventTypeErrorDefault","pathname","eventTypeLinks","error","to","generateQueryStringObject","default","transaction","errorDefault","StyledAlert","type","showIcon","trailingItems","icon","size","t","onClick","borderless","Fragment","tct","yAxis","StyledCode","getYAxis","StyledUnorderedList","CreateAlertFromViewButton","projects","organization","referrer","onIncompatibleQuery","onSuccess","useAlertWizardV3","alertType","buttonProps","project","environment","getQueryDatasource","column","explodeFieldString","kind","eventTypeMatch","match","yAxisConfig","errorFieldConfig","transactionFieldConfig","invalidFunction","aggregations","includes","function","aggregation","AGGREGATIONS","isNumericParameter","parameters","some","param","dataType","allowedParameters","fields","measurementKeys","invalidParameter","incompatibleYAxis","errors","find","p","id","queryParams","slug","replace","hasErrors","x","alertTemplate","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","undefined","createFromDiscover","aggregate","CreateAlertButton","event","preventDefault","onAlertClose","withRouter","projectSlug","iconProps","router","hideIcon","showPermissionGuide","api","useApi","createAlertUrl","providedProj","hasAlertWizardV3","features","alertsBaseUrl","alertsArgs","item","join","handleClickWithoutProject","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","settingsLink","renderButton","hasAccess","disabled","title","tooltipProps","isHoverable","position","overlayStyle","maxWidth","children","showGuide","access","isOrgAdmin","target","onFinish","Alert","theme","textColor","tooltipFormatter","value","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","DAY","HOUR","MINUTE","SECOND","DEFAULT_COUNT_TIME_WINDOW","DEFAULT_CHANGE_TIME_WINDOW","DEFAULT_CHANGE_COMP_DELTA","DEFAULT_AGGREGATE","DEFAULT_TRANSACTION_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","Dataset","DATASOURCE_EVENT_TYPE_FILTERS","Datasource","commonAggregations","allAggregations","DuplicateMetricFields","DuplicateTriggerFields","DuplicateActionFields","COMPARISON_DELTA_OPTIONS","getWizardAlertFieldConfig","dataset","keys","WEB_VITAL_DETAILS","createDefaultTrigger","alertThreshold","actions","createDefaultRule","defaultRuleOptions","eventTypes","EventTypes","timeWindow","thresholdPeriod","triggers","AlertRuleTriggerType","resolveThreshold","thresholdType","AlertRuleThresholdType","createRuleFromEventView","parsedQuery","datasetAndEventtypes","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","source","test","slice","createRuleFromWizardTemplate","wizardTemplate","isSessionAggregate","TimeWindow","getThresholdUnits","comparisonType","AlertRuleComparisonType","SessionsAggregate","TimePeriod","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","getStartEndFromStats","stats","start","getUtcDateString","eventStats","end","isIssueAlert","hasOwnProperty","DATA_SOURCE_LABELS","convertDatasetEventTypesToSource","sort","trim","toUpperCase","SESSION_AGGREGATE_TO_FIELD","SessionFieldWithOperation","alertAxisFormatter","round","alertTooltipValueFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart","alertDetailsLink","incident","alertRule","status","originalAlertRuleId","getQueryStatus","Array","isArray","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","AlertWizardAlertNames","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","options","hidePrimarySelectorSet","Set","hideParameterSelectorSet","getFunctionHelpText","timeWindowText","labelText","has"],"sourceRoot":""}