{"version":3,"file":"chunks/app_components_dropdownControl_tsx-app_views_performance_vitalDetail_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"iwBAgFA,MAAMA,UAAwBC,EAAAA,UAM5BC,aAAaC,EAAiBC,GAC5B,MAAM,MACJC,EADI,OAEJC,EAFI,YAGJC,EAHI,mBAIJC,EAJI,SAKJC,EALI,SAMJC,EANI,UAOJC,GACEC,KAAKC,MAET,OAAIP,EACKA,EAAO,CAACH,OAAAA,EAAQC,cAAAA,IAGrBI,IAAuBL,GAEvB,QAAC,IAAD,CAASW,aAAW,EAACC,SAAS,MAAMC,MAAOR,EAA3C,UACE,QAACS,EAAD,CACER,SAAUA,KACNL,EAAcG,GAClBJ,OAAQA,EACR,eAAa,0BACbO,SAAUA,EACVQ,kBAAmBR,EACnBS,kBAAmBR,MAAAA,GAAAA,EAPrB,SASGN,OAOP,QAACY,EAAD,CACER,SAAUA,KACNL,EAAcG,GAClBJ,OAAQA,EACR,eAAa,0BACbO,SAAUA,EACVQ,kBAAmBR,EACnBS,kBAAmBR,MAAAA,GAAAA,EAPrB,SASGN,IAKPe,eAAejB,EAAiBkB,GAC9B,MAAM,SAACC,EAAD,WAAWC,EAAX,UAAuBC,EAAvB,eAAkCC,EAAlC,SAAkDhB,EAAlD,SAA4DC,GAChEE,KAAKC,MAEP,GAAwB,mBAAbS,EACT,OAAOA,EAAS,CAACnB,OAAAA,EAAQkB,aAAAA,IAG3B,MAAMK,EAAYH,EAAa,QAAU,OAEzC,OACE,QAACI,EAAD,IACMN,IACJZ,SAAUA,EACViB,UAAWA,EACXE,MAAOJ,EACPrB,OAAQA,EACRsB,eAAgBA,EAChBf,SAAUA,EACVmB,aAAW,EACX,eAAa,mBATf,SAWGP,IAKPQ,SACE,MAAM,iBAACC,EAAD,UAAmBC,EAAnB,UAA8BrB,GAAaC,KAAKC,MAEtD,OACE,QAACoB,EAAD,CAAWD,UAAWA,EAAWrB,UAAWA,MAAAA,GAAAA,EAA5C,UACE,QAAC,IAAD,CAAcoB,iBAAkBA,EAAhC,SACG,QAAC,OAAC5B,EAAD,aAASkB,EAAT,cAAuBjB,GAAxB,SACC,QAAC,EAAA8B,SAAD,WACGtB,KAAKV,aAAaC,EAAQC,GAC1BQ,KAAKQ,eAAejB,EAAQkB,YA1FrCrB,EAAAA,YAAAA,mB,OAAAA,EAAAA,eACgC,CAClC+B,kBAAkB,EAClBP,UAAW,SAgGf,MAAMS,GAAY,OAAO,MAAP,qBAAH,8DAIQE,GAAKA,EAAEC,MAAMC,YAAYC,OAJjC,YAKFH,GAAKA,EAAExB,WAAa,QALlB,MASTM,GAAuB,OAAOsB,EAAAA,EAAP,qBAAH,YACbJ,GAAKA,EAAEC,MAAMI,OAAOC,qBAAqBC,OAD5B,wBAKpBf,GAAU,OAAOgB,EAAAA,EAAP,qBAAH,YACAR,GAAMA,EAAEhC,OAAS,QAAU,QAD3B,kBAEKgC,GAAKA,EAAEC,MAAM9B,OAAO6B,EAAE1B,UAAY,QAAQmC,QAF/C,KAKPC,GAAe,OAAOC,EAAAA,EAAP,qBAAH,cACHX,GAAKA,EAAEC,MAAMW,gBADV,KAIlB,K,63BCjLA,MAAMC,EAA8B,IAAIC,OACrC,IAAGC,EAAAA,QAAuBC,EAAAA,KAC3B,KAiBF,SAASC,EAAUvC,GACjB,MAAM,eACJwC,EADI,aAEJC,EAFI,KAGJC,EAHI,SAIJC,EAJI,OAKJC,EALI,WAMJC,EANI,yBAOJC,EAPI,cAQJC,GACE/C,EAEEgD,GAAMC,EAAAA,EAAAA,MAEZC,EAAAA,EAAAA,YAAU,KAAM,QAEd,aAAAC,EAAoBC,OAAMC,aAA1B,mBAEC,CAACR,IAIJ,MAAMM,EAAsBG,GAAAA,EAC1B,CAACC,EAAKC,EAAOC,KACX,MAAMC,EAAoBb,MAAAA,OAAJ,EAAIA,EAAmCc,IAAIC,QAEjE,OAAIC,EAAAA,EAAAA,IAAiBN,EAAIO,OAAQC,EAAAA,EAAAA,IAAcR,EAAIO,KAG1CE,QAAQC,QAAQ,KAGlBC,EAAAA,EAAAA,IACLlB,EACAP,EAAa0B,KACbZ,EAAIO,IACJN,EACAE,EACAD,GAGA,EAGAX,GACAsB,MACAC,GACEC,GAAAA,CAAQD,EAAQE,QAAO,QAAC,KAACC,GAAF,SAAYC,EAAAA,EAAAA,IAAQD,MAAOb,KAAI,QAAC,KAACa,GAAF,SAAYA,QACpE,KACE,MAAM,IAAIE,MAAM,4CAItB,CAAC,EAAOlB,KAAR,IAAC,IAACM,GAAF,QAAmB,GAAEA,KAAON,OAGxBmB,EACJC,IAIA,MAAMC,EAAejC,EACjBkC,OAAOC,YACLnC,EACG2B,QACCS,IACGF,OAAOG,KAAKC,EAAAA,IAAYC,SAASH,EAAKI,UAAWC,EAAAA,EAAAA,IAAWL,EAAKI,SAErEzB,KAAIqB,GAAQ,CAACA,EAAKI,MAAO,CAACtB,IAAKkB,EAAKI,MAAOZ,KAAMQ,EAAKI,WAE3D,GAEEE,EAAY7C,EAAa8C,SAASJ,SAAS,oBAC7CL,OAAOU,OAAO,GAAIZ,EAAcM,EAAAA,GAAYL,GAC5CY,GAAAA,CAAKP,EAAAA,GAAYQ,EAAAA,IAEfC,EAAWH,GAAAA,CAAO,GAAI9C,EAAM4C,EAAWM,EAAAA,IAQ7C,OAPAD,EAASE,IAAM,CACb/B,IAAK,MACLU,KAAM,eACNsB,OAAQhB,OAAOG,KAAKU,GACpBI,YAAY,GAGPN,GAAAA,CAAKE,EAAUhD,MAAAA,EAAAA,EAAY,KAGpC,OACE,QAAC,IAAD,UACG,QAAC,aAACiC,GAAF,SACC,QAAC,IAAD,CACEoB,mBAAiB,EACjBC,gBAAiBC,EAAAA,GAAAA,MACjBC,eAAgBhD,EAChBiD,cAAezB,EAAWC,GAC1ByB,aAAc7C,GAELA,EAAM8C,QAAQnE,EAA6B,IAEpDK,eAAgBA,EAChB+D,oBAAkB,EAClBxD,cAAeA,MAAAA,EAAAA,EAAiB,IAChCyD,YAAaA,EAAAA,MACTxG,OAvGLuC,EAAAA,YAAAA,YA8GT,SAAekE,EAAAA,EAAAA,GAASlE,I,kVCxIxB,SAASmE,EACPC,GAEA,OAAO7B,OAAOC,YACZD,OAAO8B,QAAQD,GAAShD,KAAI,IAAkB,IAAhBG,EAAK+C,GAAW,EAK5C,MAAO,CAAC/C,EAJsB,CAC5BU,KAAMqC,EAAMrC,KACZV,IAAAA,QAOR,MAAMgD,EAAsBJ,EAAwBK,EAAAA,IAC9CC,EAAmBN,EAAwBO,EAAAA,IAE1C,SAASC,IACd,MAAO,IAAIF,KAAqBF,GAWlC,SAASK,EAAT,GAAyC,IAAnB,SAAC1G,GAAkB,EACvC,MAAMmE,EAAesC,IACrB,OAAO,QAAC,EAAA7F,SAAD,UAAWZ,EAAS,CAACmE,aAAAA,MAFrBuC,EAAAA,YAAAA,eAKT,W,yLC/CO,SAASC,EAAeC,GAI7B,OAAOA,EAAKC,QAAU,EAAID,EAAK,GAAGE,IAAMF,EAAK,GAAGE,IAAM,EAGjD,SAASC,EAAeH,GAC7B,MAAMtG,EAAQqG,EAAeC,GAE7B,OAAOA,EAAK1D,KAAIqB,IACd,MAAMyC,EAASzC,EAAKuC,IACpB,MAAO,CACLG,MAAOD,EACPE,IAAKF,EAAS1G,MAKb,SAAS6G,EACdP,GAUA,IATA,UACEQ,EADF,KAEEC,EAFF,mBAGEC,GAMF,uDADI,GAEJ,MAAMC,EAAanB,IACjB,OAAQiB,GACN,IAAK,WACH,MAAMG,EAAgBJ,MAAAA,EAAAA,EAAchB,EAAQ,IAAO,EAAI,EACvD,OAAOqB,EAAAA,EAAAA,IAAYrB,EAAQ,IAAMoB,GAAe,GAClD,IAAK,SAKH,MAAME,EAAS,KAAON,MAAAA,EAAAA,EAAa,GACnC,OAAQO,KAAKC,OAAOxB,EAAQyB,OAAOC,SAAWJ,GAAUA,GAAQK,iBAClE,QACE,MAAM,IAAI9D,MAAO,0BAAyBoD,OAGhD,OAAOT,EAAK1D,KAAIqB,IAAQ,MACtB,MAAO,CACL6B,MAAO7B,EAAKyD,MACZjE,KAAMwD,EAAUhD,EAAKuC,QACrB,UAAIQ,MAAAA,OAAJ,EAAIA,EAAqB/C,EAAKuC,YAA9B,QAAsC,S,kZCb5C,QA1BA,SAA+CmB,GAC7C,MAAMC,UAAiBvJ,EAAAA,UAAmD,uDAGzD,CACbsD,KAAMkG,EAAAA,EAAAA,gBAJgE,0BAW1DA,EAAAA,EAAAA,QACXlG,GAAwB3C,KAAK8I,SAAS,CAACnG,KAAAA,UACxCoG,IANFC,uBACEhJ,KAAKiJ,cAQP/H,SACE,MAAM,KAACyB,KAAS1C,GAASD,KAAKC,MAC9B,OAAO,QAAC0I,EAAD,CAAwBhG,KAAMA,MAAAA,EAAAA,EAAQ3C,KAAKkJ,MAAMvG,QAAS1C,KAIrE,OAtBM2I,EADiF,+BACjFA,EADiF,cAE/D,aAAWO,EAAAA,EAAAA,GAAeR,OAqB3CC,I,2zBCRT,MAAMQ,UAAmB/J,EAAAA,UACvBgK,YACE,MAAMC,EAAkB,IAClB,aACJ5G,EADI,SAEJ6G,EAFI,YAGJC,EAHI,UAIJC,EAJI,SAKJC,EALI,UAMJC,EANI,UAOJC,EAPI,IAQJC,GACE7J,KAAKC,MAEH6J,EAAwC,CAC5CC,UAAUC,EAAAA,EAAAA,IAAyBtH,GACnCe,MAAO,IACF8F,EAAS9F,MAEZ+F,iBAAaT,IAUjB,GANAO,EAAOW,KAAK,CACVC,GAAIJ,EACJrK,OAAO0K,EAAAA,EAAAA,GAAE,eACTC,qBAAqB,IAGnBX,EAAW,CACb,MAAMY,GAAkBC,EAAAA,EAAAA,IAA0B,CAChDC,QAAS7H,EAAa0B,KACtBqF,UAAW,MACXe,WAAWC,EAAAA,EAAAA,IAAalB,EAAS9F,MAAMiH,SACvCjH,MAAO8F,EAAS9F,QAElB6F,EAAOW,KAAK,CACVC,GAAIG,EACJ5K,OAAO0K,EAAAA,EAAAA,GAAE,gBACTC,qBAAqB,SAElB,GAAIZ,EAAa,CACtB,MAAMmB,EAAa,CACjBJ,QAAS7H,EAAa0B,KACtBoF,YAAaA,EAAY/E,KACzB+F,UAAWhB,EAAYkB,QACvBjH,MAAO8F,EAAS9F,OAGlB,OAAQoG,GACN,KAAKe,EAAAA,EAAAA,KAAU,CACb,MAAMC,GAAaC,EAAAA,EAAAA,IAAmBH,GACtCrB,EAAOW,KAAK,CACVC,GAAIW,EACJpL,OAAO0K,EAAAA,EAAAA,GAAE,QACTC,qBAAqB,IAEvB,MAEF,KAAKQ,EAAAA,EAAAA,OAAY,CACf,MAAMG,GAAeC,EAAAA,EAAAA,IAAqBL,GAC1CrB,EAAOW,KAAK,CACVC,GAAIa,EACJtL,OAAO0K,EAAAA,EAAAA,GAAE,cACTC,qBAAqB,IAEvB,MAEF,KAAKQ,EAAAA,EAAAA,UAAe,CAClB,MAAMP,GAAkBY,EAAAA,EAAAA,IAAqBN,GAC7CrB,EAAOW,KAAK,CACVC,GAAIG,EACJ5K,OAAO0K,EAAAA,EAAAA,GAAE,cACTC,qBAAqB,IAEvB,MAEF,KAAKQ,EAAAA,EAAAA,MAAW,CACd,MAAMM,GAAcC,EAAAA,EAAAA,IAAoBR,GACxCrB,EAAOW,KAAK,CACVC,GAAIgB,EACJzL,OAAO0K,EAAAA,EAAAA,GAAE,SACTC,qBAAqB,IAEvB,MAEF,KAAKQ,EAAAA,EAAAA,mBACL,QAAS,CACP,MAAMQ,GAAgBC,EAAAA,EAAAA,IAAiCV,GACvDrB,EAAOW,KAAK,CACVC,GAAIkB,EACJ3L,OAAO0K,EAAAA,EAAAA,GAAE,uBACTC,qBAAqB,MAuB7B,OAjBIZ,GAAeE,EACjBJ,EAAOW,KAAK,CACVC,GAAI,GACJzK,OAAO0K,EAAAA,EAAAA,GAAE,kBAEFX,GAAeG,EACxBL,EAAOW,KAAK,CACVC,GAAI,GACJzK,OAAO0K,EAAAA,EAAAA,GAAE,mBAEFP,GACTN,EAAOW,KAAK,CACVC,GAAI,GACJzK,OAAO0K,EAAAA,EAAAA,GAAE,gBAINb,EAGTpI,SACE,OAAO,QAAC,IAAD,CAAaoI,OAAQtJ,KAAKqJ,eAvH/BD,EAAAA,YAAAA,aA2HN,W,oEC3JKwB,E,0BAAAA,GAAAA,EAAAA,EAAAA,mBAAAA,GAAAA,qBAAAA,EAAAA,EAAAA,UAAAA,GAAAA,YAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,UAAAA,GAAAA,Y,CAAAA,IAAAA,EAAAA,KASL,W,oYCDO,IAAKU,EAuBL,SAASC,EACdC,EACAC,GAEA,MAAM,IAACC,EAAD,IAAMC,EAAN,IAAWC,EAAX,IAAgBC,GAAOJ,GAEzB,CAACC,IAAK,EAAGC,IAAK,EAAGC,IAAK,EAAGC,IAAK,GAClC,MAAO,CACL,CAACP,EAAwBO,KAAM,CAC7BpH,KAAM6G,EAAwBO,IAC9BpI,MAAOoI,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAIC,QAAQ,YAAS/C,EACjEgD,KAAM,CACJC,KAAM,OACN3G,OAAO4G,EAAAA,EAAAA,IAAcT,IAAiC,wBAExD/L,OAAO0K,EAAAA,EAAAA,GAAE,QAEX,CAACmB,EAAwBM,KAAM,CAC7BnH,KAAM6G,EAAwBM,IAC9BnI,MAAOmI,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAIE,QAAQ,YAAS/C,EACjEgD,KAAM,CACJC,KAAM,OACN3G,OAAO4G,EAAAA,EAAAA,IAAcT,IAAiC,wBAExD/L,OAAO0K,EAAAA,EAAAA,GAAE,QAEX,CAACmB,EAAwBK,KAAM,CAC7BlH,KAAM6G,EAAwBK,IAC9BlI,MAAOkI,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAIG,QAAQ,YAAS/C,EACjEgD,KAAM,CACJC,KAAM,OACN3G,OAAO4G,EAAAA,EAAAA,IAAcT,IAAiC,wBAExD/L,OAAO0K,EAAAA,EAAAA,GAAE,QAEX,CAACmB,EAAwBI,KAAM,CAC7BjH,KAAM6G,EAAwBI,IAC9BjI,MAAOiI,EAAM,CAAC,CAAC,uBAAyB,KAAIA,EAAII,QAAQ,YAAS/C,EACjEgD,KAAM,CACJC,KAAM,OACN3G,OAAO4G,EAAAA,EAAAA,IAAcT,IAAiC,wBAExD/L,OAAO0K,EAAAA,EAAAA,GAAE,QAEX,CAACmB,EAAwBY,MAAO,CAC9BzH,KAAM6G,EAAwBY,KAC9BzM,OAAO0K,EAAAA,EAAAA,GAAE,UAKR,SAASa,EAAT,GAUJ,IAVkC,QACnCT,EADmC,YAEnCf,EAFmC,UAGnCgB,EAHmC,MAInC/G,GAMC,EAED,MAAO,CACLsG,SAFgB,kBAAiBQ,gCAGjC9G,MAAO,CACL+F,YAAAA,EACAkB,QAASF,EACT2B,YAAa1I,EAAM0I,YACnBC,YAAa3I,EAAM2I,YACnBzE,MAAOlE,EAAMkE,MACbC,IAAKnE,EAAMmE,IACXnE,MAAOA,EAAMA,QAcZ,SAAS4I,EAAsC9C,GACpD,OAVsB+C,GAWpB7B,EAAAA,EAAAA,IAAalB,EAAS9F,MAAM8I,iBAAkBjB,EAAwBY,MATtEnH,OAAOgB,OAAOuF,GAAyBlG,SAASkH,GAEzCA,EAGFhB,EAAwBY,KAPjC,IAAwBI,EAejB,SAASE,EACdF,EACAd,GACA,QACA,MAAMiB,EAAsBlB,EAAuBC,GAC7CQ,EAAI,UAAGS,EAAoBH,GAAQP,YAA/B,aAAG,EAAkCC,KACzC3G,EAAK,UAAGoH,EAAoBH,GAAQP,YAA/B,aAAG,EAAkC1G,MAE1C5B,EAAmD,CACvD8I,iBAAkBD,GAKpB,OAHIN,GAAQ3G,IACV5B,EAAMsI,KAAQ,GAAW,SAATC,EAAkB,IAAM,KAAK3G,KAExC5B,EAGF,SAASiJ,EACdC,GAEA,OAAQA,GACN,KAAKC,EAAAA,GAAAA,QACH,OAAOtB,EAAwBY,KACjC,KAAKU,EAAAA,GAAAA,KACH,OAAOtB,EAAwBK,IACjC,QACE,S,SA7IML,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,MAAAA,EAAAA,KAAAA,O,CAAAA,IAAAA,EAAAA,M,kFCRL,IAAKuB,EAOAC,E,kCAPAD,GAAAA,EAAAA,mBAAAA,mBAAAA,EAAAA,mBAAAA,mBAAAA,EAAAA,mBAAAA,mBAAAA,EAAAA,mBAAAA,mB,CAAAA,IAAAA,EAAAA,K,SAOAC,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,eAAAA,gBAAAA,EAAAA,mBAAAA,mB,CAAAA,IAAAA,EAAAA,M,uqBCWL,SAAS3B,EAAT,GAUJ,IAViC,QAClCZ,EADkC,YAElCf,EAFkC,UAGlCgB,EAHkC,MAIlC/G,GAMC,EACD,MAAMsG,EAfD,YAAkE,IAAtC,QAACQ,GAAqC,EACvE,MAAQ,kBAAiBA,+BAcRwC,CAAmB,CAClCxC,QAAAA,IAGF,MAAO,CACLR,SAAAA,EACAtG,MAAO,CACL+F,YAAAA,EACAkB,QAASF,EACT2B,YAAa1I,EAAM0I,YACnBC,YAAa3I,EAAM2I,YACnBzE,MAAOlE,EAAMkE,MACbC,IAAKnE,EAAMmE,IACXnE,MAAOA,EAAMA,QAKZ,MAAMuJ,EAAsB,GAEtBC,EAAwBC,GAAAA,CAAKC,EAAAA,GAA0B,CAClE,KACA,MACA,KACA,MACA,QAGWC,EAAsC,CACjD,CACEC,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,mBACT9E,MAAOyH,EAAAA,EAAAA,oBAET,CACEO,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,iBACT9E,MAAOyH,EAAAA,EAAAA,gBAET,CACEO,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,eACT9E,MAAOyH,EAAAA,EAAAA,OAET,CACEO,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,iBACT9E,MAAOwH,EAAAA,EAAAA,oBAET,CACEQ,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,iBACT9E,MAAOwH,EAAAA,EAAAA,oBAET,CACEQ,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,iBACT9E,MAAOwH,EAAAA,EAAAA,oBAET,CACEQ,QAAQlD,EAAAA,EAAAA,GAAE,WACV1K,OAAO0K,EAAAA,EAAAA,GAAE,iBACT9E,MAAOwH,EAAAA,EAAAA,qBAILS,EAAeR,EAAAA,EAAAA,mBAErB,SAASS,EAAmBxB,GAE1B,OADiBqB,EAAkBI,MAAKlB,GAAUA,EAAOjH,QAAU0G,KAI5DqB,EAAkBI,MAAKlB,GAAUA,EAAOjH,QAAUiI,IAGpD,SAASG,EACdlE,GAEgB,YADhBmE,EACgB,uDADE,OAElB,MAAM3B,EAAI,WAAGtB,EAAAA,EAAAA,IAAalB,MAAAA,GAAD,UAACA,EAAU9F,aAAX,aAAC,EAAkBiK,WAAlC,QAA+CJ,EACzD,OAAOC,EAAmBxB,GAGrB,SAAS4B,EAAgCC,GAE9C,OAAOL,EADMK,EAAUC,MAAMtG,OAASqG,EAAUC,MAAM,GAAGxI,MAAQiI,GAI5D,SAASQ,EAAcpE,GAC5B,KAAKhF,EAAAA,EAAAA,IAAQgF,GACX,OAGF,MAAMqE,EAAerE,EAASsE,YAAY,KAC1C,OAAID,EAAe,OAAnB,EAOO,CAACE,GAHGvE,EAASwE,MAAM,EAAGH,GAGjBI,MAFEzE,EAASwE,MAAMH,EAAe,IAKvC,SAASK,EAAT,GAMO,IANyB,SACrC7E,EADqC,gBAErC8E,GAIY,EACZ,MAAM5K,GAAQgH,EAAAA,EAAAA,IAAalB,EAAS9F,MAAMA,MAAO,IAC3C6K,EAAa,IAAIC,EAAAA,GAAc9K,GAErC6K,EAAWE,gBAAgB,aAAc,CAAC,gBAC1CF,EAAWE,gBAAgB,cAAe,CAACH,IAE3CtJ,OAAOG,KAAKoJ,EAAWG,SAASC,SAAQrJ,KAClCvB,EAAAA,EAAAA,IAAiBuB,IACnBiJ,EAAWK,aAAatJ,MAI5B,MAAMuI,EAAYgB,EAAAA,GAAAA,yBAChB,CACEC,QAAI9F,EACJ+F,QAAS,EACTrK,KAAM4J,EACNxL,OAAQ,IAAIkC,OAAOgB,OAAO+G,EAAAA,MAAoB/H,OAAOgB,OAAO8G,EAAAA,IAC5DpJ,MAAO6K,EAAWS,eAClBC,SAAU,IAEZzF,GAGIwC,EAAO0B,EAA+BlE,GAC5C,OAAOqE,EAAUqB,UAAU,CAAC,CAAC5J,MAAO0G,EAAK1G,MAAO2G,KAAM,UASjD,SAASkD,EAActB,GAC5B,MAAMuB,EAAavB,EAAUwB,YAAY,CACvC,CAACpD,KAAM,WAAYqD,SAAU,CAAC,QAAS,QAAItG,OAAWA,MAGlDuF,EAAa,IAAIC,EAAAA,GAAcX,EAAUnK,OAU/C,OAPAsB,OAAOG,KAAKoJ,EAAWG,SAASC,SAAQrJ,KAClCvB,EAAAA,EAAAA,IAAiBuB,IACnBiJ,EAAWK,aAAatJ,MAI5B8J,EAAW1L,MAAQ6K,EAAWS,eACvBI,EAGF,MAAMG,EAAkD,CAC7D,CAACxC,EAAAA,EAAAA,oBAAoC,CACnC,8CACA,UACA,mBACA,kCAEF,CAACA,EAAAA,EAAAA,gBAAgC,CAC/B,8CACA,UACA,mBACA,sCACA,kCAEF,CAACA,EAAAA,EAAAA,OAAuB,CACtB,8CACA,UACA,mBACA,kCAEF,CAACD,EAAAA,EAAAA,oBAAyC,CACxC,6CACA,UACA,mBACA,kCAEF,CAACA,EAAAA,EAAAA,oBAAyC,CACxC,8CACA,UACA,mBACA,kCAEF,CAACA,EAAAA,EAAAA,oBAAyC,CACxC,8CACA,UACA,mBACA,kCAEF,CAACA,EAAAA,EAAAA,oBAAyC,CACxC,8CACA,UACA,mBACA,mCAIG,SAAS0C,EAA+BzI,GAC7C,OAAOA,EAAMP,QAAQ,YAAa,U,yQCtO7B,SAASiJ,EAAqBjG,GACnC,OAAOkB,EAAAA,EAAAA,IAAalB,EAAS9F,MAAMgM,QAG9B,SAASC,EAAwBhN,IACtCiN,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,qCACVC,UAAW,4CACXC,gBAAiBC,SAASrN,EAAamM,GAAI,MAIxC,SAAS/D,EAAT,GAUJ,IAVgC,QACjCP,EADiC,YAEjCf,EAFiC,UAGjCgB,EAHiC,MAIjC/G,GAMC,EACD,MAAMsG,EA3BD,YAAiE,IAAtC,QAACQ,GAAqC,EACtE,MAAQ,kBAAiBA,8BA0BRyF,CAAkB,CACjCzF,QAAAA,IAGF,MAAO,CACLR,SAAAA,EACAtG,MAAO,CACL+F,YAAAA,EACAkB,QAASF,EACT2B,YAAa1I,EAAM0I,YACnBC,YAAa3I,EAAM2I,YACnBzE,MAAOlE,EAAMkE,MACbC,IAAKnE,EAAMmE,IACXnE,MAAOA,EAAMA,MACbgM,OAAQhM,EAAMgM,SAKb,SAASQ,EAAsB1G,GAAoB,QAExD,IAAI2G,EAAO,WAAGzF,EAAAA,EAAAA,IAAY,UAAClB,EAAS9F,aAAV,aAAC,EAAgByM,gBAAhC,QAA4C,aAMvD,MAJI,CAAC,YAAY1C,MAAK2C,IAAM,uBAAID,SAAJ,aAAI,EAAS9K,SAAS+K,QAChDD,EAAU,cAGLA,EAIF,SAASE,EAAyBC,GACvC,MAAMhL,EAAQN,OAAOG,KAAKmL,GAAK7C,MAAK8C,GAAKA,EAAElL,SAAS,eACpD,IAAKC,EACH,OAEF,MAAMkL,EAAQlL,EAAMmL,MAAM,KAC1B,MAAO,CACLC,eAAgBpL,EAChBqL,WAAYX,SAASQ,EAAMA,EAAMhJ,OAAS,GAAI,IAC9CoJ,OAAQZ,SAASQ,EAAMA,EAAMhJ,OAAS,GAAI,IAC1CqJ,WAAYb,SAASQ,EAAMA,EAAMhJ,OAAS,GAAI,O,yMC5D3C,SAAS0D,EAAT,GAUJ,IAVkC,QACnCV,EADmC,YAEnCf,EAFmC,UAGnCgB,EAHmC,MAInC/G,GAMC,EACD,MAAMsG,EAfD,YAAmE,IAAtC,QAACQ,GAAqC,EACxE,MAAQ,kBAAiBA,gCAcRsG,CAAoB,CACnCtG,QAAAA,IAGF,MAAO,CACLR,SAAAA,EACAtG,MAAO,CACL+F,YAAAA,EACAkB,QAASF,EACT2B,YAAa1I,EAAM0I,YACnBC,YAAa3I,EAAM2I,YACnBzE,MAAOlE,EAAMkE,MACbC,IAAKnE,EAAMmE,IACXnE,MAAOA,EAAMA,QAYZ,SAASqN,EACdC,EACAC,GAEA,MAAMhQ,GAAQqG,EAAAA,EAAAA,IAAe0J,GAE7B,OAAKA,EAAUxJ,QAAUyJ,GAASD,EAAUA,EAAUxJ,OAAS,GAAGC,IAAMxG,EAC/D,KAELgQ,EAAQD,EAAU,GAAGvJ,KACf,EAGHa,KAAK4I,OAAOD,EAAQD,EAAU,GAAGvJ,KAAOxG,GAU1C,SAASkQ,EAAWH,GAEzB,GAAIA,EAAUxJ,OAAS,EACrB,OAAO,KAGT,IAAK,IAAI4J,EAAI,EAAGA,EAAIJ,EAAUxJ,OAAQ4J,IAAK,CACzC,MAAMC,EAAQL,EAAUI,GACxB,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIN,EAAUxJ,OAAQ8J,IAAK,CAC7C,MAAMC,EAAQP,EAAUM,GAExB,GAAID,EAAM5J,MAAQ8J,EAAM9J,KAAO4J,EAAM1I,QAAU4I,EAAM5I,MACnD,MAAO,CACL6I,OAAQ,CAACC,EAAGL,EAAGM,EAAGpJ,KAAKqJ,IAAIN,EAAM1I,MAAO4I,EAAM5I,QAC9CiJ,OAAQ,CAACH,EAAGH,EAAGI,EAAGpJ,KAAKuJ,IAAIR,EAAM1I,MAAO4I,EAAM5I,UAQtD,MAAO,CACL6I,OAAQ,CAACC,EAAG,EAAGC,EAAG,GAClBE,OAAQ,CAACH,EAAG,EAAGC,EAAG,IAQf,SAASI,EAAYC,EAAmBC,GAC7C,MAAMR,EAASO,EAASE,eAAe,CAACC,WAAY,EAAGC,WAAY,GAAI,CACrEH,EAASR,OAAOC,EAChBO,EAASR,OAAOE,IAGlB,GAAIU,MAAMZ,MAAAA,OAAD,EAACA,EAAS,KAAOY,MAAMZ,MAAAA,OAAD,EAACA,EAAS,IACvC,OAAO,KAGT,MAAMI,EAASG,EAASE,eAAe,CAACC,WAAY,EAAGC,WAAY,GAAI,CACrEH,EAASJ,OAAOH,EAChBO,EAASJ,OAAOF,IAGlB,OAAIU,MAAMR,MAAAA,OAAD,EAACA,EAAS,KAAOQ,MAAMR,MAAAA,OAAD,EAACA,EAAS,IAChC,KAGF,CACLJ,OAAQ,CAACC,EAAGD,EAAO,GAAIE,EAAGF,EAAO,IACjCI,OAAQ,CAACH,EAAGG,EAAO,GAAIF,EAAGE,EAAO,KAS9B,SAASS,EACdC,EACAC,EACAC,GAEA,GACED,EAAQf,OAAOC,IAAMc,EAAQX,OAAOH,GACpCc,EAAQf,OAAOE,IAAMa,EAAQX,OAAOF,GACpCc,EAAShB,OAAOC,IAAMe,EAASZ,OAAOH,GACtCe,EAAShB,OAAOE,IAAMc,EAASZ,OAAOF,EAEtC,OAAO,KAGT,MAAMe,GACHH,EAAMb,EAAIc,EAAQf,OAAOC,IAAMc,EAAQX,OAAOH,EAAIc,EAAQf,OAAOC,GAC9DiB,GACHJ,EAAMZ,EAAIa,EAAQf,OAAOE,IAAMa,EAAQX,OAAOF,EAAIa,EAAQf,OAAOE,GAEpE,MAAO,CACLD,EAAGe,EAAShB,OAAOC,GAAKe,EAASZ,OAAOH,EAAIe,EAAShB,OAAOC,GAAKgB,EACjEf,EAAGc,EAAShB,OAAOE,GAAKc,EAASZ,OAAOF,EAAIc,EAAShB,OAAOE,GAAKgB,GAI9D,SAASC,EACdC,EACAC,GAEA,QAAKD,IAAcC,EAAUC,MAAKC,IAAUH,EAAWG,OAIrB/N,OAAOgB,OAAO4M,GAAYnO,QAC1DuO,GAA+B,IAAnBA,EAASC,QAEUzL,OAAS,I,ktFC7G5C,SAAS0L,GAAyBhT,GAChC,OAAO,SAAC,MAAD,CAA6CiT,MAAM,YAAajT,IADhEgT,GAAAA,YAAAA,2BAIT,UAAeE,EAAAA,EAAAA,GAAQF,I,2PCbvB,MAAMG,GAAgB,CAAC,cAAe,UAAW,eAAgB,SA+CjE,MAAMC,WAAchU,EAAAA,UAAwB,uDAC3B,CACbiU,OAAQ,MAFgC,gCAKtBC,GACX,CAACC,EAAiB1M,KACvB,MAAM,UAAC8G,EAAD,SAAYrE,EAAZ,aAAsB7G,GAAgB1C,KAAKC,OAEjD0P,EAAAA,GAAAA,IAAoB,CAClBC,SAAU,wCACVC,UAAW,yCACXC,gBAAiBC,SAASrN,EAAamM,GAAI,IAC3C2E,OAAAA,IAGF,MAAMC,GAAmBC,EAAAA,GAAAA,IACvB9F,EAAUnK,QAGZkQ,EAAAA,GAAAA,IAAYF,EAAkBD,EAAQD,EAAQzM,GAE9C8M,EAAAA,eAAAA,KAAoB,CAClB7J,SAAUR,EAASQ,SACnBtG,MAAO,IACF8F,EAAS9F,MACZoQ,YAAQ9K,EACRtF,MAAOgQ,EAAiB1E,sBA3BU,sCAoIjB,CAAC+E,EAA6BrK,IAC9C,CACL8J,EACAQ,IACoB/T,KAAKgU,eAAeF,EAAWP,EAAQQ,EAAStK,MAxI9B,sCA2LjB,CACvBA,EACAwK,IAEO,CAACV,EAAyCW,IAC/ClU,KAAKmU,eAAeZ,EA7OE,EAACW,EAAezK,KAC1C,MAAM2K,EAASC,GAAAA,GAAmB5K,GAQlC,MAPe,IACV2J,GACF,OAAMgB,KACN,OAAMA,KACN,OAAMA,KACN,UAEWF,IAoOkBI,CAAoBJ,EAAOzK,GAAYwK,MAhM7B,yCAmMd,CAACH,EAA6BrK,KACxD,MAAM,UAACmE,GAAa5N,KAAKC,MACnBsU,EAA2B3G,EAC9B4G,aACAhH,MAAMiH,GAAmD,yBAAbA,EAAIhQ,OACnD,MAAO,CAACiQ,EAAmBX,KACzB,GAAIQ,EAA0B,CAC5B,GAAIG,EAAU,OACZ,MAAMC,GACJ,SAAC,KAAD,CAEEC,MAAM,YACNC,SAAO,EACP,eAAa,0BAHT,kBAMR,MAAO,CACL7U,KAAKmU,eAAeI,EAA0BI,EAAMb,MAAAA,GAApD,UAAoDA,EAAWgB,YAA/D,aAAoD,EAAiBjS,SAGzE,MAAO,CACL7C,KAAKgU,eAAeF,EAAWS,EAA0BR,EAAStK,IAGtE,MAAO,QA3N+B,kCA+NrB,KACnB,MAAM,aAAC/G,GAAgB1C,KAAKC,OAC5B0P,EAAAA,GAAAA,IAAoB,CAClBC,SAAU,8CACVC,UAAW,2CACXC,gBAAiBC,SAASrN,EAAamM,GAAI,UApOL,kCAwOrB,CAACkG,EAAqBC,KACzC,MAAM1B,EAAmB,IAAItT,KAAKkJ,MAAMoK,QACxCA,EAAOyB,GAAeC,EAAWhU,MAC7BuH,OAAOyM,EAAWhU,OAClBiU,EAAAA,GACJjV,KAAK8I,SAAS,CAACwK,OAAAA,OA5MjBU,eACEF,EACAP,EACAQ,EACAtK,GACiB,QACjB,MAAM,UAACmE,EAAD,aAAYlL,EAAZ,SAA0BsM,EAA1B,SAAoCzF,EAApC,kBAA8C2L,GAAqBlV,KAAKC,MAE9E,IAAK6T,GAAa,UAACA,EAAUgB,YAAX,QAAC,EAAgBjS,OACjC,OAAOkR,EAAQR,EAAOxP,KAExB,MAAMkQ,EAAS,UAAGH,EAAUgB,YAAb,aAAG,EAAgBjS,OAE5BwC,EAAQxB,OAAO0P,EAAOxP,KAE5B,GAAIsB,KAAU8P,EAAAA,GAAAA,IAAsC1L,GAClD,OAAIsK,EAAQ1O,IAER,SAAC+P,GAAD,WACE,SAACC,GAAD,WAAUlL,EAAAA,EAAAA,GAAE,YAId4J,GAAQuB,EAAAA,GAAAA,IAAqC7L,KAE7C,SAAC2L,GAAD,WACE,SAACG,GAAD,WAASpL,EAAAA,EAAAA,GAAE,YAKf,SAACiL,GAAD,WACE,SAACI,GAAD,WAAUrL,EAAAA,EAAAA,GAAE,YAKlB,MACMsL,GADgBC,EAAAA,GAAAA,IAAiBrQ,EAAO4O,GAAW,EACxC0B,CAAc5B,EAAS,CAACrR,aAAAA,EAAc6G,SAAAA,IAEjDqM,EAAe,CACnBC,GAAAA,GAAAA,IACAA,GAAAA,GAAAA,QACAA,GAAAA,GAAAA,kBACAA,GAAAA,GAAAA,gBAGF,GAAc,gBAAVxQ,EAAyB,CAC3B,MAAMmF,EAlHL,SACLsL,EACA9G,GAEA,MAAM+G,GAAeD,MAAAA,OAAD,EAACA,EAAWpL,eAAsB3B,EAEtD,QAA2BA,WAAhBgN,EACT,OAGF,MAAMrL,EAAUsE,EAASxB,MAAKwI,GAAkBA,EAAe5R,OAAS2R,IAExE,OAAKrL,EAIEA,EAAQmE,QAJf,EAsGsBoH,CAAalC,EAAS/E,GAClCkH,EAActI,EAAUuI,QACxB7H,EAAa,IAAIC,EAAAA,GAAc2G,GACrC5G,EAAW8H,gBAAgB,MAAO,CAAE,GAAE3M,MACtCyM,EAAYzS,MAAQ6K,EAAWS,eAE/B,MAAMvF,EAAc3F,OAAOkQ,EAAQvK,cAAgB,GAE7C6M,GAAShL,EAAAA,GAAAA,IAAiC,CAC9Cd,QAAS7H,EAAa0B,KACtBoF,YAAAA,EACA/F,MAAOyS,EAAYI,4BACnB9L,UAAAA,EACA+B,iBAAkBK,GAAAA,GAAAA,OAClB2J,QAASC,GAAAA,EAAAA,SAGX,OACE,SAAC,MAAD,CACEjD,OAAQA,EACRQ,QAASA,EACT0C,iBAAkBzW,KAAKyW,iBAAiBlD,GACxCqC,aAAcA,EAJhB,UAME,SAAC,IAAD,CACE1L,GAAImM,EACJ,cAAYlM,EAAAA,EAAAA,GAAE,gDAAiDX,GAC/DkN,QAAS1W,KAAK2W,mBAHhB,SAKGlB,MAMT,OAAIpQ,EAAMuR,WAAW,wBACZnB,GAIP,SAAC,MAAD,CACElC,OAAQA,EACRQ,QAASA,EACT0C,iBAAkBzW,KAAKyW,iBAAiBlD,GACxCqC,aAAcA,EAJhB,SAMGH,IAYPtB,eACEZ,EACAnT,EACA6T,GAEA,MAAM,UAACrG,EAAD,SAAYrE,GAAYvJ,KAAKC,MAI7B4W,EAAgE5C,EAClE,QACAlL,EACAkL,GACFlP,OAAOG,KAAK+O,GAAWvF,SAAQ3K,IAC7B8S,GAAyBC,EAAAA,EAAAA,IAAkB/S,IAAQkQ,EAAUlQ,MAIjE,MAAMgT,GAAQC,EAAAA,EAAAA,IAAezD,EAAO9O,KAAM8O,EAAOxL,KAAM8O,GACjDxR,EAAQ,CAACA,MAAOkO,EAAO9O,KAAMzD,MAAOuS,EAAOvS,OAe3CiW,EAAcrJ,EAAUsJ,aAAa7R,EAAOwR,GAC5CM,GAAUC,EAAAA,GAAAA,IAAgB/R,EAAOwR,GAEvC,OACE,SAAC,IAAD,CACEE,MAAOA,EACP3W,MAAOA,GAASiF,EAAMA,MACtBgS,UAAWJ,EAAcA,EAAYjL,UAAOjD,EAC5CoO,QAASA,EACTG,iBAtBJ,WACE,IAAKT,EACH,OAGF,MACMU,EADgB3J,EAAU4J,YAAYnS,EAAOwR,GACXP,4BAExC,MAAO,IACF/M,EACH9F,MAAO,IAAI8F,EAAS9F,MAAOsI,KAAMwL,EAAkBxL,UAsEzD0L,mBAAmBhO,GACjB,MAAM,UAACmE,GAAa5N,KAAKC,MAEnByX,GAAqBZ,EAAAA,EAAAA,KACzB3B,EAAAA,GAAAA,IAAsC1L,IAElCkO,GAAoBb,EAAAA,EAAAA,KACxBxB,EAAAA,GAAAA,IAAqC7L,IAOjCmO,EALoBhK,EAAUC,MAAMgF,MACxC9G,GACEA,EAAK1G,MAAMD,SAASsS,IAAuB3L,EAAK1G,MAAMD,SAASuS,KAI/D,GACA,CACE,CACEtS,MAAO,uBACP2G,KAAM,QAER,CACE3G,MAAOqS,EACP1L,KAAM,QAER,CACE3G,MAAOsS,EACP3L,KAAM,SAId,OAAO4B,EAAUqB,UAAU,IAAI2I,KAAoBhK,EAAUC,QAG/D3M,SACE,MAAM,UAAC0M,EAAD,aAAYlL,EAAZ,SAA0B6G,GAAYvJ,KAAKC,OAC3C,OAACqT,GAAUtT,KAAKkJ,MAEhB2O,EAAiBjK,EAAUuI,QACjC0B,EAAehV,OAAS,IAAI+K,EAAU/K,QACtC,MAAMiV,EAAcD,EACjBrD,aAGAhQ,QAAQiQ,GAAmD,yBAAbA,EAAIhQ,OAClDyJ,MAAM,GAAI,GACVtK,KAAI,CAAC6Q,EAAmCtD,IACd,iBAAdmC,EAAOnC,GACT,IAAIsD,EAAKzT,MAAOsS,EAAOnC,IAEzBsD,IAGLhL,GAAYsO,EAAAA,GAAAA,IAAsBxO,GAClCyO,EAAkBhY,KAAKyX,mBAAmBhO,GAC1CwO,EAAeD,EAAgBE,WAErC,OACE,0BACE,SAAC,GAAD,CACEtK,UAAWoK,EACXzN,QAAS7H,EAAa0B,KACtBmF,SAAUA,EACV4O,MAAO,GACPC,SAAS,+BALX,SAOG,cAAC,UAACC,EAAD,UAAYC,EAAZ,UAAuBxE,GAAxB,SACC,SAAC,EAAAxS,SAAD,YACE,SAAC,KAAD,CACEgX,UAAWA,EACXhR,KAAMwM,EAAYA,EAAUxM,KAAO,GACnCwQ,YAAaA,EACbG,aAAcA,EACdM,KAAM,CACJC,eAAgBxY,KAAKyY,mBACrBtE,eAAgBnU,KAAK0Y,uBACnBjP,EACAqK,MAAAA,GAFc,UAEdA,EAAWgB,YAFG,aAEd,EAAiBjS,QAEnBmR,eAAgBhU,KAAK2Y,uBACnB7E,EACArK,GAEFmP,qBAAsB5Y,KAAK6Y,0BACzB/E,EACArK,GAEFqP,oBAAqB,CAAC,gBAExBvP,SAAUA,KAEZ,SAAC,IAAD,CAAY8O,UAAWA,aA3U/BhF,GAAAA,YAAAA,QAoVN,MAAM+B,IAAgB,OAAO,MAAP,qBAAH,8EAMbI,IAAU,OAAOuD,GAAAA,EAAP,qBAAH,yBAEWxX,GAAKA,EAAEC,MAAMwX,GAAAA,GAAiBC,GAAAA,GAAAA,QAFzC,iBAKA1X,GAAKA,EAAEC,MAAM0X,OALb,MASP3D,IAAS,OAAOwD,GAAAA,EAAP,qBAAH,yBAEYxX,GAAKA,EAAEC,MAAMwX,GAAAA,GAAiBC,GAAAA,GAAAA,OAF1C,iBAKC1X,GAAKA,EAAEC,MAAM0X,OALd,MASN7D,IAAU,OAAO0D,GAAAA,EAAP,qBAAH,yBAEWxX,GAAKA,EAAEC,MAAMwX,GAAAA,GAAiBC,GAAAA,GAAAA,QAFzC,iBAKA1X,GAAKA,EAAEC,MAAM0X,OALb,MASb,M,yHCtaA,MAAMC,GAAkB,CAACC,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,KAwBnE,MAAMC,WAA2Bha,EAAAA,UAAwB,uDACxC,CACbia,wBAAyB,KACzBC,WAAOxQ,KAH8C,4BAMvCtF,IACd,MAAM,SAAC8F,GAAYvJ,KAAKC,MAElBuZ,GAAcC,EAAAA,EAAAA,IAAwB,IACtClQ,EAAS9F,OAAS,GACtBA,MAAAA,IAIIiW,EAAoBhU,GAAAA,CAAK8T,EAAa,UAE5C5F,EAAAA,eAAAA,KAAoB,CAClB7J,SAAUR,EAASQ,SACnBtG,MAAO,IACFiW,EACHC,cAAc,SArBmC,8BA0BtC,CAAC5V,EAAa+C,KAC7B,MAAM,SAACyC,GAAYvJ,KAAKC,MAClBwD,GAAQmW,EAAAA,EAAAA,IAAqBrQ,EAAS9F,MAAO,CAACM,IAAAA,EAAK+C,MAAAA,IAEzD,MAAO,IACFyC,EACH9F,MAAAA,OAhCmD,uCAsC5B,CAACoW,EAA2BC,KACrD,MAAMR,EAA0BO,GAA0B,IACxD7Z,KAAK8I,SAAS,CAACwQ,wBAAyB,SAE1CtZ,KAAK8I,SAAS,CAACwQ,wBAAAA,QA1CsC,wBAiH3CC,IACVvZ,KAAK8I,SAAS,CAACyQ,MAAAA,OArEjBQ,0BACE,MAAM,UAACnM,EAAD,aAAYlL,EAAZ,SAA0BsM,EAA1B,UAAoCvF,GAAazJ,KAAKC,MAE5D,OACE,SAAC,IAAD,CACE2N,UAAWA,EACXlL,aAAcA,EACdsM,SAAUA,EACVgL,oBAAqBha,KAAKia,wBAC1BC,UAAW,OACXC,iBAAkBzX,EAAa8C,SAASJ,SAAS,mBACjD,cAAY+E,EAAAA,EAAAA,GAAE,gBACdiQ,UAAWC,GAAAA,GAAgB5Q,GAC3B2O,SAAS,gBAKfkC,sBACE,MAAM,UAAC7Q,EAAD,SAAYF,GAAYvJ,KAAKC,MAInC,GAFiBkZ,GAAgBoB,QAAQ9Q,GAE1B,EACb,OAAO,KAGT,MAAM+Q,EAAyBrB,GAAgBsB,QAC7C,CAACC,EAAsBC,KACrB,MAAMC,EAAY,CAChB7W,IAAK4W,EACLlb,MAAO4U,GAAAA,GAAmBsG,GAC1BE,SAAU,WACRjH,EAAAA,eAAAA,KAAoB,CAClB7J,SAAUR,EAASQ,SACnBtG,MAAO,IACF8F,EAAS9F,MACZgG,UAAWkR,EACX9G,YAAQ9K,OAYhB,OANIU,IAAckR,EAChBD,EAAII,QAAQF,GAEZF,EAAIzQ,KAAK2Q,GAGJF,IAET,IAGF,OACE,SAAC,IAAD,CACEF,MAAOA,EACPO,aAAc1G,GAAAA,GAAmB5K,GACjCuR,aAAc,CACZ,aAAe,eAAc3G,GAAAA,GAAmB5K,KAChD4D,QAAQlD,EAAAA,EAAAA,GAAE,eAEZ8Q,UAAU,gBAShBC,cACE,MAAM,MAAC3B,GAASvZ,KAAKkJ,MAErB,OAAKqQ,GAKH,SAAC,IAAD,CAAOxR,KAAK,QAAQoT,UAAQ,EAA5B,SACG5B,IALI,KAUX6B,cAActI,GACZ,MAAM,SAACvJ,EAAD,aAAW7G,EAAX,UAAyBkL,EAAzB,SAAoCoB,GAAYhP,KAAKC,OAErD,OAAC4C,EAAD,MAAS8E,EAAT,IAAgBC,EAAhB,YAAqBwE,EAArB,YAAkCD,EAAlC,QAA+CzB,GAAWkD,EAE1DnK,GAAQgH,EAAAA,EAAAA,IAAalB,EAAS9F,MAAMA,MAAO,IAC3C8G,EAAU7H,EAAa0B,KACvBiX,EAAiB1T,GAAQ2T,EAAAA,EAAAA,IAAwB3T,GAAS,KAC1D4T,EAAe3T,GAAM0T,EAAAA,EAAAA,IAAwB1T,GAAO,KACpD4T,GAAWC,EAAAA,EAAAA,IACf,CAAC9T,MAAO0T,EAAgBzT,IAAK2T,EAAcG,OAAQtP,GACnD,QAGI8I,EAxJV,SAA8BzR,GAC5B,MAAMkY,EAAS,IAAIpN,EAAAA,GAAc9K,GAGjC,OAFAkY,EAAOC,SAAW,GAEXD,EAAO5M,eAoJc8M,EADLC,EAAAA,EAAAA,IAA0BvS,IAG/C,OACE,SAAC,EAAAjI,SAAD,YACE,SAACya,GAAD,YACE,SAAC,IAAD,CAAeC,WAAS,EAAxB,WACE,SAAC,IAAD,KACA,SAAC,IAAD,KACA,SAAC,IAAD,CAAgBC,cAAc,aAEhC,SAAC,IAAD,CACEC,aAAa,qBACbxZ,aAAcA,EACdI,WAAY4H,EACZjH,MAAOA,EACPZ,OAAQA,EACRsZ,SAAUnc,KAAKoc,mBAGnB,SAAC,KAAD,CACE1Z,aAAcA,EACde,MAAOA,EACPiH,QAASA,EACTyB,YAAaA,EACbxE,MAAO0T,EACPzT,IAAK2T,EACLnP,YAAaA,EACboP,SAAUA,KAEZ,SAACa,GAAD,WACE,SAAC,KAAD,CACE9R,QAASA,EACThB,SAAUA,EACVuJ,MAAOA,EACPpI,QAASA,EACTyB,YAAaA,EACbxE,MAAOA,EACPC,IAAKA,EACLwE,YAAaA,OAIjB,SAAC,IAAD,CAAOkQ,kBAAgB,EAAvB,SACG,QAAC,MAACC,EAAD,gBAAQC,GAAT,SACCA,GACE,SAAC,IAAD,CACE9Z,aAAcA,EACd6Z,MAAOA,EACPE,cAAe,CAAC,WAChBC,iBAAkBhS,EAAQ9G,IAAIC,QAJhC,UAME,SAAC,GAAD,CACE+J,UAAWA,EACXoB,SAAUA,EACVtM,aAAcA,EACd6G,SAAUA,EACVoT,SAAU3c,KAAK2c,SACfzH,kBAAmBA,OAIvB,SAAC,IAAD,UAQZhU,SACE,MAAM,SAACqI,EAAD,aAAW7G,EAAX,UAAyB+G,GAAazJ,KAAKC,OAC3C,wBAACqZ,GAA2BtZ,KAAKkJ,MAEjC4J,EAAQrJ,GAAa2P,EAAAA,GAAAA,IAE3B,OACE,SAAC,EAAA9X,SAAD,YACE,SAAC,KAAD,YACE,SAAC,KAAD,YACE,SAAC,IAAD,CACEoB,aAAcA,EACd6G,SAAUA,EACVE,UAAWqJ,KAEb,SAAC,KAAD,UAAe8J,GAAAA,GAAS9J,SAE1B,SAAC,KAAD,WACE,SAAC,KAAD,CAAW+J,IAAK,EAAhB,UACG7c,KAAKsa,uBACN,SAAC,IAAD,CAAS5X,aAAcA,EAAc8C,SAAU,CAAC,aAAhD,SACG,QAAC,WAACsX,GAAF,SAAkBA,GAAc9c,KAAK+Z,sCAK9C,SAAC,KAAD,WACG/Z,KAAKkb,cACL5B,IACC,SAAC,KAAD,CAAavZ,WAAS,EAAtB,SAAwBuZ,KAE1B,SAAC,KAAD,CAAavZ,WAAS,EAAtB,WACE,SAACgd,GAAD,UAAoBC,GAAAA,GAAiBvT,MACrC,SAACwT,GAAD,UACGlY,OAAOgB,OAAOmX,EAAAA,IAAStZ,KAAIuZ,IAAO,aACjC,SAACC,GAAD,WACG,UAAAC,GAAAA,GAAuB5T,UAAvB,SAAmCrE,SAAS+X,IAC3C,SAAC,KAAD,CAAevI,MAAM,WAAW0I,KAAK,QAErC,SAAC,KAAD,CAAW1I,MAAM,SAAS0I,KAAK,OAEhCH,IANeA,QAUrBnd,KAAKob,cAActI,aAnQ1BuG,GAAAA,YAAAA,qBA2QN,UAAekE,EAAAA,EAAAA,GAAalE,IAEtB0D,IAAoB,OAAO,MAAP,sBAAH,cACRxb,GAAKA,EAAEC,MAAMW,gBADL,mBAEJqb,EAAAA,EAAAA,GAAM,GAFF,KAKjBnB,IAAkB,OAAO,MAAP,sBAAH,kBACFmB,EAAAA,EAAAA,GAAM,GADJ,KAIfP,IAAoB,OAAO,MAAP,sBAAH,4BAEdO,EAAAA,EAAAA,GAAM,GAFQ,mBAGJA,EAAAA,EAAAA,GAAM,GAHF,KAMjBJ,IAAc,OAAO,MAAP,sBAAH,wCAGRI,EAAAA,EAAAA,GAAM,GAHE,KAMXzB,IAAgB,OAAO,MAAP,sBAAH,qBAEVyB,EAAAA,EAAAA,GAAM,GAFI,mBAGAA,EAAAA,EAAAA,GAAM,GAHN,wBAKIjc,GAAKA,EAAEC,MAAMC,YAAYC,OAL7B,sCCrUnB,MAAM+b,WAAoBpe,EAAAA,UAAwB,uDACjC,CACbuO,WAAW8P,EAAAA,EAAAA,IAAmC1d,KAAKC,MAAMsJ,YAG5B,gCAACoU,EAA4BC,GAC1D,MAAO,IACFA,EACHhQ,WAAW8P,EAAAA,EAAAA,IAAmCC,EAAUpU,WAI5DsU,oBACE,MAAM,IAAC5a,EAAD,aAAMP,EAAN,UAAoBob,GAAa9d,KAAKC,OAC5C8d,EAAAA,EAAAA,IAAqB9a,EAAKP,EAAa0B,KAAM0Z,IAC7CE,EAAAA,EAAAA,IAA2BF,IAE3BG,EAAAA,EAAAA,GAA4B,sCAAuC,CACjEvb,aAAAA,IAIJwb,mBAAmBC,GACjB,MAAM,IAAClb,EAAD,aAAMP,EAAN,UAAoBob,GAAa9d,KAAKC,MAGzCme,GAAAA,CAAQD,EAAUL,UAAU9O,SAAU8O,EAAU9O,WAChDoP,GAAAA,CAAQD,EAAUL,UAAUO,SAAUP,EAAUO,aAEjDN,EAAAA,EAAAA,IAAqB9a,EAAKP,EAAa0B,KAAM0Z,IAC7CE,EAAAA,EAAAA,IAA2BF,IAI/BQ,mBACE,MAAM7Z,GAAO8Z,EAAAA,EAAAA,IAAmBve,KAAKC,MAAMsJ,UAI3C,MAF2C,iBAAT9E,GAAqBZ,OAAOY,GAAM+Z,OAAOjX,OAAS,EAG3E,CAAC1D,OAAOY,GAAM+Z,QAAQrU,EAAAA,EAAAA,GAAE,gBAAgBsU,KAAK,OAG/C,EAACtU,EAAAA,EAAAA,GAAE,iBAAiBA,EAAAA,EAAAA,GAAE,gBAAgBsU,KAAK,OAGpDvd,SACE,MAAM,aAACwB,EAAD,SAAe6G,EAAf,OAAyBmV,EAAzB,IAAiCzb,GAAOjD,KAAKC,OAC7C,UAAC2N,GAAa5N,KAAKkJ,MACzB,IAAK0E,EAOH,OANAgG,EAAAA,eAAAA,QAAuB,CACrB7J,SAAW,kBAAiBrH,EAAa0B,oBACzCX,MAAO,IACF8F,EAAS9F,SAGT,KAGT,MAAMkb,GAAiBlU,EAAAA,EAAAA,IAAalB,EAAS9F,MAAMgG,WAC7CA,GAC6D,IAAjE1E,OAAOgB,OAAOqT,EAAAA,IAAUmB,QAAQoE,QAC5B5V,EACC4V,EAEP,OACE,SAAC,IAAD,CAAqBve,MAAOJ,KAAKse,mBAAoB/T,QAAS7H,EAAa0B,KAA3E,UACE,SAAC,KAAD,CAA8B0C,MAAO,CAAC8G,UAAW5N,KAAKkJ,MAAM0E,WAA5D,UACE,SAAC,IAAD,CAAsBgR,kBAAgB,EAAtC,UACE,SAACC,GAAD,WACE,SAAC,IAAD,CAAkBnc,aAAcA,EAAhC,UACE,SAAC,GAAD,CACE6G,SAAUA,EACV7G,aAAcA,EACdkL,UAAWA,EACX8Q,OAAQA,EACRjV,UAAWA,GAAa2P,EAAAA,GAAAA,IACxBnW,IAAKA,eA7EjBwa,GAAAA,YAAAA,cAwFN,MAAMoB,IAAoB,OAAOC,EAAAA,GAAP,qBAAH,qCAIvB,IAAe3L,EAAAA,EAAAA,IAAQ4L,EAAAA,EAAAA,IAAgBxB,EAAAA,EAAAA,IAAayB,EAAAA,EAAAA,GAAiBvB,Q,muCCzFrE,SAASwB,EAAT,GAWU,IAXU,QAClBvU,EADkB,YAElByB,EAFkB,SAGlB5C,EAHkB,aAIlB7G,EAJkB,MAKlBe,EALkB,YAMlB2I,EANkB,OAOlBsS,EAPkB,MAQlB/W,EARkB,IASlBC,EATkB,SAUlB4T,GACQ,EACR,MAAMvY,GAAMC,EAAAA,EAAAA,KACN1B,GAAQ0d,EAAAA,EAAAA,KAERzV,GAAYsO,EAAAA,EAAAA,IAAsBxO,GAClC4V,EAAS,OAAM1V,MAEf,IAAC2V,EAAD,OAAMC,EAAN,UAAcC,EAAd,UAAyBC,EAAzB,aAAoCC,IAAgBC,EAAAA,EAAAA,IAAyB,CACjFje,MAAAA,EACA+H,SAAAA,EACA4V,MAAAA,EACArM,MAAOrJ,IAGT,SAASiW,EAA0BC,GAKjC,MAAM,SAACC,GAAYD,EACbE,EAAa9a,OAAOG,KAAK0a,GAAUpb,QAAOT,IAAQ6b,EAAS7b,KAE3DmG,EAAK,IACNX,EACH9F,MAAO,IACF8F,EAAS9F,MACZqc,iBAAkBD,IAGtBjM,EAAAA,eAAAA,KAAoB1J,GAGtB,OACE,QAAC,KAAD,WACE,QAAC,KAAD,YACE,QAAC,KAAD,YACG6V,EAAAA,EAAAA,IAAmBtW,IACpB,QAAC,IAAD,CACE6T,KAAK,KACLnd,SAAS,MACTC,OAAO+J,EAAAA,EAAAA,GAAG,oEAGd,QAAC,IAAD,CAAWuU,OAAQA,EAAQhD,OAAQtP,EAAazE,MAAOA,EAAOC,IAAKA,EAAKwX,IAAKA,EAA7E,SACGY,IACC,QAAC,IAAD,CACE/c,IAAKA,EACLP,aAAcA,EACdgZ,OAAQtP,EACR1B,QAASA,EACTyB,YAAaA,EACbxE,MAAOA,EACPC,IAAKA,EACL4T,SAAUA,EACVyE,aAAa,EACbxc,MAAOA,EACPyc,iBAAiB,EACjBf,MAAO,CAACA,GACRgB,SAAO,EACPxG,cAAclP,EAAAA,EAAAA,IAAalB,EAAS9F,MAAMkW,cAd5C,SAgBG,IAA4D,IAA1DyG,eAAgB9b,EAAjB,QAA0B+b,EAA1B,QAAmCC,EAAnC,UAA4CC,GAAe,EAC3D,GAAIF,EACF,OACE,QAAC,IAAD,WACE,QAAC,KAAD,CAAazL,MAAM,UAAU0I,KAAK,SAKxC,MAAMkD,EACHlc,GAAW9C,EAAMif,OAAOC,gBAAgBpc,EAAQiD,OAAS,IAAO,IAE7D,gBAACoZ,IAAmBC,EAAAA,EAAAA,IAA4Btc,GAEhDuc,EAAiBF,EACnBA,EAAgB/c,KAAI,CAAC,EAAuBuN,KAAc,IAArC,WAAC2P,KAAeC,GAAqB,EACxD,MAAO,CACLD,YAAYE,EAAAA,EAAAA,IAAkBF,IAAe,SAC1CC,EACHnM,MAAO4L,EAAOrP,GACd8P,UAAW,CACTC,QAAS,EACTlgB,MAAO,OAIb,GAEEmgB,GAAYC,EAAAA,EAAAA,IAAeP,GAC3BQ,EAAWhZ,KAAKuJ,IAAIuP,EAAW7B,GAGrC,OAFAE,EAAaL,MAAOvN,IAAiB,IAAXyP,GAGxB,QAAC,IAAD,CACE1Z,MAAOA,EACPC,IAAKA,EACL8T,OAAQtP,EACRgT,IAAKA,EACLpQ,SAAUtE,EACV4W,aAAcnV,EANhB,SAQG,QAAC,cAACoV,GAAF,SACC,QAAC,IAAD,CAAiBjB,QAASA,EAASC,UAAWA,EAA9C,WACE,QAAC,IAAD,CAAwBiB,QAASjB,KAChCkB,EAAAA,EAAAA,GAAe,CACd3a,OACE,QAAC,IAAD,IACMkZ,KACAR,EACJH,OAAQA,EACRqC,sBAAuBhC,EACvBiC,OAAQ,IAAIpC,KAAcgC,KAAkBV,KAGhDe,MAAO,qCA9HxB3C,EAAAA,YAAAA,aA6IT,SAAe4C,EAAAA,EAAAA,YAAW5C,GAiB1B,SAAS6C,EACPhB,EACAiB,GAEA,OAAIjB,KAAeiB,MAAAA,OAAL,EAAKA,EAAaC,eAAezb,QAAQ,YAAa,KAC3D0S,EAAAA,GAAAA,KAEL6H,KAAeiB,MAAAA,OAAL,EAAKA,EAAaE,cAAc1b,QAAQ,YAAa,KAC1D0S,EAAAA,GAAAA,IAEL6H,KAAeiB,MAAAA,OAAL,EAAKA,EAAaG,eAAe3b,QAAQ,YAAa,KAC3D0S,EAAAA,GAAAA,UADT,EAOK,SAASkJ,EAAYliB,GAC1B,MACEoF,MAAO8Z,EACP7X,KAAM8a,EAFF,QAGJ9B,EAHI,UAIJC,EAJI,OAKJ8B,EALI,KAMJ9J,EANI,IAOJ6G,EAPI,YAQJ2C,GACE9hB,EACEuB,GAAQ0d,EAAAA,EAAAA,KAEd,IAAKkD,IAAaL,EAChB,OAAO,KAGT,MAAMvC,EAA+C,CACnDjH,KAAAA,EACA+J,cAAe,CACbC,YAAY,GAEdC,QAAS,CACPC,QAAS,OACTC,eAAgB,CAAC5b,EAAega,KACvB6B,EAAAA,EAAAA,IACL7b,EACAib,EAAY,KAAO3I,EAAAA,GAAAA,IAAe0H,EAAa3B,IAIrDnO,MAAO,CACL4R,MAAM,GAERC,WAAO9Z,EACPoW,MAAO,CACL2D,UAAW,CACTlO,MAAOpT,EAAMuhB,WACbC,cAAc,EACd/a,UAAYnB,IAAkBmc,EAAAA,EAAAA,IAAmBnc,EAAOqY,KAG5DC,IAAAA,EACA8D,iBAAiB,EACjBC,mBAAmB,GAGf7e,EAAU8d,EAAS5d,QAAO4e,KAAOtB,EAAiBsB,EAAEtC,WAAYiB,KAEhElB,EAAiBvc,MAAAA,GAAAA,EAASiD,OAC5BjD,EAAQV,KAAI,IAA2B,IAA1B,WAACkd,KAAeC,GAAU,EACrC,MAAMsC,EAAiBvB,EAAiBhB,EAAYiB,IAAgB,QACpE,MAAO,CACLjB,WAAYuC,KACTtC,EACHnM,MAAOpT,EAAMwX,EAAAA,GAAiBqK,IAC9BpC,UAAW,CACTC,QAAS,EACTlgB,MAAO,OAIb,GAEJ,OACE,yBACE,QAAC,IAAD,CAAiBsf,QAASA,EAASC,UAAWA,EAA9C,WACE,QAAC,IAAD,CAAwBiB,QAASjB,KAChCkB,EAAAA,EAAAA,GAAe,CACd3a,OACE,QAAC,IAAD,CACEub,OAAQA,KACJ7C,EACJkC,sBAAuB,OACvBC,OAAQ,IAAId,GACZqC,iBAAe,IAGnBtB,MAAO,0BA9EDO,EAAAA,YAAAA,e,6SC/LhB,SAASmB,EAAT,GASU,IATS,MACjBxQ,EADiB,SAEjBvJ,EAFiB,UAGjB+O,EAHiB,QAIjBiL,EAJiB,WAKjBC,EALiB,sBAMjBC,EANiB,oBAOjBC,EAPiB,mBAQjBC,GACQ,EACR,MAAMC,EAASC,MAAMC,QAAQhR,GAASA,EAAQ,CAACA,GACzCiR,EAAqB,CACzBjR,MAAAA,EACAkR,SAAUT,EACVU,YAAaT,EACbU,uBAAwBT,EACxBU,qBAAsBT,EACtBU,oBAAqBT,GAGvB,OACE,QAAC,IAAD,CAAyBpa,SAAUA,EAAUqa,OAAQA,EAArD,SACG,QAAEtL,UAAWgI,EAAZ,WAAqB3N,GAAtB,SACC,QAAC,KAAD,IACMoR,EACJzL,UAAWA,GAAagI,EACxBhZ,KAAMqL,OA1BP2Q,EAAAA,YAAAA,YAiCT","sources":["webpack:///./app/components/dropdownControl.tsx","webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/breadcrumb.tsx","webpack:///./app/views/performance/transactionSummary/tabs.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/types.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionTags/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/utils.tsx","webpack:///./app/utils/performance/vitals/vitalsDetailsTableQuery.tsx","webpack:///./app/views/performance/vitalDetail/table.tsx","webpack:///./app/views/performance/vitalDetail/vitalDetailContent.tsx","webpack:///./app/views/performance/vitalDetail/index.tsx","webpack:///./app/views/performance/vitalDetail/vitalChart.tsx","webpack:///./app/views/performance/vitalDetail/vitalInfo.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownMenu, {\n  GetActorPropsFn,\n  GetMenuPropsFn,\n} from 'sentry/components/dropdownMenu';\nimport MenuItem from 'sentry/components/menuItem';\nimport Tooltip from 'sentry/components/tooltip';\n\ntype ButtonPriority = React.ComponentProps<typeof DropdownButton>['priority'];\n\ntype DefaultProps = {\n  /**\n   * Should the menu contents always be rendered?  Defaults to true.\n   * Set to false to have menu contents removed from the DOM on close.\n   */\n  alwaysRenderMenu: boolean;\n  /**\n   * Width of the menu. Defaults to 100% of the button width.\n   */\n  menuWidth: string;\n};\n\ntype ChildrenArgs = {\n  getMenuProps: GetMenuPropsFn;\n  isOpen: boolean;\n};\n\ntype ButtonArgs = {\n  getActorProps: GetActorPropsFn;\n  isOpen: boolean;\n};\n\ntype Props = DefaultProps & {\n  children:\n    | ((args: ChildrenArgs) => React.ReactElement)\n    | React.ReactElement\n    | Array<React.ReactElement>;\n  /**\n   * Align the dropdown menu to the right. (Default aligns to left)\n   */\n  alignRight?: boolean;\n  /**\n   * This makes the dropdown menu blend (e.g. corners are not rounded) with its\n   * actor (opener) component\n   */\n  blendWithActor?: boolean;\n  /**\n   * A closure that returns a styled button. Function will get {isOpen, getActorProps}\n   * as arguments. Use this if you need to style/replace the dropdown button.\n   */\n  button?: (args: ButtonArgs) => React.ReactNode;\n  /**\n   * Props to pass to DropdownButton\n   */\n  buttonProps?: React.ComponentProps<typeof DropdownButton>;\n  /**\n   * Tooltip to show on button when dropdown isn't open\n   */\n  buttonTooltipTitle?: string | null;\n  className?: string;\n  detached?: boolean;\n  fullWidth?: boolean;\n\n  /**\n   * String or element for the button contents.\n   */\n  label?: NonNullable<React.ReactNode>;\n\n  priority?: ButtonPriority;\n};\n\n/*\n * A higher level dropdown component that helps with building complete dropdowns\n * including the button + menu options. Use the `button` or `label` prop to set\n * the button content and `children` to provide menu options.\n */\nclass DropdownControl extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    alwaysRenderMenu: true,\n    menuWidth: '100%',\n  };\n\n  renderButton(isOpen: boolean, getActorProps: GetActorPropsFn) {\n    const {\n      label,\n      button,\n      buttonProps,\n      buttonTooltipTitle,\n      priority,\n      detached,\n      fullWidth,\n    } = this.props;\n\n    if (button) {\n      return button({isOpen, getActorProps});\n    }\n\n    if (buttonTooltipTitle && !isOpen) {\n      return (\n        <Tooltip skipWrapper position=\"top\" title={buttonTooltipTitle}>\n          <StyledDropdownButton\n            priority={priority}\n            {...getActorProps(buttonProps)}\n            isOpen={isOpen}\n            data-test-id=\"dropdown-control-button\"\n            detached={detached}\n            hideBottomBorder={!detached}\n            rightAlignChevron={fullWidth ?? false}\n          >\n            {label}\n          </StyledDropdownButton>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <StyledDropdownButton\n        priority={priority}\n        {...getActorProps(buttonProps)}\n        isOpen={isOpen}\n        data-test-id=\"dropdown-control-button\"\n        detached={detached}\n        hideBottomBorder={!detached}\n        rightAlignChevron={fullWidth ?? false}\n      >\n        {label}\n      </StyledDropdownButton>\n    );\n  }\n\n  renderChildren(isOpen: boolean, getMenuProps: GetMenuPropsFn) {\n    const {children, alignRight, menuWidth, blendWithActor, priority, detached} =\n      this.props;\n\n    if (typeof children === 'function') {\n      return children({isOpen, getMenuProps});\n    }\n\n    const alignMenu = alignRight ? 'right' : 'left';\n\n    return (\n      <Content\n        {...getMenuProps()}\n        priority={priority}\n        alignMenu={alignMenu}\n        width={menuWidth}\n        isOpen={isOpen}\n        blendWithActor={blendWithActor}\n        detached={detached}\n        blendCorner\n        data-test-id=\"dropdown-control\"\n      >\n        {children}\n      </Content>\n    );\n  }\n\n  render() {\n    const {alwaysRenderMenu, className, fullWidth} = this.props;\n\n    return (\n      <Container className={className} fullWidth={fullWidth ?? false}>\n        <DropdownMenu alwaysRenderMenu={alwaysRenderMenu}>\n          {({isOpen, getMenuProps, getActorProps}) => (\n            <Fragment>\n              {this.renderButton(isOpen, getActorProps)}\n              {this.renderChildren(isOpen, getMenuProps)}\n            </Fragment>\n          )}\n        </DropdownMenu>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')<{fullWidth: boolean}>`\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: ${p => p.fullWidth && '100%'};\n  }\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};\n  white-space: nowrap;\n`;\n\nconst Content = styled(DropdownBubble)<{isOpen: boolean; priority?: ButtonPriority}>`\n  display: ${p => (p.isOpen ? 'block' : 'none')};\n  border-color: ${p => p.theme.button[p.priority || 'form'].border};\n`;\n\nconst DropdownItem = styled(MenuItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default DropdownControl;\nexport {DropdownItem, Content};\n","import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  getFieldDoc,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags, SEMVER_TAGS);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          getFieldDoc={getFieldDoc}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Fragment} from 'react';\n\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component} from 'react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport Tab from './transactionSummary/tabs';\nimport {eventsRouteWithQuery} from './transactionSummary/transactionEvents/utils';\nimport {spansRouteWithQuery} from './transactionSummary/transactionSpans/utils';\nimport {tagsRouteWithQuery} from './transactionSummary/transactionTags/utils';\nimport {vitalsRouteWithQuery} from './transactionSummary/transactionVitals/utils';\nimport {transactionSummaryRouteWithQuery} from './transactionSummary/utils';\nimport {vitalDetailRouteWithQuery} from './vitalDetail/utils';\nimport {getPerformanceLandingUrl} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  eventSlug?: string;\n  spanSlug?: SpanSlug;\n  tab?: Tab;\n  traceSlug?: string;\n  transaction?: {\n    name: string;\n    project: string;\n  };\n  vitalName?: string;\n};\n\nclass Breadcrumb extends Component<Props> {\n  getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {\n      organization,\n      location,\n      transaction,\n      vitalName,\n      spanSlug,\n      eventSlug,\n      traceSlug,\n      tab,\n    } = this.props;\n\n    const performanceTarget: LocationDescriptor = {\n      pathname: getPerformanceLandingUrl(organization),\n      query: {\n        ...location.query,\n        // clear out the transaction name\n        transaction: undefined,\n      },\n    };\n\n    crumbs.push({\n      to: performanceTarget,\n      label: t('Performance'),\n      preservePageFilters: true,\n    });\n\n    if (vitalName) {\n      const webVitalsTarget = vitalDetailRouteWithQuery({\n        orgSlug: organization.slug,\n        vitalName: 'fcp',\n        projectID: decodeScalar(location.query.project),\n        query: location.query,\n      });\n      crumbs.push({\n        to: webVitalsTarget,\n        label: t('Vital Detail'),\n        preservePageFilters: true,\n      });\n    } else if (transaction) {\n      const routeQuery = {\n        orgSlug: organization.slug,\n        transaction: transaction.name,\n        projectID: transaction.project,\n        query: location.query,\n      };\n\n      switch (tab) {\n        case Tab.Tags: {\n          const tagsTarget = tagsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: tagsTarget,\n            label: t('Tags'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.Events: {\n          const eventsTarget = eventsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: eventsTarget,\n            label: t('All Events'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.WebVitals: {\n          const webVitalsTarget = vitalsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: webVitalsTarget,\n            label: t('Web Vitals'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.Spans: {\n          const spansTarget = spansRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: spansTarget,\n            label: t('Spans'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.TransactionSummary:\n        default: {\n          const summaryTarget = transactionSummaryRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: summaryTarget,\n            label: t('Transaction Summary'),\n            preservePageFilters: true,\n          });\n        }\n      }\n    }\n\n    if (transaction && spanSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Span Summary'),\n      });\n    } else if (transaction && eventSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Event Details'),\n      });\n    } else if (traceSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Trace View'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  render() {\n    return <Breadcrumbs crumbs={this.getCrumbs()} />;\n  }\n}\n\nexport default Breadcrumb;\n","enum Tab {\n  TransactionSummary,\n  WebVitals,\n  Tags,\n  Events,\n  Spans,\n  Anomalies,\n}\n\nexport default Tab;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","export enum SpanSortPercentiles {\n  P50_EXCLUSIVE_TIME = 'p50ExclusiveTime',\n  P75_EXCLUSIVE_TIME = 'p75ExclusiveTime',\n  P95_EXCLUSIVE_TIME = 'p95ExclusiveTime',\n  P99_EXCLUSIVE_TIME = 'p99ExclusiveTime',\n}\n\nexport enum SpanSortOthers {\n  COUNT = 'count',\n  AVG_OCCURRENCE = 'avgOccurrence',\n  SUM_EXCLUSIVE_TIME = 'sumExclusiveTime',\n}\n\nexport type SpanSort = SpanSortPercentiles | SpanSortOthers;\n\nexport type SpanSortOption = {\n  field: SpanSort;\n  label: string;\n  prefix: string;\n};\n\nexport type SpansTotalValues = {\n  'count()': number;\n};\n","import {Location, Query} from 'history';\nimport pick from 'lodash/pick';\n\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {SpanSort, SpanSortOption, SpanSortOthers, SpanSortPercentiles} from './types';\n\nexport function generateSpansRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/spans/`;\n}\n\nexport function spansRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpansRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport const SPAN_RETENTION_DAYS = 30;\n\nexport const SPAN_RELATIVE_PERIODS = pick(DEFAULT_RELATIVE_PERIODS, [\n  '1h',\n  '24h',\n  '7d',\n  '14d',\n  '30d',\n]);\n\nexport const SPAN_SORT_OPTIONS: SpanSortOption[] = [\n  {\n    prefix: t('Sort By'),\n    label: t('Total Self Time'),\n    field: SpanSortOthers.SUM_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Average Count'),\n    field: SpanSortOthers.AVG_OCCURRENCE,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Total Count'),\n    field: SpanSortOthers.COUNT,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p50 Self Time'),\n    field: SpanSortPercentiles.P50_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p75 Self Time'),\n    field: SpanSortPercentiles.P75_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p95 Self Time'),\n    field: SpanSortPercentiles.P95_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p99 Self Time'),\n    field: SpanSortPercentiles.P99_EXCLUSIVE_TIME,\n  },\n];\n\nconst DEFAULT_SORT = SpanSortOthers.SUM_EXCLUSIVE_TIME;\n\nfunction getSuspectSpanSort(sort: string): SpanSortOption {\n  const selected = SPAN_SORT_OPTIONS.find(option => option.field === sort);\n  if (selected) {\n    return selected;\n  }\n  return SPAN_SORT_OPTIONS.find(option => option.field === DEFAULT_SORT)!;\n}\n\nexport function getSuspectSpanSortFromLocation(\n  location: Location,\n  sortKey: string = 'sort'\n): SpanSortOption {\n  const sort = decodeScalar(location?.query?.[sortKey]) ?? DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function getSuspectSpanSortFromEventView(eventView: EventView): SpanSortOption {\n  const sort = eventView.sorts.length ? eventView.sorts[0].field : DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function parseSpanSlug(spanSlug: string | undefined): SpanSlug | undefined {\n  if (!defined(spanSlug)) {\n    return undefined;\n  }\n\n  const delimiterPos = spanSlug.lastIndexOf(':');\n  if (delimiterPos < 0) {\n    return undefined;\n  }\n\n  const op = spanSlug.slice(0, delimiterPos);\n  const group = spanSlug.slice(delimiterPos + 1);\n\n  return {op, group};\n}\n\nexport function generateSpansEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  const eventView = EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields: [...Object.values(SpanSortOthers), ...Object.values(SpanSortPercentiles)],\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n\n  const sort = getSuspectSpanSortFromLocation(location);\n  return eventView.withSorts([{field: sort.field, kind: 'desc'}]);\n}\n\n/**\n * For the totals view, we want to get some transaction level stats like\n * the number of transactions and the sum of the transaction duration.\n * This requires the removal of any aggregate conditions as they can result\n * in unexpected empty responses.\n */\nexport function getTotalsView(eventView: EventView): EventView {\n  const totalsView = eventView.withColumns([\n    {kind: 'function', function: ['count', '', undefined, undefined]},\n  ]);\n\n  const conditions = new MutableSearch(eventView.query);\n\n  // filter out any aggregate conditions\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  totalsView.query = conditions.formatString();\n  return totalsView;\n}\n\nexport const SPAN_SORT_TO_FIELDS: Record<SpanSort, string[]> = {\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'equation|count() / count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.COUNT]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.5)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.95)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.99)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n};\n\nexport function getExclusiveTimeDisplayedValue(value: string): string {\n  return value.replace('exclusive', 'self');\n}\n","import {Location, Query} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nexport function generateTagsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/tags/`;\n}\n\nexport function decodeSelectedTagKey(location: Location): string | undefined {\n  return decodeScalar(location.query.tagKey);\n}\n\nexport function trackTagPageInteraction(organization: Organization) {\n  trackAnalyticsEvent({\n    eventKey: 'performance_views.tags.interaction',\n    eventName: 'Performance Views: Tag Page - Interaction',\n    organization_id: parseInt(organization.id, 10),\n  });\n}\n\nexport function tagsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateTagsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      tagKey: query.tagKey,\n    },\n  };\n}\n\nexport function getTagSortForTagsPage(location: Location) {\n  // Retrieves the tag from the same query param segment explorer uses, but removes columns that aren't supported.\n  let tagSort = decodeScalar(location.query?.tagSort) ?? '-frequency';\n\n  if (['sumdelta'].find(denied => tagSort?.includes(denied))) {\n    tagSort = '-frequency';\n  }\n\n  return tagSort;\n}\n\n// TODO(k-fish): Improve meta of backend response to return these directly\nexport function parseHistogramBucketInfo(row: {[key: string]: React.ReactText}) {\n  const field = Object.keys(row).find(f => f.includes('histogram'));\n  if (!field) {\n    return undefined;\n  }\n  const parts = field.split('_');\n  return {\n    histogramField: field,\n    bucketSize: parseInt(parts[parts.length - 3], 10),\n    offset: parseInt(parts[parts.length - 2], 10),\n    multiplier: parseInt(parts[parts.length - 1], 10),\n  };\n}\n","import type {ECharts} from 'echarts';\nimport {Query} from 'history';\n\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {getBucketWidth} from 'sentry/utils/performance/histogram/utils';\nimport {VitalsData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\n\nimport {Point, Rectangle} from './types';\n\nexport function generateVitalsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/vitals/`;\n}\n\nexport function vitalsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\n/**\n * Given a value on the x-axis, return the index of the nearest bucket or null\n * if it cannot be found.\n *\n * A bucket contains a range of values, and nearest is defined as the bucket the\n * value will fall in.\n */\nexport function findNearestBucketIndex(\n  chartData: HistogramData,\n  xAxis: number\n): number | null {\n  const width = getBucketWidth(chartData);\n  // it's possible that the data is not available yet or the x axis is out of range\n  if (!chartData.length || xAxis >= chartData[chartData.length - 1].bin + width) {\n    return null;\n  }\n  if (xAxis < chartData[0].bin) {\n    return -1;\n  }\n\n  return Math.floor((xAxis - chartData[0].bin) / width);\n}\n\n/**\n * To compute pixel coordinates, we need at least 2 unique points on the chart.\n * The two points must have different x axis and y axis values for it to work.\n *\n * If all bars have the same y value, pick the most naive reference rect. This\n * may result in floating point errors, but should be okay for our purposes.\n */\nexport function getRefRect(chartData: HistogramData): Rectangle | null {\n  // not enough points to construct 2 reference points\n  if (chartData.length < 2) {\n    return null;\n  }\n\n  for (let i = 0; i < chartData.length; i++) {\n    const data1 = chartData[i];\n    for (let j = i + 1; j < chartData.length; j++) {\n      const data2 = chartData[j];\n\n      if (data1.bin !== data2.bin && data1.count !== data2.count) {\n        return {\n          point1: {x: i, y: Math.min(data1.count, data2.count)},\n          point2: {x: j, y: Math.max(data1.count, data2.count)},\n        };\n      }\n    }\n  }\n\n  // all data points have the same count, just pick any 2 histogram bins\n  // and use 0 and 1 as the count as we can rely on them being on the graph\n  return {\n    point1: {x: 0, y: 0},\n    point2: {x: 1, y: 1},\n  };\n}\n\n/**\n * Given an ECharts instance and a rectangle defined in terms of the x and y axis,\n * compute the corresponding pixel coordinates. If it cannot be done, return null.\n */\nexport function asPixelRect(chartRef: ECharts, dataRect: Rectangle): Rectangle | null {\n  const point1 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point1.x,\n    dataRect.point1.y,\n  ]);\n\n  if (isNaN(point1?.[0]) || isNaN(point1?.[1])) {\n    return null;\n  }\n\n  const point2 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point2.x,\n    dataRect.point2.y,\n  ]);\n\n  if (isNaN(point2?.[0]) || isNaN(point2?.[1])) {\n    return null;\n  }\n\n  return {\n    point1: {x: point1[0], y: point1[1]},\n    point2: {x: point2[0], y: point2[1]},\n  };\n}\n\n/**\n * Given a point on a source rectangle, map it to the corresponding point on the\n * destination rectangle. Assumes that the two rectangles are related by a simple\n * transformation containing only translations and scaling.\n */\nexport function mapPoint(\n  point: Point,\n  srcRect: Rectangle,\n  destRect: Rectangle\n): Point | null {\n  if (\n    srcRect.point1.x === srcRect.point2.x ||\n    srcRect.point1.y === srcRect.point2.y ||\n    destRect.point1.x === destRect.point2.x ||\n    destRect.point1.y === destRect.point2.y\n  ) {\n    return null;\n  }\n\n  const xPercentage =\n    (point.x - srcRect.point1.x) / (srcRect.point2.x - srcRect.point1.x);\n  const yPercentage =\n    (point.y - srcRect.point1.y) / (srcRect.point2.y - srcRect.point1.y);\n\n  return {\n    x: destRect.point1.x + (destRect.point2.x - destRect.point1.x) * xPercentage,\n    y: destRect.point1.y + (destRect.point2.y - destRect.point1.y) * yPercentage,\n  };\n}\n\nexport function isMissingVitalsData(\n  vitalsData: VitalsData | null,\n  allVitals: WebVital[]\n): boolean {\n  if (!vitalsData || allVitals.some(vital => !vitalsData[vital])) {\n    return true;\n  }\n\n  const measurementsWithoutCounts = Object.values(vitalsData).filter(\n    vitalObj => vitalObj.total === 0\n  );\n  return measurementsWithoutCounts.length > 0;\n}\n","import {EventsMetaType} from 'sentry/utils/discover/eventView';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\n\ntype BaseDataRow = {\n  [key: string]: React.ReactText;\n  count: number;\n  count_unique_user: number;\n  id: string;\n  project: string;\n  team_key_transaction: number;\n  transaction: string;\n};\n\ntype LCPDataRow = BaseDataRow & {\n  compare_numeric_aggregate_p75_measurements_lcp_greater_2500: number;\n  compare_numeric_aggregate_p75_measurements_lcp_greater_4000: number;\n  p50_measurements_lcp: number;\n  p75_measurements_lcp: number;\n  p95_measurements_lcp: number;\n};\ntype FCPDataRow = BaseDataRow & {\n  compare_numeric_aggregate_p75_measurements_fcp_greater_2500: number;\n  compare_numeric_aggregate_p75_measurements_fcp_greater_4000: number;\n  p50_measurements_fcp: number;\n  p75_measurements_fcp: number;\n  p95_measurements_fcp: number;\n};\ntype CLSDataRow = BaseDataRow & {\n  compare_numeric_aggregate_p75_measurements_cls_greater_2500: number;\n  compare_numeric_aggregate_p75_measurements_cls_greater_4000: number;\n  p50_measurements_cls: number;\n  p75_measurements_cls: number;\n  p95_measurements_cls: number;\n};\ntype FIDDataRow = BaseDataRow & {\n  compare_numeric_aggregate_p75_measurements_fid_greater_2500: number;\n  compare_numeric_aggregate_p75_measurements_fid_greater_4000: number;\n  p50_measurements_fid: number;\n  p75_measurements_fid: number;\n  p95_measurements_fid: number;\n};\n\n// TODO(perf): Fix if/once we can send column aliases along with a request\nexport type TableDataRow = LCPDataRow | FCPDataRow | CLSDataRow | FIDDataRow;\n\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\ntype ChildrenProps = Omit<GenericChildrenProps<TableData>, 'tableData'> & {\n  tableData: TableData | null;\n};\n\ntype QueryProps = DiscoverQueryProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction VitalsCardsDiscoverQuery(props: QueryProps) {\n  return <GenericDiscoverQuery<TableData, QueryProps> route=\"events\" {...props} />;\n}\n\nexport default withApi(VitalsCardsDiscoverQuery);\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport Tag from 'sentry/components/tag';\nimport {IconStar} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView, {\n  EventData,\n  EventsMetaType,\n  isFieldSortable,\n} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  fieldAlignment,\n  getAggregateAlias,\n  Sort,\n  WebVital,\n} from 'sentry/utils/discover/fields';\nimport VitalsDetailsTableQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/performance/vitals/vitalsDetailsTableQuery';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\n\nimport {DisplayModes} from '../transactionSummary/transactionOverview/charts';\nimport {\n  normalizeSearchConditionsWithTransactionName,\n  TransactionFilterOptions,\n  transactionSummaryRouteWithQuery,\n} from '../transactionSummary/utils';\n\nimport {\n  getVitalDetailTableMehStatusFunction,\n  getVitalDetailTablePoorStatusFunction,\n  vitalAbbreviations,\n  vitalNameFromLocation,\n  VitalState,\n  vitalStateColors,\n} from './utils';\n\nconst COLUMN_TITLES = ['Transaction', 'Project', 'Unique Users', 'Count'];\n\nconst getTableColumnTitle = (index: number, vitalName: WebVital) => {\n  const abbrev = vitalAbbreviations[vitalName];\n  const titles = [\n    ...COLUMN_TITLES,\n    `p50(${abbrev})`,\n    `p75(${abbrev})`,\n    `p95(${abbrev})`,\n    `Status`,\n  ];\n  return titles[index];\n};\n\nexport function getProjectID(\n  eventData: EventData,\n  projects: Project[]\n): string | undefined {\n  const projectSlug = (eventData?.project as string) || undefined;\n\n  if (typeof projectSlug === undefined) {\n    return undefined;\n  }\n\n  const project = projects.find(currentProject => currentProject.slug === projectSlug);\n\n  if (!project) {\n    return undefined;\n  }\n\n  return project.id;\n}\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  setError: (msg: string | undefined) => void;\n\n  summaryConditions: string;\n};\n\ntype State = {\n  widths: number[];\n};\n\nclass Table extends Component<Props, State> {\n  state: State = {\n    widths: [],\n  };\n\n  handleCellAction = (column: TableColumn<keyof TableDataRow>) => {\n    return (action: Actions, value: React.ReactText) => {\n      const {eventView, location, organization} = this.props;\n\n      trackAnalyticsEvent({\n        eventKey: 'performance_views.overview.cellaction',\n        eventName: 'Performance Views: Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n        action,\n      });\n\n      const searchConditions = normalizeSearchConditionsWithTransactionName(\n        eventView.query\n      );\n\n      updateQuery(searchConditions, action, column, value);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow,\n    vitalName: WebVital\n  ): React.ReactNode {\n    const {eventView, organization, projects, location, summaryConditions} = this.props;\n\n    if (!tableData || !tableData.meta?.fields) {\n      return dataRow[column.key];\n    }\n    const tableMeta = tableData.meta?.fields;\n\n    const field = String(column.key);\n\n    if (field === getVitalDetailTablePoorStatusFunction(vitalName)) {\n      if (dataRow[field]) {\n        return (\n          <UniqueTagCell>\n            <PoorTag>{t('Poor')}</PoorTag>\n          </UniqueTagCell>\n        );\n      }\n      if (dataRow[getVitalDetailTableMehStatusFunction(vitalName)]) {\n        return (\n          <UniqueTagCell>\n            <MehTag>{t('Meh')}</MehTag>\n          </UniqueTagCell>\n        );\n      }\n      return (\n        <UniqueTagCell>\n          <GoodTag>{t('Good')}</GoodTag>\n        </UniqueTagCell>\n      );\n    }\n\n    const fieldRenderer = getFieldRenderer(field, tableMeta, false);\n    const rendered = fieldRenderer(dataRow, {organization, location});\n\n    const allowActions = [\n      Actions.ADD,\n      Actions.EXCLUDE,\n      Actions.SHOW_GREATER_THAN,\n      Actions.SHOW_LESS_THAN,\n    ];\n\n    if (field === 'transaction') {\n      const projectID = getProjectID(dataRow, projects);\n      const summaryView = eventView.clone();\n      const conditions = new MutableSearch(summaryConditions);\n      conditions.addFilterValues('has', [`${vitalName}`]);\n      summaryView.query = conditions.formatString();\n\n      const transaction = String(dataRow.transaction) || '';\n\n      const target = transactionSummaryRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction,\n        query: summaryView.generateQueryStringObject(),\n        projectID,\n        showTransactions: TransactionFilterOptions.RECENT,\n        display: DisplayModes.VITALS,\n      });\n\n      return (\n        <CellAction\n          column={column}\n          dataRow={dataRow}\n          handleCellAction={this.handleCellAction(column)}\n          allowActions={allowActions}\n        >\n          <Link\n            to={target}\n            aria-label={t('See transaction summary of the transaction %s', transaction)}\n            onClick={this.handleSummaryClick}\n          >\n            {rendered}\n          </Link>\n        </CellAction>\n      );\n    }\n\n    if (field.startsWith('team_key_transaction')) {\n      return rendered;\n    }\n\n    return (\n      <CellAction\n        column={column}\n        dataRow={dataRow}\n        handleCellAction={this.handleCellAction(column)}\n        allowActions={allowActions}\n      >\n        {rendered}\n      </CellAction>\n    );\n  }\n\n  renderBodyCellWithData = (tableData: TableData | null, vitalName: WebVital) => {\n    return (\n      column: TableColumn<keyof TableDataRow>,\n      dataRow: TableDataRow\n    ): React.ReactNode => this.renderBodyCell(tableData, column, dataRow, vitalName);\n  };\n\n  renderHeadCell(\n    column: TableColumn<keyof TableDataRow>,\n    title: React.ReactNode,\n    tableMeta?: EventsMetaType['fields']\n  ): React.ReactNode {\n    const {eventView, location} = this.props;\n    // TODO: Need to map table meta keys to aggregate alias since eventView sorting still expects\n    // aggregate aliases for now. We'll need to refactor event view to get rid of all aggregate\n    // alias references and then we can remove this.\n    const aggregateAliasTableMeta: EventsMetaType['fields'] | undefined = tableMeta\n      ? {}\n      : undefined;\n    if (tableMeta) {\n      Object.keys(tableMeta).forEach(key => {\n        aggregateAliasTableMeta![getAggregateAlias(key)] = tableMeta[key];\n      });\n    }\n\n    const align = fieldAlignment(column.name, column.type, aggregateAliasTableMeta);\n    const field = {field: column.name, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!aggregateAliasTableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, aggregateAliasTableMeta);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, sort: queryStringObject.sort},\n      };\n    }\n    const currentSort = eventView.sortForField(field, aggregateAliasTableMeta);\n    const canSort = isFieldSortable(field, aggregateAliasTableMeta);\n\n    return (\n      <SortLink\n        align={align}\n        title={title || field.field}\n        direction={currentSort ? currentSort.kind : undefined}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n      />\n    );\n  }\n\n  renderHeadCellWithMeta = (\n    vitalName: WebVital,\n    tableMeta?: EventsMetaType['fields']\n  ) => {\n    return (column: TableColumn<keyof TableDataRow>, index: number): React.ReactNode =>\n      this.renderHeadCell(column, getTableColumnTitle(index, vitalName), tableMeta);\n  };\n\n  renderPrependCellWithData = (tableData: TableData | null, vitalName: WebVital) => {\n    const {eventView} = this.props;\n    const teamKeyTransactionColumn = eventView\n      .getColumns()\n      .find((col: TableColumn<React.ReactText>) => col.name === 'team_key_transaction');\n    return (isHeader: boolean, dataRow?: any) => {\n      if (teamKeyTransactionColumn) {\n        if (isHeader) {\n          const star = (\n            <IconStar\n              key=\"keyTransaction\"\n              color=\"yellow300\"\n              isSolid\n              data-test-id=\"key-transaction-header\"\n            />\n          );\n          return [\n            this.renderHeadCell(teamKeyTransactionColumn, star, tableData?.meta?.fields),\n          ];\n        }\n        return [\n          this.renderBodyCell(tableData, teamKeyTransactionColumn, dataRow, vitalName),\n        ];\n      }\n      return [];\n    };\n  };\n\n  handleSummaryClick = () => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.overview.navigate.summary',\n      eventName: 'Performance Views: Overview view summary',\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getSortedEventView(vitalName: WebVital) {\n    const {eventView} = this.props;\n\n    const aggregateFieldPoor = getAggregateAlias(\n      getVitalDetailTablePoorStatusFunction(vitalName)\n    );\n    const aggregateFieldMeh = getAggregateAlias(\n      getVitalDetailTableMehStatusFunction(vitalName)\n    );\n    const isSortingByStatus = eventView.sorts.some(\n      sort =>\n        sort.field.includes(aggregateFieldPoor) || sort.field.includes(aggregateFieldMeh)\n    );\n\n    const additionalSorts: Sort[] = isSortingByStatus\n      ? []\n      : [\n          {\n            field: 'team_key_transaction',\n            kind: 'desc',\n          },\n          {\n            field: aggregateFieldPoor,\n            kind: 'desc',\n          },\n          {\n            field: aggregateFieldMeh,\n            kind: 'desc',\n          },\n        ];\n\n    return eventView.withSorts([...additionalSorts, ...eventView.sorts]);\n  }\n\n  render() {\n    const {eventView, organization, location} = this.props;\n    const {widths} = this.state;\n\n    const fakeColumnView = eventView.clone();\n    fakeColumnView.fields = [...eventView.fields];\n    const columnOrder = fakeColumnView\n      .getColumns()\n      // remove key_transactions from the column order as we'll be rendering it\n      // via a prepended column\n      .filter((col: TableColumn<React.ReactText>) => col.name !== 'team_key_transaction')\n      .slice(0, -1)\n      .map((col: TableColumn<React.ReactText>, i: number) => {\n        if (typeof widths[i] === 'number') {\n          return {...col, width: widths[i]};\n        }\n        return col;\n      });\n\n    const vitalName = vitalNameFromLocation(location);\n    const sortedEventView = this.getSortedEventView(vitalName);\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <div>\n        <VitalsDetailsTableQuery\n          eventView={sortedEventView}\n          orgSlug={organization.slug}\n          location={location}\n          limit={10}\n          referrer=\"api.performance.vital-detail\"\n        >\n          {({pageLinks, isLoading, tableData}) => (\n            <Fragment>\n              <GridEditable\n                isLoading={isLoading}\n                data={tableData ? tableData.data : []}\n                columnOrder={columnOrder}\n                columnSortBy={columnSortBy}\n                grid={{\n                  onResizeColumn: this.handleResizeColumn,\n                  renderHeadCell: this.renderHeadCellWithMeta(\n                    vitalName,\n                    tableData?.meta?.fields\n                  ) as any,\n                  renderBodyCell: this.renderBodyCellWithData(\n                    tableData,\n                    vitalName\n                  ) as any,\n                  renderPrependColumns: this.renderPrependCellWithData(\n                    tableData,\n                    vitalName\n                  ) as any,\n                  prependColumnWidths: ['max-content'],\n                }}\n                location={location}\n              />\n              <Pagination pageLinks={pageLinks} />\n            </Fragment>\n          )}\n        </VitalsDetailsTableQuery>\n      </div>\n    );\n  }\n}\n\nconst UniqueTagCell = styled('div')`\n  text-align: right;\n  justify-self: flex-end;\n  flex-grow: 1;\n`;\n\nconst GoodTag = styled(Tag)`\n  div {\n    background-color: ${p => p.theme[vitalStateColors[VitalState.GOOD]]};\n  }\n  span {\n    color: ${p => p.theme.white};\n  }\n`;\n\nconst MehTag = styled(Tag)`\n  div {\n    background-color: ${p => p.theme[vitalStateColors[VitalState.MEH]]};\n  }\n  span {\n    color: ${p => p.theme.white};\n  }\n`;\n\nconst PoorTag = styled(Tag)`\n  div {\n    background-color: ${p => p.theme[vitalStateColors[VitalState.POOR]]};\n  }\n  span {\n    color: ${p => p.theme.white};\n  }\n`;\n\nexport default Table;\n","import {Component, Fragment} from 'react';\nimport {browserHistory, InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {CreateAlertFromViewButton} from 'sentry/components/createAlertButton';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport DropdownMenuControlV2 from 'sentry/components/dropdownMenuControlV2';\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport * as TeamKeyTransactionManager from 'sentry/components/performance/teamKeyTransactionsManager';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {IconCheckmark, IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {generateQueryWithTag} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {Browser} from 'sentry/utils/performance/vitals/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport Teams from 'sentry/utils/teams';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport Breadcrumb from '../breadcrumb';\nimport {getTransactionSearchQuery} from '../utils';\n\nimport Table from './table';\nimport {\n  vitalAbbreviations,\n  vitalAlertTypes,\n  vitalDescription,\n  vitalMap,\n  vitalSupportedBrowsers,\n} from './utils';\nimport VitalChart from './vitalChart';\nimport VitalInfo from './vitalInfo';\n\nconst FRONTEND_VITALS = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  router: InjectedRouter;\n  vitalName: WebVital;\n};\n\ntype State = {\n  error: string | undefined;\n  incompatibleAlertNotice: React.ReactNode;\n};\n\nfunction getSummaryConditions(query: string) {\n  const parsed = new MutableSearch(query);\n  parsed.freeText = [];\n\n  return parsed.formatString();\n}\n\nclass VitalDetailContent extends Component<Props, State> {\n  state: State = {\n    incompatibleAlertNotice: null,\n    error: undefined,\n  };\n\n  handleSearch = (query: string) => {\n    const {location} = this.props;\n\n    const queryParams = normalizeDateTimeParams({\n      ...(location.query || {}),\n      query,\n    });\n\n    // do not propagate pagination when making a new search\n    const searchQueryParams = omit(queryParams, 'cursor');\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...searchQueryParams,\n        userModified: true,\n      },\n    });\n  };\n\n  generateTagUrl = (key: string, value: string) => {\n    const {location} = this.props;\n    const query = generateQueryWithTag(location.query, {key, value});\n\n    return {\n      ...location,\n      query,\n    };\n  };\n\n  handleIncompatibleQuery: React.ComponentProps<\n    typeof CreateAlertFromViewButton\n  >['onIncompatibleQuery'] = (incompatibleAlertNoticeFn, _errors) => {\n    const incompatibleAlertNotice = incompatibleAlertNoticeFn(() =>\n      this.setState({incompatibleAlertNotice: null})\n    );\n    this.setState({incompatibleAlertNotice});\n  };\n\n  renderCreateAlertButton() {\n    const {eventView, organization, projects, vitalName} = this.props;\n\n    return (\n      <CreateAlertFromViewButton\n        eventView={eventView}\n        organization={organization}\n        projects={projects}\n        onIncompatibleQuery={this.handleIncompatibleQuery}\n        onSuccess={() => {}}\n        useAlertWizardV3={organization.features.includes('alert-wizard-v3')}\n        aria-label={t('Create Alert')}\n        alertType={vitalAlertTypes[vitalName]}\n        referrer=\"performance\"\n      />\n    );\n  }\n\n  renderVitalSwitcher() {\n    const {vitalName, location} = this.props;\n\n    const position = FRONTEND_VITALS.indexOf(vitalName);\n\n    if (position < 0) {\n      return null;\n    }\n\n    const items: MenuItemProps[] = FRONTEND_VITALS.reduce(\n      (acc: MenuItemProps[], newVitalName) => {\n        const itemProps = {\n          key: newVitalName,\n          label: vitalAbbreviations[newVitalName],\n          onAction: function switchWebVital() {\n            browserHistory.push({\n              pathname: location.pathname,\n              query: {\n                ...location.query,\n                vitalName: newVitalName,\n                cursor: undefined,\n              },\n            });\n          },\n        };\n\n        if (vitalName === newVitalName) {\n          acc.unshift(itemProps);\n        } else {\n          acc.push(itemProps);\n        }\n\n        return acc;\n      },\n      []\n    );\n\n    return (\n      <DropdownMenuControlV2\n        items={items}\n        triggerLabel={vitalAbbreviations[vitalName]}\n        triggerProps={{\n          'aria-label': `Web Vitals: ${vitalAbbreviations[vitalName]}`,\n          prefix: t('Web Vitals'),\n        }}\n        placement=\"bottom left\"\n      />\n    );\n  }\n\n  setError = (error: string | undefined) => {\n    this.setState({error});\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    if (!error) {\n      return null;\n    }\n\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  renderContent(vital: WebVital) {\n    const {location, organization, eventView, projects} = this.props;\n\n    const {fields, start, end, statsPeriod, environment, project} = eventView;\n\n    const query = decodeScalar(location.query.query, '');\n    const orgSlug = organization.slug;\n    const localDateStart = start ? getUtcToLocalDateObject(start) : null;\n    const localDateEnd = end ? getUtcToLocalDateObject(end) : null;\n    const interval = getInterval(\n      {start: localDateStart, end: localDateEnd, period: statsPeriod},\n      'high'\n    );\n    const filterString = getTransactionSearchQuery(location);\n    const summaryConditions = getSummaryConditions(filterString);\n\n    return (\n      <Fragment>\n        <FilterActions>\n          <PageFilterBar condensed>\n            <ProjectPageFilter />\n            <EnvironmentPageFilter />\n            <DatePageFilter alignDropdown=\"left\" />\n          </PageFilterBar>\n          <SearchBar\n            searchSource=\"performance_vitals\"\n            organization={organization}\n            projectIds={project}\n            query={query}\n            fields={fields}\n            onSearch={this.handleSearch}\n          />\n        </FilterActions>\n        <VitalChart\n          organization={organization}\n          query={query}\n          project={project}\n          environment={environment}\n          start={localDateStart}\n          end={localDateEnd}\n          statsPeriod={statsPeriod}\n          interval={interval}\n        />\n        <StyledVitalInfo>\n          <VitalInfo\n            orgSlug={orgSlug}\n            location={location}\n            vital={vital}\n            project={project}\n            environment={environment}\n            start={start}\n            end={end}\n            statsPeriod={statsPeriod}\n          />\n        </StyledVitalInfo>\n\n        <Teams provideUserTeams>\n          {({teams, initiallyLoaded}) =>\n            initiallyLoaded ? (\n              <TeamKeyTransactionManager.Provider\n                organization={organization}\n                teams={teams}\n                selectedTeams={['myteams']}\n                selectedProjects={project.map(String)}\n              >\n                <Table\n                  eventView={eventView}\n                  projects={projects}\n                  organization={organization}\n                  location={location}\n                  setError={this.setError}\n                  summaryConditions={summaryConditions}\n                />\n              </TeamKeyTransactionManager.Provider>\n            ) : (\n              <LoadingIndicator />\n            )\n          }\n        </Teams>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {location, organization, vitalName} = this.props;\n    const {incompatibleAlertNotice} = this.state;\n\n    const vital = vitalName || WebVital.LCP;\n\n    return (\n      <Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumb\n              organization={organization}\n              location={location}\n              vitalName={vital}\n            />\n            <Layout.Title>{vitalMap[vital]}</Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              {this.renderVitalSwitcher()}\n              <Feature organization={organization} features={['incidents']}>\n                {({hasFeature}) => hasFeature && this.renderCreateAlertButton()}\n              </Feature>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          {this.renderError()}\n          {incompatibleAlertNotice && (\n            <Layout.Main fullWidth>{incompatibleAlertNotice}</Layout.Main>\n          )}\n          <Layout.Main fullWidth>\n            <StyledDescription>{vitalDescription[vitalName]}</StyledDescription>\n            <SupportedBrowsers>\n              {Object.values(Browser).map(browser => (\n                <BrowserItem key={browser}>\n                  {vitalSupportedBrowsers[vitalName]?.includes(browser) ? (\n                    <IconCheckmark color=\"green300\" size=\"sm\" />\n                  ) : (\n                    <IconClose color=\"red300\" size=\"sm\" />\n                  )}\n                  {browser}\n                </BrowserItem>\n              ))}\n            </SupportedBrowsers>\n            {this.renderContent(vital)}\n          </Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default withProjects(VitalDetailContent);\n\nconst StyledDescription = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledVitalInfo = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst SupportedBrowsers = styled('div')`\n  display: inline-flex;\n  gap: ${space(2)};\n  margin-bottom: ${space(3)};\n`;\n\nconst BrowserItem = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: auto 1fr;\n  }\n`;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {PerformanceEventViewProvider} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {generatePerformanceVitalDetailView} from '../data';\nimport {addRoutePerformanceContext, getTransactionName} from '../utils';\n\nimport VitalDetailContent from './vitalDetailContent';\n\ntype Props = RouteComponentProps<{}, {}> & {\n  api: Client;\n  loadingProjects: boolean;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = {\n  eventView: EventView;\n};\n\nclass VitalDetail extends Component<Props, State> {\n  state: State = {\n    eventView: generatePerformanceVitalDetailView(this.props.location),\n  };\n\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    return {\n      ...prevState,\n      eventView: generatePerformanceVitalDetailView(nextProps.location),\n    };\n  }\n\n  componentDidMount() {\n    const {api, organization, selection} = this.props;\n    loadOrganizationTags(api, organization.slug, selection);\n    addRoutePerformanceContext(selection);\n\n    trackAdvancedAnalyticsEvent('performance_views.vital_detail.view', {\n      organization,\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {api, organization, selection} = this.props;\n\n    if (\n      !isEqual(prevProps.selection.projects, selection.projects) ||\n      !isEqual(prevProps.selection.datetime, selection.datetime)\n    ) {\n      loadOrganizationTags(api, organization.slug, selection);\n      addRoutePerformanceContext(selection);\n    }\n  }\n\n  getDocumentTitle(): string {\n    const name = getTransactionName(this.props.location);\n\n    const hasTransactionName = typeof name === 'string' && String(name).trim().length > 0;\n\n    if (hasTransactionName) {\n      return [String(name).trim(), t('Performance')].join(' - ');\n    }\n\n    return [t('Vital Detail'), t('Performance')].join(' - ');\n  }\n\n  render() {\n    const {organization, location, router, api} = this.props;\n    const {eventView} = this.state;\n    if (!eventView) {\n      browserHistory.replace({\n        pathname: `/organizations/${organization.slug}/performance/`,\n        query: {\n          ...location.query,\n        },\n      });\n      return null;\n    }\n\n    const vitalNameQuery = decodeScalar(location.query.vitalName);\n    const vitalName =\n      Object.values(WebVital).indexOf(vitalNameQuery as WebVital) === -1\n        ? undefined\n        : (vitalNameQuery as WebVital);\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <PerformanceEventViewProvider value={{eventView: this.state.eventView}}>\n          <PageFiltersContainer hideGlobalHeader>\n            <StyledPageContent>\n              <NoProjectMessage organization={organization}>\n                <VitalDetailContent\n                  location={location}\n                  organization={organization}\n                  eventView={eventView}\n                  router={router}\n                  vitalName={vitalName || WebVital.LCP}\n                  api={api}\n                />\n              </NoProjectMessage>\n            </StyledPageContent>\n          </PageFiltersContainer>\n        </PerformanceEventViewProvider>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nexport default withApi(withPageFilters(withProjects(withOrganization(VitalDetail))));\n","import {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport {ChartContainer, HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\n\nimport {replaceSeriesName, transformEventStatsSmoothed} from '../trends/utils';\nimport {ViewProps} from '../types';\n\nimport {\n  getMaxOfSeries,\n  getVitalChartDefinitions,\n  getVitalChartTitle,\n  vitalNameFromLocation,\n  VitalState,\n  vitalStateColors,\n} from './utils';\n\ntype Props = WithRouterProps &\n  Omit<ViewProps, 'start' | 'end'> & {\n    end: DateString | null;\n    interval: string;\n    organization: OrganizationSummary;\n    start: DateString | null;\n  };\n\nfunction VitalChart({\n  project,\n  environment,\n  location,\n  organization,\n  query,\n  statsPeriod,\n  router,\n  start,\n  end,\n  interval,\n}: Props) {\n  const api = useApi();\n  const theme = useTheme();\n\n  const vitalName = vitalNameFromLocation(location);\n  const yAxis = `p75(${vitalName})`;\n\n  const {utc, legend, vitalPoor, markLines, chartOptions} = getVitalChartDefinitions({\n    theme,\n    location,\n    yAxis,\n    vital: vitalName,\n  });\n\n  function handleLegendSelectChanged(legendChange: {\n    name: string;\n    selected: Record<string, boolean>;\n    type: string;\n  }) {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        unselectedSeries: unselected,\n      },\n    };\n    browserHistory.push(to);\n  }\n\n  return (\n    <Panel>\n      <ChartContainer>\n        <HeaderTitleLegend>\n          {getVitalChartTitle(vitalName)}\n          <QuestionTooltip\n            size=\"sm\"\n            position=\"top\"\n            title={t(`The durations shown should fall under the vital threshold.`)}\n          />\n        </HeaderTitleLegend>\n        <ChartZoom router={router} period={statsPeriod} start={start} end={end} utc={utc}>\n          {zoomRenderProps => (\n            <EventsRequest\n              api={api}\n              organization={organization}\n              period={statsPeriod}\n              project={project}\n              environment={environment}\n              start={start}\n              end={end}\n              interval={interval}\n              showLoading={false}\n              query={query}\n              includePrevious={false}\n              yAxis={[yAxis]}\n              partial\n              userModified={decodeScalar(location.query.userModified)}\n            >\n              {({timeseriesData: results, errored, loading, reloading}) => {\n                if (errored) {\n                  return (\n                    <ErrorPanel>\n                      <IconWarning color=\"gray500\" size=\"lg\" />\n                    </ErrorPanel>\n                  );\n                }\n\n                const colors =\n                  (results && theme.charts.getColorPalette(results.length - 2)) || [];\n\n                const {smoothedResults} = transformEventStatsSmoothed(results);\n\n                const smoothedSeries = smoothedResults\n                  ? smoothedResults.map(({seriesName, ...rest}, i: number) => {\n                      return {\n                        seriesName: replaceSeriesName(seriesName) || 'p75',\n                        ...rest,\n                        color: colors[i],\n                        lineStyle: {\n                          opacity: 1,\n                          width: 2,\n                        },\n                      };\n                    })\n                  : [];\n\n                const seriesMax = getMaxOfSeries(smoothedSeries);\n                const yAxisMax = Math.max(seriesMax, vitalPoor);\n                chartOptions.yAxis!.max = yAxisMax * 1.1;\n\n                return (\n                  <ReleaseSeries\n                    start={start}\n                    end={end}\n                    period={statsPeriod}\n                    utc={utc}\n                    projects={project}\n                    environments={environment}\n                  >\n                    {({releaseSeries}) => (\n                      <TransitionChart loading={loading} reloading={reloading}>\n                        <TransparentLoadingMask visible={reloading} />\n                        {getDynamicText({\n                          value: (\n                            <LineChart\n                              {...zoomRenderProps}\n                              {...chartOptions}\n                              legend={legend}\n                              onLegendSelectChanged={handleLegendSelectChanged}\n                              series={[...markLines, ...releaseSeries, ...smoothedSeries]}\n                            />\n                          ),\n                          fixed: 'Web Vitals Chart',\n                        })}\n                      </TransitionChart>\n                    )}\n                  </ReleaseSeries>\n                );\n              }}\n            </EventsRequest>\n          )}\n        </ChartZoom>\n      </ChartContainer>\n    </Panel>\n  );\n}\n\nexport default withRouter(VitalChart);\n\nexport type _VitalChartProps = {\n  field: string;\n  grid: LineChartProps['grid'];\n  loading: boolean;\n  reloading: boolean;\n  data?: Series[];\n  height?: number;\n  utc?: boolean;\n  vitalFields?: {\n    goodCountField: string;\n    mehCountField: string;\n    poorCountField: string;\n  };\n};\n\nfunction fieldToVitalType(\n  seriesName: string,\n  vitalFields: _VitalChartProps['vitalFields']\n): VitalState | undefined {\n  if (seriesName === vitalFields?.poorCountField.replace('equation|', '')) {\n    return VitalState.POOR;\n  }\n  if (seriesName === vitalFields?.mehCountField.replace('equation|', '')) {\n    return VitalState.MEH;\n  }\n  if (seriesName === vitalFields?.goodCountField.replace('equation|', '')) {\n    return VitalState.GOOD;\n  }\n\n  return undefined;\n}\n\nexport function _VitalChart(props: _VitalChartProps) {\n  const {\n    field: yAxis,\n    data: _results,\n    loading,\n    reloading,\n    height,\n    grid,\n    utc,\n    vitalFields,\n  } = props;\n  const theme = useTheme();\n\n  if (!_results || !vitalFields) {\n    return null;\n  }\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    grid,\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis',\n      valueFormatter: (value: number, seriesName?: string) => {\n        return tooltipFormatter(\n          value,\n          vitalFields[0] === WebVital.CLS ? seriesName : yAxis\n        );\n      },\n    },\n    xAxis: {\n      show: false,\n    },\n    xAxes: undefined,\n    yAxis: {\n      axisLabel: {\n        color: theme.chartLabel,\n        showMaxLabel: false,\n        formatter: (value: number) => axisLabelFormatter(value, yAxis),\n      },\n    },\n    utc,\n    isGroupedByDate: true,\n    showTimeInTooltip: true,\n  };\n\n  const results = _results.filter(s => !!fieldToVitalType(s.seriesName, vitalFields));\n\n  const smoothedSeries = results?.length\n    ? results.map(({seriesName, ...rest}) => {\n        const adjustedSeries = fieldToVitalType(seriesName, vitalFields) || 'count';\n        return {\n          seriesName: adjustedSeries,\n          ...rest,\n          color: theme[vitalStateColors[adjustedSeries]],\n          lineStyle: {\n            opacity: 1,\n            width: 2,\n          },\n        };\n      })\n    : [];\n\n  return (\n    <div>\n      <TransitionChart loading={loading} reloading={reloading}>\n        <TransparentLoadingMask visible={reloading} />\n        {getDynamicText({\n          value: (\n            <LineChart\n              height={height}\n              {...chartOptions}\n              onLegendSelectChanged={() => {}}\n              series={[...smoothedSeries]}\n              isGroupedByDate\n            />\n          ),\n          fixed: 'Web Vitals Chart',\n        })}\n      </TransitionChart>\n    </div>\n  );\n}\n","import {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport VitalsCardDiscoverQuery from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\n\nimport {VitalBar} from '../landing/vitalsCards';\n\ntype ViewProps = Pick<\n  EventView,\n  'environment' | 'project' | 'start' | 'end' | 'statsPeriod'\n>;\n\ntype Props = ViewProps & {\n  location: Location;\n  orgSlug: Organization['slug'];\n  vital: WebVital | WebVital[];\n  hideBar?: boolean;\n  hideDurationDetail?: boolean;\n  hideStates?: boolean;\n  hideVitalPercentNames?: boolean;\n  hideVitalThresholds?: boolean;\n  isLoading?: boolean;\n  p75AllTransactions?: number;\n};\n\nfunction VitalInfo({\n  vital,\n  location,\n  isLoading,\n  hideBar,\n  hideStates,\n  hideVitalPercentNames,\n  hideVitalThresholds,\n  hideDurationDetail,\n}: Props) {\n  const vitals = Array.isArray(vital) ? vital : [vital];\n  const contentCommonProps = {\n    vital,\n    showBar: !hideBar,\n    showStates: !hideStates,\n    showVitalPercentNames: !hideVitalPercentNames,\n    showVitalThresholds: !hideVitalThresholds,\n    showDurationDetail: !hideDurationDetail,\n  };\n\n  return (\n    <VitalsCardDiscoverQuery location={location} vitals={vitals}>\n      {({isLoading: loading, vitalsData}) => (\n        <VitalBar\n          {...contentCommonProps}\n          isLoading={isLoading || loading}\n          data={vitalsData}\n        />\n      )}\n    </VitalsCardDiscoverQuery>\n  );\n}\n\nexport default VitalInfo;\n"],"names":["DropdownControl","Component","renderButton","isOpen","getActorProps","label","button","buttonProps","buttonTooltipTitle","priority","detached","fullWidth","this","props","skipWrapper","position","title","StyledDropdownButton","hideBottomBorder","rightAlignChevron","renderChildren","getMenuProps","children","alignRight","menuWidth","blendWithActor","alignMenu","Content","width","blendCorner","render","alwaysRenderMenu","className","Container","Fragment","p","theme","breakpoints","small","DropdownButton","zIndex","dropdownAutocomplete","actor","DropdownBubble","border","DropdownItem","MenuItem","fontSizeMedium","SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","SEMVER_TAGS","has","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","getFieldDoc","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","getBucketWidth","data","length","bin","computeBuckets","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","WrappedComponent","WithTags","TagStore","setState","undefined","componentWillUnmount","unsubscribe","state","getDisplayName","Breadcrumb","getCrumbs","crumbs","location","transaction","vitalName","spanSlug","eventSlug","traceSlug","tab","performanceTarget","pathname","getPerformanceLandingUrl","push","to","t","preservePageFilters","webVitalsTarget","vitalDetailRouteWithQuery","orgSlug","projectID","decodeScalar","project","routeQuery","Tab","tagsTarget","tagsRouteWithQuery","eventsTarget","eventsRouteWithQuery","vitalsRouteWithQuery","spansTarget","spansRouteWithQuery","summaryTarget","transactionSummaryRouteWithQuery","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","sort","kind","filterToField","p100","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","option","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","SpanSortPercentiles","SpanSortOthers","generateSpansRoute","SPAN_RETENTION_DAYS","SPAN_RELATIVE_PERIODS","pick","DEFAULT_RELATIVE_PERIODS","SPAN_SORT_OPTIONS","prefix","DEFAULT_SORT","getSuspectSpanSort","find","getSuspectSpanSortFromLocation","sortKey","getSuspectSpanSortFromEventView","eventView","sorts","parseSpanSlug","delimiterPos","lastIndexOf","op","slice","group","generateSpansEventView","transactionName","conditions","MutableSearch","setFilterValues","filters","forEach","removeFilter","EventView","id","version","formatString","projects","withSorts","getTotalsView","totalsView","withColumns","function","SPAN_SORT_TO_FIELDS","getExclusiveTimeDisplayedValue","decodeSelectedTagKey","tagKey","trackTagPageInteraction","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","generateTagsRoute","getTagSortForTagsPage","tagSort","denied","parseHistogramBucketInfo","row","f","parts","split","histogramField","bucketSize","offset","multiplier","generateVitalsRoute","findNearestBucketIndex","chartData","xAxis","floor","getRefRect","i","data1","j","data2","point1","x","y","min","point2","max","asPixelRect","chartRef","dataRect","convertToPixel","xAxisIndex","yAxisIndex","isNaN","mapPoint","point","srcRect","destRect","xPercentage","yPercentage","isMissingVitalsData","vitalsData","allVitals","some","vital","vitalObj","total","VitalsCardsDiscoverQuery","route","withApi","COLUMN_TITLES","Table","widths","column","action","searchConditions","normalizeSearchConditionsWithTransactionName","updateQuery","browserHistory","cursor","tableData","dataRow","renderBodyCell","tableMeta","index","renderHeadCell","abbrev","vitalAbbreviations","getTableColumnTitle","teamKeyTransactionColumn","getColumns","col","isHeader","star","color","isSolid","meta","columnIndex","nextColumn","COL_WIDTH_UNDEFINED","summaryConditions","getVitalDetailTablePoorStatusFunction","UniqueTagCell","PoorTag","getVitalDetailTableMehStatusFunction","MehTag","GoodTag","rendered","getFieldRenderer","fieldRenderer","allowActions","Actions","eventData","projectSlug","currentProject","getProjectID","summaryView","clone","addFilterValues","target","generateQueryStringObject","display","DisplayModes","handleCellAction","onClick","handleSummaryClick","startsWith","aggregateAliasTableMeta","getAggregateAlias","align","fieldAlignment","currentSort","sortForField","canSort","isFieldSortable","direction","generateSortLink","queryStringObject","sortOnField","getSortedEventView","aggregateFieldPoor","aggregateFieldMeh","additionalSorts","fakeColumnView","columnOrder","vitalNameFromLocation","sortedEventView","columnSortBy","getSorts","limit","referrer","pageLinks","isLoading","grid","onResizeColumn","handleResizeColumn","renderHeadCellWithMeta","renderBodyCellWithData","renderPrependColumns","renderPrependCellWithData","prependColumnWidths","Tag","vitalStateColors","VitalState","white","FRONTEND_VITALS","WebVital","VitalDetailContent","incompatibleAlertNotice","error","queryParams","normalizeDateTimeParams","searchQueryParams","userModified","generateQueryWithTag","incompatibleAlertNoticeFn","_errors","renderCreateAlertButton","onIncompatibleQuery","handleIncompatibleQuery","onSuccess","useAlertWizardV3","alertType","vitalAlertTypes","renderVitalSwitcher","indexOf","items","reduce","acc","newVitalName","itemProps","onAction","unshift","triggerLabel","triggerProps","placement","renderError","showIcon","renderContent","localDateStart","getUtcToLocalDateObject","localDateEnd","interval","getInterval","period","parsed","freeText","getSummaryConditions","getTransactionSearchQuery","FilterActions","condensed","alignDropdown","searchSource","onSearch","handleSearch","StyledVitalInfo","provideUserTeams","teams","initiallyLoaded","selectedTeams","selectedProjects","setError","vitalMap","gap","hasFeature","StyledDescription","vitalDescription","SupportedBrowsers","Browser","browser","BrowserItem","vitalSupportedBrowsers","size","withProjects","space","VitalDetail","generatePerformanceVitalDetailView","nextProps","prevState","componentDidMount","selection","loadOrganizationTags","addRoutePerformanceContext","trackAdvancedAnalyticsEvent","componentDidUpdate","prevProps","isEqual","datetime","getDocumentTitle","getTransactionName","trim","join","router","vitalNameQuery","hideGlobalHeader","StyledPageContent","PageContent","withPageFilters","withOrganization","VitalChart","useTheme","yAxis","utc","legend","vitalPoor","markLines","chartOptions","getVitalChartDefinitions","handleLegendSelectChanged","legendChange","selected","unselected","unselectedSeries","getVitalChartTitle","zoomRenderProps","showLoading","includePrevious","partial","timeseriesData","errored","loading","reloading","colors","charts","getColorPalette","smoothedResults","transformEventStatsSmoothed","smoothedSeries","seriesName","rest","replaceSeriesName","lineStyle","opacity","seriesMax","getMaxOfSeries","yAxisMax","environments","releaseSeries","visible","getDynamicText","onLegendSelectChanged","series","fixed","withRouter","fieldToVitalType","vitalFields","poorCountField","mehCountField","goodCountField","_VitalChart","_results","height","seriesOptions","showSymbol","tooltip","trigger","valueFormatter","tooltipFormatter","show","xAxes","axisLabel","chartLabel","showMaxLabel","axisLabelFormatter","isGroupedByDate","showTimeInTooltip","s","adjustedSeries","VitalInfo","hideBar","hideStates","hideVitalPercentNames","hideVitalThresholds","hideDurationDetail","vitals","Array","isArray","contentCommonProps","showBar","showStates","showVitalPercentNames","showVitalThresholds","showDurationDetail"],"sourceRoot":""}