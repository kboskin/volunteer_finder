{"version":3,"file":"chunks/app_components_events_eventVitals_tsx-app_components_tagsTable_tsx-app_utils_performance_quic-9d5c2a.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/measurements/index.tsx","webpack:///./app/components/events/eventVitals.tsx","webpack:///./app/components/keyValueTable.tsx","webpack:///./app/components/quickTrace/index.tsx","webpack:///./app/components/tagsTable.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/docs.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/utils/performance/quickTrace/traceLiteQuery.tsx","webpack:///./app/utils/performance/quickTrace/quickTraceQuery.tsx","webpack:///./app/utils/performance/quickTrace/traceFullQuery.tsx","webpack:///./app/utils/performance/quickTrace/traceMetaQuery.tsx","webpack:///./app/views/performance/transactionDetails/quickTraceMeta.tsx","webpack:///./app/views/performance/transactionDetails/eventMetas.tsx","webpack:///./app/views/performance/transactionDetails/styles.tsx"],"sourcesContent":["import {getDuration} from 'sentry/utils/formatters';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport function formattedValue(record: Vital | undefined, value: number): string {\n  if (record && record.type === 'duration') {\n    return getDuration(value / 1000, 3);\n  }\n  if (record && record.type === 'integer') {\n    return value.toFixed(0);\n  }\n\n  return value.toFixed(3);\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport {Panel} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconFire, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Event} from 'sentry/types/event';\nimport {defined} from 'sentry/utils';\nimport {formattedValue} from 'sentry/utils/measurements/index';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\nimport {IconSize} from 'sentry/utils/theme';\n\nfunction isOutdatedSdk(event: Event): boolean {\n  if (!event.sdk?.version) {\n    return false;\n  }\n\n  const sdkVersion = event.sdk.version;\n  return (\n    sdkVersion.startsWith('5.26.') ||\n    sdkVersion.startsWith('5.27.0') ||\n    sdkVersion.startsWith('5.27.1') ||\n    sdkVersion.startsWith('5.27.2')\n  );\n}\n\ntype Props = {\n  event: Event;\n};\n\nexport default function EventVitals({event}: Props) {\n  return (\n    <Fragment>\n      <WebVitals event={event} />\n      <MobileVitals event={event} />\n    </Fragment>\n  );\n}\n\nfunction WebVitals({event}: Props) {\n  const measurementNames = Object.keys(event.measurements ?? {})\n    .filter(name => Boolean(WEB_VITAL_DETAILS[`measurements.${name}`]))\n    .sort();\n\n  if (measurementNames.length === 0) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <SectionHeading>\n        {t('Web Vitals')}\n        {isOutdatedSdk(event) && (\n          <WarningIconContainer size=\"sm\">\n            <Tooltip\n              title={t(\n                'These vitals were collected using an outdated SDK version and may not be accurate. To ensure accurate web vitals in new transaction events, please update your SDK to the latest version.'\n              )}\n              position=\"top\"\n              containerDisplayMode=\"inline-block\"\n            >\n              <IconWarning size=\"sm\" />\n            </Tooltip>\n          </WarningIconContainer>\n        )}\n      </SectionHeading>\n      <Measurements>\n        {measurementNames.map(name => {\n          // Measurements are referred to by their full name `measurements.<name>`\n          // here but are stored using their abbreviated name `<name>`. Make sure\n          // to convert it appropriately.\n          const measurement = `measurements.${name}`;\n          const vital = WEB_VITAL_DETAILS[measurement];\n\n          return <EventVital key={name} event={event} name={name} vital={vital} />;\n        })}\n      </Measurements>\n    </Container>\n  );\n}\n\nfunction MobileVitals({event}: Props) {\n  const measurementNames = Object.keys(event.measurements ?? {})\n    .filter(name => Boolean(MOBILE_VITAL_DETAILS[`measurements.${name}`]))\n    .sort();\n\n  if (measurementNames.length === 0) {\n    return null;\n  }\n\n  return (\n    <Container>\n      <SectionHeading>{t('Mobile Vitals')}</SectionHeading>\n      <Measurements>\n        {measurementNames.map(name => {\n          // Measurements are referred to by their full name `measurements.<name>`\n          // here but are stored using their abbreviated name `<name>`. Make sure\n          // to convert it appropriately.\n          const measurement = `measurements.${name}`;\n          const vital = MOBILE_VITAL_DETAILS[measurement];\n\n          return <EventVital key={name} event={event} name={name} vital={vital} />;\n        })}\n      </Measurements>\n    </Container>\n  );\n}\n\ntype EventVitalProps = Props & {\n  name: string;\n  vital?: Vital;\n};\n\nfunction EventVital({event, name, vital}: EventVitalProps) {\n  const value = event.measurements?.[name].value ?? null;\n  if (value === null || !vital) {\n    return null;\n  }\n\n  const failedThreshold = defined(vital.poorThreshold) && value >= vital.poorThreshold;\n\n  const currentValue = formattedValue(vital, value);\n  const thresholdValue = formattedValue(vital, vital?.poorThreshold ?? 0);\n\n  return (\n    <EventVitalContainer>\n      <StyledPanel failedThreshold={failedThreshold}>\n        <Name>{vital.name ?? name}</Name>\n        <ValueRow>\n          {failedThreshold ? (\n            <FireIconContainer size=\"sm\">\n              <Tooltip\n                title={t('Fails threshold at %s.', thresholdValue)}\n                position=\"top\"\n                containerDisplayMode=\"inline-block\"\n              >\n                <IconFire size=\"sm\" />\n              </Tooltip>\n            </FireIconContainer>\n          ) : null}\n          <Value failedThreshold={failedThreshold}>{currentValue}</Value>\n        </ValueRow>\n      </StyledPanel>\n    </EventVitalContainer>\n  );\n}\n\nconst Measurements = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n`;\n\nconst Container = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanel = styled(Panel)<{failedThreshold: boolean}>`\n  padding: ${space(1)} ${space(1.5)};\n  margin-bottom: ${space(1)};\n  ${p => p.failedThreshold && `border: 1px solid ${p.theme.red300};`}\n`;\n\nconst Name = styled('div')``;\n\nconst ValueRow = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst WarningIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-left: ${space(0.5)};\n  color: ${p => p.theme.red300};\n`;\n\nconst FireIconContainer = styled('span')<{size: IconSize | string}>`\n  display: inline-block;\n  height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  line-height: ${p => p.theme.iconSizes[p.size] ?? p.size};\n  margin-right: ${space(0.5)};\n  color: ${p => p.theme.red300};\n`;\n\nconst Value = styled('span')<{failedThreshold: boolean}>`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  ${p => p.failedThreshold && `color: ${p.theme.red300};`}\n`;\n\nexport const EventVitalContainer = styled('div')``;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","import {Component, Fragment} from 'react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport {\n  ErrorDestination,\n  generateSingleErrorTarget,\n  generateSingleTransactionTarget,\n  generateTraceTarget,\n  isQuickTraceEvent,\n  TransactionDestination,\n} from 'sentry/components/quickTrace/utils';\nimport Tooltip from 'sentry/components/tooltip';\nimport {backend, frontend, mobile, serverless} from 'sentry/data/platformCategories';\nimport {IconFire} from 'sentry/icons';\nimport {t, tct, tn} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {getDocsPlatform} from 'sentry/utils/docs';\nimport {getDuration} from 'sentry/utils/formatters';\nimport localStorage from 'sentry/utils/localStorage';\nimport {\n  QuickTrace as QuickTraceType,\n  QuickTraceEvent,\n  TraceError,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {parseQuickTrace} from 'sentry/utils/performance/quickTrace/utils';\nimport Projects from 'sentry/utils/projects';\nimport {Theme} from 'sentry/utils/theme';\n\nconst FRONTEND_PLATFORMS: string[] = [...frontend, ...mobile];\nconst BACKEND_PLATFORMS: string[] = [...backend, ...serverless];\n\nimport {\n  DropdownContainer,\n  DropdownItem,\n  DropdownItemSubContainer,\n  DropdownMenuHeader,\n  ErrorNodeContent,\n  EventNode,\n  ExternalDropdownLink,\n  QuickTraceContainer,\n  QuickTraceValue,\n  SectionSubtext,\n  SingleEventHoverText,\n  TraceConnector,\n} from './styles';\n\nconst TOOLTIP_PREFIX = {\n  root: 'root',\n  ancestors: 'ancestor',\n  parent: 'parent',\n  current: '',\n  children: 'child',\n  descendants: 'descendant',\n};\n\ntype QuickTraceProps = Pick<\n  EventNodeSelectorProps,\n  'anchor' | 'errorDest' | 'transactionDest'\n> & {\n  event: Event;\n  location: Location;\n  organization: OrganizationSummary;\n  quickTrace: QuickTraceType;\n};\n\nexport default function QuickTrace({\n  event,\n  quickTrace,\n  location,\n  organization,\n  anchor,\n  errorDest,\n  transactionDest,\n}: QuickTraceProps) {\n  let parsedQuickTrace;\n  try {\n    parsedQuickTrace = parseQuickTrace(quickTrace, event, organization);\n  } catch (error) {\n    return <Fragment>{'\\u2014'}</Fragment>;\n  }\n\n  const traceLength = quickTrace.trace && quickTrace.trace.length;\n  const {root, ancestors, parent, children, descendants, current} = parsedQuickTrace;\n\n  const nodes: React.ReactNode[] = [];\n\n  if (root) {\n    nodes.push(\n      <EventNodeSelector\n        key=\"root-node\"\n        location={location}\n        organization={organization}\n        events={[root]}\n        currentEvent={event}\n        text={t('Root')}\n        anchor={anchor}\n        nodeKey=\"root\"\n        errorDest={errorDest}\n        transactionDest={transactionDest}\n      />\n    );\n    nodes.push(<TraceConnector key=\"root-connector\" />);\n  }\n\n  if (ancestors?.length) {\n    nodes.push(\n      <EventNodeSelector\n        key=\"ancestors-node\"\n        location={location}\n        organization={organization}\n        events={ancestors}\n        currentEvent={event}\n        text={tn('%s Ancestor', '%s Ancestors', ancestors.length)}\n        anchor={anchor}\n        nodeKey=\"ancestors\"\n        errorDest={errorDest}\n        transactionDest={transactionDest}\n      />\n    );\n    nodes.push(<TraceConnector key=\"ancestors-connector\" />);\n  }\n\n  if (parent) {\n    nodes.push(\n      <EventNodeSelector\n        key=\"parent-node\"\n        location={location}\n        organization={organization}\n        events={[parent]}\n        currentEvent={event}\n        text={t('Parent')}\n        anchor={anchor}\n        nodeKey=\"parent\"\n        errorDest={errorDest}\n        transactionDest={transactionDest}\n      />\n    );\n    nodes.push(<TraceConnector key=\"parent-connector\" />);\n  }\n\n  const currentNode = (\n    <EventNodeSelector\n      key=\"current-node\"\n      location={location}\n      organization={organization}\n      text={t('This Event')}\n      events={[current]}\n      currentEvent={event}\n      anchor={anchor}\n      nodeKey=\"current\"\n      errorDest={errorDest}\n      transactionDest={transactionDest}\n    />\n  );\n\n  if (traceLength === 1) {\n    nodes.push(\n      <Projects\n        key=\"missing-services\"\n        orgId={organization.slug}\n        slugs={[current.project_slug]}\n      >\n        {({projects}) => {\n          const project = projects.find(p => p.slug === current.project_slug);\n          if (project?.platform) {\n            if (BACKEND_PLATFORMS.includes(project.platform as string)) {\n              return (\n                <Fragment>\n                  <MissingServiceNode\n                    anchor={anchor}\n                    organization={organization}\n                    platform={project.platform}\n                    connectorSide=\"right\"\n                  />\n                  {currentNode}\n                </Fragment>\n              );\n            }\n            if (FRONTEND_PLATFORMS.includes(project.platform as string)) {\n              return (\n                <Fragment>\n                  {currentNode}\n                  <MissingServiceNode\n                    anchor={anchor}\n                    organization={organization}\n                    platform={project.platform}\n                    connectorSide=\"left\"\n                  />\n                </Fragment>\n              );\n            }\n          }\n          return currentNode;\n        }}\n      </Projects>\n    );\n  } else {\n    nodes.push(currentNode);\n  }\n\n  if (children.length) {\n    nodes.push(<TraceConnector key=\"children-connector\" />);\n    nodes.push(\n      <EventNodeSelector\n        key=\"children-node\"\n        location={location}\n        organization={organization}\n        events={children}\n        currentEvent={event}\n        text={tn('%s Child', '%s Children', children.length)}\n        anchor={anchor}\n        nodeKey=\"children\"\n        errorDest={errorDest}\n        transactionDest={transactionDest}\n      />\n    );\n  }\n\n  if (descendants?.length) {\n    nodes.push(<TraceConnector key=\"descendants-connector\" />);\n    nodes.push(\n      <EventNodeSelector\n        key=\"descendants-node\"\n        location={location}\n        organization={organization}\n        events={descendants}\n        currentEvent={event}\n        text={tn('%s Descendant', '%s Descendants', descendants.length)}\n        anchor={anchor}\n        nodeKey=\"descendants\"\n        errorDest={errorDest}\n        transactionDest={transactionDest}\n      />\n    );\n  }\n\n  return <QuickTraceContainer>{nodes}</QuickTraceContainer>;\n}\n\nfunction handleNode(key: string, organization: OrganizationSummary) {\n  trackAnalyticsEvent({\n    eventKey: 'quick_trace.node.clicked',\n    eventName: 'Quick Trace: Node clicked',\n    organization_id: parseInt(organization.id, 10),\n    node_key: key,\n  });\n}\n\nfunction handleDropdownItem(\n  key: string,\n  organization: OrganizationSummary,\n  extra: boolean\n) {\n  trackAnalyticsEvent({\n    eventKey: 'quick_trace.dropdown.clicked' + (extra ? '_extra' : ''),\n    eventName: 'Quick Trace: Dropdown clicked',\n    organization_id: parseInt(organization.id, 10),\n    node_key: key,\n  });\n}\n\ntype EventNodeSelectorProps = {\n  anchor: 'left' | 'right';\n  currentEvent: Event;\n  errorDest: ErrorDestination;\n  events: QuickTraceEvent[];\n  location: Location;\n  nodeKey: keyof typeof TOOLTIP_PREFIX;\n  organization: OrganizationSummary;\n  text: React.ReactNode;\n  transactionDest: TransactionDestination;\n  numEvents?: number;\n};\n\nfunction EventNodeSelector({\n  location,\n  organization,\n  events = [],\n  text,\n  currentEvent,\n  nodeKey,\n  anchor,\n  errorDest,\n  transactionDest,\n  numEvents = 5,\n}: EventNodeSelectorProps) {\n  let errors: TraceError[] = events.flatMap(event => event.errors ?? []);\n\n  let type: keyof Theme['tag'] = nodeKey === 'current' ? 'black' : 'white';\n\n  const hasErrors = errors.length > 0;\n\n  if (hasErrors) {\n    type = nodeKey === 'current' ? 'error' : 'warning';\n    text = (\n      <ErrorNodeContent>\n        <IconFire size=\"xs\" />\n        {text}\n      </ErrorNodeContent>\n    );\n  }\n\n  // make sure to exclude the current event from the dropdown\n  events = events.filter(event => event.event_id !== currentEvent.id);\n  errors = errors.filter(error => error.event_id !== currentEvent.id);\n\n  if (events.length + errors.length === 0) {\n    return <EventNode type={type}>{text}</EventNode>;\n  }\n  if (events.length + errors.length === 1) {\n    /**\n     * When there is only 1 event, clicking the node should take the user directly to\n     * the event without additional steps.\n     */\n    const hoverText = errors.length ? (\n      t('View the error for this Transaction')\n    ) : (\n      <SingleEventHoverText event={events[0]} />\n    );\n    const target = errors.length\n      ? generateSingleErrorTarget(errors[0], organization, location, errorDest)\n      : generateSingleTransactionTarget(\n          events[0],\n          organization,\n          location,\n          transactionDest\n        );\n    return (\n      <StyledEventNode\n        text={text}\n        hoverText={hoverText}\n        to={target}\n        onClick={() => handleNode(nodeKey, organization)}\n        type={type}\n        shouldOffset={hasErrors}\n      />\n    );\n  }\n  /**\n   * When there is more than 1 event, clicking the node should expand a dropdown to\n   * allow the user to select which event to go to.\n   */\n  const hoverText = tct('View [eventPrefix] [eventType]', {\n    eventPrefix: TOOLTIP_PREFIX[nodeKey],\n    eventType:\n      errors.length && events.length\n        ? 'events'\n        : events.length\n        ? 'transactions'\n        : 'errors',\n  });\n  return (\n    <DropdownContainer>\n      <DropdownLink\n        caret={false}\n        title={\n          <StyledEventNode\n            text={text}\n            hoverText={hoverText}\n            type={type}\n            shouldOffset={hasErrors}\n          />\n        }\n        anchorRight={anchor === 'right'}\n      >\n        {errors.length > 0 && (\n          <DropdownMenuHeader first>\n            {tn('Related Error', 'Related Errors', errors.length)}\n          </DropdownMenuHeader>\n        )}\n        {errors.slice(0, numEvents).map(error => {\n          const target = generateSingleErrorTarget(\n            error,\n            organization,\n            location,\n            errorDest\n          );\n          return (\n            <DropdownNodeItem\n              key={error.event_id}\n              event={error}\n              to={target}\n              allowDefaultEvent\n              onSelect={() => handleDropdownItem(nodeKey, organization, false)}\n              organization={organization}\n              anchor={anchor}\n            />\n          );\n        })}\n        {events.length > 0 && (\n          <DropdownMenuHeader first={errors.length === 0}>\n            {tn('Transaction', 'Transactions', events.length)}\n          </DropdownMenuHeader>\n        )}\n        {events.slice(0, numEvents).map(event => {\n          const target = generateSingleTransactionTarget(\n            event,\n            organization,\n            location,\n            transactionDest\n          );\n          return (\n            <DropdownNodeItem\n              key={event.event_id}\n              event={event}\n              to={target}\n              onSelect={() => handleDropdownItem(nodeKey, organization, false)}\n              allowDefaultEvent\n              organization={organization}\n              subtext={getDuration(\n                event['transaction.duration'] / 1000,\n                event['transaction.duration'] < 1000 ? 0 : 2,\n                true\n              )}\n              anchor={anchor}\n            />\n          );\n        })}\n        {(errors.length > numEvents || events.length > numEvents) && (\n          <DropdownItem\n            to={generateTraceTarget(currentEvent, organization)}\n            allowDefaultEvent\n            onSelect={() => handleDropdownItem(nodeKey, organization, true)}\n          >\n            {t('View all events')}\n          </DropdownItem>\n        )}\n      </DropdownLink>\n    </DropdownContainer>\n  );\n}\n\ntype DropdownNodeProps = {\n  anchor: 'left' | 'right';\n  event: TraceError | QuickTraceEvent;\n  organization: OrganizationSummary;\n  allowDefaultEvent?: boolean;\n  onSelect?: (eventKey: any) => void;\n  subtext?: string;\n  to?: LocationDescriptor;\n};\n\nfunction DropdownNodeItem({\n  event,\n  onSelect,\n  to,\n  allowDefaultEvent,\n  organization,\n  subtext,\n  anchor,\n}: DropdownNodeProps) {\n  return (\n    <DropdownItem to={to} onSelect={onSelect} allowDefaultEvent={allowDefaultEvent}>\n      <DropdownItemSubContainer>\n        <Projects orgId={organization.slug} slugs={[event.project_slug]}>\n          {({projects}) => {\n            const project = projects.find(p => p.slug === event.project_slug);\n            return (\n              <ProjectBadge\n                disableLink\n                hideName\n                project={project ? project : {slug: event.project_slug}}\n                avatarSize={16}\n              />\n            );\n          }}\n        </Projects>\n        {isQuickTraceEvent(event) ? (\n          <QuickTraceValue\n            value={event.transaction}\n            // expand in the opposite direction of the anchor\n            expandDirection={anchor === 'left' ? 'right' : 'left'}\n            maxLength={35}\n            leftTrim\n            trimRegex={/\\.|\\//g}\n          />\n        ) : (\n          <QuickTraceValue\n            value={event.title}\n            // expand in the opposite direction of the anchor\n            expandDirection={anchor === 'left' ? 'right' : 'left'}\n            maxLength={45}\n          />\n        )}\n      </DropdownItemSubContainer>\n      {subtext && <SectionSubtext>{subtext}</SectionSubtext>}\n    </DropdownItem>\n  );\n}\n\ntype EventNodeProps = {\n  hoverText: React.ReactNode;\n  text: React.ReactNode;\n  onClick?: (eventKey: any) => void;\n  shouldOffset?: boolean;\n  to?: LocationDescriptor;\n  type?: keyof Theme['tag'];\n};\n\nfunction StyledEventNode({\n  text,\n  hoverText,\n  to,\n  onClick,\n  type = 'white',\n  shouldOffset = false,\n}: EventNodeProps) {\n  return (\n    <Tooltip position=\"top\" containerDisplayMode=\"inline-flex\" title={hoverText}>\n      <EventNode\n        type={type}\n        icon={null}\n        to={to}\n        onClick={onClick}\n        shouldOffset={shouldOffset}\n      >\n        {text}\n      </EventNode>\n    </Tooltip>\n  );\n}\n\ntype MissingServiceProps = Pick<QuickTraceProps, 'anchor' | 'organization'> & {\n  connectorSide: 'left' | 'right';\n  platform: string;\n};\ntype MissingServiceState = {\n  hideMissing: boolean;\n};\n\nconst HIDE_MISSING_SERVICE_KEY = 'quick-trace:hide-missing-services';\n// 30 days\nconst HIDE_MISSING_EXPIRES = 1000 * 60 * 60 * 24 * 30;\n\nfunction readHideMissingServiceState() {\n  const value = localStorage.getItem(HIDE_MISSING_SERVICE_KEY);\n  if (value === null) {\n    return false;\n  }\n  const expires = parseInt(value, 10);\n  const now = new Date().getTime();\n  return expires > now;\n}\n\nclass MissingServiceNode extends Component<MissingServiceProps, MissingServiceState> {\n  state: MissingServiceState = {\n    hideMissing: readHideMissingServiceState(),\n  };\n\n  dismissMissingService = () => {\n    const {organization, platform} = this.props;\n    const now = new Date().getTime();\n    localStorage.setItem(\n      HIDE_MISSING_SERVICE_KEY,\n      (now + HIDE_MISSING_EXPIRES).toString()\n    );\n    this.setState({hideMissing: true});\n    trackAnalyticsEvent({\n      eventKey: 'quick_trace.missing_service.dismiss',\n      eventName: 'Quick Trace: Missing Service Dismissed',\n      organization_id: parseInt(organization.id, 10),\n      platform,\n    });\n  };\n\n  trackExternalLink = () => {\n    const {organization, platform} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'quick_trace.missing_service.docs',\n      eventName: 'Quick Trace: Missing Service Clicked',\n      organization_id: parseInt(organization.id, 10),\n      platform,\n    });\n  };\n\n  render() {\n    const {hideMissing} = this.state;\n    const {anchor, connectorSide, platform} = this.props;\n    if (hideMissing) {\n      return null;\n    }\n\n    const docPlatform = getDocsPlatform(platform, true);\n    const docsHref =\n      docPlatform === null || docPlatform === 'javascript'\n        ? 'https://docs.sentry.io/platforms/javascript/performance/connect-services/'\n        : `https://docs.sentry.io/platforms/${docPlatform}/performance/connecting-services`;\n    return (\n      <Fragment>\n        {connectorSide === 'left' && <TraceConnector />}\n        <DropdownContainer>\n          <DropdownLink\n            caret={false}\n            title={\n              <StyledEventNode\n                type=\"white\"\n                hoverText={t('No services connected')}\n                text=\"???\"\n              />\n            }\n            anchorRight={anchor === 'right'}\n          >\n            <DropdownItem width=\"small\">\n              <ExternalDropdownLink href={docsHref} onClick={this.trackExternalLink}>\n                {t('Connect to a service')}\n              </ExternalDropdownLink>\n            </DropdownItem>\n            <DropdownItem onSelect={this.dismissMissingService} width=\"small\">\n              {t('Dismiss')}\n            </DropdownItem>\n          </DropdownLink>\n        </DropdownContainer>\n        {connectorSide === 'right' && <TraceConnector />}\n      </Fragment>\n    );\n  }\n}\n","import styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\nimport capitalize from 'lodash/capitalize';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport {getMeta, withMeta} from 'sentry/components/events/meta/metaProxy';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport Version from 'sentry/components/version';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {MetaError} from 'sentry/types';\nimport {Event, EventTag} from 'sentry/types/event';\n\ntype Props = {\n  event: Event;\n  generateUrl: (tag: EventTag) => LocationDescriptor;\n  query: string;\n  title?: React.ReactNode;\n};\n\nconst TagsTable = ({event, query, generateUrl, title = t('Tag Details')}: Props) => {\n  const eventWithMeta = withMeta(event) as Event;\n  const tags = eventWithMeta.tags;\n\n  const formatErrorKind = (kind: string) => {\n    return capitalize(kind.replace(/_/g, ' '));\n  };\n\n  const getErrorMessage = (error: MetaError) => {\n    if (Array.isArray(error)) {\n      if (error[1]?.reason) {\n        return formatErrorKind(error[1].reason);\n      }\n      return formatErrorKind(error[0]);\n    }\n    return formatErrorKind(error);\n  };\n\n  const getTooltipTitle = (errors: Array<MetaError>) => {\n    return <TooltipTitle>{getErrorMessage(errors[0])}</TooltipTitle>;\n  };\n\n  return (\n    <StyledTagsTable>\n      <SectionHeading>{title}</SectionHeading>\n      <KeyValueTable>\n        {tags.map(tag => {\n          const tagInQuery = query.includes(`${tag.key}:`);\n          const target = tagInQuery ? undefined : generateUrl(tag);\n          const keyMetaData = getMeta(tag, 'key');\n          const valueMetaData = getMeta(tag, 'value');\n\n          const renderTagValue = () => {\n            switch (tag.key) {\n              case 'release':\n                return <Version version={tag.value} anchor={false} withPackage />;\n              default:\n                return tag.value;\n            }\n          };\n          return (\n            <KeyValueTableRow\n              key={tag.key}\n              keyName={\n                keyMetaData?.err?.length ? (\n                  <Tooltip title={getTooltipTitle(keyMetaData.err)}>\n                    <i>{`<${t('invalid')}>`}</i>\n                  </Tooltip>\n                ) : (\n                  <StyledTooltip title={tag.key}>{tag.key}</StyledTooltip>\n                )\n              }\n              value={\n                valueMetaData?.err?.length ? (\n                  <Tooltip title={getTooltipTitle(valueMetaData.err)}>\n                    <i>{`<${t('invalid')}>`}</i>\n                  </Tooltip>\n                ) : keyMetaData?.err?.length ? (\n                  <span>{renderTagValue()}</span>\n                ) : tagInQuery ? (\n                  <Tooltip title={t('This tag is in the current filter conditions')}>\n                    <span>{renderTagValue()}</span>\n                  </Tooltip>\n                ) : (\n                  <StyledTooltip title={renderTagValue()}>\n                    <Link to={target || ''}>{renderTagValue()}</Link>\n                  </StyledTooltip>\n                )\n              }\n            />\n          );\n        })}\n      </KeyValueTable>\n    </StyledTagsTable>\n  );\n};\n\nexport default TagsTable;\n\nconst StyledTooltip = styled(Tooltip)`\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledTagsTable = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst TooltipTitle = styled('div')`\n  text-align: left;\n`;\n","import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nimport {decodeScalar} from '../queryString';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer, location} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(props.location);\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    if (['events', 'eventsv2'].includes(props.route)) {\n      const queryUserModified = decodeScalar(location.query?.userModified);\n      if (queryUserModified !== undefined) {\n        payload.user_modified = queryUserModified;\n      }\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {api, beforeFetch, afterFetch, didFetch, eventView, orgSlug, route, setError} =\n      this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload);\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams\n): Promise<[T, string | undefined, ResponseMeta | undefined]> {\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import {AvatarProject} from 'sentry/types';\n\nconst platforms = [\n  'dotnet',\n  'android',\n  'apple',\n  'dart',\n  'elixir',\n  'flutter',\n  'go',\n  'java',\n  'javascript',\n  'native',\n  'node',\n  'perl',\n  'php',\n  'python',\n  'react-native',\n  'ruby',\n  'rust',\n  'unity',\n] as const;\n\nexport type DocPlatform = typeof platforms[number];\n\nconst performancePlatforms: DocPlatform[] = [\n  'dotnet',\n  'android',\n  'apple',\n  'go',\n  'java',\n  'javascript',\n  'node',\n  'php',\n  'python',\n  'react-native',\n  'ruby',\n];\n\nfunction validDocPlatform(platform: any): platform is DocPlatform {\n  return platforms.includes(platform);\n}\n\nexport function getDocsPlatform(\n  platform: string,\n  performanceOnly: boolean\n): DocPlatform | null {\n  // react-native is the only platform that has a dash, and supports performance so we can skip that check\n  if (platform === 'react-native') {\n    return 'react-native';\n  }\n  const index = platform.indexOf('-');\n  const prefix = index >= 0 ? platform.substring(0, index) : platform;\n  if (validDocPlatform(prefix)) {\n    const validPerformancePrefix = performancePlatforms.includes(prefix);\n    if ((performanceOnly && validPerformancePrefix) || !performanceOnly) {\n      return prefix;\n    }\n  }\n  // can't find a matching docs platform\n  return null;\n}\n\nexport function getConfigureTracingDocsLink(\n  project: AvatarProject | undefined\n): string | null {\n  const platform = project?.platform ?? null;\n  const docsPlatform = platform ? getDocsPlatform(platform, true) : null;\n  return docsPlatform === null\n    ? null // this platform does not support performance\n    : `https://docs.sentry.io/platforms/${docsPlatform}/performance/`;\n}\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  PartialQuickTrace,\n  TraceLite,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\nimport withApi from 'sentry/utils/withApi';\n\ntype AdditionalQueryProps = {\n  eventId: string;\n};\n\ntype TraceLiteQueryChildrenProps = BaseTraceChildrenProps &\n  Omit<PartialQuickTrace, 'trace'> & {\n    trace: TraceLite | null;\n  };\n\ntype QueryProps = Omit<TraceRequestProps, 'eventView'> &\n  AdditionalQueryProps & {\n    children: (props: TraceLiteQueryChildrenProps) => React.ReactNode;\n  };\n\nfunction getTraceLiteRequestPayload({\n  eventId,\n  ...props\n}: DiscoverQueryProps & AdditionalQueryProps) {\n  const additionalApiPayload = getTraceRequestPayload(props);\n  return Object.assign({event_id: eventId}, additionalApiPayload);\n}\n\nfunction EmptyTrace({children}: Pick<QueryProps, 'children'>) {\n  return (\n    <Fragment>\n      {children({\n        isLoading: false,\n        error: null,\n        trace: null,\n        type: 'partial',\n      })}\n    </Fragment>\n  );\n}\n\nfunction TraceLiteQuery({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps) {\n  if (!traceId) {\n    return <EmptyTrace>{children}</EmptyTrace>;\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<TraceLite, AdditionalQueryProps>\n      route={`events-trace-light/${traceId}`}\n      getRequestPayload={getTraceLiteRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) =>\n        children({\n          // This is using '||` instead of '??` here because\n          // the client returns a empty string when the response\n          // is 204. And we want the empty string, undefined and\n          // null to be converted to null.\n          trace: tableData || null,\n          type: 'partial',\n          ...rest,\n        })\n      }\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(TraceLiteQuery);\n","import {Fragment} from 'react';\n\nimport {Event} from 'sentry/types/event';\nimport {DiscoverQueryProps} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {TraceFullQuery} from 'sentry/utils/performance/quickTrace/traceFullQuery';\nimport TraceLiteQuery from 'sentry/utils/performance/quickTrace/traceLiteQuery';\nimport {QuickTraceQueryChildrenProps} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  flattenRelevantPaths,\n  getTraceTimeRangeFromEvent,\n  isCurrentEvent,\n} from 'sentry/utils/performance/quickTrace/utils';\n\ntype QueryProps = Omit<DiscoverQueryProps, 'api' | 'eventView'> & {\n  children: (props: QuickTraceQueryChildrenProps) => React.ReactNode;\n  event: Event;\n};\n\nexport default function QuickTraceQuery({children, event, ...props}: QueryProps) {\n  const traceId = event.contexts?.trace?.trace_id;\n\n  if (!traceId) {\n    return (\n      <Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          trace: [],\n          type: 'empty',\n          currentEvent: null,\n        })}\n      </Fragment>\n    );\n  }\n\n  const {start, end} = getTraceTimeRangeFromEvent(event);\n\n  return (\n    <TraceLiteQuery\n      eventId={event.id}\n      traceId={traceId}\n      start={start}\n      end={end}\n      {...props}\n    >\n      {traceLiteResults => (\n        <TraceFullQuery\n          eventId={event.id}\n          traceId={traceId}\n          start={start}\n          end={end}\n          {...props}\n        >\n          {traceFullResults => {\n            if (\n              !traceFullResults.isLoading &&\n              traceFullResults.error === null &&\n              traceFullResults.traces !== null\n            ) {\n              for (const subtrace of traceFullResults.traces) {\n                try {\n                  const trace = flattenRelevantPaths(event, subtrace);\n                  return children({\n                    ...traceFullResults,\n                    trace,\n                    currentEvent: trace.find(e => isCurrentEvent(e, event)) ?? null,\n                  });\n                } catch {\n                  // let this fall through and check the next subtrace\n                  // or use the trace lite results\n                }\n              }\n            }\n\n            if (\n              !traceLiteResults.isLoading &&\n              traceLiteResults.error === null &&\n              traceLiteResults.trace !== null\n            ) {\n              const {trace} = traceLiteResults;\n              return children({\n                ...traceLiteResults,\n                currentEvent: trace.find(e => isCurrentEvent(e, event)) ?? null,\n              });\n            }\n\n            return children({\n              // only use the light results loading state if it didn't error\n              // if it did, we should rely on the full results\n              isLoading: traceLiteResults.error\n                ? traceFullResults.isLoading\n                : traceLiteResults.isLoading || traceFullResults.isLoading,\n              // swallow any errors from the light results because we\n              // should rely on the full results in this situations\n              error: traceFullResults.error,\n              trace: [],\n              // if we reach this point but there were some traces in the full results,\n              // that means there were other transactions in the trace, but the current\n              // event could not be found\n              type: traceFullResults.traces?.length ? 'missing' : 'empty',\n              currentEvent: null,\n            });\n          }}\n        </TraceFullQuery>\n      )}\n    </TraceLiteQuery>\n  );\n}\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  FullQuickTrace,\n  TraceFull,\n  TraceFullDetailed,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\nimport withApi from 'sentry/utils/withApi';\n\ntype AdditionalQueryProps = {\n  detailed?: boolean;\n  eventId?: string;\n};\n\ntype TraceFullQueryChildrenProps<T> = BaseTraceChildrenProps &\n  Omit<FullQuickTrace, 'trace'> & {\n    /**\n     * The `event-trace` endpoint returns a full trace with the parent-child\n     * relationships. It can be flattened into a `QuickTraceEvent` if necessary.\n     */\n    traces: T | null;\n  };\n\ntype QueryProps<T> = Omit<TraceRequestProps, 'eventView'> &\n  AdditionalQueryProps & {\n    children: (props: TraceFullQueryChildrenProps<T>) => React.ReactNode;\n  };\n\nfunction getTraceFullRequestPayload({\n  detailed,\n  eventId,\n  ...props\n}: DiscoverQueryProps & AdditionalQueryProps) {\n  const additionalApiPayload: any = getTraceRequestPayload(props);\n  additionalApiPayload.detailed = detailed ? '1' : '0';\n  if (eventId) {\n    additionalApiPayload.event_id = eventId;\n  }\n  return additionalApiPayload;\n}\n\nfunction EmptyTrace<T>({children}: Pick<QueryProps<T>, 'children'>) {\n  return (\n    <Fragment>\n      {children({\n        isLoading: false,\n        error: null,\n        traces: null,\n        type: 'full',\n      })}\n    </Fragment>\n  );\n}\n\nfunction GenericTraceFullQuery<T>({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps<T>) {\n  if (!traceId) {\n    return <EmptyTrace<T>>{children}</EmptyTrace>;\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<T, AdditionalQueryProps>\n      route={`events-trace/${traceId}`}\n      getRequestPayload={getTraceFullRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) =>\n        children({\n          // This is using '||` instead of '??` here because\n          // the client returns a empty string when the response\n          // is 204. And we want the empty string, undefined and\n          // null to be converted to null.\n          traces: tableData || null,\n          type: 'full',\n          ...rest,\n        })\n      }\n    </GenericDiscoverQuery>\n  );\n}\n\nexport const TraceFullQuery = withApi(\n  (props: Omit<QueryProps<TraceFull[]>, 'detailed'>) => (\n    <GenericTraceFullQuery<TraceFull[]> {...props} detailed={false} />\n  )\n);\n\nexport const TraceFullDetailedQuery = withApi(\n  (props: Omit<QueryProps<TraceFullDetailed[]>, 'detailed'>) => (\n    <GenericTraceFullQuery<TraceFullDetailed[]> {...props} detailed />\n  )\n);\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  TraceMeta,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\nimport withApi from 'sentry/utils/withApi';\n\nexport type TraceMetaQueryChildrenProps = BaseTraceChildrenProps & {\n  meta: TraceMeta | null;\n};\n\ntype QueryProps = Omit<TraceRequestProps, 'eventView'> & {\n  children: (props: TraceMetaQueryChildrenProps) => React.ReactNode;\n};\n\nfunction TraceMetaQuery({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps) {\n  if (!traceId) {\n    return (\n      <Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          meta: null,\n        })}\n      </Fragment>\n    );\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<TraceMeta, {}>\n      route={`events-trace-meta/${traceId}`}\n      getRequestPayload={getTraceRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          meta: tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(TraceMetaQuery);\n","import {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuickTrace from 'sentry/components/quickTrace';\nimport {generateTraceTarget} from 'sentry/components/quickTrace/utils';\nimport {t, tct, tn} from 'sentry/locale';\nimport {AvatarProject, OrganizationSummary} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {getConfigureTracingDocsLink} from 'sentry/utils/docs';\nimport {getShortEventId} from 'sentry/utils/events';\nimport {\n  QuickTraceQueryChildrenProps,\n  TraceMeta,\n} from 'sentry/utils/performance/quickTrace/types';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {MetaData} from './styles';\n\ntype Props = Pick<\n  React.ComponentProps<typeof QuickTrace>,\n  'errorDest' | 'transactionDest'\n> & {\n  anchor: 'left' | 'right';\n  event: Event;\n  location: Location;\n  quickTrace: QuickTraceQueryChildrenProps | null;\n  traceMeta: TraceMeta | null;\n  project?: AvatarProject;\n};\n\nfunction handleTraceLink(organization: OrganizationSummary) {\n  trackAnalyticsEvent({\n    eventKey: 'quick_trace.trace_id.clicked',\n    eventName: 'Quick Trace: Trace ID clicked',\n    organization_id: parseInt(organization.id, 10),\n    source: 'events',\n  });\n}\n\nexport default function QuickTraceMeta({\n  event,\n  location,\n  quickTrace,\n  traceMeta,\n  anchor,\n  errorDest,\n  transactionDest,\n  project,\n}: Props) {\n  const organization = useOrganization();\n  const features = ['performance-view'];\n\n  const noFeatureMessage = t('Requires performance monitoring.');\n\n  const docsLink = getConfigureTracingDocsLink(project);\n\n  const traceId = event.contexts?.trace?.trace_id ?? null;\n  const traceTarget = generateTraceTarget(event, organization);\n\n  let body: React.ReactNode;\n  let footer: React.ReactNode;\n\n  if (!traceId || !quickTrace || quickTrace.trace === null) {\n    // this platform doesn't support performance don't show anything here\n    if (docsLink === null) {\n      return null;\n    }\n\n    body = t('Missing Trace');\n\n    // need to configure tracing\n    footer = <ExternalLink href={docsLink}>{t('Read the docs')}</ExternalLink>;\n  } else {\n    if (quickTrace.isLoading) {\n      body = <Placeholder height=\"24px\" />;\n    } else if (quickTrace.error) {\n      body = '\\u2014';\n    } else {\n      body = (\n        <ErrorBoundary mini>\n          <QuickTrace\n            event={event}\n            quickTrace={{\n              type: quickTrace.type,\n              trace: quickTrace.trace,\n            }}\n            location={location}\n            organization={organization}\n            anchor={anchor}\n            errorDest={errorDest}\n            transactionDest={transactionDest}\n          />\n        </ErrorBoundary>\n      );\n    }\n\n    footer = (\n      <Link to={traceTarget} onClick={() => handleTraceLink(organization)}>\n        {tct('View Full Trace: [id][events]', {\n          id: getShortEventId(traceId ?? ''),\n          events: traceMeta\n            ? tn(' (%s event)', ' (%s events)', traceMeta.transactions + traceMeta.errors)\n            : '',\n        })}\n      </Link>\n    );\n  }\n\n  return (\n    <Feature hookName=\"feature-disabled:performance-quick-trace\" features={features}>\n      {({hasFeature}) => {\n        // also need to enable the performance feature\n        if (!hasFeature) {\n          footer = (\n            <Hovercard\n              body={\n                <FeatureDisabled\n                  features={features}\n                  hideHelpToggle\n                  message={noFeatureMessage}\n                  featureName={noFeatureMessage}\n                />\n              }\n            >\n              {footer}\n            </Hovercard>\n          );\n        }\n\n        return <QuickTraceMetaBase body={body} footer={footer} />;\n      }}\n    </Feature>\n  );\n}\n\nexport function QuickTraceMetaBase({\n  body,\n  footer,\n}: {\n  body: React.ReactNode;\n  footer: React.ReactNode;\n}) {\n  return (\n    <MetaData\n      headingText={t('Trace Navigator')}\n      tooltipText={t(\n        'An abbreviated version of the full trace. Related frontend and backend services can be added to provide further visibility.'\n      )}\n      bodyText={<div data-test-id=\"quick-trace-body\">{body}</div>}\n      subtext={<div data-test-id=\"quick-trace-footer\">{footer}</div>}\n    />\n  );\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Clipboard from 'sentry/components/clipboard';\nimport DateTime from 'sentry/components/dateTime';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport TimeSince from 'sentry/components/timeSince';\nimport Tooltip from 'sentry/components/tooltip';\nimport {frontend} from 'sentry/data/platformCategories';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AvatarProject, OrganizationSummary} from 'sentry/types';\nimport {Event, EventTransaction} from 'sentry/types/event';\nimport {getShortEventId} from 'sentry/utils/events';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {\n  QuickTraceQueryChildrenProps,\n  TraceMeta,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {isTransaction} from 'sentry/utils/performance/quickTrace/utils';\nimport Projects from 'sentry/utils/projects';\nimport theme from 'sentry/utils/theme';\n\nimport QuickTraceMeta from './quickTraceMeta';\nimport {MetaData} from './styles';\n\ntype Props = Pick<\n  React.ComponentProps<typeof QuickTraceMeta>,\n  'errorDest' | 'transactionDest'\n> & {\n  event: Event;\n  location: Location;\n  meta: TraceMeta | null;\n  organization: OrganizationSummary;\n  projectId: string;\n  quickTrace: QuickTraceQueryChildrenProps | null;\n};\n\ntype State = {\n  isLargeScreen: boolean;\n};\n\n/**\n * This should match the breakpoint chosen for the `EventDetailHeader` below\n */\nconst BREAKPOINT_MEDIA_QUERY = `(min-width: ${theme.breakpoints.large})`;\n\nclass EventMetas extends Component<Props, State> {\n  state: State = {\n    isLargeScreen: window.matchMedia?.(BREAKPOINT_MEDIA_QUERY)?.matches,\n  };\n\n  componentDidMount() {\n    if (this.mq) {\n      this.mq.addListener(this.handleMediaQueryChange);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.mq) {\n      this.mq.removeListener(this.handleMediaQueryChange);\n    }\n  }\n\n  mq = window.matchMedia?.(BREAKPOINT_MEDIA_QUERY);\n\n  handleMediaQueryChange = (changed: MediaQueryListEvent) => {\n    this.setState({\n      isLargeScreen: changed.matches,\n    });\n  };\n\n  render() {\n    const {\n      event,\n      organization,\n      projectId,\n      location,\n      quickTrace,\n      meta,\n      errorDest,\n      transactionDest,\n    } = this.props;\n    const {isLargeScreen} = this.state;\n\n    const type = isTransaction(event) ? 'transaction' : 'event';\n\n    const timestamp = (\n      <TimeSince date={event.dateCreated || (event.endTimestamp || 0) * 1000} />\n    );\n\n    const httpStatus = <HttpStatus event={event} />;\n\n    return (\n      <Projects orgId={organization.slug} slugs={[projectId]}>\n        {({projects}) => {\n          const project = projects.find(p => p.slug === projectId);\n          return (\n            <EventDetailHeader type={type}>\n              <MetaData\n                headingText={t('Event ID')}\n                tooltipText={t('The unique ID assigned to this %s.', type)}\n                bodyText={<EventID event={event} />}\n                subtext={\n                  <ProjectBadge\n                    project={project ? project : {slug: projectId}}\n                    avatarSize={16}\n                  />\n                }\n              />\n              {isTransaction(event) ? (\n                <MetaData\n                  headingText={t('Event Duration')}\n                  tooltipText={t(\n                    'The time elapsed between the start and end of this transaction.'\n                  )}\n                  bodyText={getDuration(\n                    event.endTimestamp - event.startTimestamp,\n                    2,\n                    true\n                  )}\n                  subtext={timestamp}\n                />\n              ) : (\n                <MetaData\n                  headingText={t('Created')}\n                  tooltipText={t('The time at which this event was created.')}\n                  bodyText={timestamp}\n                  subtext={getDynamicText({\n                    value: <DateTime date={event.dateCreated} />,\n                    fixed: 'May 6, 2021 3:27:01 UTC',\n                  })}\n                />\n              )}\n              {isTransaction(event) && (\n                <MetaData\n                  headingText={t('Status')}\n                  tooltipText={t(\n                    'The status of this transaction indicating if it succeeded or otherwise.'\n                  )}\n                  bodyText={getStatusBodyText(project, event, meta)}\n                  subtext={httpStatus}\n                />\n              )}\n              <QuickTraceContainer>\n                <QuickTraceMeta\n                  event={event}\n                  project={project}\n                  location={location}\n                  quickTrace={quickTrace}\n                  traceMeta={meta}\n                  anchor={isLargeScreen ? 'right' : 'left'}\n                  errorDest={errorDest}\n                  transactionDest={transactionDest}\n                />\n              </QuickTraceContainer>\n            </EventDetailHeader>\n          );\n        }}\n      </Projects>\n    );\n  }\n}\n\nconst EventDetailHeader = styled('div')<{type?: 'transaction' | 'event'}>`\n  display: grid;\n  grid-template-columns: repeat(${p => (p.type === 'transaction' ? 3 : 2)}, 1fr);\n  grid-template-rows: repeat(2, auto);\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    margin-bottom: 0;\n  }\n\n  /* This should match the breakpoint chosen for BREAKPOINT_MEDIA_QUERY above. */\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    ${p =>\n      p.type === 'transaction'\n        ? 'grid-template-columns: minmax(160px, 1fr) minmax(160px, 1fr) minmax(160px, 1fr) 6fr;'\n        : 'grid-template-columns: minmax(160px, 1fr) minmax(200px, 1fr) 6fr;'};\n    grid-row-gap: 0;\n  }\n`;\n\nconst QuickTraceContainer = styled('div')`\n  grid-column: 1/4;\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    justify-self: flex-end;\n    min-width: 325px;\n    grid-column: unset;\n  }\n`;\n\nfunction EventID({event}: {event: Event}) {\n  return (\n    <Clipboard value={event.eventID}>\n      <EventIDContainer>\n        <EventIDWrapper>{getShortEventId(event.eventID)}</EventIDWrapper>\n        <Tooltip title={event.eventID} position=\"top\">\n          <IconCopy color=\"subText\" />\n        </Tooltip>\n      </EventIDContainer>\n    </Clipboard>\n  );\n}\n\nconst EventIDContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n`;\n\nconst EventIDWrapper = styled('span')`\n  margin-right: ${space(1)};\n`;\n\nfunction HttpStatus({event}: {event: Event}) {\n  const {tags} = event;\n\n  const emptyStatus = <Fragment>{'\\u2014'}</Fragment>;\n\n  if (!Array.isArray(tags)) {\n    return emptyStatus;\n  }\n\n  const tag = tags.find(tagObject => tagObject.key === 'http.status_code');\n\n  if (!tag) {\n    return emptyStatus;\n  }\n\n  return <Fragment>HTTP {tag.value}</Fragment>;\n}\n\n/*\n  TODO: Ash\n  I put this in place as a temporary patch to prevent successful frontend transactions from being set as 'unknown', which is what Relay sets by default\n  if there is no status set by the SDK. In the future, the possible statuses will be revised and frontend transactions should properly have a status set.\n  When that change is implemented, this function can simply be replaced with:\n\n  event.contexts?.trace?.status ?? '\\u2014';\n*/\n\nfunction getStatusBodyText(\n  project: AvatarProject | undefined,\n  event: EventTransaction,\n  meta: TraceMeta | null\n): string {\n  const isFrontendProject = frontend.some(val => val === project?.platform);\n\n  if (\n    isFrontendProject &&\n    meta &&\n    meta.errors === 0 &&\n    event.contexts?.trace?.status === 'unknown'\n  ) {\n    return 'ok';\n  }\n\n  return event.contexts?.trace?.status ?? '\\u2014';\n}\n\nexport default EventMetas;\n","import styled from '@emotion/styled';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport space from 'sentry/styles/space';\n\ntype MetaDataProps = {\n  bodyText: React.ReactNode;\n  headingText: string;\n  subtext: React.ReactNode;\n  tooltipText: string;\n  badge?: 'alpha' | 'beta' | 'new';\n};\n\nexport function MetaData({\n  headingText,\n  tooltipText,\n  bodyText,\n  subtext,\n  badge,\n}: MetaDataProps) {\n  return (\n    <HeaderInfo>\n      <StyledSectionHeading>\n        {headingText}\n        <QuestionTooltip\n          position=\"top\"\n          size=\"sm\"\n          containerDisplayMode=\"block\"\n          title={tooltipText}\n        />\n        {badge && <StyledFeatureBadge type={badge} />}\n      </StyledSectionHeading>\n      <SectionBody>{bodyText}</SectionBody>\n      <SectionSubtext>{subtext}</SectionSubtext>\n    </HeaderInfo>\n  );\n}\n\nconst HeaderInfo = styled('div')`\n  height: 78px;\n`;\n\nconst StyledSectionHeading = styled(SectionHeading)`\n  margin: 0;\n`;\n\nconst SectionBody = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  padding: ${space(0.5)} 0;\n  max-height: 32px;\n`;\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin: 0;\n`;\n\nexport const SectionSubtext = styled('div')<{type?: 'error' | 'default'}>`\n  color: ${p => (p.type === 'error' ? p.theme.error : p.theme.subText)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n"],"names":["formattedValue","record","value","type","getDuration","toFixed","isOutdatedSdk","event","sdk","version","sdkVersion","startsWith","EventVitals","Fragment","WebVitals","MobileVitals","measurementNames","Object","keys","measurements","filter","name","Boolean","WEB_VITAL_DETAILS","sort","length","Container","t","WarningIconContainer","size","title","position","containerDisplayMode","Measurements","map","measurement","vital","EventVital","MOBILE_VITAL_DETAILS","failedThreshold","defined","poorThreshold","currentValue","thresholdValue","EventVitalContainer","StyledPanel","Name","ValueRow","FireIconContainer","Value","space","p","theme","fontSizeMedium","Panel","red300","iconSizes","fontSizeExtraLarge","KeyValueTable","KeyValueTableRow","keyName","Key","commonStyles","overflowEllipsis","backgroundSecondary","textColor","subText","FRONTEND_PLATFORMS","frontend","mobile","BACKEND_PLATFORMS","backend","serverless","TOOLTIP_PREFIX","root","ancestors","parent","current","children","descendants","QuickTrace","parsedQuickTrace","quickTrace","location","organization","anchor","errorDest","transactionDest","parseQuickTrace","error","traceLength","trace","nodes","push","EventNodeSelector","events","currentEvent","text","nodeKey","tn","currentNode","orgId","slug","slugs","project_slug","projects","project","find","platform","includes","MissingServiceNode","connectorSide","handleDropdownItem","key","extra","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","node_key","numEvents","errors","flatMap","hasErrors","event_id","hoverText","target","generateSingleErrorTarget","generateSingleTransactionTarget","StyledEventNode","to","onClick","handleNode","shouldOffset","tct","eventPrefix","eventType","caret","anchorRight","first","slice","DropdownNodeItem","allowDefaultEvent","onSelect","subtext","generateTraceTarget","disableLink","hideName","avatarSize","isQuickTraceEvent","transaction","expandDirection","maxLength","leftTrim","trimRegex","icon","HIDE_MISSING_SERVICE_KEY","readHideMissingServiceState","localStorage","Date","getTime","Component","hideMissing","this","props","now","toString","setState","render","state","docPlatform","getDocsPlatform","docsHref","width","href","trackExternalLink","dismissMissingService","TagsTable","query","generateUrl","tags","withMeta","formatErrorKind","kind","capitalize","replace","getTooltipTitle","TooltipTitle","Array","isArray","reason","StyledTagsTable","tag","tagInQuery","undefined","keyMetaData","getMeta","valueMetaData","renderTagValue","withPackage","err","StyledTooltip","Tooltip","QueryError","constructor","errorMessage","originalError","message","getOriginalError","_GenericDiscoverQuery","isLoading","tableFetchID","tableData","pageLinks","prevProps","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","async","api","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","clear","data","resp","doDiscoverQuery","prevState","getResponseHeader","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","noPagination","referrer","payload","getRequestPayload","getEventsAPIPayload","per_page","queryUserModified","decodeScalar","userModified","user_modified","assign","queryExtras","childrenProps","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","performanceEventView","PerformanceEventViewContext","Error","_props","params","requestPromise","method","includeAllArgs","platforms","performancePlatforms","performanceOnly","index","indexOf","prefix","substring","validDocPlatform","validPerformancePrefix","getConfigureTracingDocsLink","docsPlatform","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","options","strict","Context","createContext","displayName","Provider","context","getTraceLiteRequestPayload","eventId","additionalApiPayload","getTraceRequestPayload","EmptyTrace","TraceLiteQuery","traceId","start","end","statsPeriod","makeEventView","rest","withApi","QuickTraceQuery","contexts","trace_id","getTraceTimeRangeFromEvent","traceLiteResults","traceFullResults","traces","subtrace","flattenRelevantPaths","e","isCurrentEvent","getTraceFullRequestPayload","detailed","GenericTraceFullQuery","TraceFullQuery","TraceFullDetailedQuery","TraceMetaQuery","meta","QuickTraceMeta","traceMeta","useOrganization","features","noFeatureMessage","docsLink","traceTarget","body","footer","height","mini","source","handleTraceLink","getShortEventId","transactions","hookName","hasFeature","hideHelpToggle","featureName","QuickTraceMetaBase","headingText","tooltipText","bodyText","BREAKPOINT_MEDIA_QUERY","EventMetas","isLargeScreen","window","matchMedia","matches","changed","mq","addListener","handleMediaQueryChange","componentWillUnmount","removeListener","projectId","isTransaction","timestamp","date","dateCreated","endTimestamp","httpStatus","HttpStatus","EventDetailHeader","EventID","startTimestamp","getDynamicText","fixed","getStatusBodyText","QuickTraceContainer","breakpoints","medium","large","eventID","EventIDContainer","EventIDWrapper","color","emptyStatus","tagObject","val","status","MetaData","badge","HeaderInfo","StyledSectionHeading","StyledFeatureBadge","SectionBody","SectionSubtext","SectionHeading","FeatureBadge"],"sourceRoot":""}