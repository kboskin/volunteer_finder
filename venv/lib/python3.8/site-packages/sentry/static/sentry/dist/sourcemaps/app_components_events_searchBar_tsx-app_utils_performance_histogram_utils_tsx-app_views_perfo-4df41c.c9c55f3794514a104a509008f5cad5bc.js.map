{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_utils_performance_histogram_utils_tsx-app_views_perfo-4df41c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/trends/changedTransactions.tsx","webpack:///./app/views/performance/trends/chart.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  getFieldDoc,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags, SEMVER_TAGS);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          getFieldDoc={getFieldDoc}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {Fragment} from 'react';\n\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport Count from 'sentry/components/count';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport Duration from 'sentry/components/duration';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {RadioLineItem} from 'sentry/components/forms/controls/radioGroup';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport MenuItem from 'sentry/components/menuItem';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport Radio from 'sentry/components/radio';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconArrow, IconEllipsis} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AvatarProject, Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {formatPercentage, getDuration} from 'sentry/utils/formatters';\nimport TrendsDiscoverQuery from 'sentry/utils/performance/trends/trendsDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {DisplayModes} from '../transactionSummary/transactionOverview/charts';\nimport {transactionSummaryRouteWithQuery} from '../transactionSummary/utils';\n\nimport Chart from './chart';\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunctionField,\n  TrendsStats,\n  TrendView,\n} from './types';\nimport {\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getSelectedQueryKey,\n  getTrendProjectId,\n  modifyTrendView,\n  normalizeTrends,\n  transformDeltaSpread,\n  transformValueDelta,\n  trendCursorNames,\n  trendToColor,\n} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  setError: (msg: string | undefined) => void;\n  trendChangeType: TrendChangeType;\n  trendView: TrendView;\n  previousTrendColumn?: TrendColumnField;\n  previousTrendFunction?: TrendFunctionField;\n};\n\ntype TrendsCursorQuery = {\n  improvedCursor?: string;\n  regressionCursor?: string;\n};\n\nconst makeTrendsCursorHandler =\n  (trendChangeType: TrendChangeType): CursorHandler =>\n  (cursor, path, query) => {\n    const cursorQuery = {} as TrendsCursorQuery;\n    if (trendChangeType === TrendChangeType.IMPROVED) {\n      cursorQuery.improvedCursor = cursor;\n    } else if (trendChangeType === TrendChangeType.REGRESSION) {\n      cursorQuery.regressionCursor = cursor;\n    }\n\n    const selectedQueryKey = getSelectedQueryKey(trendChangeType);\n    delete query[selectedQueryKey];\n\n    browserHistory.push({\n      pathname: path,\n      query: {...query, ...cursorQuery},\n    });\n  };\n\nfunction getChartTitle(trendChangeType: TrendChangeType): string {\n  switch (trendChangeType) {\n    case TrendChangeType.IMPROVED:\n      return t('Most Improved Transactions');\n    case TrendChangeType.REGRESSION:\n      return t('Most Regressed Transactions');\n    default:\n      throw new Error('No trend type passed');\n  }\n}\n\nfunction getSelectedTransaction(\n  location: Location,\n  trendChangeType: TrendChangeType,\n  transactions?: NormalizedTrendsTransaction[]\n): NormalizedTrendsTransaction | undefined {\n  const queryKey = getSelectedQueryKey(trendChangeType);\n  const selectedTransactionName = decodeScalar(location.query[queryKey]);\n\n  if (!transactions) {\n    return undefined;\n  }\n\n  const selectedTransaction = transactions.find(\n    transaction =>\n      `${transaction.transaction}-${transaction.project}` === selectedTransactionName\n  );\n\n  if (selectedTransaction) {\n    return selectedTransaction;\n  }\n\n  return transactions.length > 0 ? transactions[0] : undefined;\n}\n\nfunction handleChangeSelected(\n  location: Location,\n  organization: Organization,\n  trendChangeType: TrendChangeType\n) {\n  return function updateSelected(transaction?: NormalizedTrendsTransaction) {\n    const selectedQueryKey = getSelectedQueryKey(trendChangeType);\n    const query = {\n      ...location.query,\n    };\n    if (!transaction) {\n      delete query[selectedQueryKey];\n    } else {\n      query[selectedQueryKey] = transaction\n        ? `${transaction.transaction}-${transaction.project}`\n        : undefined;\n    }\n    browserHistory.push({\n      pathname: location.pathname,\n      query,\n    });\n\n    trackAdvancedAnalyticsEvent('performance_views.trends.widget_interaction', {\n      organization,\n      widget_type: trendChangeType,\n    });\n  };\n}\n\nenum FilterSymbols {\n  GREATER_THAN_EQUALS = '>=',\n  LESS_THAN_EQUALS = '<=',\n}\n\nfunction handleFilterTransaction(location: Location, transaction: string) {\n  const queryString = decodeScalar(location.query.query);\n  const conditions = new MutableSearch(queryString ?? '');\n\n  conditions.addFilterValues('!transaction', [transaction]);\n\n  const query = conditions.formatString();\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      query: String(query).trim(),\n    },\n  });\n}\n\nfunction handleFilterDuration(\n  location: Location,\n  organization: Organization,\n  value: number,\n  symbol: FilterSymbols,\n  trendChangeType: TrendChangeType,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n) {\n  const durationTag = getCurrentTrendParameter(location, projects, projectIds).column;\n  const queryString = decodeScalar(location.query.query);\n  const conditions = new MutableSearch(queryString ?? '');\n\n  const existingValues = conditions.getFilterValues(durationTag);\n  const alternateSymbol = symbol === FilterSymbols.GREATER_THAN_EQUALS ? '>' : '<';\n\n  if (existingValues) {\n    existingValues.forEach(existingValue => {\n      if (existingValue.startsWith(symbol) || existingValue.startsWith(alternateSymbol)) {\n        conditions.removeFilterValue(durationTag, existingValue);\n      }\n    });\n  }\n\n  conditions.addFilterValues(durationTag, [`${symbol}${value}`]);\n\n  const query = conditions.formatString();\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      query: String(query).trim(),\n    },\n  });\n\n  trackAdvancedAnalyticsEvent('performance_views.trends.change_duration', {\n    organization,\n    widget_type: getChartTitle(trendChangeType),\n    value: `${symbol}${value}`,\n  });\n}\n\nfunction ChangedTransactions(props: Props) {\n  const {\n    location,\n    trendChangeType,\n    previousTrendFunction,\n    previousTrendColumn,\n    organization,\n    projects,\n    setError,\n  } = props;\n  const api = useApi();\n\n  const trendView = props.trendView.clone();\n  const chartTitle = getChartTitle(trendChangeType);\n  modifyTrendView(trendView, location, trendChangeType, projects);\n\n  const onCursor = makeTrendsCursorHandler(trendChangeType);\n  const cursor = decodeScalar(location.query[trendCursorNames[trendChangeType]]);\n  const paginationAnalyticsEvent = (direction: string) => {\n    trackAdvancedAnalyticsEvent('performance_views.trends.widget_pagination', {\n      organization,\n      direction,\n      widget_type: getChartTitle(trendChangeType),\n    });\n  };\n\n  return (\n    <TrendsDiscoverQuery\n      eventView={trendView}\n      orgSlug={organization.slug}\n      location={location}\n      trendChangeType={trendChangeType}\n      cursor={cursor}\n      limit={5}\n      setError={error => setError(error?.message)}\n    >\n      {({isLoading, trendsData, pageLinks}) => {\n        const trendFunction = getCurrentTrendFunction(location);\n        const trendParameter = getCurrentTrendParameter(\n          location,\n          projects,\n          trendView.project\n        );\n        const events = normalizeTrends(\n          (trendsData && trendsData.events && trendsData.events.data) || []\n        );\n        const selectedTransaction = getSelectedTransaction(\n          location,\n          trendChangeType,\n          events\n        );\n\n        const statsData = trendsData?.stats || {};\n        const transactionsList = events && events.slice ? events.slice(0, 5) : [];\n\n        const currentTrendFunction =\n          isLoading && previousTrendFunction\n            ? previousTrendFunction\n            : trendFunction.field;\n\n        const currentTrendColumn =\n          isLoading && previousTrendColumn ? previousTrendColumn : trendParameter.column;\n\n        const titleTooltipContent = t(\n          'This compares the baseline (%s) of the past with the present.',\n          trendFunction.legendLabel\n        );\n\n        return (\n          <TransactionsListContainer data-test-id=\"changed-transactions\">\n            <TrendsTransactionPanel>\n              <StyledHeaderTitleLegend>\n                {chartTitle}\n                <QuestionTooltip size=\"sm\" position=\"top\" title={titleTooltipContent} />\n              </StyledHeaderTitleLegend>\n              {isLoading ? (\n                <LoadingIndicator\n                  style={{\n                    margin: '237px auto',\n                  }}\n                />\n              ) : (\n                <Fragment>\n                  {transactionsList.length ? (\n                    <Fragment>\n                      <ChartContainer>\n                        <Chart\n                          statsData={statsData}\n                          query={trendView.query}\n                          project={trendView.project}\n                          environment={trendView.environment}\n                          start={trendView.start}\n                          end={trendView.end}\n                          statsPeriod={trendView.statsPeriod}\n                          transaction={selectedTransaction}\n                          isLoading={isLoading}\n                          {...props}\n                        />\n                      </ChartContainer>\n                      {transactionsList.map((transaction, index) => (\n                        <TrendsListItem\n                          api={api}\n                          currentTrendFunction={currentTrendFunction}\n                          currentTrendColumn={currentTrendColumn}\n                          trendView={props.trendView}\n                          organization={organization}\n                          transaction={transaction}\n                          key={transaction.transaction}\n                          index={index}\n                          trendChangeType={trendChangeType}\n                          transactions={transactionsList}\n                          location={location}\n                          projects={projects}\n                          statsData={statsData}\n                          handleSelectTransaction={handleChangeSelected(\n                            location,\n                            organization,\n                            trendChangeType\n                          )}\n                        />\n                      ))}\n                    </Fragment>\n                  ) : (\n                    <StyledEmptyStateWarning small>\n                      {t('No results')}\n                    </StyledEmptyStateWarning>\n                  )}\n                </Fragment>\n              )}\n            </TrendsTransactionPanel>\n            <Pagination\n              pageLinks={pageLinks}\n              onCursor={onCursor}\n              paginationAnalyticsEvent={paginationAnalyticsEvent}\n            />\n          </TransactionsListContainer>\n        );\n      }}\n    </TrendsDiscoverQuery>\n  );\n}\n\ntype TrendsListItemProps = {\n  api: Client;\n  currentTrendColumn: string;\n  currentTrendFunction: string;\n  handleSelectTransaction: (transaction: NormalizedTrendsTransaction) => void;\n  index: number;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  statsData: TrendsStats;\n  transaction: NormalizedTrendsTransaction;\n  transactions: NormalizedTrendsTransaction[];\n  trendChangeType: TrendChangeType;\n  trendView: TrendView;\n};\n\nfunction TrendsListItem(props: TrendsListItemProps) {\n  const {\n    transaction,\n    transactions,\n    trendChangeType,\n    currentTrendFunction,\n    currentTrendColumn,\n    index,\n    location,\n    organization,\n    projects,\n    handleSelectTransaction,\n    trendView,\n  } = props;\n  const color = trendToColor[trendChangeType].default;\n\n  const selectedTransaction = getSelectedTransaction(\n    location,\n    trendChangeType,\n    transactions\n  );\n  const isSelected = selectedTransaction === transaction;\n\n  const project = projects.find(\n    ({slug}) => slug === transaction.project\n  ) as AvatarProject;\n\n  const currentPeriodValue = transaction.aggregate_range_2;\n  const previousPeriodValue = transaction.aggregate_range_1;\n\n  const absolutePercentChange = formatPercentage(\n    Math.abs(transaction.trend_percentage - 1),\n    0\n  );\n\n  const previousDuration = getDuration(\n    previousPeriodValue / 1000,\n    previousPeriodValue < 1000 && previousPeriodValue > 10 ? 0 : 2\n  );\n  const currentDuration = getDuration(\n    currentPeriodValue / 1000,\n    currentPeriodValue < 1000 && currentPeriodValue > 10 ? 0 : 2\n  );\n\n  const percentChangeExplanation = t(\n    'Over this period, the %s for %s has %s %s from %s to %s',\n    currentTrendFunction,\n    currentTrendColumn,\n    trendChangeType === TrendChangeType.IMPROVED ? t('decreased') : t('increased'),\n    absolutePercentChange,\n    previousDuration,\n    currentDuration\n  );\n\n  const longestPeriodValue =\n    trendChangeType === TrendChangeType.IMPROVED\n      ? previousPeriodValue\n      : currentPeriodValue;\n  const longestDuration =\n    trendChangeType === TrendChangeType.IMPROVED ? previousDuration : currentDuration;\n\n  return (\n    <ListItemContainer data-test-id={'trends-list-item-' + trendChangeType}>\n      <ItemRadioContainer color={color}>\n        <Tooltip\n          title={\n            <TooltipContent>\n              <span>{t('Total Events')}</span>\n              <span>\n                <Count value={transaction.count_range_1} />\n                <StyledIconArrow direction=\"right\" size=\"xs\" />\n                <Count value={transaction.count_range_2} />\n              </span>\n            </TooltipContent>\n          }\n          disableForVisualTest // Disabled tooltip in snapshots because of overlap order issues.\n        >\n          <RadioLineItem index={index} role=\"radio\">\n            <Radio\n              checked={isSelected}\n              onChange={() => handleSelectTransaction(transaction)}\n            />\n          </RadioLineItem>\n        </Tooltip>\n      </ItemRadioContainer>\n      <TransactionSummaryLink {...props} />\n      <ItemTransactionPercentage>\n        <Tooltip title={percentChangeExplanation}>\n          <Fragment>\n            {trendChangeType === TrendChangeType.REGRESSION ? '+' : ''}\n            {formatPercentage(transaction.trend_percentage - 1, 0)}\n          </Fragment>\n        </Tooltip>\n      </ItemTransactionPercentage>\n      <DropdownLink\n        caret={false}\n        anchorRight\n        title={\n          <StyledButton\n            size=\"xsmall\"\n            icon={<IconEllipsis data-test-id=\"trends-item-action\" size=\"xs\" />}\n            aria-label={t('Actions')}\n          />\n        }\n      >\n        <MenuItem\n          onClick={() =>\n            handleFilterDuration(\n              location,\n              organization,\n              longestPeriodValue,\n              FilterSymbols.LESS_THAN_EQUALS,\n              trendChangeType,\n              projects,\n              trendView.project\n            )\n          }\n        >\n          <MenuAction>{t('Show \\u2264 %s', longestDuration)}</MenuAction>\n        </MenuItem>\n        <MenuItem\n          onClick={() =>\n            handleFilterDuration(\n              location,\n              organization,\n              longestPeriodValue,\n              FilterSymbols.GREATER_THAN_EQUALS,\n              trendChangeType,\n              projects,\n              trendView.project\n            )\n          }\n        >\n          <MenuAction>{t('Show \\u2265 %s', longestDuration)}</MenuAction>\n        </MenuItem>\n        <MenuItem\n          onClick={() => handleFilterTransaction(location, transaction.transaction)}\n        >\n          <MenuAction>{t('Hide from list')}</MenuAction>\n        </MenuItem>\n      </DropdownLink>\n      <ItemTransactionDurationChange>\n        {project && (\n          <Tooltip title={transaction.project}>\n            <IdBadge avatarSize={16} project={project} hideName />\n          </Tooltip>\n        )}\n        <CompareDurations {...props} />\n      </ItemTransactionDurationChange>\n      <ItemTransactionStatus color={color}>\n        <ValueDelta {...props} />\n      </ItemTransactionStatus>\n    </ListItemContainer>\n  );\n}\n\nexport const CompareDurations = ({\n  transaction,\n}: {\n  transaction: TrendsListItemProps['transaction'];\n}) => {\n  const {fromSeconds, toSeconds, showDigits} = transformDeltaSpread(\n    transaction.aggregate_range_1,\n    transaction.aggregate_range_2\n  );\n\n  return (\n    <DurationChange>\n      <Duration seconds={fromSeconds} fixedDigits={showDigits ? 1 : 0} abbreviation />\n      <StyledIconArrow direction=\"right\" size=\"xs\" />\n      <Duration seconds={toSeconds} fixedDigits={showDigits ? 1 : 0} abbreviation />\n    </DurationChange>\n  );\n};\n\nconst ValueDelta = ({transaction, trendChangeType}: TrendsListItemProps) => {\n  const {seconds, fixedDigits, changeLabel} = transformValueDelta(\n    transaction.trend_difference,\n    trendChangeType\n  );\n\n  return (\n    <span>\n      <Duration seconds={seconds} fixedDigits={fixedDigits} abbreviation /> {changeLabel}\n    </span>\n  );\n};\n\ntype TransactionSummaryLinkProps = TrendsListItemProps & {};\n\nconst TransactionSummaryLink = (props: TransactionSummaryLinkProps) => {\n  const {\n    organization,\n    trendView: eventView,\n    transaction,\n    projects,\n    currentTrendFunction,\n    currentTrendColumn,\n  } = props;\n  const summaryView = eventView.clone();\n  const projectID = getTrendProjectId(transaction, projects);\n  const target = transactionSummaryRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: String(transaction.transaction),\n    query: summaryView.generateQueryStringObject(),\n    projectID,\n    display: DisplayModes.TREND,\n    trendFunction: currentTrendFunction,\n    trendColumn: currentTrendColumn,\n  });\n\n  return (\n    <ItemTransactionName to={target} data-test-id=\"item-transaction-name\">\n      {transaction.transaction}\n    </ItemTransactionName>\n  );\n};\n\nconst TransactionsListContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst TrendsTransactionPanel = styled(Panel)`\n  margin: 0;\n  flex-grow: 1;\n`;\n\nconst ChartContainer = styled('div')`\n  padding: ${space(3)};\n`;\n\nconst StyledHeaderTitleLegend = styled(HeaderTitleLegend)`\n  border-radius: ${p => p.theme.borderRadius};\n  margin: ${space(2)} ${space(3)};\n`;\n\nconst StyledButton = styled(Button)`\n  vertical-align: middle;\n`;\n\nconst MenuAction = styled('div')<{['data-test-id']?: string}>`\n  white-space: nowrap;\n  color: ${p => p.theme.textColor};\n`;\n\nMenuAction.defaultProps = {\n  'data-test-id': 'menu-action',\n};\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  min-height: 300px;\n  justify-content: center;\n`;\n\nconst ListItemContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 24px auto 100px 30px;\n  grid-template-rows: repeat(2, auto);\n  grid-column-gap: ${space(1)};\n  border-top: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst ItemRadioContainer = styled('div')`\n  grid-row: 1/3;\n  input {\n    cursor: pointer;\n  }\n  input:checked::after {\n    background-color: ${p => p.color};\n  }\n`;\n\nconst ItemTransactionName = styled(Link)`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-right: ${space(1)};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst ItemTransactionDurationChange = styled('div')`\n  display: flex;\n  align-items: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst DurationChange = styled('span')`\n  color: ${p => p.theme.gray300};\n  margin: 0 ${space(1)};\n`;\n\nconst ItemTransactionPercentage = styled('div')`\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst ItemTransactionStatus = styled('div')`\n  color: ${p => p.color};\n  text-align: right;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst TooltipContent = styled('div')`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  margin: 0 ${space(1)};\n`;\n\nexport default withProjects(withOrganization(ChangedTransactions));\n","import {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport type {LegendComponentOption} from 'echarts';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport {\n  LineChart,\n  LineChartProps,\n  LineChartSeries,\n} from 'sentry/components/charts/lineChart';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {EventsStatsData, OrganizationSummary, Project} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeList} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\n\nimport {ViewProps} from '../types';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendFunctionField,\n  TrendsStats,\n} from './types';\nimport {\n  generateTrendFunctionAsString,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n  getUnselectedSeries,\n  transformEventStatsSmoothed,\n  trendToColor,\n} from './utils';\n\ntype Props = WithRouterProps &\n  ViewProps & {\n    isLoading: boolean;\n    location: Location;\n    organization: OrganizationSummary;\n    projects: Project[];\n    statsData: TrendsStats;\n    trendChangeType: TrendChangeType;\n    disableLegend?: boolean;\n    disableXAxis?: boolean;\n    grid?: LineChartProps['grid'];\n    height?: number;\n    transaction?: NormalizedTrendsTransaction;\n    trendFunctionField?: TrendFunctionField;\n  };\n\nfunction transformEventStats(data: EventsStatsData, seriesName?: string): Series[] {\n  return [\n    {\n      seriesName: seriesName || 'Current',\n      data: data.map(([timestamp, countsForTimestamp]) => ({\n        name: timestamp * 1000,\n        value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n      })),\n    },\n  ];\n}\n\nfunction getLegend(trendFunction: string): LegendComponentOption {\n  return {\n    right: 10,\n    top: 0,\n    itemGap: 12,\n    align: 'left',\n    data: [\n      {\n        name: 'Baseline',\n        icon: 'path://M180 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40z, M810 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40zm, M1440 1000 l0 -40 200 0 200 0 0 40 0 40 -200 0 -200 0 0 -40z',\n      },\n      {\n        name: 'Releases',\n      },\n      {\n        name: trendFunction,\n      },\n    ],\n  };\n}\n\nfunction getIntervalLine(\n  theme: Theme,\n  series: Series[],\n  intervalRatio: number,\n  transaction?: NormalizedTrendsTransaction\n): LineChartSeries[] {\n  if (!transaction || !series.length || !series[0].data || !series[0].data.length) {\n    return [];\n  }\n\n  const seriesStart = parseInt(series[0].data[0].name as string, 10);\n  const seriesEnd = parseInt(series[0].data.slice(-1)[0].name as string, 10);\n\n  if (seriesEnd < seriesStart) {\n    return [];\n  }\n\n  const periodLine: LineChartSeries = {\n    data: [],\n    color: theme.textColor,\n    markLine: {\n      data: [],\n      label: {},\n      lineStyle: {\n        color: theme.textColor,\n        type: 'dashed',\n        width: 1,\n      },\n      symbol: ['none', 'none'],\n      tooltip: {\n        show: false,\n      },\n    },\n    seriesName: 'Baseline',\n  };\n\n  const periodLineLabel = {\n    fontSize: 11,\n    show: true,\n    color: theme.textColor,\n    silent: true,\n  };\n\n  const previousPeriod = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Baseline',\n  };\n  const currentPeriod = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Baseline',\n  };\n  const periodDividingLine = {\n    ...periodLine,\n    markLine: {...periodLine.markLine},\n    seriesName: 'Period split',\n  };\n\n  const seriesDiff = seriesEnd - seriesStart;\n  const seriesLine = seriesDiff * intervalRatio + seriesStart;\n\n  previousPeriod.markLine.data = [\n    [\n      {value: 'Past', coord: [seriesStart, transaction.aggregate_range_1]},\n      {coord: [seriesLine, transaction.aggregate_range_1]},\n    ],\n  ];\n  previousPeriod.markLine.tooltip = {\n    formatter: () => {\n      return [\n        '<div class=\"tooltip-series tooltip-series-solo\">',\n        '<div>',\n        `<span class=\"tooltip-label\"><strong>${t('Past Baseline')}</strong></span>`,\n        // p50() coerces the axis to be time based\n        tooltipFormatter(transaction.aggregate_range_1, 'p50()'),\n        '</div>',\n        '</div>',\n        '<div class=\"tooltip-arrow\"></div>',\n      ].join('');\n    },\n  };\n  currentPeriod.markLine.data = [\n    [\n      {value: 'Present', coord: [seriesLine, transaction.aggregate_range_2]},\n      {coord: [seriesEnd, transaction.aggregate_range_2]},\n    ],\n  ];\n  currentPeriod.markLine.tooltip = {\n    formatter: () => {\n      return [\n        '<div class=\"tooltip-series tooltip-series-solo\">',\n        '<div>',\n        `<span class=\"tooltip-label\"><strong>${t('Present Baseline')}</strong></span>`,\n        // p50() coerces the axis to be time based\n        tooltipFormatter(transaction.aggregate_range_2, 'p50()'),\n        '</div>',\n        '</div>',\n        '<div class=\"tooltip-arrow\"></div>',\n      ].join('');\n    },\n  };\n  periodDividingLine.markLine = {\n    data: [\n      {\n        xAxis: seriesLine,\n      },\n    ],\n    label: {show: false},\n    lineStyle: {\n      color: theme.textColor,\n      type: 'solid',\n      width: 2,\n    },\n    symbol: ['none', 'none'],\n    tooltip: {\n      show: false,\n    },\n    silent: true,\n  };\n\n  previousPeriod.markLine.label = {\n    ...periodLineLabel,\n    formatter: 'Past',\n    position: 'insideStartBottom',\n  };\n  currentPeriod.markLine.label = {\n    ...periodLineLabel,\n    formatter: 'Present',\n    position: 'insideEndBottom',\n  };\n\n  const additionalLineSeries = [previousPeriod, currentPeriod, periodDividingLine];\n  return additionalLineSeries;\n}\n\nexport function Chart({\n  trendChangeType,\n  router,\n  statsPeriod,\n  transaction,\n  statsData,\n  isLoading,\n  location,\n  start: propsStart,\n  end: propsEnd,\n  trendFunctionField,\n  disableXAxis,\n  disableLegend,\n  grid,\n  height,\n  projects,\n  project,\n}: Props) {\n  const theme = useTheme();\n\n  const handleLegendSelectChanged = legendChange => {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const query = {\n      ...location.query,\n    };\n\n    const queryKey = getUnselectedSeries(trendChangeType);\n    query[queryKey] = unselected;\n\n    const to = {\n      ...location,\n      query,\n    };\n    browserHistory.push(to);\n  };\n\n  const lineColor = trendToColor[trendChangeType || ''];\n\n  const events =\n    statsData && transaction?.project && transaction?.transaction\n      ? statsData[[transaction.project, transaction.transaction].join(',')]\n      : undefined;\n  const data = events?.data ?? [];\n\n  const trendFunction = getCurrentTrendFunction(location, trendFunctionField);\n  const trendParameter = getCurrentTrendParameter(location, projects, project);\n  const chartLabel = generateTrendFunctionAsString(\n    trendFunction.field,\n    trendParameter.column\n  );\n  const results = transformEventStats(data, chartLabel);\n  const {smoothedResults, minValue, maxValue} = transformEventStatsSmoothed(\n    results,\n    chartLabel\n  );\n\n  const start = propsStart ? getUtcToLocalDateObject(propsStart) : null;\n  const end = propsEnd ? getUtcToLocalDateObject(propsEnd) : null;\n  const {utc} = normalizeDateTimeParams(location.query);\n\n  const seriesSelection = decodeList(\n    location.query[getUnselectedSeries(trendChangeType)]\n  ).reduce((selection, metric) => {\n    selection[metric] = false;\n    return selection;\n  }, {});\n  const legend: LegendComponentOption = disableLegend\n    ? {show: false}\n    : {\n        ...getLegend(chartLabel),\n        selected: seriesSelection,\n      };\n\n  const loading = isLoading;\n  const reloading = isLoading;\n\n  const yMax = Math.max(\n    maxValue,\n    transaction?.aggregate_range_2 || 0,\n    transaction?.aggregate_range_1 || 0\n  );\n  const yMin = Math.min(\n    minValue,\n    transaction?.aggregate_range_1 || Number.MAX_SAFE_INTEGER,\n    transaction?.aggregate_range_2 || Number.MAX_SAFE_INTEGER\n  );\n  const yDiff = yMax - yMin;\n  const yMargin = yDiff * 0.1;\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    tooltip: {\n      valueFormatter: (value, seriesName) => {\n        return tooltipFormatter(value, seriesName);\n      },\n    },\n    yAxis: {\n      min: Math.max(0, yMin - yMargin),\n      max: yMax + yMargin,\n      axisLabel: {\n        color: theme.chartLabel,\n        // p50() coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, 'p50()'),\n      },\n    },\n  };\n\n  return (\n    <ChartZoom\n      router={router}\n      period={statsPeriod}\n      start={start}\n      end={end}\n      utc={utc === 'true'}\n    >\n      {zoomRenderProps => {\n        const smoothedSeries = smoothedResults\n          ? smoothedResults.map(values => {\n              return {\n                ...values,\n                color: lineColor.default,\n                lineStyle: {\n                  opacity: 1,\n                },\n              };\n            })\n          : [];\n\n        const intervalSeries = getIntervalLine(\n          theme,\n          smoothedResults || [],\n          0.5,\n          transaction\n        );\n\n        return (\n          <TransitionChart loading={loading} reloading={reloading}>\n            <TransparentLoadingMask visible={reloading} />\n            {getDynamicText({\n              value: (\n                <LineChart\n                  height={height}\n                  {...zoomRenderProps}\n                  {...chartOptions}\n                  onLegendSelectChanged={handleLegendSelectChanged}\n                  series={[...smoothedSeries, ...intervalSeries]}\n                  seriesOptions={{\n                    showSymbol: false,\n                  }}\n                  legend={legend}\n                  toolBox={{\n                    show: false,\n                  }}\n                  grid={\n                    grid ?? {\n                      left: '10px',\n                      right: '10px',\n                      top: '40px',\n                      bottom: '0px',\n                    }\n                  }\n                  xAxis={disableXAxis ? {show: false} : undefined}\n                />\n              ),\n              fixed: 'Duration Chart',\n            })}\n          </TransitionChart>\n        );\n      }}\n    </ChartZoom>\n  );\n}\n\nexport default withRouter(Chart);\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","SEMVER_TAGS","has","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","getFieldDoc","withTags","tooltipFormatter","value","seriesName","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","measurementsFromDetails","details","entries","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","Fragment","getBucketWidth","data","length","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","factor","Math","round","Number","EPSILON","count","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","sort","kind","filterToField","p100","eventsRouteWithQuery","orgSlug","transaction","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","FilterSymbols","getChartTitle","trendChangeType","TrendChangeType","getSelectedTransaction","transactions","queryKey","getSelectedQueryKey","selectedTransactionName","find","handleChangeSelected","selectedQueryKey","browserHistory","trackAdvancedAnalyticsEvent","widget_type","handleFilterDuration","symbol","projects","durationTag","getCurrentTrendParameter","column","queryString","conditions","MutableSearch","existingValues","getFilterValues","alternateSymbol","GREATER_THAN_EQUALS","forEach","existingValue","startsWith","removeFilterValue","addFilterValues","formatString","trim","ChangedTransactions","previousTrendFunction","previousTrendColumn","setError","trendView","clone","chartTitle","modifyTrendView","onCursor","cursor","path","cursorQuery","improvedCursor","regressionCursor","makeTrendsCursorHandler","trendCursorNames","paginationAnalyticsEvent","direction","eventView","limit","error","message","isLoading","trendsData","pageLinks","trendFunction","getCurrentTrendFunction","trendParameter","events","normalizeTrends","selectedTransaction","statsData","stats","transactionsList","slice","currentTrendFunction","currentTrendColumn","titleTooltipContent","legendLabel","TransactionsListContainer","TrendsTransactionPanel","StyledHeaderTitleLegend","size","position","title","style","margin","ChartContainer","index","TrendsListItem","handleSelectTransaction","StyledEmptyStateWarning","small","color","trendToColor","default","isSelected","currentPeriodValue","aggregate_range_2","previousPeriodValue","aggregate_range_1","absolutePercentChange","abs","trend_percentage","previousDuration","currentDuration","percentChangeExplanation","longestPeriodValue","longestDuration","ListItemContainer","ItemRadioContainer","TooltipContent","count_range_1","StyledIconArrow","count_range_2","disableForVisualTest","role","checked","onChange","TransactionSummaryLink","ItemTransactionPercentage","caret","anchorRight","StyledButton","icon","onClick","LESS_THAN_EQUALS","MenuAction","handleFilterTransaction","ItemTransactionDurationChange","avatarSize","hideName","CompareDurations","ItemTransactionStatus","ValueDelta","fromSeconds","toSeconds","showDigits","transformDeltaSpread","DurationChange","seconds","fixedDigits","changeLabel","transformValueDelta","trend_difference","summaryView","getTrendProjectId","target","transactionSummaryRouteWithQuery","generateQueryStringObject","display","DisplayModes","trendColumn","ItemTransactionName","to","Panel","space","HeaderTitleLegend","p","theme","borderRadius","Button","textColor","defaultProps","EmptyStateWarning","border","Link","fontSizeMedium","overflowEllipsis","fontSizeSmall","gray300","IconArrow","withProjects","withOrganization","getLegend","right","top","itemGap","align","Chart","router","propsStart","propsEnd","trendFunctionField","disableXAxis","disableLegend","grid","height","useTheme","handleLegendSelectChanged","legendChange","selected","unselected","getUnselectedSeries","lineColor","join","chartLabel","generateTrendFunctionAsString","timestamp","countsForTimestamp","reduce","acc","transformEventStats","smoothedResults","minValue","maxValue","transformEventStatsSmoothed","getUtcToLocalDateObject","utc","normalizeDateTimeParams","seriesSelection","decodeList","selection","metric","legend","show","loading","reloading","yMax","max","yMin","min","MAX_SAFE_INTEGER","yMargin","chartOptions","tooltip","valueFormatter","yAxis","axisLabel","period","zoomRenderProps","smoothedSeries","lineStyle","opacity","intervalSeries","series","intervalRatio","seriesStart","parseInt","seriesEnd","periodLine","markLine","periodLineLabel","fontSize","silent","previousPeriod","currentPeriod","periodDividingLine","seriesLine","coord","xAxis","getIntervalLine","visible","getDynamicText","onLegendSelectChanged","seriesOptions","showSymbol","toolBox","left","bottom","fixed","withRouter"],"sourceRoot":""}