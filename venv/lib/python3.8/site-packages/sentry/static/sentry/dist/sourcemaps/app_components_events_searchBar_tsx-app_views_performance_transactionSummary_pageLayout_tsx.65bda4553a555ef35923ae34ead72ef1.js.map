{"version":3,"file":"chunks/app_components_events_searchBar_tsx-app_views_performance_transactionSummary_pageLayout_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/performance/breadcrumb.tsx","webpack:///./app/utils/performance/vitals/hasMeasurementsQuery.tsx","webpack:///./app/views/performance/transactionSummary/teamKeyTransactionButton.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdButton.tsx","webpack:///./app/views/performance/transactionSummary/header.tsx","webpack:///./app/views/performance/transactionSummary/pageLayout.tsx","webpack:///./app/views/performance/transactionSummary/tabs.tsx","webpack:///./app/views/performance/transactionSummary/transactionAnomalies/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/types.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionTags/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/utils.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  getFieldDoc,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags, SEMVER_TAGS);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          getFieldDoc={getFieldDoc}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Fragment} from 'react';\n\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\ntype Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import {Component} from 'react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport Tab from './transactionSummary/tabs';\nimport {eventsRouteWithQuery} from './transactionSummary/transactionEvents/utils';\nimport {spansRouteWithQuery} from './transactionSummary/transactionSpans/utils';\nimport {tagsRouteWithQuery} from './transactionSummary/transactionTags/utils';\nimport {vitalsRouteWithQuery} from './transactionSummary/transactionVitals/utils';\nimport {transactionSummaryRouteWithQuery} from './transactionSummary/utils';\nimport {vitalDetailRouteWithQuery} from './vitalDetail/utils';\nimport {getPerformanceLandingUrl} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  eventSlug?: string;\n  spanSlug?: SpanSlug;\n  tab?: Tab;\n  traceSlug?: string;\n  transaction?: {\n    name: string;\n    project: string;\n  };\n  vitalName?: string;\n};\n\nclass Breadcrumb extends Component<Props> {\n  getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {\n      organization,\n      location,\n      transaction,\n      vitalName,\n      spanSlug,\n      eventSlug,\n      traceSlug,\n      tab,\n    } = this.props;\n\n    const performanceTarget: LocationDescriptor = {\n      pathname: getPerformanceLandingUrl(organization),\n      query: {\n        ...location.query,\n        // clear out the transaction name\n        transaction: undefined,\n      },\n    };\n\n    crumbs.push({\n      to: performanceTarget,\n      label: t('Performance'),\n      preservePageFilters: true,\n    });\n\n    if (vitalName) {\n      const webVitalsTarget = vitalDetailRouteWithQuery({\n        orgSlug: organization.slug,\n        vitalName: 'fcp',\n        projectID: decodeScalar(location.query.project),\n        query: location.query,\n      });\n      crumbs.push({\n        to: webVitalsTarget,\n        label: t('Vital Detail'),\n        preservePageFilters: true,\n      });\n    } else if (transaction) {\n      const routeQuery = {\n        orgSlug: organization.slug,\n        transaction: transaction.name,\n        projectID: transaction.project,\n        query: location.query,\n      };\n\n      switch (tab) {\n        case Tab.Tags: {\n          const tagsTarget = tagsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: tagsTarget,\n            label: t('Tags'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.Events: {\n          const eventsTarget = eventsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: eventsTarget,\n            label: t('All Events'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.WebVitals: {\n          const webVitalsTarget = vitalsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: webVitalsTarget,\n            label: t('Web Vitals'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.Spans: {\n          const spansTarget = spansRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: spansTarget,\n            label: t('Spans'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.TransactionSummary:\n        default: {\n          const summaryTarget = transactionSummaryRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: summaryTarget,\n            label: t('Transaction Summary'),\n            preservePageFilters: true,\n          });\n        }\n      }\n    }\n\n    if (transaction && spanSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Span Summary'),\n      });\n    } else if (transaction && eventSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Event Details'),\n      });\n    } else if (traceSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Trace View'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  render() {\n    return <Breadcrumbs crumbs={this.getCrumbs()} />;\n  }\n}\n\nexport default Breadcrumb;\n","import omit from 'lodash/omit';\nimport pick from 'lodash/pick';\n\nimport {escapeDoubleQuotes} from 'sentry/utils';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {escapeFilterValue} from 'sentry/utils/tokenizeSearch';\nimport withApi from 'sentry/utils/withApi';\n\ntype HasMeasurementsProps = {\n  transaction: string;\n  type: 'web' | 'mobile';\n};\n\ntype RequestProps = DiscoverQueryProps & HasMeasurementsProps;\n\ntype HasMeasurements = {measurements: boolean};\n\ntype ChildrenProps = Omit<GenericChildrenProps<HasMeasurementsProps>, 'tableData'> & {\n  hasMeasurements: boolean | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getHasMeasurementsRequestPayload(props: RequestProps) {\n  const {eventView, location, transaction, type} = props;\n  const escaped = escapeDoubleQuotes(escapeFilterValue(transaction));\n  const baseApiPayload = {\n    transaction: `\"${escaped}\"`,\n    type,\n  };\n  const additionalApiPayload = pick(eventView.getEventsAPIPayload(location), [\n    'project',\n    'environment',\n  ]);\n  return Object.assign(baseApiPayload, additionalApiPayload);\n}\n\nfunction HasMeasurementsQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<HasMeasurements, HasMeasurementsProps>\n      route=\"events-has-measurements\"\n      getRequestPayload={getHasMeasurementsRequestPayload}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({\n          hasMeasurements: tableData?.measurements ?? null,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(HasMeasurementsQuery);\n","import {Component} from 'react';\n\nimport Button from 'sentry/components/button';\nimport TeamKeyTransactionComponent, {\n  TitleProps,\n} from 'sentry/components/performance/teamKeyTransaction';\nimport * as TeamKeyTransactionManager from 'sentry/components/performance/teamKeyTransactionsManager';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconStar} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useTeams from 'sentry/utils/useTeams';\nimport withProjects from 'sentry/utils/withProjects';\n\n/**\n * This can't be a function component because `TeamKeyTransaction` uses\n * `DropdownControl` which in turn uses passes a ref to this component.\n */\nclass TitleButton extends Component<TitleProps> {\n  render() {\n    const {isOpen, keyedTeams, ...props} = this.props;\n    const keyedTeamsCount = keyedTeams?.length ?? 0;\n    const button = (\n      <Button\n        {...props}\n        icon={keyedTeamsCount ? <IconStar color=\"yellow300\" isSolid /> : <IconStar />}\n      >\n        {keyedTeamsCount\n          ? tn('Starred for Team', 'Starred for Teams', keyedTeamsCount)\n          : t('Star for Team')}\n      </Button>\n    );\n\n    if (!isOpen && keyedTeams?.length) {\n      const teamSlugs = keyedTeams.map(({slug}) => slug).join(', ');\n      return <Tooltip title={teamSlugs}>{button}</Tooltip>;\n    }\n    return button;\n  }\n}\n\ntype BaseProps = {\n  organization: Organization;\n  transactionName: string;\n};\n\ntype Props = BaseProps &\n  TeamKeyTransactionManager.TeamKeyTransactionManagerChildrenProps & {\n    project: Project;\n  };\n\nfunction TeamKeyTransactionButton({\n  counts,\n  getKeyedTeams,\n  project,\n  transactionName,\n  ...props\n}: Props) {\n  const keyedTeams = getKeyedTeams(project.id, transactionName);\n  return (\n    <TeamKeyTransactionComponent\n      counts={counts}\n      keyedTeams={keyedTeams}\n      title={TitleButton}\n      project={project}\n      transactionName={transactionName}\n      {...props}\n    />\n  );\n}\n\ntype WrapperProps = BaseProps & {\n  eventView: EventView;\n  projects: Project[];\n};\n\nfunction TeamKeyTransactionButtonWrapper({\n  eventView,\n  organization,\n  projects,\n  ...props\n}: WrapperProps) {\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  if (eventView.project.length !== 1) {\n    return <TitleButton isOpen={false} disabled keyedTeams={null} />;\n  }\n\n  const projectId = String(eventView.project[0]);\n  const project = projects.find(proj => proj.id === projectId);\n  if (!defined(project)) {\n    return <TitleButton isOpen={false} disabled keyedTeams={null} />;\n  }\n\n  return (\n    <TeamKeyTransactionManager.Provider\n      organization={organization}\n      teams={teams}\n      selectedTeams={['myteams']}\n      selectedProjects={[String(projectId)]}\n    >\n      <TeamKeyTransactionManager.Consumer>\n        {({isLoading, ...results}) => (\n          <TeamKeyTransactionButton\n            organization={organization}\n            project={project}\n            isLoading={isLoading || !initiallyLoaded}\n            {...props}\n            {...results}\n          />\n        )}\n      </TeamKeyTransactionManager.Consumer>\n    </TeamKeyTransactionManager.Provider>\n  );\n}\n\nexport default withProjects(TeamKeyTransactionButtonWrapper);\n","import {Component} from 'react';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport TransactionThresholdModal, {\n  modalCss,\n  TransactionThresholdMetric,\n} from './transactionThresholdModal';\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  onChangeThreshold?: (threshold: number, metric: TransactionThresholdMetric) => void;\n};\n\ntype State = {\n  loadingThreshold: boolean;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n};\n\nclass TransactionThresholdButton extends Component<Props, State> {\n  state: State = {\n    transactionThreshold: undefined,\n    transactionThresholdMetric: undefined,\n    loadingThreshold: false,\n  };\n\n  componentDidMount() {\n    this.fetchTransactionThreshold();\n  }\n\n  getProject() {\n    const {projects, eventView} = this.props;\n    if (!defined(eventView)) {\n      return undefined;\n    }\n\n    const projectId = String(eventView.project[0]);\n    const project = projects.find(proj => proj.id === projectId);\n\n    return project;\n  }\n\n  fetchTransactionThreshold = () => {\n    const {api, organization, transactionName} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    this.setState({loadingThreshold: true});\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n          transaction: transactionName,\n        },\n      })\n      .then(([data]) => {\n        this.setState({\n          loadingThreshold: false,\n          transactionThreshold: data.threshold,\n          transactionThresholdMetric: data.metric,\n        });\n      })\n      .catch(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              loadingThreshold: false,\n              transactionThreshold: data.threshold,\n              transactionThresholdMetric: data.metric,\n            });\n          })\n          .catch(err => {\n            this.setState({loadingThreshold: false});\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      });\n  };\n\n  onChangeThreshold(threshold: number, metric: TransactionThresholdMetric) {\n    const {onChangeThreshold} = this.props;\n    this.setState({\n      transactionThreshold: threshold,\n      transactionThresholdMetric: metric,\n    });\n\n    if (defined(onChangeThreshold)) {\n      onChangeThreshold(threshold, metric);\n    }\n  }\n\n  openModal() {\n    const {organization, transactionName, eventView} = this.props;\n\n    const {transactionThreshold, transactionThresholdMetric} = this.state;\n\n    openModal(\n      modalProps => (\n        <TransactionThresholdModal\n          {...modalProps}\n          organization={organization}\n          transactionName={transactionName}\n          eventView={eventView}\n          transactionThreshold={transactionThreshold}\n          transactionThresholdMetric={transactionThresholdMetric}\n          onApply={(threshold, metric) => this.onChangeThreshold(threshold, metric)}\n        />\n      ),\n      {modalCss, backdrop: 'static'}\n    );\n  }\n\n  render() {\n    const {loadingThreshold} = this.state;\n    return (\n      <Button\n        onClick={() => this.openModal()}\n        icon={<IconSettings />}\n        disabled={loadingThreshold}\n        aria-label={t('Settings')}\n        data-test-id=\"set-transaction-threshold\"\n      />\n    );\n  }\n}\n\nexport default withApi(withProjects(TransactionThresholdButton));\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {CreateAlertFromViewButton} from 'sentry/components/createAlertButton';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ListLink from 'sentry/components/links/listLink';\nimport NavTabs from 'sentry/components/navTabs';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport HasMeasurementsQuery from 'sentry/utils/performance/vitals/hasMeasurementsQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport Breadcrumb from 'sentry/views/performance/breadcrumb';\n\nimport {getCurrentLandingDisplay, LandingDisplayField} from '../landing/utils';\n\nimport {anomaliesRouteWithQuery} from './transactionAnomalies/utils';\nimport {eventsRouteWithQuery} from './transactionEvents/utils';\nimport {spansRouteWithQuery} from './transactionSpans/utils';\nimport {tagsRouteWithQuery} from './transactionTags/utils';\nimport {vitalsRouteWithQuery} from './transactionVitals/utils';\nimport Tab from './tabs';\nimport TeamKeyTransactionButton from './teamKeyTransactionButton';\nimport TransactionThresholdButton from './transactionThresholdButton';\nimport {TransactionThresholdMetric} from './transactionThresholdModal';\nimport {transactionSummaryRouteWithQuery} from './utils';\n\ntype AnalyticInfo = {\n  eventKey: string;\n  eventName: string;\n};\n\nconst TAB_ANALYTICS: Partial<Record<Tab, AnalyticInfo>> = {\n  [Tab.WebVitals]: {\n    eventKey: 'performance_views.vitals.vitals_tab_clicked',\n    eventName: 'Performance Views: Vitals tab clicked',\n  },\n  [Tab.Tags]: {\n    eventKey: 'performance_views.tags.tags_tab_clicked',\n    eventName: 'Performance Views: Tags tab clicked',\n  },\n  [Tab.Events]: {\n    eventKey: 'performance_views.events.events_tab_clicked',\n    eventName: 'Performance Views: Events tab clicked',\n  },\n  [Tab.Spans]: {\n    eventKey: 'performance_views.spans.spans_tab_clicked',\n    eventName: 'Performance Views: Spans tab clicked',\n  },\n  [Tab.Anomalies]: {\n    eventKey: 'performance_views.anomalies.anomalies_tab_clicked',\n    eventName: 'Performance Views: Anomalies tab clicked',\n  },\n};\n\ntype Props = {\n  currentTab: Tab;\n  eventView: EventView;\n  handleIncompatibleQuery: React.ComponentProps<\n    typeof CreateAlertFromViewButton\n  >['onIncompatibleQuery'];\n  hasWebVitals: 'maybe' | 'yes' | 'no';\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  transactionName: string;\n  onChangeThreshold?: (threshold: number, metric: TransactionThresholdMetric) => void;\n};\n\nclass TransactionHeader extends Component<Props> {\n  trackAlertClick(errors?: Record<string, boolean>) {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.create_alert_clicked',\n      eventName: 'Performance Views: Create alert clicked',\n      organization_id: organization.id,\n      status: errors ? 'error' : 'success',\n      errors,\n      url: window.location.href,\n    });\n  }\n\n  trackTabClick = (tab: Tab) => () => {\n    const analyticKeys = TAB_ANALYTICS[tab];\n    if (!analyticKeys) {\n      return;\n    }\n\n    trackAnalyticsEvent({\n      ...analyticKeys,\n      organization_id: this.props.organization.id,\n    });\n  };\n\n  handleIncompatibleQuery: React.ComponentProps<\n    typeof CreateAlertFromViewButton\n  >['onIncompatibleQuery'] = (incompatibleAlertNoticeFn, errors) => {\n    this.trackAlertClick(errors);\n    this.props.handleIncompatibleQuery?.(incompatibleAlertNoticeFn, errors);\n  };\n\n  handleCreateAlertSuccess = () => {\n    this.trackAlertClick();\n  };\n\n  renderCreateAlertButton() {\n    const {eventView, organization, projects} = this.props;\n\n    return (\n      <CreateAlertFromViewButton\n        eventView={eventView}\n        organization={organization}\n        projects={projects}\n        onIncompatibleQuery={this.handleIncompatibleQuery}\n        onSuccess={this.handleCreateAlertSuccess}\n        referrer=\"performance\"\n        useAlertWizardV3={organization.features.includes('alert-wizard-v3')}\n        alertType=\"trans_duration\"\n        aria-label={t('Create Alert')}\n      />\n    );\n  }\n\n  renderKeyTransactionButton() {\n    const {eventView, organization, transactionName} = this.props;\n\n    return (\n      <TeamKeyTransactionButton\n        transactionName={transactionName}\n        eventView={eventView}\n        organization={organization}\n      />\n    );\n  }\n\n  renderSettingsButton() {\n    const {organization, transactionName, eventView, onChangeThreshold} = this.props;\n\n    return (\n      <GuideAnchor target=\"project_transaction_threshold_override\" position=\"bottom\">\n        <TransactionThresholdButton\n          organization={organization}\n          transactionName={transactionName}\n          eventView={eventView}\n          onChangeThreshold={onChangeThreshold}\n        />\n      </GuideAnchor>\n    );\n  }\n\n  renderWebVitalsTab() {\n    const {\n      organization,\n      eventView,\n      location,\n      projects,\n      transactionName,\n      currentTab,\n      hasWebVitals,\n    } = this.props;\n\n    const vitalsTarget = vitalsRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      projectID: decodeScalar(location.query.project),\n      query: location.query,\n    });\n\n    const tab = (\n      <ListLink\n        data-test-id=\"web-vitals-tab\"\n        to={vitalsTarget}\n        isActive={() => currentTab === Tab.WebVitals}\n        onClick={this.trackTabClick(Tab.WebVitals)}\n      >\n        {t('Web Vitals')}\n      </ListLink>\n    );\n\n    switch (hasWebVitals) {\n      case 'maybe':\n        // need to check if the web vitals tab should be shown\n\n        // frontend projects should always show the web vitals tab\n        if (\n          getCurrentLandingDisplay(location, projects, eventView).field ===\n          LandingDisplayField.FRONTEND_PAGELOAD\n        ) {\n          return tab;\n        }\n\n        // if it is not a frontend project, then we check to see if there\n        // are any web vitals associated with the transaction recently\n        return (\n          <HasMeasurementsQuery\n            location={location}\n            orgSlug={organization.slug}\n            eventView={eventView}\n            transaction={transactionName}\n            type=\"web\"\n          >\n            {({hasMeasurements}) => (hasMeasurements ? tab : null)}\n          </HasMeasurementsQuery>\n        );\n      case 'yes':\n        // always show the web vitals tab\n        return tab;\n      case 'no':\n      default:\n        // never show the web vitals tab\n        return null;\n    }\n  }\n\n  render() {\n    const {organization, location, projectId, transactionName, currentTab, projects} =\n      this.props;\n\n    const routeQuery = {\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      projectID: projectId,\n      query: location.query,\n    };\n\n    const summaryTarget = transactionSummaryRouteWithQuery(routeQuery);\n    const tagsTarget = tagsRouteWithQuery(routeQuery);\n    const eventsTarget = eventsRouteWithQuery(routeQuery);\n    const spansTarget = spansRouteWithQuery(routeQuery);\n    const anomaliesTarget = anomaliesRouteWithQuery(routeQuery);\n\n    const project = projects.find(p => p.id === projectId);\n\n    return (\n      <Layout.Header>\n        <Layout.HeaderContent>\n          <Breadcrumb\n            organization={organization}\n            location={location}\n            transaction={{\n              project: projectId,\n              name: transactionName,\n            }}\n            tab={currentTab}\n          />\n          <Layout.Title>\n            <TransactionName>\n              {project && (\n                <IdBadge\n                  project={project}\n                  avatarSize={28}\n                  hideName\n                  avatarProps={{hasTooltip: true, tooltip: project.slug}}\n                />\n              )}\n              {transactionName}\n            </TransactionName>\n          </Layout.Title>\n        </Layout.HeaderContent>\n        <Layout.HeaderActions>\n          <ButtonBar gap={1}>\n            <Feature organization={organization} features={['incidents']}>\n              {({hasFeature}) => hasFeature && this.renderCreateAlertButton()}\n            </Feature>\n            {this.renderKeyTransactionButton()}\n            {this.renderSettingsButton()}\n          </ButtonBar>\n        </Layout.HeaderActions>\n        <Fragment>\n          <StyledNavTabs>\n            <ListLink\n              to={summaryTarget}\n              isActive={() => currentTab === Tab.TransactionSummary}\n            >\n              {t('Overview')}\n            </ListLink>\n            <ListLink\n              to={eventsTarget}\n              isActive={() => currentTab === Tab.Events}\n              onClick={this.trackTabClick(Tab.Events)}\n            >\n              {t('All Events')}\n            </ListLink>\n            <ListLink\n              to={tagsTarget}\n              isActive={() => currentTab === Tab.Tags}\n              onClick={this.trackTabClick(Tab.Tags)}\n            >\n              {t('Tags')}\n            </ListLink>\n            <Feature\n              organization={organization}\n              features={['organizations:performance-suspect-spans-view']}\n            >\n              <ListLink\n                data-test-id=\"spans-tab\"\n                to={spansTarget}\n                isActive={() => currentTab === Tab.Spans}\n                onClick={this.trackTabClick(Tab.Spans)}\n              >\n                {t('Spans')}\n                <FeatureBadge type=\"new\" noTooltip />\n              </ListLink>\n            </Feature>\n            <Feature\n              organization={organization}\n              features={['organizations:performance-anomaly-detection-ui']}\n            >\n              <ListLink\n                data-test-id=\"anomalies-tab\"\n                to={anomaliesTarget}\n                isActive={() => currentTab === Tab.Anomalies}\n                onClick={this.trackTabClick(Tab.Anomalies)}\n              >\n                {t('Anomalies')}\n                <FeatureBadge type=\"alpha\" noTooltip />\n              </ListLink>\n            </Feature>\n            {this.renderWebVitalsTab()}\n          </StyledNavTabs>\n        </Fragment>\n      </Layout.Header>\n    );\n  }\n}\n\nconst StyledNavTabs = styled(NavTabs)`\n  margin-bottom: 0;\n  /* Makes sure the tabs are pushed into another row */\n  width: 100%;\n`;\n\nconst TransactionName = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n`;\n\nexport default TransactionHeader;\n","import {useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {PerformanceEventViewProvider} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {getTransactionName} from '../utils';\n\nimport TransactionHeader from './header';\nimport Tab from './tabs';\nimport {TransactionThresholdMetric} from './transactionThresholdModal';\n\nexport type ChildProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  setError: React.Dispatch<React.SetStateAction<string | undefined>>;\n  transactionName: string;\n  // These are used to trigger a reload when the threshold/metric changes.\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype Props = {\n  childComponent: (props: ChildProps) => JSX.Element;\n  generateEventView: (props: {location: Location; transactionName: string}) => EventView;\n  getDocumentTitle: (name: string) => string;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  tab: Tab;\n  features?: string[];\n  maxPickableDays?: number;\n  relativeDateOptions?: Record<string, React.ReactNode>;\n};\n\nfunction PageLayout(props: Props) {\n  const {\n    location,\n    organization,\n    projects,\n    tab,\n    getDocumentTitle,\n    generateEventView,\n    childComponent: ChildComponent,\n    relativeDateOptions,\n    maxPickableDays,\n    features = [],\n  } = props;\n\n  const projectId = decodeScalar(location.query.project);\n  const transactionName = getTransactionName(location);\n  const [error, setError] = useState<string | undefined>();\n  const [transactionThreshold, setTransactionThreshold] = useState<number | undefined>();\n  const [transactionThresholdMetric, setTransactionThresholdMetric] = useState<\n    TransactionThresholdMetric | undefined\n  >();\n\n  const [incompatibleAlertNotice, setIncompatibleAlertNotice] =\n    useState<React.ReactNode>(null);\n\n  if (!defined(projectId) || !defined(transactionName)) {\n    redirectToPerformanceHomepage(organization, location);\n    return null;\n  }\n\n  const project = projects.find(p => p.id === projectId);\n\n  const handleIncompatibleQuery = (incompatibleAlertNoticeFn, _errors) => {\n    const notice = incompatibleAlertNoticeFn(() => setIncompatibleAlertNotice(null));\n    setIncompatibleAlertNotice(notice);\n  };\n\n  const eventView = generateEventView({location, transactionName});\n\n  return (\n    <SentryDocumentTitle\n      title={getDocumentTitle(transactionName)}\n      orgSlug={organization.slug}\n      projectSlug={project?.slug}\n    >\n      <Feature\n        features={['performance-view', ...features]}\n        organization={organization}\n        renderDisabled={NoAccess}\n      >\n        <PerformanceEventViewProvider value={{eventView}}>\n          <PageFiltersContainer\n            lockedMessageSubject={t('transaction')}\n            shouldForceProject={defined(project)}\n            forceProject={project}\n            specificProjectSlugs={defined(project) ? [project.slug] : []}\n            disableMultipleProjectSelection\n            showProjectSettingsLink\n            relativeDateOptions={relativeDateOptions}\n            maxPickableDays={maxPickableDays}\n            hideGlobalHeader\n          >\n            <StyledPageContent>\n              <NoProjectMessage organization={organization}>\n                <TransactionHeader\n                  eventView={eventView}\n                  location={location}\n                  organization={organization}\n                  projects={projects}\n                  projectId={projectId}\n                  transactionName={transactionName}\n                  currentTab={tab}\n                  hasWebVitals={tab === Tab.WebVitals ? 'yes' : 'maybe'}\n                  handleIncompatibleQuery={handleIncompatibleQuery}\n                  onChangeThreshold={(threshold, metric) => {\n                    setTransactionThreshold(threshold);\n                    setTransactionThresholdMetric(metric);\n                  }}\n                />\n                <Layout.Body>\n                  {defined(error) && (\n                    <StyledAlert type=\"error\" showIcon>\n                      {error}\n                    </StyledAlert>\n                  )}\n                  {incompatibleAlertNotice && (\n                    <Layout.Main fullWidth>{incompatibleAlertNotice}</Layout.Main>\n                  )}\n                  <ChildComponent\n                    location={location}\n                    organization={organization}\n                    projects={projects}\n                    eventView={eventView}\n                    projectId={projectId}\n                    transactionName={transactionName}\n                    setError={setError}\n                    transactionThreshold={transactionThreshold}\n                    transactionThresholdMetric={transactionThresholdMetric}\n                  />\n                </Layout.Body>\n              </NoProjectMessage>\n            </StyledPageContent>\n          </PageFiltersContainer>\n        </PerformanceEventViewProvider>\n      </Feature>\n    </SentryDocumentTitle>\n  );\n}\n\nexport function NoAccess() {\n  return <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>;\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst StyledAlert = styled(Alert)`\n  grid-column: 1/3;\n  margin: 0;\n`;\n\nexport function redirectToPerformanceHomepage(\n  organization: Organization,\n  location: Location\n) {\n  // If there is no transaction name, redirect to the Performance landing page\n  browserHistory.replace({\n    pathname: `/organizations/${organization.slug}/performance/`,\n    query: {\n      ...location.query,\n    },\n  });\n}\n\nexport default PageLayout;\n","enum Tab {\n  TransactionSummary,\n  WebVitals,\n  Tags,\n  Events,\n  Spans,\n  Anomalies,\n}\n\nexport default Tab;\n","import {Location, Query} from 'history';\n\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AnomalyConfidence} from 'sentry/utils/performance/anomalies/anomaliesQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nexport function generateAnomaliesRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/anomalies/`;\n}\n\nexport const ANOMALY_FLAG = 'performance-anomaly-detection-ui';\n\nexport function anomaliesRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateAnomaliesRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport function anomalyToColor(anomalyConfidence: AnomalyConfidence, theme: Theme) {\n  // Map inside function so it's reactive to theme.\n  const map: Record<AnomalyConfidence, string> = {\n    high: theme.red300,\n    low: theme.yellow300,\n  };\n  return map[anomalyConfidence];\n}\n\nexport function generateAnomaliesEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  const eventView = EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields: ['tpm()'], // TODO(k-fish): Modify depending on api url later.\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n\n  return eventView;\n}\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","export enum SpanSortPercentiles {\n  P50_EXCLUSIVE_TIME = 'p50ExclusiveTime',\n  P75_EXCLUSIVE_TIME = 'p75ExclusiveTime',\n  P95_EXCLUSIVE_TIME = 'p95ExclusiveTime',\n  P99_EXCLUSIVE_TIME = 'p99ExclusiveTime',\n}\n\nexport enum SpanSortOthers {\n  COUNT = 'count',\n  AVG_OCCURRENCE = 'avgOccurrence',\n  SUM_EXCLUSIVE_TIME = 'sumExclusiveTime',\n}\n\nexport type SpanSort = SpanSortPercentiles | SpanSortOthers;\n\nexport type SpanSortOption = {\n  field: SpanSort;\n  label: string;\n  prefix: string;\n};\n\nexport type SpansTotalValues = {\n  'count()': number;\n};\n","import {Location, Query} from 'history';\nimport pick from 'lodash/pick';\n\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {SpanSort, SpanSortOption, SpanSortOthers, SpanSortPercentiles} from './types';\n\nexport function generateSpansRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/spans/`;\n}\n\nexport function spansRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpansRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport const SPAN_RETENTION_DAYS = 30;\n\nexport const SPAN_RELATIVE_PERIODS = pick(DEFAULT_RELATIVE_PERIODS, [\n  '1h',\n  '24h',\n  '7d',\n  '14d',\n  '30d',\n]);\n\nexport const SPAN_SORT_OPTIONS: SpanSortOption[] = [\n  {\n    prefix: t('Sort By'),\n    label: t('Total Self Time'),\n    field: SpanSortOthers.SUM_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Average Count'),\n    field: SpanSortOthers.AVG_OCCURRENCE,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Total Count'),\n    field: SpanSortOthers.COUNT,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p50 Self Time'),\n    field: SpanSortPercentiles.P50_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p75 Self Time'),\n    field: SpanSortPercentiles.P75_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p95 Self Time'),\n    field: SpanSortPercentiles.P95_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p99 Self Time'),\n    field: SpanSortPercentiles.P99_EXCLUSIVE_TIME,\n  },\n];\n\nconst DEFAULT_SORT = SpanSortOthers.SUM_EXCLUSIVE_TIME;\n\nfunction getSuspectSpanSort(sort: string): SpanSortOption {\n  const selected = SPAN_SORT_OPTIONS.find(option => option.field === sort);\n  if (selected) {\n    return selected;\n  }\n  return SPAN_SORT_OPTIONS.find(option => option.field === DEFAULT_SORT)!;\n}\n\nexport function getSuspectSpanSortFromLocation(\n  location: Location,\n  sortKey: string = 'sort'\n): SpanSortOption {\n  const sort = decodeScalar(location?.query?.[sortKey]) ?? DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function getSuspectSpanSortFromEventView(eventView: EventView): SpanSortOption {\n  const sort = eventView.sorts.length ? eventView.sorts[0].field : DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function parseSpanSlug(spanSlug: string | undefined): SpanSlug | undefined {\n  if (!defined(spanSlug)) {\n    return undefined;\n  }\n\n  const delimiterPos = spanSlug.lastIndexOf(':');\n  if (delimiterPos < 0) {\n    return undefined;\n  }\n\n  const op = spanSlug.slice(0, delimiterPos);\n  const group = spanSlug.slice(delimiterPos + 1);\n\n  return {op, group};\n}\n\nexport function generateSpansEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  const eventView = EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields: [...Object.values(SpanSortOthers), ...Object.values(SpanSortPercentiles)],\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n\n  const sort = getSuspectSpanSortFromLocation(location);\n  return eventView.withSorts([{field: sort.field, kind: 'desc'}]);\n}\n\n/**\n * For the totals view, we want to get some transaction level stats like\n * the number of transactions and the sum of the transaction duration.\n * This requires the removal of any aggregate conditions as they can result\n * in unexpected empty responses.\n */\nexport function getTotalsView(eventView: EventView): EventView {\n  const totalsView = eventView.withColumns([\n    {kind: 'function', function: ['count', '', undefined, undefined]},\n  ]);\n\n  const conditions = new MutableSearch(eventView.query);\n\n  // filter out any aggregate conditions\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  totalsView.query = conditions.formatString();\n  return totalsView;\n}\n\nexport const SPAN_SORT_TO_FIELDS: Record<SpanSort, string[]> = {\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'equation|count() / count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.COUNT]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.5)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.95)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.99)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n};\n\nexport function getExclusiveTimeDisplayedValue(value: string): string {\n  return value.replace('exclusive', 'self');\n}\n","import {Location, Query} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nexport function generateTagsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/tags/`;\n}\n\nexport function decodeSelectedTagKey(location: Location): string | undefined {\n  return decodeScalar(location.query.tagKey);\n}\n\nexport function trackTagPageInteraction(organization: Organization) {\n  trackAnalyticsEvent({\n    eventKey: 'performance_views.tags.interaction',\n    eventName: 'Performance Views: Tag Page - Interaction',\n    organization_id: parseInt(organization.id, 10),\n  });\n}\n\nexport function tagsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateTagsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      tagKey: query.tagKey,\n    },\n  };\n}\n\nexport function getTagSortForTagsPage(location: Location) {\n  // Retrieves the tag from the same query param segment explorer uses, but removes columns that aren't supported.\n  let tagSort = decodeScalar(location.query?.tagSort) ?? '-frequency';\n\n  if (['sumdelta'].find(denied => tagSort?.includes(denied))) {\n    tagSort = '-frequency';\n  }\n\n  return tagSort;\n}\n\n// TODO(k-fish): Improve meta of backend response to return these directly\nexport function parseHistogramBucketInfo(row: {[key: string]: React.ReactText}) {\n  const field = Object.keys(row).find(f => f.includes('histogram'));\n  if (!field) {\n    return undefined;\n  }\n  const parts = field.split('_');\n  return {\n    histogramField: field,\n    bucketSize: parseInt(parts[parts.length - 3], 10),\n    offset: parseInt(parts[parts.length - 2], 10),\n    multiplier: parseInt(parts[parts.length - 1], 10),\n  };\n}\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n","import type {ECharts} from 'echarts';\nimport {Query} from 'history';\n\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {getBucketWidth} from 'sentry/utils/performance/histogram/utils';\nimport {VitalsData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\n\nimport {Point, Rectangle} from './types';\n\nexport function generateVitalsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/vitals/`;\n}\n\nexport function vitalsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\n/**\n * Given a value on the x-axis, return the index of the nearest bucket or null\n * if it cannot be found.\n *\n * A bucket contains a range of values, and nearest is defined as the bucket the\n * value will fall in.\n */\nexport function findNearestBucketIndex(\n  chartData: HistogramData,\n  xAxis: number\n): number | null {\n  const width = getBucketWidth(chartData);\n  // it's possible that the data is not available yet or the x axis is out of range\n  if (!chartData.length || xAxis >= chartData[chartData.length - 1].bin + width) {\n    return null;\n  }\n  if (xAxis < chartData[0].bin) {\n    return -1;\n  }\n\n  return Math.floor((xAxis - chartData[0].bin) / width);\n}\n\n/**\n * To compute pixel coordinates, we need at least 2 unique points on the chart.\n * The two points must have different x axis and y axis values for it to work.\n *\n * If all bars have the same y value, pick the most naive reference rect. This\n * may result in floating point errors, but should be okay for our purposes.\n */\nexport function getRefRect(chartData: HistogramData): Rectangle | null {\n  // not enough points to construct 2 reference points\n  if (chartData.length < 2) {\n    return null;\n  }\n\n  for (let i = 0; i < chartData.length; i++) {\n    const data1 = chartData[i];\n    for (let j = i + 1; j < chartData.length; j++) {\n      const data2 = chartData[j];\n\n      if (data1.bin !== data2.bin && data1.count !== data2.count) {\n        return {\n          point1: {x: i, y: Math.min(data1.count, data2.count)},\n          point2: {x: j, y: Math.max(data1.count, data2.count)},\n        };\n      }\n    }\n  }\n\n  // all data points have the same count, just pick any 2 histogram bins\n  // and use 0 and 1 as the count as we can rely on them being on the graph\n  return {\n    point1: {x: 0, y: 0},\n    point2: {x: 1, y: 1},\n  };\n}\n\n/**\n * Given an ECharts instance and a rectangle defined in terms of the x and y axis,\n * compute the corresponding pixel coordinates. If it cannot be done, return null.\n */\nexport function asPixelRect(chartRef: ECharts, dataRect: Rectangle): Rectangle | null {\n  const point1 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point1.x,\n    dataRect.point1.y,\n  ]);\n\n  if (isNaN(point1?.[0]) || isNaN(point1?.[1])) {\n    return null;\n  }\n\n  const point2 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point2.x,\n    dataRect.point2.y,\n  ]);\n\n  if (isNaN(point2?.[0]) || isNaN(point2?.[1])) {\n    return null;\n  }\n\n  return {\n    point1: {x: point1[0], y: point1[1]},\n    point2: {x: point2[0], y: point2[1]},\n  };\n}\n\n/**\n * Given a point on a source rectangle, map it to the corresponding point on the\n * destination rectangle. Assumes that the two rectangles are related by a simple\n * transformation containing only translations and scaling.\n */\nexport function mapPoint(\n  point: Point,\n  srcRect: Rectangle,\n  destRect: Rectangle\n): Point | null {\n  if (\n    srcRect.point1.x === srcRect.point2.x ||\n    srcRect.point1.y === srcRect.point2.y ||\n    destRect.point1.x === destRect.point2.x ||\n    destRect.point1.y === destRect.point2.y\n  ) {\n    return null;\n  }\n\n  const xPercentage =\n    (point.x - srcRect.point1.x) / (srcRect.point2.x - srcRect.point1.x);\n  const yPercentage =\n    (point.y - srcRect.point1.y) / (srcRect.point2.y - srcRect.point1.y);\n\n  return {\n    x: destRect.point1.x + (destRect.point2.x - destRect.point1.x) * xPercentage,\n    y: destRect.point1.y + (destRect.point2.y - destRect.point1.y) * yPercentage,\n  };\n}\n\nexport function isMissingVitalsData(\n  vitalsData: VitalsData | null,\n  allVitals: WebVital[]\n): boolean {\n  if (!vitalsData || allVitals.some(vital => !vitalsData[vital])) {\n    return true;\n  }\n\n  const measurementsWithoutCounts = Object.values(vitalsData).filter(\n    vitalObj => vitalObj.total === 0\n  );\n  return measurementsWithoutCounts.length > 0;\n}\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","SEMVER_TAGS","has","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","getFieldDoc","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","Fragment","getBucketWidth","data","length","bin","computeBuckets","width","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","count","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","Breadcrumb","getCrumbs","crumbs","location","transaction","vitalName","spanSlug","eventSlug","traceSlug","tab","performanceTarget","pathname","getPerformanceLandingUrl","push","to","label","t","preservePageFilters","webVitalsTarget","vitalDetailRouteWithQuery","orgSlug","projectID","decodeScalar","project","routeQuery","Tab","tagsTarget","tagsRouteWithQuery","eventsTarget","eventsRouteWithQuery","vitalsRouteWithQuery","spansTarget","spansRouteWithQuery","summaryTarget","transactionSummaryRouteWithQuery","getHasMeasurementsRequestPayload","eventView","baseApiPayload","escapeDoubleQuotes","escapeFilterValue","additionalApiPayload","pick","getEventsAPIPayload","HasMeasurementsQuery","route","getRequestPayload","tableData","rest","hasMeasurements","withApi","TitleButton","isOpen","keyedTeams","keyedTeamsCount","button","icon","color","isSolid","tn","teamSlugs","join","title","TeamKeyTransactionButton","counts","getKeyedTeams","transactionName","id","TeamKeyTransactionButtonWrapper","projects","teams","initiallyLoaded","useTeams","provideUserTeams","disabled","projectId","find","proj","selectedTeams","selectedProjects","isLoading","withProjects","TransactionThresholdButton","transactionThreshold","transactionThresholdMetric","loadingThreshold","getProject","transactionThresholdUrl","requestPromise","method","includeAllArgs","threshold","metric","catch","projectThresholdUrl","err","errorMessage","responseJSON","addErrorMessage","componentDidMount","fetchTransactionThreshold","onChangeThreshold","openModal","modalProps","onApply","modalCss","backdrop","onClick","TAB_ANALYTICS","eventKey","eventName","TransactionHeader","analyticKeys","trackAnalyticsEvent","organization_id","incompatibleAlertNoticeFn","errors","trackAlertClick","handleIncompatibleQuery","status","url","window","href","renderCreateAlertButton","onIncompatibleQuery","onSuccess","handleCreateAlertSuccess","referrer","useAlertWizardV3","alertType","renderKeyTransactionButton","renderSettingsButton","target","position","renderWebVitalsTab","currentTab","hasWebVitals","vitalsTarget","isActive","trackTabClick","getCurrentLandingDisplay","LandingDisplayField","anomaliesTarget","anomaliesRouteWithQuery","p","TransactionName","avatarSize","hideName","avatarProps","hasTooltip","tooltip","gap","hasFeature","StyledNavTabs","noTooltip","NavTabs","space","PageLayout","getDocumentTitle","generateEventView","childComponent","ChildComponent","relativeDateOptions","maxPickableDays","getTransactionName","error","setError","useState","setTransactionThreshold","setTransactionThresholdMetric","incompatibleAlertNotice","setIncompatibleAlertNotice","redirectToPerformanceHomepage","projectSlug","renderDisabled","NoAccess","lockedMessageSubject","shouldForceProject","forceProject","specificProjectSlugs","disableMultipleProjectSelection","showProjectSettingsLink","hideGlobalHeader","StyledPageContent","_errors","notice","StyledAlert","showIcon","fullWidth","PageContent","Alert","browserHistory","ANOMALY_FLAG","generateAnomaliesRoute","environment","statsPeriod","anomalyToColor","anomalyConfidence","theme","high","red300","low","yellow300","generateAnomaliesEventView","conditions","MutableSearch","setFilterValues","EventView","version","formatString","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","toFixed","sort","kind","filterToField","p100","decodeEventsDisplayFilterFromLocation","option","showTransactions","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","SpanSortPercentiles","SpanSortOthers","generateSpansRoute","SPAN_RETENTION_DAYS","SPAN_RELATIVE_PERIODS","DEFAULT_RELATIVE_PERIODS","SPAN_SORT_OPTIONS","prefix","DEFAULT_SORT","getSuspectSpanSort","getSuspectSpanSortFromLocation","sortKey","getSuspectSpanSortFromEventView","sorts","parseSpanSlug","delimiterPos","lastIndexOf","op","slice","group","generateSpansEventView","filters","forEach","removeFilter","withSorts","getTotalsView","totalsView","withColumns","function","SPAN_SORT_TO_FIELDS","getExclusiveTimeDisplayedValue","decodeSelectedTagKey","tagKey","trackTagPageInteraction","parseInt","generateTagsRoute","getTagSortForTagsPage","tagSort","denied","parseHistogramBucketInfo","row","f","parts","split","histogramField","bucketSize","offset","multiplier","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","event","preventDefault","closeModal","non_field_errors","prevState","newState","cloneDeep","set","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","stacked","required","options","onChange","handleFieldChange","pattern","step","min","Header","Body","Footer","summaryView","clone","getQueryWithAdditionalConditions","generateQueryStringObject","closeButton","Instruction","tct","projectSettings","priority","handleReset","handleApply","generateVitalsRoute","findNearestBucketIndex","chartData","xAxis","floor","getRefRect","i","data1","j","data2","point1","x","y","point2","max","asPixelRect","chartRef","dataRect","convertToPixel","xAxisIndex","yAxisIndex","isNaN","mapPoint","point","srcRect","destRect","xPercentage","yPercentage","isMissingVitalsData","vitalsData","allVitals","some","vital","vitalObj","total"],"sourceRoot":""}