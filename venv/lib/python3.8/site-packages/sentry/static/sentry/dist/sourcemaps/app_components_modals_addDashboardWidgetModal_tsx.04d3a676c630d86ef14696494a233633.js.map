{"version":3,"file":"chunks/app_components_modals_addDashboardWidgetModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/dashboards/issueWidgetQueriesForm.tsx","webpack:///./app/components/modals/addDashboardWidgetModal.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/utils.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/tabsButtonBar.tsx","webpack:///./app/utils/performance/spanOperationBreakdowns/constants.tsx","webpack:///./app/utils/withIssueTags.tsx","webpack:///./app/views/dashboardsV2/data.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/issuesSearchBar.tsx","webpack:///./app/views/issueList/searchBar.tsx"],"sourcesContent":["import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, SelectValue} from 'sentry/types';\nimport {\n  explodeField,\n  generateFieldAsString,\n  getColumnsAndAggregates,\n} from 'sentry/utils/discover/fields';\nimport {DisplayType, WidgetQuery, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {IssuesSearchBar} from 'sentry/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/issuesSearchBar';\nimport {generateIssueWidgetOrderOptions} from 'sentry/views/dashboardsV2/widgetBuilder/issueWidget/utils';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\nimport {IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport WidgetQueryFields from './widgetQueryFields';\n\ntype Props = {\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  onChange: (widgetQuery: WidgetQuery) => void;\n  organization: Organization;\n  query: WidgetQuery;\n  selection: PageFilters;\n  error?: Record<string, any>;\n};\n\ntype State = {\n  blurTimeout?: number | null;\n};\n\n/**\n * Contain widget queries interactions and signal changes via the onChange\n * callback. This component's state should live in the parent.\n */\nclass IssueWidgetQueriesForm extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      blurTimeout: undefined,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.state.blurTimeout) {\n      window.clearTimeout(this.state.blurTimeout);\n    }\n  }\n\n  // Handle scalar field values changing.\n  handleFieldChange = (field: string) => {\n    const {query, onChange} = this.props;\n    const widgetQuery = query;\n\n    return function handleChange(value: string) {\n      const newQuery = {...widgetQuery, [field]: value};\n      onChange(newQuery);\n    };\n  };\n\n  render() {\n    const {organization, error, query, selection, fieldOptions, onChange} = this.props;\n    const explodedFields = (query.fields ?? [...query.columns, ...query.aggregates]).map(\n      field => explodeField({field})\n    );\n\n    return (\n      <QueryWrapper>\n        <Field\n          label={t('Query')}\n          inline={false}\n          style={{paddingBottom: `8px`}}\n          flexibleControlStateSize\n          stacked\n          error={error?.conditions}\n        >\n          <SearchConditionsWrapper>\n            <IssuesSearchBar\n              query={query}\n              selection={selection}\n              organization={organization}\n              onSearch={field => {\n                // IssueListSearchBar will call handlers for both onSearch and onBlur\n                // when selecting a value from the autocomplete dropdown. This can\n                // cause state issues for the search bar in our use case. To prevent\n                // this, we set a timer in our onSearch handler to block our onBlur\n                // handler from firing if it is within 200ms, ie from clicking an\n                // autocomplete value.\n                if (this.state.blurTimeout) {\n                  window.clearTimeout(this.state.blurTimeout);\n                }\n                this.setState({\n                  blurTimeout: window.setTimeout(() => {\n                    this.setState({blurTimeout: undefined});\n                  }, 200),\n                });\n                return this.handleFieldChange('conditions')(field);\n              }}\n              onBlur={field => {\n                if (!this.state.blurTimeout) {\n                  this.handleFieldChange('conditions')(field);\n                }\n              }}\n            />\n          </SearchConditionsWrapper>\n        </Field>\n        <WidgetQueryFields\n          widgetType={WidgetType.ISSUE}\n          displayType={DisplayType.TABLE}\n          fieldOptions={fieldOptions}\n          errors={error}\n          fields={explodedFields}\n          organization={organization}\n          onChange={fields => {\n            const fieldStrings = fields.map(field => generateFieldAsString(field));\n            const newQuery = cloneDeep(query);\n            newQuery.fields = fieldStrings;\n            const {columns, aggregates} = getColumnsAndAggregates(fieldStrings);\n            newQuery.aggregates = aggregates;\n            newQuery.columns = columns;\n\n            onChange(newQuery);\n          }}\n        />\n        <Field\n          label={t('Sort by')}\n          inline={false}\n          flexibleControlStateSize\n          stacked\n          error={error?.orderby}\n          style={{marginBottom: space(1)}}\n        >\n          <SelectControl\n            value={query.orderby || IssueSortOptions.DATE}\n            name=\"orderby\"\n            options={generateIssueWidgetOrderOptions(\n              organization?.features?.includes('issue-list-trend-sort')\n            )}\n            onChange={(option: SelectValue<string>) =>\n              this.handleFieldChange('orderby')(option.value)\n            }\n          />\n        </Field>\n      </QueryWrapper>\n    );\n  }\n}\n\nconst QueryWrapper = styled('div')`\n  position: relative;\n  padding-bottom: 16px;\n`;\n\nexport const SearchConditionsWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nexport default IssueWidgetQueriesForm;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pick from 'lodash/pick';\nimport set from 'lodash/set';\n\nimport {validateWidget} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport IssueWidgetQueriesForm from 'sentry/components/dashboards/issueWidgetQueriesForm';\nimport WidgetQueriesForm from 'sentry/components/dashboards/widgetQueriesForm';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport Input from 'sentry/components/forms/controls/input';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport Field from 'sentry/components/forms/field';\nimport FieldLabel from 'sentry/components/forms/field/fieldLabel';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {PanelAlert} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  DateString,\n  Organization,\n  PageFilters,\n  SelectValue,\n  SessionField,\n  TagCollection,\n} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {getColumnsAndAggregates} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport {SPAN_OP_BREAKDOWN_FIELDS} from 'sentry/utils/performance/spanOperationBreakdowns/constants';\nimport withApi from 'sentry/utils/withApi';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withTags from 'sentry/utils/withTags';\nimport {DISPLAY_TYPE_CHOICES} from 'sentry/views/dashboardsV2/data';\nimport {assignTempId} from 'sentry/views/dashboardsV2/layoutUtils';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DashboardWidgetSource,\n  DisplayType,\n  MAX_WIDGETS,\n  Widget,\n  WidgetQuery,\n  WidgetType,\n} from 'sentry/views/dashboardsV2/types';\nimport {generateIssueWidgetFieldOptions} from 'sentry/views/dashboardsV2/widgetBuilder/issueWidget/utils';\nimport {\n  generateReleaseWidgetFieldOptions,\n  SESSIONS_FIELDS,\n  SESSIONS_TAGS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/releaseWidget/fields';\nimport {\n  mapErrors,\n  NEW_DASHBOARD_ID,\n  normalizeQueries,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport WidgetCard from 'sentry/views/dashboardsV2/widgetCard';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport {TAB, TabsButtonBar} from './dashboardWidgetLibraryModal/tabsButtonBar';\n\nexport type DashboardWidgetModalOptions = {\n  organization: Organization;\n  source: DashboardWidgetSource;\n  dashboard?: DashboardDetails;\n  defaultTableColumns?: readonly string[];\n  defaultTitle?: string;\n  defaultWidgetQuery?: WidgetQuery;\n  displayType?: DisplayType;\n  end?: DateString;\n  onAddLibraryWidget?: (widgets: Widget[]) => void;\n  onAddWidget?: (data: Widget) => void;\n  onUpdateWidget?: (nextWidget: Widget) => void;\n  selectedWidgets?: WidgetTemplate[];\n  selection?: PageFilters;\n  start?: DateString;\n  statsPeriod?: string | null;\n  widget?: Widget;\n};\n\ntype Props = ModalRenderProps &\n  DashboardWidgetModalOptions & {\n    api: Client;\n    organization: Organization;\n    selection: PageFilters;\n    tags: TagCollection;\n  };\n\ntype FlatValidationError = {\n  [key: string]: string | FlatValidationError[] | FlatValidationError;\n};\n\ntype State = {\n  dashboards: DashboardListItem[];\n  displayType: Widget['displayType'];\n  interval: Widget['interval'];\n  loading: boolean;\n  queries: Widget['queries'];\n  title: string;\n  userHasModified: boolean;\n  widgetType: WidgetType;\n  errors?: Record<string, any>;\n  selectedDashboard?: SelectValue<string>;\n};\n\nconst newDiscoverQuery: WidgetQuery = {\n  name: '',\n  fields: ['count()'],\n  columns: [],\n  aggregates: ['count()'],\n  conditions: '',\n  orderby: '',\n};\n\nconst newIssueQuery: WidgetQuery = {\n  name: '',\n  fields: ['issue', 'assignee', 'title'] as string[],\n  columns: ['issue', 'assignee', 'title'],\n  aggregates: [],\n  conditions: '',\n  orderby: '',\n};\n\nconst newMetricsQuery: WidgetQuery = {\n  name: '',\n  fields: [`crash_free_rate(${SessionField.SESSION})`],\n  columns: [],\n  aggregates: [`crash_free_rate(${SessionField.SESSION})`],\n  conditions: '',\n  orderby: '',\n};\n\nconst DiscoverDataset: [WidgetType, string] = [\n  WidgetType.DISCOVER,\n  t('All Events (Errors and Transactions)'),\n];\nconst IssueDataset: [WidgetType, string] = [\n  WidgetType.ISSUE,\n  t('Issues (States, Assignment, Time, etc.)'),\n];\nconst MetricsDataset: [WidgetType, React.ReactElement] = [\n  WidgetType.RELEASE,\n  <Fragment key=\"metrics-dataset\">\n    {t('Health (Releases, sessions)')} <FeatureBadge type=\"alpha\" />\n  </Fragment>,\n];\n\nclass AddDashboardWidgetModal extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const {widget, defaultTitle, displayType, defaultWidgetQuery} = props;\n    if (!widget) {\n      this.state = {\n        title: defaultTitle ?? '',\n        displayType: displayType ?? DisplayType.TABLE,\n        interval: '5m',\n        queries: [defaultWidgetQuery ? {...defaultWidgetQuery} : {...newDiscoverQuery}],\n        errors: undefined,\n        loading: !!this.omitDashboardProp,\n        dashboards: [],\n        userHasModified: false,\n        widgetType: WidgetType.DISCOVER,\n      };\n      return;\n    }\n\n    this.state = {\n      title: widget.title,\n      displayType: widget.displayType,\n      interval: widget.interval,\n      queries: normalizeQueries({\n        displayType: widget.displayType,\n        queries: widget.queries,\n      }),\n      errors: undefined,\n      loading: false,\n      dashboards: [],\n      userHasModified: false,\n      widgetType: widget.widgetType ?? WidgetType.DISCOVER,\n    };\n  }\n\n  componentDidMount() {\n    if (this.omitDashboardProp) {\n      this.fetchDashboards();\n    }\n  }\n\n  get omitDashboardProp() {\n    // when opening from discover or issues page, the user selects the dashboard in the widget UI\n    return [\n      DashboardWidgetSource.DISCOVERV2,\n      DashboardWidgetSource.ISSUE_DETAILS,\n    ].includes(this.props.source);\n  }\n\n  get fromLibrary() {\n    return this.props.source === DashboardWidgetSource.LIBRARY;\n  }\n\n  handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {\n      api,\n      closeModal,\n      organization,\n      onAddWidget,\n      onUpdateWidget,\n      widget: previousWidget,\n      source,\n    } = this.props;\n    this.setState({loading: true});\n    let errors: FlatValidationError = {};\n    const widgetData: Widget = assignTempId(\n      pick(this.state, ['title', 'displayType', 'interval', 'queries', 'widgetType'])\n    );\n    if (previousWidget) {\n      widgetData.layout = previousWidget?.layout;\n    }\n    // Only Table and Top N views need orderby\n    if (![DisplayType.TABLE, DisplayType.TOP_N].includes(widgetData.displayType)) {\n      widgetData.queries.forEach(query => {\n        query.orderby = '';\n      });\n    }\n    try {\n      await validateWidget(api, organization.slug, widgetData);\n      if (typeof onUpdateWidget === 'function' && !!previousWidget) {\n        onUpdateWidget({\n          id: previousWidget?.id,\n          layout: previousWidget?.layout,\n          ...widgetData,\n        });\n        addSuccessMessage(t('Updated widget.'));\n        trackAdvancedAnalyticsEvent('dashboards_views.edit_widget_modal.confirm', {\n          organization,\n        });\n      } else if (onAddWidget) {\n        onAddWidget(widgetData);\n        addSuccessMessage(t('Added widget.'));\n        trackAdvancedAnalyticsEvent('dashboards_views.add_widget_modal.confirm', {\n          organization,\n          data_set: widgetData.widgetType ?? WidgetType.DISCOVER,\n        });\n      }\n      if (source === DashboardWidgetSource.DASHBOARDS) {\n        closeModal();\n      }\n    } catch (err) {\n      errors = mapErrors(err?.responseJSON ?? {}, {});\n      this.setState({errors});\n    } finally {\n      this.setState({loading: false});\n      if (this.omitDashboardProp) {\n        this.handleSubmitFromSelectedDashboard(errors, widgetData);\n      }\n      if (this.fromLibrary) {\n        this.handleSubmitFromLibrary(errors, widgetData);\n      }\n    }\n  };\n\n  handleSubmitFromSelectedDashboard = (\n    errors: FlatValidationError,\n    widgetData: Widget\n  ) => {\n    const {closeModal, organization, selection} = this.props;\n    const {selectedDashboard, dashboards} = this.state;\n    // Validate that a dashboard was selected since api call to /dashboards/widgets/ does not check for dashboard\n    if (\n      !selectedDashboard ||\n      !(\n        dashboards.find(({title, id}) => {\n          return title === selectedDashboard?.label && id === selectedDashboard?.value;\n        }) || selectedDashboard.value === NEW_DASHBOARD_ID\n      )\n    ) {\n      errors.dashboard = t('This field may not be blank');\n      this.setState({errors});\n    }\n    if (!Object.keys(errors).length && selectedDashboard) {\n      closeModal();\n\n      const queryData: {\n        queryConditions: string[];\n        queryFields: string[];\n        queryNames: string[];\n        queryOrderby: string;\n      } = {\n        queryNames: [],\n        queryConditions: [],\n        queryFields: [\n          ...widgetData.queries[0].columns,\n          ...widgetData.queries[0].aggregates,\n        ],\n        queryOrderby: widgetData.queries[0].orderby,\n      };\n      widgetData.queries.forEach(query => {\n        queryData.queryNames.push(query.name);\n        queryData.queryConditions.push(query.conditions);\n      });\n      const pathQuery = {\n        displayType: widgetData.displayType,\n        interval: widgetData.interval,\n        title: widgetData.title,\n        ...queryData,\n        // Propagate page filters\n        ...selection.datetime,\n        project: selection.projects,\n        environment: selection.environments,\n      };\n\n      trackAdvancedAnalyticsEvent('discover_views.add_to_dashboard.confirm', {\n        organization,\n      });\n\n      if (selectedDashboard.value === NEW_DASHBOARD_ID) {\n        browserHistory.push({\n          pathname: `/organizations/${organization.slug}/dashboards/new/`,\n          query: pathQuery,\n        });\n      } else {\n        browserHistory.push({\n          pathname: `/organizations/${organization.slug}/dashboard/${selectedDashboard.value}/`,\n          query: pathQuery,\n        });\n      }\n    }\n  };\n\n  handleSubmitFromLibrary = (errors: FlatValidationError, widgetData: Widget) => {\n    const {closeModal, dashboard, onAddLibraryWidget, organization} = this.props;\n    if (!dashboard) {\n      errors.dashboard = t('This field may not be blank');\n      this.setState({errors});\n      addErrorMessage(t('Widget may only be added to a Dashboard'));\n    }\n\n    if (!Object.keys(errors).length && dashboard && onAddLibraryWidget) {\n      onAddLibraryWidget([...dashboard.widgets, widgetData]);\n      closeModal();\n    }\n    trackAdvancedAnalyticsEvent('dashboards_views.add_widget_modal.save', {\n      organization,\n      data_set: widgetData.widgetType ?? WidgetType.DISCOVER,\n    });\n  };\n\n  handleDefaultFields = (newDisplayType: DisplayType) => {\n    const {displayType, defaultWidgetQuery, defaultTableColumns, widget} = this.props;\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      const normalized = normalizeQueries({\n        displayType: newDisplayType,\n        queries: prevState.queries,\n      });\n\n      if (newDisplayType === DisplayType.TOP_N) {\n        // TOP N display should only allow a single query\n        normalized.splice(1);\n      }\n\n      if (\n        newDisplayType === DisplayType.WORLD_MAP &&\n        prevState.widgetType === WidgetType.RELEASE\n      ) {\n        // World Map display type only supports Discover Dataset\n        // so set state to default discover query.\n        set(\n          newState,\n          'queries',\n          normalizeQueries({\n            displayType: newDisplayType,\n            queries: [newDiscoverQuery],\n          })\n        );\n        set(newState, 'widgetType', WidgetType.DISCOVER);\n        return {...newState, errors: undefined};\n      }\n\n      if (!prevState.userHasModified) {\n        // If the Widget is an issue widget,\n        if (\n          newDisplayType === DisplayType.TABLE &&\n          widget?.widgetType === WidgetType.ISSUE\n        ) {\n          set(newState, 'queries', widget.queries);\n          set(newState, 'widgetType', WidgetType.ISSUE);\n          return {...newState, errors: undefined};\n        }\n\n        // Default widget provided by Add to Dashboard from Discover\n        if (defaultWidgetQuery && defaultTableColumns) {\n          // If switching to Table visualization, use saved query fields for Y-Axis if user has not made query changes\n          // This is so the widget can reflect the same columns as the table in Discover without requiring additional user input\n          if (newDisplayType === DisplayType.TABLE) {\n            normalized.forEach(query => {\n              query.fields = [...defaultTableColumns];\n              const {columns, aggregates} = getColumnsAndAggregates([\n                ...defaultTableColumns,\n              ]);\n              query.aggregates = aggregates;\n              query.columns = columns;\n            });\n          } else if (newDisplayType === displayType) {\n            // When switching back to original display type, default fields back to the fields provided from the discover query\n            normalized.forEach(query => {\n              query.aggregates = [...defaultWidgetQuery.aggregates];\n              query.columns = [...defaultWidgetQuery.columns];\n              query.fields = defined(defaultWidgetQuery.fields)\n                ? [...defaultWidgetQuery.fields]\n                : [...defaultWidgetQuery.columns, ...defaultWidgetQuery.aggregates];\n              query.orderby = defaultWidgetQuery.orderby;\n            });\n          }\n        }\n      }\n\n      if (prevState.widgetType === WidgetType.ISSUE) {\n        set(newState, 'widgetType', WidgetType.DISCOVER);\n      }\n      set(newState, 'queries', normalized);\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    const {organization, source} = this.props;\n    const {displayType} = this.state;\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      trackAdvancedAnalyticsEvent('dashboards_views.add_widget_modal.change', {\n        from: source,\n        field,\n        value,\n        widget_type: prevState.widgetType,\n        organization,\n      });\n\n      return {...newState, errors: undefined};\n    });\n\n    if (field === 'displayType' && value !== displayType) {\n      this.handleDefaultFields(value as DisplayType);\n    }\n  };\n\n  handleQueryChange = (widgetQuery: WidgetQuery, index: number) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, `queries.${index}`, widgetQuery);\n      set(newState, 'userHasModified', true);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleQueryRemove = (index: number) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      newState.queries.splice(index, 1);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleAddSearchConditions = () => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      const query = cloneDeep(newDiscoverQuery);\n      query.fields = this.state.queries[0].fields;\n      query.aggregates = this.state.queries[0].aggregates;\n      query.columns = this.state.queries[0].columns;\n      newState.queries.push(query);\n\n      return newState;\n    });\n  };\n\n  defaultQuery(widgetType: string): WidgetQuery {\n    switch (widgetType) {\n      case WidgetType.ISSUE:\n        return newIssueQuery;\n      case WidgetType.RELEASE:\n        return newMetricsQuery;\n      case WidgetType.DISCOVER:\n      default:\n        return newDiscoverQuery;\n    }\n  }\n\n  handleDatasetChange = (widgetType: string) => {\n    const {widget} = this.props;\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      newState.queries.splice(0, newState.queries.length);\n      set(newState, 'widgetType', widgetType);\n      newState.queries.push(\n        ...(widget?.widgetType === widgetType\n          ? widget.queries\n          : [this.defaultQuery(widgetType)])\n      );\n      set(newState, 'userHasModified', true);\n      return {...newState, errors: undefined};\n    });\n  };\n\n  canAddSearchConditions() {\n    const rightDisplayType = ['line', 'area', 'stacked_area', 'bar'].includes(\n      this.state.displayType\n    );\n    const underQueryLimit = this.state.queries.length < 3;\n\n    return rightDisplayType && underQueryLimit;\n  }\n\n  async fetchDashboards() {\n    const {api, organization} = this.props;\n    const promise: Promise<DashboardListItem[]> = api.requestPromise(\n      `/organizations/${organization.slug}/dashboards/`,\n      {\n        method: 'GET',\n        query: {sort: 'myDashboardsAndRecentlyViewed'},\n      }\n    );\n\n    try {\n      const dashboards = await promise;\n      this.setState({\n        dashboards,\n      });\n    } catch (error) {\n      const errorResponse = error?.responseJSON ?? null;\n      if (errorResponse) {\n        addErrorMessage(errorResponse);\n      } else {\n        addErrorMessage(t('Unable to fetch dashboards'));\n      }\n    }\n    this.setState({loading: false});\n  }\n\n  handleDashboardChange(option: SelectValue<string>) {\n    this.setState({selectedDashboard: option});\n  }\n\n  renderDashboardSelector() {\n    const {errors, loading, dashboards} = this.state;\n    const dashboardOptions = dashboards.map(d => {\n      return {\n        label: d.title,\n        value: d.id,\n        isDisabled: d.widgetDisplay.length >= MAX_WIDGETS,\n        tooltip:\n          d.widgetDisplay.length >= MAX_WIDGETS &&\n          tct('Max widgets ([maxWidgets]) per dashboard reached.', {\n            maxWidgets: MAX_WIDGETS,\n          }),\n        tooltipOptions: {position: 'right'},\n      };\n    });\n    return (\n      <Fragment>\n        <p>\n          {t(\n            `Choose which dashboard you'd like to add this query to. It will appear as a widget.`\n          )}\n        </p>\n        <Field\n          label={t('Custom Dashboard')}\n          inline={false}\n          flexibleControlStateSize\n          stacked\n          error={errors?.dashboard}\n          style={{marginBottom: space(1), position: 'relative'}}\n          required\n        >\n          <SelectControl\n            name=\"dashboard\"\n            options={[\n              {label: t('+ Create New Dashboard'), value: 'new'},\n              ...dashboardOptions,\n            ]}\n            onChange={(option: SelectValue<string>) => this.handleDashboardChange(option)}\n            disabled={loading}\n          />\n        </Field>\n      </Fragment>\n    );\n  }\n\n  renderWidgetQueryForm(\n    querySelection: PageFilters,\n    releaseWidgetFieldOptions: ReturnType<typeof generateReleaseWidgetFieldOptions>\n  ) {\n    const {organization, tags} = this.props;\n    const state = this.state;\n    const errors = state.errors;\n\n    const issueWidgetFieldOptions = generateIssueWidgetFieldOptions();\n    const fieldOptions = (measurementKeys: string[]) =>\n      generateFieldOptions({\n        organization,\n        tagKeys: Object.values(tags).map(({key}) => key),\n        measurementKeys,\n        spanOperationBreakdownKeys: SPAN_OP_BREAKDOWN_FIELDS,\n      });\n\n    switch (state.widgetType) {\n      case WidgetType.ISSUE:\n        return (\n          <Fragment>\n            <IssueWidgetQueriesForm\n              organization={organization}\n              selection={querySelection}\n              fieldOptions={issueWidgetFieldOptions}\n              query={state.queries[0]}\n              error={errors?.queries?.[0]}\n              onChange={widgetQuery => this.handleQueryChange(widgetQuery, 0)}\n            />\n            <WidgetCard\n              organization={organization}\n              selection={querySelection}\n              widget={{...this.state, displayType: DisplayType.TABLE}}\n              isEditing={false}\n              onDelete={() => undefined}\n              onEdit={() => undefined}\n              onDuplicate={() => undefined}\n              widgetLimitReached={false}\n              renderErrorMessage={errorMessage =>\n                typeof errorMessage === 'string' && (\n                  <PanelAlert type=\"error\">{errorMessage}</PanelAlert>\n                )\n              }\n              isSorting={false}\n              currentWidgetDragging={false}\n              noLazyLoad\n            />\n          </Fragment>\n        );\n\n      case WidgetType.RELEASE:\n        return (\n          <Fragment>\n            <WidgetQueriesForm\n              organization={organization}\n              selection={querySelection}\n              displayType={state.displayType}\n              widgetType={state.widgetType}\n              queries={state.queries}\n              errors={errors?.queries}\n              fieldOptions={releaseWidgetFieldOptions}\n              onChange={(queryIndex: number, widgetQuery: WidgetQuery) =>\n                this.handleQueryChange(widgetQuery, queryIndex)\n              }\n              canAddSearchConditions={this.canAddSearchConditions()}\n              handleAddSearchConditions={this.handleAddSearchConditions}\n              handleDeleteQuery={this.handleQueryRemove}\n            />\n            <WidgetCard\n              organization={organization}\n              selection={querySelection}\n              widget={this.state}\n              isEditing={false}\n              onDelete={() => undefined}\n              onEdit={() => undefined}\n              onDuplicate={() => undefined}\n              widgetLimitReached={false}\n              renderErrorMessage={errorMessage =>\n                typeof errorMessage === 'string' && (\n                  <PanelAlert type=\"error\">{errorMessage}</PanelAlert>\n                )\n              }\n              isSorting={false}\n              currentWidgetDragging={false}\n              noLazyLoad\n            />\n          </Fragment>\n        );\n      case WidgetType.DISCOVER:\n      default:\n        return (\n          <Fragment>\n            <Measurements>\n              {({measurements}) => {\n                const measurementKeys = Object.values(measurements).map(({key}) => key);\n                const amendedFieldOptions = fieldOptions(measurementKeys);\n                return (\n                  <WidgetQueriesForm\n                    organization={organization}\n                    selection={querySelection}\n                    fieldOptions={amendedFieldOptions}\n                    displayType={state.displayType}\n                    widgetType={state.widgetType}\n                    queries={state.queries}\n                    errors={errors?.queries}\n                    onChange={(queryIndex: number, widgetQuery: WidgetQuery) =>\n                      this.handleQueryChange(widgetQuery, queryIndex)\n                    }\n                    canAddSearchConditions={this.canAddSearchConditions()}\n                    handleAddSearchConditions={this.handleAddSearchConditions}\n                    handleDeleteQuery={this.handleQueryRemove}\n                  />\n                );\n              }}\n            </Measurements>\n            <WidgetCard\n              organization={organization}\n              selection={querySelection}\n              widget={this.state}\n              isEditing={false}\n              onDelete={() => undefined}\n              onEdit={() => undefined}\n              onDuplicate={() => undefined}\n              widgetLimitReached={false}\n              renderErrorMessage={errorMessage =>\n                typeof errorMessage === 'string' && (\n                  <PanelAlert type=\"error\">{errorMessage}</PanelAlert>\n                )\n              }\n              isSorting={false}\n              currentWidgetDragging={false}\n              noLazyLoad\n              showStoredAlert\n            />\n          </Fragment>\n        );\n    }\n  }\n\n  render() {\n    const {\n      Footer,\n      Body,\n      Header,\n      organization,\n      widget: previousWidget,\n      dashboard,\n      selectedWidgets,\n      onUpdateWidget,\n      onAddLibraryWidget,\n      source,\n      selection,\n      start,\n      end,\n      statsPeriod,\n    } = this.props;\n    const state = this.state;\n    const errors = state.errors;\n\n    const isUpdatingWidget = typeof onUpdateWidget === 'function' && !!previousWidget;\n\n    const showDatasetSelector =\n      [DashboardWidgetSource.DASHBOARDS, DashboardWidgetSource.LIBRARY].includes(\n        source\n      ) && state.displayType !== DisplayType.WORLD_MAP;\n\n    const showIssueDatasetSelector =\n      showDatasetSelector && state.displayType === DisplayType.TABLE;\n\n    const showMetricsDatasetSelector =\n      showDatasetSelector && organization.features.includes('dashboards-releases');\n\n    const datasetChoices: [WidgetType, React.ReactElement | string][] = [DiscoverDataset];\n\n    if (showIssueDatasetSelector) {\n      datasetChoices.push(IssueDataset);\n    }\n\n    if (showMetricsDatasetSelector) {\n      datasetChoices.push(MetricsDataset);\n    }\n\n    // Construct PageFilters object using statsPeriod/start/end props so we can\n    // render widget graph using saved timeframe from Saved/Prebuilt Query\n    const querySelection: PageFilters = statsPeriod\n      ? {...selection, datetime: {start: null, end: null, period: statsPeriod, utc: null}}\n      : start && end\n      ? {...selection, datetime: {start, end, period: null, utc: null}}\n      : selection;\n\n    const metricsWidgetFieldOptions = generateReleaseWidgetFieldOptions(\n      Object.values(SESSIONS_FIELDS),\n      SESSIONS_TAGS\n    );\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>\n            {this.omitDashboardProp\n              ? t('Add Widget to Dashboard')\n              : this.fromLibrary\n              ? t('Add Widget(s)')\n              : isUpdatingWidget\n              ? t('Edit Widget')\n              : t('Add Widget')}\n          </h4>\n        </Header>\n        <Body>\n          {this.omitDashboardProp && this.renderDashboardSelector()}\n          {this.fromLibrary && dashboard && onAddLibraryWidget ? (\n            <TabsButtonBar\n              activeTab={TAB.Custom}\n              organization={organization}\n              dashboard={dashboard}\n              selectedWidgets={selectedWidgets}\n              customWidget={this.state}\n              onAddWidget={onAddLibraryWidget}\n            />\n          ) : null}\n          <DoubleFieldWrapper>\n            <StyledField\n              data-test-id=\"widget-name\"\n              label={t('Widget Name')}\n              inline={false}\n              flexibleControlStateSize\n              stacked\n              error={errors?.title}\n              required\n            >\n              <Input\n                data-test-id=\"widget-title-input\"\n                type=\"text\"\n                name=\"title\"\n                maxLength={255}\n                required\n                value={state.title}\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                  this.handleFieldChange('title')(event.target.value);\n                }}\n                disabled={state.loading}\n              />\n            </StyledField>\n            <StyledField\n              data-test-id=\"chart-type\"\n              label={t('Visualization Display')}\n              inline={false}\n              flexibleControlStateSize\n              stacked\n              error={errors?.displayType}\n              required\n            >\n              <SelectControl\n                options={DISPLAY_TYPE_CHOICES.slice()}\n                name=\"displayType\"\n                value={state.displayType}\n                onChange={option => this.handleFieldChange('displayType')(option.value)}\n                disabled={state.loading}\n              />\n            </StyledField>\n          </DoubleFieldWrapper>\n          {(showIssueDatasetSelector || showMetricsDatasetSelector) && (\n            <Fragment>\n              <StyledFieldLabel>{t('Dataset')}</StyledFieldLabel>\n              <StyledRadioGroup\n                style={{flex: 1}}\n                choices={datasetChoices}\n                value={state.widgetType}\n                label={t('Dataset')}\n                onChange={this.handleDatasetChange}\n              />\n            </Fragment>\n          )}\n          {this.renderWidgetQueryForm(querySelection, metricsWidgetFieldOptions)}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              external\n              href=\"https://docs.sentry.io/product/dashboards/custom-dashboards/#widget-builder\"\n            >\n              {t('Read the docs')}\n            </Button>\n            <Button\n              data-test-id=\"add-widget\"\n              priority=\"primary\"\n              type=\"button\"\n              onClick={this.handleSubmit}\n              disabled={state.loading}\n              busy={state.loading}\n            >\n              {this.fromLibrary\n                ? t('Save')\n                : isUpdatingWidget\n                ? t('Update Widget')\n                : t('Add Widget')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst DoubleFieldWrapper = styled('div')`\n  display: inline-grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: ${space(1)};\n  width: 100%;\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst StyledField = styled(Field)`\n  position: relative;\n`;\n\nconst StyledRadioGroup = styled(RadioGroup)`\n  padding-bottom: ${space(2)};\n`;\n\nconst StyledFieldLabel = styled(FieldLabel)`\n  padding-bottom: ${space(1)};\n  display: inline-flex;\n`;\n\nexport default withApi(withPageFilters(withTags(AddDashboardWidgetModal)));\n","const WIDGET_LIBRARY_VISITS = 'dashboard-widget-library-visits';\n\nexport function shouldShowNewBadge(): boolean {\n  const visits = localStorage.getItem(WIDGET_LIBRARY_VISITS);\n  return visits === null || (parseInt(visits, 10) || 0) < 5;\n}\nexport function setWidgetLibraryVisit() {\n  const visits = localStorage.getItem(WIDGET_LIBRARY_VISITS);\n  localStorage.setItem(\n    WIDGET_LIBRARY_VISITS,\n    visits === null ? '1' : `${(parseInt(visits, 10) || 0) + 1}`\n  );\n}\n","import styled from '@emotion/styled';\n\nimport {\n  openAddDashboardWidgetModal,\n  openDashboardWidgetLibraryModal,\n} from 'sentry/actionCreators/modal';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {\n  DashboardDetails,\n  DashboardWidgetSource,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nimport {setWidgetLibraryVisit, shouldShowNewBadge} from './utils';\n\nexport enum TAB {\n  Library = 'library',\n  Custom = 'custom',\n}\n\ntype Props = {\n  activeTab: TAB;\n  dashboard: DashboardDetails;\n  organization: Organization;\n  customWidget?: Widget;\n  onAddWidget?: (widgets: Widget[]) => void;\n  selectedWidgets?: WidgetTemplate[];\n};\n\nexport function TabsButtonBar({\n  activeTab,\n  organization,\n  dashboard,\n  selectedWidgets,\n  customWidget,\n  onAddWidget,\n}: Props) {\n  return (\n    <StyledButtonBar active={activeTab}>\n      <CustomButton\n        barId={TAB.Custom}\n        onClick={() => {\n          if (activeTab === TAB.Custom) {\n            return;\n          }\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_library.switch_tab', {\n            organization,\n            to: TAB.Custom,\n          });\n          openAddDashboardWidgetModal({\n            organization,\n            dashboard,\n            selectedWidgets,\n            widget: customWidget,\n            source: DashboardWidgetSource.LIBRARY,\n            onAddLibraryWidget: onAddWidget,\n          });\n        }}\n      >\n        {t('Custom Widget')}\n      </CustomButton>\n      <LibraryButton\n        barId={TAB.Library}\n        data-test-id=\"library-tab\"\n        onClick={() => {\n          if (activeTab === TAB.Library) {\n            return;\n          }\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_library.switch_tab', {\n            organization,\n            to: TAB.Library,\n          });\n          setWidgetLibraryVisit();\n          if (defined(onAddWidget)) {\n            openDashboardWidgetLibraryModal({\n              organization,\n              dashboard,\n              customWidget,\n              initialSelectedWidgets: selectedWidgets,\n              onAddWidget,\n            });\n          }\n        }}\n      >\n        {t('Widget Library')}\n        {shouldShowNewBadge() && <FeatureBadge type=\"new\" />}\n      </LibraryButton>\n    </StyledButtonBar>\n  );\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  display: inline-flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst LibraryButton = styled(Button)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst CustomButton = styled(Button)`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  line-height: 17px;\n`;\n","export const SPAN_OP_BREAKDOWN_FIELDS = [\n  'spans.browser',\n  'spans.http',\n  'spans.db',\n  'spans.resource',\n];\n","import {useCallback, useEffect, useState} from 'react';\nimport assign from 'lodash/assign';\n\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport TagStore from 'sentry/stores/tagStore';\nimport TeamStore from 'sentry/stores/teamStore';\nimport {TagCollection, Team, User} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\nexport interface WithIssueTagsProps {\n  tags: TagCollection;\n}\n\nconst uuidPattern = /[0-9a-f]{32}$/;\nconst getUsername = ({isManaged, username, email}: User) => {\n  // Users created via SAML receive unique UUID usernames. Use\n  // their email in these cases, instead.\n  if (username && uuidPattern.test(username)) {\n    return email;\n  }\n  return !isManaged && username ? username : email;\n};\n\ntype WrappedComponentState = {\n  tags: TagCollection;\n  teams: Team[];\n  users: User[];\n};\n/**\n * HOC for getting tags and many useful issue attributes as 'tags' for use\n * in autocomplete selectors or condition builders.\n */\nfunction withIssueTags<Props extends WithIssueTagsProps>(\n  WrappedComponent: React.ComponentType<Props>\n) {\n  function ComponentWithTags(props: Omit<Props, keyof WithIssueTagsProps>) {\n    const [state, setState] = useState<WrappedComponentState>({\n      tags: assign(\n        {},\n        TagStore.getAllTags(),\n        TagStore.getIssueAttributes(),\n        TagStore.getBuiltInTags()\n      ),\n      users: MemberListStore.getAll(),\n      teams: TeamStore.getAll(),\n    });\n\n    const setAssigned = useCallback(\n      (newState: Partial<WrappedComponentState>) => {\n        setState(oldState => {\n          const usernames: string[] = newState.users\n            ? newState.users.map(getUsername)\n            : oldState.users.map(getUsername);\n\n          const teamnames: string[] = (newState.teams ? newState.teams : oldState.teams)\n            .filter(team => team.isMember)\n            .map(team => `#${team.slug}`);\n\n          const allAssigned = ['[me, none]', ...usernames, ...teamnames];\n          allAssigned.unshift('me');\n          usernames.unshift('me');\n\n          return {\n            ...oldState,\n            ...newState,\n            tags: {\n              ...oldState.tags,\n              ...newState.tags,\n              assigned: {\n                ...(newState.tags?.assigned ?? oldState.tags?.assigned ?? {}),\n                values: allAssigned,\n              },\n              bookmarks: {\n                ...(newState.tags?.bookmarks ?? oldState.tags?.bookmarks ?? {}),\n                values: usernames,\n              },\n              assigned_or_suggested: {\n                ...(newState.tags?.assigned_or_suggested ??\n                  oldState.tags.assigned_or_suggested ??\n                  {}),\n                values: allAssigned,\n              },\n            },\n          };\n        });\n      },\n      [state]\n    );\n\n    // Listen to team store updates and cleanup listener on unmount\n    useEffect(() => {\n      const unsubscribeTeam = TeamStore.listen(() => {\n        setAssigned({teams: TeamStore.getAll()});\n      }, undefined);\n\n      return () => unsubscribeTeam();\n    }, []);\n\n    // Listen to tag store updates and cleanup listener on unmount\n    useEffect(() => {\n      const unsubscribeTags = TagStore.listen((storeTags: TagCollection) => {\n        const tags = assign(\n          {},\n          storeTags,\n          TagStore.getIssueAttributes(),\n          TagStore.getBuiltInTags()\n        );\n\n        setAssigned({tags});\n      }, undefined);\n\n      return () => unsubscribeTags();\n    }, []);\n\n    // Listen to member store updates and cleanup listener on unmount\n    useEffect(() => {\n      const unsubscribeMembers = MemberListStore.listen((users: User[]) => {\n        setAssigned({users});\n      }, undefined);\n\n      return () => unsubscribeMembers();\n    }, []);\n\n    return <WrappedComponent {...(props as Props)} tags={state.tags} />;\n  }\n  ComponentWithTags.displayName = `withIssueTags(${getDisplayName(WrappedComponent)})`;\n  return ComponentWithTags;\n}\n\nexport default withIssueTags;\n","import {t} from 'sentry/locale';\nimport {uniqueId} from 'sentry/utils/guid';\n\nimport {DashboardDetails, DisplayType, WidgetType} from './types';\n\ntype DashboardTemplate = DashboardDetails & {\n  description: string;\n};\n\nexport const EMPTY_DASHBOARD: DashboardDetails = {\n  id: '',\n  dateCreated: '',\n  createdBy: undefined,\n  title: t('Untitled dashboard'),\n  widgets: [],\n};\n\nexport const DASHBOARDS_TEMPLATES: DashboardTemplate[] = [\n  {\n    id: 'default-template',\n    dateCreated: '',\n    createdBy: undefined,\n    title: t('General Template'),\n    description: t('Various Frontend and Backend Widgets'),\n    widgets: [\n      {\n        title: t('Number of Errors'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: '!event.type:transaction',\n            orderby: 'count()',\n          },\n        ],\n      },\n      {\n        title: t('Number of Issues'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count_unique(issue)'],\n            aggregates: ['count_unique(issue)'],\n            columns: [],\n            conditions: '!event.type:transaction',\n            orderby: 'count_unique(issue)',\n          },\n        ],\n      },\n      {\n        title: t('Events'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 4,\n          x: 2,\n          y: 0,\n        },\n        queries: [\n          {\n            name: t('Events'),\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: '!event.type:transaction',\n            orderby: 'count()',\n          },\n        ],\n      },\n      {\n        title: t('Affected Users'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 1,\n          x: 1,\n          y: 2,\n        },\n        queries: [\n          {\n            name: t('Known Users'),\n            fields: ['count_unique(user)'],\n            aggregates: ['count_unique(user)'],\n            columns: [],\n            conditions: 'has:user.email !event.type:transaction',\n            orderby: 'count_unique(user)',\n          },\n          {\n            name: t('Anonymous Users'),\n            fields: ['count_unique(user)'],\n            aggregates: ['count_unique(user)'],\n            columns: [],\n            conditions: '!has:user.email !event.type:transaction',\n            orderby: 'count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('Handled vs. Unhandled'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 1,\n          x: 0,\n          y: 2,\n        },\n        queries: [\n          {\n            name: t('Handled'),\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: 'error.handled:true',\n            orderby: 'count()',\n          },\n          {\n            name: t('Unhandled'),\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: 'error.handled:false',\n            orderby: 'count()',\n          },\n        ],\n      },\n      {\n        title: t('Errors by Country'),\n        displayType: DisplayType.WORLD_MAP,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 6,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: '!event.type:transaction has:geo.country_code',\n            orderby: 'count()',\n          },\n        ],\n      },\n      {\n        title: t('High Throughput Transactions'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 6,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()', 'transaction'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: '!event.type:error',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Errors by Browser'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 1,\n          x: 5,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['browser.name', 'count()'],\n            aggregates: ['count()'],\n            columns: ['browser.name'],\n            conditions: '!event.type:transaction has:browser.name',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Overall User Misery'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['user_misery(300)'],\n            aggregates: ['user_misery(300)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall Apdex'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['apdex(300)'],\n            aggregates: ['apdex(300)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('High Throughput Transactions'),\n        displayType: DisplayType.TOP_N,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'count()'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: '!event.type:error',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Issues Assigned to Me or My Teams'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.ISSUE,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 2,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['assignee', 'issue', 'title'],\n            aggregates: [],\n            columns: ['assignee', 'issue', 'title'],\n            conditions: 'assigned_or_suggested:me is:unresolved',\n            orderby: 'priority',\n          },\n        ],\n      },\n      {\n        title: t('Transactions Ordered by Misery'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          y: 6,\n          x: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'user_misery(300)'],\n            aggregates: ['user_misery(300)'],\n            columns: ['transaction'],\n            conditions: '',\n            orderby: '-user_misery(300)',\n          },\n        ],\n      },\n      {\n        title: t('Errors by Browser Over Time'),\n        displayType: DisplayType.TOP_N,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 1,\n          x: 4,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['browser.name', 'count()'],\n            aggregates: ['count()'],\n            columns: ['browser.name'],\n            conditions: 'event.type:error has:browser.name',\n            orderby: '-count()',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'frontend-template',\n    title: t('Frontend Template'),\n    dateCreated: '',\n    createdBy: undefined,\n    description: t('Erroring URLs and Web Vitals'),\n    widgets: [\n      {\n        title: t('Top 5 Issues by Unique Users Over Time'),\n        displayType: DisplayType.TOP_N,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 4,\n          x: 0,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['issue', 'count_unique(user)'],\n            aggregates: ['count_unique(user)'],\n            columns: ['issue'],\n            conditions: '',\n            orderby: '-count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('Errors by Browser as Percentage'),\n        displayType: DisplayType.AREA,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 9,\n        },\n        queries: [\n          {\n            name: '',\n            fields: [\n              'equation|count_if(browser.name,equals,Chrome)/count() * 100',\n              'equation|count_if(browser.name,equals,Firefox)/count() * 100',\n              'equation|count_if(browser.name,equals,Safari)/count() * 100',\n            ],\n            aggregates: [\n              'equation|count_if(browser.name,equals,Chrome)/count() * 100',\n              'equation|count_if(browser.name,equals,Firefox)/count() * 100',\n              'equation|count_if(browser.name,equals,Safari)/count() * 100',\n            ],\n            columns: [],\n            conditions: 'has:browser.name',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Issues Assigned to Me or My Teams'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.ISSUE,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['assignee', 'issue', 'title'],\n            aggregates: [],\n            columns: ['assignee', 'issue', 'title'],\n            conditions: 'assigned_or_suggested:me is:unresolved',\n            orderby: 'priority',\n          },\n        ],\n      },\n      {\n        title: t('Top 5 Issues by Unique Users'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 3,\n          minH: 2,\n          w: 4,\n          x: 0,\n          y: 6,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['issue', 'count_unique(user)', 'title'],\n            aggregates: ['count_unique(user)'],\n            columns: ['issue', 'title'],\n            conditions: '',\n            orderby: '-count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('URLs grouped by Issue'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 5,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 8,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['http.url', 'issue', 'count_unique(user)'],\n            aggregates: ['count_unique(user)'],\n            columns: ['http.url', 'issue'],\n            conditions: 'event.type:error',\n            orderby: '-count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('Transactions 404ing'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 2,\n          y: 9,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'count()'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: 'transaction.status:not_found',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Layout Shift Over Time'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 1,\n          x: 2,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.cls)'],\n            aggregates: ['p75(measurements.cls)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('LCP by Country'),\n        displayType: DisplayType.WORLD_MAP,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 2,\n          x: 2,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.lcp)'],\n            aggregates: ['p75(measurements.lcp)'],\n            columns: [],\n            conditions: 'has:geo.country_code',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Page Load Over Time'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 1,\n          x: 3,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.lcp)', 'p75(measurements.fcp)'],\n            aggregates: ['p75(measurements.lcp)', 'p75(measurements.fcp)'],\n            columns: [],\n            conditions: 'transaction.op:pageload',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Slowest Pageloads'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'count()'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: 'transaction.op:pageload p75(measurements.lcp):>4s',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Overall LCP'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.lcp)'],\n            aggregates: ['p75(measurements.lcp)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Slow Page Navigations'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'count()'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: 'transaction.duration:>2s',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Overall FCP'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.fcp)'],\n            aggregates: ['p75(measurements.fcp)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall CLS'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.cls)'],\n            aggregates: ['p75(measurements.cls)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall FID'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.fid)'],\n            aggregates: ['p75(measurements.fid)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'backend-template',\n    title: t('Backend Template'),\n    dateCreated: '',\n    createdBy: undefined,\n    description: t('Issues and Performance'),\n    widgets: [\n      {\n        title: t('Top 5 Issues by Unique Users Over Time'),\n        displayType: DisplayType.TOP_N,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 6,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['issue', 'count_unique(user)'],\n            aggregates: ['count_unique(user)'],\n            columns: ['issue'],\n            conditions: '',\n            orderby: '-count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('Transactions Erroring Over Time'),\n        displayType: DisplayType.TOP_N,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 4,\n          x: 2,\n          y: 8,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'count()'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: 'transaction.status:internal_error',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Erroring Transactions by Percentage'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 5,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 10,\n        },\n        queries: [\n          {\n            name: '',\n            fields: [\n              'equation|count_if(transaction.status,equals,internal_error) / count() * 100',\n              'transaction',\n              'count_if(transaction.status,equals,internal_error)',\n              'count()',\n            ],\n            aggregates: [\n              'equation|count_if(transaction.status,equals,internal_error) / count() * 100',\n              'count_if(transaction.status,equals,internal_error)',\n              'count()',\n            ],\n            columns: ['transaction'],\n            conditions: 'count():>100',\n            orderby: '-equation[0]',\n          },\n        ],\n      },\n      {\n        title: t('Top 5 Issues by Unique Users'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 5,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 10,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['issue', 'count_unique(user)', 'title'],\n            aggregates: ['count_unique(user)'],\n            columns: ['issue', 'title'],\n            conditions: '',\n            orderby: '-count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('Transactions Erroring'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 5,\n          minH: 2,\n          w: 2,\n          x: 2,\n          y: 10,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()', 'transaction'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: 'transaction.status:internal_error',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Issues Assigned to Me or My Teams'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.ISSUE,\n        tempId: uniqueId(),\n        layout: {\n          h: 7,\n          minH: 2,\n          w: 6,\n          x: 0,\n          y: 15,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['assignee', 'issue', 'title'],\n            aggregates: [],\n            columns: ['assignee', 'issue', 'title'],\n            conditions: 'assigned_or_suggested:me is:unresolved',\n            orderby: 'priority',\n          },\n        ],\n      },\n      {\n        title: t('p75 Over Time'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 4,\n          x: 2,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(transaction.duration)'],\n            aggregates: ['p75(transaction.duration)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Throughput (Events Per Minute)'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 4,\n          x: 2,\n          y: 0,\n        },\n        queries: [\n          {\n            name: 'Transactions',\n            fields: ['epm()'],\n            aggregates: ['epm()'],\n            columns: [],\n            conditions: 'event.type:transaction',\n            orderby: '',\n          },\n          {\n            name: 'Errors',\n            fields: ['epm()'],\n            aggregates: ['epm()'],\n            columns: [],\n            conditions: 'event.type:error',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Tasks Transactions with Poor Apdex'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 2,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()', 'transaction'],\n            aggregates: ['count()'],\n            columns: ['transaction'],\n            conditions: 'apdex():<0.5 transaction.op:*task*',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('HTTP Transactions with Poor Apdex'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 4,\n          x: 2,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['epm()', 'http.method', 'http.status_code', 'transaction'],\n            aggregates: ['epm()'],\n            columns: ['http.method', 'http.status_code', 'transaction'],\n            conditions:\n              'apdex():<0.5 transaction.op:*http* has:http.method has:http.status_code',\n            orderby: '-epm()',\n          },\n        ],\n      },\n      {\n        title: t('Overall Apdex'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['apdex(300)'],\n            aggregates: ['apdex(300)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall Duration'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(transaction.duration)'],\n            aggregates: ['p75(transaction.duration)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall HTTP Spans'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(spans.http)'],\n            aggregates: ['p75(spans.http)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall DB Spans'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(spans.db)'],\n            aggregates: ['p75(spans.db)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    id: 'mobile-template',\n    title: t('Mobile Template'),\n    dateCreated: '',\n    createdBy: undefined,\n    description: t('Crash Details and Performance Vitals'),\n    widgets: [\n      {\n        title: t('Total Crashes'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: 'error.handled:false event.type:error',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Unique Users Who Crashed'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count_unique(user)'],\n            aggregates: ['count_unique(user)'],\n            columns: [],\n            conditions: 'error.handled:false event.type:error',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Unique Issues Causing Crashes'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 2,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count_unique(issue)'],\n            aggregates: ['count_unique(issue)'],\n            columns: [],\n            conditions: 'error.handled:false event.type:error',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall Number of Errors'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 3,\n          y: 0,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['count()'],\n            aggregates: ['count()'],\n            columns: [],\n            conditions: 'event.type:error',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Issues Causing Crashes'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 3,\n          x: 0,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['issue', 'count()', 'count_unique(user)'],\n            aggregates: ['count()', 'count_unique(user)'],\n            columns: ['issue'],\n            conditions: 'error.handled:false',\n            orderby: '-count_unique(user)',\n          },\n        ],\n      },\n      {\n        title: t('Crashes Over Time'),\n        displayType: DisplayType.LINE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 3,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 0,\n        },\n        queries: [\n          {\n            name: t('Crashes'),\n            fields: ['count()', 'count_unique(user)'],\n            aggregates: ['count()', 'count_unique(user)'],\n            columns: [],\n            conditions: 'error.handled:false',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Crashes by OS'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 2,\n          minH: 2,\n          w: 1,\n          x: 3,\n          y: 1,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['os', 'count()'],\n            aggregates: ['count()'],\n            columns: ['os'],\n            conditions: 'has:os error.handled:false',\n            orderby: '-count()',\n          },\n        ],\n      },\n      {\n        title: t('Overall Warm Startup Time'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 0,\n          y: 3,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.app_start_warm)'],\n            aggregates: ['p75(measurements.app_start_warm)'],\n            columns: [],\n            conditions: 'has:measurements.app_start_warm',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall Cold Startup Time'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 2,\n          y: 3,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.app_start_cold)'],\n            aggregates: ['p75(measurements.app_start_cold)'],\n            columns: [],\n            conditions: 'has:measurements.app_start_cold',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Warm Startup Times'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 0,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'p75(measurements.app_start_warm)'],\n            aggregates: ['p75(measurements.app_start_warm)'],\n            columns: ['transaction'],\n            conditions: 'has:measurements.app_start_warm',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Cold Startup Times'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 2,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'p75(measurements.app_start_cold)'],\n            aggregates: ['p75(measurements.app_start_cold)'],\n            columns: ['transaction'],\n            conditions: 'has:measurements.app_start_cold',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Overall Frozen Frames'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 4,\n          y: 3,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['p75(measurements.frames_frozen_rate)'],\n            aggregates: ['p75(measurements.frames_frozen_rate)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Max Warm Startup Time'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 1,\n          y: 3,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['max(measurements.app_start_warm)'],\n            aggregates: ['max(measurements.app_start_warm)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Max Cold Startup Time'),\n        displayType: DisplayType.BIG_NUMBER,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 1,\n          minH: 1,\n          w: 1,\n          x: 3,\n          y: 3,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['max(measurements.app_start_cold)'],\n            aggregates: ['max(measurements.app_start_cold)'],\n            columns: [],\n            conditions: '',\n            orderby: '',\n          },\n        ],\n      },\n      {\n        title: t('Frozen Frames Rate'),\n        displayType: DisplayType.TABLE,\n        interval: '5m',\n        widgetType: WidgetType.DISCOVER,\n        tempId: uniqueId(),\n        layout: {\n          h: 4,\n          minH: 2,\n          w: 2,\n          x: 4,\n          y: 4,\n        },\n        queries: [\n          {\n            name: '',\n            fields: ['transaction', 'p75(measurements.frames_frozen_rate)'],\n            aggregates: ['p75(measurements.frames_frozen_rate)'],\n            columns: ['transaction'],\n            conditions: 'has:measurements.frames_frozen_rate',\n            orderby: '-p75(measurements.frames_frozen_rate)',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport const DISPLAY_TYPE_CHOICES = [\n  {label: t('Area Chart'), value: 'area'},\n  {label: t('Bar Chart'), value: 'bar'},\n  {label: t('Line Chart'), value: 'line'},\n  {label: t('Table'), value: 'table'},\n  {label: t('World Map'), value: 'world_map'},\n  {label: t('Big Number'), value: 'big_number'},\n  {label: t('Top 5 Events'), value: 'top_n'},\n];\n\nexport const INTERVAL_CHOICES = [\n  {label: t('1 Minute'), value: '1m'},\n  {label: t('5 Minutes'), value: '5m'},\n  {label: t('15 Minutes'), value: '15m'},\n  {label: t('30 Minutes'), value: '30m'},\n  {label: t('1 Hour'), value: '1h'},\n  {label: t('1 Day'), value: '1d'},\n];\n\nexport const DEFAULT_STATS_PERIOD = '24h';\n","import {ClassNames} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport {SearchBarProps} from 'sentry/components/events/searchBar';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, SavedSearchType, TagCollection} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport useApi from 'sentry/utils/useApi';\nimport withIssueTags from 'sentry/utils/withIssueTags';\nimport {WidgetQuery} from 'sentry/views/dashboardsV2/types';\nimport {\n  MAX_MENU_HEIGHT,\n  MAX_SEARCH_ITEMS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport IssueListSearchBar from 'sentry/views/issueList/searchBar';\n\ninterface Props {\n  onBlur: SearchBarProps['onBlur'];\n  onSearch: SearchBarProps['onSearch'];\n  organization: Organization;\n  query: WidgetQuery;\n  selection: PageFilters;\n  tags: TagCollection;\n  searchSource?: string;\n}\n\nfunction IssuesSearchBarContainer({\n  tags,\n  onSearch,\n  onBlur,\n  organization,\n  query,\n  selection,\n  searchSource,\n}: Props) {\n  const api = useApi();\n  function tagValueLoader(key: string, search: string) {\n    const orgId = organization.slug;\n    const projectIds = selection.projects.map(id => id.toString());\n    const endpointParams = {\n      start: getUtcDateString(selection.datetime.start),\n      end: getUtcDateString(selection.datetime.end),\n      statsPeriod: selection.datetime.period,\n    };\n\n    return fetchTagValues(api, orgId, key, search, projectIds, endpointParams);\n  }\n\n  return (\n    <ClassNames>\n      {({css}) => (\n        <StyledIssueListSearchBar\n          searchSource={searchSource}\n          organization={organization}\n          query={query.conditions || ''}\n          sort=\"\"\n          onSearch={onSearch}\n          onBlur={onBlur}\n          excludeEnvironment\n          supportedTags={tags}\n          placeholder={t('Search for issues, status, assigned, and more')}\n          tagValueLoader={tagValueLoader}\n          onSidebarToggle={() => undefined}\n          maxSearchItems={MAX_SEARCH_ITEMS}\n          savedSearchType={SavedSearchType.ISSUE}\n          dropdownClassName={css`\n            max-height: ${MAX_MENU_HEIGHT}px;\n            overflow-y: auto;\n          `}\n        />\n      )}\n    </ClassNames>\n  );\n}\n\nconst IssuesSearchBar = withIssueTags(IssuesSearchBarContainer);\n\nexport {IssuesSearchBar};\n\nconst StyledIssueListSearchBar = styled(IssueListSearchBar)`\n  flex-grow: 1;\n  button:not([aria-label='Clear search']) {\n    display: none;\n  }\n`;\n","import {Component} from 'react';\n\nimport {fetchRecentSearches} from 'sentry/actionCreators/savedSearches';\nimport {Client} from 'sentry/api';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {\n  makePinSearchAction,\n  makeSaveSearchAction,\n  makeSearchBuilderAction,\n} from 'sentry/components/smartSearchBar/actions';\nimport {ItemType, SearchItem} from 'sentry/components/smartSearchBar/types';\nimport {t} from 'sentry/locale';\nimport {Organization, SavedSearch, SavedSearchType, Tag} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {TagValueLoader} from './types';\n\nconst SEARCH_ITEMS: SearchItem[] = [\n  {\n    title: t('Tag'),\n    desc: 'browser:\"Chrome 34\", has:browser',\n    value: 'browser:',\n    type: ItemType.DEFAULT,\n  },\n  {\n    title: t('Status'),\n    desc: 'is:resolved, unresolved, ignored, assigned, unassigned',\n    value: 'is:',\n    type: ItemType.DEFAULT,\n  },\n  {\n    title: t('Time or Count'),\n    desc: 'firstSeen, lastSeen, event.timestamp, timesSeen',\n    value: 'firstSeen:',\n    type: ItemType.DEFAULT,\n  },\n  {\n    title: t('Assigned'),\n    desc: 'assigned, assigned_or_suggested:[me|[me, none]|user@example.com|#team-example]',\n    value: 'assigned:',\n    type: ItemType.DEFAULT,\n  },\n  {\n    title: t('Bookmarked By'),\n    desc: 'bookmarks:[me|user@example.com]',\n    value: 'bookmarks:',\n    type: ItemType.DEFAULT,\n  },\n];\n\ntype Props = React.ComponentProps<typeof SmartSearchBar> & {\n  api: Client;\n  onSidebarToggle: (e: React.MouseEvent) => void;\n  organization: Organization;\n  sort: string;\n  tagValueLoader: TagValueLoader;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  projectIds?: string[];\n  savedSearch?: SavedSearch;\n};\n\ntype State = {\n  defaultSearchItems: [SearchItem[], SearchItem[]];\n  recentSearches: string[];\n};\n\nclass IssueListSearchBar extends Component<Props, State> {\n  state: State = {\n    defaultSearchItems: [SEARCH_ITEMS, []],\n    recentSearches: [],\n  };\n\n  componentDidMount() {\n    // Ideally, we would fetch on demand (e.g. when input gets focus)\n    // but `<SmartSearchBar>` is a bit complicated and this is the easiest route\n    this.fetchData();\n  }\n\n  fetchData = async () => {\n    this.props.api.clear();\n    const resp = await this.getRecentSearches();\n\n    this.setState({\n      defaultSearchItems: [\n        SEARCH_ITEMS,\n        resp\n          ? resp.map(query => ({\n              desc: query,\n              value: query,\n              type: ItemType.RECENT_SEARCH,\n            }))\n          : [],\n      ],\n      recentSearches: resp,\n    });\n  };\n\n  /**\n   * @returns array of tag values that substring match `query`\n   */\n  getTagValues = async (tag: Tag, query: string): Promise<string[]> => {\n    const {tagValueLoader} = this.props;\n\n    const values = await tagValueLoader(tag.key, query);\n    return values.map(({value}) => value);\n  };\n\n  getRecentSearches = async (): Promise<string[]> => {\n    const {api, organization} = this.props;\n    const recent = await fetchRecentSearches(\n      api,\n      organization.slug,\n      SavedSearchType.ISSUE\n    );\n    return recent?.map(({query}) => query) ?? [];\n  };\n\n  handleSavedRecentSearch = () => {\n    // Reset recent searches\n    this.fetchData();\n  };\n\n  render() {\n    const {tagValueLoader: _, savedSearch, sort, onSidebarToggle, ...props} = this.props;\n\n    const pinnedSearch = savedSearch?.isPinned ? savedSearch : undefined;\n\n    return (\n      <SmartSearchBar\n        searchSource=\"main_search\"\n        hasRecentSearches\n        maxSearchItems={5}\n        savedSearchType={SavedSearchType.ISSUE}\n        onGetTagValues={this.getTagValues}\n        defaultSearchItems={this.state.defaultSearchItems}\n        onSavedRecentSearch={this.handleSavedRecentSearch}\n        actionBarItems={[\n          makePinSearchAction({sort, pinnedSearch}),\n          makeSaveSearchAction({sort}),\n          makeSearchBuilderAction({onSidebarToggle}),\n        ]}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default withApi(withOrganization(IssueListSearchBar));\n"],"names":["IssueWidgetQueriesForm","Component","constructor","props","super","field","query","onChange","this","widgetQuery","value","newQuery","state","blurTimeout","undefined","componentWillUnmount","window","clearTimeout","render","organization","error","selection","fieldOptions","explodedFields","fields","columns","aggregates","map","explodeField","QueryWrapper","label","t","inline","style","paddingBottom","flexibleControlStateSize","stacked","conditions","SearchConditionsWrapper","onSearch","setState","setTimeout","handleFieldChange","onBlur","widgetType","WidgetType","displayType","DisplayType","errors","fieldStrings","generateFieldAsString","cloneDeep","getColumnsAndAggregates","orderby","marginBottom","space","IssueSortOptions","name","options","generateIssueWidgetOrderOptions","features","includes","option","newDiscoverQuery","newIssueQuery","newMetricsQuery","SessionField","DiscoverDataset","IssueDataset","MetricsDataset","Fragment","type","AddDashboardWidgetModal","async","event","preventDefault","api","closeModal","onAddWidget","onUpdateWidget","widget","previousWidget","source","loading","widgetData","assignTempId","pick","layout","queries","forEach","validateWidget","slug","id","addSuccessMessage","trackAdvancedAnalyticsEvent","data_set","DashboardWidgetSource","err","mapErrors","responseJSON","omitDashboardProp","handleSubmitFromSelectedDashboard","fromLibrary","handleSubmitFromLibrary","selectedDashboard","dashboards","find","title","NEW_DASHBOARD_ID","dashboard","Object","keys","length","queryData","queryNames","queryConditions","queryFields","queryOrderby","push","pathQuery","interval","datetime","project","projects","environment","environments","browserHistory","pathname","onAddLibraryWidget","addErrorMessage","widgets","newDisplayType","defaultWidgetQuery","defaultTableColumns","prevState","newState","normalized","normalizeQueries","splice","set","userHasModified","defined","from","widget_type","handleDefaultFields","index","defaultQuery","defaultTitle","componentDidMount","fetchDashboards","canAddSearchConditions","rightDisplayType","underQueryLimit","promise","requestPromise","method","sort","errorResponse","handleDashboardChange","renderDashboardSelector","dashboardOptions","d","isDisabled","widgetDisplay","MAX_WIDGETS","tooltip","tct","maxWidgets","tooltipOptions","position","required","disabled","renderWidgetQueryForm","querySelection","releaseWidgetFieldOptions","tags","issueWidgetFieldOptions","generateIssueWidgetFieldOptions","handleQueryChange","isEditing","onDelete","onEdit","onDuplicate","widgetLimitReached","renderErrorMessage","errorMessage","isSorting","currentWidgetDragging","noLazyLoad","queryIndex","handleAddSearchConditions","handleDeleteQuery","handleQueryRemove","measurements","amendedFieldOptions","measurementKeys","values","key","generateFieldOptions","tagKeys","spanOperationBreakdownKeys","SPAN_OP_BREAKDOWN_FIELDS","showStoredAlert","Footer","Body","Header","selectedWidgets","start","end","statsPeriod","isUpdatingWidget","showDatasetSelector","showIssueDatasetSelector","showMetricsDatasetSelector","datasetChoices","period","utc","metricsWidgetFieldOptions","generateReleaseWidgetFieldOptions","SESSIONS_FIELDS","SESSIONS_TAGS","closeButton","activeTab","TAB","customWidget","DoubleFieldWrapper","StyledField","maxLength","target","DISPLAY_TYPE_CHOICES","StyledFieldLabel","StyledRadioGroup","flex","choices","handleDatasetChange","gap","external","href","priority","onClick","handleSubmit","busy","modalCss","Field","RadioGroup","FieldLabel","withApi","withPageFilters","withTags","WIDGET_LIBRARY_VISITS","shouldShowNewBadge","visits","localStorage","getItem","parseInt","TabsButtonBar","StyledButtonBar","active","CustomButton","barId","Custom","to","openAddDashboardWidgetModal","LibraryButton","Library","setItem","setWidgetLibraryVisit","openDashboardWidgetLibraryModal","initialSelectedWidgets","ButtonBar","Button","uuidPattern","getUsername","isManaged","username","email","test","WrappedComponent","ComponentWithTags","useState","assign","TagStore","users","MemberListStore","teams","TeamStore","setAssigned","useCallback","oldState","usernames","teamnames","filter","team","isMember","allAssigned","unshift","assigned","bookmarks","assigned_or_suggested","useEffect","unsubscribeTeam","unsubscribeTags","storeTags","unsubscribeMembers","displayName","getDisplayName","EMPTY_DASHBOARD","dateCreated","createdBy","DASHBOARDS_TEMPLATES","description","tempId","uniqueId","h","minH","w","x","y","DEFAULT_STATS_PERIOD","IssuesSearchBarContainer","searchSource","useApi","tagValueLoader","search","orgId","projectIds","toString","endpointParams","getUtcDateString","fetchTagValues","css","StyledIssueListSearchBar","excludeEnvironment","supportedTags","placeholder","onSidebarToggle","maxSearchItems","MAX_SEARCH_ITEMS","savedSearchType","SavedSearchType","dropdownClassName","MAX_MENU_HEIGHT","IssuesSearchBar","withIssueTags","IssueListSearchBar","SEARCH_ITEMS","desc","ItemType","defaultSearchItems","recentSearches","clear","resp","getRecentSearches","tag","recent","fetchRecentSearches","fetchData","_","savedSearch","pinnedSearch","isPinned","hasRecentSearches","onGetTagValues","getTagValues","onSavedRecentSearch","handleSavedRecentSearch","actionBarItems","makePinSearchAction","makeSaveSearchAction","makeSearchBuilderAction","withOrganization"],"sourceRoot":""}