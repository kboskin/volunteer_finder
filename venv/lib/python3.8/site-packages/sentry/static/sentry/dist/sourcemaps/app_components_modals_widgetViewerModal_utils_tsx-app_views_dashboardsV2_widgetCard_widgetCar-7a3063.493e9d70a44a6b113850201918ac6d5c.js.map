{"version":3,"file":"chunks/app_components_modals_widgetViewerModal_utils_tsx-app_views_dashboardsV2_widgetCard_widgetCar-7a3063.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/simpleTableChart.tsx","webpack:///./app/components/modals/widgetViewerModal/utils.tsx","webpack:///./app/utils/dashboards/issueFieldRenderers.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/dashboardsV2/datasetConfig/errorsAndTransactions.tsx","webpack:///./app/views/dashboardsV2/datasetConfig/issues.tsx","webpack:///./app/views/dashboardsV2/widgetCard/transformSessionsResponseToSeries.tsx","webpack:///./app/views/dashboardsV2/widgetCard/transformSessionsResponseToTable.tsx","webpack:///./app/views/dashboardsV2/datasetConfig/releases.tsx","webpack:///./app/views/dashboardsV2/datasetConfig/base.tsx","webpack:///./app/views/dashboardsV2/utils.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/issueWidget/utils.tsx","webpack:///./app/views/dashboardsV2/widgetCard/chart.tsx","webpack:///./app/views/dashboardsV2/widgetCard/dashboardsMEPContext.tsx","webpack:///./app/views/dashboardsV2/widgetCard/issueWidgetQueries.tsx","webpack:///./app/actionCreators/metrics.tsx","webpack:///./app/actionCreators/sessions.tsx","webpack:///./app/views/dashboardsV2/widgetCard/releaseWidgetQueries.tsx","webpack:///./app/views/dashboardsV2/widgetCard/issueWidgetCard.tsx","webpack:///./app/views/dashboardsV2/widgetCard/widgetCardChartContainer.tsx","webpack:///./app/views/dashboardsV2/widgetCard/widgetQueries.tsx"],"sourcesContent":["import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport PanelTable, {\n  PanelTableHeader,\n  PanelTableProps,\n} from 'sentry/components/panels/panelTable';\nimport Tooltip from 'sentry/components/tooltip';\nimport Truncate from 'sentry/components/truncate';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableData, TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {MetaType} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {fieldAlignment} from 'sentry/utils/discover/fields';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {ContextualProps} from 'sentry/views/dashboardsV2/datasetConfig/base';\nimport TopResultsIndicator from 'sentry/views/eventsV2/table/topResultsIndicator';\nimport {decodeColumnOrder} from 'sentry/views/eventsV2/utils';\n\ntype Props = {\n  eventView: EventView;\n  fieldAliases: string[];\n  fields: string[];\n  loading: boolean;\n  location: Location;\n  organization: Organization;\n  title: string;\n  className?: string;\n  data?: TableData['data'];\n  fieldHeaderMap?: Record<string, string>;\n  getCustomFieldRenderer?: (\n    field: string,\n    meta: MetaType,\n    contextualProps?: ContextualProps\n  ) => ReturnType<typeof getFieldRenderer> | null;\n  loader?: PanelTableProps['loader'];\n  metadata?: TableData['meta'];\n  stickyHeaders?: boolean;\n  topResultsIndicators?: number;\n};\n\nfunction SimpleTableChart({\n  className,\n  loading,\n  eventView,\n  fields,\n  metadata,\n  data,\n  title,\n  fieldHeaderMap,\n  stickyHeaders,\n  getCustomFieldRenderer,\n  organization,\n  topResultsIndicators,\n  location,\n  fieldAliases,\n  loader,\n}: Props) {\n  function renderRow(\n    index: number,\n    row: TableDataRow,\n    tableMeta: NonNullable<TableData['meta']>,\n    columns: ReturnType<typeof decodeColumnOrder>\n  ) {\n    return columns.map((column, columnIndex) => {\n      const fieldRenderer =\n        getCustomFieldRenderer?.(column.key, tableMeta, {organization}) ??\n        getFieldRenderer(column.key, tableMeta);\n\n      return (\n        <TableCell key={`${index}-${columnIndex}:${column.name}`}>\n          {topResultsIndicators && columnIndex === 0 && (\n            <TopResultsIndicator count={topResultsIndicators} index={index} />\n          )}\n          {fieldRenderer(row, {organization, location, eventView})}\n        </TableCell>\n      );\n    });\n  }\n\n  const meta = metadata ?? {};\n  const usingEvents = organization.features.includes(\n    'discover-frontend-use-events-endpoint'\n  );\n  const columns = decodeColumnOrder(\n    fields.map((field, index) => ({field, alias: fieldAliases[index]})),\n    usingEvents\n  );\n\n  return (\n    <Fragment>\n      {title && <h4>{title}</h4>}\n      <StyledPanelTable\n        className={className}\n        isLoading={loading}\n        loader={loader}\n        headers={columns.map((column, index) => {\n          const align = fieldAlignment(column.name, column.type, meta);\n          const header =\n            column.column.alias || (fieldHeaderMap?.[column.key] ?? column.name);\n          return (\n            <HeadCell key={index} align={align}>\n              <Tooltip title={header}>\n                <StyledTruncate value={header} maxLength={30} expandable={false} />\n              </Tooltip>\n            </HeadCell>\n          );\n        })}\n        isEmpty={!data?.length}\n        stickyHeaders={stickyHeaders}\n        disablePadding\n      >\n        {data?.map((row, index) => renderRow(index, row, meta, columns))}\n      </StyledPanelTable>\n    </Fragment>\n  );\n}\n\nconst StyledTruncate = styled(Truncate)`\n  white-space: nowrap;\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  border-radius: 0;\n  border-left: 0;\n  border-right: 0;\n  border-bottom: 0;\n\n  margin: 0;\n  ${/* sc-selector */ PanelTableHeader} {\n    height: min-content;\n  }\n`;\n\ntype HeadCellProps = {\n  align: string | undefined;\n};\nconst HeadCell = styled('div')<HeadCellProps>`\n  ${(p: HeadCellProps) => (p.align ? `text-align: ${p.align};` : '')}\n  padding: ${space(1)} ${space(3)};\n`;\n\nexport const TableCell = styled('div')`\n  padding: ${space(1)} ${space(3)};\n`;\n\nexport default withOrganization(SimpleTableChart);\n","// Widget Viewer specific query params so we don't interfere with other params like GSH\nexport enum WidgetViewerQueryField {\n  SORT = 'sort',\n  QUERY = 'query',\n  LEGEND = 'legend',\n  PAGE = 'page',\n  CURSOR = 'cursor',\n  WIDTH = 'width',\n  START = 'viewerStart',\n  END = 'viewerEnd',\n}\n\nexport function isWidgetViewerPath(pathname: string) {\n  return pathname.match(/\\/widget\\/[0-9]+\\/$/);\n}\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport AssigneeSelector from 'sentry/components/assigneeSelector';\nimport Count from 'sentry/components/count';\nimport Link from 'sentry/components/links/link';\nimport {getRelativeSummary} from 'sentry/components/organizations/timeRangeSelector/utils';\nimport Tooltip from 'sentry/components/tooltip';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport EventView, {EventData} from 'sentry/utils/discover/eventView';\nimport {FieldKey} from 'sentry/views/dashboardsV2/widgetBuilder/issueWidget/fields';\n\nimport {Container, FieldShortId, OverflowLink} from '../discover/styles';\n\n/**\n * Types, functions and definitions for rendering fields in discover results.\n */\ntype RenderFunctionBaggage = {\n  location: Location;\n  organization: Organization;\n  eventView?: EventView;\n};\n\ntype FieldFormatterRenderFunctionPartial = (\n  data: EventData,\n  baggage: RenderFunctionBaggage\n) => React.ReactNode;\n\ntype SpecialFieldRenderFunc = (\n  data: EventData,\n  baggage: RenderFunctionBaggage\n) => React.ReactNode;\n\ntype SpecialField = {\n  renderFunc: SpecialFieldRenderFunc;\n  sortField: string | null;\n};\n\ntype SpecialFields = {\n  assignee: SpecialField;\n  count: SpecialField;\n  events: SpecialField;\n  issue: SpecialField;\n  lifetimeCount: SpecialField;\n  lifetimeEvents: SpecialField;\n  lifetimeUserCount: SpecialField;\n  lifetimeUsers: SpecialField;\n  links: SpecialField;\n  userCount: SpecialField;\n  users: SpecialField;\n};\n\n/**\n * \"Special fields\" either do not map 1:1 to an single column in the event database,\n * or they require custom UI formatting that can't be handled by the datatype formatters.\n */\nconst SPECIAL_FIELDS: SpecialFields = {\n  issue: {\n    sortField: null,\n    renderFunc: (data, {organization}) => {\n      const issueID = data['issue.id'];\n\n      if (!issueID) {\n        return (\n          <Container>\n            <FieldShortId shortId={`${data.issue}`} />\n          </Container>\n        );\n      }\n\n      const target = {\n        pathname: `/organizations/${organization.slug}/issues/${issueID}/`,\n      };\n\n      return (\n        <Container>\n          <OverflowLink to={target} aria-label={issueID}>\n            <FieldShortId shortId={`${data.issue}`} />\n          </OverflowLink>\n        </Container>\n      );\n    },\n  },\n  assignee: {\n    sortField: null,\n    renderFunc: data => {\n      const memberList = MemberListStore.getAll();\n      return (\n        <ActorContainer>\n          <AssigneeSelector id={data.id} memberList={memberList} noDropdown />\n        </ActorContainer>\n      );\n    },\n  },\n  lifetimeEvents: {\n    sortField: null,\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'lifetimeEvents'),\n  },\n  lifetimeUsers: {\n    sortField: null,\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'lifetimeUsers'),\n  },\n  events: {\n    sortField: 'freq',\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'events'),\n  },\n  users: {\n    sortField: 'user',\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'users'),\n  },\n  lifetimeCount: {\n    sortField: null,\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'lifetimeEvents'),\n  },\n  lifetimeUserCount: {\n    sortField: null,\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'lifetimeUsers'),\n  },\n  count: {\n    sortField: null,\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'events'),\n  },\n  userCount: {\n    sortField: null,\n    renderFunc: (data, {organization}) =>\n      issuesCountRenderer(data, organization, 'users'),\n  },\n  links: {\n    sortField: null,\n    renderFunc: ({links}) => <LinksContainer dangerouslySetInnerHTML={{__html: links}} />,\n  },\n};\n\nconst issuesCountRenderer = (\n  data: EventData,\n  organization: Organization,\n  field: 'events' | 'users' | 'lifetimeEvents' | 'lifetimeUsers'\n) => {\n  const {start, end, period} = data;\n  const isUserField = !!/user/i.exec(field.toLowerCase());\n  const primaryCount = data[field];\n  const count = data[isUserField ? 'users' : 'events'];\n  const lifetimeCount = data[isUserField ? 'lifetimeUsers' : 'lifetimeEvents'];\n  const filteredCount = data[isUserField ? 'filteredUsers' : 'filteredEvents'];\n  const discoverLink = getDiscoverUrl(data, organization);\n  const filteredDiscoverLink = getDiscoverUrl(data, organization, true);\n  const selectionDateString =\n    !!start && !!end\n      ? 'time range'\n      : getRelativeSummary(period || DEFAULT_STATS_PERIOD).toLowerCase();\n  return (\n    <Container>\n      <Tooltip\n        isHoverable\n        skipWrapper\n        overlayStyle={{padding: 0}}\n        title={\n          <div>\n            {filteredCount ? (\n              <Fragment>\n                <StyledLink to={filteredDiscoverLink}>\n                  {t('Matching search filters')}\n                  <WrappedCount value={filteredCount} />\n                </StyledLink>\n                <Divider />\n              </Fragment>\n            ) : null}\n            <StyledLink to={discoverLink}>\n              {t(`Total in ${selectionDateString}`)}\n              <WrappedCount value={count} />\n            </StyledLink>\n            <Divider />\n            <StyledContent>\n              {t('Since issue began')}\n              <WrappedCount value={lifetimeCount} />\n            </StyledContent>\n          </div>\n        }\n      >\n        <span>\n          {['events', 'users'].includes(field) && filteredCount ? (\n            <Fragment>\n              <Count value={filteredCount} />\n              <SecondaryCount value={primaryCount} />\n            </Fragment>\n          ) : (\n            <Count value={primaryCount} />\n          )}\n        </span>\n      </Tooltip>\n    </Container>\n  );\n};\n\nconst getDiscoverUrl = (\n  data: EventData,\n  organization: Organization,\n  filtered?: boolean\n) => {\n  const commonQuery = {projects: [Number(data.projectId)]};\n  const discoverView = EventView.fromSavedQuery({\n    ...commonQuery,\n    id: undefined,\n    start: data.start,\n    end: data.end,\n    range: data.period,\n    name: data.title,\n    fields: ['title', 'release', 'environment', 'user', 'timestamp'],\n    orderby: '-timestamp',\n    query: `issue.id:${data.id}${filtered ? data.discoverSearchQuery : ''}`,\n    version: 2,\n  });\n  return discoverView.getResultsViewUrlTarget(organization.slug);\n};\n\nexport function getSortField(field: string): string | null {\n  if (SPECIAL_FIELDS.hasOwnProperty(field)) {\n    return SPECIAL_FIELDS[field as keyof typeof SPECIAL_FIELDS].sortField;\n  }\n  switch (field) {\n    case FieldKey.LAST_SEEN:\n      return 'date';\n    case FieldKey.FIRST_SEEN:\n      return 'new';\n    default:\n      return null;\n  }\n}\n\nconst contentStyle = css`\n  width: 100%;\n  justify-content: space-between;\n  display: flex;\n  padding: 6px 10px;\n`;\n\nconst StyledContent = styled('div')`\n  ${contentStyle};\n`;\n\nconst StyledLink = styled(Link)`\n  ${contentStyle};\n  color: ${p => p.theme.gray400};\n  &:hover {\n    color: ${p => p.theme.gray400};\n    background: ${p => p.theme.hover};\n  }\n`;\n\nconst SecondaryCount = styled(Count)`\n  :before {\n    content: '/';\n    padding-left: ${space(0.25)};\n    padding-right: 2px;\n  }\n`;\n\nconst WrappedCount = styled(({value, ...p}) => (\n  <div {...p}>\n    <Count value={value} />\n  </div>\n))`\n  text-align: right;\n  font-weight: bold;\n  font-variant-numeric: tabular-nums;\n  padding-left: ${space(2)};\n  color: ${p => p.theme.subText};\n`;\n\nconst Divider = styled('div')`\n  height: 1px;\n  overflow: hidden;\n  background-color: ${p => p.theme.innerBorder};\n`;\n\nconst ActorContainer = styled('div')`\n  display: flex;\n  justify-content: left;\n  margin-left: 18px;\n  /* IconUser is the only one with 20px. We are setting 24px here to make the height consistent */\n  height: 24px;\n  :hover {\n    cursor: default;\n  }\n`;\n\nconst LinksContainer = styled('span')`\n  white-space: nowrap;\n`;\n\n/**\n * Get the field renderer for the named field and metadata\n *\n * @param {String} field name\n * @param {object} metadata mapping.\n * @returns {Function}\n */\nexport function getIssueFieldRenderer(\n  field: string\n): FieldFormatterRenderFunctionPartial | null {\n  if (SPECIAL_FIELDS.hasOwnProperty(field)) {\n    return SPECIAL_FIELDS[field].renderFunc;\n  }\n\n  // Return null if there is no field renderer for this field\n  // Should check the discover field renderer for this field\n  return null;\n}\n","import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {isMultiSeriesStats} from 'sentry/components/charts/utils';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport {EventsStats, MultiSeriesEventsStats, TagCollection} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {EventsTableData, TableData} from 'sentry/utils/discover/discoverQuery';\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport {\n  getFieldRenderer,\n  RenderFunctionBaggage,\n} from 'sentry/utils/discover/fieldRenderers';\nimport {SPAN_OP_BREAKDOWN_FIELDS} from 'sentry/utils/discover/fields';\nimport {Container} from 'sentry/utils/discover/styles';\nimport {\n  eventDetailsRouteWithEventView,\n  generateEventSlug,\n} from 'sentry/utils/discover/urls';\nimport {getShortEventId} from 'sentry/utils/events';\nimport {getMeasurements} from 'sentry/utils/measurements/measurements';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayType, WidgetQuery} from '../types';\nimport {\n  flattenMultiSeriesDataWithGrouping,\n  transformSeries,\n} from '../widgetCard/widgetQueries';\n\nimport {ContextualProps, DatasetConfig} from './base';\n\nconst DEFAULT_WIDGET_QUERY: WidgetQuery = {\n  name: '',\n  fields: ['count()'],\n  columns: [],\n  fieldAliases: [],\n  aggregates: ['count()'],\n  conditions: '',\n  orderby: '-count()',\n};\n\ntype SeriesWithOrdering = [order: number, series: Series];\n\nexport const ErrorsAndTransactionsConfig: DatasetConfig<\n  EventsStats | MultiSeriesEventsStats,\n  TableData | EventsTableData\n> = {\n  defaultWidgetQuery: DEFAULT_WIDGET_QUERY,\n  getCustomFieldRenderer: getCustomEventsFieldRenderer,\n  getTableFieldOptions: getEventsTableFieldOptions,\n  supportedDisplayTypes: [\n    DisplayType.AREA,\n    DisplayType.BAR,\n    DisplayType.BIG_NUMBER,\n    DisplayType.LINE,\n    DisplayType.TABLE,\n    DisplayType.TOP_N,\n    DisplayType.WORLD_MAP,\n  ],\n  transformSeries: transformEventsResponseToSeries,\n  transformTable: transformEventsResponseToTable,\n};\n\nfunction getEventsTableFieldOptions(\n  contextualProps?: ContextualProps,\n  tags?: TagCollection\n) {\n  const organization = contextualProps?.organization!;\n  const measurements = getMeasurements();\n\n  return generateFieldOptions({\n    organization,\n    tagKeys: Object.values(tags ?? {}).map(({key}) => key),\n    measurementKeys: Object.values(measurements).map(({key}) => key),\n    spanOperationBreakdownKeys: SPAN_OP_BREAKDOWN_FIELDS,\n  });\n}\n\nfunction transformEventsResponseToTable(\n  data: TableData | EventsTableData,\n  _widgetQuery: WidgetQuery,\n  contextualProps?: ContextualProps\n): TableData {\n  let tableData = data;\n  const shouldUseEvents =\n    contextualProps?.organization?.features.includes(\n      'discover-frontend-use-events-endpoint'\n    ) || false;\n  // events api uses a different response format so we need to construct tableData differently\n  if (shouldUseEvents) {\n    const fieldsMeta = (data as EventsTableData).meta?.fields;\n    tableData = {\n      ...data,\n      meta: {...fieldsMeta, isMetricsData: data.meta?.isMetricsData},\n    } as TableData;\n  }\n  return tableData as TableData;\n}\n\nfunction transformEventsResponseToSeries(\n  data: EventsStats | MultiSeriesEventsStats,\n  widgetQuery: WidgetQuery,\n  contextualProps?: ContextualProps\n): Series[] {\n  let output: Series[] = [];\n  const queryAlias = widgetQuery.name;\n\n  const widgetBuilderNewDesign =\n    contextualProps?.organization?.features.includes(\n      'new-widget-builder-experience-design'\n    ) || false;\n\n  if (isMultiSeriesStats(data)) {\n    let seriesWithOrdering: SeriesWithOrdering[] = [];\n    const isMultiSeriesDataWithGrouping =\n      widgetQuery.aggregates.length > 1 && widgetQuery.columns.length;\n\n    // Convert multi-series results into chartable series. Multi series results\n    // are created when multiple yAxis are used. Convert the timeseries\n    // data into a multi-series data set.  As the server will have\n    // replied with a map like: {[titleString: string]: EventsStats}\n    if (widgetBuilderNewDesign && isMultiSeriesDataWithGrouping) {\n      seriesWithOrdering = flattenMultiSeriesDataWithGrouping(data, queryAlias);\n    } else {\n      seriesWithOrdering = Object.keys(data).map((seriesName: string) => {\n        const prefixedName = queryAlias ? `${queryAlias} : ${seriesName}` : seriesName;\n        const seriesData: EventsStats = data[seriesName];\n        return [seriesData.order || 0, transformSeries(seriesData, prefixedName)];\n      });\n    }\n\n    output = [\n      ...seriesWithOrdering\n        .sort((itemA, itemB) => itemA[0] - itemB[0])\n        .map(item => item[1]),\n    ];\n  } else {\n    const field = widgetQuery.aggregates[0];\n    const prefixedName = queryAlias ? `${queryAlias} : ${field}` : field;\n    const transformed = transformSeries(data, prefixedName);\n    output.push(transformed);\n  }\n\n  return output;\n}\n\nfunction renderEventIdAsLinkable(data, {eventView, organization}: RenderFunctionBaggage) {\n  const id: string | unknown = data?.id;\n  if (!eventView || typeof id !== 'string') {\n    return null;\n  }\n\n  const eventSlug = generateEventSlug(data);\n\n  const target = eventDetailsRouteWithEventView({\n    orgSlug: organization.slug,\n    eventSlug,\n    eventView,\n  });\n\n  return (\n    <Tooltip title={t('View Event')}>\n      <Link data-test-id=\"view-event\" to={target}>\n        <Container>{getShortEventId(id)}</Container>\n      </Link>\n    </Tooltip>\n  );\n}\n\nfunction renderTraceAsLinkable(\n  data,\n  {eventView, organization, location}: RenderFunctionBaggage\n) {\n  const id: string | unknown = data?.trace;\n  if (!eventView || typeof id !== 'string') {\n    return null;\n  }\n  const dateSelection = eventView.normalizeDateSelection(location);\n  const target = getTraceDetailsUrl(organization, String(data.trace), dateSelection, {});\n\n  return (\n    <Tooltip title={t('View Trace')}>\n      <Link data-test-id=\"view-trace\" to={target}>\n        <Container>{getShortEventId(id)}</Container>\n      </Link>\n    </Tooltip>\n  );\n}\n\nexport function getCustomEventsFieldRenderer(\n  field: string,\n  meta: MetaType,\n  contextualProps?: ContextualProps\n) {\n  const isAlias = !contextualProps?.organization?.features.includes(\n    'discover-frontend-use-events-endpoint'\n  );\n\n  if (field === 'id') {\n    return renderEventIdAsLinkable;\n  }\n\n  if (field === 'trace') {\n    return renderTraceAsLinkable;\n  }\n\n  return getFieldRenderer(field, meta, isAlias);\n}\n","import GroupStore from 'sentry/stores/groupStore';\nimport {Group} from 'sentry/types';\nimport {getIssueFieldRenderer} from 'sentry/utils/dashboards/issueFieldRenderers';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableData, TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {queryToObj} from 'sentry/utils/stream';\nimport {DISCOVER_EXCLUSION_FIELDS, IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport {DisplayType, WidgetQuery} from '../types';\nimport {ISSUE_FIELD_TO_HEADER_MAP} from '../widgetBuilder/issueWidget/fields';\nimport {generateIssueWidgetFieldOptions} from '../widgetBuilder/issueWidget/utils';\n\nimport {ContextualProps, DatasetConfig} from './base';\n\nconst DEFAULT_WIDGET_QUERY: WidgetQuery = {\n  name: '',\n  fields: ['issue', 'assignee', 'title'] as string[],\n  columns: ['issue', 'assignee', 'title'],\n  fieldAliases: [],\n  aggregates: [],\n  conditions: '',\n  orderby: IssueSortOptions.DATE,\n};\n\nexport const IssuesConfig: DatasetConfig<never, Group[]> = {\n  defaultWidgetQuery: DEFAULT_WIDGET_QUERY,\n  getCustomFieldRenderer: getIssueFieldRenderer,\n  getTableFieldOptions: () => generateIssueWidgetFieldOptions(),\n  fieldHeaderMap: ISSUE_FIELD_TO_HEADER_MAP,\n  supportedDisplayTypes: [DisplayType.TABLE],\n  transformTable: transformIssuesResponseToTable,\n};\n\nexport function transformIssuesResponseToTable(\n  data: Group[],\n  widgetQuery: WidgetQuery,\n  contextualProps?: ContextualProps\n): TableData {\n  GroupStore.add(data);\n  const transformedTableResults: TableDataRow[] = [];\n  data.forEach(\n    ({\n      id,\n      shortId,\n      title,\n      lifetime,\n      filtered,\n      count,\n      userCount,\n      project,\n      annotations,\n      ...resultProps\n    }) => {\n      const transformedResultProps: Omit<TableDataRow, 'id'> = {};\n      Object.keys(resultProps)\n        .filter(key => ['number', 'string'].includes(typeof resultProps[key]))\n        .forEach(key => {\n          transformedResultProps[key] = resultProps[key];\n        });\n\n      const transformedTableResult: TableDataRow = {\n        ...transformedResultProps,\n        events: count,\n        users: userCount,\n        id,\n        'issue.id': id,\n        issue: shortId,\n        title,\n        project: project.slug,\n        links: annotations?.join(', '),\n      };\n\n      // Get lifetime stats\n      if (lifetime) {\n        transformedTableResult.lifetimeEvents = lifetime?.count;\n        transformedTableResult.lifetimeUsers = lifetime?.userCount;\n      }\n      // Get filtered stats\n      if (filtered) {\n        transformedTableResult.filteredEvents = filtered?.count;\n        transformedTableResult.filteredUsers = filtered?.userCount;\n      }\n\n      // Discover Url properties\n      const query = widgetQuery.conditions;\n      const queryTerms: string[] = [];\n      if (typeof query === 'string') {\n        const queryObj = queryToObj(query);\n        for (const queryTag in queryObj) {\n          if (!DISCOVER_EXCLUSION_FIELDS.includes(queryTag)) {\n            const queryVal = queryObj[queryTag].includes(' ')\n              ? `\"${queryObj[queryTag]}\"`\n              : queryObj[queryTag];\n            queryTerms.push(`${queryTag}:${queryVal}`);\n          }\n        }\n\n        if (queryObj.__text) {\n          queryTerms.push(queryObj.__text);\n        }\n      }\n      transformedTableResult.discoverSearchQuery =\n        (queryTerms.length ? ' ' : '') + queryTerms.join(' ');\n      transformedTableResult.projectId = project.id;\n\n      const {period, start, end} = contextualProps?.pageFilters?.datetime || {};\n      if (start && end) {\n        transformedTableResult.start = getUtcDateString(start);\n        transformedTableResult.end = getUtcDateString(end);\n      }\n      transformedTableResult.period = period ?? '';\n      transformedTableResults.push(transformedTableResult);\n    }\n  );\n  return {data: transformedTableResults} as TableData;\n}\n","import {t} from 'sentry/locale';\nimport {MetricsApiResponse, SessionApiResponse} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\n\nimport {DERIVED_STATUS_METRICS_PATTERN} from '../widgetBuilder/releaseWidget/fields';\n\nimport {derivedMetricsToField} from './releaseWidgetQueries';\n\nexport function getSeriesName(\n  field: string,\n  group: SessionApiResponse['groups'][number],\n  queryAlias?: string\n) {\n  const groupName = Object.entries(group.by)\n    .map(([_, value]) => `${value}`)\n    .join(', ');\n  const seriesName = groupName\n    ? `${groupName} : ${derivedMetricsToField(field)}`\n    : derivedMetricsToField(field);\n  return `${queryAlias ? `${queryAlias} > ` : ''}${seriesName}`;\n}\n\nexport function transformSessionsResponseToSeries(\n  response: SessionApiResponse | MetricsApiResponse | null,\n  requestedStatusMetrics: string[],\n  injectedFields: string[],\n  queryAlias?: string\n): Series[] {\n  if (response === null) {\n    return [];\n  }\n\n  const results: Series[] = [];\n\n  if (!response.groups.length) {\n    return [\n      {\n        seriesName: `(${t('no results')})`,\n        data: response.intervals.map(interval => ({\n          name: interval,\n          value: 0,\n        })),\n      },\n    ];\n  }\n\n  response.groups.forEach(group => {\n    Object.keys(group.series).forEach(field => {\n      // if `sum(session)` or `count_unique(user)` are not\n      // requested as a part of the payload for\n      // derived status metrics through the Sessions API,\n      // they are injected into the payload and need to be\n      // stripped.\n      if (!!!injectedFields.includes(derivedMetricsToField(field))) {\n        results.push({\n          seriesName: getSeriesName(field, group, queryAlias),\n          data: response.intervals.map((interval, index) => ({\n            name: interval,\n            value: group.series[field][index] ?? 0,\n          })),\n        });\n      }\n    });\n    // if session.status is a groupby, some post processing\n    // is needed to calculate the status derived metrics\n    // from grouped results of `sum(session)` or `count_unique(user)`\n    if (requestedStatusMetrics.length && defined(group.by['session.status'])) {\n      requestedStatusMetrics.forEach(status => {\n        const result = status.match(DERIVED_STATUS_METRICS_PATTERN);\n        if (result) {\n          let metricField: string | undefined = undefined;\n          if (group.by['session.status'] === result[1]) {\n            if (result[2] === 'session') {\n              metricField = 'sum(session)';\n            } else if (result[2] === 'user') {\n              metricField = 'count_unique(user)';\n            }\n          }\n          results.push({\n            seriesName: getSeriesName(status, group, queryAlias),\n            data: response.intervals.map((interval, index) => ({\n              name: interval,\n              value: metricField ? group.series[metricField][index] ?? 0 : 0,\n            })),\n          });\n        }\n      });\n    }\n  });\n\n  return results;\n}\n","import omit from 'lodash/omit';\n\nimport {MetricsApiResponse, SessionApiResponse} from 'sentry/types';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DERIVED_STATUS_METRICS_PATTERN,\n  SESSIONS_TAGS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/releaseWidget/fields';\n\nimport {derivedMetricsToField} from './releaseWidgetQueries';\n\nexport function changeObjectValuesToTypes(\n  obj: Record<string, number | string | null> | undefined\n) {\n  return Object.keys(obj ?? {}).reduce((acc, key) => {\n    acc[key] = SESSIONS_TAGS.includes(key) ? 'string' : aggregateOutputType(key);\n    return acc;\n  }, {});\n}\n\nexport function mapDerivedMetricsToFields(results: Record<string, number | null>) {\n  const mappedResults: Record<string, number | null> = {};\n  for (const [key, value] of Object.entries(results)) {\n    mappedResults[derivedMetricsToField(key)] = value;\n  }\n  return mappedResults;\n}\n\nexport function getDerivedMetrics(groupBy, totals, requestedStatusMetrics) {\n  const derivedTotals = {};\n  if (!requestedStatusMetrics.length) {\n    return derivedTotals;\n  }\n  if (groupBy['session.status'] === undefined) {\n    return derivedTotals;\n  }\n  requestedStatusMetrics.forEach(status => {\n    const result = status.match(DERIVED_STATUS_METRICS_PATTERN);\n    if (result) {\n      if (groupBy['session.status'] === result[1]) {\n        if (result[2] === 'session') {\n          derivedTotals[status] = totals['sum(session)'];\n        } else if (result[2] === 'user') {\n          derivedTotals[status] = totals['count_unique(user)'];\n        }\n      } else {\n        derivedTotals[status] = 0;\n      }\n    }\n  });\n  return derivedTotals;\n}\n\nexport function transformSessionsResponseToTable(\n  response: SessionApiResponse | MetricsApiResponse | null,\n  requestedStatusMetrics: string[],\n  injectedFields: string[]\n): TableData {\n  const data =\n    response?.groups.map((group, index) => ({\n      id: String(index),\n      ...mapDerivedMetricsToFields(group.by),\n      // if `sum(session)` or `count_unique(user)` are not\n      // requested as a part of the payload for\n      // derived status metrics through the Sessions API,\n      // they are injected into the payload and need to be\n      // stripped.\n      ...omit(mapDerivedMetricsToFields(group.totals), injectedFields),\n      // if session.status is a groupby, some post processing\n      // is needed to calculate the status derived metrics\n      // from grouped results of `sum(session)` or `count_unique(user)`\n      ...getDerivedMetrics(group.by, group.totals, requestedStatusMetrics),\n    })) ?? [];\n\n  const singleRow = data[0];\n  // TODO(metrics): these should come from the API in the future\n  const meta = {\n    ...changeObjectValuesToTypes(omit(singleRow, 'id')),\n  };\n\n  return {meta, data};\n}\n","import omit from 'lodash/omit';\n\nimport {t} from 'sentry/locale';\nimport {MetricsApiResponse, SessionApiResponse, SessionField} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\n\nimport {DisplayType, WidgetQuery} from '../types';\nimport {\n  DERIVED_STATUS_METRICS_PATTERN,\n  generateReleaseWidgetFieldOptions,\n  SESSIONS_FIELDS,\n  SESSIONS_TAGS,\n} from '../widgetBuilder/releaseWidget/fields';\nimport {\n  derivedMetricsToField,\n  resolveDerivedStatusFields,\n} from '../widgetCard/releaseWidgetQueries';\nimport {getSeriesName} from '../widgetCard/transformSessionsResponseToSeries';\nimport {\n  changeObjectValuesToTypes,\n  getDerivedMetrics,\n  mapDerivedMetricsToFields,\n} from '../widgetCard/transformSessionsResponseToTable';\n\nimport {DatasetConfig} from './base';\n\nconst DEFAULT_WIDGET_QUERY: WidgetQuery = {\n  name: '',\n  fields: [`crash_free_rate(${SessionField.SESSION})`],\n  columns: [],\n  fieldAliases: [],\n  aggregates: [`crash_free_rate(${SessionField.SESSION})`],\n  conditions: '',\n  orderby: `-crash_free_rate(${SessionField.SESSION})`,\n};\n\nexport const ReleasesConfig: DatasetConfig<\n  SessionApiResponse | MetricsApiResponse,\n  SessionApiResponse | MetricsApiResponse\n> = {\n  defaultWidgetQuery: DEFAULT_WIDGET_QUERY,\n  getCustomFieldRenderer: (field, meta) => getFieldRenderer(field, meta, false),\n  getTableFieldOptions: getReleasesTableFieldOptions,\n  supportedDisplayTypes: [\n    DisplayType.AREA,\n    DisplayType.BAR,\n    DisplayType.BIG_NUMBER,\n    DisplayType.LINE,\n    DisplayType.TABLE,\n    DisplayType.TOP_N,\n  ],\n  transformSeries: transformSessionsResponseToSeries,\n  transformTable: transformSessionsResponseToTable,\n};\n\nfunction getReleasesTableFieldOptions() {\n  return generateReleaseWidgetFieldOptions(Object.values(SESSIONS_FIELDS), SESSIONS_TAGS);\n}\n\nexport function transformSessionsResponseToTable(\n  data: SessionApiResponse | MetricsApiResponse,\n  widgetQuery: WidgetQuery\n): TableData {\n  const useSessionAPI = widgetQuery.columns.includes('session.status');\n  const {derivedStatusFields, injectedFields} = resolveDerivedStatusFields(\n    widgetQuery.aggregates,\n    widgetQuery.orderby,\n    useSessionAPI\n  );\n  const rows = data.groups.map((group, index) => ({\n    id: String(index),\n    ...mapDerivedMetricsToFields(group.by),\n    // if `sum(session)` or `count_unique(user)` are not\n    // requested as a part of the payload for\n    // derived status metrics through the Sessions API,\n    // they are injected into the payload and need to be\n    // stripped.\n    ...omit(mapDerivedMetricsToFields(group.totals), injectedFields),\n    // if session.status is a groupby, some post processing\n    // is needed to calculate the status derived metrics\n    // from grouped results of `sum(session)` or `count_unique(user)`\n    ...getDerivedMetrics(group.by, group.totals, derivedStatusFields),\n  }));\n\n  const singleRow = rows[0];\n  const meta = {\n    ...changeObjectValuesToTypes(omit(singleRow, 'id')),\n  };\n  return {meta, data: rows};\n}\n\nexport function transformSessionsResponseToSeries(\n  data: SessionApiResponse | MetricsApiResponse,\n  widgetQuery: WidgetQuery\n) {\n  if (data === null) {\n    return [];\n  }\n\n  const queryAlias = widgetQuery.name;\n\n  const useSessionAPI = widgetQuery.columns.includes('session.status');\n  const {derivedStatusFields: requestedStatusMetrics, injectedFields} =\n    resolveDerivedStatusFields(\n      widgetQuery.aggregates,\n      widgetQuery.orderby,\n      useSessionAPI\n    );\n\n  const results: Series[] = [];\n\n  if (!data.groups.length) {\n    return [\n      {\n        seriesName: `(${t('no results')})`,\n        data: data.intervals.map(interval => ({\n          name: interval,\n          value: 0,\n        })),\n      },\n    ];\n  }\n\n  data.groups.forEach(group => {\n    Object.keys(group.series).forEach(field => {\n      // if `sum(session)` or `count_unique(user)` are not\n      // requested as a part of the payload for\n      // derived status metrics through the Sessions API,\n      // they are injected into the payload and need to be\n      // stripped.\n      if (!!!injectedFields.includes(derivedMetricsToField(field))) {\n        results.push({\n          seriesName: getSeriesName(field, group, queryAlias),\n          data: data.intervals.map((interval, index) => ({\n            name: interval,\n            value: group.series[field][index] ?? 0,\n          })),\n        });\n      }\n    });\n    // if session.status is a groupby, some post processing\n    // is needed to calculate the status derived metrics\n    // from grouped results of `sum(session)` or `count_unique(user)`\n    if (requestedStatusMetrics.length && defined(group.by['session.status'])) {\n      requestedStatusMetrics.forEach(status => {\n        const result = status.match(DERIVED_STATUS_METRICS_PATTERN);\n        if (result) {\n          let metricField: string | undefined = undefined;\n          if (group.by['session.status'] === result[1]) {\n            if (result[2] === 'session') {\n              metricField = 'sum(session)';\n            } else if (result[2] === 'user') {\n              metricField = 'count_unique(user)';\n            }\n          }\n          results.push({\n            seriesName: getSeriesName(status, group, queryAlias),\n            data: data.intervals.map((interval, index) => ({\n              name: interval,\n              value: metricField ? group.series[metricField][index] ?? 0 : 0,\n            })),\n          });\n        }\n      });\n    }\n  });\n\n  return results;\n}\n","import {OrganizationSummary, PageFilters, SelectValue, TagCollection} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport {MetaType} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {FieldValue} from 'sentry/views/eventsV2/table/types';\n\nimport {DisplayType, WidgetQuery, WidgetType} from '../types';\n\nimport {ErrorsAndTransactionsConfig} from './errorsAndTransactions';\nimport {IssuesConfig} from './issues';\nimport {ReleasesConfig} from './releases';\n\nexport type ContextualProps = {\n  organization?: OrganizationSummary;\n  pageFilters?: PageFilters;\n};\n\nexport interface DatasetConfig<SeriesResponse, TableResponse> {\n  /**\n   * Default query to display when dataset is selected in the\n   * Widget Builder.\n   */\n  defaultWidgetQuery: WidgetQuery;\n  /**\n   * Field options to display in the Column selectors for\n   * Table display type.\n   */\n  getTableFieldOptions: (\n    contextualProps?: ContextualProps,\n    tags?: TagCollection\n  ) => Record<string, SelectValue<FieldValue>>;\n  /**\n   * List of supported display types for dataset.\n   */\n  supportedDisplayTypes: DisplayType[];\n  /**\n   * Transforms table API results into format that is used by\n   * table and big number components.\n   */\n  transformTable: (\n    data: TableResponse,\n    widgetQuery: WidgetQuery,\n    contextualProps?: ContextualProps\n  ) => TableData;\n  /**\n   * Used for mapping column names to more desirable\n   * values in tables.\n   */\n  fieldHeaderMap?: Record<string, string>;\n  /**\n   * Used to select custom renderers for field types.\n   */\n  getCustomFieldRenderer?: (\n    field: string,\n    meta: MetaType,\n    contextualProps?: ContextualProps\n  ) => ReturnType<typeof getFieldRenderer> | null;\n  /**\n   * Transforms timeseries API results into series data that is\n   * ingestable by echarts for timeseries visualizations.\n   */\n  transformSeries?: (\n    data: SeriesResponse,\n    widgetQuery: WidgetQuery,\n    contextualProps?: ContextualProps\n  ) => Series[];\n}\n\nexport function getDatasetConfig<T extends WidgetType | undefined>(\n  widgetType: T\n): T extends WidgetType.ISSUE\n  ? typeof IssuesConfig\n  : T extends WidgetType.RELEASE\n  ? typeof ReleasesConfig\n  : typeof ErrorsAndTransactionsConfig;\n\nexport function getDatasetConfig(\n  widgetType?: WidgetType\n): typeof IssuesConfig | typeof ReleasesConfig | typeof ErrorsAndTransactionsConfig {\n  switch (widgetType) {\n    case WidgetType.ISSUE:\n      return IssuesConfig;\n    case WidgetType.RELEASE:\n      return ReleasesConfig;\n    case WidgetType.DISCOVER:\n    default:\n      return ErrorsAndTransactionsConfig;\n  }\n}\n","import {Query} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport pick from 'lodash/pick';\nimport trimStart from 'lodash/trimStart';\nimport * as qs from 'query-string';\n\nimport WidgetArea from 'sentry-images/dashboard/widget-area.svg';\nimport WidgetBar from 'sentry-images/dashboard/widget-bar.svg';\nimport WidgetBigNumber from 'sentry-images/dashboard/widget-big-number.svg';\nimport WidgetLine from 'sentry-images/dashboard/widget-line-1.svg';\nimport WidgetTable from 'sentry-images/dashboard/widget-table.svg';\nimport WidgetWorldMap from 'sentry-images/dashboard/widget-world-map.svg';\n\nimport {parseArithmetic} from 'sentry/components/arithmeticInput/parser';\nimport {\n  Fidelity,\n  getDiffInMinutes,\n  getInterval,\n  SIX_HOURS,\n  TWENTY_FOUR_HOURS,\n} from 'sentry/components/charts/utils';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString, parsePeriodToHours} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  getAggregateAlias,\n  getColumnsAndAggregates,\n  isEquation,\n  stripEquationPrefix,\n} from 'sentry/utils/discover/fields';\nimport {DisplayModes} from 'sentry/utils/discover/types';\nimport {\n  DashboardDetails,\n  DisplayType,\n  Widget,\n  WidgetQuery,\n  WidgetType,\n} from 'sentry/views/dashboardsV2/types';\n\nexport type ValidationError = {\n  [key: string]: string | string[] | ValidationError[] | ValidationError;\n};\n\nexport type FlatValidationError = {\n  [key: string]: string | FlatValidationError[] | FlatValidationError;\n};\n\nexport function cloneDashboard(dashboard: DashboardDetails): DashboardDetails {\n  return cloneDeep(dashboard);\n}\n\nexport function eventViewFromWidget(\n  title: string,\n  query: WidgetQuery,\n  selection: PageFilters,\n  widgetDisplayType?: DisplayType\n): EventView {\n  const {start, end, period: statsPeriod} = selection.datetime;\n  const {projects, environments} = selection;\n\n  // World Map requires an additional column (geo.country_code) to display in discover when navigating from the widget\n  const fields =\n    widgetDisplayType === DisplayType.WORLD_MAP &&\n    !query.columns.includes('geo.country_code')\n      ? ['geo.country_code', ...query.columns, ...query.aggregates]\n      : [...query.columns, ...query.aggregates];\n  const conditions =\n    widgetDisplayType === DisplayType.WORLD_MAP &&\n    !query.conditions.includes('has:geo.country_code')\n      ? `${query.conditions} has:geo.country_code`.trim()\n      : query.conditions;\n\n  const {orderby} = query;\n  // Need to convert orderby to aggregate alias because eventView still uses aggregate alias format\n  const aggregateAliasOrderBy = orderby\n    ? `${orderby.startsWith('-') ? '-' : ''}${getAggregateAlias(trimStart(orderby, '-'))}`\n    : orderby;\n  return EventView.fromSavedQuery({\n    id: undefined,\n    name: title,\n    version: 2,\n    fields,\n    query: conditions,\n    orderby: aggregateAliasOrderBy,\n    projects,\n    range: statsPeriod ?? undefined,\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n}\n\nfunction coerceStringToArray(value?: string | string[] | null) {\n  return typeof value === 'string' ? [value] : value;\n}\n\nexport function constructWidgetFromQuery(query?: Query): Widget | undefined {\n  if (query) {\n    const queryNames = coerceStringToArray(query.queryNames);\n    const queryConditions = coerceStringToArray(query.queryConditions);\n    const queryFields = coerceStringToArray(query.queryFields);\n    const queries: WidgetQuery[] = [];\n    if (\n      queryConditions &&\n      queryNames &&\n      queryFields &&\n      typeof query.queryOrderby === 'string'\n    ) {\n      const {columns, aggregates} = getColumnsAndAggregates(queryFields);\n      queryConditions.forEach((condition, index) => {\n        queries.push({\n          name: queryNames[index],\n          conditions: condition,\n          fields: queryFields,\n          columns,\n          aggregates,\n          orderby: query.queryOrderby as string,\n        });\n      });\n    }\n    if (query.title && query.displayType && query.interval && queries.length > 0) {\n      const newWidget: Widget = {\n        ...(pick(query, ['title', 'displayType', 'interval']) as {\n          displayType: DisplayType;\n          interval: string;\n          title: string;\n        }),\n        widgetType: WidgetType.DISCOVER,\n        queries,\n      };\n      return newWidget;\n    }\n  }\n  return undefined;\n}\n\nexport function miniWidget(displayType: DisplayType): string {\n  switch (displayType) {\n    case DisplayType.BAR:\n      return WidgetBar;\n    case DisplayType.AREA:\n    case DisplayType.TOP_N:\n      return WidgetArea;\n    case DisplayType.BIG_NUMBER:\n      return WidgetBigNumber;\n    case DisplayType.TABLE:\n      return WidgetTable;\n    case DisplayType.WORLD_MAP:\n      return WidgetWorldMap;\n    case DisplayType.LINE:\n    default:\n      return WidgetLine;\n  }\n}\n\nexport function getWidgetInterval(\n  widget: Widget,\n  datetimeObj: Partial<PageFilters['datetime']>,\n  fidelity?: Fidelity\n): string {\n  // Don't fetch more than 66 bins as we're plotting on a small area.\n  const MAX_BIN_COUNT = 66;\n\n  // Bars charts are daily totals to aligned with discover. It also makes them\n  // usefully different from line/area charts until we expose the interval control, or remove it.\n  let interval = widget.displayType === 'bar' ? '1d' : widget.interval;\n  if (!interval) {\n    // Default to 5 minutes\n    interval = '5m';\n  }\n  const desiredPeriod = parsePeriodToHours(interval);\n  const selectedRange = getDiffInMinutes(datetimeObj);\n\n  if (fidelity) {\n    // Primarily to support lower fidelity for Release Health widgets\n    // the sort on releases and hit the metrics API endpoint.\n    interval = getInterval(datetimeObj, fidelity);\n    if (selectedRange > SIX_HOURS && selectedRange <= TWENTY_FOUR_HOURS) {\n      interval = '1h';\n    }\n    return widget.displayType === 'bar' ? '1d' : interval;\n  }\n\n  // selectedRange is in minutes, desiredPeriod is in hours\n  // convert desiredPeriod to minutes\n  if (selectedRange / (desiredPeriod * 60) > MAX_BIN_COUNT) {\n    const highInterval = getInterval(datetimeObj, 'high');\n    // Only return high fidelity interval if desired interval is higher fidelity\n    if (desiredPeriod < parsePeriodToHours(highInterval)) {\n      return highInterval;\n    }\n  }\n  return interval;\n}\n\nexport function getFieldsFromEquations(fields: string[]): string[] {\n  // Gather all fields and functions used in equations and prepend them to the provided fields\n  const termsSet: Set<string> = new Set();\n  fields.filter(isEquation).forEach(field => {\n    const parsed = parseArithmetic(stripEquationPrefix(field)).tc;\n    parsed.fields.forEach(({term}) => termsSet.add(term as string));\n    parsed.functions.forEach(({term}) => termsSet.add(term as string));\n  });\n  return Array.from(termsSet);\n}\n\nexport function getWidgetDiscoverUrl(\n  widget: Widget,\n  selection: PageFilters,\n  organization: Organization,\n  index: number = 0\n) {\n  const eventView = eventViewFromWidget(\n    widget.title,\n    widget.queries[index],\n    selection,\n    widget.displayType\n  );\n  const discoverLocation = eventView.getResultsViewUrlTarget(organization.slug);\n\n  // Pull a max of 3 valid Y-Axis from the widget\n  const yAxisOptions = eventView.getYAxisOptions().map(({value}) => value);\n  discoverLocation.query.yAxis = [\n    ...new Set(\n      widget.queries[0].aggregates.filter(aggregate => yAxisOptions.includes(aggregate))\n    ),\n  ].slice(0, 3);\n\n  // Visualization specific transforms\n  switch (widget.displayType) {\n    case DisplayType.WORLD_MAP:\n      discoverLocation.query.display = DisplayModes.WORLDMAP;\n      break;\n    case DisplayType.BAR:\n      discoverLocation.query.display = DisplayModes.BAR;\n      break;\n    case DisplayType.TOP_N:\n      discoverLocation.query.display = DisplayModes.TOP5;\n      // Last field is used as the yAxis\n      const aggregates = widget.queries[0].aggregates;\n      discoverLocation.query.yAxis = aggregates[aggregates.length - 1];\n      if (aggregates.slice(0, -1).includes(aggregates[aggregates.length - 1])) {\n        discoverLocation.query.field = aggregates.slice(0, -1);\n      }\n      break;\n    default:\n      break;\n  }\n\n  // Equation fields need to have their terms explicitly selected as columns in the discover table\n  const fields = discoverLocation.query.field;\n  const query = widget.queries[0];\n  const queryFields = defined(query.fields)\n    ? query.fields\n    : [...query.columns, ...query.aggregates];\n  const equationFields = getFieldsFromEquations(queryFields);\n  // Updates fields by adding any individual terms from equation fields as a column\n  equationFields.forEach(term => {\n    if (Array.isArray(fields) && !fields.includes(term)) {\n      fields.unshift(term);\n    }\n  });\n\n  // Construct and return the discover url\n  const discoverPath = `${discoverLocation.pathname}?${qs.stringify({\n    ...discoverLocation.query,\n  })}`;\n  return discoverPath;\n}\n\nexport function getWidgetIssueUrl(\n  widget: Widget,\n  selection: PageFilters,\n  organization: Organization\n) {\n  const {start, end, utc, period} = selection.datetime;\n  const datetime =\n    start && end\n      ? {start: getUtcDateString(start), end: getUtcDateString(end), utc}\n      : {statsPeriod: period};\n  const issuesLocation = `/organizations/${organization.slug}/issues/?${qs.stringify({\n    query: widget.queries?.[0]?.conditions,\n    sort: widget.queries?.[0]?.orderby,\n    ...datetime,\n    project: selection.projects,\n    environment: selection.environments,\n  })}`;\n  return issuesLocation;\n}\n\nexport function getWidgetReleasesUrl(\n  _widget: Widget,\n  selection: PageFilters,\n  organization: Organization\n) {\n  const {start, end, utc, period} = selection.datetime;\n  const datetime =\n    start && end\n      ? {start: getUtcDateString(start), end: getUtcDateString(end), utc}\n      : {statsPeriod: period};\n  const releasesLocation = `/organizations/${organization.slug}/releases/?${qs.stringify({\n    ...datetime,\n    project: selection.projects,\n    environment: selection.environments,\n  })}`;\n  return releasesLocation;\n}\n\nexport function flattenErrors(\n  data: ValidationError | string,\n  update: FlatValidationError\n): FlatValidationError {\n  if (typeof data === 'string') {\n    update.error = data;\n  } else {\n    Object.keys(data).forEach((key: string) => {\n      const value = data[key];\n      if (typeof value === 'string') {\n        update[key] = value;\n        return;\n      }\n      // Recurse into nested objects.\n      if (Array.isArray(value) && typeof value[0] === 'string') {\n        update[key] = value[0];\n        return;\n      }\n      if (Array.isArray(value) && typeof value[0] === 'object') {\n        (value as ValidationError[]).map(item => flattenErrors(item, update));\n      } else {\n        flattenErrors(value as ValidationError, update);\n      }\n    });\n  }\n  return update;\n}\n\nexport function getDashboardsMEPQueryParams(isMEPEnabled: boolean) {\n  return isMEPEnabled\n    ? {\n        dataset: 'metricsEnhanced',\n      }\n    : {};\n}\n\nexport function getNumEquations(possibleEquations: string[]) {\n  return possibleEquations.filter(isEquation).length;\n}\n","import {SelectValue} from 'sentry/types';\nimport {FieldValue, FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {getSortLabel, IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport {ColumnType, ISSUE_FIELDS} from './fields';\n\nexport function generateIssueWidgetFieldOptions(\n  issueFields: Record<string, ColumnType> = ISSUE_FIELDS\n) {\n  const fieldKeys = Object.keys(issueFields).sort();\n  const fieldOptions: Record<string, SelectValue<FieldValue>> = {};\n\n  fieldKeys.forEach(field => {\n    fieldOptions[`field:${field}`] = {\n      label: field,\n      value: {\n        kind: FieldValueKind.FIELD,\n        meta: {\n          name: field,\n          dataType: issueFields[field],\n        },\n      },\n    };\n  });\n\n  return fieldOptions;\n}\n\nconst ISSUE_WIDGET_SORT_OPTIONS = [\n  IssueSortOptions.DATE,\n  IssueSortOptions.NEW,\n  IssueSortOptions.FREQ,\n  IssueSortOptions.PRIORITY,\n  IssueSortOptions.USER,\n];\n\nexport function generateIssueWidgetOrderOptions(\n  includeRelativeChange: boolean\n): SelectValue<string>[] {\n  const sortOptions = [...ISSUE_WIDGET_SORT_OPTIONS];\n  if (includeRelativeChange) {\n    sortOptions.push(IssueSortOptions.TREND);\n  }\n  return sortOptions.map(sortOption => ({\n    label: getSortLabel(sortOption),\n    value: sortOption,\n  }));\n}\n","import {Component} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {DataZoomComponentOption, LegendComponentOption} from 'echarts';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {AreaChart} from 'sentry/components/charts/areaChart';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart} from 'sentry/components/charts/lineChart';\nimport SimpleTableChart from 'sentry/components/charts/simpleTableChart';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {getSeriesSelection, processTableResults} from 'sentry/components/charts/utils';\nimport {WorldMapChart} from 'sentry/components/charts/worldMapChart';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Placeholder, {PlaceholderProps} from 'sentry/components/placeholder';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconWarning} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {EChartDataZoomHandler, EChartEventHandler} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {getFieldFormatter} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  getAggregateArg,\n  getEquation,\n  getMeasurementSlug,\n  isEquation,\n  maybeEquationAlias,\n  stripDerivedMetricsPrefix,\n  stripEquationPrefix,\n} from 'sentry/utils/discover/fields';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Theme} from 'sentry/utils/theme';\nimport {eventViewFromWidget} from 'sentry/views/dashboardsV2/utils';\n\nimport {getDatasetConfig} from '../datasetConfig/base';\nimport {DisplayType, Widget, WidgetType} from '../types';\n\nimport WidgetQueries from './widgetQueries';\n\nconst OTHER = 'Other';\nexport const SLIDER_HEIGHT = 60;\n\nexport type AugmentedEChartDataZoomHandler = (\n  params: Parameters<EChartDataZoomHandler>[0] & {\n    seriesEnd: string | number;\n    seriesStart: string | number;\n  },\n  instance: Parameters<EChartDataZoomHandler>[1]\n) => void;\n\ntype TableResultProps = Pick<\n  WidgetQueries['state'],\n  'errorMessage' | 'loading' | 'tableResults'\n>;\n\ntype WidgetCardChartProps = Pick<\n  WidgetQueries['state'],\n  'timeseriesResults' | 'tableResults' | 'errorMessage' | 'loading'\n> & {\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  theme: Theme;\n  widget: Widget;\n  chartZoomOptions?: DataZoomComponentOption;\n  expandNumbers?: boolean;\n  isMobile?: boolean;\n  legendOptions?: LegendComponentOption;\n  noPadding?: boolean;\n  onLegendSelectChanged?: EChartEventHandler<{\n    name: string;\n    selected: Record<string, boolean>;\n    type: 'legendselectchanged';\n  }>;\n  onZoom?: AugmentedEChartDataZoomHandler;\n  showSlider?: boolean;\n  windowWidth?: number;\n};\n\ntype State = {\n  // For tracking height of the container wrapping BigNumber widgets\n  // so we can dynamically scale font-size\n  containerHeight: number;\n};\n\nclass WidgetCardChart extends Component<WidgetCardChartProps, State> {\n  state = {containerHeight: 0};\n\n  shouldComponentUpdate(nextProps: WidgetCardChartProps, nextState: State): boolean {\n    if (\n      this.props.widget.displayType === DisplayType.BIG_NUMBER &&\n      nextProps.widget.displayType === DisplayType.BIG_NUMBER &&\n      (this.props.windowWidth !== nextProps.windowWidth ||\n        !isEqual(this.props.widget?.layout, nextProps.widget?.layout))\n    ) {\n      return true;\n    }\n\n    // Widget title changes should not update the WidgetCardChart component tree\n    const currentProps = {\n      ...omit(this.props, ['windowWidth']),\n      widget: {\n        ...this.props.widget,\n        title: '',\n      },\n    };\n\n    nextProps = {\n      ...omit(nextProps, ['windowWidth']),\n      widget: {\n        ...nextProps.widget,\n        title: '',\n      },\n    };\n\n    return !isEqual(currentProps, nextProps) || !isEqual(this.state, nextState);\n  }\n\n  tableResultComponent({\n    loading,\n    errorMessage,\n    tableResults,\n  }: TableResultProps): React.ReactNode {\n    const {location, widget, organization, selection} = this.props;\n    if (errorMessage) {\n      return (\n        <StyledErrorPanel>\n          <IconWarning color=\"gray500\" size=\"lg\" />\n        </StyledErrorPanel>\n      );\n    }\n\n    if (typeof tableResults === 'undefined') {\n      // Align height to other charts.\n      return <LoadingPlaceholder />;\n    }\n\n    const datasetConfig = getDatasetConfig(widget.widgetType);\n\n    return tableResults.map((result, i) => {\n      const fields = widget.queries[i]?.fields?.map(stripDerivedMetricsPrefix) ?? [];\n      const fieldAliases = widget.queries[i]?.fieldAliases ?? [];\n      const eventView = eventViewFromWidget(\n        widget.title,\n        widget.queries[0],\n        selection,\n        widget.displayType\n      );\n\n      return (\n        <StyledSimpleTableChart\n          key={`table:${result.title}`}\n          eventView={eventView}\n          fieldAliases={fieldAliases}\n          location={location}\n          fields={fields}\n          title={tableResults.length > 1 ? result.title : ''}\n          loading={loading}\n          loader={<LoadingPlaceholder />}\n          metadata={result.meta}\n          data={result.data}\n          organization={organization}\n          stickyHeaders\n          getCustomFieldRenderer={datasetConfig.getCustomFieldRenderer}\n        />\n      );\n    });\n  }\n\n  bigNumberComponent({\n    loading,\n    errorMessage,\n    tableResults,\n  }: TableResultProps): React.ReactNode {\n    if (errorMessage) {\n      return (\n        <StyledErrorPanel>\n          <IconWarning color=\"gray500\" size=\"lg\" />\n        </StyledErrorPanel>\n      );\n    }\n\n    if (typeof tableResults === 'undefined' || loading) {\n      return <BigNumber>{'\\u2014'}</BigNumber>;\n    }\n\n    const {containerHeight} = this.state;\n    const {organization, widget, isMobile, expandNumbers} = this.props;\n    const isAlias =\n      !organization.features.includes('discover-frontend-use-events-endpoint') &&\n      widget.widgetType !== WidgetType.RELEASE;\n\n    return tableResults.map(result => {\n      const tableMeta = {...result.meta};\n      const fields = Object.keys(tableMeta);\n\n      const field = fields[0];\n\n      // Change tableMeta for the field from integer to string since we will be rendering with toLocaleString\n      const shouldExpandInteger = !!expandNumbers && tableMeta[field] === 'integer';\n      if (shouldExpandInteger) {\n        tableMeta[field] = 'string';\n      }\n\n      if (!field || !result.data.length) {\n        return <BigNumber key={`big_number:${result.title}`}>{'\\u2014'}</BigNumber>;\n      }\n\n      const dataRow = result.data[0];\n      const fieldRenderer = getFieldFormatter(field, tableMeta, isAlias);\n\n      const rendered = fieldRenderer(\n        shouldExpandInteger ? {[field]: dataRow[field].toLocaleString()} : dataRow\n      );\n\n      const isModalWidget = !!!(widget.id || widget.tempId);\n      if (\n        !!!organization.features.includes('dashboard-grid-layout') ||\n        isModalWidget ||\n        isMobile\n      ) {\n        return <BigNumber key={`big_number:${result.title}`}>{rendered}</BigNumber>;\n      }\n\n      // The font size is the container height, minus the top and bottom padding\n      const fontSize = !!!expandNumbers\n        ? containerHeight - parseInt(space(1), 10) - parseInt(space(3), 10)\n        : `max(min(8vw, 90px), ${space(4)})`;\n\n      return (\n        <BigNumber\n          key={`big_number:${result.title}`}\n          style={{\n            fontSize,\n            ...(!!expandNumbers\n              ? {padding: `${space(1)} ${space(3)} 0 ${space(3)}`}\n              : {}),\n          }}\n        >\n          <Tooltip title={rendered} showOnlyOnOverflow>\n            {rendered}\n          </Tooltip>\n        </BigNumber>\n      );\n    });\n  }\n\n  chartComponent(chartProps): React.ReactNode {\n    const {organization, widget} = this.props;\n    const stacked =\n      organization.features.includes('new-widget-builder-experience-design') &&\n      widget.queries[0].columns.length > 0;\n\n    switch (widget.displayType) {\n      case 'bar':\n        return <BarChart {...chartProps} stacked={stacked} />;\n      case 'area':\n      case 'top_n':\n        return <AreaChart stacked {...chartProps} />;\n      case 'world_map':\n        return <WorldMapChart {...chartProps} />;\n      case 'line':\n      default:\n        return <LineChart {...chartProps} />;\n    }\n  }\n\n  render() {\n    const {\n      theme,\n      tableResults,\n      timeseriesResults,\n      errorMessage,\n      loading,\n      widget,\n      organization,\n      onZoom,\n      legendOptions,\n      expandNumbers,\n      showSlider,\n      noPadding,\n      chartZoomOptions,\n    } = this.props;\n\n    if (widget.displayType === 'table') {\n      return getDynamicText({\n        value: (\n          <TransitionChart loading={loading} reloading={loading}>\n            <LoadingScreen loading={loading} />\n            {this.tableResultComponent({tableResults, loading, errorMessage})}\n          </TransitionChart>\n        ),\n        fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n      });\n    }\n\n    if (widget.displayType === 'big_number') {\n      return (\n        <TransitionChart loading={loading} reloading={loading}>\n          <LoadingScreen loading={loading} />\n          <BigNumberResizeWrapper\n            ref={el => {\n              if (el !== null && !!!expandNumbers) {\n                const {height} = el.getBoundingClientRect();\n                if (height !== this.state.containerHeight) {\n                  this.setState({containerHeight: height});\n                }\n              }\n            }}\n          >\n            {this.bigNumberComponent({tableResults, loading, errorMessage})}\n          </BigNumberResizeWrapper>\n        </TransitionChart>\n      );\n    }\n\n    if (errorMessage) {\n      return (\n        <StyledErrorPanel>\n          <IconWarning color=\"gray500\" size=\"lg\" />\n        </StyledErrorPanel>\n      );\n    }\n\n    const {location, router, selection, onLegendSelectChanged} = this.props;\n    const {start, end, period, utc} = selection.datetime;\n\n    // Only allow height resizing for widgets that are on a dashboard\n    const autoHeightResize = Boolean(\n      organization.features.includes('dashboard-grid-layout') &&\n        (widget.id || widget.tempId)\n    );\n\n    if (widget.displayType === 'world_map') {\n      const {data, title} = processTableResults(tableResults);\n      const series = [\n        {\n          seriesName: title,\n          data,\n        },\n      ];\n\n      return (\n        <TransitionChart loading={loading} reloading={loading}>\n          <LoadingScreen loading={loading} />\n          <ChartWrapper autoHeightResize={autoHeightResize}>\n            {getDynamicText({\n              value: this.chartComponent({\n                series,\n                autoHeightResize,\n              }),\n              fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n            })}\n          </ChartWrapper>\n        </TransitionChart>\n      );\n    }\n\n    const legend = {\n      left: 0,\n      top: 0,\n      selected: getSeriesSelection(location),\n      formatter: (seriesName: string) => {\n        const arg = getAggregateArg(seriesName);\n        if (arg !== null) {\n          const slug = getMeasurementSlug(arg);\n          if (slug !== null) {\n            seriesName = slug.toUpperCase();\n          }\n        }\n        if (maybeEquationAlias(seriesName)) {\n          seriesName = stripEquationPrefix(seriesName);\n        }\n        return seriesName;\n      },\n      ...legendOptions,\n    };\n\n    const axisField = widget.queries[0]?.aggregates?.[0] ?? 'count()';\n    const axisLabel = isEquation(axisField) ? getEquation(axisField) : axisField;\n    const chartOptions = {\n      autoHeightResize,\n      grid: {\n        left: 0,\n        right: 4,\n        top: '40px',\n        bottom: showSlider ? SLIDER_HEIGHT : 0,\n      },\n      seriesOptions: {\n        showSymbol: false,\n      },\n      tooltip: {\n        trigger: 'axis',\n        valueFormatter: tooltipFormatter,\n      },\n      yAxis: {\n        axisLabel: {\n          color: theme.chartLabel,\n          formatter: (value: number) => axisLabelFormatter(value, axisLabel),\n        },\n      },\n    };\n\n    return (\n      <ChartZoom\n        router={router}\n        period={period}\n        start={start}\n        end={end}\n        utc={utc}\n        showSlider={showSlider}\n        chartZoomOptions={chartZoomOptions}\n      >\n        {zoomRenderProps => {\n          if (errorMessage) {\n            return (\n              <StyledErrorPanel>\n                <IconWarning color=\"gray500\" size=\"lg\" />\n              </StyledErrorPanel>\n            );\n          }\n\n          const otherRegex = new RegExp(`(?:.* : ${OTHER}$)|^${OTHER}$`);\n          const shouldColorOther = timeseriesResults?.some(\n            ({seriesName}) => seriesName && seriesName.match(otherRegex)\n          );\n          const colors = timeseriesResults\n            ? theme.charts.getColorPalette(\n                timeseriesResults.length - (shouldColorOther ? 3 : 2)\n              )\n            : [];\n          // TODO(wmak): Need to change this when updating dashboards to support variable topEvents\n          if (shouldColorOther) {\n            colors[colors.length] = theme.chartOther;\n          }\n\n          // Create a list of series based on the order of the fields,\n          const series = timeseriesResults\n            ? timeseriesResults.map((values, i: number) => {\n                let seriesName = '';\n                if (values.seriesName !== undefined) {\n                  seriesName = isEquation(values.seriesName)\n                    ? getEquation(values.seriesName)\n                    : values.seriesName;\n                }\n                return {\n                  ...values,\n                  seriesName,\n                  color: colors[i],\n                };\n              })\n            : [];\n\n          const seriesStart = series[0]?.data[0]?.name;\n          const seriesEnd = series[0]?.data[series[0].data.length - 1]?.name;\n          return (\n            <TransitionChart loading={loading} reloading={loading}>\n              <LoadingScreen loading={loading} />\n              <ChartWrapper autoHeightResize={autoHeightResize} noPadding={noPadding}>\n                {getDynamicText({\n                  value: this.chartComponent({\n                    ...zoomRenderProps,\n                    ...chartOptions,\n                    // Override default datazoom behaviour for updating Global Selection Header\n                    ...(onZoom\n                      ? {\n                          onDataZoom: (evt, chartProps) =>\n                            // Need to pass seriesStart and seriesEnd to onZoom since slider zooms\n                            // callback with percentage instead of datetime values. Passing seriesStart\n                            // and seriesEnd allows calculating datetime values with percentage.\n                            onZoom({...evt, seriesStart, seriesEnd}, chartProps),\n                        }\n                      : {}),\n                    legend,\n                    series,\n                    onLegendSelectChanged,\n                  }),\n                  fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n                })}\n              </ChartWrapper>\n            </TransitionChart>\n          );\n        }}\n      </ChartZoom>\n    );\n  }\n}\n\nexport default withTheme(WidgetCardChart);\n\nconst StyledTransparentLoadingMask = styled(props => (\n  <TransparentLoadingMask {...props} maskBackgroundColor=\"transparent\" />\n))`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst LoadingScreen = ({loading}: {loading: boolean}) => {\n  if (!loading) {\n    return null;\n  }\n  return (\n    <StyledTransparentLoadingMask visible={loading}>\n      <LoadingIndicator mini />\n    </StyledTransparentLoadingMask>\n  );\n};\n\nconst LoadingPlaceholder = styled(({className}: PlaceholderProps) => (\n  <Placeholder height=\"200px\" className={className} />\n))`\n  background-color: ${p => p.theme.surface200};\n`;\n\nconst BigNumberResizeWrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  overflow: hidden;\n`;\n\nconst BigNumber = styled('div')`\n  line-height: 1;\n  display: inline-flex;\n  flex: 1;\n  width: 100%;\n  min-height: 0;\n  font-size: 32px;\n  color: ${p => p.theme.headingColor};\n  padding: ${space(1)} ${space(3)} ${space(3)} ${space(3)};\n\n  * {\n    text-align: left !important;\n  }\n`;\n\nconst ChartWrapper = styled('div')<{autoHeightResize: boolean; noPadding?: boolean}>`\n  ${p => p.autoHeightResize && 'height: 100%;'}\n  padding: ${p => (!!p.noPadding ? `0` : `0 ${space(3)} ${space(3)}`)};\n`;\n\nconst StyledSimpleTableChart = styled(SimpleTableChart)`\n  margin-top: ${space(1.5)};\n  border-bottom-left-radius: ${p => p.theme.borderRadius};\n  border-bottom-right-radius: ${p => p.theme.borderRadius};\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: none;\n`;\n\nconst StyledErrorPanel = styled(ErrorPanel)`\n  padding: ${space(2)};\n`;\n","import {ReactNode, useState} from 'react';\n\nimport {createDefinedContext} from 'sentry/utils/performance/contexts/utils';\n\ninterface DashboardsMEPContextInterface {\n  setIsMetricsData: (value?: boolean) => void;\n  isMetricsData?: boolean;\n}\n\nconst [_DashboardsMEPProvider, useDashboardsMEPContext, DashboardsMEPContext] =\n  createDefinedContext<DashboardsMEPContextInterface>({\n    name: 'DashboardsMEPContext',\n  });\n\nconst DashboardsMEPConsumer = DashboardsMEPContext.Consumer;\n\nfunction DashboardsMEPProvider({children}: {children: ReactNode}) {\n  const [isMetricsData, setIsMetricsData] = useState<boolean | undefined>(undefined); // undefined means not initialized\n\n  return (\n    <_DashboardsMEPProvider\n      value={{\n        isMetricsData,\n        setIsMetricsData,\n      }}\n    >\n      {children}\n    </_DashboardsMEPProvider>\n  );\n}\n\nexport {\n  DashboardsMEPContext,\n  DashboardsMEPProvider,\n  DashboardsMEPConsumer,\n  useDashboardsMEPContext,\n};\n","import {Component} from 'react';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport {isSelectionEqual} from 'sentry/components/organizations/pageFilters/utils';\nimport {t} from 'sentry/locale';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport {OrganizationSummary, PageFilters} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport {getDatasetConfig} from '../datasetConfig/base';\nimport {DEFAULT_TABLE_LIMIT, Widget, WidgetQuery, WidgetType} from '../types';\n\nconst DEFAULT_SORT = IssueSortOptions.DATE;\nconst DEFAULT_EXPAND = ['owners'];\n\ntype EndpointParams = Partial<PageFilters['datetime']> & {\n  environment: string[];\n  project: number[];\n  collapse?: string[];\n  cursor?: string;\n  expand?: string[];\n  groupStatsPeriod?: string | null;\n  limit?: number;\n  page?: number | string;\n  query?: string;\n  sort?: string;\n  statsPeriod?: string | null;\n};\n\ntype Props = {\n  api: Client;\n  children: (props: {\n    errorMessage: undefined | string;\n    loading: boolean;\n    transformedResults: TableDataRow[];\n    pageLinks?: null | string;\n    totalCount?: string;\n  }) => React.ReactNode;\n  organization: OrganizationSummary;\n  selection: PageFilters;\n  widget: Widget;\n  cursor?: string;\n  limit?: number;\n  onDataFetched?: (results: {\n    issuesResults?: TableDataRow[];\n    pageLinks?: string;\n    totalIssuesCount?: string;\n  }) => void;\n};\n\ntype State = {\n  errorMessage: undefined | string;\n  loading: boolean;\n  memberListStoreLoaded: boolean;\n  pageLinks: null | string;\n  tableResults: TableDataRow[];\n  totalCount: null | string;\n};\n\nclass IssueWidgetQueries extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    errorMessage: undefined,\n    tableResults: [],\n    memberListStoreLoaded: MemberListStore.isLoaded(),\n    totalCount: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {selection, widget, cursor} = this.props;\n    // We do not fetch data whenever the query name changes.\n    const [prevWidgetQueries] = prevProps.widget.queries.reduce(\n      ([queries, names]: [Omit<WidgetQuery, 'name'>[], string[]], {name, ...rest}) => {\n        queries.push(rest);\n        names.push(name);\n        return [queries, names];\n      },\n      [[], []]\n    );\n\n    const [widgetQueries] = widget.queries.reduce(\n      ([queries, names]: [Omit<WidgetQuery, 'name'>[], string[]], {name, ...rest}) => {\n        queries.push(rest);\n        names.push(name);\n        return [queries, names];\n      },\n      [[], []]\n    );\n\n    if (\n      !isEqual(widget.displayType, prevProps.widget.displayType) ||\n      !isEqual(widget.interval, prevProps.widget.interval) ||\n      !isEqual(widgetQueries, prevWidgetQueries) ||\n      !isSelectionEqual(selection, prevProps.selection) ||\n      cursor !== prevProps.cursor\n    ) {\n      this.fetchData();\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    this.unlisteners.forEach(unlistener => unlistener?.());\n  }\n\n  unlisteners = [\n    MemberListStore.listen(() => {\n      this.setState({\n        memberListStoreLoaded: MemberListStore.isLoaded(),\n      });\n    }, undefined),\n  ];\n\n  config = getDatasetConfig(WidgetType.ISSUE);\n\n  async fetchIssuesData() {\n    const {selection, api, organization, widget, limit, cursor, onDataFetched} =\n      this.props;\n    this.setState({tableResults: []});\n    // Issue Widgets only support single queries\n    const query = widget.queries[0];\n    const groupListUrl = `/organizations/${organization.slug}/issues/`;\n    const params: EndpointParams = {\n      project: selection.projects,\n      environment: selection.environments,\n      query: query.conditions,\n      sort: query.orderby || DEFAULT_SORT,\n      expand: DEFAULT_EXPAND,\n      limit: limit ?? DEFAULT_TABLE_LIMIT,\n      cursor,\n    };\n\n    if (selection.datetime.period) {\n      params.statsPeriod = selection.datetime.period;\n    }\n    if (selection.datetime.end) {\n      params.end = getUtcDateString(selection.datetime.end);\n    }\n    if (selection.datetime.start) {\n      params.start = getUtcDateString(selection.datetime.start);\n    }\n    if (selection.datetime.utc) {\n      params.utc = selection.datetime.utc;\n    }\n\n    try {\n      const [data, _, resp] = await api.requestPromise(groupListUrl, {\n        includeAllArgs: true,\n        method: 'GET',\n        data: {\n          ...params,\n        },\n      });\n      const tableResults = this.config.transformTable(data, widget.queries[0], {\n        pageFilters: selection,\n      });\n      const totalCount = resp?.getResponseHeader('X-Hits') ?? null;\n      const pageLinks = resp?.getResponseHeader('Link') ?? null;\n      this.setState({\n        loading: false,\n        errorMessage: undefined,\n        tableResults: tableResults.data,\n        totalCount,\n        pageLinks,\n      });\n      onDataFetched?.({\n        issuesResults: tableResults.data,\n        totalIssuesCount: totalCount ?? undefined,\n        pageLinks: pageLinks ?? undefined,\n      });\n    } catch (response) {\n      const errorResponse = response?.responseJSON?.detail ?? null;\n      this.setState({\n        loading: false,\n        errorMessage: errorResponse ?? t('Unable to load Widget'),\n        tableResults: [],\n      });\n    }\n  }\n\n  fetchData() {\n    this.setState({loading: true, errorMessage: undefined});\n    this.fetchIssuesData();\n  }\n\n  render() {\n    const {children} = this.props;\n    const {\n      tableResults,\n      loading,\n      errorMessage,\n      memberListStoreLoaded,\n      pageLinks,\n      totalCount,\n    } = this.state;\n    return getDynamicText({\n      value: children({\n        loading: loading || !memberListStoreLoaded,\n        transformedResults: tableResults,\n        errorMessage,\n        pageLinks,\n        totalCount: totalCount ?? undefined,\n      }),\n      fixed: <div />,\n    });\n  }\n}\n\nexport default IssueWidgetQueries;\n","import {Client, ResponseMeta} from 'sentry/api';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {DateString, MetricsApiResponse, Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport type DoMetricsRequestOptions = {\n  field: string[];\n  orgSlug: Organization['slug'];\n  cursor?: string;\n  end?: DateString;\n  environment?: Readonly<string[]>;\n  groupBy?: string[];\n  includeAllArgs?: boolean;\n  includeSeries?: number;\n  includeTotals?: number;\n  interval?: string;\n  limit?: number;\n  orderBy?: string;\n  project?: Readonly<number[]>;\n  query?: string;\n  start?: DateString;\n  statsPeriod?: string | null;\n  statsPeriodEnd?: string;\n  statsPeriodStart?: string;\n};\n\nexport const doMetricsRequest = (\n  api: Client,\n  {\n    field,\n    orgSlug,\n    cursor,\n    environment,\n    groupBy,\n    includeSeries,\n    includeTotals,\n    interval,\n    limit,\n    orderBy,\n    project,\n    query,\n    includeAllArgs = false,\n    statsPeriodStart,\n    statsPeriodEnd,\n    ...dateTime\n  }: DoMetricsRequestOptions\n): Promise<MetricsApiResponse | [MetricsApiResponse, string, ResponseMeta]> => {\n  const {start, end, statsPeriod} = normalizeDateTimeParams(dateTime, {\n    allowEmptyPeriod: true,\n  });\n\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      field: field.filter(f => !!f),\n      cursor,\n      end,\n      environment,\n      groupBy: groupBy?.filter(g => !!g),\n      includeSeries,\n      includeTotals,\n      interval: interval || getInterval({start, end, period: statsPeriod}),\n      query: query || undefined,\n      per_page: limit,\n      project,\n      orderBy,\n      start,\n      statsPeriod,\n      statsPeriodStart,\n      statsPeriodEnd,\n    }).filter(([, value]) => defined(value) && value !== '')\n  );\n\n  const pathname = `/organizations/${orgSlug}/metrics/data/`;\n\n  return api.requestPromise(pathname, {includeAllArgs, query: urlQuery});\n};\n","import {Client} from 'sentry/api';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {DateString, Organization, SessionApiResponse} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport type DoSessionsRequestOptions = {\n  field: string[];\n  orgSlug: Organization['slug'];\n  cursor?: string;\n  end?: DateString;\n  environment?: Readonly<string[]>;\n  groupBy?: string[];\n  includeAllArgs?: boolean;\n  interval?: string;\n  limit?: number;\n  orderBy?: string;\n  project?: Readonly<number[]>;\n  query?: string;\n  start?: DateString;\n  statsPeriod?: string | null;\n  statsPeriodEnd?: string;\n  statsPeriodStart?: string;\n};\n\nexport const doSessionsRequest = (\n  api: Client,\n  {\n    field,\n    orgSlug,\n    cursor,\n    environment,\n    groupBy,\n    interval,\n    project,\n    orderBy,\n    query,\n    includeAllArgs = false,\n    statsPeriodStart,\n    statsPeriodEnd,\n    limit,\n    ...dateTime\n  }: DoSessionsRequestOptions\n): Promise<SessionApiResponse> => {\n  const {start, end, statsPeriod} = normalizeDateTimeParams(dateTime, {\n    allowEmptyPeriod: true,\n  });\n\n  const urlQuery = Object.fromEntries(\n    Object.entries({\n      field: field.filter(f => !!f),\n      cursor,\n      end,\n      environment,\n      groupBy: groupBy?.filter(g => !!g),\n      interval: interval || getInterval({start, end, period: statsPeriod}),\n      orderBy,\n      per_page: limit,\n      query: query || undefined,\n      project,\n      start,\n      statsPeriod,\n      statsPeriodStart,\n      statsPeriodEnd,\n    }).filter(([, value]) => defined(value) && value !== '')\n  );\n\n  return api.requestPromise(`/organizations/${orgSlug}/sessions/`, {\n    includeAllArgs,\n    query: urlQuery,\n  });\n};\n","import {Component} from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport trimStart from 'lodash/trimStart';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {doMetricsRequest} from 'sentry/actionCreators/metrics';\nimport {doSessionsRequest} from 'sentry/actionCreators/sessions';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {isSelectionEqual} from 'sentry/components/organizations/pageFilters/utils';\nimport {t} from 'sentry/locale';\nimport {\n  MetricsApiResponse,\n  OrganizationSummary,\n  PageFilters,\n  Release,\n  SessionApiResponse,\n} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport {stripDerivedMetricsPrefix} from 'sentry/utils/discover/fields';\nimport {TOP_N} from 'sentry/utils/discover/types';\n\nimport {getDatasetConfig} from '../datasetConfig/base';\nimport {DEFAULT_TABLE_LIMIT, DisplayType, Widget, WidgetType} from '../types';\nimport {getWidgetInterval} from '../utils';\nimport {\n  DERIVED_STATUS_METRICS_PATTERN,\n  DerivedStatusFields,\n  DISABLED_SORT,\n  FIELD_TO_METRICS_EXPRESSION,\n  METRICS_EXPRESSION_TO_FIELD,\n} from '../widgetBuilder/releaseWidget/fields';\n\ntype Props = {\n  api: Client;\n  children: (\n    props: Pick<\n      State,\n      'loading' | 'timeseriesResults' | 'tableResults' | 'errorMessage' | 'pageLinks'\n    >\n  ) => React.ReactNode;\n  organization: OrganizationSummary;\n  selection: PageFilters;\n  widget: Widget;\n  cursor?: string;\n  includeAllArgs?: boolean;\n  limit?: number;\n  onDataFetched?: (results: {\n    tableResults?: TableDataWithTitle[];\n    timeseriesResults?: Series[];\n  }) => void;\n};\n\ntype State = {\n  loading: boolean;\n  errorMessage?: string;\n  pageLinks?: string;\n  queryFetchID?: symbol;\n  rawResults?: SessionApiResponse[] | MetricsApiResponse[];\n  releases?: Release[];\n  tableResults?: TableDataWithTitle[];\n  timeseriesResults?: Series[];\n};\n\nfunction fieldsToDerivedMetrics(field: string): string {\n  return FIELD_TO_METRICS_EXPRESSION[field] ?? field;\n}\n\nexport function derivedMetricsToField(field: string): string {\n  return METRICS_EXPRESSION_TO_FIELD[field] ?? field;\n}\n\n/**\n * Given a list of requested fields, this function returns\n * 'aggregates' which is a list of aggregate functions that\n * can be passed to either Metrics or Sessions endpoints,\n * 'derivedStatusFields' which need to be requested from the\n * Metrics endpoint and 'injectFields' which are fields not\n * requested but required to calculate the value of a derived\n * status field so will need to be stripped away in post processing.\n */\nexport function resolveDerivedStatusFields(\n  fields: string[],\n  orderby: string,\n  useSessionAPI: boolean\n): {\n  aggregates: string[];\n  derivedStatusFields: string[];\n  injectedFields: string[];\n} {\n  const aggregates = fields.map(stripDerivedMetricsPrefix);\n  const derivedStatusFields = aggregates.filter(agg =>\n    Object.values(DerivedStatusFields).includes(agg as DerivedStatusFields)\n  );\n\n  const injectedFields: string[] = [];\n\n  const rawOrderby = trimStart(orderby, '-');\n  const unsupportedOrderby =\n    DISABLED_SORT.includes(rawOrderby) || useSessionAPI || rawOrderby === 'release';\n\n  if (rawOrderby && !!!unsupportedOrderby && !!!fields.includes(rawOrderby)) {\n    if (!!!injectedFields.includes(rawOrderby)) {\n      injectedFields.push(rawOrderby);\n    }\n  }\n\n  if (!!!useSessionAPI) {\n    return {aggregates, derivedStatusFields, injectedFields};\n  }\n\n  derivedStatusFields.forEach(field => {\n    const result = field.match(DERIVED_STATUS_METRICS_PATTERN);\n    if (result) {\n      if (result[2] === 'user' && !!!aggregates.includes('count_unique(user)')) {\n        injectedFields.push('count_unique(user)');\n        aggregates.push('count_unique(user)');\n      }\n      if (result[2] === 'session' && !!!aggregates.includes('sum(session)')) {\n        injectedFields.push('sum(session)');\n        aggregates.push('sum(session)');\n      }\n    }\n  });\n\n  return {aggregates, derivedStatusFields, injectedFields};\n}\n\nclass ReleaseWidgetQueries extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    queryFetchID: undefined,\n    errorMessage: undefined,\n    timeseriesResults: undefined,\n    rawResults: undefined,\n    tableResults: undefined,\n    releases: undefined,\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    if (this.requiresCustomReleaseSorting()) {\n      this.fetchReleasesAndData();\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {loading, rawResults} = this.state;\n    const {selection, widget, organization, limit, cursor} = this.props;\n    const ignroredWidgetProps = [\n      'queries',\n      'title',\n      'id',\n      'layout',\n      'tempId',\n      'widgetType',\n    ];\n    const ignoredQueryProps = ['name', 'fields', 'aggregates', 'columns'];\n    const widgetQueryNames = widget.queries.map(q => q.name);\n    const prevWidgetQueryNames = prevProps.widget.queries.map(q => q.name);\n\n    if (\n      this.requiresCustomReleaseSorting() &&\n      (!isEqual(\n        widget.queries.map(q => q.orderby),\n        prevProps.widget.queries.map(q => q.orderby)\n      ) ||\n        !isSelectionEqual(selection, prevProps.selection) ||\n        !isEqual(organization, prevProps.organization))\n    ) {\n      this.fetchReleasesAndData();\n      return;\n    }\n\n    if (\n      limit !== prevProps.limit ||\n      organization.slug !== prevProps.organization.slug ||\n      !isSelectionEqual(selection, prevProps.selection) ||\n      // If the widget changed (ignore unimportant fields, + queries as they are handled lower)\n      !isEqual(\n        omit(widget, ignroredWidgetProps),\n        omit(prevProps.widget, ignroredWidgetProps)\n      ) ||\n      // If the queries changed (ignore unimportant name, + fields as they are handled lower)\n      !isEqual(\n        widget.queries.map(q => omit(q, ignoredQueryProps)),\n        prevProps.widget.queries.map(q => omit(q, ignoredQueryProps))\n      ) ||\n      // If the fields changed (ignore falsy/empty fields -> they can happen after clicking on Add Overlay)\n      !isEqual(\n        widget.queries.flatMap(q => q.fields?.filter(field => !!field)),\n        prevProps.widget.queries.flatMap(q => q.fields?.filter(field => !!field))\n      ) ||\n      !isEqual(\n        widget.queries.flatMap(q => q.aggregates.filter(aggregate => !!aggregate)),\n        prevProps.widget.queries.flatMap(q =>\n          q.aggregates.filter(aggregate => !!aggregate)\n        )\n      ) ||\n      !isEqual(\n        widget.queries.flatMap(q => q.columns.filter(column => !!column)),\n        prevProps.widget.queries.flatMap(q => q.columns.filter(column => !!column))\n      ) ||\n      cursor !== prevProps.cursor\n    ) {\n      this.fetchData();\n      return;\n    }\n    if (\n      !loading &&\n      !isEqual(widgetQueryNames, prevWidgetQueryNames) &&\n      rawResults?.length === widget.queries.length\n    ) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(prevState => {\n        return {\n          ...prevState,\n          timeseriesResults: prevState.rawResults?.flatMap((rawResult, index) =>\n            this.config.transformSeries!(rawResult, widget.queries[index])\n          ),\n        };\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private _isMounted: boolean = false;\n  config = getDatasetConfig(WidgetType.RELEASE);\n\n  get limit() {\n    const {limit} = this.props;\n\n    switch (this.props.widget.displayType) {\n      case DisplayType.TOP_N:\n        return TOP_N;\n      case DisplayType.TABLE:\n        return limit ?? DEFAULT_TABLE_LIMIT;\n      case DisplayType.BIG_NUMBER:\n        return 1;\n      default:\n        return limit ?? 20; // TODO(dam): Can be changed to undefined once [INGEST-1079] is resolved\n    }\n  }\n\n  requiresCustomReleaseSorting() {\n    const {widget} = this.props;\n    const useMetricsAPI = !!!widget.queries[0].columns.includes('session.status');\n    const rawOrderby = trimStart(widget.queries[0].orderby, '-');\n    return useMetricsAPI && rawOrderby === 'release';\n  }\n\n  async fetchReleasesAndData() {\n    const {selection, api, organization} = this.props;\n    const {environments, projects} = selection;\n\n    try {\n      const releases = await api.requestPromise(\n        `/organizations/${organization.slug}/releases/`,\n        {\n          method: 'GET',\n          data: {\n            sort: 'date',\n            project: projects,\n            per_page: 50,\n            environments,\n          },\n        }\n      );\n      if (!this._isMounted) {\n        return;\n      }\n      this.setState({releases});\n    } catch (error) {\n      addErrorMessage(\n        error.responseJSON ? error.responseJSON.error : t('Error sorting by releases')\n      );\n    }\n    this.fetchData();\n  }\n\n  fetchData() {\n    const {selection, api, organization, widget, includeAllArgs, cursor, onDataFetched} =\n      this.props;\n\n    if (widget.displayType === DisplayType.WORLD_MAP) {\n      this.setState({errorMessage: t('World Map is not supported by metrics.')});\n      return;\n    }\n\n    const queryFetchID = Symbol('queryFetchID');\n\n    this.setState({\n      loading: true,\n      errorMessage: undefined,\n      timeseriesResults: [],\n      rawResults: [],\n      tableResults: [],\n      queryFetchID,\n    });\n    const {environments, projects, datetime} = selection;\n    const {start, end, period} = datetime;\n\n    const promises: Promise<\n      MetricsApiResponse | [MetricsApiResponse, string, ResponseMeta] | SessionApiResponse\n    >[] = [];\n\n    // Only time we need to use sessions API is when session.status is requested\n    // as a group by.\n    const useSessionAPI = widget.queries[0].columns.includes('session.status');\n    const isDescending = widget.queries[0].orderby.startsWith('-');\n    const rawOrderby = trimStart(widget.queries[0].orderby, '-');\n    const unsupportedOrderby =\n      DISABLED_SORT.includes(rawOrderby) || useSessionAPI || rawOrderby === 'release';\n\n    // Temporary solution to support sorting on releases when querying the\n    // Metrics API:\n    //\n    // We first request the top 50 recent releases from postgres. Note that the\n    // release request is based on the project and environment selected in the\n    // page filters.\n    //\n    // We then construct a massive OR condition and append it to any specified\n    // filter condition. We also maintain an ordered array of release versions\n    // to order the results returned from the metrics endpoint.\n    //\n    // Also note that we request a limit of 100 on the metrics endpoint, this\n    // is because in a query, the limit should be applied after the results are\n    // sorted based on the release version. The larger number of rows we\n    // request, the more accurate our results are going to be.\n    //\n    // After the results are sorted, we truncate the data to the requested\n    // limit. This will result in a few edge cases:\n    //\n    //   1. low to high sort may not show releases at the beginning of the\n    //      selected period if there are more than 50 releases in the selected\n    //      period.\n    //\n    //   2. if a recent release is not returned due to the 100 row limit\n    //      imposed on the metrics query the user won't see it on the\n    //      table/chart/\n    //\n    const isCustomReleaseSorting = this.requiresCustomReleaseSorting();\n    const {releases} = this.state;\n    const interval = getWidgetInterval(\n      widget,\n      {start, end, period},\n      // requesting low fidelity for release sort because metrics api can't return 100 rows of high fidelity series data\n      isCustomReleaseSorting ? 'low' : undefined\n    );\n    let releaseCondition = '';\n    const releasesArray: string[] = [];\n    if (isCustomReleaseSorting) {\n      if (releases && releases.length === 1) {\n        releaseCondition += `release:${releases[0].version}`;\n        releasesArray.push(releases[0].version);\n      }\n      if (releases && releases.length > 1) {\n        releaseCondition += 'release:[' + releases[0].version;\n        releasesArray.push(releases[0].version);\n        for (let i = 1; i < releases.length; i++) {\n          releaseCondition += ',' + releases[i].version;\n          releasesArray.push(releases[i].version);\n        }\n        releaseCondition += ']';\n\n        if (!!!isDescending) {\n          releasesArray.reverse();\n        }\n      }\n    }\n\n    const {aggregates, injectedFields} = resolveDerivedStatusFields(\n      widget.queries[0].aggregates,\n      widget.queries[0].orderby,\n      useSessionAPI\n    );\n    const columns = widget.queries[0].columns;\n\n    const includeSeries = widget.displayType !== DisplayType.TABLE ? 1 : 0;\n    const includeTotals =\n      widget.displayType === DisplayType.TABLE ||\n      widget.displayType === DisplayType.BIG_NUMBER ||\n      columns.length > 0\n        ? 1\n        : 0;\n\n    widget.queries.forEach(query => {\n      let requestData;\n      let requester;\n      if (useSessionAPI) {\n        const sessionAggregates = aggregates.filter(\n          agg =>\n            !!!Object.values(DerivedStatusFields).includes(agg as DerivedStatusFields)\n        );\n        requestData = {\n          field: sessionAggregates,\n          orgSlug: organization.slug,\n          end,\n          environment: environments,\n          groupBy: columns,\n          limit: undefined,\n          orderBy: '', // Orderby not supported with session.status\n          interval,\n          project: projects,\n          query: query.conditions,\n          start,\n          statsPeriod: period,\n          includeAllArgs,\n          cursor,\n        };\n        requester = doSessionsRequest;\n      } else {\n        requestData = {\n          field: aggregates.map(fieldsToDerivedMetrics),\n          orgSlug: organization.slug,\n          end,\n          environment: environments,\n          groupBy: columns.map(fieldsToDerivedMetrics),\n          limit: columns.length === 0 ? 1 : isCustomReleaseSorting ? 100 : this.limit,\n          orderBy: unsupportedOrderby\n            ? ''\n            : isDescending\n            ? `-${fieldsToDerivedMetrics(rawOrderby)}`\n            : fieldsToDerivedMetrics(rawOrderby),\n          interval,\n          project: projects,\n          query:\n            query.conditions + (releaseCondition === '' ? '' : ` ${releaseCondition}`),\n          start,\n          statsPeriod: period,\n          includeAllArgs,\n          cursor,\n          includeSeries,\n          includeTotals,\n        };\n        requester = doMetricsRequest;\n\n        if (\n          rawOrderby &&\n          !!!unsupportedOrderby &&\n          !!!aggregates.includes(rawOrderby) &&\n          !!!columns.includes(rawOrderby)\n        ) {\n          requestData.field = [...requestData.field, fieldsToDerivedMetrics(rawOrderby)];\n          if (!!!injectedFields.includes(rawOrderby)) {\n            injectedFields.push(rawOrderby);\n          }\n        }\n      }\n\n      promises.push(requester(api, requestData));\n    });\n\n    let completed = 0;\n    promises.forEach(async (promise, requestIndex) => {\n      try {\n        const res = await promise;\n        let data: SessionApiResponse | MetricsApiResponse;\n        let response: ResponseMeta;\n        if (Array.isArray(res)) {\n          data = res[0];\n          response = res[2];\n        } else {\n          data = res;\n        }\n        if (!this._isMounted) {\n          return;\n        }\n        this.setState(prevState => {\n          if (prevState.queryFetchID !== queryFetchID) {\n            // invariant: a different request was initiated after this request\n            return prevState;\n          }\n\n          if (releasesArray.length) {\n            data.groups.sort(function (group1, group2) {\n              const release1 = group1.by.release;\n              const release2 = group2.by.release;\n              return releasesArray.indexOf(release1) - releasesArray.indexOf(release2);\n            });\n            data.groups = data.groups.slice(0, this.limit);\n          }\n\n          // Transform to fit the table format\n          let tableResults: TableDataWithTitle[] | undefined;\n          if (includeTotals) {\n            const tableData = this.config.transformTable(\n              data,\n              widget.queries[0]\n            ) as TableDataWithTitle; // Cast so we can add the title.\n            tableData.title = widget.queries[requestIndex]?.name ?? '';\n            tableResults = [...(prevState.tableResults ?? []), tableData];\n          } else {\n            tableResults = undefined;\n          }\n\n          // Transform to fit the chart format\n          const timeseriesResults = [...(prevState.timeseriesResults ?? [])];\n          if (includeSeries) {\n            const transformedResult = this.config.transformSeries!(\n              data,\n              widget.queries[requestIndex]\n            );\n\n            // When charting timeseriesData on echarts, color association to a timeseries result\n            // is order sensitive, ie series at index i on the timeseries array will use color at\n            // index i on the color array. This means that on multi series results, we need to make\n            // sure that the order of series in our results do not change between fetches to avoid\n            // coloring inconsistencies between renders.\n            transformedResult.forEach((result, resultIndex) => {\n              timeseriesResults[requestIndex * transformedResult.length + resultIndex] =\n                result;\n            });\n          }\n\n          onDataFetched?.({timeseriesResults, tableResults});\n\n          if ([DisplayType.TABLE, DisplayType.BIG_NUMBER].includes(widget.displayType)) {\n            return {\n              ...prevState,\n              errorMessage: undefined,\n              tableResults,\n              pageLinks: response?.getResponseHeader('link') ?? undefined,\n            };\n          }\n\n          const rawResultsClone = cloneDeep(prevState.rawResults ?? []);\n          rawResultsClone[requestIndex] = data;\n\n          return {\n            ...prevState,\n            errorMessage: undefined,\n            timeseriesResults,\n            rawResults: rawResultsClone,\n            pageLinks: response?.getResponseHeader('link') ?? undefined,\n          };\n        });\n      } catch (err) {\n        const errorMessage = err?.responseJSON?.detail || t('An unknown error occurred.');\n        if (!this._isMounted) {\n          return;\n        }\n        this.setState({errorMessage});\n      } finally {\n        completed++;\n        if (!this._isMounted) {\n          return;\n        }\n        this.setState(prevState => {\n          if (prevState.queryFetchID !== queryFetchID) {\n            // invariant: a different request was initiated after this request\n            return prevState;\n          }\n\n          return {\n            ...prevState,\n            loading: completed === promises.length ? false : true,\n          };\n        });\n      }\n    });\n  }\n\n  render() {\n    const {children} = this.props;\n    const {loading, timeseriesResults, tableResults, errorMessage, pageLinks} =\n      this.state;\n\n    return children({\n      loading,\n      timeseriesResults,\n      tableResults,\n      errorMessage,\n      pageLinks,\n    });\n  }\n}\n\nexport default ReleaseWidgetQueries;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport SimpleTableChart from 'sentry/components/charts/simpleTableChart';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {eventViewFromWidget} from 'sentry/views/dashboardsV2/utils';\n\nimport {getDatasetConfig} from '../datasetConfig/base';\nimport {Widget, WidgetType} from '../types';\nimport {ISSUE_FIELDS} from '../widgetBuilder/issueWidget/fields';\n\ntype Props = {\n  loading: boolean;\n  location: Location;\n  organization: Organization;\n  selection: PageFilters;\n  transformedResults: TableDataRow[];\n  widget: Widget;\n  errorMessage?: string;\n};\n\nexport function IssueWidgetCard({\n  organization,\n  selection,\n  widget,\n  errorMessage,\n  loading,\n  transformedResults,\n  location,\n}: Props) {\n  const datasetConfig = getDatasetConfig(WidgetType.ISSUE);\n\n  if (errorMessage) {\n    return (\n      <ErrorPanel>\n        <IconWarning color=\"gray500\" size=\"lg\" />\n      </ErrorPanel>\n    );\n  }\n\n  if (loading) {\n    // Align height to other charts.\n    return <LoadingPlaceholder height=\"200px\" />;\n  }\n\n  const query = widget.queries[0];\n  const queryFields = defined(query.fields)\n    ? query.fields\n    : [...query.columns, ...query.aggregates];\n  const fieldAliases = query.fieldAliases ?? [];\n  const eventView = eventViewFromWidget(\n    widget.title,\n    widget.queries[0],\n    selection,\n    widget.displayType\n  );\n\n  return (\n    <StyledSimpleTableChart\n      location={location}\n      title=\"\"\n      eventView={eventView}\n      fields={queryFields}\n      fieldAliases={fieldAliases}\n      loading={loading}\n      metadata={ISSUE_FIELDS}\n      data={transformedResults}\n      organization={organization}\n      getCustomFieldRenderer={datasetConfig.getCustomFieldRenderer}\n      fieldHeaderMap={datasetConfig.fieldHeaderMap}\n      stickyHeaders\n    />\n  );\n}\n\nconst LoadingPlaceholder = styled(Placeholder)`\n  background-color: ${p => p.theme.surface200};\n`;\n\nconst StyledSimpleTableChart = styled(SimpleTableChart)`\n  margin-top: ${space(1.5)};\n  border-bottom-left-radius: ${p => p.theme.borderRadius};\n  border-bottom-right-radius: ${p => p.theme.borderRadius};\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: none;\n`;\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport type {DataZoomComponentOption} from 'echarts';\nimport {LegendComponentOption} from 'echarts';\n\nimport {Client} from 'sentry/api';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {EChartEventHandler, Series} from 'sentry/types/echarts';\nimport {TableDataRow, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\n\nimport {Widget, WidgetType} from '../types';\n\nimport WidgetCardChart, {AugmentedEChartDataZoomHandler} from './chart';\nimport {IssueWidgetCard} from './issueWidgetCard';\nimport IssueWidgetQueries from './issueWidgetQueries';\nimport ReleaseWidgetQueries from './releaseWidgetQueries';\nimport WidgetQueries from './widgetQueries';\n\ntype Props = WithRouterProps & {\n  api: Client;\n  organization: Organization;\n  selection: PageFilters;\n  widget: Widget;\n  chartZoomOptions?: DataZoomComponentOption;\n  expandNumbers?: boolean;\n  isMobile?: boolean;\n  legendOptions?: LegendComponentOption;\n  noPadding?: boolean;\n  onDataFetched?: (results: {\n    issuesResults?: TableDataRow[];\n    pageLinks?: string;\n    tableResults?: TableDataWithTitle[];\n    timeseriesResults?: Series[];\n    totalIssuesCount?: string;\n  }) => void;\n  onLegendSelectChanged?: EChartEventHandler<{\n    name: string;\n    selected: Record<string, boolean>;\n    type: 'legendselectchanged';\n  }>;\n  onZoom?: AugmentedEChartDataZoomHandler;\n  renderErrorMessage?: (errorMessage?: string) => React.ReactNode;\n  showSlider?: boolean;\n  tableItemLimit?: number;\n  windowWidth?: number;\n};\n\nexport function WidgetCardChartContainer({\n  location,\n  router,\n  api,\n  organization,\n  selection,\n  widget,\n  isMobile,\n  renderErrorMessage,\n  tableItemLimit,\n  windowWidth,\n  onZoom,\n  onLegendSelectChanged,\n  legendOptions,\n  expandNumbers,\n  onDataFetched,\n  showSlider,\n  noPadding,\n  chartZoomOptions,\n}: Props) {\n  if (widget.widgetType === WidgetType.ISSUE) {\n    return (\n      <IssueWidgetQueries\n        api={api}\n        organization={organization}\n        widget={widget}\n        selection={selection}\n        limit={tableItemLimit}\n        onDataFetched={onDataFetched}\n      >\n        {({transformedResults, errorMessage, loading}) => {\n          return (\n            <Fragment>\n              {typeof renderErrorMessage === 'function'\n                ? renderErrorMessage(errorMessage)\n                : null}\n              <LoadingScreen loading={loading} />\n              <IssueWidgetCard\n                transformedResults={transformedResults}\n                loading={loading}\n                errorMessage={errorMessage}\n                widget={widget}\n                organization={organization}\n                location={location}\n                selection={selection}\n              />\n            </Fragment>\n          );\n        }}\n      </IssueWidgetQueries>\n    );\n  }\n\n  if (widget.widgetType === WidgetType.RELEASE) {\n    return (\n      <ReleaseWidgetQueries\n        api={api}\n        organization={organization}\n        widget={widget}\n        selection={selection}\n        limit={widget.limit ?? tableItemLimit}\n        onDataFetched={onDataFetched}\n      >\n        {({tableResults, timeseriesResults, errorMessage, loading}) => {\n          return (\n            <Fragment>\n              {typeof renderErrorMessage === 'function'\n                ? renderErrorMessage(errorMessage)\n                : null}\n              <WidgetCardChart\n                timeseriesResults={timeseriesResults}\n                tableResults={tableResults}\n                errorMessage={errorMessage}\n                loading={loading}\n                location={location}\n                widget={widget}\n                selection={selection}\n                router={router}\n                organization={organization}\n                isMobile={isMobile}\n                windowWidth={windowWidth}\n                expandNumbers={expandNumbers}\n                onZoom={onZoom}\n                showSlider={showSlider}\n                noPadding={noPadding}\n                chartZoomOptions={chartZoomOptions}\n              />\n            </Fragment>\n          );\n        }}\n      </ReleaseWidgetQueries>\n    );\n  }\n\n  return (\n    <WidgetQueries\n      api={api}\n      organization={organization}\n      widget={widget}\n      selection={selection}\n      limit={tableItemLimit}\n      onDataFetched={onDataFetched}\n    >\n      {({tableResults, timeseriesResults, errorMessage, loading}) => {\n        return (\n          <Fragment>\n            {typeof renderErrorMessage === 'function'\n              ? renderErrorMessage(errorMessage)\n              : null}\n            <WidgetCardChart\n              timeseriesResults={timeseriesResults}\n              tableResults={tableResults}\n              errorMessage={errorMessage}\n              loading={loading}\n              location={location}\n              widget={widget}\n              selection={selection}\n              router={router}\n              organization={organization}\n              isMobile={isMobile}\n              windowWidth={windowWidth}\n              onZoom={onZoom}\n              onLegendSelectChanged={onLegendSelectChanged}\n              legendOptions={legendOptions}\n              expandNumbers={expandNumbers}\n              showSlider={showSlider}\n              noPadding={noPadding}\n              chartZoomOptions={chartZoomOptions}\n            />\n          </Fragment>\n        );\n      }}\n    </WidgetQueries>\n  );\n}\n\nexport default withRouter(WidgetCardChartContainer);\n\nconst StyledTransparentLoadingMask = styled(props => (\n  <TransparentLoadingMask {...props} maskBackgroundColor=\"transparent\" />\n))`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst LoadingScreen = ({loading}: {loading: boolean}) => {\n  if (!loading) {\n    return null;\n  }\n  return (\n    <StyledTransparentLoadingMask visible={loading}>\n      <LoadingIndicator mini />\n    </StyledTransparentLoadingMask>\n  );\n};\n","import {Component} from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\nimport trimStart from 'lodash/trimStart';\n\nimport {doEventsRequest} from 'sentry/actionCreators/events';\nimport {Client} from 'sentry/api';\nimport {isMultiSeriesStats} from 'sentry/components/charts/utils';\nimport {isSelectionEqual} from 'sentry/components/organizations/pageFilters/utils';\nimport {t} from 'sentry/locale';\nimport {\n  EventsStats,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n  PageFilters,\n} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {\n  EventsTableData,\n  TableData,\n  TableDataWithTitle,\n} from 'sentry/utils/discover/discoverQuery';\nimport {isEquation, isEquationAlias} from 'sentry/utils/discover/fields';\nimport {\n  DiscoverQueryRequestParams,\n  doDiscoverQuery,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {TOP_N} from 'sentry/utils/discover/types';\n\nimport {getDatasetConfig} from '../datasetConfig/base';\nimport {\n  DEFAULT_TABLE_LIMIT,\n  DisplayType,\n  Widget,\n  WidgetQuery,\n  WidgetType,\n} from '../types';\nimport {\n  eventViewFromWidget,\n  getDashboardsMEPQueryParams,\n  getNumEquations,\n  getWidgetInterval,\n} from '../utils';\n\nimport {DashboardsMEPContext} from './dashboardsMEPContext';\n\ntype RawResult = EventsStats | MultiSeriesEventsStats;\n\ntype SeriesWithOrdering = [order: number, series: Series];\n\nexport function transformSeries(stats: EventsStats, seriesName: string): Series {\n  return {\n    seriesName,\n    data:\n      stats?.data?.map(([timestamp, counts]) => ({\n        name: timestamp * 1000,\n        value: counts.reduce((acc, {count}) => acc + count, 0),\n      })) ?? [],\n  };\n}\n\n/**\n * Multiseries data with a grouping needs to be \"flattened\" because the aggregate data\n * are stored under the group names. These names need to be combined with the aggregate\n * names to show a series.\n *\n * e.g. count() and count_unique() grouped by environment\n * {\n *    \"local\": {\n *      \"count()\": {...},\n *      \"count_unique()\": {...}\n *    },\n *    \"prod\": {\n *      \"count()\": {...},\n *      \"count_unique()\": {...}\n *    }\n * }\n */\nexport function flattenMultiSeriesDataWithGrouping(\n  result: RawResult,\n  queryAlias: string\n): SeriesWithOrdering[] {\n  const seriesWithOrdering: SeriesWithOrdering[] = [];\n  const groupNames = Object.keys(result);\n\n  groupNames.forEach(groupName => {\n    // Each group contains an order key which we should ignore\n    const aggregateNames = Object.keys(omit(result[groupName], 'order'));\n\n    aggregateNames.forEach(aggregate => {\n      const seriesName = `${groupName} : ${aggregate}`;\n      const prefixedName = queryAlias ? `${queryAlias} > ${seriesName}` : seriesName;\n      const seriesData: EventsStats = result[groupName][aggregate];\n\n      seriesWithOrdering.push([\n        result[groupName].order || 0,\n        transformSeries(seriesData, prefixedName),\n      ]);\n    });\n  });\n\n  return seriesWithOrdering;\n}\n\nfunction getIsMetricsDataFromSeriesResponse(result: RawResult): boolean | undefined {\n  const multiIsMetricsData = Object.values(result)\n    .map(({isMetricsData}) => isMetricsData)\n    // One non-metrics series will cause all of them to be marked as such\n    .reduce((acc, value) => (acc === false ? false : value), undefined);\n\n  return isMultiSeriesStats(result) ? multiIsMetricsData : result.isMetricsData;\n}\n\ntype Props = {\n  api: Client;\n  children: (\n    props: Pick<\n      State,\n      'loading' | 'timeseriesResults' | 'tableResults' | 'errorMessage' | 'pageLinks'\n    >\n  ) => React.ReactNode;\n  organization: OrganizationSummary;\n  selection: PageFilters;\n  widget: Widget;\n  cursor?: string;\n  limit?: number;\n  onDataFetched?: (results: {\n    pageLinks?: string;\n    tableResults?: TableDataWithTitle[];\n    timeseriesResults?: Series[];\n  }) => void;\n};\n\ntype State = {\n  loading: boolean;\n  errorMessage?: string;\n  pageLinks?: null | string;\n  queryFetchID?: symbol;\n  rawResults?: RawResult[];\n  tableResults?: TableDataWithTitle[];\n  timeseriesResults?: Series[];\n};\n\nclass WidgetQueries extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    queryFetchID: undefined,\n    errorMessage: undefined,\n    timeseriesResults: undefined,\n    rawResults: undefined,\n    tableResults: undefined,\n    pageLinks: undefined,\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {selection, widget, cursor, organization} = this.props;\n\n    // We do not fetch data whenever the query name changes.\n    // Also don't count empty fields when checking for field changes\n    const [prevWidgetQueryNames, prevWidgetQueries] = prevProps.widget.queries\n      .map((query: WidgetQuery) => {\n        query.aggregates = query.aggregates.filter(field => !!field);\n        query.columns = query.columns.filter(field => !!field);\n        return query;\n      })\n      .reduce(\n        ([names, queries]: [string[], Omit<WidgetQuery, 'name'>[]], {name, ...rest}) => {\n          names.push(name);\n          queries.push(rest);\n          return [names, queries];\n        },\n        [[], []]\n      );\n\n    const [widgetQueryNames, widgetQueries] = widget.queries\n      .map((query: WidgetQuery) => {\n        query.aggregates = query.aggregates.filter(\n          field => !!field && field !== 'equation|'\n        );\n        query.columns = query.columns.filter(field => !!field && field !== 'equation|');\n        return query;\n      })\n      .reduce(\n        ([names, queries]: [string[], Omit<WidgetQuery, 'name'>[]], {name, ...rest}) => {\n          names.push(name);\n          queries.push(rest);\n          return [names, queries];\n        },\n        [[], []]\n      );\n\n    if (\n      widget.limit !== prevProps.widget.limit ||\n      !isEqual(widget.displayType, prevProps.widget.displayType) ||\n      !isEqual(widget.interval, prevProps.widget.interval) ||\n      !isEqual(widgetQueries, prevWidgetQueries) ||\n      !isSelectionEqual(selection, prevProps.selection) ||\n      cursor !== prevProps.cursor\n    ) {\n      this.fetchData();\n      return;\n    }\n\n    if (\n      !this.state.loading &&\n      !isEqual(prevWidgetQueryNames, widgetQueryNames) &&\n      this.state.rawResults?.length === widget.queries.length\n    ) {\n      // If the query names has changed, then update timeseries labels\n\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState(prevState => {\n        const timeseriesResults = widget.queries.reduce((acc: Series[], query, index) => {\n          return acc.concat(\n            this.config.transformSeries!(prevState.rawResults![index], query, {\n              organization,\n            })\n          );\n        }, []);\n\n        return {...prevState, timeseriesResults};\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  static contextType = DashboardsMEPContext;\n  context: React.ContextType<typeof DashboardsMEPContext> | undefined;\n  config = getDatasetConfig(WidgetType.DISCOVER);\n\n  private _isMounted: boolean = false;\n\n  get isMEPEnabled() {\n    // Events endpoint can return either always transactions, metrics, or metrics with a fallback to transactions (basically auto).\n    // For now, we are always keeping it on \"auto\" (if you have feature flag enabled).\n    // There's a chance that in the future this might become an explicit selector in the product.\n    return this.props.organization.features.includes('dashboards-mep');\n  }\n\n  fetchEventData(queryFetchID: symbol) {\n    const {selection, api, organization, widget, limit, cursor, onDataFetched} =\n      this.props;\n\n    const shouldUseEvents = organization.features.includes(\n      'discover-frontend-use-events-endpoint'\n    );\n\n    let tableResults: TableDataWithTitle[] = [];\n    // Table, world map, and stat widgets use table results and need\n    // to do a discover 'table' query instead of a 'timeseries' query.\n\n    const promises = widget.queries.map(query => {\n      const eventView = eventViewFromWidget(widget.title, query, selection);\n\n      let url: string = '';\n      const params: DiscoverQueryRequestParams = {\n        per_page: limit ?? DEFAULT_TABLE_LIMIT,\n        cursor,\n        ...getDashboardsMEPQueryParams(this.isMEPEnabled),\n      };\n\n      if (query.orderby) {\n        params.sort = typeof query.orderby === 'string' ? [query.orderby] : query.orderby;\n      }\n\n      const eventsUrl = shouldUseEvents\n        ? `/organizations/${organization.slug}/events/`\n        : `/organizations/${organization.slug}/eventsv2/`;\n      if (widget.displayType === 'table') {\n        url = eventsUrl;\n        params.referrer = 'api.dashboards.tablewidget';\n      } else if (widget.displayType === 'big_number') {\n        url = eventsUrl;\n        params.per_page = 1;\n        params.referrer = 'api.dashboards.bignumberwidget';\n      } else if (widget.displayType === 'world_map') {\n        url = `/organizations/${organization.slug}/events-geo/`;\n        delete params.per_page;\n        params.referrer = 'api.dashboards.worldmapwidget';\n      } else {\n        throw Error(\n          'Expected widget displayType to be either big_number, table or world_map'\n        );\n      }\n\n      // TODO: eventually need to replace this with just EventsTableData as we deprecate eventsv2\n      return doDiscoverQuery<TableData | EventsTableData>(api, url, {\n        ...eventView.generateQueryStringObject(),\n        ...params,\n      });\n    });\n\n    let completed = 0;\n    let isMetricsData: boolean | undefined;\n    promises.forEach(async (promise, i) => {\n      try {\n        const [data, _textstatus, resp] = await promise;\n        // If one of the queries is sampled, then mark the whole thing as sampled\n        isMetricsData = isMetricsData === false ? false : data.meta?.isMetricsData;\n\n        // Cast so we can add the title.\n        const tableData = this.config.transformTable(data, widget.queries[0], {\n          organization,\n        }) as TableDataWithTitle;\n        tableData.title = widget.queries[i]?.name ?? '';\n\n        // Overwrite the local var to work around state being stale in tests.\n        tableResults = [...tableResults, tableData];\n\n        if (!this._isMounted) {\n          return;\n        }\n        const pageLinks = resp?.getResponseHeader('Link');\n\n        onDataFetched?.({tableResults, pageLinks: pageLinks ?? undefined});\n\n        this.setState(prevState => {\n          if (prevState.queryFetchID !== queryFetchID) {\n            // invariant: a different request was initiated after this request\n            return prevState;\n          }\n\n          return {\n            ...prevState,\n            tableResults,\n            pageLinks,\n          };\n        });\n      } catch (err) {\n        const errorMessage = err?.responseJSON?.detail || t('An unknown error occurred.');\n        this.setState({errorMessage});\n      } finally {\n        completed++;\n        if (!this._isMounted) {\n          return;\n        }\n        this.context?.setIsMetricsData(isMetricsData);\n        this.setState(prevState => {\n          if (prevState.queryFetchID !== queryFetchID) {\n            // invariant: a different request was initiated after this request\n            return prevState;\n          }\n\n          return {\n            ...prevState,\n            loading: completed === promises.length ? false : true,\n          };\n        });\n      }\n    });\n  }\n\n  fetchTimeseriesData(queryFetchID: symbol, displayType: DisplayType) {\n    const {selection, api, organization, widget, onDataFetched} = this.props;\n    this.setState({timeseriesResults: [], rawResults: []});\n\n    const {environments, projects} = selection;\n    const {start, end, period: statsPeriod} = selection.datetime;\n    const interval = getWidgetInterval(widget, {\n      start,\n      end,\n      period: statsPeriod,\n    });\n    const promises = widget.queries.map(query => {\n      let requestData;\n      if (widget.displayType === 'top_n') {\n        requestData = {\n          organization,\n          interval,\n          start,\n          end,\n          project: projects,\n          environment: environments,\n          period: statsPeriod,\n          query: query.conditions,\n          yAxis: query.aggregates[query.aggregates.length - 1],\n          includePrevious: false,\n          referrer: `api.dashboards.widget.${displayType}-chart`,\n          partial: true,\n          topEvents: TOP_N,\n          field: [...query.columns, ...query.aggregates],\n          queryExtras: getDashboardsMEPQueryParams(this.isMEPEnabled),\n        };\n        if (query.orderby) {\n          requestData.orderby = query.orderby;\n        }\n      } else {\n        requestData = {\n          organization,\n          interval,\n          start,\n          end,\n          project: projects,\n          environment: environments,\n          period: statsPeriod,\n          query: query.conditions,\n          yAxis: query.aggregates,\n          orderby: query.orderby,\n          includePrevious: false,\n          referrer: `api.dashboards.widget.${displayType}-chart`,\n          partial: true,\n          queryExtras: getDashboardsMEPQueryParams(this.isMEPEnabled),\n        };\n\n        if (\n          organization.features.includes('new-widget-builder-experience-design') &&\n          [DisplayType.AREA, DisplayType.BAR, DisplayType.LINE].includes(displayType) &&\n          query.columns?.length !== 0\n        ) {\n          requestData.topEvents = widget.limit ?? TOP_N;\n          requestData.field = [...query.columns, ...query.aggregates];\n\n          // Compare field and orderby as aliases to ensure requestData has\n          // the orderby selected\n          // If the orderby is an equation alias, do not inject it\n          const orderby = trimStart(query.orderby, '-');\n          if (\n            query.orderby &&\n            !isEquationAlias(orderby) &&\n            !requestData.field.includes(orderby)\n          ) {\n            requestData.field.push(orderby);\n          }\n\n          // The \"Other\" series is only included when there is one\n          // y-axis and one query\n          requestData.excludeOther =\n            query.aggregates.length !== 1 || widget.queries.length !== 1;\n\n          if (isEquation(trimStart(query.orderby, '-'))) {\n            const nextEquationIndex = getNumEquations(query.aggregates);\n            const isDescending = query.orderby.startsWith('-');\n            const prefix = isDescending ? '-' : '';\n\n            // Construct the alias form of the equation and inject it into the request\n            requestData.orderby = `${prefix}equation[${nextEquationIndex}]`;\n            requestData.field = [\n              ...query.columns,\n              ...query.aggregates,\n              trimStart(query.orderby, '-'),\n            ];\n          }\n        }\n      }\n      return doEventsRequest(api, requestData);\n    });\n\n    let completed = 0;\n    let isMetricsData: boolean | undefined;\n    promises.forEach(async (promise, requestIndex) => {\n      try {\n        const rawResults = await promise;\n        if (!this._isMounted) {\n          return;\n        }\n        // If one of the queries is sampled, then mark the whole thing as sampled\n        isMetricsData =\n          isMetricsData === false\n            ? false\n            : getIsMetricsDataFromSeriesResponse(rawResults);\n        this.setState(prevState => {\n          if (prevState.queryFetchID !== queryFetchID) {\n            // invariant: a different request was initiated after this request\n            return prevState;\n          }\n\n          const timeseriesResults = [...(prevState.timeseriesResults ?? [])];\n          const transformedResult = this.config.transformSeries!(\n            rawResults,\n            widget.queries[requestIndex],\n            {organization}\n          );\n          // When charting timeseriesData on echarts, color association to a timeseries result\n          // is order sensitive, ie series at index i on the timeseries array will use color at\n          // index i on the color array. This means that on multi series results, we need to make\n          // sure that the order of series in our results do not change between fetches to avoid\n          // coloring inconsistencies between renders.\n          transformedResult.forEach((result, resultIndex) => {\n            timeseriesResults[requestIndex * transformedResult.length + resultIndex] =\n              result;\n          });\n\n          const rawResultsClone = cloneDeep(prevState.rawResults ?? []);\n          rawResultsClone[requestIndex] = rawResults;\n\n          onDataFetched?.({timeseriesResults});\n\n          return {\n            ...prevState,\n            timeseriesResults,\n            rawResults: rawResultsClone,\n          };\n        });\n      } catch (err) {\n        const errorMessage = err?.responseJSON?.detail || t('An unknown error occurred.');\n        this.setState({errorMessage});\n      } finally {\n        completed++;\n        if (!this._isMounted) {\n          return;\n        }\n        this.context?.setIsMetricsData(isMetricsData);\n        this.setState(prevState => {\n          if (prevState.queryFetchID !== queryFetchID) {\n            // invariant: a different request was initiated after this request\n            return prevState;\n          }\n\n          return {\n            ...prevState,\n            loading: completed === promises.length ? false : true,\n          };\n        });\n      }\n    });\n  }\n\n  fetchData() {\n    const {widget} = this.props;\n\n    const queryFetchID = Symbol('queryFetchID');\n    this.setState({loading: true, errorMessage: undefined, queryFetchID});\n\n    if (['table', 'world_map', 'big_number'].includes(widget.displayType)) {\n      this.fetchEventData(queryFetchID);\n    } else {\n      this.fetchTimeseriesData(queryFetchID, widget.displayType);\n    }\n  }\n\n  render() {\n    const {children} = this.props;\n    const {loading, timeseriesResults, tableResults, errorMessage, pageLinks} =\n      this.state;\n\n    const filteredTimeseriesResults = timeseriesResults?.filter(result => !!result);\n    return children({\n      loading,\n      timeseriesResults: filteredTimeseriesResults,\n      tableResults,\n      errorMessage,\n      pageLinks,\n    });\n  }\n}\n\nexport default WidgetQueries;\n"],"names":["SimpleTableChart","className","loading","eventView","fields","metadata","data","title","fieldHeaderMap","stickyHeaders","getCustomFieldRenderer","organization","topResultsIndicators","location","fieldAliases","loader","meta","usingEvents","features","includes","columns","decodeColumnOrder","map","field","index","alias","Fragment","StyledPanelTable","isLoading","headers","column","align","fieldAlignment","name","type","header","key","HeadCell","StyledTruncate","value","maxLength","expandable","isEmpty","length","disablePadding","row","tableMeta","columnIndex","fieldRenderer","getFieldRenderer","TableCell","count","renderRow","Truncate","PanelTable","PanelTableHeader","p","space","withOrganization","WidgetViewerQueryField","isWidgetViewerPath","pathname","match","SPECIAL_FIELDS","issue","sortField","renderFunc","issueID","shortId","target","slug","to","assignee","memberList","MemberListStore","ActorContainer","id","noDropdown","lifetimeEvents","issuesCountRenderer","lifetimeUsers","events","users","lifetimeCount","lifetimeUserCount","userCount","links","LinksContainer","dangerouslySetInnerHTML","__html","start","end","period","isUserField","exec","toLowerCase","primaryCount","filteredCount","discoverLink","getDiscoverUrl","filteredDiscoverLink","selectionDateString","getRelativeSummary","DEFAULT_STATS_PERIOD","isHoverable","skipWrapper","overlayStyle","padding","StyledLink","t","WrappedCount","Divider","StyledContent","SecondaryCount","filtered","commonQuery","projects","Number","projectId","EventView","undefined","range","orderby","query","discoverSearchQuery","version","getResultsViewUrlTarget","getSortField","hasOwnProperty","FieldKey","contentStyle","Link","theme","gray400","hover","Count","subText","innerBorder","getIssueFieldRenderer","tooltipFormatter","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","DAY","HOUR","MINUTE","SECOND","ErrorsAndTransactionsConfig","defaultWidgetQuery","aggregates","conditions","contextualProps","isAlias","renderEventIdAsLinkable","renderTraceAsLinkable","getTableFieldOptions","tags","measurements","getMeasurements","generateFieldOptions","tagKeys","Object","values","measurementKeys","spanOperationBreakdownKeys","SPAN_OP_BREAKDOWN_FIELDS","supportedDisplayTypes","DisplayType","transformSeries","widgetQuery","output","queryAlias","widgetBuilderNewDesign","isMultiSeriesStats","seriesWithOrdering","isMultiSeriesDataWithGrouping","flattenMultiSeriesDataWithGrouping","keys","prefixedName","seriesData","order","sort","itemA","itemB","item","transformed","push","transformTable","_widgetQuery","tableData","fieldsMeta","isMetricsData","eventSlug","generateEventSlug","eventDetailsRouteWithEventView","orgSlug","getShortEventId","trace","dateSelection","normalizeDateSelection","getTraceDetailsUrl","String","IssuesConfig","IssueSortOptions","generateIssueWidgetFieldOptions","ISSUE_FIELD_TO_HEADER_MAP","GroupStore","transformedTableResults","forEach","lifetime","project","annotations","resultProps","transformedResultProps","filter","transformedTableResult","join","filteredEvents","filteredUsers","queryTerms","queryObj","queryToObj","queryTag","DISCOVER_EXCLUSION_FIELDS","queryVal","__text","pageFilters","datetime","getUtcDateString","getSeriesName","group","groupName","entries","by","_","derivedMetricsToField","mapDerivedMetricsToFields","results","mappedResults","getDerivedMetrics","groupBy","totals","requestedStatusMetrics","derivedTotals","status","result","DERIVED_STATUS_METRICS_PATTERN","ReleasesConfig","SessionField","generateReleaseWidgetFieldOptions","SESSIONS_FIELDS","SESSIONS_TAGS","useSessionAPI","derivedStatusFields","injectedFields","resolveDerivedStatusFields","groups","series","intervals","interval","metricField","rows","omit","singleRow","obj","reduce","acc","getDatasetConfig","widgetType","WidgetType","cloneDashboard","dashboard","cloneDeep","eventViewFromWidget","selection","widgetDisplayType","statsPeriod","environments","trim","aggregateAliasOrderBy","startsWith","getAggregateAlias","trimStart","environment","coerceStringToArray","constructWidgetFromQuery","queryNames","queryConditions","queryFields","queries","queryOrderby","getColumnsAndAggregates","condition","displayType","pick","miniWidget","WidgetBar","WidgetArea","WidgetBigNumber","WidgetTable","WidgetWorldMap","WidgetLine","getWidgetInterval","widget","datetimeObj","fidelity","desiredPeriod","parsePeriodToHours","selectedRange","getDiffInMinutes","getInterval","SIX_HOURS","TWENTY_FOUR_HOURS","highInterval","getFieldsFromEquations","termsSet","Set","isEquation","parsed","parseArithmetic","stripEquationPrefix","tc","term","add","functions","Array","from","getWidgetDiscoverUrl","discoverLocation","yAxisOptions","getYAxisOptions","yAxis","aggregate","slice","display","DisplayModes","equationFields","isArray","unshift","discoverPath","qs","getWidgetIssueUrl","utc","getWidgetReleasesUrl","_widget","flattenErrors","update","error","getDashboardsMEPQueryParams","isMEPEnabled","dataset","getNumEquations","possibleEquations","issueFields","ISSUE_FIELDS","fieldKeys","fieldOptions","kind","FieldValueKind","dataType","ISSUE_WIDGET_SORT_OPTIONS","generateIssueWidgetOrderOptions","includeRelativeChange","sortOptions","sortOption","getSortLabel","SLIDER_HEIGHT","WidgetCardChart","Component","containerHeight","shouldComponentUpdate","nextProps","nextState","this","props","windowWidth","isEqual","layout","currentProps","state","tableResultComponent","errorMessage","tableResults","StyledErrorPanel","color","size","LoadingPlaceholder","datasetConfig","i","stripDerivedMetricsPrefix","StyledSimpleTableChart","bigNumberComponent","BigNumber","isMobile","expandNumbers","shouldExpandInteger","dataRow","rendered","getFieldFormatter","isModalWidget","tempId","fontSize","parseInt","style","showOnlyOnOverflow","chartComponent","chartProps","stacked","render","timeseriesResults","onZoom","legendOptions","showSlider","noPadding","chartZoomOptions","getDynamicText","reloading","LoadingScreen","fixed","height","testId","BigNumberResizeWrapper","ref","el","getBoundingClientRect","setState","router","onLegendSelectChanged","autoHeightResize","Boolean","processTableResults","ChartWrapper","legend","left","top","selected","getSeriesSelection","formatter","arg","getAggregateArg","getMeasurementSlug","toUpperCase","maybeEquationAlias","axisField","axisLabel","getEquation","chartOptions","grid","right","bottom","seriesOptions","showSymbol","tooltip","trigger","valueFormatter","chartLabel","zoomRenderProps","otherRegex","RegExp","shouldColorOther","some","colors","charts","getColorPalette","chartOther","seriesStart","seriesEnd","onDataZoom","evt","withTheme","StyledTransparentLoadingMask","maskBackgroundColor","visible","mini","surface200","headingColor","borderRadius","fontSizeMedium","ErrorPanel","_DashboardsMEPProvider","useDashboardsMEPContext","DashboardsMEPContext","createDefinedContext","DashboardsMEPConsumer","Consumer","DashboardsMEPProvider","children","setIsMetricsData","useState","DEFAULT_SORT","DEFAULT_EXPAND","IssueWidgetQueries","memberListStoreLoaded","totalCount","pageLinks","componentDidMount","fetchData","componentDidUpdate","prevProps","cursor","prevWidgetQueries","names","rest","widgetQueries","isSelectionEqual","componentWillUnmount","unlisteners","unlistener","api","limit","onDataFetched","groupListUrl","params","expand","DEFAULT_TABLE_LIMIT","resp","requestPromise","includeAllArgs","method","config","getResponseHeader","issuesResults","totalIssuesCount","response","errorResponse","responseJSON","detail","fetchIssuesData","transformedResults","doMetricsRequest","includeSeries","includeTotals","orderBy","statsPeriodStart","statsPeriodEnd","dateTime","normalizeDateTimeParams","allowEmptyPeriod","urlQuery","fromEntries","f","g","per_page","doSessionsRequest","fieldsToDerivedMetrics","FIELD_TO_METRICS_EXPRESSION","METRICS_EXPRESSION_TO_FIELD","agg","DerivedStatusFields","rawOrderby","unsupportedOrderby","DISABLED_SORT","ReleaseWidgetQueries","queryFetchID","rawResults","releases","_isMounted","requiresCustomReleaseSorting","fetchReleasesAndData","ignroredWidgetProps","ignoredQueryProps","widgetQueryNames","q","prevWidgetQueryNames","flatMap","prevState","rawResult","TOP_N","useMetricsAPI","addErrorMessage","Symbol","promises","isDescending","isCustomReleaseSorting","releaseCondition","releasesArray","reverse","requestData","requester","completed","async","promise","requestIndex","res","group1","group2","release1","release","release2","indexOf","transformedResult","resultIndex","rawResultsClone","err","IssueWidgetCard","Placeholder","WidgetCardChartContainer","renderErrorMessage","tableItemLimit","withRouter","stats","timestamp","counts","WidgetQueries","concat","fetchEventData","shouldUseEvents","url","eventsUrl","referrer","Error","doDiscoverQuery","generateQueryStringObject","_textstatus","context","fetchTimeseriesData","includePrevious","partial","topEvents","queryExtras","isEquationAlias","excludeOther","nextEquationIndex","prefix","doEventsRequest","multiIsMetricsData","getIsMetricsDataFromSeriesResponse"],"sourceRoot":""}