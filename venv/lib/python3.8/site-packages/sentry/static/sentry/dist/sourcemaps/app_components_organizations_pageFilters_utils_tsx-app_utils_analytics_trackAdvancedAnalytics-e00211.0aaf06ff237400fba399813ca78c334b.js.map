{"version":3,"file":"chunks/app_components_organizations_pageFilters_utils_tsx-app_utils_analytics_trackAdvancedAnalytics-e00211.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/discoverSavedQueries.tsx","webpack:///./app/components/organizations/pageFilters/utils.tsx","webpack:///./app/utils/analytics/trackAdvancedAnalyticsEvent.tsx","webpack:///./app/utils/discover/eventView.tsx","webpack:///./app/utils/discover/types.tsx","webpack:///./app/utils/events.tsx","webpack:///./app/utils/platform.tsx","webpack:///./app/views/dashboardsV2/types.tsx","webpack:///./app/views/eventsV2/data.tsx","webpack:///./app/views/eventsV2/savedQuery/utils.tsx"],"sourcesContent":["import {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {NewQuery, SavedQuery} from 'sentry/types';\n\nexport function fetchSavedQueries(\n  api: Client,\n  orgId: string,\n  query: string = ''\n): Promise<SavedQuery[]> {\n  const promise: Promise<SavedQuery[]> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/`,\n    {\n      method: 'GET',\n      query: {query: `version:2 ${query}`.trim()},\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to load saved queries'));\n  });\n  return promise;\n}\n\nexport function fetchSavedQuery(\n  api: Client,\n  orgId: string,\n  queryId: string\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/`,\n    {\n      method: 'GET',\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to load saved query'));\n  });\n  return promise;\n}\n\nexport function createSavedQuery(\n  api: Client,\n  orgId: string,\n  query: NewQuery\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/`,\n    {\n      method: 'POST',\n      data: query,\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to create your saved query'));\n  });\n  return promise;\n}\n\nexport function updateSavedQuery(\n  api: Client,\n  orgId: string,\n  query: NewQuery\n): Promise<SavedQuery> {\n  const promise: Promise<SavedQuery> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${query.id}/`,\n    {\n      method: 'PUT',\n      data: query,\n    }\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to update your saved query'));\n  });\n  return promise;\n}\n\nexport function updateSavedQueryVisit(\n  orgId: string,\n  queryId: string | string[]\n): Promise<void> {\n  // Create a new client so the request is not cancelled\n  const api = new Client();\n  const promise = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/visit/`,\n    {\n      method: 'POST',\n    }\n  );\n\n  return promise;\n}\n\nexport function deleteSavedQuery(\n  api: Client,\n  orgId: string,\n  queryId: string\n): Promise<void> {\n  const promise: Promise<void> = api.requestPromise(\n    `/organizations/${orgId}/discover/saved/${queryId}/`,\n    {method: 'DELETE'}\n  );\n\n  promise.catch(() => {\n    addErrorMessage(t('Unable to delete the saved query'));\n  });\n  return promise;\n}\n","import {Location} from 'history';\nimport identity from 'lodash/identity';\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport pickBy from 'lodash/pickBy';\n\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {DATE_TIME_KEYS, URL_PARAM} from 'sentry/constants/pageFilters';\nimport {PageFilters} from 'sentry/types';\n\n/**\n * Make a default page filters object\n */\nexport function getDefaultSelection(): PageFilters {\n  const datetime = {\n    start: null,\n    end: null,\n    period: DEFAULT_STATS_PERIOD,\n    utc: null,\n  };\n\n  return {\n    projects: [],\n    environments: [],\n    datetime,\n  };\n}\n\n/**\n * Extract the page filter parameters from an object\n * Useful for extracting page filter properties from the current URL\n * when building another URL.\n */\nexport function extractSelectionParameters(query: Location['query']) {\n  return pickBy(pick(query, Object.values(URL_PARAM)), identity);\n}\n\n/**\n * Extract the page filter datetime parameters from an object.\n */\nexport function extractDatetimeSelectionParameters(query: Location['query']) {\n  return pickBy(pick(query, Object.values(DATE_TIME_KEYS)), identity);\n}\n\n/**\n * Compare the non-utc values of two selections.\n * Useful when re-fetching data based on page filters changing.\n *\n * utc is not compared as there is a problem somewhere in the selection\n * data flow that results in it being undefined | null | boolean instead of null | boolean.\n * The additional undefined state makes this function just as unreliable as isEqual(selection, other)\n */\nexport function isSelectionEqual(selection: PageFilters, other: PageFilters): boolean {\n  if (\n    !isEqual(selection.projects, other.projects) ||\n    !isEqual(selection.environments, other.environments)\n  ) {\n    return false;\n  }\n\n  // Use string comparison as we aren't interested in the identity of the datetimes.\n  if (\n    selection.datetime.period !== other.datetime.period ||\n    selection.datetime.start?.toString() !== other.datetime.start?.toString() ||\n    selection.datetime.end?.toString() !== other.datetime.end?.toString()\n  ) {\n    return false;\n  }\n\n  return true;\n}\n","import {coreUIEventMap, CoreUIEventParameters} from './coreuiAnalyticsEvents';\nimport {dashboardsEventMap, DashboardsEventParameters} from './dashboardsAnalyticsEvents';\nimport {discoverEventMap, DiscoverEventParameters} from './discoverAnalyticsEvents';\nimport {growthEventMap, GrowthEventParameters} from './growthAnalyticsEvents';\nimport {issueEventMap, IssueEventParameters} from './issueAnalyticsEvents';\nimport makeAnalyticsFunction from './makeAnalyticsFunction';\nimport {\n  performanceEventMap,\n  PerformanceEventParameters,\n} from './performanceAnalyticsEvents';\nimport {samplingEventMap, SamplingEventParameters} from './samplingAnalyticsEvents';\nimport {searchEventMap, SearchEventParameters} from './searchAnalyticsEvents';\nimport {settingsEventMap, SettingsEventParameters} from './settingsAnalyticsEvents';\nimport {TeamInsightsEventParameters, workflowEventMap} from './workflowAnalyticsEvents';\n\ntype EventParameters = GrowthEventParameters &\n  IssueEventParameters &\n  PerformanceEventParameters &\n  DashboardsEventParameters &\n  DiscoverEventParameters &\n  TeamInsightsEventParameters &\n  SearchEventParameters &\n  SettingsEventParameters &\n  CoreUIEventParameters &\n  SamplingEventParameters;\n\nconst allEventMap = {\n  ...growthEventMap,\n  ...issueEventMap,\n  ...performanceEventMap,\n  ...dashboardsEventMap,\n  ...discoverEventMap,\n  ...workflowEventMap,\n  ...searchEventMap,\n  ...settingsEventMap,\n  ...coreUIEventMap,\n  ...samplingEventMap,\n};\n\n/**\n * Generic typed analytics function for growth, issue, and performance events.\n * Can split up analytics functions to a smaller set of events like we do for trackIntegrationAnalytics\n */\nconst trackAdvancedAnalyticsEvent = makeAnalyticsFunction<EventParameters>(allEventMap);\n\nexport default trackAdvancedAnalyticsEvent;\n","import {Location, Query} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEqual from 'lodash/isEqual';\nimport isString from 'lodash/isString';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport uniqBy from 'lodash/uniqBy';\nimport moment from 'moment';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {COL_WIDTH_UNDEFINED} from 'sentry/components/gridEditable';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {DEFAULT_PER_PAGE} from 'sentry/constants';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {NewQuery, PageFilters, SavedQuery, SelectValue, User} from 'sentry/types';\nimport {\n  aggregateOutputType,\n  Column,\n  ColumnType,\n  Field,\n  generateFieldAsString,\n  getAggregateAlias,\n  getEquation,\n  isAggregateEquation,\n  isAggregateField,\n  isEquation,\n  isLegalYAxisType,\n  Sort,\n  WebVital,\n} from 'sentry/utils/discover/fields';\nimport {\n  CHART_AXIS_OPTIONS,\n  DISPLAY_MODE_FALLBACK_OPTIONS,\n  DISPLAY_MODE_OPTIONS,\n  DisplayModes,\n  TOP_N,\n} from 'sentry/utils/discover/types';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport {\n  FieldValueKind,\n  TableColumn,\n  TableColumnSort,\n} from 'sentry/views/eventsV2/table/types';\nimport {decodeColumnOrder} from 'sentry/views/eventsV2/utils';\nimport {SpanOperationBreakdownFilter} from 'sentry/views/performance/transactionSummary/filter';\nimport {EventsDisplayFilterName} from 'sentry/views/performance/transactionSummary/transactionEvents/utils';\n\nimport {statsPeriodToDays} from '../dates';\nimport {MutableSearch} from '../tokenizeSearch';\n\nimport {getSortField} from './fieldRenderers';\n\n// Metadata mapping for discover results.\nexport type MetaType = Record<string, ColumnType> & {isMetricsData?: boolean};\nexport type EventsMetaType = {fields: Record<string, ColumnType>} & {\n  isMetricsData?: boolean;\n};\n\n// Data in discover results.\nexport type EventData = Record<string, any>;\n\nexport type LocationQuery = {\n  cursor?: string | string[] | null;\n  end?: string | string[] | null;\n  start?: string | string[] | null;\n  statsPeriod?: string | string[] | null;\n  utc?: string | string[] | null;\n};\n\nconst DATETIME_QUERY_STRING_KEYS = ['start', 'end', 'utc', 'statsPeriod'] as const;\n\nconst EXTERNAL_QUERY_STRING_KEYS: Readonly<Array<keyof LocationQuery>> = [\n  ...DATETIME_QUERY_STRING_KEYS,\n  'cursor',\n];\n\nconst setSortOrder = (sort: Sort, kind: 'desc' | 'asc'): Sort => ({\n  kind,\n  field: sort.field,\n});\n\nconst reverseSort = (sort: Sort): Sort => ({\n  kind: sort.kind === 'desc' ? 'asc' : 'desc',\n  field: sort.field,\n});\n\nconst isSortEqualToField = (\n  sort: Sort,\n  field: Field,\n  tableMeta: MetaType | undefined\n): boolean => {\n  const sortKey = getSortKeyFromField(field, tableMeta);\n  return sort.field === sortKey;\n};\n\nconst fieldToSort = (\n  field: Field,\n  tableMeta: MetaType | undefined,\n  kind?: 'desc' | 'asc',\n  useFunctionFormat?: boolean\n): Sort | undefined => {\n  const sortKey = getSortKeyFromField(field, tableMeta, useFunctionFormat);\n\n  if (!sortKey) {\n    return void 0;\n  }\n\n  return {\n    kind: kind || 'desc',\n    field: sortKey,\n  };\n};\n\nfunction getSortKeyFromField(\n  field: Field,\n  tableMeta?: MetaType,\n  useFunctionFormat?: boolean\n): string | null {\n  const fieldString = useFunctionFormat ? field.field : getAggregateAlias(field.field);\n  return getSortField(fieldString, tableMeta);\n}\n\nexport function isFieldSortable(field: Field, tableMeta?: MetaType): boolean {\n  return !!getSortKeyFromField(field, tableMeta);\n}\n\nconst decodeFields = (location: Location): Array<Field> => {\n  const {query} = location;\n  if (!query || !query.field) {\n    return [];\n  }\n\n  const fields = decodeList(query.field);\n  const widths = decodeList(query.widths);\n\n  const parsed: Field[] = [];\n  fields.forEach((field, i) => {\n    const w = Number(widths[i]);\n    const width = !isNaN(w) ? w : COL_WIDTH_UNDEFINED;\n\n    parsed.push({field, width});\n  });\n\n  return parsed;\n};\n\nconst parseSort = (sort: string): Sort => {\n  sort = sort.trim();\n\n  if (sort.startsWith('-')) {\n    return {\n      kind: 'desc',\n      field: sort.substring(1),\n    };\n  }\n\n  return {\n    kind: 'asc',\n    field: sort,\n  };\n};\n\nexport const fromSorts = (sorts: string | string[] | undefined): Array<Sort> => {\n  if (sorts === undefined) {\n    return [];\n  }\n\n  sorts = isString(sorts) ? [sorts] : sorts;\n\n  // NOTE: sets are iterated in insertion order\n  const uniqueSorts = [...new Set(sorts)];\n\n  return uniqueSorts.reduce((acc: Array<Sort>, sort: string) => {\n    acc.push(parseSort(sort));\n    return acc;\n  }, []);\n};\n\nconst decodeSorts = (location: Location): Array<Sort> => {\n  const {query} = location;\n\n  if (!query || !query.sort) {\n    return [];\n  }\n\n  const sorts = decodeList(query.sort);\n\n  return fromSorts(sorts);\n};\n\nexport const encodeSort = (sort: Sort): string => {\n  switch (sort.kind) {\n    case 'desc': {\n      return `-${sort.field}`;\n    }\n    case 'asc': {\n      return String(sort.field);\n    }\n    default: {\n      throw new Error('Unexpected sort type');\n    }\n  }\n};\n\nconst encodeSorts = (sorts: Readonly<Array<Sort>>): Array<string> =>\n  sorts.map(encodeSort);\n\nconst collectQueryStringByKey = (query: Query, key: string): Array<string> => {\n  const needle = query[key];\n  const collection = decodeList(needle);\n  return collection.reduce((acc: Array<string>, item: string) => {\n    item = item.trim();\n\n    if (item.length > 0) {\n      acc.push(item);\n    }\n\n    return acc;\n  }, []);\n};\n\nconst decodeQuery = (location: Location): string => {\n  if (!location.query || !location.query.query) {\n    return '';\n  }\n\n  const queryParameter = location.query.query;\n\n  return decodeScalar(queryParameter, '').trim();\n};\n\nconst decodeTeam = (value: string): 'myteams' | number => {\n  if (value === 'myteams') {\n    return value;\n  }\n  return parseInt(value, 10);\n};\n\nconst decodeTeams = (location: Location): ('myteams' | number)[] => {\n  if (!location.query || !location.query.team) {\n    return [];\n  }\n  const value = location.query.team;\n  return (Array.isArray(value) ? value.map(decodeTeam) : [decodeTeam(value)]).filter(\n    team => team === 'myteams' || !isNaN(team)\n  );\n};\n\nconst decodeProjects = (location: Location): number[] => {\n  if (!location.query || !location.query.project) {\n    return [];\n  }\n\n  const value = location.query.project;\n  return Array.isArray(value) ? value.map(i => parseInt(i, 10)) : [parseInt(value, 10)];\n};\n\nconst queryStringFromSavedQuery = (saved: NewQuery | SavedQuery): string => {\n  if (saved.query) {\n    return saved.query || '';\n  }\n  return '';\n};\n\nfunction validateTableMeta(tableMeta: MetaType | undefined): MetaType | undefined {\n  return tableMeta && Object.keys(tableMeta).length > 0 ? tableMeta : undefined;\n}\n\nclass EventView {\n  id: string | undefined;\n  name: string | undefined;\n  fields: Readonly<Field[]>;\n  sorts: Readonly<Sort[]>;\n  query: string;\n  team: Readonly<('myteams' | number)[]>;\n  project: Readonly<number[]>;\n  start: string | undefined;\n  end: string | undefined;\n  statsPeriod: string | undefined;\n  utc?: string | boolean | undefined;\n  environment: Readonly<string[]>;\n  yAxis: string | undefined;\n  display: string | undefined;\n  topEvents: string | undefined;\n  interval: string | undefined;\n  expired?: boolean;\n  createdBy: User | undefined;\n  additionalConditions: MutableSearch; // This allows views to always add additional conditins to the query to get specific data. It should not show up in the UI unless explicitly called.\n\n  constructor(props: {\n    additionalConditions: MutableSearch;\n    createdBy: User | undefined;\n    display: string | undefined;\n    end: string | undefined;\n    environment: Readonly<string[]>;\n    fields: Readonly<Field[]>;\n    id: string | undefined;\n    name: string | undefined;\n    project: Readonly<number[]>;\n    query: string;\n    sorts: Readonly<Sort[]>;\n    start: string | undefined;\n    statsPeriod: string | undefined;\n    team: Readonly<('myteams' | number)[]>;\n    topEvents: string | undefined;\n    yAxis: string | undefined;\n    expired?: boolean;\n    interval?: string;\n    utc?: string | boolean | undefined;\n  }) {\n    const fields: Field[] = Array.isArray(props.fields) ? props.fields : [];\n    let sorts: Sort[] = Array.isArray(props.sorts) ? props.sorts : [];\n    const team = Array.isArray(props.team) ? props.team : [];\n    const project = Array.isArray(props.project) ? props.project : [];\n    const environment = Array.isArray(props.environment) ? props.environment : [];\n\n    // only include sort keys that are included in the fields\n    let equations = 0;\n    const sortKeys = fields\n      .map(field => {\n        if (field.field && isEquation(field.field)) {\n          const sortKey = getSortKeyFromField(\n            {field: `equation[${equations}]`},\n            undefined\n          );\n          equations += 1;\n          return sortKey;\n        }\n        return getSortKeyFromField(field, undefined);\n      })\n      .filter((sortKey): sortKey is string => !!sortKey);\n\n    const sort = sorts.find(currentSort => sortKeys.includes(currentSort.field));\n    sorts = sort ? [sort] : [];\n\n    const id = props.id !== null && props.id !== void 0 ? String(props.id) : void 0;\n\n    this.id = id;\n    this.name = props.name;\n    this.fields = fields;\n    this.sorts = sorts;\n    this.query = typeof props.query === 'string' ? props.query : '';\n    this.team = team;\n    this.project = project;\n    this.start = props.start;\n    this.end = props.end;\n    this.statsPeriod = props.statsPeriod;\n    this.utc = props.utc;\n    this.environment = environment;\n    this.yAxis = props.yAxis;\n    this.display = props.display;\n    this.topEvents = props.topEvents;\n    this.interval = props.interval;\n    this.createdBy = props.createdBy;\n    this.expired = props.expired;\n    this.additionalConditions = props.additionalConditions\n      ? props.additionalConditions.copy()\n      : new MutableSearch([]);\n  }\n\n  static fromLocation(location: Location): EventView {\n    const {start, end, statsPeriod} = normalizeDateTimeParams(location.query);\n\n    return new EventView({\n      id: decodeScalar(location.query.id),\n      name: decodeScalar(location.query.name),\n      fields: decodeFields(location),\n      sorts: decodeSorts(location),\n      query: decodeQuery(location),\n      team: decodeTeams(location),\n      project: decodeProjects(location),\n      start: decodeScalar(start),\n      end: decodeScalar(end),\n      statsPeriod: decodeScalar(statsPeriod),\n      environment: collectQueryStringByKey(location.query, 'environment'),\n      yAxis: decodeScalar(location.query.yAxis),\n      display: decodeScalar(location.query.display),\n      topEvents: decodeScalar(location.query.topEvents),\n      interval: decodeScalar(location.query.interval),\n      createdBy: undefined,\n      additionalConditions: new MutableSearch([]),\n    });\n  }\n\n  static fromNewQueryWithLocation(newQuery: NewQuery, location: Location): EventView {\n    const query = location.query;\n\n    // apply global selection header values from location whenever possible\n    const environment: string[] =\n      Array.isArray(newQuery.environment) && newQuery.environment.length > 0\n        ? newQuery.environment\n        : collectQueryStringByKey(query, 'environment');\n\n    const project: number[] =\n      Array.isArray(newQuery.projects) && newQuery.projects.length > 0\n        ? newQuery.projects\n        : decodeProjects(location);\n\n    const saved: NewQuery = {\n      ...newQuery,\n\n      environment,\n      projects: project,\n\n      // datetime selection\n      start: newQuery.start || decodeScalar(query.start),\n      end: newQuery.end || decodeScalar(query.end),\n      range: newQuery.range || decodeScalar(query.statsPeriod),\n    };\n\n    return EventView.fromSavedQuery(saved);\n  }\n\n  static getFields(saved: NewQuery | SavedQuery) {\n    return saved.fields.map((field, i) => {\n      const width =\n        saved.widths && saved.widths[i] ? Number(saved.widths[i]) : COL_WIDTH_UNDEFINED;\n\n      return {field, width};\n    });\n  }\n\n  static fromSavedQuery(saved: NewQuery | SavedQuery): EventView {\n    const fields = EventView.getFields(saved);\n    // normalize datetime selection\n    const {start, end, statsPeriod, utc} = normalizeDateTimeParams({\n      start: saved.start,\n      end: saved.end,\n      statsPeriod: saved.range,\n      utc: saved.utc,\n    });\n\n    return new EventView({\n      id: saved.id,\n      name: saved.name,\n      fields,\n      query: queryStringFromSavedQuery(saved),\n      team: saved.teams ?? [],\n      project: saved.projects,\n      start: decodeScalar(start),\n      end: decodeScalar(end),\n      statsPeriod: decodeScalar(statsPeriod),\n      utc,\n      sorts: fromSorts(saved.orderby),\n      environment: collectQueryStringByKey(\n        {\n          environment: saved.environment as string[],\n        },\n        'environment'\n      ),\n      // Workaround to only use the first yAxis since eventView yAxis doesn't accept string[]\n      yAxis: Array.isArray(saved.yAxis) ? saved.yAxis[0] : saved.yAxis,\n      display: saved.display,\n      topEvents: saved.topEvents ? saved.topEvents.toString() : undefined,\n      createdBy: saved.createdBy,\n      expired: saved.expired,\n      additionalConditions: new MutableSearch([]),\n    });\n  }\n\n  static fromSavedQueryOrLocation(\n    saved: SavedQuery | undefined,\n    location: Location\n  ): EventView {\n    let fields = decodeFields(location);\n    const {start, end, statsPeriod, utc} = normalizeDateTimeParams(location.query);\n    const id = decodeScalar(location.query.id);\n    const teams = decodeTeams(location);\n    const projects = decodeProjects(location);\n    const sorts = decodeSorts(location);\n    const environments = collectQueryStringByKey(location.query, 'environment');\n\n    if (saved) {\n      if (fields.length === 0) {\n        fields = EventView.getFields(saved);\n      }\n      return new EventView({\n        id: id || saved.id,\n        name: decodeScalar(location.query.name) || saved.name,\n        fields,\n        query:\n          'query' in location.query\n            ? decodeQuery(location)\n            : queryStringFromSavedQuery(saved),\n        sorts: sorts.length === 0 ? fromSorts(saved.orderby) : sorts,\n        yAxis:\n          decodeScalar(location.query.yAxis) ||\n          // Workaround to only use the first yAxis since eventView yAxis doesn't accept string[]\n          (Array.isArray(saved.yAxis) ? saved.yAxis[0] : saved.yAxis),\n        display: decodeScalar(location.query.display) || saved.display,\n        topEvents: (\n          decodeScalar(location.query.topEvents) ||\n          saved.topEvents ||\n          TOP_N\n        ).toString(),\n        interval: decodeScalar(location.query.interval),\n        createdBy: saved.createdBy,\n        expired: saved.expired,\n        additionalConditions: new MutableSearch([]),\n        // Always read team from location since they can be set by other parts\n        // of the UI\n        team: teams,\n        // Always read project and environment from location since they can\n        // be set by the GlobalSelectionHeaders.\n        project: projects,\n        environment: environments,\n        start: decodeScalar(start),\n        end: decodeScalar(end),\n        statsPeriod: decodeScalar(statsPeriod),\n        utc,\n      });\n    }\n    return EventView.fromLocation(location);\n  }\n\n  isEqualTo(other: EventView): boolean {\n    const defaults = {\n      id: undefined,\n      name: undefined,\n      query: undefined,\n      statsPeriod: undefined,\n      fields: undefined,\n      sorts: undefined,\n      project: undefined,\n      environment: undefined,\n      yAxis: 'count()',\n      display: DisplayModes.DEFAULT,\n      topEvents: '5',\n    };\n    const keys = Object.keys(defaults);\n    for (const key of keys) {\n      const currentValue = this[key] ?? defaults[key];\n      const otherValue = other[key] ?? defaults[key];\n\n      if (!isEqual(currentValue, otherValue)) {\n        return false;\n      }\n    }\n\n    // compare datetime selections using moment\n\n    const dateTimeKeys = ['start', 'end'];\n\n    for (const key of dateTimeKeys) {\n      const currentValue = this[key];\n      const otherValue = other[key];\n\n      if (currentValue && otherValue) {\n        const currentDateTime = moment.utc(currentValue);\n        const othereDateTime = moment.utc(otherValue);\n\n        if (!currentDateTime.isSame(othereDateTime)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  toNewQuery(): NewQuery {\n    const orderby = this.sorts.length > 0 ? encodeSorts(this.sorts)[0] : undefined;\n\n    const newQuery: NewQuery = {\n      version: 2,\n      id: this.id,\n      name: this.name || '',\n      fields: this.getFields(),\n      widths: this.getWidths().map(w => String(w)),\n      orderby,\n      query: this.query || '',\n      projects: this.project,\n      start: this.start,\n      end: this.end,\n      range: this.statsPeriod,\n      environment: this.environment,\n      yAxis: this.yAxis ? [this.yAxis] : undefined,\n      display: this.display,\n      topEvents: this.topEvents,\n    };\n\n    if (!newQuery.query) {\n      // if query is an empty string, then it cannot be saved, so we omit it\n      // from the payload\n      delete newQuery.query;\n    }\n\n    return newQuery;\n  }\n\n  getPageFilters(): PageFilters {\n    return {\n      projects: this.project as number[],\n      environments: this.environment as string[],\n      datetime: {\n        start: this.start ?? null,\n        end: this.end ?? null,\n        period: this.statsPeriod ?? null,\n        // TODO(tony) Add support for the Use UTC option from the global\n        // headers, currently, that option is not supported and all times are\n        // assumed to be UTC\n        utc: true,\n      },\n    };\n  }\n\n  getPageFiltersQuery(): Query {\n    const {\n      environments: environment,\n      projects,\n      datetime: {start, end, period, utc},\n    } = this.getPageFilters();\n    return {\n      project: projects.map(proj => proj.toString()),\n      environment,\n      utc: utc ? 'true' : 'false',\n\n      // since these values are from `getGlobalSelection`\n      // we know they have type `string | null`\n      start: (start ?? undefined) as string | undefined,\n      end: (end ?? undefined) as string | undefined,\n\n      // we can't use the ?? operator here as we want to\n      // convert the empty string to undefined\n      statsPeriod: period ? period : undefined,\n    };\n  }\n\n  generateBlankQueryStringObject(): Query {\n    const output = {\n      id: undefined,\n      name: undefined,\n      field: undefined,\n      widths: undefined,\n      sort: undefined,\n      tag: undefined,\n      query: undefined,\n      yAxis: undefined,\n      display: undefined,\n      topEvents: undefined,\n      interval: undefined,\n    };\n\n    for (const field of EXTERNAL_QUERY_STRING_KEYS) {\n      output[field] = undefined;\n    }\n\n    return output;\n  }\n\n  generateQueryStringObject(): Query {\n    const output = {\n      id: this.id,\n      name: this.name,\n      field: this.getFields(),\n      widths: this.getWidths(),\n      sort: encodeSorts(this.sorts),\n      environment: this.environment,\n      project: this.project,\n      query: this.query,\n      yAxis: this.yAxis || this.getYAxis(),\n      display: this.display,\n      topEvents: this.topEvents,\n      interval: this.interval,\n    };\n\n    for (const field of EXTERNAL_QUERY_STRING_KEYS) {\n      if (this[field] && this[field].length) {\n        output[field] = this[field];\n      }\n    }\n\n    return cloneDeep(output as any);\n  }\n\n  isValid(): boolean {\n    return this.fields.length > 0;\n  }\n\n  getWidths(): number[] {\n    const result = this.fields.map(field =>\n      field.width ? field.width : COL_WIDTH_UNDEFINED\n    );\n\n    while (result.length > 0) {\n      const width = result[result.length - 1];\n      if (width === COL_WIDTH_UNDEFINED) {\n        result.pop();\n        continue;\n      }\n      break;\n    }\n\n    return result;\n  }\n\n  getFields(): string[] {\n    return this.fields.map(field => field.field);\n  }\n\n  getEquations(): string[] {\n    return this.fields\n      .filter(field => isEquation(field.field))\n      .map(field => getEquation(field.field));\n  }\n\n  getAggregateFields(): Field[] {\n    return this.fields.filter(\n      field => isAggregateField(field.field) || isAggregateEquation(field.field)\n    );\n  }\n\n  hasAggregateField() {\n    return this.fields.some(field => isAggregateField(field.field));\n  }\n\n  hasIdField() {\n    return this.fields.some(field => field.field === 'id');\n  }\n\n  numOfColumns(): number {\n    return this.fields.length;\n  }\n\n  getColumns(useFullEquationAsKey?: boolean): TableColumn<React.ReactText>[] {\n    return decodeColumnOrder(this.fields, useFullEquationAsKey);\n  }\n\n  getDays(): number {\n    const statsPeriod = decodeScalar(this.statsPeriod);\n    return statsPeriodToDays(statsPeriod, this.start, this.end);\n  }\n\n  clone(): EventView {\n    // NOTE: We rely on usage of Readonly from TypeScript to ensure we do not mutate\n    //       the attributes of EventView directly. This enables us to quickly\n    //       clone new instances of EventView.\n\n    return new EventView({\n      id: this.id,\n      name: this.name,\n      fields: this.fields,\n      sorts: this.sorts,\n      query: this.query,\n      team: this.team,\n      project: this.project,\n      start: this.start,\n      end: this.end,\n      statsPeriod: this.statsPeriod,\n      environment: this.environment,\n      yAxis: this.yAxis,\n      display: this.display,\n      topEvents: this.topEvents,\n      interval: this.interval,\n      expired: this.expired,\n      createdBy: this.createdBy,\n      additionalConditions: this.additionalConditions.copy(),\n    });\n  }\n\n  withSorts(sorts: Sort[]): EventView {\n    const newEventView = this.clone();\n    const fields = newEventView.fields.map(field => getAggregateAlias(field.field));\n    newEventView.sorts = sorts.filter(sort => fields.includes(sort.field));\n\n    return newEventView;\n  }\n\n  withColumns(columns: Column[]): EventView {\n    const newEventView = this.clone();\n    const fields: Field[] = columns\n      .filter(\n        col =>\n          ((col.kind === 'field' || col.kind === FieldValueKind.EQUATION) && col.field) ||\n          (col.kind === 'function' && col.function[0])\n      )\n      .map(col => generateFieldAsString(col))\n      .map((field, i) => {\n        // newly added field\n        if (!newEventView.fields[i]) {\n          return {field, width: COL_WIDTH_UNDEFINED};\n        }\n        // Existing columns that were not re ordered should retain\n        // their old widths.\n        const existing = newEventView.fields[i];\n        const width =\n          existing.field === field && existing.width !== undefined\n            ? existing.width\n            : COL_WIDTH_UNDEFINED;\n        return {field, width};\n      });\n    newEventView.fields = fields;\n\n    // Update sorts as sorted fields may have been removed.\n    if (newEventView.sorts) {\n      // Filter the sort fields down to those that are still selected.\n      const sortKeys = fields.map(field => fieldToSort(field, undefined)?.field);\n      const newSort = newEventView.sorts.filter(\n        sort => sort && sortKeys.includes(sort.field)\n      );\n      // If the sort field was removed, try and find a new sortable column.\n      if (newSort.length === 0) {\n        const sortField = fields.find(field => isFieldSortable(field, undefined));\n        if (sortField) {\n          newSort.push({field: sortField.field, kind: 'desc'});\n        }\n      }\n      newEventView.sorts = newSort;\n    }\n\n    newEventView.yAxis = newEventView.getYAxis();\n\n    return newEventView;\n  }\n\n  withNewColumn(newColumn: Column): EventView {\n    const fieldAsString = generateFieldAsString(newColumn);\n    const newField: Field = {\n      field: fieldAsString,\n      width: COL_WIDTH_UNDEFINED,\n    };\n    const newEventView = this.clone();\n    newEventView.fields = [...newEventView.fields, newField];\n\n    return newEventView;\n  }\n\n  withResizedColumn(columnIndex: number, newWidth: number) {\n    const field = this.fields[columnIndex];\n    const newEventView = this.clone();\n    if (!field) {\n      return newEventView;\n    }\n\n    const updateWidth = field.width !== newWidth;\n    if (updateWidth) {\n      const fields = [...newEventView.fields];\n      fields[columnIndex] = {\n        ...field,\n        width: newWidth,\n      };\n      newEventView.fields = fields;\n    }\n\n    return newEventView;\n  }\n\n  withUpdatedColumn(\n    columnIndex: number,\n    updatedColumn: Column,\n    tableMeta: MetaType | undefined\n  ): EventView {\n    const columnToBeUpdated = this.fields[columnIndex];\n    const fieldAsString = generateFieldAsString(updatedColumn);\n\n    const updateField = columnToBeUpdated.field !== fieldAsString;\n    if (!updateField) {\n      return this;\n    }\n\n    // ensure tableMeta is non-empty\n    tableMeta = validateTableMeta(tableMeta);\n\n    const newEventView = this.clone();\n\n    const updatedField: Field = {\n      field: fieldAsString,\n      width: COL_WIDTH_UNDEFINED,\n    };\n\n    const fields = [...newEventView.fields];\n    fields[columnIndex] = updatedField;\n\n    newEventView.fields = fields;\n\n    // if the updated column is one of the sorted columns, we may need to remove\n    // it from the list of sorts\n    const needleSortIndex = this.sorts.findIndex(sort =>\n      isSortEqualToField(sort, columnToBeUpdated, tableMeta)\n    );\n\n    if (needleSortIndex >= 0) {\n      const needleSort = this.sorts[needleSortIndex];\n\n      const numOfColumns = this.fields.reduce((sum, currentField) => {\n        if (isSortEqualToField(needleSort, currentField, tableMeta)) {\n          return sum + 1;\n        }\n\n        return sum;\n      }, 0);\n\n      // do not bother deleting the sort key if there are more than one columns\n      // of it in the table.\n      if (numOfColumns <= 1) {\n        if (isFieldSortable(updatedField, tableMeta)) {\n          // use the current updated field as the sort key\n          const sort = fieldToSort(updatedField, tableMeta)!;\n\n          // preserve the sort kind\n          sort.kind = needleSort.kind;\n\n          const sorts = [...newEventView.sorts];\n          sorts[needleSortIndex] = sort;\n          newEventView.sorts = sorts;\n        } else {\n          const sorts = [...newEventView.sorts];\n          sorts.splice(needleSortIndex, 1);\n          newEventView.sorts = [...new Set(sorts)];\n        }\n      }\n\n      if (newEventView.sorts.length <= 0 && newEventView.fields.length > 0) {\n        // establish a default sort by finding the first sortable field\n\n        if (isFieldSortable(updatedField, tableMeta)) {\n          // use the current updated field as the sort key\n          const sort = fieldToSort(updatedField, tableMeta)!;\n\n          // preserve the sort kind\n          sort.kind = needleSort.kind;\n\n          newEventView.sorts = [sort];\n        } else {\n          const sortableFieldIndex = newEventView.fields.findIndex(currentField =>\n            isFieldSortable(currentField, tableMeta)\n          );\n          if (sortableFieldIndex >= 0) {\n            const fieldToBeSorted = newEventView.fields[sortableFieldIndex];\n            const sort = fieldToSort(fieldToBeSorted, tableMeta)!;\n            newEventView.sorts = [sort];\n          }\n        }\n      }\n    }\n\n    newEventView.yAxis = newEventView.getYAxis();\n\n    return newEventView;\n  }\n\n  withDeletedColumn(columnIndex: number, tableMeta: MetaType | undefined): EventView {\n    // Disallow removal of the orphan column, and check for out-of-bounds\n    if (this.fields.length <= 1 || this.fields.length <= columnIndex || columnIndex < 0) {\n      return this;\n    }\n\n    // ensure tableMeta is non-empty\n    tableMeta = validateTableMeta(tableMeta);\n\n    // delete the column\n    const newEventView = this.clone();\n    const fields = [...newEventView.fields];\n    fields.splice(columnIndex, 1);\n    newEventView.fields = fields;\n\n    // Ensure there is at least one auto width column\n    // To ensure a well formed table results.\n    const hasAutoIndex = fields.find(field => field.width === COL_WIDTH_UNDEFINED);\n    if (!hasAutoIndex) {\n      newEventView.fields[0].width = COL_WIDTH_UNDEFINED;\n    }\n\n    // if the deleted column is one of the sorted columns, we need to remove\n    // it from the list of sorts\n    const columnToBeDeleted = this.fields[columnIndex];\n    const needleSortIndex = this.sorts.findIndex(sort =>\n      isSortEqualToField(sort, columnToBeDeleted, tableMeta)\n    );\n\n    if (needleSortIndex >= 0) {\n      const needleSort = this.sorts[needleSortIndex];\n\n      const numOfColumns = this.fields.reduce((sum, field) => {\n        if (isSortEqualToField(needleSort, field, tableMeta)) {\n          return sum + 1;\n        }\n\n        return sum;\n      }, 0);\n\n      // do not bother deleting the sort key if there are more than one columns\n      // of it in the table.\n      if (numOfColumns <= 1) {\n        const sorts = [...newEventView.sorts];\n        sorts.splice(needleSortIndex, 1);\n        newEventView.sorts = [...new Set(sorts)];\n\n        if (newEventView.sorts.length <= 0 && newEventView.fields.length > 0) {\n          // establish a default sort by finding the first sortable field\n          const sortableFieldIndex = newEventView.fields.findIndex(field =>\n            isFieldSortable(field, tableMeta)\n          );\n\n          if (sortableFieldIndex >= 0) {\n            const fieldToBeSorted = newEventView.fields[sortableFieldIndex];\n            const sort = fieldToSort(fieldToBeSorted, tableMeta)!;\n            newEventView.sorts = [sort];\n          }\n        }\n      }\n    }\n\n    newEventView.yAxis = newEventView.getYAxis();\n\n    return newEventView;\n  }\n\n  withTeams(teams: ('myteams' | number)[]): EventView {\n    const newEventView = this.clone();\n    newEventView.team = teams;\n    return newEventView;\n  }\n\n  getSorts(): TableColumnSort<React.ReactText>[] {\n    return this.sorts.map(\n      sort =>\n        ({\n          key: sort.field,\n          order: sort.kind,\n        } as TableColumnSort<string>)\n    );\n  }\n\n  // returns query input for the search\n  getQuery(inputQuery: string | string[] | null | undefined): string {\n    const queryParts: string[] = [];\n\n    if (this.query) {\n      if (this.additionalConditions) {\n        queryParts.push(this.getQueryWithAdditionalConditions());\n      } else {\n        queryParts.push(this.query);\n      }\n    }\n\n    if (inputQuery) {\n      // there may be duplicate query in the query string\n      // e.g. query=hello&query=world\n      if (Array.isArray(inputQuery)) {\n        inputQuery.forEach(query => {\n          if (typeof query === 'string' && !queryParts.includes(query)) {\n            queryParts.push(query);\n          }\n        });\n      }\n\n      if (typeof inputQuery === 'string' && !queryParts.includes(inputQuery)) {\n        queryParts.push(inputQuery);\n      }\n    }\n\n    return queryParts.join(' ');\n  }\n\n  getFacetsAPIPayload(\n    location: Location\n  ): Exclude<EventQuery & LocationQuery, 'sort' | 'cursor'> {\n    const payload = this.getEventsAPIPayload(location);\n\n    const remove = [\n      'id',\n      'name',\n      'per_page',\n      'sort',\n      'cursor',\n      'field',\n      'equation',\n      'interval',\n    ];\n    for (const key of remove) {\n      delete payload[key];\n    }\n\n    return payload;\n  }\n\n  normalizeDateSelection(location: Location) {\n    const query = (location && location.query) || {};\n\n    // pick only the query strings that we care about\n    const picked = pickRelevantLocationQueryStrings(location);\n\n    const hasDateSelection = this.statsPeriod || (this.start && this.end);\n\n    // an eventview's date selection has higher precedence than the date selection in the query string\n    const dateSelection = hasDateSelection\n      ? {\n          start: this.start,\n          end: this.end,\n          statsPeriod: this.statsPeriod,\n        }\n      : {\n          start: picked.start,\n          end: picked.end,\n          period: decodeScalar(query.period),\n          statsPeriod: picked.statsPeriod,\n        };\n\n    // normalize datetime selection\n    return normalizeDateTimeParams({\n      ...dateSelection,\n      utc: decodeScalar(query.utc),\n    });\n  }\n\n  // Takes an EventView instance and converts it into the format required for the events API\n  getEventsAPIPayload(location: Location): EventQuery & LocationQuery {\n    // pick only the query strings that we care about\n    const picked = pickRelevantLocationQueryStrings(location);\n\n    // normalize datetime selection\n    const normalizedTimeWindowParams = this.normalizeDateSelection(location);\n\n    const sort =\n      this.sorts.length <= 0\n        ? undefined\n        : this.sorts.length > 1\n        ? encodeSorts(this.sorts)\n        : encodeSort(this.sorts[0]);\n    const fields = this.getFields();\n    const team = this.team.map(proj => String(proj));\n    const project = this.project.map(proj => String(proj));\n    const environment = this.environment as string[];\n\n    // generate event query\n    const eventQuery = Object.assign(\n      omit(picked, DATETIME_QUERY_STRING_KEYS),\n      normalizedTimeWindowParams,\n      {\n        team,\n        project,\n        environment,\n        field: [...new Set(fields)],\n        sort,\n        per_page: DEFAULT_PER_PAGE,\n        query: this.getQueryWithAdditionalConditions(),\n      }\n    ) as EventQuery & LocationQuery;\n\n    if (eventQuery.team && !eventQuery.team.length) {\n      delete eventQuery.team;\n    }\n\n    if (!eventQuery.sort) {\n      delete eventQuery.sort;\n    }\n\n    return eventQuery;\n  }\n\n  getResultsViewUrlTarget(slug: string): {pathname: string; query: Query} {\n    return {\n      pathname: `/organizations/${slug}/discover/results/`,\n      query: this.generateQueryStringObject(),\n    };\n  }\n\n  getResultsViewShortUrlTarget(slug: string): {pathname: string; query: Query} {\n    const output = {id: this.id};\n    for (const field of [...Object.values(URL_PARAM), 'cursor']) {\n      if (this[field] && this[field].length) {\n        output[field] = this[field];\n      }\n    }\n    return {\n      pathname: `/organizations/${slug}/discover/results/`,\n      query: cloneDeep(output as any),\n    };\n  }\n\n  getPerformanceTransactionEventsViewUrlTarget(\n    slug: string,\n    options: {\n      breakdown?: SpanOperationBreakdownFilter;\n      showTransactions?: EventsDisplayFilterName;\n      webVital?: WebVital;\n    }\n  ): {pathname: string; query: Query} {\n    const {showTransactions, breakdown, webVital} = options;\n    const output = {\n      sort: encodeSorts(this.sorts),\n      project: this.project,\n      query: this.query,\n      transaction: this.name,\n      showTransactions,\n      breakdown,\n      webVital,\n    };\n\n    for (const field of EXTERNAL_QUERY_STRING_KEYS) {\n      if (this[field] && this[field].length) {\n        output[field] = this[field];\n      }\n    }\n\n    const query = cloneDeep(output as any);\n    return {\n      pathname: `/organizations/${slug}/performance/summary/events/`,\n      query,\n    };\n  }\n\n  sortForField(field: Field, tableMeta: MetaType | undefined): Sort | undefined {\n    if (!tableMeta) {\n      return undefined;\n    }\n    return this.sorts.find(sort => isSortEqualToField(sort, field, tableMeta));\n  }\n\n  sortOnField(\n    field: Field,\n    tableMeta: MetaType,\n    kind?: 'desc' | 'asc',\n    useFunctionFormat?: boolean\n  ): EventView {\n    // check if field can be sorted\n    if (!isFieldSortable(field, tableMeta)) {\n      return this;\n    }\n\n    const needleIndex = this.sorts.findIndex(sort =>\n      isSortEqualToField(sort, field, tableMeta)\n    );\n\n    if (needleIndex >= 0) {\n      const newEventView = this.clone();\n\n      const currentSort = this.sorts[needleIndex];\n\n      const sorts = [...newEventView.sorts];\n      sorts[needleIndex] = kind\n        ? setSortOrder(\n            {...currentSort, ...(useFunctionFormat ? {field: field.field} : {})},\n            kind\n          )\n        : reverseSort({\n            ...currentSort,\n            ...(useFunctionFormat ? {field: field.field} : {}),\n          });\n\n      newEventView.sorts = sorts;\n\n      return newEventView;\n    }\n\n    // field is currently not sorted; so, we sort on it\n    const newEventView = this.clone();\n\n    // invariant: this is not falsey, since sortKey exists\n    const sort = fieldToSort(field, tableMeta, kind, useFunctionFormat)!;\n\n    newEventView.sorts = [sort];\n\n    return newEventView;\n  }\n\n  getYAxisOptions(): SelectValue<string>[] {\n    // Make option set and add the default options in.\n    return uniqBy(\n      this.getAggregateFields()\n        // Only include aggregates that make sense to be graphable (eg. not string or date)\n        .filter(\n          (field: Field) =>\n            isLegalYAxisType(aggregateOutputType(field.field)) ||\n            isAggregateEquation(field.field)\n        )\n        .map((field: Field) => ({\n          label: isEquation(field.field) ? getEquation(field.field) : field.field,\n          value: field.field,\n        }))\n        .concat(CHART_AXIS_OPTIONS),\n      'value'\n    );\n  }\n\n  getYAxis(): string {\n    const yAxisOptions = this.getYAxisOptions();\n\n    const yAxis = this.yAxis;\n    const defaultOption = yAxisOptions[0].value;\n\n    if (!yAxis) {\n      return defaultOption;\n    }\n\n    // ensure current selected yAxis is one of the items in yAxisOptions\n    const result = yAxisOptions.findIndex(\n      (option: SelectValue<string>) => option.value === yAxis\n    );\n\n    if (result >= 0) {\n      return yAxis;\n    }\n\n    return defaultOption;\n  }\n\n  getDisplayOptions(): SelectValue<string>[] {\n    return DISPLAY_MODE_OPTIONS.map(item => {\n      if (item.value === DisplayModes.PREVIOUS) {\n        if (this.start || this.end) {\n          return {...item, disabled: true};\n        }\n      }\n\n      if (item.value === DisplayModes.TOP5 || item.value === DisplayModes.DAILYTOP5) {\n        if (this.getAggregateFields().length === 0) {\n          return {\n            ...item,\n            disabled: true,\n            tooltip: t('Add a function that groups events to use this view.'),\n          };\n        }\n      }\n\n      if (item.value === DisplayModes.DAILY || item.value === DisplayModes.DAILYTOP5) {\n        if (this.getDays() < 1) {\n          return {\n            ...item,\n            disabled: true,\n            tooltip: t('Change the date rage to at least 1 day to use this view.'),\n          };\n        }\n      }\n\n      return item;\n    });\n  }\n\n  getDisplayMode() {\n    const mode = this.display ?? DisplayModes.DEFAULT;\n    const displayOptions = this.getDisplayOptions();\n\n    let display = (Object.values(DisplayModes) as string[]).includes(mode)\n      ? mode\n      : DisplayModes.DEFAULT;\n    const cond = option => option.value === display;\n\n    // Just in case we define a fallback chain that results in an infinite loop.\n    // The number 5 isn't anything special, its just larger than the longest fallback\n    // chain that exists and isn't too big.\n    for (let i = 0; i < 5; i++) {\n      const selectedOption = displayOptions.find(cond);\n      if (selectedOption && !selectedOption.disabled) {\n        return display;\n      }\n      display = DISPLAY_MODE_FALLBACK_OPTIONS[display];\n    }\n\n    // after trying to find an enabled display mode and failing to find one,\n    // we just use the default display mode\n    return DisplayModes.DEFAULT;\n  }\n\n  getQueryWithAdditionalConditions() {\n    const {query} = this;\n    if (this.additionalConditions.isEmpty()) {\n      return query;\n    }\n    const conditions = new MutableSearch(query);\n    Object.entries(this.additionalConditions.filters).forEach(([tag, tagValues]) => {\n      const existingTagValues = conditions.getFilterValues(tag);\n      const newTagValues = tagValues.filter(\n        tagValue => !existingTagValues.includes(tagValue)\n      );\n      if (newTagValues.length) {\n        conditions.addFilterValues(tag, newTagValues);\n      }\n    });\n    return conditions.formatString();\n  }\n}\n\nexport type ImmutableEventView = Readonly<Omit<EventView, 'additionalConditions'>>;\n\nconst isFieldsSimilar = (\n  currentValue: Array<string>,\n  otherValue: Array<string>\n): boolean => {\n  // For equation's their order matters because we alias them based on index\n  const currentEquations = currentValue.filter(isEquation);\n  const otherEquations = otherValue.filter(isEquation);\n\n  // Field orders don't matter, so using a set for comparison\n  const currentFields = new Set(currentValue.filter(value => !isEquation(value)));\n  const otherFields = new Set(otherValue.filter(value => !isEquation(value)));\n\n  if (!isEqual(currentEquations, otherEquations)) {\n    return false;\n  }\n  if (!isEqual(currentFields, otherFields)) {\n    return false;\n  }\n  return true;\n};\n\nexport const isAPIPayloadSimilar = (\n  current: EventQuery & LocationQuery,\n  other: EventQuery & LocationQuery\n): boolean => {\n  const currentKeys = new Set(Object.keys(current));\n  const otherKeys = new Set(Object.keys(other));\n\n  if (!isEqual(currentKeys, otherKeys)) {\n    return false;\n  }\n\n  for (const key of currentKeys) {\n    const currentValue = current[key];\n    const otherValue = other[key];\n    if (key === 'field') {\n      if (!isFieldsSimilar(currentValue, otherValue)) {\n        return false;\n      }\n    } else {\n      const currentTarget = Array.isArray(currentValue)\n        ? new Set(currentValue)\n        : currentValue;\n\n      const otherTarget = Array.isArray(otherValue) ? new Set(otherValue) : otherValue;\n\n      if (!isEqual(currentTarget, otherTarget)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nexport function pickRelevantLocationQueryStrings(location: Location) {\n  const query = location.query || {};\n  const picked = pick(query || {}, EXTERNAL_QUERY_STRING_KEYS);\n\n  return picked;\n}\n\nexport default EventView;\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nexport const TOP_N = 5;\n\nexport enum DisplayModes {\n  DEFAULT = 'default',\n  PREVIOUS = 'previous',\n  TOP5 = 'top5',\n  DAILY = 'daily',\n  DAILYTOP5 = 'dailytop5',\n  WORLDMAP = 'worldmap',\n  BAR = 'bar',\n}\n\nexport const TOP_EVENT_MODES: string[] = [DisplayModes.TOP5, DisplayModes.DAILYTOP5];\n\nexport const DISPLAY_MODE_OPTIONS: SelectValue<string>[] = [\n  {value: DisplayModes.DEFAULT, label: t('Total Period')},\n  {value: DisplayModes.PREVIOUS, label: t('Previous Period')},\n  {value: DisplayModes.TOP5, label: t('Top 5 Period')},\n  {value: DisplayModes.DAILY, label: t('Total Daily')},\n  {value: DisplayModes.DAILYTOP5, label: t('Top 5 Daily')},\n  {value: DisplayModes.WORLDMAP, label: t('World Map')},\n  {value: DisplayModes.BAR, label: t('Bar Chart')},\n];\n\n/**\n * The chain of fallback display modes to try to use when one is disabled.\n *\n * Make sure that the chain always leads to a display mode that is enabled.\n * There is a fail safe to fall back to the default display mode, but it likely\n * won't be creating results you expect.\n */\nexport const DISPLAY_MODE_FALLBACK_OPTIONS = {\n  [DisplayModes.DEFAULT]: DisplayModes.DEFAULT,\n  [DisplayModes.PREVIOUS]: DisplayModes.DEFAULT,\n  [DisplayModes.TOP5]: DisplayModes.DEFAULT,\n  [DisplayModes.DAILY]: DisplayModes.DEFAULT,\n  [DisplayModes.DAILYTOP5]: DisplayModes.DAILY,\n  [DisplayModes.WORLDMAP]: DisplayModes.DEFAULT,\n  [DisplayModes.BAR]: DisplayModes.DEFAULT,\n};\n\n// default list of yAxis options\nexport const CHART_AXIS_OPTIONS = [\n  {label: 'count()', value: 'count()'},\n  {label: 'count_unique(user)', value: 'count_unique(user)'},\n];\n\nexport const MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES = [\n  DisplayModes.DEFAULT,\n  DisplayModes.DAILY,\n  DisplayModes.PREVIOUS,\n  DisplayModes.BAR,\n];\n","import {\n  BaseGroup,\n  EventMetadata,\n  EventOrGroupType,\n  GroupTombstone,\n  TreeLabelPart,\n} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport {isMobilePlatform, isNativePlatform} from 'sentry/utils/platform';\n\nfunction isTombstone(maybe: BaseGroup | Event | GroupTombstone): maybe is GroupTombstone {\n  return !maybe.hasOwnProperty('type');\n}\n\n/**\n * Extract the display message from an event.\n */\nexport function getMessage(\n  event: Event | BaseGroup | GroupTombstone\n): string | undefined {\n  if (isTombstone(event)) {\n    return event.culprit || '';\n  }\n\n  const {metadata, type, culprit} = event;\n\n  switch (type) {\n    case EventOrGroupType.ERROR:\n      return metadata.value;\n    case EventOrGroupType.CSP:\n      return metadata.message;\n    case EventOrGroupType.EXPECTCT:\n    case EventOrGroupType.EXPECTSTAPLE:\n    case EventOrGroupType.HPKP:\n      return '';\n    default:\n      return culprit || '';\n  }\n}\n\n/**\n * Get the location from an event.\n */\nexport function getLocation(event: Event | BaseGroup | GroupTombstone) {\n  if (isTombstone(event)) {\n    return undefined;\n  }\n\n  if (event.type === EventOrGroupType.ERROR && isNativePlatform(event.platform)) {\n    return event.metadata.filename || undefined;\n  }\n\n  return undefined;\n}\n\nexport function getTreeLabelPartDetails(part: TreeLabelPart) {\n  // Note: This function also exists in Python in eventtypes/base.py, to make\n  // porting efforts simpler it's recommended to keep both variants\n  // structurally similar.\n  if (typeof part === 'string') {\n    return part;\n  }\n\n  const label = part?.function || part?.package || part?.filebase || part?.type;\n  const classbase = part?.classbase;\n\n  if (classbase) {\n    return label ? `${classbase}.${label}` : classbase;\n  }\n\n  return label || '<unknown>';\n}\n\nfunction computeTitleWithTreeLabel(metadata: EventMetadata) {\n  const {type, current_tree_label, finest_tree_label} = metadata;\n\n  const treeLabel = current_tree_label || finest_tree_label;\n\n  const formattedTreeLabel = treeLabel\n    ? treeLabel.map(labelPart => getTreeLabelPartDetails(labelPart)).join(' | ')\n    : undefined;\n\n  if (!type) {\n    return {\n      title: formattedTreeLabel || metadata.function || '<unknown>',\n      treeLabel,\n    };\n  }\n\n  if (!formattedTreeLabel) {\n    return {title: type, treeLabel: undefined};\n  }\n\n  return {\n    title: `${type} | ${formattedTreeLabel}`,\n    treeLabel: [{type}, ...(treeLabel ?? [])],\n  };\n}\n\nexport function getTitle(\n  event: Event | BaseGroup,\n  features: string[] = [],\n  grouping = false\n) {\n  const {metadata, type, culprit} = event;\n\n  const customTitle =\n    features.includes('custom-event-title') && metadata?.title\n      ? metadata.title\n      : undefined;\n\n  switch (type) {\n    case EventOrGroupType.ERROR: {\n      if (customTitle) {\n        return {\n          title: customTitle,\n          subtitle: culprit,\n          treeLabel: undefined,\n        };\n      }\n\n      const displayTitleWithTreeLabel =\n        features.includes('grouping-title-ui') &&\n        (grouping ||\n          isNativePlatform(event.platform) ||\n          isMobilePlatform(event.platform));\n\n      if (displayTitleWithTreeLabel) {\n        return {\n          subtitle: culprit,\n          ...computeTitleWithTreeLabel(metadata),\n        };\n      }\n\n      return {\n        subtitle: culprit,\n        title: metadata.type || metadata.function || '<unknown>',\n        treeLabel: undefined,\n      };\n    }\n    case EventOrGroupType.CSP:\n      return {\n        title: customTitle ?? metadata.directive ?? '',\n        subtitle: metadata.uri ?? '',\n        treeLabel: undefined,\n      };\n    case EventOrGroupType.EXPECTCT:\n    case EventOrGroupType.EXPECTSTAPLE:\n    case EventOrGroupType.HPKP:\n      // Due to a regression some reports did not have message persisted\n      // (https://github.com/getsentry/sentry/pull/19794) so we need to fall\n      // back to the computed title for these.\n      return {\n        title: customTitle ?? (metadata.message || event.title),\n        subtitle: metadata.origin ?? '',\n        treeLabel: undefined,\n      };\n    case EventOrGroupType.DEFAULT:\n      return {\n        title: customTitle ?? metadata.title ?? '',\n        subtitle: '',\n        treeLabel: undefined,\n      };\n    default:\n      return {\n        title: customTitle ?? event.title,\n        subtitle: '',\n        treeLabel: undefined,\n      };\n  }\n}\n\n/**\n * Returns a short eventId with only 8 characters\n */\nexport function getShortEventId(eventId: string) {\n  return eventId.substring(0, 8);\n}\n","import {mobile} from 'sentry/data/platformCategories';\n\nexport function isNativePlatform(platform: string | undefined) {\n  switch (platform) {\n    case 'cocoa':\n    case 'objc':\n    case 'native':\n    case 'swift':\n    case 'c':\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport function isMobilePlatform(platform: string | undefined) {\n  if (!platform) {\n    return false;\n  }\n\n  return ([...mobile] as string[]).includes(platform);\n}\n","import {Layout} from 'react-grid-layout';\n\nimport {User} from 'sentry/types';\n\n// Max widgets per dashboard we are currently willing\n// to allow to limit the load on snuba from the\n// parallel requests. Somewhat arbitrary\n// limit that can be changed if necessary.\nexport const MAX_WIDGETS = 30;\n\nexport const DEFAULT_TABLE_LIMIT = 5;\n\nexport enum DisplayType {\n  AREA = 'area',\n  BAR = 'bar',\n  LINE = 'line',\n  TABLE = 'table',\n  WORLD_MAP = 'world_map',\n  BIG_NUMBER = 'big_number',\n  TOP_N = 'top_n',\n}\n\nexport enum WidgetType {\n  DISCOVER = 'discover',\n  ISSUE = 'issue',\n  RELEASE = 'metrics', // TODO(dashboards): Rename this on backend and then change here\n}\n\nexport type WidgetQuery = {\n  aggregates: string[];\n  columns: string[];\n  conditions: string;\n  name: string;\n  orderby: string;\n  // Table column alias.\n  // We may want to have alias for y-axis in the future too\n  fieldAliases?: string[];\n  // Fields is replaced with aggregates + columns. It\n  // is currently used to track column order on table\n  // widgets.\n  fields?: string[];\n};\n\nexport type Widget = {\n  displayType: DisplayType;\n  interval: string;\n  queries: WidgetQuery[];\n  title: string;\n  id?: string;\n  layout?: WidgetLayout | null;\n  // Used to define 'topEvents' when fetching time-series data for a widget\n  limit?: number;\n  tempId?: string;\n  widgetType?: WidgetType;\n};\n\n// We store an explicit set of keys in the backend now\nexport type WidgetLayout = Pick<Layout, 'h' | 'w' | 'x' | 'y'> & {\n  minH: number;\n};\n\nexport type WidgetPreview = {\n  displayType: DisplayType;\n  layout: WidgetLayout | null;\n};\n\n/**\n * The response shape from dashboard list endpoint\n */\nexport type DashboardListItem = {\n  id: string;\n  title: string;\n  widgetDisplay: DisplayType[];\n  widgetPreview: WidgetPreview[];\n  createdBy?: User;\n  dateCreated?: string;\n};\n\n/**\n * Saved dashboard with widgets\n */\nexport type DashboardDetails = {\n  dateCreated: string;\n  id: string;\n  title: string;\n  widgets: Widget[];\n  createdBy?: User;\n};\n\nexport enum DashboardState {\n  VIEW = 'view',\n  EDIT = 'edit',\n  CREATE = 'create',\n  PENDING_DELETE = 'pending_delete',\n  PREVIEW = 'preview',\n}\n\n// where we launch the dashboard widget from\nexport enum DashboardWidgetSource {\n  DISCOVERV2 = 'discoverv2',\n  DASHBOARDS = 'dashboards',\n  LIBRARY = 'library',\n  ISSUE_DETAILS = 'issueDetail',\n}\n","import {t} from 'sentry/locale';\nimport {NewQuery} from 'sentry/types';\n\nexport const DEFAULT_EVENT_VIEW: Readonly<NewQuery> = {\n  id: undefined,\n  name: t('All Events'),\n  query: '',\n  projects: [],\n  fields: ['title', 'event.type', 'project', 'user.display', 'timestamp'],\n  orderby: '-timestamp',\n  version: 2,\n  range: '24h',\n};\n\nexport const TRANSACTION_VIEWS: Readonly<Array<NewQuery>> = [\n  {\n    id: undefined,\n    name: t('Transactions by Volume'),\n    fields: [\n      'transaction',\n      'project',\n      'count()',\n      'avg(transaction.duration)',\n      'p75()',\n      'p95()',\n    ],\n    orderby: '-count',\n    query: 'event.type:transaction',\n    projects: [],\n    version: 2,\n    range: '24h',\n  },\n];\n\nexport const WEB_VITALS_VIEWS: Readonly<Array<NewQuery>> = [\n  {\n    id: undefined,\n    name: t('Web Vitals'),\n    fields: [\n      'transaction',\n      'epm()',\n      'p75(measurements.fp)',\n      'p75(measurements.fcp)',\n      'p75(measurements.lcp)',\n      'p75(measurements.fid)',\n      'p75(measurements.cls)',\n    ],\n    orderby: '-epm',\n    query: 'event.type:transaction transaction.op:pageload',\n    projects: [],\n    version: 2,\n    range: '24h',\n    yAxis: ['epm()'],\n  },\n];\n\nexport const ALL_VIEWS: Readonly<Array<NewQuery>> = [\n  DEFAULT_EVENT_VIEW,\n  {\n    id: undefined,\n    name: t('Errors by Title'),\n    fields: ['title', 'count()', 'count_unique(user)', 'project'],\n    orderby: '-count',\n    query: 'event.type:error',\n    projects: [],\n    version: 2,\n    range: '24h',\n    display: 'top5',\n  },\n  {\n    id: undefined,\n    name: t('Errors by URL'),\n    fields: ['url', 'count()', 'count_unique(issue)'],\n    orderby: '-count',\n    query: 'event.type:error has:url',\n    projects: [],\n    version: 2,\n    range: '24h',\n    display: 'top5',\n  },\n];\n","import {\n  createSavedQuery,\n  deleteSavedQuery,\n  updateSavedQuery,\n} from 'sentry/actionCreators/discoverSavedQueries';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {NewQuery, Organization, SavedQuery} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {DisplayModes} from 'sentry/utils/discover/types';\nimport {DisplayType} from 'sentry/views/dashboardsV2/types';\n\nexport function handleCreateQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView,\n  yAxis: string[],\n  // True if this is a brand new query being saved\n  // False if this is a modification from a saved query\n  isNewQuery: boolean = true\n): Promise<SavedQuery> {\n  const payload = eventView.toNewQuery();\n  payload.yAxis = yAxis;\n\n  trackAnalyticsEvent({\n    ...getAnalyticsCreateEventKeyName(isNewQuery, 'request'),\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = createSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then((savedQuery: SavedQuery) => {\n      addSuccessMessage(t('Query saved'));\n\n      trackAnalyticsEvent({\n        ...getAnalyticsCreateEventKeyName(isNewQuery, 'success'),\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n\n      return savedQuery;\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not saved'));\n\n      trackAnalyticsEvent({\n        ...getAnalyticsCreateEventKeyName(isNewQuery, 'failed'),\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error:\n          (err && err.message) ||\n          `Could not save a ${isNewQuery ? 'new' : 'existing'} query`,\n      });\n    });\n\n  return promise;\n}\n\nconst EVENT_NAME_EXISTING_MAP = {\n  request: 'Discoverv2: Request to save a saved query as a new query',\n  success: 'Discoverv2: Successfully saved a saved query as a new query',\n  failed: 'Discoverv2: Failed to save a saved query as a new query',\n};\nconst EVENT_NAME_NEW_MAP = {\n  request: 'Discoverv2: Request to save a new query',\n  success: 'Discoverv2: Successfully saved a new query',\n  failed: 'Discoverv2: Failed to save a new query',\n};\n\nexport function handleUpdateQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView,\n  yAxis: string[]\n): Promise<SavedQuery> {\n  const payload = eventView.toNewQuery();\n  payload.yAxis = yAxis;\n\n  if (!eventView.name) {\n    addErrorMessage(t('Please name your query'));\n    return Promise.reject();\n  }\n\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.update_query_request',\n    eventName: 'Discoverv2: Request to update a saved query',\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = updateSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then((savedQuery: SavedQuery) => {\n      addSuccessMessage(t('Query updated'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_success',\n        eventName: 'Discoverv2: Successfully updated a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n      // NOTE: there is no need to convert _saved into an EventView and push it\n      //       to the browser history, since this.props.eventView already\n      //       derives from location.\n\n      return savedQuery;\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not updated'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_failed',\n        eventName: 'Discoverv2: Failed to update a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error: (err && err.message) || 'Failed to update a query',\n      });\n    });\n\n  return promise;\n}\n\n/**\n * Essentially the same as handleUpdateQuery, but specifically for changing the\n * name of the query\n */\nexport function handleUpdateQueryName(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n) {\n  const payload = eventView.toNewQuery();\n\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.update_query_name_request',\n    eventName: \"Discoverv2: Request to update a saved query's name\",\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(payload),\n  });\n\n  const promise = updateSavedQuery(api, organization.slug, payload);\n\n  promise\n    .then(_saved => {\n      addSuccessMessage(t('Query name saved'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_name_success',\n        eventName: \"Discoverv2: Successfully updated a saved query's name\",\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n      });\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query name not saved'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.update_query_failed',\n        eventName: \"Discoverv2: Failed to update a saved query's name\",\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(payload),\n        error: (err && err.message) || 'Failed to update a query name',\n      });\n    });\n\n  return promise;\n}\n\nexport function handleDeleteQuery(\n  api: Client,\n  organization: Organization,\n  eventView: EventView\n): Promise<void> {\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.delete_query_request',\n    eventName: 'Discoverv2: Request to delete a saved query',\n    organization_id: parseInt(organization.id, 10),\n    ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n  });\n\n  const promise = deleteSavedQuery(api, organization.slug, eventView.id!);\n\n  promise\n    .then(() => {\n      addSuccessMessage(t('Query deleted'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.delete_query_success',\n        eventName: 'Discoverv2: Successfully deleted a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n      });\n    })\n    .catch((err: Error) => {\n      addErrorMessage(t('Query not deleted'));\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.delete_query_failed',\n        eventName: 'Discoverv2: Failed to delete a saved query',\n        organization_id: parseInt(organization.id, 10),\n        ...extractAnalyticsQueryFields(eventView.toNewQuery()),\n        error: (err && err.message) || 'Failed to delete query',\n      });\n    });\n\n  return promise;\n}\n\nexport function getAnalyticsCreateEventKeyName(\n  // True if this is a brand new query being saved\n  // False if this is a modification from a saved query\n  isNewQuery: boolean,\n  type: 'request' | 'success' | 'failed'\n) {\n  const eventKey = isNewQuery\n    ? 'discover_v2.save_new_query_' + type\n    : 'discover_v2.save_existing_query_' + type;\n\n  const eventName = isNewQuery ? EVENT_NAME_NEW_MAP[type] : EVENT_NAME_EXISTING_MAP[type];\n\n  return {\n    eventKey,\n    eventName,\n  };\n}\n\n/**\n * Takes in a DiscoverV2 NewQuery object and returns a Partial containing\n * the desired fields to populate into reload analytics\n */\nexport function extractAnalyticsQueryFields(payload: NewQuery): Partial<NewQuery> {\n  const {projects, fields, query} = payload;\n  return {\n    projects,\n    fields,\n    query,\n  };\n}\n\nexport function displayModeToDisplayType(displayMode: DisplayModes): DisplayType {\n  switch (displayMode) {\n    case DisplayModes.BAR:\n      return DisplayType.BAR;\n    case DisplayModes.WORLDMAP:\n      return DisplayType.WORLD_MAP;\n    case DisplayModes.TOP5:\n      return DisplayType.TOP_N;\n    default:\n      return DisplayType.LINE;\n  }\n}\n"],"names":["fetchSavedQuery","api","orgId","queryId","promise","requestPromise","method","catch","addErrorMessage","t","createSavedQuery","query","data","updateSavedQuery","id","updateSavedQueryVisit","Client","deleteSavedQuery","getDefaultSelection","projects","environments","datetime","start","end","period","DEFAULT_STATS_PERIOD","utc","extractSelectionParameters","pickBy","pick","Object","values","URL_PARAM","identity","isSelectionEqual","selection","other","isEqual","toString","allEventMap","growthEventMap","issueEventMap","performanceEventMap","dashboardsEventMap","discoverEventMap","workflowEventMap","searchEventMap","settingsEventMap","coreUIEventMap","samplingEventMap","makeAnalyticsFunction","DATETIME_QUERY_STRING_KEYS","EXTERNAL_QUERY_STRING_KEYS","isSortEqualToField","sort","field","tableMeta","sortKey","getSortKeyFromField","fieldToSort","kind","useFunctionFormat","fieldString","getAggregateAlias","getSortField","isFieldSortable","decodeFields","location","fields","decodeList","widths","parsed","forEach","i","w","Number","width","isNaN","COL_WIDTH_UNDEFINED","push","fromSorts","sorts","undefined","isString","Set","reduce","acc","trim","startsWith","substring","parseSort","decodeSorts","encodeSort","String","Error","encodeSorts","map","collectQueryStringByKey","key","needle","item","length","decodeQuery","queryParameter","decodeScalar","decodeTeam","value","parseInt","decodeTeams","team","Array","isArray","filter","decodeProjects","project","queryStringFromSavedQuery","saved","validateTableMeta","keys","EventView","constructor","props","environment","equations","sortKeys","isEquation","find","currentSort","includes","this","name","statsPeriod","yAxis","display","topEvents","interval","createdBy","expired","additionalConditions","copy","MutableSearch","normalizeDateTimeParams","newQuery","range","fromSavedQuery","getFields","teams","orderby","TOP_N","fromLocation","isEqualTo","defaults","DisplayModes","currentValue","otherValue","dateTimeKeys","currentDateTime","moment","othereDateTime","isSame","toNewQuery","version","getWidths","getPageFilters","getPageFiltersQuery","proj","generateBlankQueryStringObject","output","tag","generateQueryStringObject","getYAxis","cloneDeep","isValid","result","pop","getEquations","getEquation","getAggregateFields","isAggregateField","isAggregateEquation","hasAggregateField","some","hasIdField","numOfColumns","getColumns","useFullEquationAsKey","decodeColumnOrder","getDays","statsPeriodToDays","clone","withSorts","newEventView","withColumns","columns","col","FieldValueKind","function","generateFieldAsString","existing","newSort","sortField","withNewColumn","newColumn","newField","withResizedColumn","columnIndex","newWidth","withUpdatedColumn","updatedColumn","columnToBeUpdated","fieldAsString","updatedField","needleSortIndex","findIndex","needleSort","sum","currentField","splice","sortableFieldIndex","fieldToBeSorted","withDeletedColumn","columnToBeDeleted","withTeams","getSorts","order","getQuery","inputQuery","queryParts","getQueryWithAdditionalConditions","join","getFacetsAPIPayload","payload","getEventsAPIPayload","remove","normalizeDateSelection","picked","pickRelevantLocationQueryStrings","dateSelection","normalizedTimeWindowParams","eventQuery","assign","omit","per_page","DEFAULT_PER_PAGE","getResultsViewUrlTarget","slug","pathname","getResultsViewShortUrlTarget","getPerformanceTransactionEventsViewUrlTarget","options","showTransactions","breakdown","webVital","transaction","sortForField","sortOnField","needleIndex","setSortOrder","reverseSort","getYAxisOptions","uniqBy","isLegalYAxisType","aggregateOutputType","label","concat","CHART_AXIS_OPTIONS","yAxisOptions","defaultOption","option","getDisplayOptions","DISPLAY_MODE_OPTIONS","disabled","tooltip","getDisplayMode","mode","displayOptions","cond","selectedOption","DISPLAY_MODE_FALLBACK_OPTIONS","isEmpty","conditions","entries","filters","tagValues","existingTagValues","getFilterValues","newTagValues","tagValue","addFilterValues","formatString","isFieldsSimilar","currentEquations","otherEquations","currentFields","otherFields","isAPIPayloadSimilar","current","currentKeys","otherKeys","currentTarget","otherTarget","TOP_EVENT_MODES","TOP5","DAILYTOP5","DEFAULT","PREVIOUS","DAILY","WORLDMAP","BAR","MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES","isTombstone","maybe","hasOwnProperty","getMessage","event","culprit","metadata","type","EventOrGroupType","message","getLocation","isNativePlatform","platform","filename","getTreeLabelPartDetails","part","package","filebase","classbase","computeTitleWithTreeLabel","current_tree_label","finest_tree_label","treeLabel","formattedTreeLabel","labelPart","title","getTitle","features","grouping","customTitle","subtitle","isMobilePlatform","directive","uri","origin","getShortEventId","eventId","mobile","MAX_WIDGETS","DEFAULT_TABLE_LIMIT","DisplayType","WidgetType","DashboardState","DashboardWidgetSource","DEFAULT_EVENT_VIEW","TRANSACTION_VIEWS","WEB_VITALS_VIEWS","ALL_VIEWS","handleCreateQuery","organization","eventView","isNewQuery","trackAnalyticsEvent","getAnalyticsCreateEventKeyName","organization_id","extractAnalyticsQueryFields","then","savedQuery","addSuccessMessage","err","error","EVENT_NAME_EXISTING_MAP","request","success","failed","EVENT_NAME_NEW_MAP","handleUpdateQuery","Promise","reject","eventKey","eventName","handleUpdateQueryName","_saved","handleDeleteQuery","displayModeToDisplayType","displayMode"],"sourceRoot":""}