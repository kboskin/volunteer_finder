{"version":3,"file":"chunks/app_utils_crashReports_tsx-app_views_settings_components_dataScrubbing_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/crashReports.tsx","webpack:///./app/views/settings/components/dataScrubbing/types.tsx","webpack:///./app/views/settings/components/dataScrubbing/submitRules.tsx","webpack:///./app/views/settings/components/dataScrubbing/utils.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/localStorage.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/utils.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/form/eventIdFieldStatusIcon.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/form/eventIdField.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/form/selectField.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/form/sourceSuggestionExamples.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/form/sourceField.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/form/index.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/handleError.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/modal.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/modalManager.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/add.tsx","webpack:///./app/views/settings/components/dataScrubbing/modals/edit.tsx","webpack:///./app/views/settings/components/dataScrubbing/rules.tsx","webpack:///./app/views/settings/components/dataScrubbing/content.tsx","webpack:///./app/views/settings/components/dataScrubbing/convertRelayPiiConfig.tsx","webpack:///./app/views/settings/components/dataScrubbing/organizationRules.tsx","webpack:///./app/views/settings/components/dataScrubbing/index.tsx"],"sourcesContent":["import {t, tct} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\n\nexport function formatStoreCrashReports(\n  value: number | null | '',\n  organizationValue?: number\n): React.ReactNode {\n  if (value === null && defined(organizationValue)) {\n    return tct('Inherit organization settings ([organizationValue])', {\n      organizationValue: formatStoreCrashReports(organizationValue),\n    });\n  }\n\n  if (value === -1) {\n    return t('Unlimited');\n  }\n\n  if (value === 0) {\n    return t('Disabled');\n  }\n\n  return tct('[value] per issue', {value});\n}\n\nexport enum SettingScope {\n  Organization,\n  Project,\n}\nexport function getStoreCrashReportsValues(settingScope: SettingScope) {\n  const values: Array<number | null> = [\n    0, // disabled\n    1, // limited per issue\n    5,\n    10,\n    20,\n    50,\n    100,\n    -1, // unlimited\n  ];\n\n  if (settingScope === SettingScope.Project) {\n    values.unshift(null); // inherit option\n  }\n\n  return values;\n}\n","import {Project} from 'sentry/types';\n\nexport enum RuleType {\n  PATTERN = 'pattern',\n  CREDITCARD = 'creditcard',\n  PASSWORD = 'password',\n  IP = 'ip',\n  IMEI = 'imei',\n  EMAIL = 'email',\n  UUID = 'uuid',\n  PEMKEY = 'pemkey',\n  URLAUTH = 'url_auth',\n  USSSN = 'us_ssn',\n  USER_PATH = 'userpath',\n  MAC = 'mac',\n  ANYTHING = 'anything',\n}\n\nexport enum MethodType {\n  MASK = 'mask',\n  REMOVE = 'remove',\n  HASH = 'hash',\n  REPLACE = 'replace',\n}\n\nexport enum EventIdStatus {\n  UNDEFINED = 'undefined',\n  LOADING = 'loading',\n  INVALID = 'invalid',\n  NOT_FOUND = 'not_found',\n  LOADED = 'loaded',\n  ERROR = 'error',\n}\n\nexport enum SourceSuggestionType {\n  VALUE = 'value',\n  UNARY = 'unary',\n  BINARY = 'binary',\n  STRING = 'string',\n}\n\nexport type SourceSuggestion = {\n  type: SourceSuggestionType;\n  value: string;\n  description?: string;\n  examples?: Array<string>;\n};\n\ntype RuleBase = {\n  id: number;\n  source: string;\n};\n\nexport type RuleDefault = RuleBase & {\n  method: MethodType.MASK | MethodType.REMOVE | MethodType.HASH;\n  type:\n    | RuleType.CREDITCARD\n    | RuleType.PASSWORD\n    | RuleType.IP\n    | RuleType.IMEI\n    | RuleType.EMAIL\n    | RuleType.UUID\n    | RuleType.PEMKEY\n    | RuleType.URLAUTH\n    | RuleType.USSSN\n    | RuleType.USER_PATH\n    | RuleType.MAC\n    | RuleType.ANYTHING;\n};\n\nexport type RulePattern = RuleBase & {\n  pattern: string;\n  type: RuleType.PATTERN;\n} & Pick<RuleDefault, 'method'>;\n\nexport type RuleReplace = RuleBase & {\n  method: MethodType.REPLACE;\n  placeholder?: string;\n} & Pick<RuleDefault, 'type'>;\n\nexport type KeysOfUnion<T> = T extends any ? keyof T : never;\n\nexport type RuleReplaceAndPattern = Omit<RulePattern, 'method'> &\n  Omit<RuleReplace, 'type'>;\n\nexport type Rule = RuleDefault | RuleReplace | RulePattern | RuleReplaceAndPattern;\n\nexport type EventId = {\n  status: EventIdStatus;\n  value: string;\n};\n\ntype PiiConfigDefault = {\n  redaction: {\n    method: RuleDefault['method'];\n  };\n  type: RuleDefault['type'];\n};\n\ntype PiiConfigReplace = {\n  redaction: {\n    method: RuleReplace['method'];\n    text?: string;\n  };\n  type: RuleReplace['type'];\n};\n\ntype PiiConfigPattern = {\n  pattern: string;\n  redaction: {\n    method: RulePattern['method'];\n  };\n  type: RulePattern['type'];\n};\n\ntype PiiConfigReplaceAndPattern = Omit<PiiConfigPattern, 'redaction'> &\n  Pick<PiiConfigReplace, 'redaction'>;\n\nexport type PiiConfig =\n  | PiiConfigDefault\n  | PiiConfigPattern\n  | PiiConfigReplace\n  | PiiConfigReplaceAndPattern;\n\nexport type Applications = Record<string, Array<string>>;\n\nexport type Errors = Partial<Record<KeysOfUnion<Rule>, string>>;\n\nexport type ProjectId = Project['id'] | undefined;\n","import {Client} from 'sentry/api';\n\nimport {Applications, MethodType, PiiConfig, Rule, RuleType} from './types';\n\nfunction getSubmitFormatRule(rule: Rule): PiiConfig {\n  if (rule.type === RuleType.PATTERN && rule.method === MethodType.REPLACE) {\n    return {\n      type: rule.type,\n      pattern: rule.pattern,\n      redaction: {\n        method: rule.method,\n        text: rule?.placeholder,\n      },\n    };\n  }\n\n  if (rule.type === RuleType.PATTERN) {\n    return {\n      type: rule.type,\n      pattern: rule.pattern,\n      redaction: {\n        method: rule.method,\n      },\n    };\n  }\n\n  if (rule.method === MethodType.REPLACE) {\n    return {\n      type: rule.type,\n      redaction: {\n        method: rule.method,\n        text: rule?.placeholder,\n      },\n    };\n  }\n\n  return {\n    type: rule.type,\n    redaction: {\n      method: rule.method,\n    },\n  };\n}\n\nfunction submitRules(api: Client, endpoint: string, rules: Array<Rule>) {\n  const applications: Applications = {};\n  const submitFormatRules: Record<string, PiiConfig> = {};\n\n  for (let i = 0; i < rules.length; i++) {\n    const rule = rules[i];\n    const ruleId = String(i);\n    submitFormatRules[ruleId] = getSubmitFormatRule(rule);\n\n    if (!applications[rule.source]) {\n      applications[rule.source] = [];\n    }\n\n    if (!applications[rule.source].includes(ruleId)) {\n      applications[rule.source].push(ruleId);\n    }\n  }\n\n  const piiConfig = {rules: submitFormatRules, applications};\n\n  return api.requestPromise(endpoint, {\n    method: 'PUT',\n    data: {relayPiiConfig: JSON.stringify(piiConfig)},\n  });\n}\n\nexport default submitRules;\n","import {t} from 'sentry/locale';\n\nimport {MethodType, RuleType, SourceSuggestion, SourceSuggestionType} from './types';\n\nfunction getRuleLabel(type: RuleType) {\n  switch (type) {\n    case RuleType.ANYTHING:\n      return t('Anything');\n    case RuleType.IMEI:\n      return t('IMEI numbers');\n    case RuleType.MAC:\n      return t('MAC addresses');\n    case RuleType.EMAIL:\n      return t('Email addresses');\n    case RuleType.PEMKEY:\n      return t('PEM keys');\n    case RuleType.URLAUTH:\n      return t('Auth in URLs');\n    case RuleType.USSSN:\n      return t('US social security numbers');\n    case RuleType.USER_PATH:\n      return t('Usernames in filepaths');\n    case RuleType.UUID:\n      return t('UUIDs');\n    case RuleType.CREDITCARD:\n      return t('Credit card numbers');\n    case RuleType.PASSWORD:\n      return t('Password fields');\n    case RuleType.IP:\n      return t('IP addresses');\n    case RuleType.PATTERN:\n      return t('Regex matches');\n    default:\n      return '';\n  }\n}\n\nfunction getMethodLabel(type: MethodType) {\n  switch (type) {\n    case MethodType.MASK:\n      return {\n        label: t('Mask'),\n        description: t('Replace with ****'),\n      };\n    case MethodType.HASH:\n      return {\n        label: t('Hash'),\n        description: t('Replace with DEADBEEF'),\n      };\n    case MethodType.REMOVE:\n      return {\n        label: t('Remove'),\n        description: t('Replace with null'),\n      };\n    case MethodType.REPLACE:\n      return {\n        label: t('Replace'),\n        description: t('Replace with Placeholder'),\n      };\n    default:\n      return {\n        label: '',\n      };\n  }\n}\n\nconst binarySuggestions: Array<SourceSuggestion> = [\n  {\n    type: SourceSuggestionType.BINARY,\n    value: '&&',\n  },\n  {\n    type: SourceSuggestionType.BINARY,\n    value: '||',\n  },\n];\n\nconst unarySuggestions: Array<SourceSuggestion> = [\n  {\n    type: SourceSuggestionType.UNARY,\n    value: '!',\n  },\n];\n\nconst valueSuggestions: Array<SourceSuggestion> = [\n  {type: SourceSuggestionType.VALUE, value: '**', description: t('everywhere')},\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'password',\n    description: t('attributes named \"password\"'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$error.value',\n    description: t('the exception value'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$message',\n    description: t('the log message'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'extra.MyValue',\n    description: t('the key \"MyValue\" in \"Additional Data\"'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'extra.**',\n    description: t('everything in \"Additional Data\"'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$http.headers.x-custom-token',\n    description: t('the X-Custom-Token HTTP header'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$user.ip_address',\n    description: t('the user IP address'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$frame.vars.foo',\n    description: t('the local variable \"foo\"'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'contexts.device.timezone',\n    description: t('the timezone in the device context'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'tags.server_name',\n    description: t('the tag \"server_name\"'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$attachments.**',\n    description: t('all attachments'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: \"$attachments.'logfile.txt'\",\n    description: t('all attachments named \"logfile.txt\"'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$minidump',\n    description: t('the entire minidump of a native crash report'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: '$minidump.heap_memory',\n    description: t('the heap memory region in a native crash report'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'code_file',\n    description: t('the pathname of a code module in a native crash report'),\n  },\n  {\n    type: SourceSuggestionType.VALUE,\n    value: 'debug_file',\n    description: t('the pathname of a debug module in a native crash report'),\n  },\n];\n\nexport {\n  binarySuggestions,\n  getMethodLabel,\n  getRuleLabel,\n  unarySuggestions,\n  valueSuggestions,\n};\n","import * as Sentry from '@sentry/react';\n\nimport localStorage from 'sentry/utils/localStorage';\n\nimport {SourceSuggestion} from '../types';\n\nconst ADVANCED_DATA_SCRUBBING_LOCALSTORAGE_KEY = 'advanced-data-scrubbing';\n\ntype StorageValue = {\n  eventId: string;\n  sourceSuggestions: Array<SourceSuggestion>;\n};\n\n// TODO(Priscila): add the method below in app/utils\nfunction fetchFromStorage(): StorageValue | undefined {\n  const storage = localStorage.getItem(ADVANCED_DATA_SCRUBBING_LOCALSTORAGE_KEY);\n  if (!storage) {\n    return undefined;\n  }\n\n  try {\n    return JSON.parse(storage);\n  } catch (err) {\n    Sentry.withScope(scope => {\n      scope.setExtra('storage', storage);\n      Sentry.captureException(err);\n    });\n    return undefined;\n  }\n}\n\nfunction saveToStorage(obj: StorageValue) {\n  try {\n    localStorage.setItem(ADVANCED_DATA_SCRUBBING_LOCALSTORAGE_KEY, JSON.stringify(obj));\n  } catch (err) {\n    Sentry.captureException(err);\n    Sentry.withScope(scope => {\n      scope.setExtra('storage', obj);\n\n      Sentry.captureException(err);\n    });\n  }\n}\n\nexport {fetchFromStorage, saveToStorage};\n","import {EventId, EventIdStatus} from '../types';\nimport {valueSuggestions} from '../utils';\n\nimport {fetchFromStorage, saveToStorage} from './localStorage';\n\nfunction fetchSourceGroupData() {\n  const fetchedSourceGroupData = fetchFromStorage();\n  if (!fetchedSourceGroupData) {\n    const sourceGroupData: Parameters<typeof saveToStorage>[0] = {\n      eventId: '',\n      sourceSuggestions: valueSuggestions,\n    };\n    saveToStorage(sourceGroupData);\n    return sourceGroupData;\n  }\n  return fetchedSourceGroupData;\n}\n\nfunction saveToSourceGroupData(eventId: EventId, sourceSuggestions = valueSuggestions) {\n  switch (eventId.status) {\n    case EventIdStatus.LOADING:\n      break;\n    case EventIdStatus.LOADED:\n      saveToStorage({eventId: eventId.value, sourceSuggestions});\n      break;\n    default:\n      saveToStorage({eventId: '', sourceSuggestions});\n  }\n}\n\nexport {fetchSourceGroupData, saveToSourceGroupData};\n","import styled from '@emotion/styled';\n\nimport ControlState from 'sentry/components/forms/field/controlState';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconCheckmark, IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\nimport {EventIdStatus} from '../../types';\n\ntype Props = {\n  onClickIconClose: () => void;\n  status?: EventIdStatus;\n};\n\nconst EventIdFieldStatusIcon = ({status, onClickIconClose}: Props) => {\n  switch (status) {\n    case EventIdStatus.ERROR:\n    case EventIdStatus.INVALID:\n    case EventIdStatus.NOT_FOUND:\n      return (\n        <CloseIcon onClick={onClickIconClose}>\n          <Tooltip title={t('Clear event ID')}>\n            <StyledIconClose size=\"xs\" />\n          </Tooltip>\n        </CloseIcon>\n      );\n    case EventIdStatus.LOADING:\n      return <ControlState isSaving />;\n    case EventIdStatus.LOADED:\n      return <IconCheckmark color=\"green300\" />;\n    default:\n      return null;\n  }\n};\n\nexport default EventIdFieldStatusIcon;\n\nconst CloseIcon = styled('div')`\n  :first-child {\n    line-height: 0;\n  }\n`;\n\nconst StyledIconClose = styled(IconClose)`\n  color: ${p => p.theme.gray200};\n  :hover {\n    color: ${p => p.theme.gray300};\n  }\n  cursor: pointer;\n`;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\n\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport {EventId, EventIdStatus} from '../../types';\nimport {saveToSourceGroupData} from '../utils';\n\nimport EventIdFieldStatusIcon from './eventIdFieldStatusIcon';\n\ntype Props = {\n  eventId: EventId;\n  onUpdateEventId: (eventId: string) => void;\n  disabled?: boolean;\n};\n\ntype State = {\n  status: EventIdStatus;\n  value: string;\n};\n\nclass EventIdField extends Component<Props, State> {\n  state: State = {...this.props.eventId};\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(prevProps.eventId, this.props.eventId)) {\n      this.loadState();\n    }\n  }\n\n  loadState() {\n    this.setState({\n      ...this.props.eventId,\n    });\n  }\n\n  getErrorMessage(): string | undefined {\n    const {status} = this.state;\n\n    switch (status) {\n      case EventIdStatus.INVALID:\n        return t('This event ID is invalid.');\n      case EventIdStatus.ERROR:\n        return t(\n          'An error occurred while fetching the suggestions based on this event ID.'\n        );\n      case EventIdStatus.NOT_FOUND:\n        return t('The chosen event ID was not found in projects you have access to.');\n      default:\n        return undefined;\n    }\n  }\n\n  isEventIdValid(): boolean {\n    const {value, status} = this.state;\n\n    if (value && value.length !== 32) {\n      if (status !== EventIdStatus.INVALID) {\n        saveToSourceGroupData({value, status});\n        this.setState({status: EventIdStatus.INVALID});\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const eventId = event.target.value.replace(/-/g, '').trim();\n\n    if (eventId !== this.state.value) {\n      this.setState({\n        value: eventId,\n        status: EventIdStatus.UNDEFINED,\n      });\n    }\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    if (this.isEventIdValid()) {\n      this.props.onUpdateEventId(this.state.value);\n    }\n  };\n\n  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const {keyCode} = event;\n\n    if (keyCode === 13 && this.isEventIdValid()) {\n      this.props.onUpdateEventId(this.state.value);\n    }\n  };\n\n  handleClickIconClose = () => {\n    this.setState({\n      value: '',\n      status: EventIdStatus.UNDEFINED,\n    });\n  };\n\n  render() {\n    const {disabled} = this.props;\n    const {value, status} = this.state;\n\n    return (\n      <Field\n        data-test-id=\"event-id-field\"\n        label={t('Event ID (Optional)')}\n        help={t(\n          'Providing an event ID will automatically provide you a list of suggested sources'\n        )}\n        inline={false}\n        error={this.getErrorMessage()}\n        flexibleControlStateSize\n        stacked\n        showHelpInTooltip\n      >\n        <FieldWrapper>\n          <StyledInput\n            type=\"text\"\n            name=\"eventId\"\n            disabled={disabled}\n            value={value}\n            placeholder={t('XXXXXXXXXXXXXX')}\n            onChange={this.handleChange}\n            onKeyDown={this.handleKeyDown}\n            onBlur={this.handleBlur}\n          />\n          <Status>\n            <EventIdFieldStatusIcon\n              onClickIconClose={this.handleClickIconClose}\n              status={status}\n            />\n          </Status>\n        </FieldWrapper>\n      </Field>\n    );\n  }\n}\nexport default EventIdField;\n\nconst StyledInput = styled(Input)`\n  flex: 1;\n  font-weight: 400;\n  input {\n    padding-right: ${space(1.5)};\n  }\n  margin-bottom: 0;\n`;\n\nconst Status = styled('div')`\n  height: 40px;\n  position: absolute;\n  right: ${space(1.5)};\n  top: 0;\n  display: flex;\n  align-items: center;\n`;\n\nconst FieldWrapper = styled('div')`\n  position: relative;\n  display: flex;\n  align-items: center;\n`;\n","import {Component, createRef} from 'react';\nimport {components, OptionProps} from 'react-select';\nimport styled from '@emotion/styled';\n\nimport SelectControl, {ControlProps} from 'sentry/components/forms/selectControl';\nimport space from 'sentry/styles/space';\n\ntype Props = Pick<\n  ControlProps,\n  'value' | 'placeholder' | 'name' | 'onChange' | 'options'\n>;\n\nclass SelectField extends Component<Props> {\n  componentDidMount() {\n    if (!this.selectRef.current) {\n      return;\n    }\n\n    if (this.selectRef.current?.select?.inputRef) {\n      this.selectRef.current.select.inputRef.autocomplete = 'off';\n    }\n  }\n\n  // TODO(ts) The generics in react-select make getting a good type here hard.\n  selectRef = createRef<any>();\n\n  render() {\n    return (\n      <SelectControl\n        {...this.props}\n        isSearchable={false}\n        styles={{\n          control: (provided: {[x: string]: string | number | boolean}) => ({\n            ...provided,\n            minHeight: '41px',\n            height: '41px',\n          }),\n        }}\n        ref={this.selectRef}\n        components={{\n          Option: ({\n            data: {label, description, ...data},\n            isSelected,\n            ...props\n          }: OptionProps<{\n            label: React.ReactNode;\n            value: string;\n            description?: string;\n          }>) => (\n            <components.Option isSelected={isSelected} data={data} {...props}>\n              <Wrapper>\n                <div data-test-id=\"label\">{label}</div>\n                {description && <Description>{`(${description})`}</Description>}\n              </Wrapper>\n            </components.Option>\n          ),\n        }}\n        openOnFocus\n      />\n    );\n  }\n}\n\nexport default SelectField;\n\nconst Description = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst Wrapper = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  gap: ${space(1)};\n`;\n","import styled from '@emotion/styled';\n\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {IconQuestion} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  examples: Array<string>;\n  sourceName: string;\n};\n\nconst SourceSuggestionExamples = ({examples, sourceName}: Props) => (\n  <Wrapper>\n    <ExampleCard\n      position=\"right\"\n      header={t('Examples for %s in current event', <code>{sourceName}</code>)}\n      body={examples.map(example => (\n        <pre key={example}>{example}</pre>\n      ))}\n    >\n      <Content>\n        {t('See Example')} <IconQuestion size=\"xs\" />\n      </Content>\n    </ExampleCard>\n  </Wrapper>\n);\n\nexport default SourceSuggestionExamples;\n\nconst ExampleCard = styled(Hovercard)`\n  width: 400px;\n\n  pre:last-child {\n    margin: 0;\n  }\n`;\n\nconst Content = styled('span')`\n  display: inline-grid;\n  grid-template-columns: repeat(2, max-content);\n  align-items: center;\n  gap: ${space(0.5)};\n  color: ${p => p.theme.gray400};\n  font-size: ${p => p.theme.fontSizeSmall};\n  text-decoration: underline;\n  text-decoration-style: dotted;\n`;\n\nconst Wrapper = styled('div')`\n  grid-column: 3/3;\n`;\n","import {Component, createRef, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport InputField from 'sentry/components/forms/inputField';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\n\nimport {SourceSuggestion, SourceSuggestionType} from '../../types';\nimport {binarySuggestions, unarySuggestions} from '../../utils';\n\nimport SourceSuggestionExamples from './sourceSuggestionExamples';\n\nconst defaultHelp = t(\n  'Where to look. In the simplest case this can be an attribute name.'\n);\n\ntype Props = {\n  isRegExMatchesSelected: boolean;\n  onChange: (value: string) => void;\n  suggestions: Array<SourceSuggestion>;\n  value: string;\n  error?: string;\n  onBlur?: (value: string, event: React.FocusEvent<HTMLInputElement>) => void;\n};\n\ntype State = {\n  activeSuggestion: number;\n  fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>>;\n  help: string;\n  hideCaret: boolean;\n  showSuggestions: boolean;\n  suggestions: Array<SourceSuggestion>;\n};\n\nclass SourceField extends Component<Props, State> {\n  state: State = {\n    suggestions: [],\n    fieldValues: [],\n    activeSuggestion: 0,\n    showSuggestions: false,\n    hideCaret: false,\n    help: defaultHelp,\n  };\n\n  componentDidMount() {\n    this.loadFieldValues(this.props.value);\n    this.toggleSuggestions(false);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.suggestions !== this.props.suggestions) {\n      this.loadFieldValues(this.props.value);\n      this.toggleSuggestions(false);\n    }\n\n    if (\n      prevProps.isRegExMatchesSelected !== this.props.isRegExMatchesSelected ||\n      prevProps.value !== this.props.value\n    ) {\n      this.checkPossiblyRegExMatchExpression(this.props.value);\n    }\n  }\n\n  selectorField = createRef<HTMLDivElement>();\n  suggestionList = createRef<HTMLUListElement>();\n\n  getAllSuggestions() {\n    return [...this.getValueSuggestions(), ...unarySuggestions, ...binarySuggestions];\n  }\n\n  getValueSuggestions() {\n    return this.props.suggestions || [];\n  }\n\n  getFilteredSuggestions(value: string, type: SourceSuggestionType) {\n    let valuesToBeFiltered: Array<SourceSuggestion> = [];\n\n    switch (type) {\n      case SourceSuggestionType.BINARY: {\n        valuesToBeFiltered = binarySuggestions;\n        break;\n      }\n      case SourceSuggestionType.VALUE: {\n        valuesToBeFiltered = this.getValueSuggestions();\n        break;\n      }\n      case SourceSuggestionType.UNARY: {\n        valuesToBeFiltered = unarySuggestions;\n        break;\n      }\n      default: {\n        valuesToBeFiltered = [...this.getValueSuggestions(), ...unarySuggestions];\n      }\n    }\n\n    const filteredSuggestions = valuesToBeFiltered.filter(\n      s => s.value.toLowerCase().indexOf(value.toLowerCase()) > -1\n    );\n\n    return filteredSuggestions;\n  }\n\n  getNewSuggestions(fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>>) {\n    const lastFieldValue = fieldValues[fieldValues.length - 1];\n    const penultimateFieldValue = fieldValues[fieldValues.length - 2];\n\n    if (Array.isArray(lastFieldValue)) {\n      // recursion\n      return this.getNewSuggestions(lastFieldValue);\n    }\n\n    if (Array.isArray(penultimateFieldValue)) {\n      if (lastFieldValue?.type === 'binary') {\n        // returns filtered values\n        return this.getFilteredSuggestions(\n          lastFieldValue?.value,\n          SourceSuggestionType.VALUE\n        );\n      }\n      // returns all binaries without any filter\n      return this.getFilteredSuggestions('', SourceSuggestionType.BINARY);\n    }\n\n    if (lastFieldValue?.type === 'value' && penultimateFieldValue?.type === 'unary') {\n      // returns filtered values\n      return this.getFilteredSuggestions(\n        lastFieldValue?.value,\n        SourceSuggestionType.VALUE\n      );\n    }\n\n    if (lastFieldValue?.type === 'unary') {\n      // returns all values without any filter\n      return this.getFilteredSuggestions('', SourceSuggestionType.VALUE);\n    }\n\n    if (lastFieldValue?.type === 'string' && penultimateFieldValue?.type === 'value') {\n      // returns all binaries without any filter\n      return this.getFilteredSuggestions('', SourceSuggestionType.BINARY);\n    }\n\n    if (\n      lastFieldValue?.type === 'string' &&\n      penultimateFieldValue?.type === 'string' &&\n      !penultimateFieldValue?.value\n    ) {\n      // returns all values without any filter\n      return this.getFilteredSuggestions('', SourceSuggestionType.STRING);\n    }\n\n    if (\n      (penultimateFieldValue?.type === 'string' && !lastFieldValue?.value) ||\n      (penultimateFieldValue?.type === 'value' && !lastFieldValue?.value) ||\n      lastFieldValue?.type === 'binary'\n    ) {\n      // returns filtered binaries\n      return this.getFilteredSuggestions(\n        lastFieldValue?.value,\n        SourceSuggestionType.BINARY\n      );\n    }\n\n    return this.getFilteredSuggestions(lastFieldValue?.value, lastFieldValue?.type);\n  }\n\n  loadFieldValues(newValue: string) {\n    const fieldValues: Array<SourceSuggestion | Array<SourceSuggestion>> = [];\n\n    const splittedValue = newValue.split(' ');\n\n    for (const splittedValueIndex in splittedValue) {\n      const value = splittedValue[splittedValueIndex];\n      const lastFieldValue = fieldValues[fieldValues.length - 1];\n\n      if (\n        lastFieldValue &&\n        !Array.isArray(lastFieldValue) &&\n        !lastFieldValue.value &&\n        !value\n      ) {\n        continue;\n      }\n\n      if (value.includes('!') && !!value.split('!')[1]) {\n        const valueAfterUnaryOperator = value.split('!')[1];\n        const selector = this.getAllSuggestions().find(\n          s => s.value === valueAfterUnaryOperator\n        );\n        if (!selector) {\n          fieldValues.push([\n            unarySuggestions[0],\n            {type: SourceSuggestionType.STRING, value: valueAfterUnaryOperator},\n          ]);\n          continue;\n        }\n        fieldValues.push([unarySuggestions[0], selector]);\n        continue;\n      }\n\n      const selector = this.getAllSuggestions().find(s => s.value === value);\n      if (selector) {\n        fieldValues.push(selector);\n        continue;\n      }\n\n      fieldValues.push({type: SourceSuggestionType.STRING, value});\n    }\n\n    const filteredSuggestions = this.getNewSuggestions(fieldValues);\n\n    this.setState({\n      fieldValues,\n      activeSuggestion: 0,\n      suggestions: filteredSuggestions,\n    });\n  }\n\n  scrollToSuggestion() {\n    const {activeSuggestion, hideCaret} = this.state;\n\n    this.suggestionList?.current?.children[activeSuggestion].scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'start',\n    });\n\n    if (!hideCaret) {\n      this.setState({\n        hideCaret: true,\n      });\n    }\n  }\n\n  changeParentValue() {\n    const {onChange} = this.props;\n    const {fieldValues} = this.state;\n    const newValue: Array<string> = [];\n\n    for (const index in fieldValues) {\n      const fieldValue = fieldValues[index];\n      if (Array.isArray(fieldValue)) {\n        if (fieldValue[0]?.value || fieldValue[1]?.value) {\n          newValue.push(`${fieldValue[0]?.value ?? ''}${fieldValue[1]?.value ?? ''}`);\n        }\n        continue;\n      }\n      newValue.push(fieldValue.value);\n    }\n\n    onChange(newValue.join(' '));\n  }\n\n  getNewFieldValues(\n    suggestion: SourceSuggestion\n  ): Array<SourceSuggestion | Array<SourceSuggestion>> {\n    const fieldValues = [...this.state.fieldValues];\n    const lastFieldValue = fieldValues[fieldValues.length - 1];\n\n    if (!defined(lastFieldValue)) {\n      return [suggestion];\n    }\n\n    if (Array.isArray(lastFieldValue)) {\n      fieldValues[fieldValues.length - 1] = [lastFieldValue[0], suggestion];\n      return fieldValues;\n    }\n\n    if (lastFieldValue?.type === 'unary') {\n      fieldValues[fieldValues.length - 1] = [lastFieldValue, suggestion];\n    }\n\n    if (lastFieldValue?.type === 'string' && !lastFieldValue?.value) {\n      fieldValues[fieldValues.length - 1] = suggestion;\n    }\n\n    return fieldValues;\n  }\n\n  checkPossiblyRegExMatchExpression(value: string) {\n    const {isRegExMatchesSelected} = this.props;\n    const {help} = this.state;\n\n    if (isRegExMatchesSelected) {\n      if (help) {\n        this.setState({help: ''});\n      }\n      return;\n    }\n\n    const isMaybeRegExp = RegExp('^/.*/g?$').test(value);\n\n    if (help) {\n      if (!isMaybeRegExp) {\n        this.setState({\n          help: defaultHelp,\n        });\n      }\n      return;\n    }\n\n    if (isMaybeRegExp) {\n      this.setState({\n        help: t(\"You might want to change Data Type's value to 'Regex matches'\"),\n      });\n    }\n  }\n\n  toggleSuggestions(showSuggestions: boolean) {\n    this.setState({showSuggestions});\n  }\n\n  handleChange = (value: string) => {\n    this.loadFieldValues(value);\n    this.props.onChange(value);\n  };\n\n  handleClickOutside = () => {\n    this.setState({\n      showSuggestions: false,\n      hideCaret: false,\n    });\n  };\n\n  handleClickSuggestionItem = (suggestion: SourceSuggestion) => () => {\n    const fieldValues = this.getNewFieldValues(suggestion);\n    this.setState(\n      {\n        fieldValues,\n        activeSuggestion: 0,\n        showSuggestions: false,\n        hideCaret: false,\n      },\n      this.changeParentValue\n    );\n  };\n\n  handleKeyDown = (_value: string, event: React.KeyboardEvent<HTMLInputElement>) => {\n    event.persist();\n\n    const {keyCode} = event;\n    const {activeSuggestion, suggestions} = this.state;\n\n    if (keyCode === 8 || keyCode === 32) {\n      this.toggleSuggestions(true);\n      return;\n    }\n\n    if (keyCode === 13) {\n      this.handleClickSuggestionItem(suggestions[activeSuggestion])();\n      return;\n    }\n\n    if (keyCode === 38) {\n      if (activeSuggestion === 0) {\n        return;\n      }\n      this.setState({activeSuggestion: activeSuggestion - 1}, () => {\n        this.scrollToSuggestion();\n      });\n      return;\n    }\n\n    if (keyCode === 40) {\n      if (activeSuggestion === suggestions.length - 1) {\n        return;\n      }\n      this.setState({activeSuggestion: activeSuggestion + 1}, () => {\n        this.scrollToSuggestion();\n      });\n      return;\n    }\n  };\n\n  handleFocus = () => {\n    this.toggleSuggestions(true);\n  };\n\n  render() {\n    const {error, value, onBlur} = this.props;\n    const {showSuggestions, suggestions, activeSuggestion, hideCaret, help} = this.state;\n\n    return (\n      <Wrapper ref={this.selectorField} hideCaret={hideCaret}>\n        <StyledInput\n          data-test-id=\"source-field\"\n          type=\"text\"\n          label={t('Source')}\n          name=\"source\"\n          placeholder={t('Enter a custom attribute, variable or header name')}\n          onChange={this.handleChange}\n          autoComplete=\"off\"\n          value={value}\n          error={error}\n          help={help}\n          onKeyDown={this.handleKeyDown}\n          onBlur={onBlur}\n          onFocus={this.handleFocus}\n          inline={false}\n          flexibleControlStateSize\n          stacked\n          required\n          showHelpInTooltip\n        />\n        {showSuggestions && suggestions.length > 0 && (\n          <Fragment>\n            <Suggestions\n              ref={this.suggestionList}\n              error={error}\n              data-test-id=\"source-suggestions\"\n            >\n              {suggestions.slice(0, 50).map((suggestion, index) => (\n                <Suggestion\n                  key={suggestion.value}\n                  onClick={this.handleClickSuggestionItem(suggestion)}\n                  active={index === activeSuggestion}\n                  tabIndex={-1}\n                >\n                  <TextOverflow>{suggestion.value}</TextOverflow>\n                  {suggestion.description && (\n                    <SuggestionDescription>\n                      (<TextOverflow>{suggestion.description}</TextOverflow>)\n                    </SuggestionDescription>\n                  )}\n                  {suggestion.examples && suggestion.examples.length > 0 && (\n                    <SourceSuggestionExamples\n                      examples={suggestion.examples}\n                      sourceName={suggestion.value}\n                    />\n                  )}\n                </Suggestion>\n              ))}\n            </Suggestions>\n            <SuggestionsOverlay onClick={this.handleClickOutside} />\n          </Fragment>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nexport default SourceField;\n\nconst Wrapper = styled('div')<{hideCaret?: boolean}>`\n  position: relative;\n  width: 100%;\n  ${p => p.hideCaret && `caret-color: transparent;`}\n`;\n\nconst StyledInput = styled(InputField)`\n  z-index: 1002;\n  :focus {\n    outline: none;\n  }\n`;\n\nconst Suggestions = styled('ul')<{error?: string}>`\n  position: absolute;\n  width: ${p => (p.error ? 'calc(100% - 34px)' : '100%')};\n  padding-left: 0;\n  list-style: none;\n  margin-bottom: 0;\n  box-shadow: 0 2px 0 rgba(37, 11, 54, 0.04);\n  border: 1px solid ${p => p.theme.border};\n  border-radius: 0 0 ${space(0.5)} ${space(0.5)};\n  background: ${p => p.theme.background};\n  top: 63px;\n  left: 0;\n  z-index: 1002;\n  overflow: hidden;\n  max-height: 200px;\n  overflow-y: auto;\n`;\n\nconst Suggestion = styled('li')<{active: boolean}>`\n  display: grid;\n  grid-template-columns: auto 1fr max-content;\n  gap: ${space(1)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n  cursor: pointer;\n  background: ${p => (p.active ? p.theme.backgroundSecondary : p.theme.background)};\n  :hover {\n    background: ${p =>\n      p.active ? p.theme.backgroundSecondary : p.theme.backgroundSecondary};\n  }\n`;\n\nconst SuggestionDescription = styled('div')`\n  display: flex;\n  overflow: hidden;\n  color: ${p => p.theme.gray300};\n`;\n\nconst SuggestionsOverlay = styled('div')`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 1001;\n`;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport sortBy from 'lodash/sortBy';\n\nimport Button from 'sentry/components/button';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport {\n  EventId,\n  KeysOfUnion,\n  MethodType,\n  Rule,\n  RuleType,\n  SourceSuggestion,\n} from '../../types';\nimport {getMethodLabel, getRuleLabel} from '../../utils';\n\nimport EventIdField from './eventIdField';\nimport SelectField from './selectField';\nimport SourceField from './sourceField';\n\ntype Values = Omit<Record<KeysOfUnion<Rule>, string>, 'id'>;\n\ntype Props<V extends Values, K extends keyof V> = {\n  errors: Partial<V>;\n  eventId: EventId;\n  onChange: (field: K, value: string) => void;\n  onUpdateEventId: (eventId: string) => void;\n  onValidate: (field: K) => () => void;\n  sourceSuggestions: Array<SourceSuggestion>;\n  values: V;\n};\n\ntype State = {\n  displayEventId: boolean;\n};\n\nclass Form extends Component<Props<Values, KeysOfUnion<Values>>, State> {\n  state: State = {displayEventId: !!this.props.eventId?.value};\n\n  handleChange =\n    <K extends keyof Values>(field: K) =>\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      this.props.onChange(field, event.target.value);\n    };\n\n  handleToggleEventId = () => {\n    this.setState(prevState => ({displayEventId: !prevState.displayEventId}));\n  };\n\n  render() {\n    const {\n      values,\n      onChange,\n      errors,\n      onValidate,\n      sourceSuggestions,\n      onUpdateEventId,\n      eventId,\n    } = this.props;\n    const {method, type, source} = values;\n    const {displayEventId} = this.state;\n\n    return (\n      <Fragment>\n        <FieldGroup hasTwoColumns={values.method === MethodType.REPLACE}>\n          <Field\n            data-test-id=\"method-field\"\n            label={t('Method')}\n            help={t('What to do')}\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            showHelpInTooltip\n          >\n            <SelectField\n              placeholder={t('Select method')}\n              name=\"method\"\n              options={sortBy(Object.values(MethodType)).map(value => ({\n                ...getMethodLabel(value),\n                value,\n              }))}\n              value={method}\n              onChange={value => onChange('method', value?.value)}\n            />\n          </Field>\n          {values.method === MethodType.REPLACE && (\n            <Field\n              data-test-id=\"placeholder-field\"\n              label={t('Custom Placeholder (Optional)')}\n              help={t('It will replace the default placeholder [Filtered]')}\n              inline={false}\n              flexibleControlStateSize\n              stacked\n              showHelpInTooltip\n            >\n              <Input\n                type=\"text\"\n                name=\"placeholder\"\n                placeholder={`[${t('Filtered')}]`}\n                onChange={this.handleChange('placeholder')}\n                value={values.placeholder}\n              />\n            </Field>\n          )}\n        </FieldGroup>\n        <FieldGroup hasTwoColumns={values.type === RuleType.PATTERN}>\n          <Field\n            data-test-id=\"type-field\"\n            label={t('Data Type')}\n            help={t(\n              'What to look for. Use an existing pattern or define your own using regular expressions.'\n            )}\n            inline={false}\n            flexibleControlStateSize\n            stacked\n            showHelpInTooltip\n          >\n            <SelectField\n              placeholder={t('Select type')}\n              name=\"type\"\n              options={sortBy(Object.values(RuleType)).map(value => ({\n                label: getRuleLabel(value),\n                value,\n              }))}\n              value={type}\n              onChange={value => onChange('type', value?.value)}\n            />\n          </Field>\n          {values.type === RuleType.PATTERN && (\n            <Field\n              data-test-id=\"regex-field\"\n              label={t('Regex matches')}\n              help={t('Custom regular expression (see documentation)')}\n              inline={false}\n              error={errors?.pattern}\n              flexibleControlStateSize\n              stacked\n              required\n              showHelpInTooltip\n            >\n              <RegularExpression\n                type=\"text\"\n                name=\"pattern\"\n                placeholder={t('[a-zA-Z0-9]+')}\n                onChange={this.handleChange('pattern')}\n                value={values.pattern}\n                onBlur={onValidate('pattern')}\n              />\n            </Field>\n          )}\n        </FieldGroup>\n        <ToggleWrapper>\n          {displayEventId ? (\n            <Toggle priority=\"link\" onClick={this.handleToggleEventId}>\n              {t('Hide event ID field')}\n              <IconChevron direction=\"up\" size=\"xs\" />\n            </Toggle>\n          ) : (\n            <Toggle priority=\"link\" onClick={this.handleToggleEventId}>\n              {t('Use event ID for auto-completion')}\n              <IconChevron direction=\"down\" size=\"xs\" />\n            </Toggle>\n          )}\n        </ToggleWrapper>\n        <SourceGroup isExpanded={displayEventId}>\n          {displayEventId && (\n            <EventIdField onUpdateEventId={onUpdateEventId} eventId={eventId} />\n          )}\n          <SourceField\n            onChange={value => onChange('source', value)}\n            value={source}\n            error={errors?.source}\n            onBlur={onValidate('source')}\n            isRegExMatchesSelected={type === RuleType.PATTERN}\n            suggestions={sourceSuggestions}\n          />\n        </SourceGroup>\n      </Fragment>\n    );\n  }\n}\n\nexport default Form;\n\nconst FieldGroup = styled('div')<{hasTwoColumns: boolean}>`\n  display: grid;\n  margin-bottom: ${space(2)};\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    gap: ${space(2)};\n    ${p => p.hasTwoColumns && `grid-template-columns: 1fr 1fr;`}\n    margin-bottom: ${p => (p.hasTwoColumns ? 0 : space(2))};\n  }\n`;\n\nconst SourceGroup = styled('div')<{isExpanded: boolean}>`\n  height: 65px;\n  transition: all 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  transition-property: height;\n  ${p =>\n    p.isExpanded &&\n    `\n    border-radius: ${p.theme.borderRadius};\n    border: 1px solid ${p.theme.border};\n    box-shadow: ${p.theme.dropShadowLight};\n    margin: ${space(2)} 0 ${space(3)} 0;\n    padding: ${space(2)};\n    height: 180px;\n  `}\n`;\n\nconst RegularExpression = styled(Input)`\n  font-family: ${p => p.theme.text.familyMono};\n`;\n\nconst ToggleWrapper = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Toggle = styled(Button)`\n  font-weight: 700;\n  color: ${p => p.theme.subText};\n  &:hover,\n  &:focus {\n    color: ${p => p.theme.textColor};\n  }\n  > *:first-child {\n    display: grid;\n    gap: ${space(0.5)};\n    grid-template-columns: repeat(2, max-content);\n    align-items: center;\n  }\n`;\n","import {t} from 'sentry/locale';\n\nexport enum ErrorType {\n  Unknown = 'unknown',\n  InvalidSelector = 'invalid-selector',\n  RegexParse = 'regex-parse',\n}\n\ntype Error = {\n  message: string;\n  type: ErrorType;\n};\n\ntype ResponseError = {\n  responseJSON?: Record<string, Array<string>>;\n};\n\nfunction handleError(error: ResponseError): Error {\n  const errorMessage = error.responseJSON?.relayPiiConfig[0];\n\n  if (!errorMessage) {\n    return {\n      type: ErrorType.Unknown,\n      message: t('Unknown error occurred while saving data scrubbing rule'),\n    };\n  }\n\n  if (errorMessage.startsWith('invalid selector: ')) {\n    for (const line of errorMessage.split('\\n')) {\n      if (line.startsWith('1 | ')) {\n        const selector = line.slice(3);\n        return {\n          type: ErrorType.InvalidSelector,\n          message: t('Invalid source value: %s', selector),\n        };\n      }\n    }\n  }\n\n  if (errorMessage.startsWith('regex parse error:')) {\n    for (const line of errorMessage.split('\\n')) {\n      if (line.startsWith('error:')) {\n        const regex = line.slice(6).replace(/at line \\d+ column \\d+/, '');\n        return {\n          type: ErrorType.RegexParse,\n          message: t('Invalid regex: %s', regex),\n        };\n      }\n    }\n  }\n\n  return {\n    type: ErrorType.Unknown,\n    message: t('An unknown error occurred while saving data scrubbing rule'),\n  };\n}\n\nexport default handleError;\n","import {Fragment} from 'react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  content: React.ReactElement;\n  disabled: boolean;\n  onSave: () => void;\n  title: string;\n} & ModalRenderProps;\n\nconst Modal = ({\n  title,\n  onSave,\n  content,\n  disabled,\n  Header,\n  Body,\n  Footer,\n  closeModal,\n}: Props) => (\n  <Fragment>\n    <Header closeButton>{title}</Header>\n    <Body>{content}</Body>\n    <Footer>\n      <ButtonBar gap={1.5}>\n        <Button onClick={closeModal}>{t('Cancel')}</Button>\n        <Button onClick={onSave} disabled={disabled} priority=\"primary\">\n          {t('Save Rule')}\n        </Button>\n      </ButtonBar>\n    </Footer>\n  </Fragment>\n);\n\nexport default Modal;\n","import {Component} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\n\nimport submitRules from '../submitRules';\nimport {\n  EventIdStatus,\n  KeysOfUnion,\n  MethodType,\n  ProjectId,\n  Rule,\n  RuleType,\n} from '../types';\nimport {valueSuggestions} from '../utils';\n\nimport Form from './form';\nimport handleError, {ErrorType} from './handleError';\nimport Modal from './modal';\nimport {fetchSourceGroupData, saveToSourceGroupData} from './utils';\n\ntype FormProps = React.ComponentProps<typeof Form>;\ntype Values = FormProps['values'];\ntype EventId = NonNullable<FormProps['eventId']>;\ntype SourceSuggestions = FormProps['sourceSuggestions'];\n\ntype Props<T> = ModalRenderProps & {\n  api: Client;\n  endpoint: string;\n  onGetNewRules: (values: Values) => Array<Rule>;\n  onSubmitSuccess: (data: T extends undefined ? Organization : Project) => void;\n  orgSlug: Organization['slug'];\n  savedRules: Array<Rule>;\n  title: string;\n  initialState?: Partial<Values>;\n  projectId?: T;\n};\n\ntype State = {\n  errors: FormProps['errors'];\n  eventId: EventId;\n  isFormValid: boolean;\n  requiredValues: Array<keyof Values>;\n  sourceSuggestions: SourceSuggestions;\n  values: Values;\n};\n\nclass ModalManager<T extends ProjectId> extends Component<Props<T>, State> {\n  state = this.getDefaultState();\n\n  componentDidMount() {\n    this.handleValidateForm();\n  }\n\n  componentDidUpdate(_prevProps: Props<T>, prevState: State) {\n    if (!isEqual(prevState.values, this.state.values)) {\n      this.handleValidateForm();\n    }\n\n    if (prevState.eventId.value !== this.state.eventId.value) {\n      this.loadSourceSuggestions();\n    }\n    if (prevState.eventId.status !== this.state.eventId.status) {\n      saveToSourceGroupData(this.state.eventId, this.state.sourceSuggestions);\n    }\n  }\n\n  getDefaultState(): Readonly<State> {\n    const {eventId, sourceSuggestions} = fetchSourceGroupData();\n    const values = this.getInitialValues();\n    return {\n      values,\n      requiredValues: this.getRequiredValues(values),\n      errors: {},\n      isFormValid: false,\n      eventId: {\n        value: eventId,\n        status: !eventId ? EventIdStatus.UNDEFINED : EventIdStatus.LOADED,\n      },\n      sourceSuggestions,\n    } as Readonly<State>;\n  }\n\n  getInitialValues() {\n    const {initialState} = this.props;\n    return {\n      type: initialState?.type ?? RuleType.CREDITCARD,\n      method: initialState?.method ?? MethodType.MASK,\n      source: initialState?.source ?? '',\n      placeholder: initialState?.placeholder ?? '',\n      pattern: initialState?.pattern ?? '',\n    };\n  }\n\n  getRequiredValues(values: Values) {\n    const {type} = values;\n    const requiredValues: Array<KeysOfUnion<Values>> = ['type', 'method', 'source'];\n\n    if (type === RuleType.PATTERN) {\n      requiredValues.push('pattern');\n    }\n\n    return requiredValues;\n  }\n\n  clearError<F extends keyof Values>(field: F) {\n    this.setState(prevState => ({\n      errors: omit(prevState.errors, field),\n    }));\n  }\n\n  async loadSourceSuggestions() {\n    const {orgSlug, projectId, api} = this.props;\n    const {eventId} = this.state;\n\n    if (!eventId.value) {\n      this.setState(prevState => ({\n        sourceSuggestions: valueSuggestions,\n        eventId: {\n          ...prevState.eventId,\n          status: EventIdStatus.UNDEFINED,\n        },\n      }));\n      return;\n    }\n\n    this.setState(prevState => ({\n      sourceSuggestions: valueSuggestions,\n      eventId: {\n        ...prevState.eventId,\n        status: EventIdStatus.LOADING,\n      },\n    }));\n\n    try {\n      const query: {eventId: string; projectId?: string} = {eventId: eventId.value};\n      if (projectId) {\n        query.projectId = projectId;\n      }\n      const rawSuggestions = await api.requestPromise(\n        `/organizations/${orgSlug}/data-scrubbing-selector-suggestions/`,\n        {query}\n      );\n      const sourceSuggestions: SourceSuggestions = rawSuggestions.suggestions;\n\n      if (sourceSuggestions && sourceSuggestions.length > 0) {\n        this.setState(prevState => ({\n          sourceSuggestions,\n          eventId: {\n            ...prevState.eventId,\n            status: EventIdStatus.LOADED,\n          },\n        }));\n        return;\n      }\n\n      this.setState(prevState => ({\n        sourceSuggestions: valueSuggestions,\n        eventId: {\n          ...prevState.eventId,\n          status: EventIdStatus.NOT_FOUND,\n        },\n      }));\n    } catch {\n      this.setState(prevState => ({\n        eventId: {\n          ...prevState.eventId,\n          status: EventIdStatus.ERROR,\n        },\n      }));\n    }\n  }\n\n  convertRequestError(error: ReturnType<typeof handleError>) {\n    switch (error.type) {\n      case ErrorType.InvalidSelector:\n        this.setState(prevState => ({\n          errors: {\n            ...prevState.errors,\n            source: error.message,\n          },\n        }));\n        break;\n      case ErrorType.RegexParse:\n        this.setState(prevState => ({\n          errors: {\n            ...prevState.errors,\n            pattern: error.message,\n          },\n        }));\n        break;\n      default:\n        addErrorMessage(error.message);\n    }\n  }\n\n  handleChange = <R extends Rule, K extends KeysOfUnion<R>>(field: K, value: R[K]) => {\n    const values = {\n      ...this.state.values,\n      [field]: value,\n    };\n\n    if (values.type !== RuleType.PATTERN && values.pattern) {\n      values.pattern = '';\n    }\n\n    if (values.method !== MethodType.REPLACE && values.placeholder) {\n      values.placeholder = '';\n    }\n\n    this.setState(prevState => ({\n      values,\n      requiredValues: this.getRequiredValues(values),\n      errors: omit(prevState.errors, field),\n    }));\n  };\n\n  handleSave = async () => {\n    const {endpoint, api, onSubmitSuccess, closeModal, onGetNewRules} = this.props;\n    const newRules = onGetNewRules(this.state.values);\n\n    try {\n      const data = await submitRules(api, endpoint, newRules);\n      onSubmitSuccess(data);\n      closeModal();\n    } catch (error) {\n      this.convertRequestError(handleError(error));\n    }\n  };\n\n  handleValidateForm() {\n    const {values, requiredValues} = this.state;\n    const isFormValid = requiredValues.every(requiredValue => !!values[requiredValue]);\n    this.setState({isFormValid});\n  }\n\n  handleValidate =\n    <K extends keyof Values>(field: K) =>\n    () => {\n      const isFieldValueEmpty = !this.state.values[field].trim();\n\n      const fieldErrorAlreadyExist = this.state.errors[field];\n\n      if (isFieldValueEmpty && fieldErrorAlreadyExist) {\n        return;\n      }\n\n      if (isFieldValueEmpty && !fieldErrorAlreadyExist) {\n        this.setState(prevState => ({\n          errors: {\n            ...prevState.errors,\n            [field]: t('Field Required'),\n          },\n        }));\n        return;\n      }\n\n      if (!isFieldValueEmpty && fieldErrorAlreadyExist) {\n        this.clearError(field);\n      }\n    };\n\n  handleUpdateEventId = (eventId: string) => {\n    if (eventId === this.state.eventId.value) {\n      return;\n    }\n    this.setState({\n      eventId: {value: eventId, status: EventIdStatus.UNDEFINED},\n    });\n  };\n\n  render() {\n    const {values, errors, isFormValid, eventId, sourceSuggestions} = this.state;\n    const {title} = this.props;\n\n    return (\n      <Modal\n        {...this.props}\n        title={title}\n        onSave={this.handleSave}\n        disabled={!isFormValid}\n        content={\n          <Form\n            onChange={this.handleChange}\n            onValidate={this.handleValidate}\n            onUpdateEventId={this.handleUpdateEventId}\n            eventId={eventId}\n            errors={errors}\n            values={values}\n            sourceSuggestions={sourceSuggestions}\n          />\n        }\n      />\n    );\n  }\n}\n\nexport default ModalManager;\n","import {t} from 'sentry/locale';\n\nimport {ProjectId, Rule} from '../types';\n\nimport ModalManager from './modalManager';\n\ntype ModalManagerProps<T extends ProjectId> = ModalManager<T>['props'];\ntype Props<T extends ProjectId> = Omit<\n  ModalManagerProps<T>,\n  'title' | 'initialValues' | 'onGetNewRules'\n>;\n\nconst Add = <T extends ProjectId = undefined>({savedRules, ...props}: Props<T>) => {\n  const handleGetNewRules = (\n    values: Parameters<ModalManagerProps<T>['onGetNewRules']>[0]\n  ) => {\n    return [...savedRules, {...values, id: savedRules.length}] as Array<Rule>;\n  };\n\n  return (\n    <ModalManager\n      {...props}\n      savedRules={savedRules}\n      title={t('Add an advanced data scrubbing rule')}\n      onGetNewRules={handleGetNewRules}\n    />\n  );\n};\n\nexport default Add;\n","import {t} from 'sentry/locale';\n\nimport {ProjectId, Rule} from '../types';\n\nimport ModalManager from './modalManager';\n\ntype ModalManagerProps<T extends ProjectId> = ModalManager<T>['props'];\ntype Props<T extends ProjectId> = Omit<\n  ModalManagerProps<T>,\n  'title' | 'initialValues' | 'onGetNewRules'\n> & {\n  rule: Rule;\n};\n\nconst Edit = <T extends ProjectId>({savedRules, rule, ...props}: Props<T>) => {\n  const handleGetNewRules = (\n    values: Parameters<ModalManagerProps<T>['onGetNewRules']>[0]\n  ) => {\n    const updatedRule = {...values, id: rule.id};\n\n    const newRules = savedRules.map(savedRule => {\n      if (savedRule.id === updatedRule.id) {\n        return updatedRule;\n      }\n      return savedRule;\n    }) as Array<Rule>;\n\n    return newRules;\n  };\n\n  return (\n    <ModalManager\n      {...props}\n      savedRules={savedRules}\n      title={t('Edit an advanced data scrubbing rule')}\n      initialState={rule}\n      onGetNewRules={handleGetNewRules}\n    />\n  );\n};\n\nexport default Edit;\n","import {forwardRef} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport {IconDelete, IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport {MethodType, Rule, RuleType} from './types';\nimport {getMethodLabel, getRuleLabel} from './utils';\n\ntype Props = {\n  rules: Array<Rule>;\n  disabled?: boolean;\n  onDeleteRule?: (id: Rule['id']) => () => void;\n  onEditRule?: (id: Rule['id']) => () => void;\n};\n\nconst getListItemDescription = (rule: Rule) => {\n  const {method, type, source} = rule;\n  const methodLabel = getMethodLabel(method);\n  const typeLabel = getRuleLabel(type);\n\n  const descriptionDetails: Array<string> = [];\n\n  descriptionDetails.push(`[${methodLabel.label}]`);\n\n  descriptionDetails.push(\n    rule.type === RuleType.PATTERN ? `[${rule.pattern}]` : `[${typeLabel}]`\n  );\n\n  if (rule.method === MethodType.REPLACE && rule.placeholder) {\n    descriptionDetails.push(` with [${rule.placeholder}]`);\n  }\n\n  return `${descriptionDetails.join(' ')} ${t('from')} [${source}]`;\n};\n\nconst Rules = forwardRef(function RulesList(\n  {rules, onEditRule, onDeleteRule, disabled}: Props,\n  ref: React.Ref<HTMLUListElement>\n) {\n  return (\n    <List ref={ref} isDisabled={disabled} data-test-id=\"advanced-data-scrubbing-rules\">\n      {rules.map(rule => {\n        const {id} = rule;\n        return (\n          <ListItem key={id}>\n            <TextOverflow>{getListItemDescription(rule)}</TextOverflow>\n            {onEditRule && (\n              <Button\n                aria-label={t('Edit Rule')}\n                size=\"small\"\n                onClick={onEditRule(id)}\n                icon={<IconEdit />}\n                disabled={disabled}\n              />\n            )}\n            {onDeleteRule && (\n              <Button\n                aria-label={t('Delete Rule')}\n                size=\"small\"\n                onClick={onDeleteRule(id)}\n                icon={<IconDelete />}\n                disabled={disabled}\n              />\n            )}\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n});\n\nexport default Rules;\n\nconst List = styled('ul')<{\n  isDisabled?: boolean;\n}>`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  margin-bottom: 0 !important;\n  ${p =>\n    p.isDisabled &&\n    `\n      color: ${p.theme.gray200};\n      background: ${p.theme.backgroundSecondary};\n  `}\n`;\n\nconst ListItem = styled('li')`\n  display: grid;\n  grid-template-columns: auto max-content max-content;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n  &:hover {\n    background-color: ${p => p.theme.backgroundSecondary};\n  }\n  &:last-child {\n    border-bottom: 0;\n  }\n`;\n","import {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\nimport Rules from './rules';\nimport {Rule} from './types';\n\ntype Props = {\n  onDeleteRule: (rule: Rule['id']) => () => void;\n  onEditRule: (rule: Rule['id']) => () => void;\n  rules: Array<Rule>;\n  disabled?: boolean;\n};\n\nconst Content = ({rules, disabled, onDeleteRule, onEditRule}: Props) => {\n  if (rules.length === 0) {\n    return (\n      <EmptyMessage\n        icon={<IconWarning size=\"xl\" />}\n        description={t('You have no data scrubbing rules')}\n      />\n    );\n  }\n\n  return (\n    <Rules\n      rules={rules}\n      onDeleteRule={onDeleteRule}\n      onEditRule={onEditRule}\n      disabled={disabled}\n    />\n  );\n};\n\nexport default Content;\n","import {Applications, MethodType, PiiConfig, Rule, RuleDefault, RuleType} from './types';\n\n// Remap PII config format to something that is more usable in React. Ideally\n// we would stop doing this at some point and make some updates to how we\n// store this configuration on the server.\n//\n// For the time being the PII config format is documented at\n// https://getsentry.github.io/relay/pii-config/\n\nfunction convertRelayPiiConfig(relayPiiConfig?: string) {\n  const piiConfig = relayPiiConfig ? JSON.parse(relayPiiConfig) : {};\n  const rules: PiiConfig = piiConfig.rules || {};\n  const applications: Applications = piiConfig.applications || {};\n  const convertedRules: Array<Rule> = [];\n\n  for (const application in applications) {\n    for (const rule of applications[application]) {\n      const resolvedRule = rules[rule];\n      const id = convertedRules.length;\n      const source = application;\n\n      if (!resolvedRule) {\n        // Convert a \"built-in\" rule like \"@anything:remove\" to an object {\n        //   type: \"anything\",\n        //   method: \"remove\"\n        // }\n        if (rule[0] === '@') {\n          const typeAndMethod = rule.slice(1).split(':');\n          let [type] = typeAndMethod;\n          const [, method] = typeAndMethod;\n          if (type === 'urlauth') {\n            type = 'url_auth';\n          }\n          if (type === 'usssn') {\n            type = 'us_ssn';\n          }\n\n          convertedRules.push({\n            id,\n            method: method as RuleDefault['method'],\n            type: type as RuleDefault['type'],\n            source,\n          });\n        }\n        continue;\n      }\n\n      const {type, redaction} = resolvedRule;\n      const method = redaction.method as MethodType;\n\n      if (method === MethodType.REPLACE && resolvedRule.type === RuleType.PATTERN) {\n        convertedRules.push({\n          id,\n          method: MethodType.REPLACE,\n          type: RuleType.PATTERN,\n          source,\n          placeholder: redaction?.text,\n          pattern: resolvedRule.pattern,\n        });\n        continue;\n      }\n\n      if (method === MethodType.REPLACE) {\n        convertedRules.push({\n          id,\n          method: MethodType.REPLACE,\n          type,\n          source,\n          placeholder: redaction?.text,\n        });\n        continue;\n      }\n\n      if (resolvedRule.type === RuleType.PATTERN) {\n        convertedRules.push({\n          id,\n          method,\n          type: RuleType.PATTERN,\n          source,\n          pattern: resolvedRule.pattern,\n        });\n        continue;\n      }\n\n      convertedRules.push({id, method, type, source});\n    }\n  }\n\n  return convertedRules;\n}\n\nexport default convertRelayPiiConfig;\n","import {Component, createRef} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport Rules from './rules';\nimport {Rule} from './types';\n\ntype Props = {\n  rules: Array<Rule>;\n};\n\ntype State = {\n  isCollapsed: boolean;\n  contentHeight?: string;\n};\n\nclass OrganizationRules extends Component<Props, State> {\n  state: State = {\n    isCollapsed: true,\n  };\n\n  componentDidUpdate() {\n    this.loadContentHeight();\n  }\n\n  rulesRef = createRef<HTMLUListElement>();\n\n  loadContentHeight() {\n    if (!this.state.contentHeight) {\n      const contentHeight = this.rulesRef.current?.offsetHeight;\n      if (contentHeight) {\n        this.setState({contentHeight: `${contentHeight}px`});\n      }\n    }\n  }\n\n  handleToggleCollapsed = () => {\n    this.setState(prevState => ({\n      isCollapsed: !prevState.isCollapsed,\n    }));\n  };\n\n  render() {\n    const {rules} = this.props;\n    const {isCollapsed, contentHeight} = this.state;\n\n    if (rules.length === 0) {\n      return (\n        <Wrapper>\n          {t('There are no data scrubbing rules at the organization level')}\n        </Wrapper>\n      );\n    }\n    return (\n      <Wrapper isCollapsed={isCollapsed} contentHeight={contentHeight}>\n        <Header onClick={this.handleToggleCollapsed}>\n          <div>{t('Organization Rules')}</div>\n          <Button\n            title={\n              isCollapsed\n                ? t('Expand Organization Rules')\n                : t('Collapse Organization Rules')\n            }\n            icon={<IconChevron size=\"xs\" direction={isCollapsed ? 'down' : 'up'} />}\n            size=\"xsmall\"\n            aria-label={t('Toggle Organization Rules')}\n          />\n        </Header>\n        <Content>\n          <Rules rules={rules} ref={this.rulesRef} disabled />\n        </Content>\n      </Wrapper>\n    );\n  }\n}\n\nexport default OrganizationRules;\n\nconst Content = styled('div')`\n  transition: height 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  height: 0;\n  overflow: hidden;\n`;\n\nconst Header = styled('div')`\n  cursor: pointer;\n  display: grid;\n  grid-template-columns: 1fr auto;\n  align-items: center;\n  border-bottom: 1px solid ${p => p.theme.border};\n  padding: ${space(1)} ${space(2)};\n`;\n\nconst Wrapper = styled('div')<{contentHeight?: string; isCollapsed?: boolean}>`\n  color: ${p => p.theme.gray200};\n  background: ${p => p.theme.backgroundSecondary};\n  ${p => !p.contentHeight && `padding: ${space(1)} ${space(2)}`};\n  ${p => !p.isCollapsed && ` border-bottom: 1px solid ${p.theme.border}`};\n  ${p =>\n    !p.isCollapsed &&\n    p.contentHeight &&\n    `\n      ${Content} {\n        height: ${p.contentHeight};\n      }\n    `}\n`;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelAlert, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\nimport Add from './modals/add';\nimport Edit from './modals/edit';\nimport Content from './content';\nimport convertRelayPiiConfig from './convertRelayPiiConfig';\nimport OrganizationRules from './organizationRules';\nimport submitRules from './submitRules';\nimport {ProjectId, Rule} from './types';\n\nconst ADVANCED_DATASCRUBBING_LINK =\n  'https://docs.sentry.io/product/data-management-settings/scrubbing/advanced-datascrubbing/';\n\ntype Props<T extends ProjectId> = {\n  endpoint: string;\n  organization: Organization;\n  additionalContext?: React.ReactNode;\n  disabled?: boolean;\n  onSubmitSuccess?: (data: T extends undefined ? Organization : Project) => void;\n  projectId?: T;\n  relayPiiConfig?: string;\n};\n\ntype State = {\n  orgRules: Array<Rule>;\n  rules: Array<Rule>;\n  savedRules: Array<Rule>;\n  relayPiiConfig?: string;\n};\n\nclass DataScrubbing<T extends ProjectId = undefined> extends Component<Props<T>, State> {\n  state: State = {\n    rules: [],\n    savedRules: [],\n    relayPiiConfig: this.props.relayPiiConfig,\n    orgRules: [],\n  };\n\n  componentDidMount() {\n    this.loadRules();\n    this.loadOrganizationRules();\n  }\n\n  componentDidUpdate(_prevProps: Props<T>, prevState: State) {\n    if (prevState.relayPiiConfig !== this.state.relayPiiConfig) {\n      this.loadRules();\n    }\n  }\n\n  componentWillUnmount() {\n    this.api.clear();\n  }\n\n  api = new Client();\n\n  loadOrganizationRules() {\n    const {organization, projectId} = this.props;\n\n    if (projectId) {\n      try {\n        this.setState({\n          orgRules: convertRelayPiiConfig(organization.relayPiiConfig),\n        });\n      } catch {\n        addErrorMessage(t('Unable to load organization rules'));\n      }\n    }\n  }\n\n  loadRules() {\n    try {\n      const convertedRules = convertRelayPiiConfig(this.state.relayPiiConfig);\n      this.setState({\n        rules: convertedRules,\n        savedRules: convertedRules,\n      });\n    } catch {\n      addErrorMessage(t('Unable to load project rules'));\n    }\n  }\n\n  successfullySaved(\n    response: T extends undefined ? Organization : Project,\n    successMessage: string\n  ) {\n    const {onSubmitSuccess} = this.props;\n    this.setState({rules: convertRelayPiiConfig(response.relayPiiConfig)});\n    addSuccessMessage(successMessage);\n    onSubmitSuccess?.(response);\n  }\n\n  handleOpenAddModal = () => {\n    const {rules} = this.state;\n    openModal(modalProps => (\n      <Add\n        {...modalProps}\n        projectId={this.props.projectId}\n        savedRules={rules}\n        api={this.api}\n        endpoint={this.props.endpoint}\n        orgSlug={this.props.organization.slug}\n        onSubmitSuccess={response => {\n          this.successfullySaved(response, t('Successfully added data scrubbing rule'));\n        }}\n      />\n    ));\n  };\n\n  handleOpenEditModal = (id: Rule['id']) => () => {\n    const {rules} = this.state;\n    openModal(modalProps => (\n      <Edit\n        {...modalProps}\n        rule={rules[id]}\n        projectId={this.props.projectId}\n        savedRules={rules}\n        api={this.api}\n        endpoint={this.props.endpoint}\n        orgSlug={this.props.organization.slug}\n        onSubmitSuccess={response => {\n          this.successfullySaved(response, t('Successfully updated data scrubbing rule'));\n        }}\n      />\n    ));\n  };\n\n  handleDelete = (id: Rule['id']) => async () => {\n    const {rules} = this.state;\n    const filteredRules = rules.filter(rule => rule.id !== id);\n\n    try {\n      const data = await submitRules(this.api, this.props.endpoint, filteredRules);\n      if (data?.relayPiiConfig) {\n        const convertedRules = convertRelayPiiConfig(data.relayPiiConfig);\n\n        this.setState({rules: convertedRules});\n        addSuccessMessage(t('Successfully deleted data scrubbing rule'));\n      }\n    } catch {\n      addErrorMessage(t('An unknown error occurred while deleting data scrubbing rule'));\n    }\n  };\n\n  render() {\n    const {additionalContext, disabled, projectId} = this.props;\n    const {orgRules, rules} = this.state;\n\n    return (\n      <Panel data-test-id=\"advanced-data-scrubbing\" id=\"advanced-data-scrubbing\">\n        <PanelHeader>\n          <div>{t('Advanced Data Scrubbing')}</div>\n        </PanelHeader>\n        <PanelAlert type=\"info\">\n          {additionalContext}{' '}\n          {`${t('The new rules will only apply to upcoming events. ')}`}{' '}\n          {tct('For more details, see [linkToDocs].', {\n            linkToDocs: (\n              <ExternalLink href={ADVANCED_DATASCRUBBING_LINK}>\n                {t('full documentation on data scrubbing')}\n              </ExternalLink>\n            ),\n          })}\n        </PanelAlert>\n        <PanelBody>\n          {projectId && <OrganizationRules rules={orgRules} />}\n          <Content\n            rules={rules}\n            onDeleteRule={this.handleDelete}\n            onEditRule={this.handleOpenEditModal}\n            disabled={disabled}\n          />\n          <PanelAction>\n            <Button href={ADVANCED_DATASCRUBBING_LINK} target=\"_blank\">\n              {t('Read Docs')}\n            </Button>\n            <Button\n              disabled={disabled}\n              onClick={this.handleOpenAddModal}\n              priority=\"primary\"\n            >\n              {t('Add Rule')}\n            </Button>\n          </PanelAction>\n        </PanelBody>\n      </Panel>\n    );\n  }\n}\n\nexport default DataScrubbing;\n\nconst PanelAction = styled('div')`\n  padding: ${space(1)} ${space(2)};\n  position: relative;\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: auto auto;\n  justify-content: flex-end;\n  border-top: 1px solid ${p => p.theme.border};\n`;\n"],"names":["formatStoreCrashReports","value","organizationValue","defined","tct","t","SettingScope","getStoreCrashReportsValues","settingScope","values","Project","unshift","RuleType","MethodType","EventIdStatus","SourceSuggestionType","getSubmitFormatRule","rule","type","PATTERN","method","REPLACE","pattern","redaction","text","placeholder","api","endpoint","rules","applications","submitFormatRules","i","length","ruleId","String","source","includes","push","piiConfig","requestPromise","data","relayPiiConfig","JSON","stringify","getRuleLabel","ANYTHING","IMEI","MAC","EMAIL","PEMKEY","URLAUTH","USSSN","USER_PATH","UUID","CREDITCARD","PASSWORD","IP","getMethodLabel","MASK","label","description","HASH","REMOVE","binarySuggestions","BINARY","unarySuggestions","UNARY","valueSuggestions","VALUE","ADVANCED_DATA_SCRUBBING_LOCALSTORAGE_KEY","saveToStorage","obj","localStorage","err","Sentry","scope","setExtra","saveToSourceGroupData","eventId","sourceSuggestions","status","LOADING","LOADED","onClickIconClose","ERROR","INVALID","NOT_FOUND","CloseIcon","onClick","title","StyledIconClose","size","isSaving","color","IconClose","p","theme","gray200","gray300","EventIdField","Component","this","props","event","target","replace","trim","state","setState","UNDEFINED","preventDefault","isEventIdValid","onUpdateEventId","keyCode","componentDidUpdate","prevProps","isEqual","loadState","getErrorMessage","render","disabled","help","inline","error","flexibleControlStateSize","stacked","showHelpInTooltip","FieldWrapper","StyledInput","name","onChange","handleChange","onKeyDown","handleKeyDown","onBlur","handleBlur","Status","handleClickIconClose","Input","space","SelectField","createRef","componentDidMount","selectRef","current","select","inputRef","autocomplete","isSearchable","styles","control","provided","minHeight","height","ref","components","Option","isSelected","Wrapper","Description","openOnFocus","SourceSuggestionExamples","examples","sourceName","ExampleCard","position","header","body","map","example","Content","Hovercard","gray400","fontSizeSmall","defaultHelp","SourceField","suggestions","fieldValues","activeSuggestion","showSuggestions","hideCaret","loadFieldValues","suggestion","getNewFieldValues","changeParentValue","_value","persist","scrollToSuggestion","handleClickSuggestionItem","toggleSuggestions","isRegExMatchesSelected","checkPossiblyRegExMatchExpression","getAllSuggestions","getValueSuggestions","getFilteredSuggestions","valuesToBeFiltered","filter","s","toLowerCase","indexOf","getNewSuggestions","lastFieldValue","penultimateFieldValue","Array","isArray","STRING","newValue","splittedValue","split","splittedValueIndex","valueAfterUnaryOperator","selector","find","filteredSuggestions","suggestionList","children","scrollIntoView","behavior","block","index","fieldValue","join","isMaybeRegExp","RegExp","test","selectorField","autoComplete","onFocus","handleFocus","required","Fragment","Suggestions","slice","Suggestion","active","tabIndex","SuggestionDescription","SuggestionsOverlay","handleClickOutside","InputField","border","background","fontSizeMedium","backgroundSecondary","Form","displayEventId","field","prevState","errors","onValidate","FieldGroup","hasTwoColumns","options","sortBy","Object","RegularExpression","ToggleWrapper","Toggle","priority","handleToggleEventId","direction","SourceGroup","isExpanded","breakpoints","small","borderRadius","dropShadowLight","familyMono","Button","subText","textColor","ErrorType","Modal","onSave","content","Header","Body","Footer","closeModal","closeButton","gap","ModalManager","getDefaultState","requiredValues","getRequiredValues","omit","async","onSubmitSuccess","onGetNewRules","newRules","submitRules","convertRequestError","errorMessage","responseJSON","Unknown","message","startsWith","line","InvalidSelector","regex","RegexParse","handleError","isFieldValueEmpty","fieldErrorAlreadyExist","clearError","handleValidateForm","_prevProps","loadSourceSuggestions","fetchedSourceGroupData","storage","parse","fetchFromStorage","sourceGroupData","fetchSourceGroupData","getInitialValues","isFormValid","initialState","orgSlug","projectId","query","addErrorMessage","every","requiredValue","handleSave","handleValidate","handleUpdateEventId","Add","savedRules","id","Edit","updatedRule","savedRule","getListItemDescription","methodLabel","typeLabel","descriptionDetails","forwardRef","onEditRule","onDeleteRule","List","isDisabled","ListItem","icon","convertedRules","application","resolvedRule","typeAndMethod","OrganizationRules","isCollapsed","loadContentHeight","contentHeight","rulesRef","offsetHeight","handleToggleCollapsed","ADVANCED_DATASCRUBBING_LINK","DataScrubbing","orgRules","Client","openModal","modalProps","organization","slug","response","successfullySaved","filteredRules","convertRelayPiiConfig","addSuccessMessage","loadRules","loadOrganizationRules","componentWillUnmount","clear","successMessage","additionalContext","linkToDocs","href","handleDelete","handleOpenEditModal","PanelAction","handleOpenAddModal"],"sourceRoot":""}