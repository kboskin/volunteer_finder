{"version":3,"file":"chunks/app_utils_discover_genericDiscoverQuery_tsx-app_views_performance_data_tsx-app_views_performa-15aeba.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/performance/data.tsx","webpack:///./app/views/performance/landing/utils.tsx","webpack:///./app/views/performance/trends/types.tsx","webpack:///./app/views/performance/trends/utils.tsx","webpack:///./app/views/performance/utils.tsx","webpack:///./app/views/performance/vitalDetail/utils.tsx"],"sourcesContent":["import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nimport {decodeScalar} from '../queryString';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer, location} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(props.location);\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    if (['events', 'eventsv2'].includes(props.route)) {\n      const queryUserModified = decodeScalar(location.query?.userModified);\n      if (queryUserModified !== undefined) {\n        payload.user_modified = queryUserModified;\n      }\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {api, beforeFetch, afterFetch, didFetch, eventView, orgSlug, route, setError} =\n      this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload);\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams\n): Promise<[T, string | undefined, ResponseMeta | undefined]> {\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {Location} from 'history';\n\nimport {COL_WIDTH_UNDEFINED} from 'sentry/components/gridEditable';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {NewQuery, Organization, Project, SelectValue} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getCurrentTrendParameter} from 'sentry/views/performance/trends/utils';\n\nimport {getCurrentLandingDisplay, LandingDisplayField} from './landing/utils';\nimport {\n  getVitalDetailTableMehStatusFunction,\n  getVitalDetailTablePoorStatusFunction,\n  vitalNameFromLocation,\n} from './vitalDetail/utils';\n\nexport const DEFAULT_STATS_PERIOD = '24h';\nexport const DEFAULT_PROJECT_THRESHOLD_METRIC = 'duration';\nexport const DEFAULT_PROJECT_THRESHOLD = 300;\n\nexport const COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'tpm',\n  'p50',\n  'p95',\n  'failure rate',\n  'apdex',\n  'users',\n  'user misery',\n];\n\nexport enum PERFORMANCE_TERM {\n  TPM = 'tpm',\n  THROUGHPUT = 'throughput',\n  FAILURE_RATE = 'failureRate',\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  LCP = 'lcp',\n  FCP = 'fcp',\n  FID = 'fid',\n  CLS = 'cls',\n  STATUS_BREAKDOWN = 'statusBreakdown',\n  DURATION_DISTRIBUTION = 'durationDistribution',\n  USER_MISERY = 'userMisery',\n  APDEX = 'apdex',\n  APP_START_COLD = 'appStartCold',\n  APP_START_WARM = 'appStartWarm',\n  SLOW_FRAMES = 'slowFrames',\n  FROZEN_FRAMES = 'frozenFrames',\n  STALL_PERCENTAGE = 'stallPercentage',\n  MOST_ISSUES = 'mostIssues',\n  MOST_ERRORS = 'mostErrors',\n  SLOW_HTTP_SPANS = 'slowHTTPSpans',\n}\n\nexport type TooltipOption = SelectValue<string> & {\n  tooltip: string;\n};\n\nexport function getAxisOptions(organization: Organization): TooltipOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n      value: 'apdex()',\n      label: t('Apdex'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      value: 'failure_rate()',\n      label: t('Failure Rate'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n      value: 'p50()',\n      label: t('p50 Duration'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n      value: 'p95()',\n      label: t('p95 Duration'),\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P99),\n      value: 'p99()',\n      label: t('p99 Duration'),\n    },\n  ];\n}\n\nexport type AxisOption = TooltipOption & {\n  field: string;\n  label: string;\n  backupOption?: AxisOption;\n  isDistribution?: boolean;\n  isLeftDefault?: boolean;\n  isRightDefault?: boolean;\n};\n\nexport function getFrontendAxisOptions(organization: Organization): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.LCP),\n      value: `p75(lcp)`,\n      label: t('LCP p75'),\n      field: 'p75(measurements.lcp)',\n      isLeftDefault: true,\n      backupOption: {\n        tooltip: getTermHelp(organization, PERFORMANCE_TERM.FCP),\n        value: `p75(fcp)`,\n        label: t('FCP p75'),\n        field: 'p75(measurements.fcp)',\n      },\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'lcp_distribution',\n      label: t('LCP Distribution'),\n      field: 'measurements.lcp',\n      isDistribution: true,\n      isRightDefault: true,\n      backupOption: {\n        tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n        value: 'fcp_distribution',\n        label: t('FCP Distribution'),\n        field: 'measurements.fcp',\n        isDistribution: true,\n      },\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n      field: 'tpm()',\n    },\n  ];\n}\n\nexport function getFrontendOtherAxisOptions(organization: Organization): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n      value: `p50()`,\n      label: t('Duration p50'),\n      field: 'p50(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n      value: `p75()`,\n      label: t('Duration p75'),\n      field: 'p75(transaction.duration)',\n      isLeftDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n      value: `p95()`,\n      label: t('Duration p95'),\n      field: 'p95(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'duration_distribution',\n      label: t('Duration Distribution'),\n      field: 'transaction.duration',\n      isDistribution: true,\n      isRightDefault: true,\n    },\n  ];\n}\n\nexport function getBackendAxisOptions(organization: Organization): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n      value: `p50()`,\n      label: t('Duration p50'),\n      field: 'p50(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n      value: `p75()`,\n      label: t('Duration p75'),\n      field: 'p75(transaction.duration)',\n      isLeftDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n      value: `p95()`,\n      label: t('Duration p95'),\n      field: 'p95(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P99),\n      value: `p99()`,\n      label: t('Duration p99'),\n      field: 'p99(transaction.duration)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n      field: 'tpm()',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      value: 'failure_rate()',\n      label: t('Failure Rate'),\n      field: 'failure_rate()',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'duration_distribution',\n      label: t('Duration Distribution'),\n      field: 'transaction.duration',\n      isDistribution: true,\n      isRightDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n      value: 'apdex()',\n      label: t('Apdex'),\n      field: 'apdex()',\n    },\n  ];\n}\n\nexport function getMobileAxisOptions(organization: Organization): AxisOption[] {\n  return [\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n      value: `p50(measurements.app_start_cold)`,\n      label: t('Cold Start Duration p50'),\n      field: 'p50(measurements.app_start_cold)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n      value: `p75(measurements.app_start_cold)`,\n      label: t('Cold Start Duration p75'),\n      field: 'p75(measurements.app_start_cold)',\n      isLeftDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n      value: `p95(measurements.app_start_cold)`,\n      label: t('Cold Start Duration p95'),\n      field: 'p95(measurements.app_start_cold)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n      value: `p99(measurements.app_start_cold)`,\n      label: t('Cold Start Duration p99'),\n      field: 'p99(measurements.app_start_cold)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'app_start_cold_distribution',\n      label: t('Cold Start Distribution'),\n      field: 'measurements.app_start_cold',\n      isDistribution: true,\n      isRightDefault: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n      value: `p50(measurements.app_start_warm)`,\n      label: t('Warm Start Duration p50'),\n      field: 'p50(measurements.app_start_warm)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n      value: `p75(measurements.app_start_warm)`,\n      label: t('Warm Start Duration p75'),\n      field: 'p75(measurements.app_start_warm)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n      value: `p95(measurements.app_start_warm)`,\n      label: t('Warm Start Duration p95'),\n      field: 'p95(measurements.app_start_warm)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n      value: `p99(measurements.app_start_warm)`,\n      label: t('Warm Start Duration p99'),\n      field: 'p99(measurements.app_start_warm)',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n      value: 'app_start_warm_distribution',\n      label: t('Warm Start Distribution'),\n      field: 'measurements.app_start_warm',\n      isDistribution: true,\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n      value: 'tpm()',\n      label: t('Transactions Per Minute'),\n      field: 'tpm()',\n    },\n    {\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      value: 'failure_rate()',\n      label: t('Failure Rate'),\n      field: 'failure_rate()',\n    },\n  ];\n}\n\ntype TermFormatter = (organization: Organization) => string;\n\nexport const PERFORMANCE_TERMS: Record<PERFORMANCE_TERM, TermFormatter> = {\n  tpm: () => t('TPM is the number of recorded transaction events per minute.'),\n  throughput: () =>\n    t('Throughput is the number of recorded transaction events per minute.'),\n  failureRate: () =>\n    t(\n      'Failure rate is the percentage of recorded transactions that had a known and unsuccessful status.'\n    ),\n  p50: () => t('p50 indicates the duration that 50% of transactions are faster than.'),\n  p75: () => t('p75 indicates the duration that 75% of transactions are faster than.'),\n  p95: () => t('p95 indicates the duration that 95% of transactions are faster than.'),\n  p99: () => t('p99 indicates the duration that 99% of transactions are faster than.'),\n  lcp: () =>\n    t('Largest contentful paint (LCP) is a web vital meant to represent user load times'),\n  fcp: () =>\n    t('First contentful paint (FCP) is a web vital meant to represent user load times'),\n  fid: () =>\n    t(\n      'First input delay (FID) is a web vital representing load for the first user interaction on a page.'\n    ),\n  cls: () =>\n    t(\n      'Cumulative layout shift (CLS) is a web vital measuring unexpected visual shifting a user experiences.'\n    ),\n  statusBreakdown: () =>\n    t(\n      'The breakdown of transaction statuses. This may indicate what type of failure it is.'\n    ),\n  durationDistribution: () =>\n    t(\n      'Distribution buckets counts of transactions at specifics times for your current date range'\n    ),\n  userMisery: () =>\n    t(\n      \"User Misery is a score that represents the number of unique users who have experienced load times 4x the project's configured threshold. Adjust project threshold in project performance settings.\"\n    ),\n  apdex: () =>\n    t(\n      'Apdex is the ratio of both satisfactory and tolerable response times to all response times. To adjust the tolerable threshold, go to project performance settings.'\n    ),\n  appStartCold: () =>\n    t('Cold start is a measure of the application start up time from scratch.'),\n  appStartWarm: () =>\n    t('Warm start is a measure of the application start up time while still in memory.'),\n  slowFrames: () => t('The count of the number of slow frames in the transaction.'),\n  frozenFrames: () => t('The count of the number of frozen frames in the transaction.'),\n  mostErrors: () => t('Transactions with the most associated errors.'),\n  mostIssues: () => t('The most instances of an issue for a related transaction.'),\n  slowHTTPSpans: () => t('The transactions with the slowest spans of a certain type.'),\n  stallPercentage: () =>\n    t(\n      'The percentage of the transaction duration in which the application is in a stalled state.'\n    ),\n};\n\nexport function getTermHelp(\n  organization: Organization,\n  term: keyof typeof PERFORMANCE_TERMS\n): string {\n  if (!PERFORMANCE_TERMS.hasOwnProperty(term)) {\n    return '';\n  }\n  return PERFORMANCE_TERMS[term](organization);\n}\n\nfunction shouldAddDefaultConditions(location: Location) {\n  const {query} = location;\n  const searchQuery = decodeScalar(query.query, '');\n  const isDefaultQuery = decodeScalar(query.isDefaultQuery);\n  return !searchQuery && isDefaultQuery !== 'false';\n}\n\nfunction generateGenericPerformanceEventView(\n  location: Location,\n  withStaticFilters: boolean\n): EventView {\n  const {query} = location;\n\n  const fields = [\n    'team_key_transaction',\n    'transaction',\n    'project',\n    'tpm()',\n    'p50()',\n    'p95()',\n    'failure_rate()',\n    'apdex()',\n    'count_unique(user)',\n    'count_miserable(user)',\n    'user_misery()',\n  ];\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields,\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = withStaticFilters ? '' : decodeScalar(query.query, '');\n  const conditions = new MutableSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (shouldAddDefaultConditions(location) && !withStaticFilters) {\n    conditions.setFilterValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0 && !withStaticFilters) {\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [`*${conditions.freeText.join(' ')}*`],\n      false\n    );\n    conditions.freeText = [];\n  }\n  savedQuery.query = conditions.formatString();\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n\n  if (query.trendParameter) {\n    // projects and projectIds are not necessary here since trendParameter will always\n    // be present in location and will not be determined based on the project type\n    const trendParameter = getCurrentTrendParameter(location, [], []);\n    if (Boolean(WEB_VITAL_DETAILS[trendParameter.column])) {\n      eventView.additionalConditions.addFilterValues('has', [trendParameter.column]);\n    }\n  }\n\n  return eventView;\n}\n\nfunction generateBackendPerformanceEventView(\n  location: Location,\n  withStaticFilters: boolean\n): EventView {\n  const {query} = location;\n\n  const fields = [\n    'team_key_transaction',\n    'transaction',\n    'project',\n    'transaction.op',\n    'http.method',\n    'tpm()',\n    'p50()',\n    'p95()',\n    'failure_rate()',\n    'apdex()',\n    'count_unique(user)',\n    'count_miserable(user)',\n    'user_misery()',\n  ];\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields,\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = withStaticFilters ? '' : decodeScalar(query.query, '');\n  const conditions = new MutableSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (shouldAddDefaultConditions(location) && !withStaticFilters) {\n    conditions.setFilterValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0 && !withStaticFilters) {\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [`*${conditions.freeText.join(' ')}*`],\n      false\n    );\n    conditions.freeText = [];\n  }\n  savedQuery.query = conditions.formatString();\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n\n  return eventView;\n}\n\nfunction generateMobilePerformanceEventView(\n  location: Location,\n  projects: Project[],\n  genericEventView: EventView,\n  withStaticFilters: boolean\n): EventView {\n  const {query} = location;\n\n  const fields = [\n    'team_key_transaction',\n    'transaction',\n    'project',\n    'transaction.op',\n    'tpm()',\n    'p75(measurements.frames_slow_rate)',\n    'p75(measurements.frames_frozen_rate)',\n  ];\n\n  // At this point, all projects are mobile projects.\n  // If in addition to that, all projects are react-native projects,\n  // then show the stall percentage as well.\n  const projectIds = genericEventView.project;\n  if (projectIds.length > 0 && projectIds[0] !== ALL_ACCESS_PROJECTS) {\n    const selectedProjects = projects.filter(p =>\n      projectIds.includes(parseInt(p.id, 10))\n    );\n    if (\n      selectedProjects.length > 0 &&\n      selectedProjects.every(project => project.platform === 'react-native')\n    ) {\n      fields.push('p75(measurements.stall_percentage)');\n    }\n  }\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [...fields, 'count_unique(user)', 'count_miserable(user)', 'user_misery()'],\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = withStaticFilters ? '' : decodeScalar(query.query, '');\n  const conditions = new MutableSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (shouldAddDefaultConditions(location) && !withStaticFilters) {\n    conditions.setFilterValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0 && !withStaticFilters) {\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [`*${conditions.freeText.join(' ')}*`],\n      false\n    );\n    conditions.freeText = [];\n  }\n  savedQuery.query = conditions.formatString();\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n\n  return eventView;\n}\n\nfunction generateFrontendPageloadPerformanceEventView(\n  location: Location,\n  withStaticFilters: boolean\n): EventView {\n  const {query} = location;\n\n  const fields = [\n    'team_key_transaction',\n    'transaction',\n    'project',\n    'tpm()',\n    'p75(measurements.fcp)',\n    'p75(measurements.lcp)',\n    'p75(measurements.fid)',\n    'p75(measurements.cls)',\n    'count_unique(user)',\n    'count_miserable(user)',\n    'user_misery()',\n  ];\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields,\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = withStaticFilters ? '' : decodeScalar(query.query, '');\n  const conditions = new MutableSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (shouldAddDefaultConditions(location) && !withStaticFilters) {\n    conditions.setFilterValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0 && !withStaticFilters) {\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [`*${conditions.freeText.join(' ')}*`],\n      false\n    );\n    conditions.freeText = [];\n  }\n  savedQuery.query = conditions.formatString();\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n  eventView.additionalConditions.addFilterValues('transaction.op', ['pageload']);\n\n  return eventView;\n}\n\nfunction generateFrontendOtherPerformanceEventView(\n  location: Location,\n  withStaticFilters: boolean\n): EventView {\n  const {query} = location;\n\n  const fields = [\n    'team_key_transaction',\n    'transaction',\n    'project',\n    'transaction.op',\n    'tpm()',\n    'p50(transaction.duration)',\n    'p75(transaction.duration)',\n    'p95(transaction.duration)',\n    'count_unique(user)',\n    'count_miserable(user)',\n    'user_misery()',\n  ];\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Performance'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields,\n    version: 2,\n  };\n\n  const widths = Array(savedQuery.fields.length).fill(COL_WIDTH_UNDEFINED);\n  widths[savedQuery.fields.length - 1] = '110';\n  savedQuery.widths = widths;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-tpm');\n\n  const searchQuery = withStaticFilters ? '' : decodeScalar(query.query, '');\n  const conditions = new MutableSearch(searchQuery);\n\n  // This is not an override condition since we want the duration to appear in the search bar as a default.\n  if (shouldAddDefaultConditions(location) && !withStaticFilters) {\n    conditions.setFilterValues('transaction.duration', ['<15m']);\n  }\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0 && !withStaticFilters) {\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [`*${conditions.freeText.join(' ')}*`],\n      false\n    );\n    conditions.freeText = [];\n  }\n  savedQuery.query = conditions.formatString();\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n\n  return eventView;\n}\n\nexport function generatePerformanceEventView(\n  location: Location,\n  projects: Project[],\n  {isTrends = false, withStaticFilters = false} = {}\n) {\n  const eventView = generateGenericPerformanceEventView(location, withStaticFilters);\n\n  if (isTrends) {\n    return eventView;\n  }\n\n  const display = getCurrentLandingDisplay(location, projects, eventView);\n  switch (display?.field) {\n    case LandingDisplayField.FRONTEND_PAGELOAD:\n      return generateFrontendPageloadPerformanceEventView(location, withStaticFilters);\n    case LandingDisplayField.FRONTEND_OTHER:\n      return generateFrontendOtherPerformanceEventView(location, withStaticFilters);\n    case LandingDisplayField.BACKEND:\n      return generateBackendPerformanceEventView(location, withStaticFilters);\n    case LandingDisplayField.MOBILE:\n      return generateMobilePerformanceEventView(\n        location,\n        projects,\n        eventView,\n        withStaticFilters\n      );\n    default:\n      return eventView;\n  }\n}\n\nexport function generatePerformanceVitalDetailView(location: Location): EventView {\n  const {query} = location;\n\n  const vitalName = vitalNameFromLocation(location);\n\n  const hasStartAndEnd = query.start && query.end;\n  const savedQuery: NewQuery = {\n    id: undefined,\n    name: t('Vitals Performance Details'),\n    query: 'event.type:transaction',\n    projects: [],\n    fields: [\n      'team_key_transaction',\n      'transaction',\n      'project',\n      'count_unique(user)',\n      'count()',\n      `p50(${vitalName})`,\n      `p75(${vitalName})`,\n      `p95(${vitalName})`,\n      getVitalDetailTablePoorStatusFunction(vitalName),\n      getVitalDetailTableMehStatusFunction(vitalName),\n    ],\n    version: 2,\n    yAxis: [`p75(${vitalName})`],\n  };\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    savedQuery.range = DEFAULT_STATS_PERIOD;\n  }\n  savedQuery.orderby = decodeScalar(query.sort, '-count');\n\n  const searchQuery = decodeScalar(query.query, '');\n  const conditions = new MutableSearch(searchQuery);\n\n  // If there is a bare text search, we want to treat it as a search\n  // on the transaction name.\n  if (conditions.freeText.length > 0) {\n    // the query here is a user entered condition, no need to escape it\n    conditions.setFilterValues(\n      'transaction',\n      [`*${conditions.freeText.join(' ')}*`],\n      false\n    );\n    conditions.freeText = [];\n  }\n  conditions.setFilterValues('event.type', ['transaction']);\n  savedQuery.query = conditions.formatString();\n\n  const eventView = EventView.fromNewQueryWithLocation(savedQuery, location);\n\n  eventView.additionalConditions.addFilterValues('event.type', ['transaction']);\n  eventView.additionalConditions.addFilterValues('has', [vitalName]);\n\n  return eventView;\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  formatAbbreviatedNumber,\n  formatFloat,\n  formatPercentage,\n  getDuration,\n} from 'sentry/utils/formatters';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {AxisOption, getTermHelp, PERFORMANCE_TERM} from '../data';\nimport {Rectangle} from '../transactionSummary/transactionVitals/types';\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nexport const LEFT_AXIS_QUERY_KEY = 'left';\nexport const RIGHT_AXIS_QUERY_KEY = 'right';\n\ntype LandingDisplay = {\n  field: LandingDisplayField;\n  label: string;\n};\n\nexport enum LandingDisplayField {\n  ALL = 'all',\n  FRONTEND_PAGELOAD = 'frontend_pageload',\n  FRONTEND_OTHER = 'frontend_other',\n  BACKEND = 'backend',\n  MOBILE = 'mobile',\n}\n\nexport const LANDING_DISPLAYS = [\n  {\n    label: 'All Transactions',\n    field: LandingDisplayField.ALL,\n  },\n  {\n    label: 'Web Vitals',\n    field: LandingDisplayField.FRONTEND_PAGELOAD,\n  },\n  {\n    label: 'Frontend',\n    field: LandingDisplayField.FRONTEND_OTHER,\n  },\n  {\n    label: 'Backend',\n    field: LandingDisplayField.BACKEND,\n  },\n  {\n    label: 'Mobile',\n    field: LandingDisplayField.MOBILE,\n  },\n];\n\nexport function excludeTransaction(\n  transaction: string | React.ReactText,\n  props: {eventView: EventView; location: Location}\n) {\n  const {eventView, location} = props;\n\n  const searchConditions = new MutableSearch(eventView.query);\n  searchConditions.addFilterValues('!transaction', [`${transaction}`]);\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: {\n      ...location.query,\n      cursor: undefined,\n      query: searchConditions.formatString(),\n    },\n  });\n}\n\nexport function getLandingDisplayFromParam(location: Location) {\n  const landingField = decodeScalar(location?.query?.landingDisplay);\n\n  const display = LANDING_DISPLAYS.find(({field}) => field === landingField);\n  return display;\n}\n\nexport function getDefaultDisplayForPlatform(projects: Project[], eventView?: EventView) {\n  const defaultDisplayField = getDefaultDisplayFieldForPlatform(projects, eventView);\n\n  const defaultDisplay = LANDING_DISPLAYS.find(\n    ({field}) => field === defaultDisplayField\n  );\n  return defaultDisplay || LANDING_DISPLAYS[0];\n}\n\nexport function getCurrentLandingDisplay(\n  location: Location,\n  projects: Project[],\n  eventView?: EventView\n): LandingDisplay {\n  const display = getLandingDisplayFromParam(location);\n  if (display) {\n    return display;\n  }\n\n  return getDefaultDisplayForPlatform(projects, eventView);\n}\n\nexport function handleLandingDisplayChange(\n  field: LandingDisplayField,\n  location: Location,\n  projects: Project[],\n  organization: Organization,\n  eventView?: EventView\n) {\n  // Transaction op can affect the display and show no results if it is explicitly set.\n  const query = decodeScalar(location.query.query, '');\n  const searchConditions = new MutableSearch(query);\n  searchConditions.removeFilter('transaction.op');\n\n  const queryWithConditions = {\n    ...omit(location.query, ['landingDisplay', 'sort']),\n    query: searchConditions.formatString(),\n  };\n\n  delete queryWithConditions[LEFT_AXIS_QUERY_KEY];\n  delete queryWithConditions[RIGHT_AXIS_QUERY_KEY];\n\n  const defaultDisplay = getDefaultDisplayFieldForPlatform(projects, eventView);\n  const currentDisplay = getCurrentLandingDisplay(location, projects, eventView).field;\n\n  const newQuery: {query: string; landingDisplay?: LandingDisplayField} =\n    defaultDisplay === field\n      ? {...queryWithConditions}\n      : {...queryWithConditions, landingDisplay: field};\n\n  trackAdvancedAnalyticsEvent('performance_views.landingv3.display_change', {\n    organization,\n    change_to_display: field,\n    default_display: defaultDisplay,\n    current_display: currentDisplay,\n    is_default: defaultDisplay === currentDisplay,\n  });\n\n  browserHistory.push({\n    pathname: location.pathname,\n    query: newQuery,\n  });\n}\n\nexport function getChartWidth(chartData: HistogramData, refPixelRect: Rectangle | null) {\n  const distance = refPixelRect ? refPixelRect.point2.x - refPixelRect.point1.x : 0;\n  const chartWidth = chartData.length * distance;\n\n  return {\n    chartWidth,\n  };\n}\n\nexport function getDefaultDisplayFieldForPlatform(\n  projects: Project[],\n  eventView?: EventView\n) {\n  if (!eventView) {\n    return LandingDisplayField.ALL;\n  }\n  const projectIds = eventView.project;\n\n  const performanceTypeToDisplay = {\n    [PROJECT_PERFORMANCE_TYPE.ANY]: LandingDisplayField.ALL,\n    [PROJECT_PERFORMANCE_TYPE.FRONTEND]: LandingDisplayField.FRONTEND_PAGELOAD,\n    [PROJECT_PERFORMANCE_TYPE.BACKEND]: LandingDisplayField.BACKEND,\n    [PROJECT_PERFORMANCE_TYPE.MOBILE]: LandingDisplayField.MOBILE,\n  };\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const landingField =\n    performanceTypeToDisplay[performanceType] ?? LandingDisplayField.ALL;\n  return landingField;\n}\n\ntype VitalCardDetail = {\n  formatter: (value: number) => string | number;\n  title: string;\n  tooltip: string;\n};\n\nexport const vitalCardDetails = (\n  organization: Organization\n): {[key: string]: VitalCardDetail | undefined} => {\n  return {\n    'p75(transaction.duration)': {\n      title: t('Duration (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n      formatter: value => getDuration(value / 1000, value >= 1000 ? 3 : 0, true),\n    },\n    'tpm()': {\n      title: t('Throughput'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.THROUGHPUT),\n      formatter: formatAbbreviatedNumber,\n    },\n    'failure_rate()': {\n      title: t('Failure Rate'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n      formatter: value => formatPercentage(value, 2),\n    },\n    'apdex()': {\n      title: t('Apdex'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n      formatter: value => formatFloat(value, 4),\n    },\n    'p75(measurements.frames_slow_rate)': {\n      title: t('Slow Frames (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_FRAMES),\n      formatter: value => formatPercentage(value, 2),\n    },\n    'p75(measurements.frames_frozen_rate)': {\n      title: t('Frozen Frames (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.FROZEN_FRAMES),\n      formatter: value => formatPercentage(value, 2),\n    },\n    'p75(measurements.app_start_cold)': {\n      title: t('Cold Start (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n      formatter: value => getDuration(value / 1000, value >= 1000 ? 3 : 0, true),\n    },\n    'p75(measurements.app_start_warm)': {\n      title: t('Warm Start (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n      formatter: value => getDuration(value / 1000, value >= 1000 ? 3 : 0, true),\n    },\n    'p75(measurements.stall_percentage)': {\n      title: t('Stall Percentage (p75)'),\n      tooltip: getTermHelp(organization, PERFORMANCE_TERM.STALL_PERCENTAGE),\n      formatter: value => formatPercentage(value, 2),\n    },\n  };\n};\n\nexport function getDisplayAxes(options: AxisOption[], location: Location) {\n  const leftDefault = options.find(opt => opt.isLeftDefault) || options[0];\n  const rightDefault = options.find(opt => opt.isRightDefault) || options[1];\n\n  const leftAxis =\n    options.find(opt => opt.value === location.query[LEFT_AXIS_QUERY_KEY]) || leftDefault;\n  const rightAxis =\n    options.find(opt => opt.value === location.query[RIGHT_AXIS_QUERY_KEY]) ||\n    rightDefault;\n  return {\n    leftAxis,\n    rightAxis,\n  };\n}\n\nexport function checkIsReactNative(eventView) {\n  // only react native should contain the stall percentage column\n  return Boolean(\n    eventView.getFields().find(field => field.includes('measurements.stall_percentage'))\n  );\n}\n","import moment from 'moment';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {EventsStatsData, Project} from 'sentry/types';\nimport EventView, {LocationQuery} from 'sentry/utils/discover/eventView';\n\nexport type TrendView = EventView & {\n  middle?: string;\n  orderby?: string;\n  trendFunction?: string;\n  trendType?: TrendChangeType;\n};\n\nexport type TrendsQuery = EventQuery &\n  LocationQuery & {\n    interval?: string;\n    middle?: string;\n    trendFunction?: string;\n    trendType?: TrendChangeType;\n  };\n\nexport type TrendFunction = {\n  alias: string;\n  field: TrendFunctionField;\n  label: string;\n  legendLabel: string;\n};\n\nexport type TrendParameter = {\n  column: string;\n  label: string;\n};\n\nexport enum TrendChangeType {\n  IMPROVED = 'improved',\n  REGRESSION = 'regression',\n}\n\nexport enum TrendFunctionField {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  AVG = 'avg',\n}\n\nexport enum TrendColumnField {\n  DURATION = 'transaction.duration',\n  LCP = 'measurements.lcp',\n  FCP = 'measurements.fcp',\n  FID = 'measurements.fid',\n  CLS = 'measurements.cls',\n  SPANS_DB = 'spans.db',\n  SPANS_HTTP = 'spans.http',\n  SPANS_BROWSER = 'spans.browser',\n  SPANS_RESOURCE = 'spans.resource',\n}\n\nexport type TrendStat = {\n  data: EventsStatsData;\n  order: number;\n};\n\nexport type TrendsStats = {\n  [transaction: string]: TrendStat;\n};\n\nexport type TrendsTransaction = {\n  aggregate_range_1: number;\n  aggregate_range_2: number;\n  count: number;\n\n  count_percentage: number;\n  count_range_1: number;\n  count_range_2: number;\n  project: string;\n  transaction: string;\n  trend_difference: number;\n  trend_percentage: number;\n};\n\nexport type TrendsDataEvents = {\n  data: TrendsTransaction[];\n  meta: any;\n};\n\nexport type TrendsData = {\n  events: TrendsDataEvents;\n  projects: Project[];\n  stats: TrendsStats;\n};\n\nexport type NormalizedTrendsTransaction = TrendsTransaction & {\n  received_at: Readonly<moment.Moment>;\n};\n","import {ASAP} from 'downsample/methods/ASAP';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  AggregationKey,\n  Field,\n  generateFieldAsString,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunction,\n  TrendFunctionField,\n  TrendParameter,\n  TrendsTransaction,\n  TrendView,\n} from './types';\n\nexport const DEFAULT_TRENDS_STATS_PERIOD = '14d';\nexport const DEFAULT_MAX_DURATION = '15min';\n\nexport const TRENDS_FUNCTIONS: TrendFunction[] = [\n  {\n    label: 'p50',\n    field: TrendFunctionField.P50,\n    alias: 'percentile_range',\n    legendLabel: 'p50',\n  },\n  {\n    label: 'p75',\n    field: TrendFunctionField.P75,\n    alias: 'percentile_range',\n    legendLabel: 'p75',\n  },\n  {\n    label: 'p95',\n    field: TrendFunctionField.P95,\n    alias: 'percentile_range',\n    legendLabel: 'p95',\n  },\n  {\n    label: 'p99',\n    field: TrendFunctionField.P99,\n    alias: 'percentile_range',\n    legendLabel: 'p99',\n  },\n  {\n    label: 'average',\n    field: TrendFunctionField.AVG,\n    alias: 'avg_range',\n    legendLabel: 'average',\n  },\n];\n\nexport const TRENDS_PARAMETERS: TrendParameter[] = [\n  {\n    label: 'Duration',\n    column: TrendColumnField.DURATION,\n  },\n  {\n    label: 'LCP',\n    column: TrendColumnField.LCP,\n  },\n  {\n    label: 'FCP',\n    column: TrendColumnField.FCP,\n  },\n  {\n    label: 'FID',\n    column: TrendColumnField.FID,\n  },\n  {\n    label: 'CLS',\n    column: TrendColumnField.CLS,\n  },\n  {\n    label: 'Spans (http)',\n    column: TrendColumnField.SPANS_HTTP,\n  },\n  {\n    label: 'Spans (db)',\n    column: TrendColumnField.SPANS_DB,\n  },\n  {\n    label: 'Spans (browser)',\n    column: TrendColumnField.SPANS_BROWSER,\n  },\n  {\n    label: 'Spans (resource)',\n    column: TrendColumnField.SPANS_RESOURCE,\n  },\n];\n\nexport const trendToColor = {\n  [TrendChangeType.IMPROVED]: {\n    lighter: theme.green200,\n    default: theme.green300,\n  },\n  [TrendChangeType.REGRESSION]: {\n    lighter: theme.red200,\n    default: theme.red300,\n  },\n};\n\nexport const trendSelectedQueryKeys = {\n  [TrendChangeType.IMPROVED]: 'improvedSelected',\n  [TrendChangeType.REGRESSION]: 'regressionSelected',\n};\n\nexport const trendUnselectedSeries = {\n  [TrendChangeType.IMPROVED]: 'improvedUnselectedSeries',\n  [TrendChangeType.REGRESSION]: 'regressionUnselectedSeries',\n};\n\nexport const trendCursorNames = {\n  [TrendChangeType.IMPROVED]: 'improvedCursor',\n  [TrendChangeType.REGRESSION]: 'regressionCursor',\n};\n\nexport function resetCursors() {\n  const cursors = {};\n  Object.values(trendCursorNames).forEach(cursor => (cursors[cursor] = undefined)); // Resets both cursors\n  return cursors;\n}\n\nexport function getCurrentTrendFunction(\n  location: Location,\n  _trendFunctionField?: TrendFunctionField\n): TrendFunction {\n  const trendFunctionField =\n    _trendFunctionField ?? decodeScalar(location?.query?.trendFunction);\n  const trendFunction = TRENDS_FUNCTIONS.find(({field}) => field === trendFunctionField);\n  return trendFunction || TRENDS_FUNCTIONS[0];\n}\n\nfunction getDefaultTrendParameter(\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const trendParameter = performanceTypeToTrendParameterLabel(performanceType);\n\n  return trendParameter;\n}\n\nexport function getCurrentTrendParameter(\n  location: Location,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const trendParameterLabel = decodeScalar(location?.query?.trendParameter);\n  const trendParameter = TRENDS_PARAMETERS.find(\n    ({label}) => label === trendParameterLabel\n  );\n\n  if (trendParameter) {\n    return trendParameter;\n  }\n\n  const defaultTrendParameter = getDefaultTrendParameter(projects, projectIds);\n  return defaultTrendParameter;\n}\n\nexport function performanceTypeToTrendParameterLabel(\n  performanceType: PROJECT_PERFORMANCE_TYPE\n): TrendParameter {\n  switch (performanceType) {\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND:\n      return {\n        label: 'LCP',\n        column: TrendColumnField.LCP,\n      };\n    case PROJECT_PERFORMANCE_TYPE.ANY:\n    case PROJECT_PERFORMANCE_TYPE.BACKEND:\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER:\n    default:\n      return {\n        label: 'Duration',\n        column: TrendColumnField.DURATION,\n      };\n  }\n}\n\nexport function generateTrendFunctionAsString(\n  trendFunction: TrendFunctionField,\n  trendParameter: string\n): string {\n  return generateFieldAsString({\n    kind: 'function',\n    function: [trendFunction as AggregationKey, trendParameter, undefined, undefined],\n  });\n}\n\nexport function transformDeltaSpread(from: number, to: number) {\n  const fromSeconds = from / 1000;\n  const toSeconds = to / 1000;\n\n  const showDigits = from > 1000 || to > 1000 || from < 10 || to < 10; // Show digits consistently if either has them\n\n  return {fromSeconds, toSeconds, showDigits};\n}\n\nexport function getTrendProjectId(\n  trend: NormalizedTrendsTransaction,\n  projects?: Project[]\n): string | undefined {\n  if (!trend.project || !projects) {\n    return undefined;\n  }\n  const transactionProject = projects.find(project => project.slug === trend.project);\n  return transactionProject?.id;\n}\n\nexport function modifyTrendView(\n  trendView: TrendView,\n  location: Location,\n  trendsType: TrendChangeType,\n  projects: Project[],\n  isProjectOnly?: boolean\n) {\n  const trendFunction = getCurrentTrendFunction(location);\n  const trendParameter = getCurrentTrendParameter(location, projects, trendView.project);\n\n  const transactionField = isProjectOnly ? [] : ['transaction'];\n  const fields = [...transactionField, 'project'].map(field => ({\n    field,\n  })) as Field[];\n\n  const trendSort = {\n    field: 'trend_percentage()',\n    kind: 'asc',\n  } as Sort;\n\n  trendView.trendType = trendsType;\n  if (trendsType === TrendChangeType.REGRESSION) {\n    trendSort.kind = 'desc';\n  }\n\n  if (trendFunction && trendParameter) {\n    trendView.trendFunction = generateTrendFunctionAsString(\n      trendFunction.field,\n      trendParameter.column\n    );\n  }\n  trendView.query = getLimitTransactionItems(trendView.query);\n\n  trendView.interval = getQueryInterval(location, trendView);\n\n  trendView.sorts = [trendSort];\n  trendView.fields = fields;\n}\n\nexport function modifyTrendsViewDefaultPeriod(eventView: EventView, location: Location) {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    eventView.statsPeriod = DEFAULT_TRENDS_STATS_PERIOD;\n  }\n  return eventView;\n}\n\nfunction getQueryInterval(location: Location, eventView: TrendView) {\n  const intervalFromQueryParam = decodeScalar(location?.query?.interval);\n  const {start, end, statsPeriod} = eventView;\n\n  const datetimeSelection = {\n    start: start || null,\n    end: end || null,\n    period: statsPeriod,\n  };\n\n  const intervalFromSmoothing = getInterval(datetimeSelection, 'high');\n\n  return intervalFromQueryParam || intervalFromSmoothing;\n}\n\nexport function transformValueDelta(value: number, trendType: TrendChangeType) {\n  const absoluteValue = Math.abs(value);\n\n  const changeLabel =\n    trendType === TrendChangeType.REGRESSION ? t('slower') : t('faster');\n\n  const seconds = absoluteValue / 1000;\n\n  const fixedDigits = absoluteValue > 1000 || absoluteValue < 10 ? 1 : 0;\n\n  return {seconds, fixedDigits, changeLabel};\n}\n\n/**\n * This will normalize the trends transactions while the current trend function and current data are out of sync\n * To minimize extra renders with missing results.\n */\nexport function normalizeTrends(\n  data: Array<TrendsTransaction>\n): Array<NormalizedTrendsTransaction> {\n  const received_at = moment(); // Adding the received time for the transaction so calls to get baseline always line up with the transaction\n  return data.map(row => {\n    return {\n      ...row,\n      received_at,\n      transaction: row.transaction,\n    } as NormalizedTrendsTransaction;\n  });\n}\n\nexport function getSelectedQueryKey(trendChangeType: TrendChangeType) {\n  return trendSelectedQueryKeys[trendChangeType];\n}\n\nexport function getUnselectedSeries(trendChangeType: TrendChangeType) {\n  return trendUnselectedSeries[trendChangeType];\n}\n\nexport function movingAverage(data, index, size) {\n  return (\n    data\n      .slice(index - size, index)\n      .map(a => a.value)\n      .reduce((a, b) => a + b, 0) / size\n  );\n}\n\n/**\n * This function applies defaults for trend and count percentage, and adds the confidence limit to the query\n */\nfunction getLimitTransactionItems(query: string) {\n  const limitQuery = new MutableSearch(query);\n  if (!limitQuery.hasFilter('count_percentage()')) {\n    limitQuery.addFilterValues('count_percentage()', ['>0.25', '<4']);\n  }\n  if (!limitQuery.hasFilter('trend_percentage()')) {\n    limitQuery.addFilterValues('trend_percentage()', ['>0%']);\n  }\n  if (!limitQuery.hasFilter('confidence()')) {\n    limitQuery.addFilterValues('confidence()', ['>6']);\n  }\n  return limitQuery.formatString();\n}\n\nexport const smoothTrend = (data: [number, number][], resolution = 100) => {\n  return ASAP(data, resolution);\n};\n\nexport const replaceSeriesName = (seriesName: string) => {\n  return ['p50', 'p75'].find(aggregate => seriesName.includes(aggregate));\n};\n\nexport const replaceSmoothedSeriesName = (seriesName: string) => {\n  return `Smoothed ${['p50', 'p75'].find(aggregate => seriesName.includes(aggregate))}`;\n};\n\nexport function transformEventStatsSmoothed(data?: Series[], seriesName?: string) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = 0;\n  if (!data) {\n    return {\n      maxValue,\n      minValue,\n      smoothedResults: undefined,\n    };\n  }\n\n  const smoothedResults: Series[] = [];\n\n  for (const current of data) {\n    const currentData = current.data;\n    const resultData: SeriesDataUnit[] = [];\n\n    const smoothed = smoothTrend(\n      currentData.map(({name, value}) => [Number(name), value])\n    );\n\n    for (let i = 0; i < smoothed.length; i++) {\n      const point = smoothed[i] as any;\n      const value = point.y;\n      resultData.push({\n        name: point.x,\n        value,\n      });\n      if (!isNaN(value)) {\n        const rounded = Math.round(value);\n        minValue = Math.min(rounded, minValue);\n        maxValue = Math.max(rounded, maxValue);\n      }\n    }\n    smoothedResults.push({\n      seriesName: seriesName || current.seriesName || 'Current',\n      data: resultData,\n      lineStyle: current.lineStyle,\n      color: current.color,\n    });\n  }\n\n  return {\n    minValue,\n    maxValue,\n    smoothedResults,\n  };\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {backend, frontend, mobile} from 'sentry/data/platformCategories';\nimport {\n  Organization,\n  OrganizationSummary,\n  PageFilters,\n  Project,\n  ReleaseProject,\n} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {statsPeriodToDays} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TRACING_FIELDS} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getCurrentSentryReactTransaction from 'sentry/utils/getCurrentSentryReactTransaction';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {DEFAULT_MAX_DURATION} from './trends/utils';\n\nexport const QUERY_KEYS = [\n  'environment',\n  'project',\n  'query',\n  'start',\n  'end',\n  'statsPeriod',\n] as const;\n\n/**\n * Performance type can used to determine a default view or which specific field should be used by default on pages\n * where we don't want to wait for transaction data to return to determine how to display aspects of a page.\n */\nexport enum PROJECT_PERFORMANCE_TYPE {\n  ANY = 'any', // Fallback to transaction duration\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  FRONTEND_OTHER = 'frontend_other',\n  MOBILE = 'mobile',\n}\n\n// The native SDK is equally used on clients and end-devices as on\n// backend, the default view should be \"All Transactions\".\nconst FRONTEND_PLATFORMS: string[] = [...frontend];\nconst BACKEND_PLATFORMS: string[] = backend.filter(platform => platform !== 'native');\nconst MOBILE_PLATFORMS: string[] = [...mobile];\n\nexport function platformToPerformanceType(\n  projects: (Project | ReleaseProject)[],\n  projectIds: readonly number[]\n) {\n  if (projectIds.length === 0 || projectIds[0] === ALL_ACCESS_PROJECTS) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  const selectedProjects = projects.filter(p =>\n    projectIds.includes(parseInt(`${p.id}`, 10))\n  );\n\n  if (selectedProjects.length === 0 || selectedProjects.some(p => !p.platform)) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      FRONTEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.FRONTEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      BACKEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.BACKEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      MOBILE_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.MOBILE;\n  }\n\n  return PROJECT_PERFORMANCE_TYPE.ANY;\n}\n\n/**\n * Used for transaction summary to determine appropriate columns on a page, since there is no display field set for the page.\n */\nexport function platformAndConditionsToPerformanceType(\n  projects: Project[],\n  eventView: EventView\n) {\n  const performanceType = platformToPerformanceType(projects, eventView.project);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    const conditions = new MutableSearch(eventView.query);\n    const ops = conditions.getFilterValues('!transaction.op');\n    if (ops.some(op => op === 'pageload')) {\n      return PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER;\n    }\n  }\n\n  return performanceType;\n}\n\n/**\n * Used for transaction summary to check the view itself, since it can have conditions which would exclude it from having vitals aside from platform.\n */\nexport function isSummaryViewFrontendPageLoad(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n    PROJECT_PERFORMANCE_TYPE.FRONTEND\n  );\n}\n\nexport function isSummaryViewFrontend(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND ||\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER\n  );\n}\n\nexport function getPerformanceLandingUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/`;\n}\n\nexport function getPerformanceTrendsUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/trends/`;\n}\n\nexport function getTransactionSearchQuery(location: Location, query: string = '') {\n  return decodeScalar(location.query.query, query).trim();\n}\n\nexport function handleTrendsClick({\n  location,\n  organization,\n}: {\n  location: Location;\n  organization: Organization;\n}) {\n  trackAnalyticsEvent({\n    eventKey: 'performance_views.change_view',\n    eventName: 'Performance Views: Change View',\n    organization_id: parseInt(organization.id, 10),\n    view_name: 'TRENDS',\n  });\n\n  const target = trendsTargetRoute({location, organization});\n\n  browserHistory.push(target);\n}\n\nexport function trendsTargetRoute({\n  location,\n  organization,\n  initialConditions,\n  additionalQuery,\n}: {\n  location: Location;\n  organization: Organization;\n  additionalQuery?: {[x: string]: string};\n  initialConditions?: MutableSearch;\n}) {\n  const newQuery = {\n    ...location.query,\n    ...additionalQuery,\n  };\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  const modifiedConditions = initialConditions ?? new MutableSearch([]);\n\n  if (conditions.hasFilter('tpm()')) {\n    modifiedConditions.setFilterValues('tpm()', conditions.getFilterValues('tpm()'));\n  } else {\n    modifiedConditions.setFilterValues('tpm()', ['>0.01']);\n  }\n  if (conditions.hasFilter('transaction.duration')) {\n    modifiedConditions.setFilterValues(\n      'transaction.duration',\n      conditions.getFilterValues('transaction.duration')\n    );\n  } else {\n    modifiedConditions.setFilterValues('transaction.duration', [\n      '>0',\n      `<${DEFAULT_MAX_DURATION}`,\n    ]);\n  }\n  newQuery.query = modifiedConditions.formatString();\n\n  return {pathname: getPerformanceTrendsUrl(organization), query: {...newQuery}};\n}\n\nexport function removeTracingKeysFromSearch(\n  currentFilter: MutableSearch,\n  options: {excludeTagKeys: Set<string>} = {\n    excludeTagKeys: new Set([\n      // event type can be \"transaction\" but we're searching for issues\n      'event.type',\n      // the project is already determined by the transaction,\n      // and issue search does not support the project filter\n      'project',\n    ]),\n  }\n) {\n  currentFilter.getFilterKeys().forEach(tagKey => {\n    const searchKey = tagKey.startsWith('!') ? tagKey.substr(1) : tagKey;\n    // Remove aggregates and transaction event fields\n    if (\n      // aggregates\n      searchKey.match(/\\w+\\(.*\\)/) ||\n      // transaction event fields\n      TRACING_FIELDS.includes(searchKey) ||\n      // tags that we don't want to pass to pass to issue search\n      options.excludeTagKeys.has(searchKey)\n    ) {\n      currentFilter.removeFilter(tagKey);\n    }\n  });\n\n  return currentFilter;\n}\n\nexport function addRoutePerformanceContext(selection: PageFilters) {\n  const transaction = getCurrentSentryReactTransaction();\n  const days = statsPeriodToDays(\n    selection.datetime.period,\n    selection.datetime.start,\n    selection.datetime.end\n  );\n  const oneDay = 86400;\n  const seconds = Math.floor(days * oneDay);\n\n  transaction?.setTag('query.period', seconds.toString());\n  let groupedPeriod = '>30d';\n  if (seconds <= oneDay) {\n    groupedPeriod = '<=1d';\n  } else if (seconds <= oneDay * 7) {\n    groupedPeriod = '<=7d';\n  } else if (seconds <= oneDay * 14) {\n    groupedPeriod = '<=14d';\n  } else if (seconds <= oneDay * 30) {\n    groupedPeriod = '<=30d';\n  }\n  transaction?.setTag('query.period.grouped', groupedPeriod);\n}\n\nexport function getTransactionName(location: Location): string | undefined {\n  const {transaction} = location.query;\n\n  return decodeScalar(transaction);\n}\n\nexport function getPerformanceDuration(milliseconds: number) {\n  return getDuration(milliseconds / 1000, milliseconds > 1000 ? 2 : 0, true);\n}\n","import {Location, Query} from 'history';\n\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {LineChartProps} from 'sentry/components/charts/lineChart';\nimport {getSeriesSelection} from 'sentry/components/charts/utils';\nimport {IconHappy, IconMeh, IconSad} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {getAggregateAlias, WebVital} from 'sentry/utils/discover/fields';\nimport {Browser} from 'sentry/utils/performance/vitals/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {Color, Theme} from 'sentry/utils/theme';\nimport {AlertType} from 'sentry/views/alerts/wizard/options';\n\nexport function generateVitalDetailRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/vitaldetail/`;\n}\n\nexport const webVitalPoor = {\n  [WebVital.FP]: 3000,\n  [WebVital.FCP]: 3000,\n  [WebVital.LCP]: 4000,\n  [WebVital.FID]: 300,\n  [WebVital.CLS]: 0.25,\n};\n\nexport const webVitalMeh = {\n  [WebVital.FP]: 1000,\n  [WebVital.FCP]: 1000,\n  [WebVital.LCP]: 2500,\n  [WebVital.FID]: 100,\n  [WebVital.CLS]: 0.1,\n};\n\nexport enum VitalState {\n  POOR = 'Poor',\n  MEH = 'Meh',\n  GOOD = 'Good',\n}\n\nexport const vitalStateColors: Record<VitalState, Color> = {\n  [VitalState.POOR]: 'red300',\n  [VitalState.MEH]: 'yellow300',\n  [VitalState.GOOD]: 'green300',\n};\n\nexport const vitalStateIcons: Record<VitalState, React.ReactNode> = {\n  [VitalState.POOR]: <IconSad color={vitalStateColors[VitalState.POOR]} />,\n  [VitalState.MEH]: <IconMeh color={vitalStateColors[VitalState.MEH]} />,\n  [VitalState.GOOD]: <IconHappy color={vitalStateColors[VitalState.GOOD]} />,\n};\n\nexport function vitalDetailRouteWithQuery({\n  orgSlug,\n  vitalName,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  vitalName: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalDetailRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      vitalName,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport function vitalNameFromLocation(location: Location): WebVital {\n  const _vitalName = decodeScalar(location.query.vitalName);\n\n  const vitalName = Object.values(WebVital).find(v => v === _vitalName);\n\n  if (vitalName) {\n    return vitalName;\n  }\n  return WebVital.LCP;\n}\n\nexport function getVitalChartTitle(webVital: WebVital): string {\n  if (webVital === WebVital.CLS) {\n    return t('CLS p75');\n  }\n  return t('Duration p75');\n}\n\nexport function getVitalDetailTablePoorStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalPoor[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport function getVitalDetailTableMehStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalMeh[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport const vitalMap: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'First Contentful Paint',\n  [WebVital.CLS]: 'Cumulative Layout Shift',\n  [WebVital.FID]: 'First Input Delay',\n  [WebVital.LCP]: 'Largest Contentful Paint',\n};\n\nexport const vitalChartTitleMap = vitalMap;\n\nexport const vitalDescription: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]:\n    'First Contentful Paint (FCP) measures the amount of time the first content takes to render in the viewport. Like FP, this could also show up in any form from the document object model (DOM), such as images, SVGs, or text blocks. At the moment, there is support for FCP in the following browsers:',\n  [WebVital.CLS]:\n    'Cumulative Layout Shift (CLS) is the sum of individual layout shift scores for every unexpected element shift during the rendering process. Imagine navigating to an article and trying to click a link before the page finishes loading. Before your cursor even gets there, the link may have shifted down due to an image rendering. Rather than using duration for this Web Vital, the CLS score represents the degree of disruptive and visually unstable shifts. At the moment, there is support for CLS in the following browsers:',\n  [WebVital.FID]:\n    'First Input Delay (FID) measures the response time when the user tries to interact with the viewport. Actions maybe include clicking a button, link or other custom Javascript controller. It is key in helping the user determine if a page is usable or not. At the moment, there is support for FID in the following browsers:',\n  [WebVital.LCP]:\n    'Largest Contentful Paint (LCP) measures the render time for the largest content to appear in the viewport. This may be in any form from the document object model (DOM), such as images, SVGs, or text blocks. It’s the largest pixel area in the viewport, thus most visually defining. LCP helps developers understand how long it takes to see the main content on the page. At the moment, there is support for LCP in the following browsers:',\n};\n\nexport const vitalAbbreviations: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'FCP',\n  [WebVital.CLS]: 'CLS',\n  [WebVital.FID]: 'FID',\n  [WebVital.LCP]: 'LCP',\n};\n\nexport const vitalAlertTypes: Partial<Record<WebVital, AlertType>> = {\n  [WebVital.FCP]: 'custom',\n  [WebVital.CLS]: 'cls',\n  [WebVital.FID]: 'fid',\n  [WebVital.LCP]: 'lcp',\n};\n\nexport function getMaxOfSeries(series: Series[]) {\n  let max = -Infinity;\n  for (const {data} of series) {\n    for (const point of data) {\n      max = Math.max(max, point.value);\n    }\n  }\n  return max;\n}\n\nexport const vitalSupportedBrowsers: Partial<Record<WebVital, Browser[]>> = {\n  [WebVital.LCP]: [Browser.CHROME, Browser.EDGE, Browser.OPERA],\n  [WebVital.FID]: [\n    Browser.CHROME,\n    Browser.EDGE,\n    Browser.OPERA,\n    Browser.FIREFOX,\n    Browser.SAFARI,\n    Browser.IE,\n  ],\n  [WebVital.CLS]: [Browser.CHROME, Browser.EDGE, Browser.OPERA],\n  [WebVital.FP]: [Browser.CHROME, Browser.EDGE, Browser.OPERA],\n  [WebVital.FCP]: [\n    Browser.CHROME,\n    Browser.EDGE,\n    Browser.OPERA,\n    Browser.FIREFOX,\n    Browser.SAFARI,\n  ],\n  [WebVital.TTFB]: [\n    Browser.CHROME,\n    Browser.EDGE,\n    Browser.OPERA,\n    Browser.FIREFOX,\n    Browser.SAFARI,\n    Browser.IE,\n  ],\n};\n\nexport function getVitalChartDefinitions({\n  theme,\n  location,\n  vital,\n  yAxis,\n}: {\n  location: Location;\n  theme: Theme;\n  vital: string;\n  yAxis: string;\n}) {\n  const utc = decodeScalar(location.query.utc) !== 'false';\n\n  const vitalPoor = webVitalPoor[vital];\n  const vitalMeh = webVitalMeh[vital];\n\n  const legend = {\n    right: 10,\n    top: 0,\n    selected: getSeriesSelection(location),\n  };\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    grid: {\n      left: '5px',\n      right: '10px',\n      top: '35px',\n      bottom: '0px',\n    },\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis',\n      valueFormatter: (value: number, seriesName?: string) =>\n        tooltipFormatter(value, vital === WebVital.CLS ? seriesName : yAxis),\n    },\n    yAxis: {\n      min: 0,\n      max: vitalPoor,\n      axisLabel: {\n        color: theme.chartLabel,\n        showMaxLabel: false,\n        // coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, yAxis),\n      },\n    },\n  };\n\n  const markLines = [\n    {\n      seriesName: 'Thresholds',\n      type: 'line' as const,\n      data: [],\n      markLine: MarkLine({\n        silent: true,\n        lineStyle: {\n          color: theme.red300,\n          type: 'dashed',\n          width: 1.5,\n        },\n        label: {\n          show: true,\n          position: 'insideEndTop',\n          formatter: t('Poor'),\n        },\n        data: [\n          {\n            yAxis: vitalPoor,\n          } as any, // TODO(ts): date on this type is likely incomplete (needs @types/echarts@4.6.2)\n        ],\n      }),\n    },\n    {\n      seriesName: 'Thresholds',\n      type: 'line' as const,\n      data: [],\n      markLine: MarkLine({\n        silent: true,\n        lineStyle: {\n          color: theme.yellow300,\n          type: 'dashed',\n          width: 1.5,\n        },\n        label: {\n          show: true,\n          position: 'insideEndTop',\n          formatter: t('Meh'),\n        },\n        data: [\n          {\n            yAxis: vitalMeh,\n          } as any, // TODO(ts): date on this type is likely incomplete (needs @types/echarts@4.6.2)\n        ],\n      }),\n    },\n  ];\n\n  return {\n    vitalPoor,\n    vitalMeh,\n    legend,\n    chartOptions,\n    markLines,\n    utc,\n  };\n}\n"],"names":["QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","undefined","error","tableData","pageLinks","prevProps","thisAPIPayload","getPayload","props","otherAPIPayload","isAPIPayloadSimilar","limit","route","cursor","parseError","detail","responseJSON","t","async","api","beforeFetch","afterFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","data","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","shouldRefetchData","noPagination","referrer","location","payload","getRequestPayload","getEventsAPIPayload","per_page","includes","queryUserModified","decodeScalar","query","userModified","user_modified","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","params","requestPromise","method","includeAllArgs","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","options","strict","Context","createContext","displayName","Provider","context","DEFAULT_STATS_PERIOD","DEFAULT_PROJECT_THRESHOLD","COLUMN_TITLES","PERFORMANCE_TERM","PERFORMANCE_TERMS","tpm","throughput","failureRate","p50","p75","p95","p99","lcp","fcp","fid","cls","statusBreakdown","durationDistribution","userMisery","apdex","appStartCold","appStartWarm","slowFrames","frozenFrames","mostErrors","mostIssues","slowHTTPSpans","stallPercentage","getTermHelp","organization","term","hasOwnProperty","shouldAddDefaultConditions","searchQuery","isDefaultQuery","generateGenericPerformanceEventView","withStaticFilters","hasStartAndEnd","start","end","savedQuery","id","projects","fields","version","widths","Array","length","fill","COL_WIDTH_UNDEFINED","statsPeriod","range","orderby","sort","conditions","MutableSearch","setFilterValues","freeText","join","formatString","EventView","additionalConditions","addFilterValues","trendParameter","getCurrentTrendParameter","Boolean","WEB_VITAL_DETAILS","column","generateBackendPerformanceEventView","generateMobilePerformanceEventView","genericEventView","projectIds","project","ALL_ACCESS_PROJECTS","selectedProjects","filter","p","parseInt","every","platform","push","generateFrontendPageloadPerformanceEventView","generateFrontendOtherPerformanceEventView","generatePerformanceEventView","isTrends","display","getCurrentLandingDisplay","field","LandingDisplayField","generatePerformanceVitalDetailView","vitalName","vitalNameFromLocation","getVitalDetailTablePoorStatusFunction","getVitalDetailTableMehStatusFunction","yAxis","LANDING_DISPLAYS","label","ALL","FRONTEND_PAGELOAD","FRONTEND_OTHER","BACKEND","MOBILE","excludeTransaction","transaction","searchConditions","browserHistory","pathname","getLandingDisplayFromParam","landingField","landingDisplay","find","getDefaultDisplayForPlatform","defaultDisplayField","getDefaultDisplayFieldForPlatform","handleLandingDisplayChange","removeFilter","queryWithConditions","omit","defaultDisplay","currentDisplay","newQuery","trackAdvancedAnalyticsEvent","change_to_display","default_display","current_display","is_default","PROJECT_PERFORMANCE_TYPE","platformToPerformanceType","vitalCardDetails","title","tooltip","formatter","value","getDuration","formatAbbreviatedNumber","formatPercentage","formatFloat","checkIsReactNative","getFields","TrendChangeType","TrendFunctionField","TrendColumnField","DEFAULT_TRENDS_STATS_PERIOD","DEFAULT_MAX_DURATION","TRENDS_FUNCTIONS","alias","legendLabel","TRENDS_PARAMETERS","trendToColor","lighter","theme","default","trendSelectedQueryKeys","trendUnselectedSeries","trendCursorNames","resetCursors","cursors","values","forEach","getCurrentTrendFunction","_trendFunctionField","trendFunctionField","trendFunction","trendParameterLabel","performanceType","performanceTypeToTrendParameterLabel","getDefaultTrendParameter","generateTrendFunctionAsString","generateFieldAsString","kind","function","transformDeltaSpread","from","to","fromSeconds","toSeconds","showDigits","getTrendProjectId","trend","transactionProject","modifyTrendView","trendView","trendsType","isProjectOnly","map","trendSort","trendType","limitQuery","hasFilter","getLimitTransactionItems","interval","intervalFromQueryParam","datetimeSelection","period","intervalFromSmoothing","getInterval","getQueryInterval","sorts","modifyTrendsViewDefaultPeriod","transformValueDelta","absoluteValue","Math","abs","seconds","fixedDigits","changeLabel","normalizeTrends","received_at","moment","row","getSelectedQueryKey","trendChangeType","getUnselectedSeries","smoothTrend","resolution","ASAP","replaceSeriesName","seriesName","aggregate","transformEventStatsSmoothed","minValue","Number","MAX_SAFE_INTEGER","maxValue","smoothedResults","current","currentData","resultData","smoothed","i","point","y","x","isNaN","rounded","round","min","max","lineStyle","color","QUERY_KEYS","FRONTEND_PLATFORMS","frontend","BACKEND_PLATFORMS","backend","MOBILE_PLATFORMS","mobile","ANY","some","FRONTEND","platformAndConditionsToPerformanceType","getFilterValues","op","isSummaryViewFrontendPageLoad","isSummaryViewFrontend","getPerformanceLandingUrl","getPerformanceTrendsUrl","getTransactionSearchQuery","trim","handleTrendsClick","trackAnalyticsEvent","eventKey","eventName","organization_id","view_name","target","trendsTargetRoute","initialConditions","additionalQuery","modifiedConditions","removeTracingKeysFromSearch","currentFilter","excludeTagKeys","Set","getFilterKeys","tagKey","searchKey","startsWith","substr","match","TRACING_FIELDS","has","addRoutePerformanceContext","selection","getCurrentSentryReactTransaction","days","statsPeriodToDays","datetime","floor","setTag","toString","groupedPeriod","oneDay","getTransactionName","getPerformanceDuration","milliseconds","webVitalPoor","WebVital","webVitalMeh","VitalState","vitalStateColors","POOR","MEH","GOOD","vitalStateIcons","vitalDetailRouteWithQuery","projectID","generateVitalDetailRoute","environment","_vitalName","v","getVitalChartTitle","webVital","vitalThreshold","getAggregateAlias","vitalMap","vitalDescription","vitalAbbreviations","vitalAlertTypes","getMaxOfSeries","series","vitalSupportedBrowsers","Browser","getVitalChartDefinitions","vital","utc","vitalPoor","vitalMeh","legend","right","top","selected","getSeriesSelection","chartOptions","grid","left","bottom","seriesOptions","showSymbol","trigger","valueFormatter","tooltipFormatter","axisLabel","chartLabel","showMaxLabel","axisLabelFormatter","markLines","type","markLine","MarkLine","silent","red300","width","show","position","yellow300"],"sourceRoot":""}