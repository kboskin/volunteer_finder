{"version":3,"file":"chunks/app_utils_performance_vitals_constants_tsx-app_views_projectDetail_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertBadge.tsx","webpack:///./app/components/charts/components/visualMap.tsx","webpack:///./app/components/charts/errorPanel.tsx","webpack:///./app/components/charts/eventsChart.tsx","webpack:///./app/components/charts/eventsGeoRequest.tsx","webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/components/charts/optionSelector.tsx","webpack:///./app/components/charts/releaseSeries.tsx","webpack:///./app/components/charts/stackedAreaChart.tsx","webpack:///./app/components/charts/transitionChart.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/components/charts/worldMapChart.tsx","webpack:///./app/components/charts/series/mapSeries.tsx","webpack:///./app/components/discover/discoverFeature.tsx","webpack:///./app/components/discoverButton.tsx","webpack:///./app/components/globalAppStoreConnectUpdateAlert/updateAlert.tsx","webpack:///./app/components/globalAppStoreConnectUpdateAlert/index.tsx","webpack:///./app/components/projects/appStoreConnectContext.tsx","webpack:///./app/components/projects/missingProjectMembership.tsx","webpack:///./app/utils/appStoreValidationErrorMessage.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/utils/sessions.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/projectDetail/charts/projectErrorsBasicChart.tsx","webpack:///./app/views/projectDetail/missingFeatureButtons/missingPerformanceButtons.tsx","webpack:///./app/views/projectDetail/projectScoreCards/projectApdexScoreCard.tsx","webpack:///./app/views/projectDetail/projectScoreCards/projectStabilityScoreCard.tsx","webpack:///./app/views/projectDetail/projectScoreCards/projectVelocityScoreCard.tsx","webpack:///./app/views/projectDetail/projectScoreCards/projectScoreCards.tsx","webpack:///./app/constants/notAvailableMessages.tsx","webpack:///./app/views/projectDetail/charts/projectBaseEventsChart.tsx","webpack:///./app/views/projectDetail/charts/projectSessionsChartRequest.tsx","webpack:///./app/views/projectDetail/charts/projectBaseSessionsChart.tsx","webpack:///./app/views/projectDetail/projectCharts.tsx","webpack:///./app/views/projectDetail/projectFilters.tsx","webpack:///./app/views/projectDetail/projectIssues.tsx","webpack:///./app/views/projectDetail/missingFeatureButtons/missingAlertsButtons.tsx","webpack:///./app/views/projectDetail/styles.tsx","webpack:///./app/views/projectDetail/utils.tsx","webpack:///./app/views/projectDetail/projectLatestAlerts.tsx","webpack:///./app/views/projectDetail/projectLatestReleases.tsx","webpack:///./app/views/projectDetail/projectQuickLinks.tsx","webpack:///./app/views/projectDetail/projectTeamAccess.tsx","webpack:///./app/views/projectDetail/projectDetail.tsx","webpack:///./app/views/projectDetail/index.tsx","webpack:///./app/views/releases/utils/sessionTerm.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {\n  IconCheckmark,\n  IconDiamond,\n  IconExclamation,\n  IconFire,\n  IconIssues,\n} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\nimport {IncidentStatus} from 'sentry/views/alerts/types';\n\ntype Props = {\n  hideText?: boolean;\n  isIssue?: boolean;\n  status?: IncidentStatus;\n};\n\nfunction AlertBadge({status, hideText = false, isIssue}: Props) {\n  let statusText = t('Resolved');\n  let Icon = IconCheckmark;\n  let color: Color = 'green300';\n  if (isIssue) {\n    statusText = t('Issue');\n    Icon = IconIssues;\n    color = 'gray300';\n  } else if (status === IncidentStatus.CRITICAL) {\n    statusText = t('Critical');\n    Icon = IconFire;\n    color = 'red300';\n  } else if (status === IncidentStatus.WARNING) {\n    statusText = t('Warning');\n    Icon = IconExclamation;\n    color = 'yellow300';\n  }\n\n  return (\n    <Wrapper data-test-id=\"alert-badge\">\n      <AlertIconWrapper color={color} icon={Icon}>\n        <AlertIconBackground color={color} />\n        <Icon color=\"white\" />\n      </AlertIconWrapper>\n\n      {!hideText && <IncidentStatusValue color={color}>{statusText}</IncidentStatusValue>}\n    </Wrapper>\n  );\n}\n\nexport default AlertBadge;\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertIconWrapper = styled('div')<{color: Color; icon: React.ReactNode}>`\n  width: 36px;\n  height: 36px;\n  position: relative;\n\n  svg:last-child {\n    width: ${p => (p.icon === IconIssues ? '13px' : '16px')};\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n  }\n`;\n\nconst AlertIconBackground = styled(IconDiamond)<{color: Color}>`\n  width: 36px;\n  height: 36px;\n`;\n\nconst IncidentStatusValue = styled('div')`\n  margin-left: ${space(1)};\n`;\n","import 'echarts/lib/component/visualMap';\n\nimport type {VisualMapComponentOption} from 'echarts';\n\nexport default function VisualMap(\n  visualMap: VisualMapComponentOption\n): VisualMapComponentOption {\n  return visualMap;\n}\n","import styled from '@emotion/styled';\n\nconst ErrorPanel = styled('div')<{height?: string}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height || '200px'};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nexport default ErrorPanel;\n","import * as React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport type {\n  EChartsOption,\n  LegendComponentOption,\n  XAXisComponentOption,\n  YAXisComponentOption,\n} from 'echarts';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport {AreaChart, AreaChartProps} from 'sentry/components/charts/areaChart';\nimport {BarChart, BarChartProps} from 'sentry/components/charts/barChart';\nimport ChartZoom, {ZoomRenderProps} from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {\n  getInterval,\n  processTableResults,\n  RELEASE_LINES_THRESHOLD,\n} from 'sentry/components/charts/utils';\nimport {WorldMapChart, WorldMapChartProps} from 'sentry/components/charts/worldMapChart';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport {\n  aggregateMultiPlotType,\n  getEquation,\n  isEquation,\n} from 'sentry/utils/discover/fields';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\n\nimport EventsGeoRequest from './eventsGeoRequest';\nimport EventsRequest from './eventsRequest';\n\ntype ChartComponent =\n  | React.ComponentType<BarChartProps>\n  | React.ComponentType<AreaChartProps>\n  | React.ComponentType<LineChartProps>\n  | React.ComponentType<WorldMapChartProps>;\n\ntype ChartProps = {\n  currentSeriesNames: string[];\n  loading: boolean;\n  previousSeriesNames: string[];\n  reloading: boolean;\n  stacked: boolean;\n  tableData: TableDataWithTitle[];\n  theme: Theme;\n  timeseriesData: Series[];\n  yAxis: string;\n  zoomRenderProps: ZoomRenderProps;\n  chartComponent?: ChartComponent;\n  chartOptions?: Omit<EChartsOption, 'xAxis' | 'yAxis'> & {\n    xAxis?: XAXisComponentOption;\n    yAxis?: YAXisComponentOption;\n  };\n  colors?: string[];\n  /**\n   * By default, only the release series is disableable. This adds\n   * a list of series names that are also disableable.\n   */\n  disableableSeries?: string[];\n  fromDiscover?: boolean;\n  height?: number;\n  interval?: string;\n  legendOptions?: LegendComponentOption;\n  minutesThresholdToDisplaySeconds?: number;\n  previousSeriesTransformer?: (series?: Series | null) => Series | null | undefined;\n  previousTimeseriesData?: Series[] | null;\n  referrer?: string;\n  releaseSeries?: Series[];\n  /**\n   * A callback to allow for post-processing of the series data.\n   * Can be used to rename series or even insert a new series.\n   */\n  seriesTransformer?: (series: Series[]) => Series[];\n  showDaily?: boolean;\n  showLegend?: boolean;\n  timeframe?: {end: number; start: number};\n  topEvents?: number;\n};\n\ntype State = {\n  forceUpdate: boolean;\n  seriesSelection: Record<string, boolean>;\n};\n\nclass Chart extends React.Component<ChartProps, State> {\n  state: State = {\n    seriesSelection: {},\n    forceUpdate: false,\n  };\n\n  shouldComponentUpdate(nextProps: ChartProps, nextState: State) {\n    if (nextState.forceUpdate) {\n      return true;\n    }\n\n    if (!isEqual(this.state.seriesSelection, nextState.seriesSelection)) {\n      return true;\n    }\n\n    if (nextProps.reloading || !nextProps.timeseriesData) {\n      return false;\n    }\n\n    if (\n      isEqual(this.props.timeseriesData, nextProps.timeseriesData) &&\n      isEqual(this.props.releaseSeries, nextProps.releaseSeries) &&\n      isEqual(this.props.previousTimeseriesData, nextProps.previousTimeseriesData) &&\n      isEqual(this.props.tableData, nextProps.tableData)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getChartComponent(): ChartComponent {\n    const {showDaily, timeseriesData, yAxis, chartComponent} = this.props;\n\n    if (defined(chartComponent)) {\n      return chartComponent;\n    }\n\n    if (showDaily) {\n      return BarChart;\n    }\n\n    if (timeseriesData.length > 1) {\n      switch (aggregateMultiPlotType(yAxis)) {\n        case 'line':\n          return LineChart;\n        case 'area':\n          return AreaChart;\n        default:\n          throw new Error(`Unknown multi plot type for ${yAxis}`);\n      }\n    }\n\n    return AreaChart;\n  }\n\n  handleLegendSelectChanged = legendChange => {\n    const {disableableSeries = []} = this.props;\n    const {selected} = legendChange;\n    const seriesSelection = Object.keys(selected).reduce((state, key) => {\n      // we only want them to be able to disable the Releases&Other series,\n      // and not any of the other possible series here\n      const disableable =\n        ['Releases', 'Other'].includes(key) || disableableSeries.includes(key);\n      state[key] = disableable ? selected[key] : true;\n      return state;\n    }, {});\n\n    // we have to force an update here otherwise ECharts will\n    // update its internal state and disable the series\n    this.setState({seriesSelection, forceUpdate: true}, () =>\n      this.setState({forceUpdate: false})\n    );\n  };\n\n  render() {\n    const {\n      theme,\n      loading: _loading,\n      reloading: _reloading,\n      yAxis,\n      releaseSeries,\n      zoomRenderProps,\n      timeseriesData,\n      previousTimeseriesData,\n      showLegend,\n      legendOptions,\n      chartOptions: chartOptionsProp,\n      currentSeriesNames,\n      previousSeriesNames,\n      seriesTransformer,\n      previousSeriesTransformer,\n      colors,\n      height,\n      timeframe,\n      topEvents,\n      tableData,\n      fromDiscover,\n      ...props\n    } = this.props;\n    const {seriesSelection} = this.state;\n\n    let Component = this.getChartComponent();\n\n    if (Component === WorldMapChart) {\n      const {data, title} = processTableResults(tableData);\n      const tableSeries = [\n        {\n          seriesName: title,\n          data,\n        },\n      ];\n      return <WorldMapChart series={tableSeries} fromDiscover={fromDiscover} />;\n    }\n\n    Component = Component as Exclude<\n      ChartComponent,\n      React.ComponentType<WorldMapChartProps>\n    >;\n\n    const data = [\n      ...(currentSeriesNames.length > 0 ? currentSeriesNames : [t('Current')]),\n      ...(previousSeriesNames.length > 0 ? previousSeriesNames : [t('Previous')]),\n    ];\n\n    const releasesLegend = t('Releases');\n\n    const hasOther = topEvents && topEvents + 1 === timeseriesData.length;\n    if (hasOther) {\n      data.push('Other');\n    }\n\n    if (Array.isArray(releaseSeries)) {\n      data.push(releasesLegend);\n    }\n\n    // Temporary fix to improve performance on pages with a high number of releases.\n    const releases = releaseSeries && releaseSeries[0];\n    const hideReleasesByDefault =\n      Array.isArray(releaseSeries) &&\n      (releases as any)?.markLine?.data &&\n      (releases as any).markLine.data.length >= RELEASE_LINES_THRESHOLD;\n\n    const selected = !Array.isArray(releaseSeries)\n      ? seriesSelection\n      : Object.keys(seriesSelection).length === 0 && hideReleasesByDefault\n      ? {[releasesLegend]: false}\n      : seriesSelection;\n\n    const legend = showLegend\n      ? {\n          right: 16,\n          top: 12,\n          data,\n          selected,\n          ...(legendOptions ?? {}),\n        }\n      : undefined;\n\n    let series = Array.isArray(releaseSeries)\n      ? [...timeseriesData, ...releaseSeries]\n      : timeseriesData;\n    let previousSeries = previousTimeseriesData;\n\n    if (seriesTransformer) {\n      series = seriesTransformer(series);\n    }\n\n    if (previousSeriesTransformer) {\n      previousSeries = previousSeries?.map(\n        prev => previousSeriesTransformer(prev) as Series\n      );\n    }\n    const chartColors = timeseriesData.length\n      ? colors?.slice(0, series.length) ?? [\n          ...theme.charts.getColorPalette(timeseriesData.length - 2 - (hasOther ? 1 : 0)),\n        ]\n      : undefined;\n    if (chartColors && chartColors.length && hasOther) {\n      chartColors.push(theme.chartOther);\n    }\n    const chartOptions = {\n      colors: chartColors,\n      grid: {\n        left: '24px',\n        right: '24px',\n        top: '32px',\n        bottom: '12px',\n      },\n      seriesOptions: {\n        showSymbol: false,\n      },\n      tooltip: {\n        trigger: 'axis' as const,\n        truncate: 80,\n        valueFormatter: (value: number) => tooltipFormatter(value, yAxis),\n      },\n      xAxis: timeframe\n        ? {\n            min: timeframe.start,\n            max: timeframe.end,\n          }\n        : undefined,\n      yAxis: {\n        axisLabel: {\n          color: theme.chartLabel,\n          formatter: (value: number) => axisLabelFormatter(value, yAxis),\n        },\n      },\n      ...(chartOptionsProp ?? {}),\n      animation: typeof Component === typeof BarChart ? false : undefined,\n    };\n\n    return (\n      <Component\n        {...props}\n        {...zoomRenderProps}\n        {...chartOptions}\n        legend={legend}\n        onLegendSelectChanged={this.handleLegendSelectChanged}\n        series={series}\n        previousPeriod={previousSeries ? previousSeries : undefined}\n        height={height}\n      />\n    );\n  }\n}\n\nconst ThemedChart = withTheme(Chart);\n\nexport type EventsChartProps = {\n  api: Client;\n  /**\n   * Absolute end date.\n   */\n  end: DateString;\n  /**\n   * Environment condition.\n   */\n  environments: string[];\n  organization: OrganizationSummary;\n  /**\n   * Project ids\n   */\n  projects: number[];\n  /**\n   * The discover query string to find events with.\n   */\n  query: string;\n  router: InjectedRouter;\n  /**\n   * Absolute start date.\n   */\n  start: DateString;\n  /**\n   * The aggregate/metric to plot.\n   */\n  yAxis: string | string[];\n  /**\n   * Markup for optional chart header\n   */\n  chartHeader?: React.ReactNode;\n  /**\n   * Override the default color palette.\n   */\n  colors?: string[];\n  confirmedQuery?: boolean;\n  /**\n   * Name of the series\n   */\n  currentSeriesName?: string;\n  /**\n   * Don't show the previous period's data. Will automatically disable\n   * when start/end are used.\n   */\n  disablePrevious?: boolean;\n  /**\n   * Don't show the release marklines.\n   */\n  disableReleases?: boolean;\n  /**\n   * A list of release names to visually emphasize. Can only be used when `disableReleases` is false.\n   */\n  emphasizeReleases?: string[];\n  /**\n   * The fields that act as grouping conditions when generating a topEvents chart.\n   */\n  field?: string[];\n  /**\n   * The interval resolution for a chart e.g. 1m, 5m, 1d\n   */\n  interval?: string;\n  /**\n   * Order condition when showing topEvents\n   */\n  orderby?: string;\n  /**\n   * Relative datetime expression. eg. 14d\n   */\n  period?: string | null;\n  preserveReleaseQueryParams?: boolean;\n  /**\n   * Name of the previous series\n   */\n  previousSeriesName?: string;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  releaseQueryExtra?: Query;\n  /**\n   * Override the interval calculation and show daily results.\n   */\n  showDaily?: boolean;\n  /**\n   * Fetch n top events as dictated by the field and orderby props.\n   */\n  topEvents?: number;\n  /**\n   * Chart zoom will change 'pageStart' instead of 'start'\n   */\n  usePageZoom?: boolean;\n  /**\n   * Should datetimes be formatted in UTC?\n   */\n  utc?: boolean | null;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n} & Pick<\n  ChartProps,\n  | 'seriesTransformer'\n  | 'previousSeriesTransformer'\n  | 'showLegend'\n  | 'minutesThresholdToDisplaySeconds'\n  | 'disableableSeries'\n  | 'legendOptions'\n  | 'chartOptions'\n  | 'chartComponent'\n  | 'height'\n  | 'fromDiscover'\n>;\n\ntype ChartDataProps = {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  zoomRenderProps: ZoomRenderProps;\n  previousTimeseriesData?: Series[] | null;\n  releaseSeries?: Series[];\n  results?: Series[];\n  tableData?: TableDataWithTitle[];\n  timeframe?: {end: number; start: number};\n  timeseriesData?: Series[];\n  topEvents?: number;\n};\n\nclass EventsChart extends React.Component<EventsChartProps> {\n  isStacked() {\n    const {topEvents, yAxis} = this.props;\n    return (\n      (typeof topEvents === 'number' && topEvents > 0) ||\n      (Array.isArray(yAxis) && yAxis.length > 1)\n    );\n  }\n\n  render() {\n    const {\n      api,\n      organization,\n      period,\n      utc,\n      query,\n      router,\n      start,\n      end,\n      projects,\n      environments,\n      showLegend,\n      minutesThresholdToDisplaySeconds,\n      yAxis,\n      disablePrevious,\n      disableReleases,\n      emphasizeReleases,\n      currentSeriesName: currentName,\n      previousSeriesName: previousName,\n      seriesTransformer,\n      previousSeriesTransformer,\n      field,\n      interval,\n      showDaily,\n      topEvents,\n      orderby,\n      confirmedQuery,\n      colors,\n      chartHeader,\n      legendOptions,\n      chartOptions,\n      preserveReleaseQueryParams,\n      releaseQueryExtra,\n      disableableSeries,\n      chartComponent,\n      usePageZoom,\n      height,\n      withoutZerofill,\n      fromDiscover,\n      ...props\n    } = this.props;\n\n    // Include previous only on relative dates (defaults to relative if no start and end)\n    const includePrevious = !disablePrevious && !start && !end;\n\n    const yAxisArray = decodeList(yAxis);\n    const yAxisSeriesNames = yAxisArray.map(name => {\n      let yAxisLabel = name && isEquation(name) ? getEquation(name) : name;\n      if (yAxisLabel && yAxisLabel.length > 60) {\n        yAxisLabel = yAxisLabel.substr(0, 60) + '...';\n      }\n      return yAxisLabel;\n    });\n\n    const previousSeriesNames = previousName\n      ? [previousName]\n      : yAxisSeriesNames.map(name => t('previous %s', name));\n    const currentSeriesNames = currentName ? [currentName] : yAxisSeriesNames;\n\n    const intervalVal = showDaily ? '1d' : interval || getInterval(this.props, 'high');\n\n    let chartImplementation = ({\n      zoomRenderProps,\n      releaseSeries,\n      errored,\n      loading,\n      reloading,\n      results,\n      timeseriesData,\n      previousTimeseriesData,\n      timeframe,\n      tableData,\n    }: ChartDataProps) => {\n      if (errored) {\n        return (\n          <ErrorPanel>\n            <IconWarning color=\"gray300\" size=\"lg\" />\n          </ErrorPanel>\n        );\n      }\n      const seriesData = results ? results : timeseriesData;\n\n      return (\n        <TransitionChart\n          loading={loading}\n          reloading={reloading}\n          height={height ? `${height}px` : undefined}\n        >\n          <TransparentLoadingMask visible={reloading} />\n\n          {React.isValidElement(chartHeader) && chartHeader}\n\n          <ThemedChart\n            zoomRenderProps={zoomRenderProps}\n            loading={loading}\n            reloading={reloading}\n            showLegend={showLegend}\n            minutesThresholdToDisplaySeconds={minutesThresholdToDisplaySeconds}\n            releaseSeries={releaseSeries || []}\n            timeseriesData={seriesData ?? []}\n            previousTimeseriesData={previousTimeseriesData}\n            currentSeriesNames={currentSeriesNames}\n            previousSeriesNames={previousSeriesNames}\n            seriesTransformer={seriesTransformer}\n            previousSeriesTransformer={previousSeriesTransformer}\n            stacked={this.isStacked()}\n            yAxis={yAxisArray[0]}\n            showDaily={showDaily}\n            colors={colors}\n            legendOptions={legendOptions}\n            chartOptions={chartOptions}\n            disableableSeries={disableableSeries}\n            chartComponent={chartComponent}\n            height={height}\n            timeframe={timeframe}\n            topEvents={topEvents}\n            tableData={tableData ?? []}\n            fromDiscover={fromDiscover}\n          />\n        </TransitionChart>\n      );\n    };\n\n    if (!disableReleases) {\n      const previousChart = chartImplementation;\n      chartImplementation = chartProps => (\n        <ReleaseSeries\n          utc={utc}\n          period={period}\n          start={start}\n          end={end}\n          projects={projects}\n          environments={environments}\n          emphasizeReleases={emphasizeReleases}\n          preserveQueryParams={preserveReleaseQueryParams}\n          queryExtra={releaseQueryExtra}\n        >\n          {({releaseSeries}) => previousChart({...chartProps, releaseSeries})}\n        </ReleaseSeries>\n      );\n    }\n\n    return (\n      <ChartZoom\n        router={router}\n        period={period}\n        start={start}\n        end={end}\n        utc={utc}\n        usePageDate={usePageZoom}\n        {...props}\n      >\n        {zoomRenderProps => {\n          if (chartComponent === WorldMapChart) {\n            return (\n              <EventsGeoRequest\n                api={api}\n                organization={organization}\n                yAxis={yAxis}\n                query={query}\n                orderby={orderby}\n                projects={projects}\n                period={period}\n                start={start}\n                end={end}\n                environments={environments}\n                referrer={props.referrer}\n              >\n                {({errored, loading, reloading, tableData}) =>\n                  chartImplementation({\n                    errored,\n                    loading,\n                    reloading,\n                    zoomRenderProps,\n                    tableData,\n                  })\n                }\n              </EventsGeoRequest>\n            );\n          }\n          return (\n            <EventsRequest\n              {...props}\n              api={api}\n              organization={organization}\n              period={period}\n              project={projects}\n              environment={environments}\n              start={start}\n              end={end}\n              interval={intervalVal}\n              query={query}\n              includePrevious={includePrevious}\n              currentSeriesNames={currentSeriesNames}\n              previousSeriesNames={previousSeriesNames}\n              yAxis={yAxis}\n              field={field}\n              orderby={orderby}\n              topEvents={topEvents}\n              confirmedQuery={confirmedQuery}\n              partial\n              // Cannot do interpolation when stacking series\n              withoutZerofill={withoutZerofill && !this.isStacked()}\n              userModified={decodeScalar(router.location.query.userModified)}\n            >\n              {eventData => {\n                return chartImplementation({\n                  ...eventData,\n                  zoomRenderProps,\n                });\n              }}\n            </EventsRequest>\n          );\n        }}\n      </ChartZoom>\n    );\n  }\n}\n\nexport default EventsChart;\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableData, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\n\ninterface ChildrenRenderProps {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  tableData?: TableDataWithTitle[];\n}\n\nexport interface EventsGeoRequestProps {\n  api: Client;\n  children: (props: ChildrenRenderProps) => React.ReactElement;\n  end: DateString;\n  environments: string[];\n  organization: OrganizationSummary;\n  projects: number[];\n  query: string;\n  start: DateString;\n  yAxis: string | string[];\n  orderby?: string;\n  period?: string | null;\n  referrer?: string;\n}\n\nconst EventsGeoRequest = ({\n  api,\n  organization,\n  yAxis,\n  query,\n  orderby,\n  projects,\n  period,\n  start,\n  end,\n  environments,\n  referrer,\n  children,\n}: EventsGeoRequestProps) => {\n  const eventView = EventView.fromSavedQuery({\n    id: undefined,\n    name: '',\n    version: 2,\n    fields: Array.isArray(yAxis) ? yAxis : [yAxis],\n    query,\n    orderby: orderby ?? '',\n    projects,\n    range: period ?? '',\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n  const [results, setResults] = useState(undefined as ChildrenRenderProps['tableData']);\n  const [reloading, setReloading] = useState(false);\n  const [errored, setErrored] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    setErrored(false);\n\n    if (results) {\n      setReloading(true);\n    }\n\n    doDiscoverQuery<TableData>(api, `/organizations/${organization.slug}/events-geo/`, {\n      ...eventView.generateQueryStringObject(),\n      referrer,\n    })\n      .then(discoverQueryResults => {\n        if (mounted) {\n          setResults([discoverQueryResults[0]] as TableDataWithTitle[]);\n          setReloading(false);\n        }\n      })\n      .catch(() => {\n        if (mounted) {\n          setErrored(true);\n          setReloading(false);\n        }\n      });\n\n    return () => {\n      // Prevent setState leaking on unmounted component\n      mounted = false;\n    };\n  }, [query, yAxis, start, end, period, environments, projects]);\n\n  return children({\n    errored,\n    loading: !results && !errored,\n    reloading,\n    tableData: results,\n  });\n};\n\nexport default EventsGeoRequest;\n","import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type LineChartSeries = Series &\n  Omit<LineSeriesOption, 'data' | 'name'> & {\n    dataArray?: LineSeriesOption['data'];\n  };\n\nexport interface LineChartProps extends Omit<ChartProps, 'series'> {\n  series: LineChartSeries[];\n  seriesOptions?: LineSeriesOption;\n}\n\nexport function LineChart({series, seriesOptions, ...props}: LineChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      series={series.map(({seriesName, data, dataArray, ...options}) =>\n        LineSeries({\n          ...seriesOptions,\n          ...options,\n          name: seriesName,\n          data: dataArray || data?.map(({value, name}) => [name, value]),\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n        })\n      )}\n    />\n  );\n}\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport Truncate from 'sentry/components/truncate';\nimport {SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\ntype BaseProps = React.ComponentProps<typeof CompactSelect> & {\n  options: SelectValue<string>[];\n  title: string;\n  featureType?: 'alpha' | 'beta' | 'new';\n};\n\ntype SingleProps = BaseProps & {\n  onChange: (value: string) => void;\n  selected: string;\n  multiple?: false;\n};\ntype MultipleProps = BaseProps & {\n  multiple: true;\n  onChange: (value: string[]) => void;\n  selected: string[];\n};\n\nfunction OptionSelector({\n  options,\n  onChange,\n  selected,\n  title,\n  featureType,\n  multiple,\n  ...rest\n}: SingleProps | MultipleProps) {\n  const mappedOptions = useMemo(() => {\n    return options.map(opt => ({\n      ...opt,\n      label: <Truncate value={String(opt.label)} maxLength={60} expandDirection=\"left\" />,\n    }));\n  }, [options]);\n\n  function onValueChange(option) {\n    onChange(multiple ? option.map(o => o.value) : option.value);\n  }\n\n  function isOptionDisabled(option) {\n    return (\n      // Option is explicitly marked as disabled\n      option.disabled ||\n      // The user has reached the maximum number of selections (3), and the option hasn't\n      // yet been selected. These options should be disabled to visually indicate that the\n      // user has reached the max.\n      (multiple && selected.length === 3 && !selected.includes(option.value))\n    );\n  }\n\n  return (\n    <CompactSelect\n      options={mappedOptions}\n      value={selected}\n      onChange={onValueChange}\n      isOptionDisabled={isOptionDisabled}\n      multiple={multiple}\n      triggerProps={{\n        size: 'small',\n        borderless: true,\n        prefix: (\n          <Fragment>\n            {title}\n            {defined(featureType) ? <StyledFeatureBadge type={featureType} /> : null}\n          </Fragment>\n        ),\n      }}\n      placement=\"bottom right\"\n      {...rest}\n    />\n  );\n}\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin-left: 0px;\n`;\n\nexport default OptionSelector;\n","import {Component} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport partition from 'lodash/partition';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {t} from 'sentry/locale';\nimport {DateString, Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {escape} from 'sentry/utils';\nimport {getFormattedDate, getUtcDateString} from 'sentry/utils/dates';\nimport {formatVersion} from 'sentry/utils/formatters';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport {Theme} from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype ReleaseMetaBasic = {\n  date: string;\n  version: string;\n};\n\ntype ReleaseConditions = {\n  end: DateString;\n  environment: Readonly<string[]>;\n  project: Readonly<number[]>;\n  start: DateString;\n  cursor?: string;\n  query?: string;\n  statsPeriod?: string | null;\n};\n\n// This is not an exported action/function because releases list uses AsyncComponent\n// and this is not re-used anywhere else afaict\nfunction getOrganizationReleases(\n  api: Client,\n  organization: Organization,\n  conditions: ReleaseConditions\n) {\n  const query = {};\n  Object.keys(conditions).forEach(key => {\n    let value = conditions[key];\n    if (value && (key === 'start' || key === 'end')) {\n      value = getUtcDateString(value);\n    }\n    if (value) {\n      query[key] = value;\n    }\n  });\n  api.clear();\n  return api.requestPromise(`/organizations/${organization.slug}/releases/stats/`, {\n    includeAllArgs: true,\n    method: 'GET',\n    query,\n  }) as Promise<[ReleaseMetaBasic[], any, ResponseMeta]>;\n}\n\ntype Props = WithRouterProps & {\n  api: Client;\n  children: (s: State) => React.ReactNode;\n  end: DateString;\n  environments: Readonly<string[]>;\n  organization: Organization;\n  projects: Readonly<number[]>;\n  start: DateString;\n  theme: Theme;\n  emphasizeReleases?: string[];\n  memoized?: boolean;\n  period?: string | null;\n  preserveQueryParams?: boolean;\n  query?: string;\n  queryExtra?: Query;\n  releases?: ReleaseMetaBasic[] | null;\n  tooltip?: Exclude<Parameters<typeof MarkLine>[0], undefined>['tooltip'];\n  utc?: boolean | null;\n};\n\ntype State = {\n  releaseSeries: Series[];\n  releases: ReleaseMetaBasic[] | null;\n};\n\nclass ReleaseSeries extends Component<Props, State> {\n  state: State = {\n    releases: null,\n    releaseSeries: [],\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {releases} = this.props;\n\n    if (releases) {\n      // No need to fetch releases if passed in from props\n      this.setReleasesWithSeries(releases);\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !isEqual(prevProps.projects, this.props.projects) ||\n      !isEqual(prevProps.environments, this.props.environments) ||\n      !isEqual(prevProps.start, this.props.start) ||\n      !isEqual(prevProps.end, this.props.end) ||\n      !isEqual(prevProps.period, this.props.period) ||\n      !isEqual(prevProps.query, this.props.query)\n    ) {\n      this.fetchData();\n    } else if (!isEqual(prevProps.emphasizeReleases, this.props.emphasizeReleases)) {\n      this.setReleasesWithSeries(this.state.releases);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.props.api.clear();\n  }\n\n  _isMounted: boolean = false;\n\n  getOrganizationReleasesMemoized = memoize(\n    (api: Client, organization: Organization, conditions: ReleaseConditions) =>\n      getOrganizationReleases(api, organization, conditions),\n    (_, __, conditions) =>\n      Object.values(conditions)\n        .map(val => JSON.stringify(val))\n        .join('-')\n  );\n\n  async fetchData() {\n    const {\n      api,\n      organization,\n      projects,\n      environments,\n      period,\n      start,\n      end,\n      memoized,\n      query,\n    } = this.props;\n    const conditions: ReleaseConditions = {\n      start,\n      end,\n      project: projects,\n      environment: environments,\n      statsPeriod: period,\n      query,\n    };\n    let hasMore = true;\n    const releases: ReleaseMetaBasic[] = [];\n    while (hasMore) {\n      try {\n        const getReleases = memoized\n          ? this.getOrganizationReleasesMemoized\n          : getOrganizationReleases;\n        const [newReleases, , resp] = await getReleases(api, organization, conditions);\n        releases.push(...newReleases);\n        if (this._isMounted) {\n          this.setReleasesWithSeries(releases);\n        }\n\n        const pageLinks = resp?.getResponseHeader('Link');\n        if (pageLinks) {\n          const paginationObject = parseLinkHeader(pageLinks);\n          hasMore = paginationObject?.next?.results ?? false;\n          conditions.cursor = paginationObject.next.cursor;\n        } else {\n          hasMore = false;\n        }\n      } catch {\n        addErrorMessage(t('Error fetching releases'));\n        hasMore = false;\n      }\n    }\n  }\n\n  setReleasesWithSeries(releases) {\n    const {emphasizeReleases = []} = this.props;\n    const releaseSeries: Series[] = [];\n\n    if (emphasizeReleases.length) {\n      const [unemphasizedReleases, emphasizedReleases] = partition(\n        releases,\n        release => !emphasizeReleases.includes(release.version)\n      );\n      if (unemphasizedReleases.length) {\n        releaseSeries.push(this.getReleaseSeries(unemphasizedReleases, {type: 'dotted'}));\n      }\n      if (emphasizedReleases.length) {\n        releaseSeries.push(\n          this.getReleaseSeries(emphasizedReleases, {\n            opacity: 0.8,\n          })\n        );\n      }\n    } else {\n      releaseSeries.push(this.getReleaseSeries(releases));\n    }\n\n    this.setState({\n      releases,\n      releaseSeries,\n    });\n  }\n\n  getReleaseSeries = (releases, lineStyle = {}) => {\n    const {\n      organization,\n      router,\n      tooltip,\n      environments,\n      start,\n      end,\n      period,\n      preserveQueryParams,\n      queryExtra,\n      theme,\n    } = this.props;\n\n    const query = {...queryExtra};\n    if (organization.features.includes('global-views')) {\n      query.project = router.location.query.project;\n    }\n    if (preserveQueryParams) {\n      query.environment = [...environments];\n      query.start = start ? getUtcDateString(start) : undefined;\n      query.end = end ? getUtcDateString(end) : undefined;\n      query.statsPeriod = period || undefined;\n    }\n\n    const markLine = MarkLine({\n      animation: false,\n      lineStyle: {\n        color: theme.purple300,\n        opacity: 0.3,\n        type: 'solid',\n        ...lineStyle,\n      },\n      label: {\n        show: false,\n      },\n      data: releases.map(release => ({\n        xAxis: +new Date(release.date),\n        name: formatVersion(release.version, true),\n        value: formatVersion(release.version, true),\n        onClick: () => {\n          router.push({\n            pathname: `/organizations/${organization.slug}/releases/${release.version}/`,\n            query,\n          });\n        },\n        label: {\n          formatter: () => formatVersion(release.version, true),\n        },\n      })),\n      tooltip: tooltip || {\n        trigger: 'item',\n        formatter: ({data}: any) => {\n          // XXX using this.props here as this function does not get re-run\n          // unless projects are changed. Using a closure variable would result\n          // in stale values.\n          const time = getFormattedDate(data.value, 'MMM D, YYYY LT', {\n            local: !this.props.utc,\n          });\n          const version = escape(formatVersion(data.name, true));\n          return [\n            '<div class=\"tooltip-series\">',\n            `<div><span class=\"tooltip-label\"><strong>${t(\n              'Release'\n            )}</strong></span> ${version}</div>`,\n            '</div>',\n            '<div class=\"tooltip-date\">',\n            time,\n            '</div>',\n            '</div>',\n            '<div class=\"tooltip-arrow\"></div>',\n          ].join('');\n        },\n      },\n    });\n\n    return {\n      seriesName: 'Releases',\n      color: theme.purple200,\n      data: [],\n      markLine,\n    };\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children({\n      releases: this.state.releases,\n      releaseSeries: this.state.releaseSeries,\n    });\n  }\n}\n\nexport default withRouter(withOrganization(withApi(withTheme(ReleaseSeries))));\n","import {Component} from 'react';\n\nimport {AreaChart} from 'sentry/components/charts/areaChart';\n\ntype AreaChartProps = React.ComponentProps<typeof AreaChart>;\n\ntype Props = Omit<AreaChartProps, 'stacked' | 'ref'>;\n\nclass StackedAreaChart extends Component<Props> {\n  render() {\n    return <AreaChart tooltip={{filter: val => val > 0}} {...this.props} stacked />;\n  }\n}\n\nexport default StackedAreaChart;\n","import {Component, Fragment} from 'react';\n\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\n\nconst defaultProps = {\n  height: '200px',\n};\n\ntype Props = {\n  loading: boolean;\n  reloading: boolean;\n} & typeof defaultProps;\n\ntype State = {\n  key: number;\n  prevLoading: boolean;\n  prevReloading: boolean;\n};\n\nclass TransitionChart extends Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {\n    prevReloading: this.props.reloading,\n    prevLoading: this.props.loading,\n    key: 1,\n  };\n\n  static getDerivedStateFromProps(props: Readonly<Props>, state: State) {\n    // Transitions are controlled using variables called:\n    // - loading and,\n    // - reloading (also called pending in other apps)\n    //\n    // This component remounts the chart to ensure the stable transition\n    // from one dataset to the next.\n\n    const prevReloading = state.prevReloading;\n    const nextReloading = props.reloading;\n\n    const prevLoading = state.prevLoading;\n    const nextLoading = props.loading;\n\n    // whenever loading changes, we explicitly remount the children by updating\n    // the key prop; regardless of what state reloading is in\n    if (prevLoading !== nextLoading) {\n      return {\n        prevReloading: nextReloading,\n        prevLoading: nextLoading,\n        key: state.key + 1,\n      };\n    }\n\n    // invariant: prevLoading === nextLoading\n\n    // if loading is true, and hasn't changed from the previous re-render,\n    // do not remount the children.\n    if (nextLoading) {\n      return {\n        prevReloading: nextReloading,\n        prevLoading: nextLoading,\n        key: state.key,\n      };\n    }\n\n    // invariant: loading is false\n\n    // whenever the chart is transitioning from the reloading (pending) state to a non-loading state,\n    // remount the children\n    if (prevReloading && !nextReloading) {\n      return {\n        prevReloading: nextReloading,\n        prevLoading: nextLoading,\n        key: state.key + 1,\n      };\n    }\n\n    // do not remount the children in these remaining cases:\n    // !prevReloading && !nextReloading (re-render with no prop change)\n    // prevReloading && nextReloading (re-render with no prop change)\n    // !prevReloading && nextReloading (from loaded to pending state)\n\n    return {\n      prevReloading: nextReloading,\n      prevLoading: nextLoading,\n      key: state.key,\n    };\n  }\n\n  render() {\n    const {height, loading, reloading} = this.props;\n\n    if (loading && !reloading) {\n      return <LoadingPanel height={height} data-test-id=\"events-request-loading\" />;\n    }\n\n    // We make use of the key prop to explicitly remount the children\n    // https://reactjs.org/docs/lists-and-keys.html#keys\n    return <Fragment key={String(this.state.key)}>{this.props.children}</Fragment>;\n  }\n}\n\nexport default TransitionChart;\n","import styled from '@emotion/styled';\n\nimport LoadingMask, {LoadingMaskProps} from 'sentry/components/loadingMask';\n\ninterface TransparentLoadingMaskProps extends LoadingMaskProps {\n  visible: boolean;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: TransparentLoadingMaskProps) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<TransparentLoadingMaskProps>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import {useEffect, useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport type {MapSeriesOption, TooltipComponentOption} from 'echarts';\nimport * as echarts from 'echarts/core';\nimport max from 'lodash/max';\n\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\n\nimport VisualMap from './components/visualMap';\nimport MapSeries from './series/mapSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\ntype MapChartSeriesDataUnit = Omit<SeriesDataUnit, 'name' | 'itemStyle'> & {\n  // Docs for map itemStyle differ from Series data unit. See https://echarts.apache.org/en/option.html#series-map.data.itemStyle\n  itemStyle?: MapSeriesOption['itemStyle'];\n  name?: string;\n};\n\ntype MapChartSeries = Omit<Series, 'data'> & {\n  data: MapChartSeriesDataUnit[];\n};\n\nexport interface WorldMapChartProps extends Omit<ChartProps, 'series'> {\n  series: MapChartSeries[];\n  fromDiscover?: boolean;\n  fromDiscoverQueryList?: boolean;\n  seriesOptions?: MapSeriesOption;\n}\n\ntype JSONResult = Record<string, any>;\n\ntype State = {\n  codeToCountryMap: JSONResult | null;\n  countryToCodeMap: JSONResult | null;\n  map: JSONResult | null;\n};\n\nconst DEFAULT_ZOOM = 1.3;\nconst DISCOVER_ZOOM = 1.1;\nconst DISCOVER_QUERY_LIST_ZOOM = 0.9;\nconst DEFAULT_CENTER_X = 10.97;\nconst DISCOVER_QUERY_LIST_CENTER_Y = -12;\nconst DEFAULT_CENTER_Y = 9.71;\n\nexport function WorldMapChart({\n  series,\n  seriesOptions,\n  fromDiscover,\n  fromDiscoverQueryList,\n  ...props\n}: WorldMapChartProps) {\n  const theme = useTheme();\n  const [state, setState] = useState<State>(() => ({\n    countryToCodeMap: null,\n    map: null,\n    codeToCountryMap: null,\n  }));\n\n  useEffect(() => {\n    let unmounted = false;\n\n    if (!unmounted) {\n      loadWorldMap();\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  async function loadWorldMap() {\n    try {\n      const [countryCodesMap, world] = await Promise.all([\n        import('sentry/data/countryCodesMap'),\n        import('sentry/data/world.json'),\n      ]);\n\n      const countryToCodeMap = countryCodesMap.default;\n      const worldMap = world.default;\n\n      // Echarts not available in tests\n      echarts.registerMap?.('sentryWorld', worldMap as any);\n\n      const codeToCountryMap: Record<string, string> = {};\n\n      for (const country in worldMap) {\n        codeToCountryMap[countryToCodeMap[country]] = country;\n      }\n\n      setState({\n        countryToCodeMap,\n        map: worldMap,\n        codeToCountryMap,\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  if (state.countryToCodeMap === null || state.map === null) {\n    return null;\n  }\n\n  const processedSeries = series.map(({seriesName, data, ...options}) =>\n    MapSeries({\n      ...seriesOptions,\n      ...options,\n      map: 'sentryWorld',\n      name: seriesName,\n      nameMap: state.countryToCodeMap ?? undefined,\n      aspectScale: 0.85,\n      zoom: fromDiscover\n        ? DISCOVER_ZOOM\n        : fromDiscoverQueryList\n        ? DISCOVER_QUERY_LIST_ZOOM\n        : DEFAULT_ZOOM,\n      center: [\n        DEFAULT_CENTER_X,\n        fromDiscoverQueryList ? DISCOVER_QUERY_LIST_CENTER_Y : DEFAULT_CENTER_Y,\n      ],\n      itemStyle: {\n        areaColor: theme.gray200,\n        borderColor: theme.backgroundSecondary,\n      },\n      emphasis: {\n        itemStyle: {\n          areaColor: theme.pink300,\n        },\n        label: {\n          show: false,\n        },\n      },\n      data,\n      silent: fromDiscoverQueryList,\n      roam: !fromDiscoverQueryList,\n    })\n  );\n\n  // TODO(billy):\n  // For absolute values, we want min/max to based on min/max of series\n  // Otherwise it should be 0-100\n  const maxValue = max(series.map(({data}) => max(data.map(({value}) => value)))) || 1;\n\n  const tooltipFormatter: TooltipComponentOption['formatter'] = (format: any) => {\n    const {marker, name, value} = Array.isArray(format) ? format[0] : format;\n    // If value is NaN, don't show anything because we won't have a country code either\n    if (isNaN(value as number)) {\n      return '';\n    }\n\n    // `value` should be a number\n    const formattedValue = typeof value === 'number' ? value.toLocaleString() : '';\n    const countryOrCode = state.codeToCountryMap?.[name as string] || name;\n\n    return [\n      `<div class=\"tooltip-series tooltip-series-solo\">\n               <div><span class=\"tooltip-label\">${marker} <strong>${countryOrCode}</strong></span> ${formattedValue}</div>\n            </div>`,\n      '<div class=\"tooltip-arrow\"></div>',\n    ].join('');\n  };\n\n  return (\n    <BaseChart\n      options={{\n        backgroundColor: fromDiscoverQueryList ? undefined : theme.background,\n        visualMap: [\n          VisualMap({\n            show: !fromDiscoverQueryList,\n            left: fromDiscover ? undefined : 'right',\n            right: fromDiscover ? 5 : undefined,\n            min: 0,\n            max: maxValue,\n            inRange: {\n              color: [theme.purple200, theme.purple300],\n            },\n            text: ['High', 'Low'],\n            textStyle: {\n              color: theme.textColor,\n            },\n\n            // Whether show handles, which can be dragged to adjust \"selected range\".\n            // False because the handles are pretty ugly\n            calculable: false,\n          }),\n        ],\n      }}\n      {...props}\n      yAxis={null}\n      xAxis={null}\n      series={processedSeries}\n      tooltip={{\n        formatter: tooltipFormatter,\n      }}\n      height={fromDiscover ? 400 : undefined}\n    />\n  );\n}\n","import 'echarts/lib/chart/map';\n\nimport type {MapSeriesOption} from 'echarts';\n\nexport default function MapSeries(props: MapSeriesOption = {map: ''}): MapSeriesOption {\n  return {\n    roam: true,\n    ...props,\n    emphasis: {\n      label: {show: false},\n      ...props.emphasis,\n    },\n    type: 'map',\n  };\n}\n","import Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  children: ({hasFeature: boolean}) => React.ReactNode;\n};\n\n/**\n * Provide a component that passes a prop to indicate if the current\n * organization doesn't have access to discover results.\n */\nfunction DiscoverFeature({children}: Props) {\n  const noFeatureMessage = t('Requires discover feature.');\n\n  const renderDisabled = p => (\n    <Hovercard\n      body={\n        <FeatureDisabled\n          features={p.features}\n          hideHelpToggle\n          message={noFeatureMessage}\n          featureName={noFeatureMessage}\n        />\n      }\n    >\n      {p.children(p)}\n    </Hovercard>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:open-discover\"\n      features={['organizations:discover-basic']}\n      renderDisabled={renderDisabled}\n    >\n      {({hasFeature}) => children({hasFeature})}\n    </Feature>\n  );\n}\n\nexport default DiscoverFeature;\n","import Button, {ButtonProps} from 'sentry/components/button';\nimport DiscoverFeature from 'sentry/components/discover/discoverFeature';\nimport {t} from 'sentry/locale';\n\ntype DiscoverButtonProps = Omit<ButtonProps, 'aria-label'>;\n\n/**\n * Provide a button that turns itself off if the current organization\n * doesn't have access to discover results.\n */\nfunction DiscoverButton({children, ...buttonProps}: DiscoverButtonProps) {\n  return (\n    <DiscoverFeature>\n      {({hasFeature}) => (\n        <Button\n          disabled={!hasFeature}\n          aria-label={t('Open in Discover')}\n          {...buttonProps}\n        >\n          {children}\n        </Button>\n      )}\n    </DiscoverFeature>\n  );\n}\n\nexport default DiscoverButton;\n","import {useContext} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport space from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\n\ntype Props = {\n  Wrapper?: React.ComponentType;\n  className?: string;\n  project?: Project;\n};\n\nfunction UpdateAlert({Wrapper, project, className}: Props) {\n  const appStoreConnectContext = useContext(AppStoreConnectContext);\n\n  if (\n    !project ||\n    !appStoreConnectContext ||\n    !Object.keys(appStoreConnectContext).some(\n      key => !!appStoreConnectContext[key].updateAlertMessage\n    )\n  ) {\n    return null;\n  }\n\n  const notices = (\n    <Notices className={className}>\n      {Object.keys(appStoreConnectContext).map(key => {\n        const {updateAlertMessage} = appStoreConnectContext[key];\n        if (!updateAlertMessage) {\n          return null;\n        }\n\n        return (\n          <NoMarginBottomAlert key={key} type=\"warning\" showIcon>\n            <AlertContent>{updateAlertMessage}</AlertContent>\n          </NoMarginBottomAlert>\n        );\n      })}\n    </Notices>\n  );\n\n  return Wrapper ? <Wrapper>{notices}</Wrapper> : notices;\n}\n\nexport default UpdateAlert;\n\nconst Notices = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(3)};\n`;\n\nconst NoMarginBottomAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n\nconst AlertContent = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  gap: ${space(1)};\n`;\n","import * as AppStoreConnectContext from 'sentry/components/projects/appStoreConnectContext';\nimport {Organization, Project} from 'sentry/types';\n\nimport UpdateAlert from './updateAlert';\n\ntype Props = Pick<React.ComponentProps<typeof UpdateAlert>, 'className' | 'Wrapper'> & {\n  organization: Organization;\n  project?: Project;\n};\n\nfunction GlobalAppStoreConnectUpdateAlert({project, organization, ...rest}: Props) {\n  return (\n    <AppStoreConnectContext.Provider project={project} organization={organization}>\n      <UpdateAlert project={project} {...rest} />\n    </AppStoreConnectContext.Provider>\n  );\n}\n\nexport default GlobalAppStoreConnectUpdateAlert;\n","import {createContext, useEffect, useMemo, useState} from 'react';\n\nimport {Organization, Project} from 'sentry/types';\nimport {\n  AppStoreConnectCredentialsStatus,\n  AppStoreConnectStatusData,\n} from 'sentry/types/debugFiles';\nimport {getAppStoreValidationErrorMessage} from 'sentry/utils/appStoreValidationErrorMessage';\nimport useApi from 'sentry/utils/useApi';\n\nexport type AppStoreConnectContextProps =\n  | Record<string, AppStoreConnectStatusData>\n  | undefined;\n\nconst AppStoreConnectContext = createContext<AppStoreConnectContextProps>(undefined);\n\ntype ProviderProps = {\n  children: React.ReactNode;\n  organization: Organization;\n  project?: Project;\n};\n\nconst Provider = ({children, project, organization}: ProviderProps) => {\n  const api = useApi();\n\n  const [projectDetails, setProjectDetails] = useState<undefined | Project>();\n  const [appStoreConnectStatusData, setAppStoreConnectStatusData] =\n    useState<AppStoreConnectContextProps>(undefined);\n\n  const appStoreConnectSymbolSources = useMemo(() => {\n    return (\n      projectDetails?.symbolSources ? JSON.parse(projectDetails.symbolSources) : []\n    ).reduce((acc, {type, id, ...symbolSource}) => {\n      if (type.toLowerCase() === 'appstoreconnect') {\n        acc[id] = {type, ...symbolSource};\n      }\n      return acc;\n    }, {});\n  }, [projectDetails?.symbolSources]);\n\n  useEffect(() => {\n    if (!project || projectDetails) {\n      return undefined;\n    }\n\n    if (project.symbolSources) {\n      setProjectDetails(project);\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(`/projects/${organization.slug}/${project.slug}/`)\n      .then(responseProjectDetails => {\n        if (unmounted) {\n          return;\n        }\n\n        setProjectDetails(responseProjectDetails);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [project, organization, api]);\n\n  useEffect(() => {\n    if (!projectDetails) {\n      return undefined;\n    }\n\n    if (!Object.keys(appStoreConnectSymbolSources).length) {\n      return undefined;\n    }\n\n    let unmounted = false;\n\n    api\n      .requestPromise(\n        `/projects/${organization.slug}/${projectDetails.slug}/appstoreconnect/status/`\n      )\n      .then(appStoreConnectStatus => {\n        if (unmounted) {\n          return;\n        }\n        setAppStoreConnectStatusData(appStoreConnectStatus);\n      })\n      .catch(() => {\n        // We do not care about the error\n      });\n\n    return () => {\n      unmounted = true;\n    };\n  }, [projectDetails, organization, appStoreConnectSymbolSources]);\n\n  function getUpdateAlertMessage(\n    respository: NonNullable<Parameters<typeof getAppStoreValidationErrorMessage>[1]>,\n    credentials: AppStoreConnectCredentialsStatus\n  ) {\n    if (credentials?.status === 'valid') {\n      return undefined;\n    }\n\n    return getAppStoreValidationErrorMessage(credentials, respository);\n  }\n\n  return (\n    <AppStoreConnectContext.Provider\n      value={\n        appStoreConnectStatusData && project\n          ? Object.keys(appStoreConnectStatusData).reduce((acc, key) => {\n              const appStoreConnect = appStoreConnectStatusData[key];\n              return {\n                ...acc,\n                [key]: {\n                  ...appStoreConnect,\n                  updateAlertMessage: getUpdateAlertMessage(\n                    {\n                      name: appStoreConnectSymbolSources[key].name,\n                      link: `/settings/${organization.slug}/projects/${project.slug}/debug-symbols/?customRepository=${key}`,\n                    },\n                    appStoreConnect.credentials\n                  ),\n                },\n              };\n            }, {})\n          : undefined\n      }\n    >\n      {children}\n    </AppStoreConnectContext.Provider>\n  );\n};\n\nexport {Provider};\n\nexport default AppStoreConnectContext;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {joinTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {Panel} from 'sentry/components/panels';\nimport {IconFlag} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport TeamStore from 'sentry/stores/teamStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = {\n  api: Client;\n  organization: Organization;\n  project?: Project | null;\n};\n\ntype State = {\n  error: boolean;\n  loading: boolean;\n  team: string | null;\n  project?: Project | null;\n};\n\nclass MissingProjectMembership extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    error: false,\n    project: this.props.project,\n    team: '',\n  };\n\n  joinTeam(teamSlug: string) {\n    this.setState({\n      loading: true,\n    });\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: this.props.organization.slug,\n        teamId: teamSlug,\n      },\n      {\n        success: () => {\n          this.setState({\n            loading: false,\n            error: false,\n          });\n          addSuccessMessage(t('Request to join team sent.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n            error: true,\n          });\n          addErrorMessage(t('There was an error while trying to request access.'));\n        },\n      }\n    );\n  }\n\n  renderJoinTeam(teamSlug: string, features: Set<string>) {\n    const team = TeamStore.getBySlug(teamSlug);\n\n    if (!team) {\n      return null;\n    }\n    if (this.state.loading) {\n      if (features.has('open-membership')) {\n        return <Button busy>{t('Join Team')}</Button>;\n      }\n      return <Button busy>{t('Request Access')}</Button>;\n    }\n    if (team?.isPending) {\n      return <Button disabled>{t('Request Pending')}</Button>;\n    }\n    if (features.has('open-membership')) {\n      return (\n        <Button\n          priority=\"primary\"\n          type=\"button\"\n          onClick={this.joinTeam.bind(this, teamSlug)}\n        >\n          {t('Join Team')}\n        </Button>\n      );\n    }\n    return (\n      <Button\n        priority=\"primary\"\n        type=\"button\"\n        onClick={this.joinTeam.bind(this, teamSlug)}\n      >\n        {t('Request Access')}\n      </Button>\n    );\n  }\n\n  getTeamsForAccess() {\n    const request: string[] = [];\n    const pending: string[] = [];\n    const teams = this.state.project?.teams ?? [];\n    teams.forEach(({slug}) => {\n      const team = TeamStore.getBySlug(slug);\n      if (!team) {\n        return;\n      }\n      team.isPending ? pending.push(team.slug) : request.push(team.slug);\n    });\n\n    return [request, pending];\n  }\n\n  getPendingTeamOption = (team: string) => {\n    return {\n      value: team,\n      label: <DisabledLabel>{t(`#${team}`)}</DisabledLabel>,\n    };\n  };\n\n  render() {\n    const {organization} = this.props;\n    const teamSlug = this.state.team;\n    const teams = this.state.project?.teams ?? [];\n    const features = new Set(organization.features);\n\n    const teamAccess = [\n      {\n        label: t('Request Access'),\n        options: this.getTeamsForAccess()[0].map(request => ({\n          value: request,\n          label: t(`#${request}`),\n        })),\n      },\n      {\n        label: t('Pending Requests'),\n        options: this.getTeamsForAccess()[1].map(pending =>\n          this.getPendingTeamOption(pending)\n        ),\n      },\n    ];\n\n    return (\n      <StyledPanel>\n        {!teams.length ? (\n          <EmptyMessage icon={<IconFlag size=\"xl\" />}>\n            {t(\n              'No teams have access to this project yet. Ask an admin to add your team to this project.'\n            )}\n          </EmptyMessage>\n        ) : (\n          <EmptyMessage\n            icon={<IconFlag size=\"xl\" />}\n            title={t(\"You're not a member of this project.\")}\n            description={t(\n              `You'll need to join a team with access before you can view this data.`\n            )}\n            action={\n              <Field>\n                <StyledSelectControl\n                  name=\"select\"\n                  placeholder={t('Select a Team')}\n                  options={teamAccess}\n                  onChange={teamObj => {\n                    const team = teamObj ? teamObj.value : null;\n                    this.setState({team});\n                  }}\n                />\n                {teamSlug ? (\n                  this.renderJoinTeam(teamSlug, features)\n                ) : (\n                  <Button disabled>{t('Select a Team')}</Button>\n                )}\n              </Field>\n            }\n          />\n        )}\n      </StyledPanel>\n    );\n  }\n}\n\nconst StyledPanel = styled(Panel)`\n  margin: ${space(2)} 0;\n`;\n\nconst Field = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(2)};\n  text-align: left;\n`;\n\nconst StyledSelectControl = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst DisabledLabel = styled('div')`\n  display: flex;\n  opacity: 0.5;\n  overflow: hidden;\n`;\n\nexport default withApi(MissingProjectMembership);\n","import * as Sentry from '@sentry/react';\n\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport {AppStoreConnectValidationError} from 'sentry/types/debugFiles';\n\nexport const unexpectedErrorMessage = t(\n  'An unexpected error occurred while configuring the App Store Connect integration'\n);\n\nexport function getAppStoreValidationErrorMessage(\n  error: AppStoreConnectValidationError,\n  repo?: {link: string; name: string}\n) {\n  switch (error.code) {\n    case 'app-connect-authentication-error':\n      return repo\n        ? tct(\n            'App Store Connect credentials are invalid or missing. [linkToCustomRepository]',\n            {\n              linkToCustomRepository: (\n                <Link to={repo.link}>\n                  {tct(\n                    \"Make sure the credentials of the '[customRepositoryName]' repository are correct and exist.\",\n                    {\n                      customRepositoryName: repo.name,\n                    }\n                  )}\n                </Link>\n              ),\n            }\n          )\n        : t('The supplied App Store Connect credentials are invalid or missing.');\n    case 'app-connect-forbidden-error':\n      return t('The supplied API key does not have sufficient permissions.');\n    case 'app-connect-multiple-sources-error':\n      return t('Only one App Store Connect application is allowed in this project.');\n    default: {\n      // this shall not happen\n      Sentry.captureException(new Error('Unknown app store connect error.'));\n      return unexpectedErrorMessage;\n    }\n  }\n}\n","import {t} from 'sentry/locale';\nimport {measurementType, MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\nexport const MOBILE_VITAL_DETAILS: Record<MobileVital, Vital> = {\n  [MobileVital.AppStartCold]: {\n    slug: 'app_start_cold',\n    name: t('App Start Cold'),\n    description: t(\n      'Cold start is a measure of the application start up time from scratch.'\n    ),\n    type: measurementType(MobileVital.AppStartCold),\n  },\n  [MobileVital.AppStartWarm]: {\n    slug: 'app_start_warm',\n    name: t('App Start Warm'),\n    description: t(\n      'Warm start is a measure of the application start up time while still in memory.'\n    ),\n    type: measurementType(MobileVital.AppStartWarm),\n  },\n  [MobileVital.FramesTotal]: {\n    slug: 'frames_total',\n    name: t('Total Frames'),\n    description: t(\n      'Total frames is a count of the number of frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesTotal),\n  },\n  [MobileVital.FramesSlow]: {\n    slug: 'frames_slow',\n    name: t('Slow Frames'),\n    description: t(\n      'Slow frames is a count of the number of slow frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesSlow),\n  },\n  [MobileVital.FramesFrozen]: {\n    slug: 'frames_frozen',\n    name: t('Frozen Frames'),\n    description: t(\n      'Frozen frames is a count of the number of frozen frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesFrozen),\n  },\n  [MobileVital.FramesSlowRate]: {\n    slug: 'frames_slow_rate',\n    name: t('Slow Frames Rate'),\n    description: t(\n      'Slow Frames Rate is the percentage of frames recorded within a transaction that is considered slow.'\n    ),\n    type: measurementType(MobileVital.FramesSlowRate),\n  },\n  [MobileVital.FramesFrozenRate]: {\n    slug: 'frames_frozen_rate',\n    name: t('Frozen Frames Rate'),\n    description: t(\n      'Frozen Frames Rate is the percentage of frames recorded within a transaction that is considered frozen.'\n    ),\n    type: measurementType(MobileVital.FramesFrozenRate),\n  },\n  [MobileVital.StallCount]: {\n    slug: 'stall_count',\n    name: t('Stalls'),\n    description: t(\n      'Stalls is the number of times the application stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallCount),\n  },\n  [MobileVital.StallTotalTime]: {\n    slug: 'stall_total_time',\n    name: t('Total Stall Time'),\n    description: t(\n      'Stall Total Time is the total amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallTotalTime),\n  },\n  [MobileVital.StallLongestTime]: {\n    slug: 'stall_longest_time',\n    name: t('Longest Stall Time'),\n    description: t(\n      'Stall Longest Time is the longest amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallLongestTime),\n  },\n  [MobileVital.StallPercentage]: {\n    slug: 'stall_percentage',\n    name: t('Stall Percentage'),\n    description: t(\n      'Stall Percentage is the percentage of the transaction duration the application was stalled.'\n    ),\n    type: measurementType(MobileVital.StallPercentage),\n  },\n};\n\nexport enum Browser {\n  CHROME = 'Chrome',\n  EDGE = 'Edge',\n  OPERA = 'Opera',\n  FIREFOX = 'Firefox',\n  SAFARI = 'Safari',\n  IE = 'IE',\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import compact from 'lodash/compact';\nimport mean from 'lodash/mean';\nimport moment from 'moment';\n\nimport {\n  DateTimeObject,\n  getDiffInMinutes,\n  SIX_HOURS,\n  SIXTY_DAYS,\n  THIRTY_DAYS,\n} from 'sentry/components/charts/utils';\nimport {SessionApiResponse, SessionFieldWithOperation, SessionStatus} from 'sentry/types';\nimport {SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined, percent} from 'sentry/utils';\nimport {Theme} from 'sentry/utils/theme';\nimport {getCrashFreePercent, getSessionStatusPercent} from 'sentry/views/releases/utils';\nimport {sessionTerm} from 'sentry/views/releases/utils/sessionTerm';\n\n/**\n * If the time window is less than or equal 10, seconds will be displayed on the graphs\n */\nexport const MINUTES_THRESHOLD_TO_DISPLAY_SECONDS = 10;\n\nexport function getCount(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation\n) {\n  return groups.reduce((acc, group) => acc + group.totals[field], 0);\n}\n\nexport function getCountAtIndex(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation,\n  index: number\n) {\n  return groups.reduce((acc, group) => acc + group.series[field][index], 0);\n}\n\nexport function getCrashFreeRate(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation\n) {\n  const crashedRate = getSessionStatusRate(groups, field, SessionStatus.CRASHED);\n\n  return defined(crashedRate) ? getCrashFreePercent(100 - crashedRate) : null;\n}\n\nexport function getSeriesAverage(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation\n) {\n  const totalCount = getCount(groups, field);\n\n  const dataPoints = groups.filter(group => !!group.totals[field]).length;\n\n  return !defined(totalCount) || dataPoints === null || totalCount === 0\n    ? null\n    : totalCount / dataPoints;\n}\n\nexport function getSeriesSum(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation,\n  intervals: SessionApiResponse['intervals'] = []\n) {\n  const dataPointsSums: number[] = Array(intervals.length).fill(0);\n  const groupSeries = groups.map(group => group.series[field]);\n\n  groupSeries.forEach(series => {\n    series.forEach((dataPoint, idx) => (dataPointsSums[idx] += dataPoint));\n  });\n\n  return dataPointsSums;\n}\n\nexport function getSessionStatusRate(\n  groups: SessionApiResponse['groups'] = [],\n  field: SessionFieldWithOperation,\n  status: SessionStatus\n) {\n  const totalCount = getCount(groups, field);\n\n  const crashedCount = getCount(\n    groups.filter(({by}) => by['session.status'] === status),\n    field\n  );\n\n  return !defined(totalCount) || totalCount === 0\n    ? null\n    : percent(crashedCount ?? 0, totalCount ?? 0);\n}\n\nexport function getCrashFreeRateSeries(\n  groups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation\n): SeriesDataUnit[] {\n  return compact(\n    intervals.map((interval, i) => {\n      const intervalTotalSessions = groups.reduce(\n        (acc, group) => acc + (group.series[field]?.[i] ?? 0),\n        0\n      );\n\n      const intervalCrashedSessions =\n        groups.find(group => group.by['session.status'] === SessionStatus.CRASHED)\n          ?.series[field]?.[i] ?? 0;\n\n      const crashedSessionsPercent = percent(\n        intervalCrashedSessions,\n        intervalTotalSessions\n      );\n\n      if (intervalTotalSessions === 0) {\n        return null;\n      }\n\n      return {\n        name: interval,\n        value: getCrashFreePercent(100 - crashedSessionsPercent),\n      };\n    })\n  );\n}\n\nexport function getSessionStatusRateSeries(\n  groups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation,\n  status: SessionStatus\n): SeriesDataUnit[] {\n  return compact(\n    intervals.map((interval, i) => {\n      const intervalTotalSessions = groups.reduce(\n        (acc, group) => acc + group.series[field][i],\n        0\n      );\n\n      const intervalStatusSessions =\n        groups.find(group => group.by['session.status'] === status)?.series[field][i] ??\n        0;\n\n      const statusSessionsPercent = percent(\n        intervalStatusSessions,\n        intervalTotalSessions\n      );\n\n      if (intervalTotalSessions === 0) {\n        return null;\n      }\n\n      return {\n        name: interval,\n        value: getSessionStatusPercent(statusSessionsPercent),\n      };\n    })\n  );\n}\n\nexport function getSessionP50Series(\n  groups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation,\n  valueFormatter?: (value: number) => number\n): SeriesDataUnit[] {\n  return compact(\n    intervals.map((interval, i) => {\n      const meanValue = mean(\n        groups.map(group => group.series[field][i]).filter(v => !!v)\n      );\n\n      if (!meanValue) {\n        return null;\n      }\n\n      return {\n        name: interval,\n        value:\n          typeof valueFormatter === 'function' ? valueFormatter(meanValue) : meanValue,\n      };\n    })\n  );\n}\n\nexport function getAdoptionSeries(\n  releaseGroups: SessionApiResponse['groups'] = [],\n  allGroups: SessionApiResponse['groups'] = [],\n  intervals: SessionApiResponse['intervals'] = [],\n  field: SessionFieldWithOperation\n): SeriesDataUnit[] {\n  return intervals.map((interval, i) => {\n    const intervalReleaseSessions = releaseGroups.reduce(\n      (acc, group) => acc + (group.series[field]?.[i] ?? 0),\n      0\n    );\n    const intervalTotalSessions = allGroups.reduce(\n      (acc, group) => acc + (group.series[field]?.[i] ?? 0),\n      0\n    );\n\n    const intervalAdoption = percent(intervalReleaseSessions, intervalTotalSessions);\n\n    return {\n      name: interval,\n      value: Math.round(intervalAdoption),\n    };\n  });\n}\n\nexport function getCountSeries(\n  field: SessionFieldWithOperation,\n  group?: SessionApiResponse['groups'][0],\n  intervals: SessionApiResponse['intervals'] = []\n): SeriesDataUnit[] {\n  return intervals.map((interval, index) => ({\n    name: interval,\n    value: group?.series[field][index] ?? 0,\n  }));\n}\n\nexport function initSessionsChart(theme: Theme) {\n  const colors = theme.charts.getColorPalette(14);\n  return {\n    [SessionStatus.HEALTHY]: {\n      seriesName: sessionTerm.healthy,\n      data: [],\n      color: theme.green300,\n      areaStyle: {\n        color: theme.green300,\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n    [SessionStatus.ERRORED]: {\n      seriesName: sessionTerm.errored,\n      data: [],\n      color: colors[12],\n      areaStyle: {\n        color: colors[12],\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n    [SessionStatus.ABNORMAL]: {\n      seriesName: sessionTerm.abnormal,\n      data: [],\n      color: colors[15],\n      areaStyle: {\n        color: colors[15],\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n    [SessionStatus.CRASHED]: {\n      seriesName: sessionTerm.crashed,\n      data: [],\n      color: theme.red300,\n      areaStyle: {\n        color: theme.red300,\n        opacity: 1,\n      },\n      lineStyle: {\n        opacity: 0,\n        width: 0.4,\n      },\n    },\n  };\n}\n\ntype GetSessionsIntervalOptions = {\n  highFidelity?: boolean;\n};\n\nexport function getSessionsInterval(\n  datetimeObj: DateTimeObject,\n  {highFidelity}: GetSessionsIntervalOptions = {}\n) {\n  const diffInMinutes = getDiffInMinutes(datetimeObj);\n\n  if (moment(datetimeObj.start).isSameOrBefore(moment().subtract(30, 'days'))) {\n    // we cannot use sub-hour session resolution on buckets older than 30 days\n    highFidelity = false;\n  }\n\n  if (diffInMinutes >= SIXTY_DAYS) {\n    return '1d';\n  }\n\n  if (diffInMinutes >= THIRTY_DAYS) {\n    return '4h';\n  }\n\n  if (diffInMinutes >= SIX_HOURS) {\n    return '1h';\n  }\n\n  // limit on backend for sub-hour session resolution is set to six hours\n  if (highFidelity) {\n    if (diffInMinutes <= MINUTES_THRESHOLD_TO_DISPLAY_SECONDS) {\n      // This only works for metrics-based session stats.\n      // Backend will silently replace with '1m' for session-based stats.\n      return '10s';\n    }\n\n    if (diffInMinutes <= 30) {\n      return '1m';\n    }\n\n    return '5m';\n  }\n\n  return '1h';\n}\n\n// Sessions API can only round intervals to the closest hour - this is especially problematic when using sub-hour resolution.\n// We filter out results that are out of bounds on frontend and recalculate totals.\nexport function filterSessionsInTimeWindow(\n  sessions: SessionApiResponse,\n  start?: string,\n  end?: string\n) {\n  if (!start || !end) {\n    return sessions;\n  }\n\n  const filteredIndexes: number[] = [];\n\n  const intervals = sessions.intervals.filter((interval, index) => {\n    const isBetween = moment\n      .utc(interval)\n      .isBetween(moment.utc(start), moment.utc(end), undefined, '[]');\n    if (isBetween) {\n      filteredIndexes.push(index);\n    }\n\n    return isBetween;\n  });\n\n  const groups = sessions.groups.map(group => {\n    const series = {};\n    const totals = {};\n    Object.keys(group.series).forEach(field => {\n      totals[field] = 0;\n      series[field] = group.series[field].filter((value, index) => {\n        const isBetween = filteredIndexes.includes(index);\n        if (isBetween) {\n          totals[field] = (totals[field] ?? 0) + value;\n        }\n\n        return isBetween;\n      });\n      if (field.startsWith('p50')) {\n        totals[field] = mean(series[field]);\n      }\n      if (field.startsWith('count_unique')) {\n        /* E.g. users\n        We cannot sum here because users would not be unique anymore.\n        User can be repeated and part of multiple buckets in series but it's still that one user so totals would be wrong.\n        This operation is not 100% correct, because we are filtering series in time window but the total is for unfiltered series (it's the closest thing we can do right now) */\n        totals[field] = group.totals[field];\n      }\n    });\n    return {...group, series, totals};\n  });\n\n  return {\n    start: intervals[0],\n    end: intervals[intervals.length - 1],\n    query: sessions.query,\n    intervals,\n    groups,\n  };\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {browserHistory} from 'react-router';\nimport type {BarSeriesOption} from 'echarts';\nimport {Location} from 'history';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport BaseChart from 'sentry/components/charts/baseChart';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\nexport const ERRORS_BASIC_CHART_PERIODS = ['1h', '24h', '7d', '14d', '30d'];\n\ntype Props = AsyncComponent['props'] & {\n  location: Location;\n  onTotalValuesChange: (value: number | null) => void;\n  organization: Organization;\n  projectId?: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  projects: Project[] | null;\n};\n\nclass ProjectErrorsBasicChart extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      projects: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, projectId} = this.props;\n\n    if (!projectId) {\n      return [];\n    }\n\n    return [\n      [\n        'projects',\n        `/organizations/${organization.slug}/projects/`,\n        {\n          query: {\n            statsPeriod: this.getStatsPeriod(),\n            query: `id:${projectId}`,\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidMount() {\n    const {location} = this.props;\n    if (!ERRORS_BASIC_CHART_PERIODS.includes(location.query.statsPeriod)) {\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          statsPeriod: this.getStatsPeriod(),\n          start: undefined,\n          end: undefined,\n        },\n      });\n    }\n  }\n\n  onLoadAllEndpointsSuccess() {\n    this.props.onTotalValuesChange(\n      this.state.projects?.[0]?.stats?.reduce((acc, [, value]) => acc + value, 0) ?? null\n    );\n  }\n\n  getStatsPeriod() {\n    const {location} = this.props;\n    const statsPeriod = location.query.statsPeriod;\n\n    if (ERRORS_BASIC_CHART_PERIODS.includes(statsPeriod)) {\n      return statsPeriod;\n    }\n\n    return DEFAULT_STATS_PERIOD;\n  }\n\n  getSeries(): BarSeriesOption[] {\n    const {projects} = this.state;\n\n    return [\n      {\n        cursor: 'normal' as const,\n        name: t('Errors'),\n        type: 'bar',\n        data:\n          projects?.[0]?.stats?.map(([timestamp, value]) => [timestamp * 1000, value]) ??\n          [],\n      },\n    ];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {loading, reloading} = this.state;\n\n    return getDynamicText({\n      value: (\n        <TransitionChart loading={loading} reloading={reloading}>\n          <TransparentLoadingMask visible={reloading} />\n\n          <HeaderTitleLegend>{t('Daily Errors')}</HeaderTitleLegend>\n\n          <BaseChart\n            series={this.getSeries()}\n            isGroupedByDate\n            showTimeInTooltip\n            colors={theme => [theme.purple300, theme.purple200]}\n            grid={{left: '10px', right: '10px', top: '40px', bottom: '0px'}}\n          />\n        </TransitionChart>\n      ),\n      fixed: t('Number of Errors Chart'),\n    });\n  }\n}\n\nexport default ProjectErrorsBasicChart;\n","import Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport FeatureTourModal from 'sentry/components/modals/featureTourModal';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {PERFORMANCE_TOUR_STEPS} from 'sentry/views/performance/onboarding';\n\nconst DOCS_URL = 'https://docs.sentry.io/performance-monitoring/getting-started/';\n\ntype Props = {\n  organization: Organization;\n};\n\nfunction MissingPerformanceButtons({organization}: Props) {\n  function handleTourAdvance(step: number, duration: number) {\n    trackAnalyticsEvent({\n      eventKey: 'project_detail.performance_tour.advance',\n      eventName: 'Project Detail: Performance Tour Advance',\n      organization_id: parseInt(organization.id, 10),\n      step,\n      duration,\n    });\n  }\n\n  function handleClose(step: number, duration: number) {\n    trackAnalyticsEvent({\n      eventKey: 'project_detail.performance_tour.close',\n      eventName: 'Project Detail: Performance Tour Close',\n      organization_id: parseInt(organization.id, 10),\n      step,\n      duration,\n    });\n  }\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:project-performance-score-card\"\n      features={['performance-view']}\n      organization={organization}\n    >\n      <ButtonBar gap={1}>\n        <Button size=\"small\" priority=\"primary\" external href={DOCS_URL}>\n          {t('Start Setup')}\n        </Button>\n\n        <FeatureTourModal\n          steps={PERFORMANCE_TOUR_STEPS}\n          onAdvance={handleTourAdvance}\n          onCloseModal={handleClose}\n          doneText={t('Start Setup')}\n          doneUrl={DOCS_URL}\n        >\n          {({showModal}) => (\n            <Button size=\"small\" onClick={showModal}>\n              {t('Get Tour')}\n            </Button>\n          )}\n        </FeatureTourModal>\n      </ButtonBar>\n    </Feature>\n  );\n}\n\nexport default MissingPerformanceButtons;\n","import {Fragment} from 'react';\nimport round from 'lodash/round';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {shouldFetchPreviousPeriod} from 'sentry/components/charts/utils';\nimport Count from 'sentry/components/count';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {parseStatsPeriod} from 'sentry/components/organizations/timeRangeSelector/utils';\nimport ScoreCard from 'sentry/components/scoreCard';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {getTermHelp, PERFORMANCE_TERM} from 'sentry/views/performance/data';\n\nimport MissingPerformanceButtons from '../missingFeatureButtons/missingPerformanceButtons';\n\ntype Props = AsyncComponent['props'] & {\n  isProjectStabilized: boolean;\n  organization: Organization;\n  selection: PageFilters;\n  hasTransactions?: boolean;\n  query?: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  currentApdex: TableData | null;\n  previousApdex: TableData | null;\n};\n\nclass ProjectApdexScoreCard extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      currentApdex: null,\n      previousApdex: null,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, selection, isProjectStabilized, hasTransactions, query} =\n      this.props;\n\n    if (!this.hasFeature() || !isProjectStabilized || !hasTransactions) {\n      return [];\n    }\n\n    const {projects, environments, datetime} = selection;\n    const {period} = datetime;\n    const commonQuery = {\n      environment: environments,\n      project: projects.map(proj => String(proj)),\n      field: ['apdex()'],\n      query: ['event.type:transaction count():>0', query].join(' ').trim(),\n    };\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'currentApdex',\n        `/organizations/${organization.slug}/events/`,\n        {query: {...commonQuery, ...normalizeDateTimeParams(datetime)}},\n      ],\n    ];\n\n    if (\n      shouldFetchPreviousPeriod({\n        start: datetime.start,\n        end: datetime.end,\n        period: datetime.period,\n      })\n    ) {\n      const {start: previousStart} = parseStatsPeriod(\n        getPeriod({period, start: undefined, end: undefined}, {shouldDoublePeriod: true})\n          .statsPeriod!\n      );\n\n      const {start: previousEnd} = parseStatsPeriod(\n        getPeriod({period, start: undefined, end: undefined}, {shouldDoublePeriod: false})\n          .statsPeriod!\n      );\n\n      endpoints.push([\n        'previousApdex',\n        `/organizations/${organization.slug}/events/`,\n        {query: {...commonQuery, start: previousStart, end: previousEnd}},\n      ]);\n    }\n\n    return endpoints;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {selection, isProjectStabilized, hasTransactions, query} = this.props;\n\n    if (\n      prevProps.selection !== selection ||\n      prevProps.hasTransactions !== hasTransactions ||\n      prevProps.isProjectStabilized !== isProjectStabilized ||\n      prevProps.query !== query\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  hasFeature() {\n    return this.props.organization.features.includes('performance-view');\n  }\n\n  get cardTitle() {\n    return t('Apdex');\n  }\n\n  get cardHelp() {\n    const {organization} = this.props;\n    const baseHelp = getTermHelp(organization, PERFORMANCE_TERM.APDEX);\n\n    if (this.trend) {\n      return baseHelp + t(' This shows how it has changed since the last period.');\n    }\n\n    return baseHelp;\n  }\n\n  get currentApdex() {\n    const {currentApdex} = this.state;\n\n    const apdex = currentApdex?.data[0]?.['apdex()'];\n\n    return typeof apdex === 'undefined' ? undefined : Number(apdex);\n  }\n\n  get previousApdex() {\n    const {previousApdex} = this.state;\n\n    const apdex = previousApdex?.data[0]?.['apdex()'];\n\n    return typeof apdex === 'undefined' ? undefined : Number(apdex);\n  }\n\n  get trend() {\n    if (this.currentApdex && this.previousApdex) {\n      return round(this.currentApdex - this.previousApdex, 3);\n    }\n\n    return null;\n  }\n\n  get trendStatus(): React.ComponentProps<typeof ScoreCard>['trendStatus'] {\n    if (!this.trend) {\n      return undefined;\n    }\n\n    return this.trend > 0 ? 'good' : 'bad';\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderMissingFeatureCard() {\n    const {organization} = this.props;\n    return (\n      <ScoreCard\n        title={this.cardTitle}\n        help={this.cardHelp}\n        score={<MissingPerformanceButtons organization={organization} />}\n      />\n    );\n  }\n\n  renderScore() {\n    return defined(this.currentApdex) ? <Count value={this.currentApdex} /> : '\\u2014';\n  }\n\n  renderTrend() {\n    // we want to show trend only after currentApdex has loaded to prevent jumping\n    return defined(this.currentApdex) && defined(this.trend) ? (\n      <Fragment>\n        {this.trend >= 0 ? (\n          <IconArrow direction=\"up\" size=\"xs\" />\n        ) : (\n          <IconArrow direction=\"down\" size=\"xs\" />\n        )}\n        <Count value={Math.abs(this.trend)} />\n      </Fragment>\n    ) : null;\n  }\n\n  renderBody() {\n    const {hasTransactions} = this.props;\n\n    if (!this.hasFeature() || hasTransactions === false) {\n      return this.renderMissingFeatureCard();\n    }\n\n    return (\n      <ScoreCard\n        title={this.cardTitle}\n        help={this.cardHelp}\n        score={this.renderScore()}\n        trend={this.renderTrend()}\n        trendStatus={this.trendStatus}\n      />\n    );\n  }\n}\n\nexport default ProjectApdexScoreCard;\n","import round from 'lodash/round';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {\n  getDiffInMinutes,\n  shouldFetchPreviousPeriod,\n} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport ScoreCard from 'sentry/components/scoreCard';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  PageFilters,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n} from 'sentry/types';\nimport {defined, percent} from 'sentry/utils';\nimport {formatAbbreviatedNumber} from 'sentry/utils/formatters';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {displayCrashFreePercent, getCrashFreePercent} from 'sentry/views/releases/utils';\nimport {\n  getSessionTermDescription,\n  SessionTerm,\n} from 'sentry/views/releases/utils/sessionTerm';\n\nimport MissingReleasesButtons from '../missingFeatureButtons/missingReleasesButtons';\n\ntype Props = AsyncComponent['props'] & {\n  field: SessionFieldWithOperation.SESSIONS | SessionFieldWithOperation.USERS;\n  hasSessions: boolean | null;\n  isProjectStabilized: boolean;\n  organization: Organization;\n  selection: PageFilters;\n  query?: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  currentSessions: SessionApiResponse | null;\n  previousSessions: SessionApiResponse | null;\n};\n\nclass ProjectStabilityScoreCard extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      currentSessions: null,\n      previousSessions: null,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, selection, isProjectStabilized, hasSessions, query, field} =\n      this.props;\n\n    if (!isProjectStabilized || !hasSessions) {\n      return [];\n    }\n\n    const {projects, environments: environment, datetime} = selection;\n    const {period} = datetime;\n    const commonQuery = {\n      environment,\n      project: projects[0],\n      groupBy: 'session.status',\n      interval: getDiffInMinutes(datetime) > 24 * 60 ? '1d' : '1h',\n      query,\n      field,\n    };\n\n    // Unfortunately we can't do something like statsPeriod=28d&interval=14d to get scores for this and previous interval with the single request\n    // https://github.com/getsentry/sentry/pull/22770#issuecomment-758595553\n\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'currentSessions',\n        `/organizations/${organization.slug}/sessions/`,\n        {\n          query: {\n            ...commonQuery,\n            ...normalizeDateTimeParams(datetime),\n          },\n        },\n      ],\n    ];\n\n    if (\n      shouldFetchPreviousPeriod({\n        start: datetime.start,\n        end: datetime.end,\n        period: datetime.period,\n      })\n    ) {\n      const doubledPeriod = getPeriod(\n        {period, start: undefined, end: undefined},\n        {shouldDoublePeriod: true}\n      ).statsPeriod;\n\n      endpoints.push([\n        'previousSessions',\n        `/organizations/${organization.slug}/sessions/`,\n        {\n          query: {\n            ...commonQuery,\n            statsPeriodStart: doubledPeriod,\n            statsPeriodEnd: period ?? DEFAULT_STATS_PERIOD,\n          },\n        },\n      ]);\n    }\n\n    return endpoints;\n  }\n\n  get cardTitle() {\n    return this.props.field === SessionFieldWithOperation.SESSIONS\n      ? t('Crash Free Sessions')\n      : t('Crash Free Users');\n  }\n\n  get cardHelp() {\n    return getSessionTermDescription(\n      this.props.field === SessionFieldWithOperation.SESSIONS\n        ? SessionTerm.CRASH_FREE_SESSIONS\n        : SessionTerm.CRASH_FREE_USERS,\n      null\n    );\n  }\n\n  get score() {\n    const {currentSessions} = this.state;\n\n    return this.calculateCrashFree(currentSessions);\n  }\n\n  get trend() {\n    const {previousSessions} = this.state;\n\n    const previousScore = this.calculateCrashFree(previousSessions);\n\n    if (!defined(this.score) || !defined(previousScore)) {\n      return undefined;\n    }\n\n    return round(this.score - previousScore, 3);\n  }\n\n  get trendStatus(): React.ComponentProps<typeof ScoreCard>['trendStatus'] {\n    if (!this.trend) {\n      return undefined;\n    }\n\n    return this.trend > 0 ? 'good' : 'bad';\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {selection, isProjectStabilized, hasSessions, query} = this.props;\n\n    if (\n      prevProps.selection !== selection ||\n      prevProps.hasSessions !== hasSessions ||\n      prevProps.isProjectStabilized !== isProjectStabilized ||\n      prevProps.query !== query\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  calculateCrashFree(data?: SessionApiResponse | null) {\n    const {field} = this.props;\n\n    if (!data) {\n      return undefined;\n    }\n\n    const totalSessions = data.groups.reduce(\n      (acc, group) => acc + group.totals[field],\n      0\n    );\n\n    const crashedSessions = data.groups.find(\n      group => group.by['session.status'] === 'crashed'\n    )?.totals[field];\n\n    if (totalSessions === 0 || !defined(totalSessions) || !defined(crashedSessions)) {\n      return undefined;\n    }\n\n    const crashedSessionsPercent = percent(crashedSessions, totalSessions);\n\n    return getCrashFreePercent(100 - crashedSessionsPercent);\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderMissingFeatureCard() {\n    const {organization} = this.props;\n    return (\n      <ScoreCard\n        title={this.cardTitle}\n        help={this.cardHelp}\n        score={<MissingReleasesButtons organization={organization} health />}\n      />\n    );\n  }\n\n  renderScore() {\n    const {loading} = this.state;\n\n    if (loading || !defined(this.score)) {\n      return '\\u2014';\n    }\n\n    return displayCrashFreePercent(this.score);\n  }\n\n  renderTrend() {\n    const {loading} = this.state;\n\n    if (loading || !defined(this.score) || !defined(this.trend)) {\n      return null;\n    }\n\n    return (\n      <div>\n        {this.trend >= 0 ? (\n          <IconArrow direction=\"up\" size=\"xs\" />\n        ) : (\n          <IconArrow direction=\"down\" size=\"xs\" />\n        )}\n        {`${formatAbbreviatedNumber(Math.abs(this.trend))}\\u0025`}\n      </div>\n    );\n  }\n\n  renderBody() {\n    const {hasSessions} = this.props;\n\n    if (hasSessions === false) {\n      return this.renderMissingFeatureCard();\n    }\n\n    return (\n      <ScoreCard\n        title={this.cardTitle}\n        help={this.cardHelp}\n        score={this.renderScore()}\n        trend={this.renderTrend()}\n        trendStatus={this.trendStatus}\n      />\n    );\n  }\n}\n\nexport default ProjectStabilityScoreCard;\n","import {Fragment} from 'react';\n\nimport {fetchAnyReleaseExistence} from 'sentry/actionCreators/projects';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {shouldFetchPreviousPeriod} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {parseStatsPeriod} from 'sentry/components/organizations/timeRangeSelector/utils';\nimport ScoreCard from 'sentry/components/scoreCard';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getPeriod} from 'sentry/utils/getPeriod';\n\nimport MissingReleasesButtons from '../missingFeatureButtons/missingReleasesButtons';\n\nconst API_LIMIT = 1000;\n\ntype Release = {date: string; version: string};\n\ntype Props = AsyncComponent['props'] & {\n  isProjectStabilized: boolean;\n  organization: Organization;\n  selection: PageFilters;\n  query?: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  currentReleases: Release[] | null;\n  noReleaseEver: boolean;\n  previousReleases: Release[] | null;\n};\n\nclass ProjectVelocityScoreCard extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      currentReleases: null,\n      previousReleases: null,\n      noReleaseEver: false,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, selection, isProjectStabilized, query} = this.props;\n\n    if (!isProjectStabilized) {\n      return [];\n    }\n\n    const {projects, environments, datetime} = selection;\n    const {period} = datetime;\n    const commonQuery = {\n      environment: environments,\n      project: projects[0],\n      query,\n    };\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'currentReleases',\n        `/organizations/${organization.slug}/releases/stats/`,\n        {\n          includeAllArgs: true,\n          method: 'GET',\n          query: {\n            ...commonQuery,\n            ...normalizeDateTimeParams(datetime),\n          },\n        },\n      ],\n    ];\n\n    if (\n      shouldFetchPreviousPeriod({\n        start: datetime.start,\n        end: datetime.end,\n        period: datetime.period,\n      })\n    ) {\n      const {start: previousStart} = parseStatsPeriod(\n        getPeriod({period, start: undefined, end: undefined}, {shouldDoublePeriod: true})\n          .statsPeriod!\n      );\n\n      const {start: previousEnd} = parseStatsPeriod(\n        getPeriod({period, start: undefined, end: undefined}, {shouldDoublePeriod: false})\n          .statsPeriod!\n      );\n\n      endpoints.push([\n        'previousReleases',\n        `/organizations/${organization.slug}/releases/stats/`,\n        {\n          query: {\n            ...commonQuery,\n            start: previousStart,\n            end: previousEnd,\n          },\n        },\n      ]);\n    }\n\n    return endpoints;\n  }\n\n  /**\n   * If our releases are empty, determine if we had a release in the last 90 days (empty message differs then)\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {currentReleases, previousReleases} = this.state;\n    const {organization, selection, isProjectStabilized} = this.props;\n\n    if (!isProjectStabilized) {\n      return;\n    }\n\n    if ([...(currentReleases ?? []), ...(previousReleases ?? [])].length !== 0) {\n      this.setState({noReleaseEver: false});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    const hasOlderReleases = await fetchAnyReleaseExistence(\n      this.api,\n      organization.slug,\n      selection.projects[0]\n    );\n\n    this.setState({noReleaseEver: !hasOlderReleases, loading: false});\n  }\n\n  get cardTitle() {\n    return t('Number of Releases');\n  }\n\n  get cardHelp() {\n    return this.trend\n      ? t(\n          'The number of releases for this project and how it has changed since the last period.'\n        )\n      : t('The number of releases for this project.');\n  }\n\n  get trend() {\n    const {currentReleases, previousReleases} = this.state;\n\n    if (!defined(currentReleases) || !defined(previousReleases)) {\n      return null;\n    }\n\n    return currentReleases.length - previousReleases.length;\n  }\n\n  get trendStatus(): React.ComponentProps<typeof ScoreCard>['trendStatus'] {\n    if (!this.trend) {\n      return undefined;\n    }\n\n    return this.trend > 0 ? 'good' : 'bad';\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {selection, isProjectStabilized, query} = this.props;\n\n    if (\n      prevProps.selection !== selection ||\n      prevProps.isProjectStabilized !== isProjectStabilized ||\n      prevProps.query !== query\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderMissingFeatureCard() {\n    const {organization} = this.props;\n    return (\n      <ScoreCard\n        title={this.cardTitle}\n        help={this.cardHelp}\n        score={<MissingReleasesButtons organization={organization} />}\n      />\n    );\n  }\n\n  renderScore() {\n    const {currentReleases, loading} = this.state;\n\n    if (loading || !defined(currentReleases)) {\n      return '\\u2014';\n    }\n\n    return currentReleases.length === API_LIMIT\n      ? `${API_LIMIT - 1}+`\n      : currentReleases.length;\n  }\n\n  renderTrend() {\n    const {loading, currentReleases} = this.state;\n\n    if (loading || !defined(this.trend) || currentReleases?.length === API_LIMIT) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        {this.trend >= 0 ? (\n          <IconArrow direction=\"up\" size=\"xs\" />\n        ) : (\n          <IconArrow direction=\"down\" size=\"xs\" />\n        )}\n        {Math.abs(this.trend)}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {noReleaseEver} = this.state;\n\n    if (noReleaseEver) {\n      return this.renderMissingFeatureCard();\n    }\n\n    return (\n      <ScoreCard\n        title={this.cardTitle}\n        help={this.cardHelp}\n        score={this.renderScore()}\n        trend={this.renderTrend()}\n        trendStatus={this.trendStatus}\n      />\n    );\n  }\n}\n\nexport default ProjectVelocityScoreCard;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, SessionFieldWithOperation} from 'sentry/types';\n\nimport ProjectApdexScoreCard from './projectApdexScoreCard';\nimport ProjectStabilityScoreCard from './projectStabilityScoreCard';\nimport ProjectVelocityScoreCard from './projectVelocityScoreCard';\n\ntype Props = {\n  hasSessions: boolean | null;\n  isProjectStabilized: boolean;\n  organization: Organization;\n  selection: PageFilters;\n  hasTransactions?: boolean;\n  query?: string;\n};\n\nfunction ProjectScoreCards({\n  organization,\n  selection,\n  isProjectStabilized,\n  hasSessions,\n  hasTransactions,\n  query,\n}: Props) {\n  return (\n    <CardWrapper>\n      <ProjectStabilityScoreCard\n        organization={organization}\n        selection={selection}\n        isProjectStabilized={isProjectStabilized}\n        hasSessions={hasSessions}\n        query={query}\n        field={SessionFieldWithOperation.SESSIONS}\n      />\n\n      <ProjectStabilityScoreCard\n        organization={organization}\n        selection={selection}\n        isProjectStabilized={isProjectStabilized}\n        hasSessions={hasSessions}\n        query={query}\n        field={SessionFieldWithOperation.USERS}\n      />\n\n      <ProjectVelocityScoreCard\n        organization={organization}\n        selection={selection}\n        isProjectStabilized={isProjectStabilized}\n        query={query}\n      />\n\n      <ProjectApdexScoreCard\n        organization={organization}\n        selection={selection}\n        isProjectStabilized={isProjectStabilized}\n        hasTransactions={hasTransactions}\n        query={query}\n      />\n    </CardWrapper>\n  );\n}\n\nconst CardWrapper = styled('div')`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: grid;\n    grid-column-gap: ${space(2)};\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n\n  @media (min-width: 1600px) {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n`;\n\nexport default ProjectScoreCards;\n","import {t} from 'sentry/locale';\n\nconst NOT_AVAILABLE_MESSAGES = {\n  performance: t('This view is only available with Performance Monitoring.'),\n  discover: t('This view is only available with Discover.'),\n  releaseHealth: t('This view is only available with Release Health.'),\n};\n\nexport default NOT_AVAILABLE_MESSAGES;\n","import {Component} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {fetchTotalCount} from 'sentry/actionCreators/events';\nimport EventsChart, {EventsChartProps} from 'sentry/components/charts/eventsChart';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {isSelectionEqual} from 'sentry/components/organizations/pageFilters/utils';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t} from 'sentry/locale';\nimport {PageFilters} from 'sentry/types';\nimport {axisLabelFormatter} from 'sentry/utils/discover/charts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\ntype Props = Omit<\n  EventsChartProps,\n  keyof Omit<PageFilters, 'datetime'> | keyof PageFilters['datetime']\n> & {\n  onTotalValuesChange: (value: number | null) => void;\n  selection: PageFilters;\n  title: string;\n  yAxis: string;\n  help?: string;\n};\n\nclass ProjectBaseEventsChart extends Component<Props> {\n  componentDidMount() {\n    this.fetchTotalCount();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isSelectionEqual(this.props.selection, prevProps.selection)) {\n      this.fetchTotalCount();\n    }\n  }\n\n  async fetchTotalCount() {\n    const {api, organization, selection, onTotalValuesChange, query} = this.props;\n    const {projects, environments, datetime} = selection;\n\n    try {\n      const totals = await fetchTotalCount(api, organization.slug, {\n        field: [],\n        query,\n        environment: environments,\n        project: projects.map(proj => String(proj)),\n        ...normalizeDateTimeParams(datetime),\n      });\n      onTotalValuesChange(totals);\n    } catch (err) {\n      onTotalValuesChange(null);\n      Sentry.captureException(err);\n    }\n  }\n\n  render() {\n    const {\n      router,\n      organization,\n      selection,\n      api,\n      yAxis,\n      query,\n      field,\n      title,\n      help,\n      ...eventsChartProps\n    } = this.props;\n    const {projects, environments, datetime} = selection;\n    const {start, end, period, utc} = datetime;\n\n    return getDynamicText({\n      value: (\n        <EventsChart\n          {...eventsChartProps}\n          router={router}\n          organization={organization}\n          showLegend\n          yAxis={yAxis}\n          query={query}\n          api={api}\n          projects={projects}\n          environments={environments}\n          start={start}\n          end={end}\n          period={period}\n          utc={utc}\n          field={field}\n          currentSeriesName={t('This Period')}\n          previousSeriesName={t('Previous Period')}\n          disableableSeries={[t('This Period'), t('Previous Period')]}\n          chartHeader={\n            <HeaderTitleLegend>\n              {title}\n              {help && <QuestionTooltip size=\"sm\" position=\"top\" title={help} />}\n            </HeaderTitleLegend>\n          }\n          legendOptions={{right: 10, top: 0}}\n          chartOptions={{\n            grid: {left: '10px', right: '10px', top: '40px', bottom: '0px'},\n            yAxis: {\n              axisLabel: {\n                formatter: (value: number) => axisLabelFormatter(value, yAxis),\n              },\n              scale: true,\n            },\n          }}\n        />\n      ),\n      fixed: `${title} Chart`,\n    });\n  }\n}\n\nexport default withPageFilters(ProjectBaseEventsChart);\n","import {Component} from 'react';\nimport {withTheme} from '@emotion/react';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {shouldFetchPreviousPeriod} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  PageFilters,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n  SessionStatus,\n} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {percent} from 'sentry/utils';\nimport {getPeriod} from 'sentry/utils/getPeriod';\nimport {\n  filterSessionsInTimeWindow,\n  getCount,\n  getCountSeries,\n  getSessionsInterval,\n  initSessionsChart,\n} from 'sentry/utils/sessions';\nimport {Theme} from 'sentry/utils/theme';\nimport {getCrashFreePercent} from 'sentry/views/releases/utils';\n\nimport {DisplayModes} from '../projectCharts';\n\nconst omitIgnoredProps = (props: Props) =>\n  omit(props, ['api', 'organization', 'children', 'selection.datetime.utc']);\n\ntype ProjectSessionsChartRequestRenderProps = {\n  errored: boolean;\n  loading: boolean;\n  previousTimeseriesData: Series | null;\n  reloading: boolean;\n  timeseriesData: Series[];\n  totalSessions: number | null;\n};\n\ntype Props = {\n  api: Client;\n  children: (renderProps: ProjectSessionsChartRequestRenderProps) => React.ReactNode;\n  displayMode:\n    | DisplayModes.SESSIONS\n    | DisplayModes.STABILITY\n    | DisplayModes.STABILITY_USERS;\n  onTotalValuesChange: (value: number | null) => void;\n  organization: Organization;\n  selection: PageFilters;\n  theme: Theme;\n  disablePrevious?: boolean;\n  query?: string;\n};\n\ntype State = {\n  errored: boolean;\n  previousTimeseriesData: Series | null;\n  reloading: boolean;\n  timeseriesData: Series[] | null;\n  totalSessions: number | null;\n};\n\nclass ProjectSessionsChartRequest extends Component<Props, State> {\n  state: State = {\n    reloading: false,\n    errored: false,\n    timeseriesData: null,\n    previousTimeseriesData: null,\n    totalSessions: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (!isEqual(omitIgnoredProps(this.props), omitIgnoredProps(prevProps))) {\n      this.fetchData();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {\n      api,\n      selection: {datetime},\n      onTotalValuesChange,\n      displayMode,\n      disablePrevious,\n    } = this.props;\n    const shouldFetchWithPrevious =\n      !disablePrevious &&\n      shouldFetchPreviousPeriod({\n        start: datetime.start,\n        end: datetime.end,\n        period: datetime.period,\n      });\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n    }));\n\n    try {\n      const queryParams = this.queryParams({shouldFetchWithPrevious});\n      const response: SessionApiResponse = await api.requestPromise(this.path, {\n        query: queryParams,\n      });\n\n      const filteredResponse = filterSessionsInTimeWindow(\n        response,\n        queryParams.start,\n        queryParams.end\n      );\n\n      const {timeseriesData, previousTimeseriesData, totalSessions} =\n        displayMode === DisplayModes.SESSIONS\n          ? this.transformSessionCountData(filteredResponse)\n          : this.transformData(filteredResponse, {\n              fetchedWithPrevious: shouldFetchWithPrevious,\n            });\n\n      if (this.unmounting) {\n        return;\n      }\n\n      this.setState({\n        reloading: false,\n        timeseriesData,\n        previousTimeseriesData,\n        totalSessions,\n      });\n      onTotalValuesChange(totalSessions);\n    } catch {\n      addErrorMessage(t('Error loading chart data'));\n      this.setState({\n        errored: true,\n        reloading: false,\n        timeseriesData: null,\n        previousTimeseriesData: null,\n        totalSessions: null,\n      });\n    }\n  };\n\n  get path() {\n    const {organization} = this.props;\n\n    return `/organizations/${organization.slug}/sessions/`;\n  }\n\n  get field() {\n    const {displayMode} = this.props;\n    return displayMode === DisplayModes.STABILITY_USERS\n      ? SessionFieldWithOperation.USERS\n      : SessionFieldWithOperation.SESSIONS;\n  }\n\n  queryParams({shouldFetchWithPrevious = false}): Record<string, any> {\n    const {selection, query, organization} = this.props;\n    const {datetime, projects, environments: environment} = selection;\n\n    const baseParams = {\n      field: this.field,\n      groupBy: 'session.status',\n      interval: getSessionsInterval(datetime, {\n        highFidelity: organization.features.includes('minute-resolution-sessions'),\n      }),\n      project: projects[0],\n      environment,\n      query,\n    };\n\n    if (!shouldFetchWithPrevious) {\n      return {\n        ...baseParams,\n        ...normalizeDateTimeParams(datetime),\n      };\n    }\n\n    const {period} = selection.datetime;\n    const doubledPeriod = getPeriod(\n      {period, start: undefined, end: undefined},\n      {shouldDoublePeriod: true}\n    ).statsPeriod;\n\n    return {\n      ...baseParams,\n      statsPeriod: doubledPeriod,\n    };\n  }\n\n  transformData(responseData: SessionApiResponse, {fetchedWithPrevious = false}) {\n    const {theme} = this.props;\n    const {field} = this;\n\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(responseData.intervals.length / 2);\n\n    // calculate the total number of sessions for this period (exclude previous if there)\n    const totalSessions = responseData.groups.reduce(\n      (acc, group) =>\n        acc +\n        group.series[field]\n          .slice(fetchedWithPrevious ? dataMiddleIndex : 0)\n          .reduce((value, groupAcc) => groupAcc + value, 0),\n      0\n    );\n\n    const previousPeriodTotalSessions = fetchedWithPrevious\n      ? responseData.groups.reduce(\n          (acc, group) =>\n            acc +\n            group.series[field]\n              .slice(0, dataMiddleIndex)\n              .reduce((value, groupAcc) => groupAcc + value, 0),\n          0\n        )\n      : 0;\n\n    // TODO(project-details): refactor this to avoid duplication as we add more session charts\n    const timeseriesData = [\n      {\n        seriesName: t('This Period'),\n        color: theme.green300,\n        data: responseData.intervals\n          .slice(fetchedWithPrevious ? dataMiddleIndex : 0)\n          .map((interval, i) => {\n            const totalIntervalSessions = responseData.groups.reduce(\n              (acc, group) =>\n                acc +\n                group.series[field].slice(fetchedWithPrevious ? dataMiddleIndex : 0)[i],\n              0\n            );\n\n            const intervalCrashedSessions =\n              responseData.groups\n                .find(group => group.by['session.status'] === 'crashed')\n                ?.series[field].slice(fetchedWithPrevious ? dataMiddleIndex : 0)[i] ?? 0;\n\n            const crashedSessionsPercent = percent(\n              intervalCrashedSessions,\n              totalIntervalSessions\n            );\n\n            return {\n              name: interval,\n              value:\n                totalSessions === 0 && previousPeriodTotalSessions === 0\n                  ? 0\n                  : totalIntervalSessions === 0\n                  ? null\n                  : getCrashFreePercent(100 - crashedSessionsPercent),\n            };\n          }),\n      },\n    ] as Series[]; // TODO(project-detail): Change SeriesDataUnit value to support null\n\n    const previousTimeseriesData = fetchedWithPrevious\n      ? ({\n          seriesName: t('Previous Period'),\n          data: responseData.intervals.slice(0, dataMiddleIndex).map((_interval, i) => {\n            const totalIntervalSessions = responseData.groups.reduce(\n              (acc, group) => acc + group.series[field].slice(0, dataMiddleIndex)[i],\n              0\n            );\n\n            const intervalCrashedSessions =\n              responseData.groups\n                .find(group => group.by['session.status'] === 'crashed')\n                ?.series[field].slice(0, dataMiddleIndex)[i] ?? 0;\n\n            const crashedSessionsPercent = percent(\n              intervalCrashedSessions,\n              totalIntervalSessions\n            );\n\n            return {\n              name: responseData.intervals[i + dataMiddleIndex],\n              value:\n                totalSessions === 0 && previousPeriodTotalSessions === 0\n                  ? 0\n                  : totalIntervalSessions === 0\n                  ? null\n                  : getCrashFreePercent(100 - crashedSessionsPercent),\n            };\n          }),\n        } as Series) // TODO(project-detail): Change SeriesDataUnit value to support null\n      : null;\n\n    return {\n      totalSessions,\n      timeseriesData,\n      previousTimeseriesData,\n    };\n  }\n\n  transformSessionCountData(responseData: SessionApiResponse) {\n    const {theme} = this.props;\n    const sessionsChart = initSessionsChart(theme);\n    const {intervals, groups} = responseData;\n\n    const totalSessions = getCount(\n      responseData.groups,\n      SessionFieldWithOperation.SESSIONS\n    );\n\n    const chartData = [\n      {\n        ...sessionsChart[SessionStatus.HEALTHY],\n        data: getCountSeries(\n          SessionFieldWithOperation.SESSIONS,\n          groups.find(g => g.by['session.status'] === SessionStatus.HEALTHY),\n          intervals\n        ),\n      },\n      {\n        ...sessionsChart[SessionStatus.ERRORED],\n        data: getCountSeries(\n          SessionFieldWithOperation.SESSIONS,\n          groups.find(g => g.by['session.status'] === SessionStatus.ERRORED),\n          intervals\n        ),\n      },\n      {\n        ...sessionsChart[SessionStatus.ABNORMAL],\n        data: getCountSeries(\n          SessionFieldWithOperation.SESSIONS,\n          groups.find(g => g.by['session.status'] === SessionStatus.ABNORMAL),\n          intervals\n        ),\n      },\n      {\n        ...sessionsChart[SessionStatus.CRASHED],\n        data: getCountSeries(\n          SessionFieldWithOperation.SESSIONS,\n          groups.find(g => g.by['session.status'] === SessionStatus.CRASHED),\n          intervals\n        ),\n      },\n    ];\n\n    return {\n      timeseriesData: chartData,\n      previousTimeseriesData: null,\n      totalSessions,\n    };\n  }\n\n  render() {\n    const {children} = this.props;\n    const {timeseriesData, reloading, errored, totalSessions, previousTimeseriesData} =\n      this.state;\n    const loading = timeseriesData === null;\n\n    return children({\n      loading,\n      reloading,\n      errored,\n      totalSessions,\n      previousTimeseriesData,\n      timeseriesData: timeseriesData ?? [],\n    });\n  }\n}\n\nexport default withTheme(ProjectSessionsChartRequest);\n","import {Component, Fragment} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport type {LegendComponentOption} from 'echarts';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport ChartZoom, {ZoomRenderProps} from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport StackedAreaChart from 'sentry/components/charts/stackedAreaChart';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {RELEASE_LINES_THRESHOLD} from 'sentry/components/charts/utils';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {EChartEventHandler, Series} from 'sentry/types/echarts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {MINUTES_THRESHOLD_TO_DISPLAY_SECONDS} from 'sentry/utils/sessions';\nimport {Theme} from 'sentry/utils/theme';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport {displayCrashFreePercent} from 'sentry/views/releases/utils';\nimport {sessionTerm} from 'sentry/views/releases/utils/sessionTerm';\n\nimport {DisplayModes} from '../projectCharts';\n\nimport ProjectSessionsChartRequest from './projectSessionsChartRequest';\n\ntype Props = {\n  api: Client;\n  displayMode:\n    | DisplayModes.SESSIONS\n    | DisplayModes.STABILITY_USERS\n    | DisplayModes.STABILITY;\n  onTotalValuesChange: (value: number | null) => void;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  title: string;\n  disablePrevious?: boolean;\n  help?: string;\n  query?: string;\n};\n\nfunction ProjectBaseSessionsChart({\n  title,\n  organization,\n  router,\n  selection,\n  api,\n  onTotalValuesChange,\n  displayMode,\n  help,\n  disablePrevious,\n  query,\n}: Props) {\n  const theme = useTheme();\n\n  const {projects, environments, datetime} = selection;\n  const {start, end, period, utc} = datetime;\n\n  return (\n    <Fragment>\n      {getDynamicText({\n        value: (\n          <ChartZoom router={router} period={period} start={start} end={end} utc={utc}>\n            {zoomRenderProps => (\n              <ProjectSessionsChartRequest\n                api={api}\n                selection={selection}\n                organization={organization}\n                onTotalValuesChange={onTotalValuesChange}\n                displayMode={displayMode}\n                disablePrevious={disablePrevious}\n                query={query}\n              >\n                {({\n                  errored,\n                  loading,\n                  reloading,\n                  timeseriesData,\n                  previousTimeseriesData,\n                }) => (\n                  <ReleaseSeries\n                    utc={utc}\n                    period={period}\n                    start={start}\n                    end={end}\n                    projects={projects}\n                    environments={environments}\n                    query={query}\n                  >\n                    {({releaseSeries}) => {\n                      if (errored) {\n                        return (\n                          <ErrorPanel>\n                            <IconWarning color=\"gray300\" size=\"lg\" />\n                          </ErrorPanel>\n                        );\n                      }\n\n                      return (\n                        <TransitionChart loading={loading} reloading={reloading}>\n                          <TransparentLoadingMask visible={reloading} />\n\n                          <HeaderTitleLegend>\n                            {title}\n                            {help && (\n                              <QuestionTooltip size=\"sm\" position=\"top\" title={help} />\n                            )}\n                          </HeaderTitleLegend>\n\n                          <Chart\n                            theme={theme}\n                            zoomRenderProps={zoomRenderProps}\n                            reloading={reloading}\n                            timeSeries={timeseriesData}\n                            previousTimeSeries={\n                              previousTimeseriesData\n                                ? [previousTimeseriesData]\n                                : undefined\n                            }\n                            releaseSeries={releaseSeries}\n                            displayMode={displayMode}\n                          />\n                        </TransitionChart>\n                      );\n                    }}\n                  </ReleaseSeries>\n                )}\n              </ProjectSessionsChartRequest>\n            )}\n          </ChartZoom>\n        ),\n        fixed: `${title} Chart`,\n      })}\n    </Fragment>\n  );\n}\n\ntype ChartProps = {\n  displayMode:\n    | DisplayModes.SESSIONS\n    | DisplayModes.STABILITY\n    | DisplayModes.STABILITY_USERS;\n  releaseSeries: Series[];\n  reloading: boolean;\n  theme: Theme;\n  timeSeries: Series[];\n  zoomRenderProps: ZoomRenderProps;\n  previousTimeSeries?: Series[];\n};\n\ntype ChartState = {\n  forceUpdate: boolean;\n  seriesSelection: Record<string, boolean>;\n};\n\nclass Chart extends Component<ChartProps, ChartState> {\n  state: ChartState = {\n    seriesSelection: {},\n    forceUpdate: false,\n  };\n\n  shouldComponentUpdate(nextProps: ChartProps, nextState: ChartState) {\n    if (nextState.forceUpdate) {\n      return true;\n    }\n\n    if (!isEqual(this.state.seriesSelection, nextState.seriesSelection)) {\n      return true;\n    }\n\n    if (\n      nextProps.releaseSeries !== this.props.releaseSeries &&\n      !nextProps.reloading &&\n      !this.props.reloading\n    ) {\n      return true;\n    }\n\n    if (this.props.reloading && !nextProps.reloading) {\n      return true;\n    }\n\n    if (nextProps.timeSeries !== this.props.timeSeries) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // inspired by app/components/charts/eventsChart.tsx@handleLegendSelectChanged\n  handleLegendSelectChanged: EChartEventHandler<{\n    name: string;\n    selected: Record<string, boolean>;\n    type: 'legendselectchanged';\n  }> = ({selected}) => {\n    const seriesSelection = Object.keys(selected).reduce((state, key) => {\n      state[key] = selected[key];\n      return state;\n    }, {});\n\n    // we have to force an update here otherwise ECharts will\n    // update its internal state and disable the series\n    this.setState({seriesSelection, forceUpdate: true}, () =>\n      this.setState({forceUpdate: false})\n    );\n  };\n\n  get isCrashFree() {\n    const {displayMode} = this.props;\n\n    return [DisplayModes.STABILITY, DisplayModes.STABILITY_USERS].includes(displayMode);\n  }\n\n  get legend(): LegendComponentOption {\n    const {theme, timeSeries, previousTimeSeries, releaseSeries} = this.props;\n    const {seriesSelection} = this.state;\n\n    const hideReleasesByDefault =\n      (releaseSeries[0] as any)?.markLine?.data.length >= RELEASE_LINES_THRESHOLD;\n\n    const hideHealthyByDefault = timeSeries\n      .filter(s => sessionTerm.healthy !== s.seriesName)\n      .some(s => s.data.some(d => d.value > 0));\n\n    const selected =\n      Object.keys(seriesSelection).length === 0 &&\n      (hideReleasesByDefault || hideHealthyByDefault)\n        ? {\n            [t('Releases')]: !hideReleasesByDefault,\n            [sessionTerm.healthy]: !hideHealthyByDefault,\n          }\n        : seriesSelection;\n\n    return {\n      right: 10,\n      top: 0,\n      icon: 'circle',\n      itemHeight: 8,\n      itemWidth: 8,\n      itemGap: 12,\n      align: 'left' as const,\n      textStyle: {\n        color: theme.textColor,\n        verticalAlign: 'top',\n        fontSize: 11,\n        fontFamily: theme.text.family,\n      },\n      data: [\n        ...timeSeries.map(s => s.seriesName),\n        ...(previousTimeSeries ?? []).map(s => s.seriesName),\n        ...releaseSeries.map(s => s.seriesName),\n      ],\n      selected,\n    };\n  }\n\n  get chartOptions(): Omit<LineChartProps, 'series'> {\n    return {\n      grid: {left: '10px', right: '10px', top: '40px', bottom: '0px'},\n      seriesOptions: {\n        showSymbol: false,\n      },\n      tooltip: {\n        trigger: 'axis',\n        truncate: 80,\n        valueFormatter: (value: number | null) => {\n          if (value === null) {\n            return '\\u2014';\n          }\n\n          if (this.isCrashFree) {\n            return displayCrashFreePercent(value, 0, 3);\n          }\n\n          return typeof value === 'number' ? value.toLocaleString() : value;\n        },\n      },\n      yAxis: this.isCrashFree\n        ? {\n            axisLabel: {\n              formatter: (value: number) => displayCrashFreePercent(value),\n            },\n            scale: true,\n            max: 100,\n          }\n        : {min: 0},\n    };\n  }\n\n  render() {\n    const {zoomRenderProps, timeSeries, previousTimeSeries, releaseSeries} = this.props;\n\n    const ChartComponent = this.isCrashFree ? LineChart : StackedAreaChart;\n\n    return (\n      <ChartComponent\n        {...zoomRenderProps}\n        {...this.chartOptions}\n        legend={this.legend}\n        series={\n          Array.isArray(releaseSeries) ? [...timeSeries, ...releaseSeries] : timeSeries\n        }\n        previousPeriod={previousTimeSeries}\n        onLegendSelectChanged={this.handleLegendSelectChanged}\n        minutesThresholdToDisplaySeconds={MINUTES_THRESHOLD_TO_DISPLAY_SECONDS}\n        transformSinglePointToBar\n      />\n    );\n  }\n}\n\nexport default withPageFilters(ProjectBaseSessionsChart);\n","import {Component, Fragment} from 'react';\nimport {browserHistory, InjectedRouter} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport OptionSelector from 'sentry/components/charts/optionSelector';\nimport {\n  ChartContainer,\n  ChartControls,\n  InlineContainer,\n  SectionHeading,\n  SectionValue,\n} from 'sentry/components/charts/styles';\nimport {\n  getDiffInMinutes,\n  ONE_HOUR,\n  ONE_WEEK,\n  TWENTY_FOUR_HOURS,\n  TWO_WEEKS,\n} from 'sentry/components/charts/utils';\nimport {Panel} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport NOT_AVAILABLE_MESSAGES from 'sentry/constants/notAvailableMessages';\nimport {t} from 'sentry/locale';\nimport {Organization, SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withApi from 'sentry/utils/withApi';\nimport {\n  getSessionTermDescription,\n  SessionTerm,\n} from 'sentry/views/releases/utils/sessionTerm';\n\nimport {getTermHelp, PERFORMANCE_TERM} from '../performance/data';\n\nimport ProjectBaseEventsChart from './charts/projectBaseEventsChart';\nimport ProjectBaseSessionsChart from './charts/projectBaseSessionsChart';\nimport ProjectErrorsBasicChart from './charts/projectErrorsBasicChart';\n\nexport enum DisplayModes {\n  APDEX = 'apdex',\n  FAILURE_RATE = 'failure_rate',\n  TPM = 'tpm',\n  ERRORS = 'errors',\n  TRANSACTIONS = 'transactions',\n  STABILITY = 'crash_free',\n  STABILITY_USERS = 'crash_free_users',\n  SESSIONS = 'sessions',\n}\n\ntype Props = {\n  api: Client;\n  chartId: string;\n  chartIndex: number;\n  hasSessions: boolean | null;\n  hasTransactions: boolean;\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  theme: Theme;\n  visibleCharts: string[];\n  projectId?: string;\n  query?: string;\n};\n\ntype State = {\n  totalValues: number | null;\n};\n\nclass ProjectCharts extends Component<Props, State> {\n  state: State = {\n    totalValues: null,\n  };\n\n  get defaultDisplayModes() {\n    const {hasSessions, hasTransactions} = this.props;\n\n    if (!hasSessions && !hasTransactions) {\n      return [DisplayModes.ERRORS];\n    }\n\n    if (hasSessions && !hasTransactions) {\n      return [DisplayModes.STABILITY, DisplayModes.ERRORS];\n    }\n\n    if (!hasSessions && hasTransactions) {\n      return [DisplayModes.FAILURE_RATE, DisplayModes.APDEX];\n    }\n\n    return [DisplayModes.STABILITY, DisplayModes.APDEX];\n  }\n\n  get otherActiveDisplayModes() {\n    const {location, visibleCharts, chartId} = this.props;\n\n    return visibleCharts\n      .filter(visibleChartId => visibleChartId !== chartId)\n      .map(urlKey => {\n        return decodeScalar(\n          location.query[urlKey],\n          this.defaultDisplayModes[visibleCharts.findIndex(value => value === urlKey)]\n        );\n      });\n  }\n\n  get displayMode() {\n    const {location, chartId, chartIndex} = this.props;\n    const displayMode =\n      decodeScalar(location.query[chartId]) || this.defaultDisplayModes[chartIndex];\n\n    if (!Object.values(DisplayModes).includes(displayMode as DisplayModes)) {\n      return this.defaultDisplayModes[chartIndex];\n    }\n\n    return displayMode;\n  }\n\n  get displayModes(): SelectValue<string>[] {\n    const {organization, hasSessions, hasTransactions} = this.props;\n    const hasPerformance = organization.features.includes('performance-view');\n    const noPerformanceTooltip = NOT_AVAILABLE_MESSAGES.performance;\n    const noHealthTooltip = NOT_AVAILABLE_MESSAGES.releaseHealth;\n\n    return [\n      {\n        value: DisplayModes.STABILITY,\n        label: t('Crash Free Sessions'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.STABILITY) || !hasSessions,\n        tooltip: !hasSessions ? noHealthTooltip : undefined,\n      },\n      {\n        value: DisplayModes.STABILITY_USERS,\n        label: t('Crash Free Users'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.STABILITY_USERS) ||\n          !hasSessions,\n        tooltip: !hasSessions ? noHealthTooltip : undefined,\n      },\n      {\n        value: DisplayModes.APDEX,\n        label: t('Apdex'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.APDEX) ||\n          !hasPerformance ||\n          !hasTransactions,\n        tooltip:\n          hasPerformance && hasTransactions\n            ? getTermHelp(organization, PERFORMANCE_TERM.APDEX)\n            : noPerformanceTooltip,\n      },\n      {\n        value: DisplayModes.FAILURE_RATE,\n        label: t('Failure Rate'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.FAILURE_RATE) ||\n          !hasPerformance ||\n          !hasTransactions,\n        tooltip:\n          hasPerformance && hasTransactions\n            ? getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE)\n            : noPerformanceTooltip,\n      },\n      {\n        value: DisplayModes.TPM,\n        label: t('Transactions Per Minute'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.TPM) ||\n          !hasPerformance ||\n          !hasTransactions,\n        tooltip:\n          hasPerformance && hasTransactions\n            ? getTermHelp(organization, PERFORMANCE_TERM.TPM)\n            : noPerformanceTooltip,\n      },\n      {\n        value: DisplayModes.ERRORS,\n        label: t('Number of Errors'),\n        disabled: this.otherActiveDisplayModes.includes(DisplayModes.ERRORS),\n      },\n      {\n        value: DisplayModes.SESSIONS,\n        label: t('Number of Sessions'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.SESSIONS) || !hasSessions,\n        tooltip: !hasSessions ? noHealthTooltip : undefined,\n      },\n      {\n        value: DisplayModes.TRANSACTIONS,\n        label: t('Number of Transactions'),\n        disabled:\n          this.otherActiveDisplayModes.includes(DisplayModes.TRANSACTIONS) ||\n          !hasPerformance ||\n          !hasTransactions,\n        tooltip: hasPerformance && hasTransactions ? undefined : noPerformanceTooltip,\n      },\n    ];\n  }\n\n  get summaryHeading() {\n    switch (this.displayMode) {\n      case DisplayModes.ERRORS:\n        return t('Total Errors');\n      case DisplayModes.STABILITY:\n      case DisplayModes.SESSIONS:\n        return t('Total Sessions');\n      case DisplayModes.STABILITY_USERS:\n        return t('Total Users');\n      case DisplayModes.APDEX:\n      case DisplayModes.FAILURE_RATE:\n      case DisplayModes.TPM:\n      case DisplayModes.TRANSACTIONS:\n      default:\n        return t('Total Transactions');\n    }\n  }\n\n  get barChartInterval() {\n    const {query} = this.props.location;\n\n    const diffInMinutes = getDiffInMinutes({\n      ...query,\n      period: decodeScalar(query.statsPeriod),\n    });\n\n    if (diffInMinutes >= TWO_WEEKS) {\n      return '1d';\n    }\n\n    if (diffInMinutes >= ONE_WEEK) {\n      return '12h';\n    }\n\n    if (diffInMinutes > TWENTY_FOUR_HOURS) {\n      return '6h';\n    }\n\n    if (diffInMinutes === TWENTY_FOUR_HOURS) {\n      return '1h';\n    }\n\n    if (diffInMinutes <= ONE_HOUR) {\n      return '1m';\n    }\n\n    return '15m';\n  }\n\n  handleDisplayModeChange = (value: string) => {\n    const {location, chartId, chartIndex, organization} = this.props;\n\n    trackAnalyticsEvent({\n      eventKey: `project_detail.change_chart${chartIndex + 1}`,\n      eventName: `Project Detail: Change Chart #${chartIndex + 1}`,\n      organization_id: parseInt(organization.id, 10),\n      metric: value,\n    });\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {...location.query, [chartId]: value},\n    });\n  };\n\n  handleTotalValuesChange = (value: number | null) => {\n    if (value !== this.state.totalValues) {\n      this.setState({totalValues: value});\n    }\n  };\n\n  render() {\n    const {api, router, location, organization, theme, projectId, hasSessions, query} =\n      this.props;\n    const {totalValues} = this.state;\n    const hasDiscover = organization.features.includes('discover-basic');\n    const displayMode = this.displayMode;\n\n    return (\n      <Panel>\n        <ChartContainer>\n          {!defined(hasSessions) ? (\n            <LoadingPanel />\n          ) : (\n            <Fragment>\n              {displayMode === DisplayModes.APDEX && (\n                <ProjectBaseEventsChart\n                  title={t('Apdex')}\n                  help={getTermHelp(organization, PERFORMANCE_TERM.APDEX)}\n                  query={new MutableSearch([\n                    'event.type:transaction',\n                    query ?? '',\n                  ]).formatString()}\n                  yAxis=\"apdex()\"\n                  field={['apdex()']}\n                  api={api}\n                  router={router}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  colors={[CHART_PALETTE[0][0], theme.purple200]}\n                />\n              )}\n              {displayMode === DisplayModes.FAILURE_RATE && (\n                <ProjectBaseEventsChart\n                  title={t('Failure Rate')}\n                  help={getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE)}\n                  query={new MutableSearch([\n                    'event.type:transaction',\n                    query ?? '',\n                  ]).formatString()}\n                  yAxis=\"failure_rate()\"\n                  field={[`failure_rate()`]}\n                  api={api}\n                  router={router}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  colors={[theme.red300, theme.purple200]}\n                />\n              )}\n              {displayMode === DisplayModes.TPM && (\n                <ProjectBaseEventsChart\n                  title={t('Transactions Per Minute')}\n                  help={getTermHelp(organization, PERFORMANCE_TERM.TPM)}\n                  query={new MutableSearch([\n                    'event.type:transaction',\n                    query ?? '',\n                  ]).formatString()}\n                  yAxis=\"tpm()\"\n                  field={[`tpm()`]}\n                  api={api}\n                  router={router}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  colors={[theme.yellow300, theme.purple200]}\n                  disablePrevious\n                />\n              )}\n              {displayMode === DisplayModes.ERRORS &&\n                (hasDiscover ? (\n                  <ProjectBaseEventsChart\n                    title={t('Number of Errors')}\n                    query={new MutableSearch([\n                      '!event.type:transaction',\n                      query ?? '',\n                    ]).formatString()}\n                    yAxis=\"count()\"\n                    field={[`count()`]}\n                    api={api}\n                    router={router}\n                    organization={organization}\n                    onTotalValuesChange={this.handleTotalValuesChange}\n                    colors={[theme.purple300, theme.purple200]}\n                    interval={this.barChartInterval}\n                    chartComponent={BarChart}\n                    disableReleases\n                  />\n                ) : (\n                  <ProjectErrorsBasicChart\n                    organization={organization}\n                    projectId={projectId}\n                    location={location}\n                    onTotalValuesChange={this.handleTotalValuesChange}\n                  />\n                ))}\n              {displayMode === DisplayModes.TRANSACTIONS && (\n                <ProjectBaseEventsChart\n                  title={t('Number of Transactions')}\n                  query={new MutableSearch([\n                    'event.type:transaction',\n                    query ?? '',\n                  ]).formatString()}\n                  yAxis=\"count()\"\n                  field={[`count()`]}\n                  api={api}\n                  router={router}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  colors={[theme.gray200, theme.purple200]}\n                  interval={this.barChartInterval}\n                  chartComponent={BarChart}\n                  disableReleases\n                />\n              )}\n              {displayMode === DisplayModes.STABILITY && (\n                <ProjectBaseSessionsChart\n                  title={t('Crash Free Sessions')}\n                  help={getSessionTermDescription(SessionTerm.STABILITY, null)}\n                  router={router}\n                  api={api}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  displayMode={displayMode}\n                  query={query}\n                />\n              )}\n              {displayMode === DisplayModes.STABILITY_USERS && (\n                <ProjectBaseSessionsChart\n                  title={t('Crash Free Users')}\n                  help={getSessionTermDescription(SessionTerm.CRASH_FREE_USERS, null)}\n                  router={router}\n                  api={api}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  displayMode={displayMode}\n                  query={query}\n                />\n              )}\n              {displayMode === DisplayModes.SESSIONS && (\n                <ProjectBaseSessionsChart\n                  title={t('Number of Sessions')}\n                  router={router}\n                  api={api}\n                  organization={organization}\n                  onTotalValuesChange={this.handleTotalValuesChange}\n                  displayMode={displayMode}\n                  disablePrevious\n                  query={query}\n                />\n              )}\n            </Fragment>\n          )}\n        </ChartContainer>\n        <ChartControls>\n          {/* if hasSessions is not yet defined, it means that request is still in progress and we can't decide what default chart to show */}\n          {defined(hasSessions) ? (\n            <Fragment>\n              <InlineContainer>\n                <SectionHeading>{this.summaryHeading}</SectionHeading>\n                <SectionValue>\n                  {typeof totalValues === 'number'\n                    ? totalValues.toLocaleString()\n                    : '\\u2014'}\n                </SectionValue>\n              </InlineContainer>\n              <InlineContainer>\n                <OptionSelector\n                  title={t('Display')}\n                  selected={displayMode}\n                  options={this.displayModes}\n                  onChange={this.handleDisplayModeChange}\n                />\n              </InlineContainer>\n            </Fragment>\n          ) : (\n            <Placeholder height=\"34px\" />\n          )}\n        </ChartControls>\n      </Panel>\n    );\n  }\n}\n\nexport default withApi(withTheme(ProjectCharts));\n","import styled from '@emotion/styled';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Tag} from 'sentry/types';\nimport {SEMVER_TAGS} from 'sentry/utils/discover/fields';\n\nimport {TagValueLoader} from '../issueList/types';\n\ntype Props = {\n  onSearch: (q: string) => void;\n  query: string;\n  tagValueLoader: TagValueLoader;\n};\n\nfunction ProjectFilters({query, tagValueLoader, onSearch}: Props) {\n  const getTagValues = async (tag: Tag, currentQuery: string): Promise<string[]> => {\n    const values = await tagValueLoader(tag.key, currentQuery);\n    return values.map(({value}) => value);\n  };\n\n  return (\n    <FiltersWrapper>\n      <PageFilterBar>\n        <EnvironmentPageFilter />\n        <DatePageFilter alignDropdown=\"left\" />\n      </PageFilterBar>\n      <GuideAnchor target=\"releases_search\" position=\"bottom\">\n        <SmartSearchBar\n          searchSource=\"project_filters\"\n          query={query}\n          placeholder={t('Search by release version, build, package, or stage')}\n          maxSearchItems={5}\n          hasRecentSearches={false}\n          supportedTags={{\n            ...SEMVER_TAGS,\n            release: {\n              key: 'release',\n              name: 'release',\n            },\n          }}\n          onSearch={onSearch}\n          onGetTagValues={getTagValues}\n        />\n      </GuideAnchor>\n    </FiltersWrapper>\n  );\n}\n\nconst FiltersWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(0, max-content) 1fr;\n  gap: ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ProjectFilters;\n","import {Fragment, useCallback, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport pick from 'lodash/pick';\nimport * as qs from 'query-string';\n\nimport {Client} from 'sentry/api';\nimport Button, {ButtonLabel} from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DiscoverButton from 'sentry/components/discoverButton';\nimport GroupList from 'sentry/components/issues/groupList';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport QueryCount from 'sentry/components/queryCount';\nimport {DEFAULT_RELATIVE_PERIODS, DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport NoGroupsHandler from '../issueList/noGroupsHandler';\n\nenum IssuesType {\n  NEW = 'new',\n  UNHANDLED = 'unhandled',\n  REGRESSED = 'regressed',\n  RESOLVED = 'resolved',\n  ALL = 'all',\n}\n\nenum IssuesQuery {\n  NEW = 'is:unresolved is:for_review',\n  UNHANDLED = 'error.unhandled:true is:unresolved',\n  REGRESSED = 'regressed_in_release:latest',\n  RESOLVED = 'is:resolved',\n  ALL = '',\n}\n\ntype Count = {\n  all: number;\n  new: number;\n  regressed: number;\n  resolved: number;\n  unhandled: number;\n};\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projectId: number;\n  query?: string;\n};\n\nfunction ProjectIssues({organization, location, projectId, query, api}: Props) {\n  const [pageLinks, setPageLinks] = useState<string | undefined>();\n  const [onCursor, setOnCursor] = useState<(() => void) | undefined>();\n  const [issuesType, setIssuesType] = useState<IssuesType | string>(\n    (location.query.issuesType as string) || IssuesType.UNHANDLED\n  );\n  const [issuesCount, setIssuesCount] = useState<Count>({\n    all: 0,\n    new: 0,\n    regressed: 0,\n    resolved: 0,\n    unhandled: 0,\n  });\n\n  const fetchIssuesCount = useCallback(async () => {\n    const getIssueCountEndpoint = queryParameters => {\n      const issuesCountPath = `/organizations/${organization.slug}/issues-count/`;\n\n      return `${issuesCountPath}?${qs.stringify(queryParameters)}`;\n    };\n    const params = [\n      `${IssuesQuery.NEW}`,\n      `${IssuesQuery.ALL}`,\n      `${IssuesQuery.RESOLVED}`,\n      `${IssuesQuery.UNHANDLED}`,\n      `${IssuesQuery.REGRESSED}`,\n    ];\n    const queryParams = params.map(param => param);\n    const queryParameters = {\n      project: projectId,\n      query: queryParams,\n      ...(!location.query.start && {\n        statsPeriod: location.query.statsPeriod || DEFAULT_STATS_PERIOD,\n      }),\n      start: location.query.start,\n      end: location.query.end,\n      environment: location.query.environment,\n      cursor: location.query.cursor,\n    };\n\n    const issueCountEndpoint = getIssueCountEndpoint(queryParameters);\n\n    try {\n      const data = await api.requestPromise(issueCountEndpoint);\n      setIssuesCount({\n        all: data[`${IssuesQuery.ALL}`] || 0,\n        new: data[`${IssuesQuery.NEW}`] || 0,\n        resolved: data[`${IssuesQuery.RESOLVED}`] || 0,\n        unhandled: data[`${IssuesQuery.UNHANDLED}`] || 0,\n        regressed: data[`${IssuesQuery.REGRESSED}`] || 0,\n      });\n    } catch {\n      // do nothing\n    }\n  }, [\n    api,\n    location.query.cursor,\n    location.query.end,\n    location.query.environment,\n    location.query.start,\n    location.query.statsPeriod,\n    organization.slug,\n    projectId,\n  ]);\n  useEffect(() => {\n    fetchIssuesCount();\n  }, [fetchIssuesCount]);\n\n  function handleOpenInIssuesClick() {\n    trackAnalyticsEvent({\n      eventKey: 'project_detail.open_issues',\n      eventName: 'Project Detail: Open issues from project detail',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }\n\n  function handleOpenInDiscoverClick() {\n    trackAnalyticsEvent({\n      eventKey: 'project_detail.open_discover',\n      eventName: 'Project Detail: Open discover from project detail',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }\n\n  function handleFetchSuccess(groupListState, cursorHandler) {\n    setPageLinks(groupListState.pageLinks);\n    setOnCursor(() => cursorHandler);\n  }\n\n  const discoverQuery =\n    issuesType === 'unhandled'\n      ? ['event.type:error error.unhandled:true', query].join(' ').trim()\n      : ['event.type:error', query].join(' ').trim();\n\n  function getDiscoverUrl() {\n    return {\n      pathname: `/organizations/${organization.slug}/discover/results/`,\n      query: {\n        name: t('Frequent Unhandled Issues'),\n        field: ['issue', 'title', 'count()', 'count_unique(user)', 'project'],\n        sort: ['-count'],\n        query: discoverQuery,\n        display: 'top5',\n        ...normalizeDateTimeParams(pick(location.query, [...Object.values(URL_PARAM)])),\n      },\n    };\n  }\n\n  const endpointPath = `/organizations/${organization.slug}/issues/`;\n\n  const issueQuery = (Object.values(IssuesType) as string[]).includes(issuesType)\n    ? [`${IssuesQuery[issuesType.toUpperCase()]}`, query].join(' ').trim()\n    : [`${IssuesQuery.ALL}`, query].join(' ').trim();\n\n  const queryParams = {\n    limit: 5,\n    ...normalizeDateTimeParams(\n      pick(location.query, [...Object.values(URL_PARAM), 'cursor'])\n    ),\n    query: issueQuery,\n    sort: 'freq',\n  };\n\n  const issueSearch = {\n    pathname: endpointPath,\n    query: queryParams,\n  };\n\n  function handleIssuesTypeSelection(issueType: IssuesType) {\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        issuesType: issueType,\n      },\n    };\n\n    browserHistory.replace(to);\n    setIssuesType(issueType);\n  }\n\n  function renderEmptyMessage() {\n    const selectedTimePeriod = location.query.start\n      ? null\n      : DEFAULT_RELATIVE_PERIODS[\n          decodeScalar(location.query.statsPeriod, DEFAULT_STATS_PERIOD)\n        ];\n    const displayedPeriod = selectedTimePeriod\n      ? selectedTimePeriod.toLowerCase()\n      : t('given timeframe');\n\n    return (\n      <Panel>\n        <PanelBody>\n          <NoGroupsHandler\n            api={api}\n            organization={organization}\n            query={issueQuery}\n            selectedProjectIds={[projectId]}\n            groupIds={[]}\n            emptyMessage={tct('No [issuesType] issues for the [timePeriod].', {\n              issuesType: issuesType === 'all' ? '' : issuesType,\n              timePeriod: displayedPeriod,\n            })}\n          />\n        </PanelBody>\n      </Panel>\n    );\n  }\n\n  const issuesTypes = [\n    {value: IssuesType.ALL, label: t('All Issues'), issueCount: issuesCount.all},\n    {value: IssuesType.NEW, label: t('New Issues'), issueCount: issuesCount.new},\n    {\n      value: IssuesType.UNHANDLED,\n      label: t('Unhandled'),\n      issueCount: issuesCount.unhandled,\n    },\n    {\n      value: IssuesType.REGRESSED,\n      label: t('Regressed'),\n      issueCount: issuesCount.regressed,\n    },\n    {\n      value: IssuesType.RESOLVED,\n      label: t('Resolved'),\n      issueCount: issuesCount.resolved,\n    },\n  ];\n\n  return (\n    <Fragment>\n      <ControlsWrapper>\n        <StyledButtonBar active={issuesType} merged>\n          {issuesTypes.map(({value, label, issueCount}) => (\n            <Button\n              key={value}\n              barId={value}\n              size=\"xsmall\"\n              onClick={() => handleIssuesTypeSelection(value)}\n              data-test-id={`filter-${value}`}\n            >\n              {label}\n              <QueryCount count={issueCount} max={99} hideParens hideIfEmpty={false} />\n            </Button>\n          ))}\n        </StyledButtonBar>\n        <OpenInButtonBar gap={1}>\n          <Button\n            data-test-id=\"issues-open\"\n            size=\"xsmall\"\n            to={issueSearch}\n            onClick={handleOpenInIssuesClick}\n          >\n            {t('Open in Issues')}\n          </Button>\n          <DiscoverButton\n            onClick={handleOpenInDiscoverClick}\n            to={getDiscoverUrl()}\n            size=\"xsmall\"\n          >\n            {t('Open in Discover')}\n          </DiscoverButton>\n          <StyledPagination pageLinks={pageLinks} onCursor={onCursor} size=\"xsmall\" />\n        </OpenInButtonBar>\n      </ControlsWrapper>\n\n      <GroupList\n        orgId={organization.slug}\n        endpointPath={endpointPath}\n        queryParams={queryParams}\n        query=\"\"\n        canSelectGroups={false}\n        renderEmptyMessage={renderEmptyMessage}\n        withChart={false}\n        withPagination={false}\n        onFetchSuccess={handleFetchSuccess}\n      />\n    </Fragment>\n  );\n}\n\nconst ControlsWrapper = styled('div')`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n  flex-wrap: wrap;\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    display: block;\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  grid-template-columns: repeat(4, 1fr);\n  ${ButtonLabel} {\n    white-space: nowrap;\n    gap: ${space(0.5)};\n    span:last-child {\n      color: ${p => p.theme.buttonCount};\n    }\n  }\n  .active {\n    ${ButtonLabel} {\n      span:last-child {\n        color: ${p => p.theme.buttonCountActive};\n      }\n    }\n  }\n`;\n\nconst OpenInButtonBar = styled(ButtonBar)`\n  margin-top: ${space(1)};\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0;\n`;\n\nexport default ProjectIssues;\n","import Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\n\nconst DOCS_URL = 'https://docs.sentry.io/product/alerts-notifications/metric-alerts/';\n\ntype Props = {\n  organization: Organization;\n  projectSlug: string;\n};\n\nfunction MissingAlertsButtons({organization, projectSlug}: Props) {\n  return (\n    <ButtonBar gap={1}>\n      <CreateAlertButton\n        organization={organization}\n        iconProps={{size: 'xs'}}\n        size=\"small\"\n        priority=\"primary\"\n        referrer=\"project_detail\"\n        projectSlug={projectSlug}\n        hideIcon\n      >\n        {t('Create Alert')}\n      </CreateAlertButton>\n      <Button size=\"small\" external href={DOCS_URL}>\n        {t('Learn More')}\n      </Button>\n    </ButtonBar>\n  );\n}\n\nexport default MissingAlertsButtons;\n","import styled from '@emotion/styled';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport space from 'sentry/styles/space';\n\nexport const SidebarSection = styled('section')`\n  margin-bottom: ${space(2)};\n\n  ${SectionHeading} {\n    line-height: 1;\n  }\n`;\n\nexport const SectionHeadingWrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const SectionHeadingLink = styled(GlobalSelectionLink)`\n  display: flex;\n`;\n","import {Location} from 'history';\n\nexport function didProjectOrEnvironmentChange(location1: Location, location2: Location) {\n  return (\n    location1.query.environment !== location2.query.environment ||\n    location1.query.project !== location2.query.project\n  );\n}\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport AlertBadge from 'sentry/components/alertBadge';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {IconCheckmark, IconExclamation, IconFire, IconOpen} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\nimport {Incident, IncidentStatus} from '../alerts/types';\n\nimport MissingAlertsButtons from './missingFeatureButtons/missingAlertsButtons';\nimport {SectionHeadingLink, SectionHeadingWrapper, SidebarSection} from './styles';\nimport {didProjectOrEnvironmentChange} from './utils';\n\nconst PLACEHOLDER_AND_EMPTY_HEIGHT = '172px';\n\ntype Props = AsyncComponent['props'] & {\n  isProjectStabilized: boolean;\n  location: Location;\n  organization: Organization;\n  projectSlug: string;\n};\n\ntype State = {\n  resolvedAlerts: Incident[] | null;\n  unresolvedAlerts: Incident[] | null;\n  hasAlertRule?: boolean;\n} & AsyncComponent['state'];\n\nclass ProjectLatestAlerts extends AsyncComponent<Props, State> {\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    const {location, isProjectStabilized} = this.props;\n    // TODO(project-detail): we temporarily removed refetching based on timeselector\n    if (\n      this.state !== nextState ||\n      didProjectOrEnvironmentChange(location, nextProps.location) ||\n      isProjectStabilized !== nextProps.isProjectStabilized\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {location, isProjectStabilized} = this.props;\n\n    if (\n      didProjectOrEnvironmentChange(prevProps.location, location) ||\n      prevProps.isProjectStabilized !== isProjectStabilized\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {location, organization, isProjectStabilized} = this.props;\n\n    if (!isProjectStabilized) {\n      return [];\n    }\n\n    const query = {\n      ...pick(location.query, Object.values(URL_PARAM)),\n      per_page: 3,\n    };\n\n    // we are listing 3 alerts total, first unresolved and then we fill with resolved\n    return [\n      [\n        'unresolvedAlerts',\n        `/organizations/${organization.slug}/incidents/`,\n        {query: {...query, status: 'open'}},\n      ],\n      [\n        'resolvedAlerts',\n        `/organizations/${organization.slug}/incidents/`,\n        {query: {...query, status: 'closed'}},\n      ],\n    ];\n  }\n\n  /**\n   * If our alerts are empty, determine if we've configured alert rules (empty message differs then)\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {unresolvedAlerts, resolvedAlerts} = this.state;\n    const {location, organization, isProjectStabilized} = this.props;\n\n    if (!isProjectStabilized) {\n      return;\n    }\n\n    if ([...(unresolvedAlerts ?? []), ...(resolvedAlerts ?? [])].length !== 0) {\n      this.setState({hasAlertRule: true});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    const alertRules = await this.api.requestPromise(\n      `/organizations/${organization.slug}/alert-rules/`,\n      {\n        method: 'GET',\n        query: {\n          ...pick(location.query, [...Object.values(URL_PARAM)]),\n          per_page: 1,\n        },\n      }\n    );\n\n    this.setState({hasAlertRule: alertRules.length > 0, loading: false});\n  }\n\n  get alertsLink() {\n    const {organization} = this.props;\n\n    // as this is a link to latest alerts, we want to only preserve project and environment\n    return {\n      pathname: `/organizations/${organization.slug}/alerts/`,\n      query: {\n        statsPeriod: undefined,\n        start: undefined,\n        end: undefined,\n        utc: undefined,\n      },\n    };\n  }\n\n  renderAlertRow = (alert: Incident) => {\n    const {organization} = this.props;\n    const {status, id, identifier, title, dateClosed, dateStarted} = alert;\n    const isResolved = status === IncidentStatus.CLOSED;\n    const isWarning = status === IncidentStatus.WARNING;\n\n    const Icon = isResolved ? IconCheckmark : isWarning ? IconExclamation : IconFire;\n\n    const statusProps = {isResolved, isWarning};\n\n    return (\n      <AlertRowLink\n        to={`/organizations/${organization.slug}/alerts/${identifier}/`}\n        key={id}\n      >\n        <AlertBadgeWrapper {...statusProps} icon={Icon}>\n          <AlertBadge status={status} hideText />\n        </AlertBadgeWrapper>\n        <AlertDetails>\n          <AlertTitle>{title}</AlertTitle>\n          <AlertDate {...statusProps}>\n            {isResolved\n              ? tct('Resolved [date]', {\n                  date: dateClosed ? <TimeSince date={dateClosed} /> : null,\n                })\n              : tct('Triggered [date]', {\n                  date: (\n                    <TimeSince\n                      date={dateStarted}\n                      tooltipUnderlineColor={getStatusColor(statusProps)}\n                    />\n                  ),\n                })}\n          </AlertDate>\n        </AlertDetails>\n      </AlertRowLink>\n    );\n  };\n\n  renderInnerBody() {\n    const {organization, projectSlug, isProjectStabilized} = this.props;\n    const {loading, unresolvedAlerts, resolvedAlerts, hasAlertRule} = this.state;\n    const alertsUnresolvedAndResolved = [\n      ...(unresolvedAlerts ?? []),\n      ...(resolvedAlerts ?? []),\n    ];\n    const checkingForAlertRules =\n      alertsUnresolvedAndResolved.length === 0 && hasAlertRule === undefined;\n    const showLoadingIndicator = loading || checkingForAlertRules || !isProjectStabilized;\n\n    if (showLoadingIndicator) {\n      return <Placeholder height={PLACEHOLDER_AND_EMPTY_HEIGHT} />;\n    }\n\n    if (!hasAlertRule) {\n      return (\n        <MissingAlertsButtons organization={organization} projectSlug={projectSlug} />\n      );\n    }\n\n    if (alertsUnresolvedAndResolved.length === 0) {\n      return (\n        <StyledEmptyStateWarning small>{t('No alerts found')}</StyledEmptyStateWarning>\n      );\n    }\n\n    return alertsUnresolvedAndResolved.slice(0, 3).map(this.renderAlertRow);\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    return (\n      <SidebarSection>\n        <SectionHeadingWrapper>\n          <SectionHeading>{t('Latest Alerts')}</SectionHeading>\n          <SectionHeadingLink to={this.alertsLink}>\n            <IconOpen />\n          </SectionHeadingLink>\n        </SectionHeadingWrapper>\n\n        <div>{this.renderInnerBody()}</div>\n      </SidebarSection>\n    );\n  }\n}\n\nconst AlertRowLink = styled(Link)`\n  display: flex;\n  align-items: center;\n  height: 40px;\n  margin-bottom: ${space(3)};\n  margin-left: ${space(0.5)};\n  &,\n  &:hover,\n  &:focus {\n    color: inherit;\n  }\n  &:first-child {\n    margin-top: ${space(1)};\n  }\n`;\n\ntype StatusColorProps = {\n  isResolved: boolean;\n  isWarning: boolean;\n};\n\nconst getStatusColor = ({isResolved, isWarning}: StatusColorProps) =>\n  isResolved ? 'green300' : isWarning ? 'yellow300' : 'red300';\n\nconst AlertBadgeWrapper = styled('div')<{icon: React.ReactNode} & StatusColorProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  /* icon warning needs to be treated differently to look visually centered */\n  line-height: ${p => (p.icon === IconExclamation ? undefined : 1)};\n`;\n\nconst AlertDetails = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-left: ${space(1.5)};\n  ${p => p.theme.overflowEllipsis}\n  line-height: 1.35;\n`;\n\nconst AlertTitle = styled('div')`\n  font-weight: 400;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst AlertDate = styled('span')<StatusColorProps>`\n  color: ${p => p.theme[getStatusColor(p)]};\n`;\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  height: ${PLACEHOLDER_AND_EMPTY_HEIGHT};\n  justify-content: center;\n`;\n\nexport default ProjectLatestAlerts;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport {fetchAnyReleaseExistence} from 'sentry/actionCreators/projects';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport DateTime from 'sentry/components/dateTime';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Placeholder from 'sentry/components/placeholder';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport Version from 'sentry/components/version';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Release} from 'sentry/types';\nimport {analytics} from 'sentry/utils/analytics';\nimport {RELEASES_TOUR_STEPS} from 'sentry/views/releases/list/releasesPromo';\n\nimport MissingReleasesButtons from './missingFeatureButtons/missingReleasesButtons';\nimport {SectionHeadingLink, SectionHeadingWrapper, SidebarSection} from './styles';\nimport {didProjectOrEnvironmentChange} from './utils';\n\nconst PLACEHOLDER_AND_EMPTY_HEIGHT = '160px';\n\ntype Props = AsyncComponent['props'] & {\n  isProjectStabilized: boolean;\n  location: Location;\n  organization: Organization;\n  projectSlug: string;\n  projectId?: string;\n};\n\ntype State = {\n  releases: Release[] | null;\n  hasOlderReleases?: boolean;\n} & AsyncComponent['state'];\n\nclass ProjectLatestReleases extends AsyncComponent<Props, State> {\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    const {location, isProjectStabilized} = this.props;\n    // TODO(project-detail): we temporarily removed refetching based on timeselector\n    if (\n      this.state !== nextState ||\n      didProjectOrEnvironmentChange(location, nextProps.location) ||\n      isProjectStabilized !== nextProps.isProjectStabilized\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {location, isProjectStabilized} = this.props;\n\n    if (\n      didProjectOrEnvironmentChange(prevProps.location, location) ||\n      prevProps.isProjectStabilized !== isProjectStabilized\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {location, organization, projectSlug, isProjectStabilized} = this.props;\n\n    if (!isProjectStabilized) {\n      return [];\n    }\n\n    const query = {\n      ...pick(location.query, Object.values(URL_PARAM)),\n      per_page: 5,\n    };\n\n    // TODO(project-detail): this does not filter releases for the given time\n    return [\n      ['releases', `/projects/${organization.slug}/${projectSlug}/releases/`, {query}],\n    ];\n  }\n\n  /**\n   * If our releases are empty, determine if we had a release in the last 90 days (empty message differs then)\n   */\n  async onLoadAllEndpointsSuccess() {\n    const {releases} = this.state;\n    const {organization, projectId, isProjectStabilized} = this.props;\n\n    if (!isProjectStabilized) {\n      return;\n    }\n\n    if ((releases ?? []).length !== 0 || !projectId) {\n      this.setState({hasOlderReleases: true});\n      return;\n    }\n\n    this.setState({loading: true});\n\n    const hasOlderReleases = await fetchAnyReleaseExistence(\n      this.api,\n      organization.slug,\n      projectId\n    );\n\n    this.setState({hasOlderReleases, loading: false});\n  }\n\n  handleTourAdvance = (index: number) => {\n    const {organization, projectId} = this.props;\n\n    analytics('releases.landing_card_clicked', {\n      org_id: parseInt(organization.id, 10),\n      project_id: projectId && parseInt(projectId, 10),\n      step_id: index,\n      step_title: RELEASES_TOUR_STEPS[index].title,\n    });\n  };\n\n  get releasesLink() {\n    const {organization} = this.props;\n\n    // as this is a link to latest releases, we want to only preserve project and environment\n    return {\n      pathname: `/organizations/${organization.slug}/releases/`,\n      query: {\n        statsPeriod: undefined,\n        start: undefined,\n        end: undefined,\n        utc: undefined,\n      },\n    };\n  }\n\n  renderReleaseRow = (release: Release) => {\n    const {projectId} = this.props;\n    const {lastDeploy, dateCreated} = release;\n\n    return (\n      <Fragment key={release.version}>\n        <DateTime date={lastDeploy?.dateFinished || dateCreated} seconds={false} />\n        <TextOverflow>\n          <StyledVersion\n            version={release.version}\n            tooltipRawVersion\n            projectId={projectId}\n          />\n        </TextOverflow>\n      </Fragment>\n    );\n  };\n\n  renderInnerBody() {\n    const {organization, projectId, isProjectStabilized} = this.props;\n    const {loading, releases, hasOlderReleases} = this.state;\n    const checkingForOlderReleases =\n      !(releases ?? []).length && hasOlderReleases === undefined;\n    const showLoadingIndicator =\n      loading || checkingForOlderReleases || !isProjectStabilized;\n\n    if (showLoadingIndicator) {\n      return <Placeholder height={PLACEHOLDER_AND_EMPTY_HEIGHT} />;\n    }\n\n    if (!hasOlderReleases) {\n      return <MissingReleasesButtons organization={organization} projectId={projectId} />;\n    }\n\n    if (!releases || releases.length === 0) {\n      return (\n        <StyledEmptyStateWarning small>{t('No releases found')}</StyledEmptyStateWarning>\n      );\n    }\n\n    return <ReleasesTable>{releases.map(this.renderReleaseRow)}</ReleasesTable>;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    return (\n      <SidebarSection>\n        <SectionHeadingWrapper>\n          <SectionHeading>{t('Latest Releases')}</SectionHeading>\n          <SectionHeadingLink to={this.releasesLink}>\n            <IconOpen />\n          </SectionHeadingLink>\n        </SectionHeadingWrapper>\n        <div>{this.renderInnerBody()}</div>\n      </SidebarSection>\n    );\n  }\n}\n\nconst ReleasesTable = styled('div')`\n  display: grid;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  grid-template-columns: 1fr auto;\n  margin-bottom: ${space(2)};\n\n  & > * {\n    padding: ${space(0.5)} ${space(1)};\n    height: 32px;\n  }\n\n  & > *:nth-child(2n + 2) {\n    text-align: right;\n  }\n\n  & > *:nth-child(4n + 1),\n  & > *:nth-child(4n + 2) {\n    background-color: ${p => p.theme.rowBackground};\n  }\n`;\n\nconst StyledVersion = styled(Version)`\n  ${p => p.theme.overflowEllipsis}\n  line-height: 1.6;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  height: ${PLACEHOLDER_AND_EMPTY_HEIGHT};\n  justify-content: center;\n`;\n\nexport default ProjectLatestReleases;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconLink} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {DEFAULT_MAX_DURATION} from 'sentry/views/performance/trends/utils';\nimport {\n  getPerformanceLandingUrl,\n  getPerformanceTrendsUrl,\n} from 'sentry/views/performance/utils';\n\nimport {SidebarSection} from './styles';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  project?: Project;\n};\n\nfunction ProjectQuickLinks({organization, project, location}: Props) {\n  function getTrendsLink() {\n    const queryString = decodeScalar(location.query.query);\n    const conditions = new MutableSearch(queryString || '');\n    conditions.setFilterValues('tpm()', ['>0.01']);\n    conditions.setFilterValues('transaction.duration', [\n      '>0',\n      `<${DEFAULT_MAX_DURATION}`,\n    ]);\n\n    return {\n      pathname: getPerformanceTrendsUrl(organization),\n      query: {\n        project: project?.id,\n        cursor: undefined,\n        query: conditions.formatString(),\n      },\n    };\n  }\n\n  const quickLinks = [\n    {\n      title: t('User Feedback'),\n      to: {\n        pathname: `/organizations/${organization.slug}/user-feedback/`,\n        query: {project: project?.id},\n      },\n    },\n    {\n      title: t('View Transactions'),\n      to: {\n        pathname: getPerformanceLandingUrl(organization),\n        query: {project: project?.id},\n      },\n      disabled: !organization.features.includes('performance-view'),\n    },\n    {\n      title: t('Most Improved/Regressed Transactions'),\n      to: getTrendsLink(),\n      disabled: !organization.features.includes('performance-view'),\n    },\n  ];\n\n  return (\n    <SidebarSection>\n      <SectionHeading>{t('Quick Links')}</SectionHeading>\n      {quickLinks\n        // push disabled links to the bottom\n        .sort((link1, link2) => Number(!!link1.disabled) - Number(!!link2.disabled))\n        .map(({title, to, disabled}) => (\n          <div key={title}>\n            <Tooltip\n              title={t(\"You don't have access to this feature\")}\n              disabled={!disabled}\n            >\n              <QuickLink to={to} disabled={disabled}>\n                <IconLink />\n                <QuickLinkText>{title}</QuickLinkText>\n              </QuickLink>\n            </Tooltip>\n          </div>\n        ))}\n    </SidebarSection>\n  );\n}\n\nconst QuickLink = styled(p =>\n  p.disabled ? (\n    <span className={p.className}>{p.children}</span>\n  ) : (\n    <GlobalSelectionLink {...p} />\n  )\n)<{\n  disabled?: boolean;\n}>`\n  margin-bottom: ${space(1)};\n  display: grid;\n  align-items: center;\n  gap: ${space(1)};\n  grid-template-columns: auto 1fr;\n\n  ${p =>\n    p.disabled &&\n    `\n    color: ${p.theme.gray200};\n    cursor: not-allowed;\n  `}\n`;\n\nconst QuickLinkText = styled('span')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  ${p => p.theme.overflowEllipsis}\n`;\n\nexport default ProjectQuickLinks;\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport Collapsible from 'sentry/components/collapsible';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconOpen} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\n\nimport {SectionHeadingLink, SectionHeadingWrapper, SidebarSection} from './styles';\n\ntype Props = {\n  organization: Organization;\n  project?: Project;\n};\n\nfunction ProjectTeamAccess({organization, project}: Props) {\n  const hasEditPermissions = organization.access.includes('project:write');\n  const settingsLink = `/settings/${organization.slug}/projects/${project?.slug}/teams/`;\n\n  function renderInnerBody() {\n    if (!project) {\n      return <Placeholder height=\"23px\" />;\n    }\n\n    if (project.teams.length === 0) {\n      return (\n        <Button\n          to={settingsLink}\n          disabled={!hasEditPermissions}\n          title={\n            hasEditPermissions ? undefined : t('You do not have permission to do this')\n          }\n          priority=\"primary\"\n          size=\"small\"\n        >\n          {t('Assign Team')}\n        </Button>\n      );\n    }\n\n    return (\n      <Collapsible\n        expandButton={({onExpand, numberOfHiddenItems}) => (\n          <Button priority=\"link\" onClick={onExpand}>\n            {tn('Show %s collapsed team', 'Show %s collapsed teams', numberOfHiddenItems)}\n          </Button>\n        )}\n      >\n        {project.teams\n          .sort((a, b) => a.slug.localeCompare(b.slug))\n          .map(team => (\n            <StyledLink\n              to={`/settings/${organization.slug}/teams/${team.slug}/`}\n              key={team.slug}\n            >\n              <IdBadge team={team} hideAvatar />\n            </StyledLink>\n          ))}\n      </Collapsible>\n    );\n  }\n\n  return (\n    <StyledSidebarSection>\n      <SectionHeadingWrapper>\n        <SectionHeading>{t('Team Access')}</SectionHeading>\n        <SectionHeadingLink to={settingsLink}>\n          <IconOpen />\n        </SectionHeadingLink>\n      </SectionHeadingWrapper>\n\n      <div>{renderInnerBody()}</div>\n    </StyledSidebarSection>\n  );\n}\n\nconst StyledSidebarSection = styled(SidebarSection)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledLink = styled(Link)`\n  display: block;\n  margin-bottom: ${space(0.5)};\n`;\n\nexport default ProjectTeamAccess;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {fetchOrganizationDetails} from 'sentry/actionCreators/organization';\nimport {updateProjects} from 'sentry/actionCreators/pageFilters';\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport Feature from 'sentry/components/acl/feature';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport CreateAlertButton from 'sentry/components/createAlertButton';\nimport GlobalAppStoreConnectUpdateAlert from 'sentry/components/globalAppStoreConnectUpdateAlert';\nimport GlobalEventProcessingAlert from 'sentry/components/globalEventProcessingAlert';\nimport {GlobalSdkUpdateAlert} from 'sentry/components/globalSdkUpdateAlert';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport MissingProjectMembership from 'sentry/components/projects/missingProjectMembership';\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport {ERRORS_BASIC_CHART_PERIODS} from './charts/projectErrorsBasicChart';\nimport ProjectScoreCards from './projectScoreCards/projectScoreCards';\nimport ProjectCharts from './projectCharts';\nimport ProjectFilters from './projectFilters';\nimport ProjectIssues from './projectIssues';\nimport ProjectLatestAlerts from './projectLatestAlerts';\nimport ProjectLatestReleases from './projectLatestReleases';\nimport ProjectQuickLinks from './projectQuickLinks';\nimport ProjectTeamAccess from './projectTeamAccess';\n\ntype RouteParams = {\n  orgId: string;\n  projectId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  loadingProjects: boolean;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\ntype State = AsyncView['state'];\n\nclass ProjectDetail extends AsyncView<Props, State> {\n  getTitle() {\n    const {params} = this.props;\n\n    return routeTitleGen(t('Project %s', params.projectId), params.orgId, false);\n  }\n\n  componentDidMount() {\n    this.syncProjectWithSlug();\n  }\n\n  componentDidUpdate() {\n    this.syncProjectWithSlug();\n  }\n\n  get project() {\n    const {projects, params} = this.props;\n\n    return projects.find(p => p.slug === params.projectId);\n  }\n\n  handleProjectChange = (selectedProjects: number[]) => {\n    const {projects, router, location, organization} = this.props;\n\n    const newlySelectedProject = projects.find(p => p.id === String(selectedProjects[0]));\n\n    // if we change project in global header, we need to sync the project slug in the URL\n    if (newlySelectedProject?.id) {\n      router.replace({\n        pathname: `/organizations/${organization.slug}/projects/${newlySelectedProject.slug}/`,\n        query: {\n          ...location.query,\n          project: newlySelectedProject.id,\n          environment: undefined,\n        },\n      });\n    }\n  };\n\n  handleSearch = (query: string) => {\n    const {router, location} = this.props;\n    router.replace({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        query,\n      },\n    });\n  };\n\n  tagValueLoader = (key: string, search: string) => {\n    const {location, organization} = this.props;\n    const {project: projectId} = location.query;\n\n    return fetchTagValues(\n      this.api,\n      organization.slug,\n      key,\n      search,\n      projectId ? [projectId] : null,\n      location.query\n    );\n  };\n\n  syncProjectWithSlug() {\n    const {router, location} = this.props;\n    const projectId = this.project?.id;\n\n    if (projectId && projectId !== location.query.project) {\n      // if someone visits /organizations/sentry/projects/javascript/ (without ?project=XXX) we need to update URL and globalSelection with the right project ID\n      updateProjects([Number(projectId)], router);\n    }\n  }\n\n  onRetryProjects = () => {\n    const {params} = this.props;\n    fetchOrganizationDetails(this.api, params.orgId, true, false);\n  };\n\n  isProjectStabilized() {\n    const {selection, location} = this.props;\n    const projectId = this.project?.id;\n\n    return (\n      defined(projectId) &&\n      projectId === location.query.project &&\n      projectId === String(selection.projects[0])\n    );\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderNoAccess(project: Project) {\n    const {organization} = this.props;\n\n    return (\n      <PageContent>\n        <MissingProjectMembership organization={organization} project={project} />\n      </PageContent>\n    );\n  }\n\n  renderProjectNotFound() {\n    return (\n      <PageContent>\n        <LoadingError\n          message={t('This project could not be found.')}\n          onRetry={this.onRetryProjects}\n        />\n      </PageContent>\n    );\n  }\n\n  renderBody() {\n    const {organization, params, location, router, loadingProjects, selection} =\n      this.props;\n    const project = this.project;\n    const {query} = location.query;\n    const hasPerformance = organization.features.includes('performance-view');\n    const hasDiscover = organization.features.includes('discover-basic');\n    const hasTransactions = hasPerformance && project?.firstTransactionEvent;\n    const isProjectStabilized = this.isProjectStabilized();\n    const visibleCharts = ['chart1'];\n    const hasSessions = project?.hasSessions ?? null;\n    const hasOnlyBasicChart = !hasPerformance && !hasDiscover && !hasSessions;\n\n    if (hasTransactions || hasSessions) {\n      visibleCharts.push('chart2');\n    }\n\n    if (!loadingProjects && !project) {\n      return this.renderProjectNotFound();\n    }\n\n    if (!loadingProjects && project && !project.hasAccess) {\n      return this.renderNoAccess(project);\n    }\n\n    return (\n      <PageFiltersContainer\n        disableMultipleProjectSelection\n        skipLoadLastUsed\n        onUpdateProjects={this.handleProjectChange}\n        relativeDateOptions={\n          hasOnlyBasicChart\n            ? pick(DEFAULT_RELATIVE_PERIODS, ERRORS_BASIC_CHART_PERIODS)\n            : undefined\n        }\n        showAbsolute={!hasOnlyBasicChart}\n        hideGlobalHeader\n      >\n        <NoProjectMessage organization={organization}>\n          <StyledPageContent>\n            <Layout.Header>\n              <Layout.HeaderContent>\n                <Breadcrumbs\n                  crumbs={[\n                    {\n                      to: `/organizations/${params.orgId}/projects/`,\n                      label: t('Projects'),\n                    },\n                    {label: t('Project Details')},\n                  ]}\n                />\n                <Layout.Title>\n                  {project && (\n                    <IdBadge\n                      project={project}\n                      avatarSize={28}\n                      hideOverflow=\"100%\"\n                      disableLink\n                    />\n                  )}\n                </Layout.Title>\n              </Layout.HeaderContent>\n\n              <Layout.HeaderActions>\n                <ButtonBar gap={1}>\n                  <Button\n                    to={\n                      // if we are still fetching project, we can use project slug to build issue stream url and let the redirect handle it\n                      project?.id\n                        ? `/organizations/${params.orgId}/issues/?project=${project.id}`\n                        : `/${params.orgId}/${params.projectId}`\n                    }\n                  >\n                    {t('View All Issues')}\n                  </Button>\n                  <CreateAlertButton\n                    organization={organization}\n                    projectSlug={params.projectId}\n                  />\n                  <Button\n                    icon={<IconSettings />}\n                    aria-label={t('Settings')}\n                    to={`/settings/${params.orgId}/projects/${params.projectId}/`}\n                  />\n                </ButtonBar>\n              </Layout.HeaderActions>\n            </Layout.Header>\n\n            <Layout.Body noRowGap>\n              {project && <StyledGlobalEventProcessingAlert projects={[project]} />}\n              <Layout.Main fullWidth>\n                <StyledSdkUpdatesAlert />\n              </Layout.Main>\n              <StyledGlobalAppStoreConnectUpdateAlert\n                project={project}\n                organization={organization}\n              />\n              <Layout.Main>\n                <ProjectFiltersWrapper>\n                  <ProjectFilters\n                    query={query}\n                    onSearch={this.handleSearch}\n                    tagValueLoader={this.tagValueLoader}\n                  />\n                </ProjectFiltersWrapper>\n\n                <ProjectScoreCards\n                  organization={organization}\n                  isProjectStabilized={isProjectStabilized}\n                  selection={selection}\n                  hasSessions={hasSessions}\n                  hasTransactions={hasTransactions}\n                  query={query}\n                />\n                {isProjectStabilized && (\n                  <Fragment>\n                    {visibleCharts.map((id, index) => (\n                      <ProjectCharts\n                        location={location}\n                        organization={organization}\n                        router={router}\n                        key={`project-charts-${id}`}\n                        chartId={id}\n                        chartIndex={index}\n                        projectId={project?.id}\n                        hasSessions={hasSessions}\n                        hasTransactions={!!hasTransactions}\n                        visibleCharts={visibleCharts}\n                        query={query}\n                      />\n                    ))}\n                    <ProjectIssues\n                      organization={organization}\n                      location={location}\n                      projectId={selection.projects[0]}\n                      query={query}\n                      api={this.api}\n                    />\n                  </Fragment>\n                )}\n              </Layout.Main>\n              <Layout.Side>\n                <ProjectTeamAccess organization={organization} project={project} />\n                <Feature features={['incidents']} organization={organization}>\n                  <ProjectLatestAlerts\n                    organization={organization}\n                    projectSlug={params.projectId}\n                    location={location}\n                    isProjectStabilized={isProjectStabilized}\n                  />\n                </Feature>\n                <ProjectLatestReleases\n                  organization={organization}\n                  projectSlug={params.projectId}\n                  projectId={project?.id}\n                  location={location}\n                  isProjectStabilized={isProjectStabilized}\n                />\n                <ProjectQuickLinks\n                  organization={organization}\n                  project={project}\n                  location={location}\n                />\n              </Layout.Side>\n            </Layout.Body>\n          </StyledPageContent>\n        </NoProjectMessage>\n      </PageFiltersContainer>\n    );\n  }\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst ProjectFiltersWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledSdkUpdatesAlert = styled(GlobalSdkUpdateAlert)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    margin-bottom: ${space(2)};\n  }\n`;\n\nconst StyledGlobalEventProcessingAlert = styled(GlobalEventProcessingAlert)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    margin-bottom: 0;\n  }\n`;\n\nconst StyledGlobalAppStoreConnectUpdateAlert = styled(GlobalAppStoreConnectUpdateAlert)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    margin-bottom: 0;\n  }\n`;\n\nStyledGlobalAppStoreConnectUpdateAlert.defaultProps = {\n  Wrapper: p => <Layout.Main fullWidth {...p} />,\n};\n\nexport default withProjects(withPageFilters(ProjectDetail));\n","import withOrganization from 'sentry/utils/withOrganization';\n\nimport ProjectDetail from './projectDetail';\n\nfunction ProjectDetailContainer(\n  props: Omit<\n    React.ComponentProps<typeof ProjectDetail>,\n    'projects' | 'loadingProjects' | 'selection'\n  >\n) {\n  return <ProjectDetail {...props} />;\n}\n\nexport default withOrganization(ProjectDetailContainer);\n","import {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\n\nexport enum SessionTerm {\n  CRASHES = 'crashes',\n  CRASHED = 'crashed',\n  ABNORMAL = 'abnormal',\n  CRASH_FREE = 'crashFree',\n  CRASH_FREE_USERS = 'crash-free-users',\n  CRASH_FREE_SESSIONS = 'crash-free-sessions',\n  HEALTHY = 'healthy',\n  ERRORED = 'errored',\n  UNHANDLED = 'unhandled',\n  STABILITY = 'stability',\n  ADOPTION = 'adoption',\n}\n\nexport const sessionTerm = {\n  [SessionTerm.CRASHES]: t('Crashes'),\n  [SessionTerm.CRASHED]: t('Crashed'),\n  [SessionTerm.ABNORMAL]: t('Abnormal'),\n  [SessionTerm.CRASH_FREE_USERS]: t('Crash Free Users'),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Crash Free Sessions'),\n  [SessionTerm.HEALTHY]: t('Healthy'),\n  [SessionTerm.ERRORED]: t('Errored'),\n  [SessionTerm.UNHANDLED]: t('Unhandled'),\n  [SessionTerm.ADOPTION]: t('Adoption'),\n  duration: t('Session Duration'),\n  otherCrashed: t('Other Crashed'),\n  otherAbnormal: t('Other Abnormal'),\n  otherErrored: t('Other Errored'),\n  otherHealthy: t('Other Healthy'),\n  otherCrashFreeUsers: t('Other Crash Free Users'),\n  otherCrashFreeSessions: t('Other Crash Free Sessions'),\n  otherReleases: t('Other Releases'),\n};\n\n// This should never be used directly (except in tests)\nexport const commonTermsDescription = {\n  [SessionTerm.CRASHES]: t('Number of sessions with a crashed state'),\n  [SessionTerm.CRASH_FREE]: t(\n    'Percentage of sessions/users who did not experience a crash.'\n  ),\n  [SessionTerm.CRASH_FREE_USERS]: t(\n    'Percentage of unique users with non-crashed sessions'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.STABILITY]: t('The percentage of crash free sessions.'),\n  [SessionTerm.ADOPTION]: t(\n    'Adoption compares the sessions or users of a release with the total sessions or users for this project in the last 24 hours.'\n  ),\n};\n\n// This should never be used directly (except in tests)\nexport const mobileTermsDescription = {\n  [SessionTerm.CRASHED]: t(\n    'The process was terminated due to an unhandled exception or a request to the server that ended with an error'\n  ),\n  [SessionTerm.CRASH_FREE_SESSIONS]: t('Percentage of non-crashed sessions'),\n  [SessionTerm.ABNORMAL]: t(\n    'An unknown session exit. Like due to loss of power or killed by the operating system'\n  ),\n  [SessionTerm.HEALTHY]: t('A session without errors'),\n  [SessionTerm.ERRORED]: t('A session with errors'),\n  [SessionTerm.UNHANDLED]: t('Not handled by user code'),\n};\n\n// This should never be used directly (except in tests)\nexport const desktopTermDescriptions = {\n  crashed: t('The application crashed with a hard crash (eg. segfault)'),\n  [SessionTerm.ABNORMAL]: t(\n    'The application did not properly end the session, for example, due to force-quit'\n  ),\n  [SessionTerm.HEALTHY]: t(\n    'The application exited normally and did not observe any errors'\n  ),\n  [SessionTerm.ERRORED]: t(\n    'The application exited normally but observed error events while running'\n  ),\n  [SessionTerm.UNHANDLED]: t('The application crashed with a hard crash'),\n};\n\nfunction getTermDescriptions(platform: PlatformKey | null) {\n  const technology =\n    platform === 'react-native' ||\n    platform === 'java-spring' ||\n    platform === 'apple-ios' ||\n    platform === 'dotnet-aspnetcore'\n      ? platform\n      : platform?.split('-')[0];\n\n  switch (technology) {\n    case 'dotnet':\n    case 'java':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n      };\n    case 'java-spring':\n    case 'dotnet-aspnetcore':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHES]: t(\n          'A request that resulted in an unhandled exception and hence a Server Error response'\n        ),\n      };\n    case 'android':\n    case 'cordova':\n    case 'react-native':\n    case 'flutter':\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'An unhandled exception that resulted in the application crashing'\n        ),\n      };\n\n    case 'apple': {\n      return {\n        ...commonTermsDescription,\n        ...mobileTermsDescription,\n        [SessionTerm.CRASHED]: t('An error that resulted in the application crashing'),\n      };\n    }\n    case 'node':\n    case 'javascript':\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t(\n          'During the session an unhandled global error/promise rejection occurred.'\n        ),\n        [SessionTerm.ABNORMAL]: t('Non applicable for Javascript.'),\n        [SessionTerm.HEALTHY]: t('No errors were captured during session life-time.'),\n        [SessionTerm.ERRORED]: t(\n          'During the session at least one handled error occurred.'\n        ),\n        [SessionTerm.UNHANDLED]:\n          \"An error was captured by the global 'onerror' or 'onunhandledrejection' handler.\",\n      };\n    case 'apple-ios':\n    case 'minidump':\n    case 'native':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n      };\n    case 'rust':\n      return {\n        ...commonTermsDescription,\n        ...desktopTermDescriptions,\n        [SessionTerm.CRASHED]: t('The application had an unrecoverable error (a panic)'),\n      };\n    default:\n      return {\n        ...commonTermsDescription,\n        [SessionTerm.CRASHED]: t('Number of users who experienced an unhandled error'),\n        [SessionTerm.ABNORMAL]: t('An unknown session exit'),\n        [SessionTerm.HEALTHY]: mobileTermsDescription.healthy,\n        [SessionTerm.ERRORED]: mobileTermsDescription.errored,\n        [SessionTerm.UNHANDLED]: mobileTermsDescription.unhandled,\n      };\n  }\n}\n\nexport function getSessionTermDescription(\n  term: SessionTerm,\n  platform: PlatformKey | null\n) {\n  return getTermDescriptions(platform)[term];\n}\n"],"names":["AlertBadge","status","hideText","isIssue","statusText","t","Icon","IconCheckmark","color","IconIssues","IncidentStatus","IconFire","IconExclamation","Wrapper","AlertIconWrapper","icon","AlertIconBackground","IncidentStatusValue","p","IconDiamond","space","VisualMap","visualMap","height","theme","gray300","fontSizeExtraLarge","Chart","React","seriesSelection","forceUpdate","legendChange","disableableSeries","this","props","selected","Object","keys","reduce","state","key","disableable","includes","setState","shouldComponentUpdate","nextProps","nextState","isEqual","reloading","timeseriesData","releaseSeries","previousTimeseriesData","tableData","getChartComponent","showDaily","yAxis","chartComponent","defined","BarChart","length","aggregateMultiPlotType","LineChart","AreaChart","Error","render","loading","_loading","_reloading","zoomRenderProps","showLegend","legendOptions","chartOptions","chartOptionsProp","currentSeriesNames","previousSeriesNames","seriesTransformer","previousSeriesTransformer","colors","timeframe","topEvents","fromDiscover","Component","WorldMapChart","data","title","processTableResults","tableSeries","seriesName","series","releasesLegend","hasOther","push","Array","isArray","releases","hideReleasesByDefault","markLine","RELEASE_LINES_THRESHOLD","legend","right","top","undefined","previousSeries","map","prev","chartColors","slice","charts","getColorPalette","chartOther","grid","left","bottom","seriesOptions","showSymbol","tooltip","trigger","truncate","valueFormatter","value","tooltipFormatter","xAxis","min","start","max","end","axisLabel","chartLabel","formatter","axisLabelFormatter","animation","onLegendSelectChanged","handleLegendSelectChanged","previousPeriod","ThemedChart","withTheme","EventsChart","isStacked","api","organization","period","utc","query","router","projects","environments","minutesThresholdToDisplaySeconds","disablePrevious","disableReleases","emphasizeReleases","currentSeriesName","currentName","previousSeriesName","previousName","field","interval","orderby","confirmedQuery","chartHeader","preserveReleaseQueryParams","releaseQueryExtra","usePageZoom","withoutZerofill","includePrevious","yAxisArray","decodeList","yAxisSeriesNames","name","yAxisLabel","isEquation","getEquation","substr","intervalVal","getInterval","chartImplementation","errored","results","size","seriesData","visible","stacked","previousChart","chartProps","preserveQueryParams","queryExtra","usePageDate","referrer","project","environment","partial","userModified","decodeScalar","location","eventData","children","eventView","EventView","id","version","fields","range","getUtcDateString","setResults","useState","setReloading","setErrored","useEffect","mounted","doDiscoverQuery","slug","generateQueryStringObject","then","discoverQueryResults","catch","dataArray","options","LineSeries","animationThreshold","animationDuration","OptionSelector","onChange","featureType","multiple","rest","mappedOptions","useMemo","opt","label","String","maxLength","expandDirection","option","o","isOptionDisabled","disabled","triggerProps","borderless","prefix","Fragment","StyledFeatureBadge","type","placement","FeatureBadge","getOrganizationReleases","conditions","forEach","clear","requestPromise","includeAllArgs","method","ReleaseSeries","memoize","_","__","values","val","JSON","stringify","join","lineStyle","features","statsPeriod","MarkLine","purple300","opacity","show","release","Date","date","formatVersion","onClick","pathname","time","getFormattedDate","local","escape","purple200","componentDidMount","_isMounted","setReleasesWithSeries","fetchData","componentDidUpdate","prevProps","componentWillUnmount","memoized","hasMore","getReleases","getOrganizationReleasesMemoized","newReleases","resp","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","cursor","addErrorMessage","unemphasizedReleases","emphasizedReleases","partition","getReleaseSeries","withRouter","withOrganization","withApi","StackedAreaChart","filter","TransitionChart","prevReloading","prevLoading","nextReloading","nextLoading","className","other","fromDiscoverQueryList","useTheme","countryToCodeMap","codeToCountryMap","unmounted","async","countryCodesMap","world","Promise","all","default","worldMap","echarts","country","loadWorldMap","processedSeries","roam","emphasis","MapSeries","nameMap","aspectScale","zoom","center","itemStyle","areaColor","gray200","borderColor","backgroundSecondary","pink300","silent","maxValue","backgroundColor","background","inRange","text","textStyle","textColor","calculable","format","marker","isNaN","formattedValue","toLocaleString","DiscoverFeature","noFeatureMessage","hookName","renderDisabled","body","hideHelpToggle","message","featureName","hasFeature","DiscoverButton","buttonProps","appStoreConnectContext","useContext","AppStoreConnectContext","some","updateAlertMessage","notices","Notices","NoMarginBottomAlert","showIcon","AlertContent","Alert","GlobalAppStoreConnectUpdateAlert","createContext","Provider","useApi","projectDetails","setProjectDetails","appStoreConnectStatusData","setAppStoreConnectStatusData","appStoreConnectSymbolSources","symbolSources","parse","acc","symbolSource","toLowerCase","getUpdateAlertMessage","respository","credentials","getAppStoreValidationErrorMessage","responseProjectDetails","appStoreConnectStatus","appStoreConnect","link","MissingProjectMembership","error","team","DisabledLabel","joinTeam","teamSlug","orgId","teamId","success","addSuccessMessage","renderJoinTeam","TeamStore","has","busy","isPending","priority","bind","getTeamsForAccess","request","pending","teams","Set","teamAccess","getPendingTeamOption","StyledPanel","description","action","Field","StyledSelectControl","placeholder","teamObj","Panel","SelectControl","unexpectedErrorMessage","repo","code","tct","linkToCustomRepository","to","customRepositoryName","Sentry","WEB_VITAL_DETAILS","WebVital","acronym","poorThreshold","measurementType","MOBILE_VITAL_DETAILS","MobileVital","Browser","routeName","orgSlug","withSentry","projectSlug","tmplBase","tmpl","MINUTES_THRESHOLD_TO_DISPLAY_SECONDS","getCount","groups","group","totals","getCountAtIndex","index","getCrashFreeRate","crashedRate","getSessionStatusRate","SessionStatus","getCrashFreePercent","getSeriesAverage","totalCount","dataPoints","getSeriesSum","intervals","dataPointsSums","fill","groupSeries","dataPoint","idx","crashedCount","by","percent","getCrashFreeRateSeries","compact","i","intervalTotalSessions","intervalCrashedSessions","find","crashedSessionsPercent","getSessionStatusRateSeries","intervalStatusSessions","statusSessionsPercent","getSessionStatusPercent","getSessionP50Series","meanValue","mean","v","getAdoptionSeries","releaseGroups","allGroups","intervalReleaseSessions","intervalAdoption","Math","round","getCountSeries","initSessionsChart","sessionTerm","green300","areaStyle","width","red300","getSessionsInterval","datetimeObj","highFidelity","diffInMinutes","getDiffInMinutes","moment","isSameOrBefore","subtract","SIXTY_DAYS","THIRTY_DAYS","SIX_HOURS","filterSessionsInTimeWindow","sessions","filteredIndexes","isBetween","startsWith","AsyncView","AsyncComponent","getTitle","renderComponent","ERRORS_BASIC_CHART_PERIODS","ProjectErrorsBasicChart","getDefaultState","super","getEndpoints","projectId","getStatsPeriod","browserHistory","onLoadAllEndpointsSuccess","onTotalValuesChange","stats","DEFAULT_STATS_PERIOD","getSeries","timestamp","renderLoading","renderBody","getDynamicText","isGroupedByDate","showTimeInTooltip","fixed","DOCS_URL","MissingPerformanceButtons","gap","external","href","steps","PERFORMANCE_TOUR_STEPS","onAdvance","step","duration","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","onCloseModal","doneText","doneUrl","showModal","ProjectApdexScoreCard","currentApdex","previousApdex","selection","isProjectStabilized","hasTransactions","datetime","commonQuery","proj","trim","endpoints","normalizeDateTimeParams","shouldFetchPreviousPeriod","previousStart","parseStatsPeriod","getPeriod","shouldDoublePeriod","previousEnd","remountComponent","cardTitle","cardHelp","baseHelp","getTermHelp","PERFORMANCE_TERM","trend","apdex","Number","trendStatus","renderMissingFeatureCard","help","score","renderScore","renderTrend","direction","abs","ProjectStabilityScoreCard","currentSessions","previousSessions","hasSessions","groupBy","doubledPeriod","statsPeriodStart","statsPeriodEnd","SessionFieldWithOperation","getSessionTermDescription","SessionTerm","calculateCrashFree","previousScore","totalSessions","crashedSessions","health","displayCrashFreePercent","formatAbbreviatedNumber","ProjectVelocityScoreCard","currentReleases","previousReleases","noReleaseEver","hasOlderReleases","fetchAnyReleaseExistence","ProjectScoreCards","CardWrapper","breakpoints","medium","performance","discover","releaseHealth","ProjectBaseEventsChart","fetchTotalCount","isSelectionEqual","err","eventsChartProps","position","scale","withPageFilters","omitIgnoredProps","omit","ProjectSessionsChartRequest","displayMode","shouldFetchWithPrevious","queryParams","response","path","filteredResponse","DisplayModes","SESSIONS","transformSessionCountData","transformData","fetchedWithPrevious","unmounting","STABILITY_USERS","baseParams","responseData","dataMiddleIndex","floor","groupAcc","previousPeriodTotalSessions","totalIntervalSessions","_interval","sessionsChart","g","ProjectBaseSessionsChart","timeSeries","previousTimeSeries","isCrashFree","STABILITY","hideHealthyByDefault","s","d","itemHeight","itemWidth","itemGap","align","verticalAlign","fontSize","fontFamily","family","ChartComponent","transformSinglePointToBar","ProjectCharts","totalValues","chartId","chartIndex","metric","defaultDisplayModes","ERRORS","FAILURE_RATE","APDEX","otherActiveDisplayModes","visibleCharts","visibleChartId","urlKey","findIndex","displayModes","hasPerformance","noPerformanceTooltip","NOT_AVAILABLE_MESSAGES","noHealthTooltip","TPM","TRANSACTIONS","summaryHeading","barChartInterval","TWO_WEEKS","ONE_WEEK","TWENTY_FOUR_HOURS","ONE_HOUR","hasDiscover","MutableSearch","formatString","handleTotalValuesChange","CHART_PALETTE","yellow300","handleDisplayModeChange","ProjectFilters","tagValueLoader","onSearch","FiltersWrapper","alignDropdown","target","searchSource","maxSearchItems","hasRecentSearches","supportedTags","SEMVER_TAGS","onGetTagValues","tag","currentQuery","small","IssuesType","IssuesQuery","ProjectIssues","setPageLinks","onCursor","setOnCursor","issuesType","setIssuesType","UNHANDLED","issuesCount","setIssuesCount","new","regressed","resolved","unhandled","fetchIssuesCount","useCallback","NEW","ALL","RESOLVED","REGRESSED","param","issueCountEndpoint","queryParameters","qs","discoverQuery","endpointPath","issueQuery","toUpperCase","limit","pick","URL_PARAM","sort","issueSearch","issuesTypes","issueCount","ControlsWrapper","StyledButtonBar","active","merged","barId","issueType","handleIssuesTypeSelection","count","hideParens","hideIfEmpty","OpenInButtonBar","display","StyledPagination","canSelectGroups","renderEmptyMessage","selectedTimePeriod","DEFAULT_RELATIVE_PERIODS","displayedPeriod","selectedProjectIds","groupIds","emptyMessage","timePeriod","withChart","withPagination","onFetchSuccess","groupListState","cursorHandler","ButtonBar","ButtonLabel","buttonCount","buttonCountActive","Pagination","MissingAlertsButtons","iconProps","hideIcon","SidebarSection","SectionHeading","SectionHeadingWrapper","SectionHeadingLink","GlobalSelectionLink","didProjectOrEnvironmentChange","location1","location2","PLACEHOLDER_AND_EMPTY_HEIGHT","ProjectLatestAlerts","alert","identifier","dateClosed","dateStarted","isResolved","isWarning","statusProps","AlertRowLink","AlertBadgeWrapper","AlertDetails","AlertTitle","AlertDate","tooltipUnderlineColor","getStatusColor","per_page","unresolvedAlerts","resolvedAlerts","hasAlertRule","alertRules","alertsLink","renderInnerBody","alertsUnresolvedAndResolved","checkingForAlertRules","StyledEmptyStateWarning","renderAlertRow","Link","fontSizeMedium","overflowEllipsis","EmptyStateWarning","ProjectLatestReleases","analytics","org_id","project_id","step_id","step_title","RELEASES_TOUR_STEPS","lastDeploy","dateCreated","dateFinished","seconds","StyledVersion","tooltipRawVersion","releasesLink","checkingForOlderReleases","ReleasesTable","renderReleaseRow","rowBackground","Version","ProjectQuickLinks","quickLinks","getPerformanceLandingUrl","queryString","setFilterValues","DEFAULT_MAX_DURATION","getPerformanceTrendsUrl","getTrendsLink","link1","link2","QuickLink","QuickLinkText","ProjectTeamAccess","hasEditPermissions","access","settingsLink","StyledSidebarSection","expandButton","onExpand","numberOfHiddenItems","tn","a","b","localeCompare","StyledLink","hideAvatar","ProjectDetail","selectedProjects","newlySelectedProject","replace","search","fetchTagValues","params","fetchOrganizationDetails","routeTitleGen","syncProjectWithSlug","updateProjects","renderNoAccess","renderProjectNotFound","onRetry","onRetryProjects","loadingProjects","firstTransactionEvent","hasOnlyBasicChart","hasAccess","disableMultipleProjectSelection","skipLoadLastUsed","onUpdateProjects","handleProjectChange","relativeDateOptions","showAbsolute","hideGlobalHeader","StyledPageContent","crumbs","avatarSize","hideOverflow","disableLink","noRowGap","StyledGlobalEventProcessingAlert","fullWidth","StyledSdkUpdatesAlert","StyledGlobalAppStoreConnectUpdateAlert","ProjectFiltersWrapper","handleSearch","PageContent","GlobalSdkUpdateAlert","GlobalEventProcessingAlert","defaultProps","withProjects","ProjectDetailContainer","CRASHES","CRASHED","ABNORMAL","CRASH_FREE_USERS","CRASH_FREE_SESSIONS","HEALTHY","ERRORED","ADOPTION","otherCrashed","otherAbnormal","otherErrored","otherHealthy","otherCrashFreeUsers","otherCrashFreeSessions","otherReleases","commonTermsDescription","CRASH_FREE","mobileTermsDescription","desktopTermDescriptions","crashed","term","platform","split","healthy","getTermDescriptions"],"sourceRoot":""}