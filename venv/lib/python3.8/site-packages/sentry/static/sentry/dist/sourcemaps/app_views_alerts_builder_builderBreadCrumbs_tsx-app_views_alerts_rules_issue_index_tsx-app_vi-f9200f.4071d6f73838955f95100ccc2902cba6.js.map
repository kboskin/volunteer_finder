{"version":3,"file":"chunks/app_views_alerts_builder_builderBreadCrumbs_tsx-app_views_alerts_rules_issue_index_tsx-app_vi-f9200f.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/eventsRequest.tsx","webpack:///./app/components/charts/optionSelector.tsx","webpack:///./app/components/externalIssues/abstractExternalIssueForm.tsx","webpack:///./app/components/selectMembers/index.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/environment.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/utils/recreateRoute.tsx","webpack:///./app/utils/replaceAtArrayIndex.tsx","webpack:///./app/utils/routeTitle.tsx","webpack:///./app/views/alerts/builder/builderBreadCrumbs.tsx","webpack:///./app/views/alerts/utils/constants.tsx","webpack:///./app/types/alerts.tsx","webpack:///./app/views/alerts/rules/issue/memberTeamFields.tsx","webpack:///./app/views/alerts/rules/issue/ticketRuleModal.tsx","webpack:///./app/views/alerts/rules/issue/ruleNode.tsx","webpack:///./app/views/alerts/rules/issue/ruleNodeList.tsx","webpack:///./app/views/alerts/rules/issue/setupAlertIntegrationButton.tsx","webpack:///./app/views/alerts/rules/issue/index.tsx","webpack:///./app/views/alerts/rules/issue/sentryAppRuleModal.tsx","webpack:///./app/views/alerts/rules/metric/constants.tsx","webpack:///./app/views/alerts/rules/metric/ruleNameOwnerForm.tsx","webpack:///./app/views/alerts/rules/metric/thresholdTypeForm.tsx","webpack:///./app/views/alerts/rules/metric/triggers/actionsPanel/actionSpecificTargetSelector.tsx","webpack:///./app/views/alerts/rules/metric/triggers/actionsPanel/actionTargetSelector.tsx","webpack:///./app/views/alerts/rules/metric/triggers/actionsPanel/deleteActionButton.tsx","webpack:///./app/views/alerts/rules/metric/triggers/actionsPanel/index.tsx","webpack:///./app/components/numberDragControl.tsx","webpack:///./app/views/alerts/rules/metric/triggers/thresholdControl.tsx","webpack:///./app/views/alerts/rules/metric/triggers/form.tsx","webpack:///./app/views/alerts/rules/metric/triggers/index.tsx","webpack:///./app/views/alerts/rules/metric/triggers/chart/thresholdsChart.tsx","webpack:///./app/views/alerts/rules/metric/triggers/chart/index.tsx","webpack:///./app/views/alerts/utils/getComparisonMarkLines.tsx","webpack:///./app/views/alerts/rules/metric/utils/hasThresholdValue.tsx","webpack:///./app/views/alerts/rules/metric/actions.tsx","webpack:///./app/views/alerts/utils/getIncidentDiscoverUrl.tsx","webpack:///./app/views/alerts/rules/metric/presets.tsx","webpack:///./app/views/alerts/rules/metric/metricField.tsx","webpack:///./app/views/alerts/rules/metric/wizardField.tsx","webpack:///./app/views/alerts/rules/metric/ruleConditionsForm.tsx","webpack:///./app/views/alerts/rules/metric/ruleForm.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/rules/metric/utils/getEventTypeFilter.tsx","webpack:///./app/views/alerts/rules/metric/utils/isCrashFreeAlert.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/getChangeStatus.tsx","webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/alerts/wizard/utils.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/organizationIntegrations/sentryAppExternalForm.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/menuItem.tsx","webpack:///../node_modules/core-js/internals/a-constructor.js","webpack:///../node_modules/core-js/internals/is-regexp.js","webpack:///../node_modules/core-js/internals/regexp-get-flags.js","webpack:///../node_modules/core-js/internals/species-constructor.js","webpack:///../node_modules/core-js/modules/es.string.match-all.js","webpack:///../node_modules/lodash/_baseExtremum.js","webpack:///../node_modules/lodash/_baseFindKey.js","webpack:///../node_modules/lodash/_baseGt.js","webpack:///../node_modules/lodash/_baseLt.js","webpack:///../node_modules/lodash/_baseMean.js","webpack:///../node_modules/lodash/_baseSum.js","webpack:///../node_modules/lodash/findKey.js","webpack:///../node_modules/lodash/maxBy.js","webpack:///../node_modules/lodash/mean.js","webpack:///../node_modules/lodash/minBy.js","webpack:///../node_modules/lodash/negate.js","webpack:///../node_modules/lodash/omitBy.js"],"sourcesContent":["import {PureComponent} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {doEventsRequest} from 'sentry/actionCreators/events';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {\n  canIncludePreviousPeriod,\n  getPreviousSeriesName,\n  isMultiSeriesStats,\n} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {\n  DateString,\n  EventsStats,\n  EventsStatsData,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {stripEquationPrefix} from 'sentry/utils/discover/fields';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\nexport type TimeSeriesData = {\n  allTimeseriesData?: EventsStatsData;\n  comparisonTimeseriesData?: Series[];\n  originalPreviousTimeseriesData?: EventsStatsData | null;\n  originalTimeseriesData?: EventsStatsData;\n  previousTimeseriesData?: Series[] | null;\n  timeAggregatedData?: Series | {};\n  timeframe?: {end: number; start: number};\n  // timeseries data\n  timeseriesData?: Series[];\n  timeseriesTotals?: {count: number};\n};\n\ntype LoadingStatus = {\n  /**\n   * Whether there was an error retrieving data\n   */\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  errorMessage?: string;\n};\n\n// Can hold additional data from the root an events stat object (eg. start, end, order, isMetricsData).\ninterface AdditionalSeriesInfo {\n  isMetricsData?: boolean;\n}\n\nexport type RenderProps = LoadingStatus &\n  TimeSeriesData & {\n    results?: Series[]; // Chart with multiple series.\n    seriesAdditionalInfo?: Record<string, AdditionalSeriesInfo>;\n  };\n\ntype DefaultProps = {\n  /**\n   * Include data for previous period\n   */\n  includePrevious: boolean;\n  /**\n   * Transform the response data to be something ingestible by charts\n   */\n  includeTransformedData: boolean;\n  /**\n   * Interval to group results in\n   *\n   * e.g. 1d, 1h, 1m, 1s\n   */\n  interval: string;\n  /**\n   * number of rows to return\n   */\n  limit: number;\n  /**\n   * The query string to search events by\n   */\n  query: string;\n  /**\n   * Time delta for comparing intervals of alert metrics, in seconds\n   */\n  comparisonDelta?: number;\n  /**\n   * Absolute end date for query\n   */\n  end?: DateString;\n  /**\n   * Relative time period for query.\n   *\n   * Use `start` and `end` for absolute dates.\n   *\n   * e.g. 24h, 7d, 30d\n   */\n  period?: string | null;\n  /**\n   * Absolute start date for query\n   */\n  start?: DateString;\n};\n\ntype EventsRequestPartialProps = {\n  /**\n   * API client instance\n   */\n  api: Client;\n  children: (renderProps: RenderProps) => React.ReactNode;\n  organization: OrganizationSummary;\n  /**\n   * Whether or not to include the last partial bucket. This happens for example when the\n   * current time is 11:26 and the last bucket ranges from 11:25-11:30. This means that\n   * the last bucket contains 1 minute worth of data while the rest contains 5 minutes.\n   *\n   * This flag indicates whether or not this last bucket should be included in the result.\n   */\n  partial: boolean;\n  /**\n   * Discover needs confirmation to run >30 day >10 project queries,\n   * optional and when not passed confirmation is not required.\n   */\n  confirmedQuery?: boolean;\n  /**\n   * Name used for display current series dataset tooltip\n   */\n  currentSeriesNames?: string[];\n  /**\n   * List of environments to query\n   */\n  environment?: Readonly<string[]>;\n  /**\n   * Is query out of retention\n   */\n  expired?: boolean;\n  /**\n   * List of fields to group with when doing a topEvents request.\n   */\n  field?: string[];\n  /**\n   * Allows overridding the pathname.\n   */\n  generatePathname?: (org: OrganizationSummary) => string;\n  /**\n   * Hide error toast (used for pages which also query eventsV2). Stops error appearing as a toast.\n   */\n  hideError?: boolean;\n  /**\n   * Initial loading state\n   */\n  loading?: boolean;\n  /**\n   * Query name used for displaying error toast if it is out of retention\n   */\n  name?: string;\n  /**\n   * A way to control error if error handling is not owned by the toast.\n   */\n  onError?: (error: string) => void;\n  /**\n   * How to order results when getting top events.\n   */\n  orderby?: string;\n  previousSeriesNames?: string[];\n  /**\n   * List of project ids to query\n   */\n  project?: Readonly<number[]>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  /**\n   * Should loading be shown.\n   */\n  showLoading?: boolean;\n  /**\n   * List of team ids to query\n   */\n  team?: Readonly<string | string[]>;\n  /**\n   * The number of top results to get. When set a multi-series result will be returned\n   * in the `results` child render function.\n   */\n  topEvents?: number;\n  /**\n   * Tracks whether the query was modified by a user in the search bar\n   */\n  userModified?: string;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n  /**\n   * The yAxis being plotted. If multiple yAxis are requested,\n   * the child render function will be called with `results`\n   */\n  yAxis?: string | string[];\n};\n\ntype TimeAggregationProps =\n  | {includeTimeAggregation: true; timeAggregationSeriesName: string}\n  | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};\n\nexport type EventsRequestProps = DefaultProps &\n  TimeAggregationProps &\n  EventsRequestPartialProps;\n\ntype EventsRequestState = {\n  errored: boolean;\n  fetchedWithPrevious: boolean;\n  reloading: boolean;\n  timeseriesData: null | EventsStats | MultiSeriesEventsStats;\n  errorMessage?: string;\n};\n\nconst propNamesToIgnore = [\n  'api',\n  'children',\n  'organization',\n  'loading',\n  'queryBatching',\n  'generatePathname',\n];\nconst omitIgnoredProps = (props: EventsRequestProps) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends PureComponent<EventsRequestProps, EventsRequestState> {\n  static defaultProps: DefaultProps = {\n    period: undefined,\n    start: null,\n    end: null,\n    interval: '1d',\n    comparisonDelta: undefined,\n    limit: 15,\n    query: '',\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  state: EventsRequestState = {\n    reloading: !!this.props.loading,\n    errored: false,\n    timeseriesData: null,\n    fetchedWithPrevious: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: EventsRequestProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {api, confirmedQuery, onError, expired, name, hideError, ...props} = this.props;\n    let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;\n\n    if (confirmedQuery === false) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n      errorMessage: undefined,\n    }));\n\n    let errorMessage;\n    if (expired) {\n      errorMessage = t(\n        '%s has an invalid date range. Please try a more recent date range.',\n        name\n      );\n      addErrorMessage(errorMessage, {append: true});\n\n      this.setState({\n        errored: true,\n        errorMessage,\n      });\n    } else {\n      try {\n        api.clear();\n        timeseriesData = await doEventsRequest(api, props);\n      } catch (resp) {\n        if (resp && resp.responseJSON && resp.responseJSON.detail) {\n          errorMessage = resp.responseJSON.detail;\n        } else {\n          errorMessage = t('Error loading chart data');\n        }\n        if (!hideError) {\n          addErrorMessage(errorMessage);\n        }\n        if (onError) {\n          onError(errorMessage);\n        }\n        this.setState({\n          errored: true,\n          errorMessage,\n        });\n      }\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n      fetchedWithPrevious: props.includePrevious,\n    });\n  };\n\n  /**\n   * Retrieves dataset for the current period (since data can potentially\n   * contain previous period's data), as well as the previous period if\n   * possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = (\n    data: EventsStatsData\n  ): {current: EventsStatsData; previous: EventsStatsData | null} => {\n    const {fetchedWithPrevious} = this.state;\n    const {period, includePrevious} = this.props;\n\n    const hasPreviousPeriod =\n      fetchedWithPrevious || canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n    return {\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp(\n    data: EventsStatsData,\n    getName: (\n      timestamp: number,\n      countArray: {count: number}[],\n      i: number\n    ) => number = timestamp => timestamp * 1000\n  ): SeriesDataUnit[] {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  }\n\n  /**\n   * Get previous period data, but transform timestamps so that data fits unto\n   * the current period's data axis\n   */\n  transformPreviousPeriodData(\n    current: EventsStatsData,\n    previous: EventsStatsData | null,\n    seriesName?: string\n  ): Series | null {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: seriesName ?? 'Previous',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (_timestamp, _countArray, i) => current[i][0] * 1000\n      ),\n      stack: 'previous',\n    };\n  }\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries(data: EventsStatsData, seriesName: string = ''): Series {\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  }\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {\n    return [\n      {\n        seriesName: seriesName || 'Current',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  }\n\n  /**\n   * Transforms comparisonCount in query response into timeseries data to be used in a comparison chart for change alerts\n   */\n  transformComparisonTimeseriesData(data: EventsStatsData): Series[] {\n    return [\n      {\n        seriesName: 'comparisonCount()',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce(\n            (acc, {comparisonCount}) => acc + (comparisonCount ?? 0),\n            0\n          ),\n        })),\n      },\n    ];\n  }\n\n  processData(response: EventsStats, seriesIndex: number = 0, seriesName?: string) {\n    const {data, isMetricsData, totals} = response;\n    const {\n      includeTransformedData,\n      includeTimeAggregation,\n      timeAggregationSeriesName,\n      currentSeriesNames,\n      previousSeriesNames,\n      comparisonDelta,\n    } = this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData\n      ? this.transformTimeseriesData(\n          current,\n          seriesName ?? currentSeriesNames?.[seriesIndex]\n        )\n      : [];\n    const transformedComparisonData =\n      includeTransformedData && comparisonDelta\n        ? this.transformComparisonTimeseriesData(current)\n        : [];\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(\n          current,\n          previous,\n          (seriesName ? getPreviousSeriesName(seriesName) : undefined) ??\n            previousSeriesNames?.[seriesIndex]\n        )\n      : null;\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName || '')\n      : {};\n    const timeframe =\n      response.start && response.end\n        ? !previous\n          ? {\n              start: response.start * 1000,\n              end: response.end * 1000,\n            }\n          : {\n              // Find the midpoint of start & end since previous includes 2x data\n              start: (response.start + response.end) * 500,\n              end: response.end * 1000,\n            }\n        : undefined;\n    return {\n      data: transformedData,\n      comparisonData: transformedComparisonData,\n      allData: data,\n      originalData: current,\n      totals,\n      isMetricsData,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n      timeframe,\n    };\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n    const {topEvents} = this.props;\n    const {timeseriesData, reloading, errored, errorMessage} = this.state;\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n    if (isMultiSeriesStats(timeseriesData, defined(topEvents))) {\n      // Convert multi-series results into chartable series. Multi series results\n      // are created when multiple yAxis are used or a topEvents request is made.\n      // Convert the timeseries data into a multi-series result set.\n      // As the server will have replied with a map like:\n      // {[titleString: string]: EventsStats}\n      let timeframe: {end: number; start: number} | undefined = undefined;\n      const seriesAdditionalInfo: Record<string, AdditionalSeriesInfo> = {};\n      const sortedTimeseriesData = Object.keys(timeseriesData)\n        .map(\n          (\n            seriesName: string,\n            index: number\n          ): [number, Series, Series | null, AdditionalSeriesInfo] => {\n            const seriesData: EventsStats = timeseriesData[seriesName];\n            const processedData = this.processData(\n              seriesData,\n              index,\n              stripEquationPrefix(seriesName)\n            );\n            if (!timeframe) {\n              timeframe = processedData.timeframe;\n            }\n            if (processedData.isMetricsData) {\n              seriesAdditionalInfo[seriesName] = {\n                isMetricsData: processedData.isMetricsData,\n              };\n            }\n            return [\n              seriesData.order || 0,\n              processedData.data[0],\n              processedData.previousData,\n              {isMetricsData: processedData.isMetricsData},\n            ];\n          }\n        )\n        .sort((a, b) => a[0] - b[0]);\n      const results: Series[] = sortedTimeseriesData.map(item => {\n        return item[1];\n      });\n      const previousTimeseriesData: Series[] | undefined = sortedTimeseriesData.some(\n        item => item[2] === null\n      )\n        ? undefined\n        : sortedTimeseriesData.map(item => {\n            return item[2] as Series;\n          });\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        results,\n        timeframe,\n        previousTimeseriesData,\n        seriesAdditionalInfo,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    if (timeseriesData) {\n      const {\n        data: transformedTimeseriesData,\n        comparisonData: transformedComparisonTimeseriesData,\n        allData: allTimeseriesData,\n        originalData: originalTimeseriesData,\n        totals: timeseriesTotals,\n        originalPreviousData: originalPreviousTimeseriesData,\n        previousData: previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        isMetricsData,\n      } = this.processData(timeseriesData);\n\n      const seriesAdditionalInfo = {\n        [this.props.currentSeriesNames?.[0] ?? 'current']: {isMetricsData},\n      };\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        // meta data,\n        seriesAdditionalInfo,\n        // timeseries data\n        timeseriesData: transformedTimeseriesData,\n        comparisonTimeseriesData: transformedComparisonTimeseriesData,\n        allTimeseriesData,\n        originalTimeseriesData,\n        timeseriesTotals,\n        originalPreviousTimeseriesData,\n        previousTimeseriesData: previousTimeseriesData\n          ? [previousTimeseriesData]\n          : previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    return children({\n      loading,\n      reloading,\n      errored,\n      errorMessage,\n      ...props,\n    });\n  }\n}\nexport default EventsRequest;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport Truncate from 'sentry/components/truncate';\nimport {SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\ntype BaseProps = React.ComponentProps<typeof CompactSelect> & {\n  options: SelectValue<string>[];\n  title: string;\n  featureType?: 'alpha' | 'beta' | 'new';\n};\n\ntype SingleProps = BaseProps & {\n  onChange: (value: string) => void;\n  selected: string;\n  multiple?: false;\n};\ntype MultipleProps = BaseProps & {\n  multiple: true;\n  onChange: (value: string[]) => void;\n  selected: string[];\n};\n\nfunction OptionSelector({\n  options,\n  onChange,\n  selected,\n  title,\n  featureType,\n  multiple,\n  ...rest\n}: SingleProps | MultipleProps) {\n  const mappedOptions = useMemo(() => {\n    return options.map(opt => ({\n      ...opt,\n      label: <Truncate value={String(opt.label)} maxLength={60} expandDirection=\"left\" />,\n    }));\n  }, [options]);\n\n  function onValueChange(option) {\n    onChange(multiple ? option.map(o => o.value) : option.value);\n  }\n\n  function isOptionDisabled(option) {\n    return (\n      // Option is explicitly marked as disabled\n      option.disabled ||\n      // The user has reached the maximum number of selections (3), and the option hasn't\n      // yet been selected. These options should be disabled to visually indicate that the\n      // user has reached the max.\n      (multiple && selected.length === 3 && !selected.includes(option.value))\n    );\n  }\n\n  return (\n    <CompactSelect\n      options={mappedOptions}\n      value={selected}\n      onChange={onValueChange}\n      isOptionDisabled={isOptionDisabled}\n      multiple={multiple}\n      triggerProps={{\n        size: 'small',\n        borderless: true,\n        prefix: (\n          <Fragment>\n            {title}\n            {defined(featureType) ? <StyledFeatureBadge type={featureType} /> : null}\n          </Fragment>\n        ),\n      }}\n      placement=\"bottom right\"\n      {...rest}\n    />\n  );\n}\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin-left: 0px;\n`;\n\nexport default OptionSelector;\n","import {Fragment} from 'react';\nimport debounce from 'lodash/debounce';\nimport * as qs from 'query-string';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Form from 'sentry/components/forms/form';\nimport FormModel, {FieldValue} from 'sentry/components/forms/model';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {tct} from 'sentry/locale';\nimport {\n  Choices,\n  IntegrationIssueConfig,\n  IssueConfigField,\n  SelectValue,\n} from 'sentry/types';\nimport {FormField} from 'sentry/views/alerts/rules/issue/ruleNode';\n\nexport type ExternalIssueAction = 'create' | 'link';\n\nexport type ExternalIssueFormErrors = {[key: string]: React.ReactNode};\n\ntype Props = ModalRenderProps & AsyncComponent['props'];\n\ntype State = {\n  action: ExternalIssueAction;\n  /**\n   * Object of fields where `updatesFrom` is true, by field name. Derived from\n   * `integrationDetails` when it loads. Null until set.\n   */\n  dynamicFieldValues: {[key: string]: FieldValue | null} | null;\n  /**\n   * Cache of options fetched for async fields.\n   */\n  fetchedFieldOptionsCache: Record<string, Choices>;\n  /**\n   * Fetched via endpoint, null until set.\n   */\n  integrationDetails: IntegrationIssueConfig | null;\n} & AsyncComponent['state'];\n\nconst DEBOUNCE_MS = 200;\n/**\n * @abstract\n */\nexport default class AbstractExternalIssueForm<\n  P extends Props = Props,\n  S extends State = State\n> extends AsyncComponent<P, S> {\n  shouldRenderBadRequests = true;\n  model = new FormModel();\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      action: 'create',\n      dynamicFieldValues: null,\n      fetchedFieldOptionsCache: {},\n      integrationDetails: null,\n    };\n  }\n\n  refetchConfig = () => {\n    const {action, dynamicFieldValues} = this.state;\n    const query = {action, ...dynamicFieldValues};\n    const endpoint = this.getEndPointString();\n\n    this.api.request(endpoint, {\n      method: 'GET',\n      query,\n      success: (data, _, resp) => {\n        this.handleRequestSuccess({stateKey: 'integrationDetails', data, resp}, true);\n      },\n      error: error => {\n        this.handleError(error, ['integrationDetails', endpoint, null, null]);\n      },\n    });\n  };\n\n  getConfigName = (): 'createIssueConfig' | 'linkIssueConfig' => {\n    // Explicitly returning a non-interpolated string for clarity.\n    const {action} = this.state;\n    switch (action) {\n      case 'create':\n        return 'createIssueConfig';\n      case 'link':\n        return 'linkIssueConfig';\n      default:\n        throw new Error('illegal action');\n    }\n  };\n\n  /**\n   * Convert IntegrationIssueConfig to an object that maps field names to the\n   * values of fields where `updatesFrom` is true. This function prefers to read\n   * configs from its parameters and otherwise falls back to reading from state.\n   * @param integrationDetailsParam\n   * @returns Object of field names to values.\n   */\n  getDynamicFields = (\n    integrationDetailsParam?: IntegrationIssueConfig\n  ): {[key: string]: FieldValue | null} => {\n    const {integrationDetails: integrationDetailsFromState} = this.state;\n    const integrationDetails = integrationDetailsParam || integrationDetailsFromState;\n    const config = (integrationDetails || {})[this.getConfigName()];\n    return Object.fromEntries(\n      (config || [])\n        .filter((field: IssueConfigField) => field.updatesForm)\n        .map((field: IssueConfigField) => [field.name, field.default || null])\n    );\n  };\n\n  onRequestSuccess = ({stateKey, data}) => {\n    if (stateKey === 'integrationDetails') {\n      this.handleReceiveIntegrationDetails(data);\n      this.setState({\n        dynamicFieldValues: this.getDynamicFields(data),\n      });\n    }\n  };\n\n  /**\n   * If this field should updateForm, updateForm. Otherwise, do nothing.\n   */\n  onFieldChange = (fieldName: string, value: FieldValue) => {\n    const {dynamicFieldValues} = this.state;\n    const dynamicFields = this.getDynamicFields();\n    if (dynamicFields.hasOwnProperty(fieldName) && dynamicFieldValues) {\n      dynamicFieldValues[fieldName] = value;\n      this.setState(\n        {\n          dynamicFieldValues,\n          reloading: true,\n          error: false,\n          remainingRequests: 1,\n        },\n        this.refetchConfig\n      );\n    }\n  };\n\n  /**\n   * For fields with dynamic fields, cache the fetched choices.\n   */\n  updateFetchedFieldOptionsCache = (\n    field: IssueConfigField,\n    result: SelectValue<string | number>[]\n  ): void => {\n    const {fetchedFieldOptionsCache} = this.state;\n    this.setState({\n      fetchedFieldOptionsCache: {\n        ...fetchedFieldOptionsCache,\n        [field.name]: result.map(obj => [obj.value, obj.label]),\n      },\n    });\n  };\n\n  /**\n   * Ensures current result from Async select fields is never discarded. Without this method,\n   * searching in an async select field without selecting one of the returned choices will\n   * result in a value saved to the form, and no associated label; appearing empty.\n   * @param field The field being examined\n   * @param result The result from it's asynchronous query\n   * @returns The result with a tooltip attached to the current option\n   */\n  ensureCurrentOption = (\n    field: IssueConfigField,\n    result: SelectValue<string | number>[]\n  ): SelectValue<string | number>[] => {\n    const currentOption = this.getDefaultOptions(field).find(\n      option => option.value === this.model.getValue(field.name)\n    );\n    if (!currentOption) {\n      return result;\n    }\n    if (typeof currentOption.label === 'string') {\n      currentOption.label = (\n        <Fragment>\n          <QuestionTooltip\n            title={tct('This is your current [label].', {\n              label: field.label,\n            })}\n            size=\"xs\"\n          />{' '}\n          {currentOption.label}\n        </Fragment>\n      );\n    }\n    const currentOptionResultIndex = result.findIndex(\n      obj => obj.value === currentOption?.value\n    );\n    // Has a selected option, and it is in API results\n    if (currentOptionResultIndex >= 0) {\n      const newResult = result;\n      newResult[currentOptionResultIndex] = currentOption;\n      return newResult;\n    }\n    // Has a selected option, and it is not in API results\n\n    return [...result, currentOption];\n  };\n\n  /**\n   * Get the list of options for a field via debounced API call. For example,\n   * the list of users that match the input string. The Promise rejects if there\n   * are any errors.\n   */\n  getOptions = (field: IssueConfigField, input: string) =>\n    new Promise((resolve, reject) => {\n      if (!input) {\n        return resolve(this.getDefaultOptions(field));\n      }\n      return this.debouncedOptionLoad(field, input, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          result = this.ensureCurrentOption(field, result);\n          this.updateFetchedFieldOptionsCache(field, result);\n          resolve(result);\n        }\n      });\n    });\n\n  debouncedOptionLoad = debounce(\n    async (\n      field: IssueConfigField,\n      input: string,\n      cb: (err: Error | null, result?: any) => void\n    ) => {\n      const {dynamicFieldValues} = this.state;\n      const query = qs.stringify({\n        ...dynamicFieldValues,\n        field: field.name,\n        query: input,\n      });\n\n      const url = field.url || '';\n      const separator = url.includes('?') ? '&' : '?';\n      // We can't use the API client here since the URL is not scoped under the\n      // API endpoints (which the client prefixes)\n      try {\n        const response = await fetch(url + separator + query);\n        cb(null, response.ok ? await response.json() : []);\n      } catch (err) {\n        cb(err);\n      }\n    },\n    DEBOUNCE_MS,\n    {trailing: true}\n  );\n\n  getDefaultOptions = (field: IssueConfigField) => {\n    const choices =\n      (field.choices as Array<[number | string, number | string | React.ReactElement]>) ||\n      [];\n    return choices.map(([value, label]) => ({value, label}));\n  };\n\n  /**\n   * If this field is an async select (field.url is not null), add async props.\n   */\n  getFieldProps = (field: IssueConfigField) =>\n    field.url\n      ? {\n          async: true,\n          autoload: true,\n          cache: false,\n          loadOptions: (input: string) => this.getOptions(field, input),\n          defaultOptions: this.getDefaultOptions(field),\n          onBlurResetsInput: false,\n          onCloseResetsInput: false,\n          onSelectResetsInput: false,\n        }\n      : {};\n\n  // Abstract methods.\n  handleReceiveIntegrationDetails = (_data: any) => {\n    // Do nothing.\n  };\n  getEndPointString(): string {\n    throw new Error(\"Method 'getEndPointString()' must be implemented.\");\n  }\n  renderNavTabs = (): React.ReactNode => null;\n  renderBodyText = (): React.ReactNode => null;\n  getTitle = () => tct('Issue Link Settings', {});\n  getFormProps = (): Form['props'] => {\n    throw new Error(\"Method 'getFormProps()' must be implemented.\");\n  };\n\n  getDefaultFormProps = (): Form['props'] => {\n    return {\n      footerClass: 'modal-footer',\n      onFieldChange: this.onFieldChange,\n      submitDisabled: this.state.reloading,\n      model: this.model,\n      // Other form props implemented by child classes.\n    };\n  };\n\n  getCleanedFields = (): IssueConfigField[] => {\n    const {fetchedFieldOptionsCache, integrationDetails} = this.state;\n\n    const configsFromAPI = (integrationDetails || {})[this.getConfigName()];\n    return (configsFromAPI || []).map(field => {\n      const fieldCopy = {...field};\n      // Overwrite choices from cache.\n      if (fetchedFieldOptionsCache?.hasOwnProperty(field.name)) {\n        fieldCopy.choices = fetchedFieldOptionsCache[field.name];\n      }\n\n      return fieldCopy;\n    });\n  };\n\n  renderComponent() {\n    return this.state.error\n      ? this.renderError(new Error('Unable to load all required endpoints'))\n      : this.renderBody();\n  }\n\n  renderForm = (\n    formFields?: IssueConfigField[],\n    errors: ExternalIssueFormErrors = {}\n  ) => {\n    const initialData: {[key: string]: any} = (formFields || []).reduce(\n      (accumulator, field: FormField) => {\n        accumulator[field.name] =\n          // Passing an empty array breaks MultiSelect.\n          field.multiple && field.default === [] ? '' : field.default;\n        return accumulator;\n      },\n      {}\n    );\n\n    const {Header, Body} = this.props as ModalRenderProps;\n\n    return (\n      <Fragment>\n        <Header closeButton>{this.getTitle()}</Header>\n        {this.renderNavTabs()}\n        <Body>\n          {this.shouldRenderLoading ? (\n            this.renderLoading()\n          ) : (\n            <Fragment>\n              {this.renderBodyText()}\n              <Form initialData={initialData} {...this.getFormProps()}>\n                {(formFields || [])\n                  .filter((field: FormField) => field.hasOwnProperty('name'))\n                  .map(fields => ({\n                    ...fields,\n                    noOptionsMessage: () => 'No options. Type to search.',\n                  }))\n                  .map((field, i) => {\n                    return (\n                      <Fragment key={`${field.name}-${i}`}>\n                        <FieldFromConfig\n                          disabled={this.state.reloading}\n                          field={field}\n                          flexibleControlStateSize\n                          inline={false}\n                          stacked\n                          {...this.getFieldProps(field)}\n                        />\n                        {errors[field.name] && errors[field.name]}\n                      </Fragment>\n                    );\n                  })}\n              </Form>\n            </Fragment>\n          )}\n        </Body>\n      </Fragment>\n    );\n  };\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {Client} from 'sentry/api';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport IdBadge from 'sentry/components/idBadge';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport MemberListStore from 'sentry/stores/memberListStore';\nimport {Member, Organization, Project, User} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport withApi from 'sentry/utils/withApi';\n\nconst getSearchKeyForUser = (user: User) =>\n  `${user.email && user.email.toLowerCase()} ${user.name && user.name.toLowerCase()}`;\n\ntype MentionableUser = {\n  actor: {\n    id: string;\n    name: string;\n    type: 'user';\n  };\n  label: React.ReactElement;\n  searchKey: string;\n  value: string;\n  disabled?: boolean;\n};\n\ntype Props = {\n  api: Client;\n  onChange: (value: any) => any;\n  organization: Organization;\n  value: any;\n  disabled?: boolean;\n  onInputChange?: (value: any) => any;\n  placeholder?: string;\n  project?: Project;\n  styles?: {control?: (provided: any) => any};\n};\n\ntype State = {\n  inputValue: string;\n  loading: boolean;\n  memberListLoading: boolean;\n  options: MentionableUser[] | null;\n};\n\ntype FilterOption<T> = {\n  data: T;\n  label: React.ReactNode;\n  value: string;\n};\n\n/**\n * A component that allows you to select either members and/or teams\n */\nclass SelectMembers extends Component<Props, State> {\n  state: State = {\n    loading: false,\n    inputValue: '',\n    options: null,\n    memberListLoading: !MemberListStore.isLoaded(),\n  };\n\n  componentWillUnmount() {\n    this.unlisteners.forEach(callIfFunction);\n  }\n\n  unlisteners = [\n    MemberListStore.listen(() => {\n      this.setState({\n        memberListLoading: !MemberListStore.isLoaded(),\n      });\n    }, undefined),\n  ];\n\n  renderUserBadge = (user: User) => (\n    <IdBadge avatarSize={24} user={user} hideEmail useLink={false} />\n  );\n\n  createMentionableUser = (user: User): MentionableUser => ({\n    value: user.id,\n    label: this.renderUserBadge(user),\n    searchKey: getSearchKeyForUser(user),\n    actor: {\n      type: 'user',\n      id: user.id,\n      name: user.name,\n    },\n  });\n\n  createUnmentionableUser = ({user}) => ({\n    ...this.createMentionableUser(user),\n    disabled: true,\n    label: (\n      <DisabledLabel>\n        <Tooltip\n          position=\"left\"\n          title={t('%s is not a member of project', user.name || user.email)}\n        >\n          {this.renderUserBadge(user)}\n        </Tooltip>\n      </DisabledLabel>\n    ),\n  });\n\n  getMentionableUsers() {\n    return MemberListStore.getAll().map(this.createMentionableUser);\n  }\n\n  handleChange = newValue => {\n    this.props.onChange(newValue);\n  };\n\n  handleInputChange = inputValue => {\n    this.setState({inputValue});\n\n    if (this.props.onInputChange) {\n      this.props.onInputChange(inputValue);\n    }\n  };\n\n  queryMembers = debounce((query, cb) => {\n    const {api, organization} = this.props;\n\n    // Because this function is debounced, the component can potentially be\n    // unmounted before this fires, in which case, `api` is null\n    if (!api) {\n      return null;\n    }\n\n    return api\n      .requestPromise(`/organizations/${organization.slug}/members/`, {\n        query: {query},\n      })\n      .then(\n        (data: Member[]) => cb(null, data),\n        err => cb(err)\n      );\n  }, 250);\n\n  handleLoadOptions = (): Promise<MentionableUser[]> => {\n    const usersInProject = this.getMentionableUsers();\n    const usersInProjectById = usersInProject.map(({actor}) => actor.id);\n\n    // Return a promise for `react-select`\n    return new Promise((resolve, reject) => {\n      this.queryMembers(this.state.inputValue, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    })\n      .then(\n        members =>\n          // Be careful here as we actually want the `users` object, otherwise it means user\n          // has not registered for sentry yet, but has been invited\n          (members\n            ? (members as Member[])\n                .filter(({user}) => user && usersInProjectById.indexOf(user.id) === -1)\n                .map(this.createUnmentionableUser)\n            : []) as MentionableUser[]\n      )\n      .then((members: MentionableUser[]) => {\n        const options = [...usersInProject, ...members];\n        this.setState({options});\n        return options;\n      });\n  };\n\n  render() {\n    const {placeholder, styles} = this.props;\n\n    // If memberList is still loading we need to disable a placeholder Select,\n    // otherwise `react-select` will call `loadOptions` and prematurely load\n    // options\n    if (this.state.memberListLoading) {\n      return <StyledSelectControl isDisabled placeholder={t('Loading')} />;\n    }\n\n    return (\n      <StyledSelectControl\n        filterOption={(option: FilterOption<MentionableUser>, filterText: string) =>\n          option?.data?.searchKey?.indexOf(filterText) > -1\n        }\n        loadOptions={this.handleLoadOptions}\n        isOptionDisabled={option => option.disabled}\n        defaultOptions\n        async\n        isDisabled={this.props.disabled}\n        cacheOptions={false}\n        placeholder={placeholder}\n        onInputChange={this.handleInputChange}\n        onChange={this.handleChange}\n        value={this.state.options?.find(({value}) => value === this.props.value)}\n        styles={{\n          ...(styles ?? {}),\n          option: (provided, state: any) => ({\n            ...provided,\n            svg: {\n              color: state.isSelected && state.theme.white,\n            },\n          }),\n        }}\n      />\n    );\n  }\n}\n\nconst DisabledLabel = styled('div')`\n  display: flex;\n  opacity: 0.5;\n  overflow: hidden; /* Needed so that \"Add to team\" button can fit */\n`;\n\nconst StyledSelectControl = styled(SelectControl)`\n  .Select-value {\n    display: flex;\n    align-items: center;\n  }\n  .Select-input {\n    margin-left: 32px;\n  }\n`;\n\nexport default withApi(SelectMembers);\n","import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {Environment} from 'sentry/types';\n\nconst DEFAULT_EMPTY_ROUTING_NAME = 'none';\nconst DEFAULT_EMPTY_ENV_NAME = '(No Environment)';\n\nexport function getUrlRoutingName(env: Partial<Environment>) {\n  if (env.name) {\n    return encodeURIComponent(env.name);\n  }\n\n  if (env.displayName) {\n    return encodeURIComponent(env.displayName);\n  }\n  return DEFAULT_EMPTY_ROUTING_NAME;\n}\n\nexport function getDisplayName(env: Partial<Environment>) {\n  return env.name || env.displayName || DEFAULT_EMPTY_ENV_NAME;\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {Location} from 'history';\nimport findLastIndex from 'lodash/findLastIndex';\n\nimport replaceRouterParams from 'sentry/utils/replaceRouterParams';\nimport {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ntype Options = {\n  // parameters to replace any route string parameters (e.g. if route is `:orgId`,\n  // params should have `{orgId: slug}`\n  params: {[key: string]: string | undefined};\n\n  routes: RouteWithName[];\n\n  location?: Location;\n  /**\n   * The number of routes to to pop off of `routes\n   * Must be < 0\n   *\n   * There's no ts type for negative numbers so we are arbitrarily specifying -1-9\n   */\n  stepBack?: -1 | -2 | -3 | -4 | -5 | -6 | -7 | -8 | -9;\n};\n\n/**\n * Given a route object or a string and a list of routes + params from router, this will attempt to recreate a location string while replacing url params.\n * Can additionally specify the number of routes to move back\n *\n * See tests for examples\n */\nexport default function recreateRoute(\n  to: string | RouteWithName,\n  options: Options\n): string {\n  const {routes, params, location, stepBack} = options;\n  const paths = routes.map(({path}) => path || '');\n  let lastRootIndex: number;\n  let routeIndex: number | undefined;\n\n  // TODO(ts): typescript things\n  if (typeof to !== 'string') {\n    routeIndex = routes.indexOf(to) + 1;\n    lastRootIndex = findLastIndex(paths.slice(0, routeIndex), path => path[0] === '/');\n  } else {\n    lastRootIndex = findLastIndex(paths, path => path[0] === '/');\n  }\n\n  let baseRoute = paths.slice(lastRootIndex, routeIndex);\n\n  if (typeof stepBack !== 'undefined') {\n    baseRoute = baseRoute.slice(0, stepBack);\n  }\n\n  const search = location?.search ?? '';\n  const hash = location?.hash ?? '';\n\n  const fullRoute = `${baseRoute.join('')}${\n    typeof to !== 'string' ? '' : to\n  }${search}${hash}`;\n\n  return replaceRouterParams(fullRoute, params);\n}\n","/**\n * Replace item at `index` in `array` with `obj`\n */\nexport function replaceAtArrayIndex<T>(array: T[], index: number, obj: T): T[] {\n  const newArray = [...array];\n  newArray.splice(index, 1, obj);\n  return newArray;\n}\n","function routeTitleGen(\n  routeName: string,\n  orgSlug: string,\n  withSentry: boolean = true,\n  projectSlug?: string\n): string {\n  const tmplBase = `${routeName} - ${orgSlug}`;\n  const tmpl = projectSlug ? `${tmplBase} - ${projectSlug}` : tmplBase;\n\n  return withSentry ? `${tmpl} - Sentry` : tmpl;\n}\n\nexport default routeTitleGen;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport type {Location} from 'history';\n\nimport Breadcrumbs, {Crumb, CrumbDropdown} from 'sentry/components/breadcrumbs';\nimport IdBadge from 'sentry/components/idBadge';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport useProjects from 'sentry/utils/useProjects';\nimport MenuItem from 'sentry/views/settings/components/settingsBreadcrumb/menuItem';\nimport type {RouteWithName} from 'sentry/views/settings/components/settingsBreadcrumb/types';\n\ninterface Props {\n  location: Location;\n  organization: Organization;\n  projectSlug: string;\n  routes: RouteWithName[];\n  title: string;\n  alertName?: string;\n  alertType?: string;\n  canChangeProject?: boolean;\n}\n\nfunction BuilderBreadCrumbs({\n  title,\n  alertName,\n  projectSlug,\n  routes,\n  canChangeProject,\n  location,\n  organization,\n  alertType,\n}: Props) {\n  const {projects} = useProjects();\n  const isSuperuser = isActiveSuperuser();\n  const project = projects.find(({slug}) => projectSlug === slug);\n  const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n\n  const label = (\n    <IdBadge project={project ?? {slug: projectSlug}} avatarSize={18} disableLink />\n  );\n\n  const projectCrumbLink: Crumb = {\n    to: `/organizations/${organization.slug}/alerts/rules/?project=${project?.id}`,\n    label,\n  };\n\n  function getProjectDropdownCrumb(): CrumbDropdown {\n    return {\n      onSelect: ({value: projectId}) => {\n        // TODO(taylangocmen): recreating route doesn't update query, don't edit recreateRoute will add project selector for alert-wizard-v3\n        browserHistory.push(\n          recreateRoute('', {\n            routes,\n            params: hasAlertWizardV3\n              ? {orgId: organization.slug, alertType}\n              : {orgId: organization.slug, projectId},\n            location,\n          })\n        );\n      },\n      label,\n      items: projects\n        .filter(proj => proj.isMember || isSuperuser)\n        .map((proj, index) => ({\n          index,\n          value: proj.slug,\n          label: (\n            <MenuItem>\n              <IdBadge\n                project={proj}\n                avatarProps={{consistentWidth: true}}\n                avatarSize={18}\n                disableLink\n              />\n            </MenuItem>\n          ),\n          searchKey: proj.slug,\n        })),\n    };\n  }\n\n  const projectCrumb = canChangeProject ? getProjectDropdownCrumb() : projectCrumbLink;\n\n  const crumbs: (Crumb | CrumbDropdown)[] = [\n    {\n      to: `/organizations/${organization.slug}/alerts/rules/`,\n      label: t('Alerts'),\n      preservePageFilters: true,\n    },\n    ...(hasAlertWizardV3 ? [] : [projectCrumb]),\n    {\n      label: title,\n      ...(alertName\n        ? {\n            to: `/organizations/${organization.slug}/alerts/${projectSlug}/wizard`,\n            preservePageFilters: true,\n          }\n        : {}),\n    },\n  ];\n  if (alertName) {\n    crumbs.push({label: alertName});\n  }\n\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  font-size: 18px;\n  margin-bottom: ${space(3)};\n`;\n\nexport default BuilderBreadCrumbs;\n","export const CHANGE_ALERT_CONDITION_IDS = [\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition',\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition',\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition',\n];\n\nexport const CHANGE_ALERT_PLACEHOLDERS_LABELS = {\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition':\n    'Number of events in an issue is...',\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition':\n    'Number of users affected by an issue is...',\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition':\n    'Percent of sessions affected by an issue is...',\n};\n\nexport const COMPARISON_TYPE_CHOICE_VALUES = {\n  count: 'more than {value} in {interval}',\n  percent: '{value}% higher in {interval} compared to {comparisonInterval} ago',\n};\nexport const COMPARISON_TYPE_CHOICES: [string, string][] = [\n  ['count', COMPARISON_TYPE_CHOICE_VALUES.count],\n  ['percent', COMPARISON_TYPE_CHOICE_VALUES.percent],\n];\nexport const COMPARISON_INTERVAL_CHOICES: [string, string][] = [\n  ['5m', '5 minutes'],\n  ['15m', '15 minutes'],\n  ['1h', 'one hour'],\n  ['1d', 'one day'],\n  ['1w', 'one week'],\n  ['30d', '30 days'],\n];\n","import type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {IssueConfigField} from './integrations';\n\ntype IssueAlertRuleFormField =\n  | {\n      type: 'choice';\n      choices?: [string, string][];\n      initial?: string;\n      placeholder?: string;\n    }\n  | {\n      type: 'string';\n      initial?: string;\n      placeholder?: string;\n    }\n  | {\n      type: 'number';\n      initial?: string;\n      placeholder?: number | string;\n    };\n\n/**\n * These templates that tell the UI how to render the action or condition\n * and what fields it needs\n */\nexport type IssueAlertRuleActionTemplate = {\n  enabled: boolean;\n  id: string;\n  label: string;\n  name: string;\n  prompt: string;\n  actionType?: 'ticket' | 'sentryapp';\n  formFields?:\n    | {\n        [key: string]: IssueAlertRuleFormField;\n      }\n    | SchemaFormConfig;\n  link?: string;\n  sentryAppInstallationUuid?: string;\n  ticketType?: string;\n};\nexport type IssueAlertRuleConditionTemplate = IssueAlertRuleActionTemplate;\n\n/**\n * These are the action or condition data that the user is editing or has saved.\n */\nexport type IssueAlertRuleAction = Omit<\n  IssueAlertRuleActionTemplate,\n  'formFields' | 'enabled'\n> & {\n  dynamic_form_fields?: IssueConfigField[];\n} & {\n  // These are the same values as the keys in `formFields` for a template\n  [key: string]: any;\n};\n\nexport type IssueAlertRuleCondition = Omit<\n  IssueAlertRuleConditionTemplate,\n  'formFields' | 'enabled'\n> & {\n  dynamic_form_fields?: IssueConfigField[];\n} & {\n  // These are the same values as the keys in `formFields` for a template\n  [key: string]: number | string;\n};\n\nexport type UnsavedIssueAlertRule = {\n  /** When an issue matches [actionMatch] of the following */\n  actionMatch: 'all' | 'any' | 'none';\n  actions: IssueAlertRuleAction[];\n  conditions: IssueAlertRuleCondition[];\n  /** If that issue has [filterMatch] of these properties */\n  filterMatch: 'all' | 'any' | 'none';\n  filters: IssueAlertRuleCondition[];\n  frequency: number;\n  name: string;\n  environment?: null | string;\n  owner?: string | null;\n};\n\n// Issue-based alert rule\nexport type IssueAlertRule = UnsavedIssueAlertRule & {\n  createdBy: {email: string; id: number; name: string} | null;\n  dateCreated: string;\n  id: string;\n  projects: string[];\n  errors?: {detail: string}[];\n  lastTriggered?: string;\n};\n\n// Project's alert rule stats\nexport type ProjectAlertRuleStats = {\n  count: number;\n  date: string;\n};\n\nexport enum MailActionTargetType {\n  IssueOwners = 'IssueOwners',\n  Team = 'Team',\n  Member = 'Member',\n}\n\nexport enum AssigneeTargetType {\n  Unassigned = 'Unassigned',\n  Team = 'Team',\n  Member = 'Member',\n}\n\nexport type NoteType = {\n  mentions: string[];\n  text: string;\n};\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport TeamSelector from 'sentry/components/forms/teamSelector';\nimport {PanelItem} from 'sentry/components/panels';\nimport SelectMembers from 'sentry/components/selectMembers';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {IssueAlertRuleAction, IssueAlertRuleCondition} from 'sentry/types/alerts';\n\ninterface OptionRecord {\n  label: string;\n  value: string;\n}\n\ntype Props = {\n  disabled: boolean;\n  loading: boolean;\n  memberValue: string | number;\n  onChange: (action: IssueAlertRuleAction) => void;\n  options: OptionRecord[];\n  organization: Organization;\n  project: Project;\n  ruleData: IssueAlertRuleAction | IssueAlertRuleCondition;\n  teamValue: string | number;\n};\n\nclass MemberTeamFields extends Component<Props> {\n  handleChange = (attribute: 'targetType' | 'targetIdentifier', newValue: string) => {\n    const {onChange, ruleData} = this.props;\n    if (newValue === ruleData[attribute]) {\n      return;\n    }\n    const newData = {\n      ...ruleData,\n      [attribute]: newValue,\n    };\n    /**\n     * TargetIdentifiers between the targetTypes are not unique, and may wrongly map to something that has not been\n     * selected. E.g. A member and project can both have the `targetIdentifier`, `'2'`. Hence we clear the identifier.\n     **/\n    if (attribute === 'targetType') {\n      newData.targetIdentifier = '';\n    }\n    onChange(newData);\n  };\n\n  handleChangeActorType = (optionRecord: OptionRecord) => {\n    this.handleChange('targetType', optionRecord.value);\n  };\n\n  handleChangeActorId = (optionRecord: OptionRecord & {[key: string]: any}) => {\n    this.handleChange('targetIdentifier', optionRecord.value);\n  };\n\n  render(): React.ReactElement {\n    const {\n      disabled,\n      loading,\n      project,\n      organization,\n      ruleData,\n      memberValue,\n      teamValue,\n      options,\n    } = this.props;\n\n    const teamSelected = ruleData.targetType === teamValue;\n    const memberSelected = ruleData.targetType === memberValue;\n\n    const selectControlStyles = {\n      control: provided => ({\n        ...provided,\n        minHeight: '28px',\n        height: '28px',\n      }),\n    };\n\n    return (\n      <PanelItemGrid>\n        <SelectControl\n          isClearable={false}\n          isDisabled={disabled || loading}\n          value={ruleData.targetType}\n          styles={selectControlStyles}\n          options={options}\n          onChange={this.handleChangeActorType}\n        />\n        {teamSelected ? (\n          <TeamSelector\n            disabled={disabled}\n            key={teamValue}\n            project={project}\n            // The value from the endpoint is of type `number`, `SelectMembers` require value to be of type `string`\n            value={`${ruleData.targetIdentifier}`}\n            styles={selectControlStyles}\n            onChange={this.handleChangeActorId}\n            useId\n          />\n        ) : memberSelected ? (\n          <SelectMembers\n            disabled={disabled}\n            key={teamSelected ? teamValue : memberValue}\n            project={project}\n            organization={organization}\n            // The value from the endpoint is of type `number`, `SelectMembers` require value to be of type `string`\n            value={`${ruleData.targetIdentifier}`}\n            styles={selectControlStyles}\n            onChange={this.handleChangeActorId}\n          />\n        ) : null}\n      </PanelItemGrid>\n    );\n  }\n}\n\nconst PanelItemGrid = styled(PanelItem)`\n  display: grid;\n  grid-template-columns: 200px 200px;\n  padding: 0;\n  align-items: center;\n  gap: ${space(2)};\n`;\n\nexport default MemberTeamFields;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport AbstractExternalIssueForm, {\n  ExternalIssueFormErrors,\n} from 'sentry/components/externalIssues/abstractExternalIssueForm';\nimport Form from 'sentry/components/forms/form';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Choices, IssueConfigField, Organization} from 'sentry/types';\nimport {IssueAlertRuleAction} from 'sentry/types/alerts';\nimport AsyncView from 'sentry/views/asyncView';\n\nconst IGNORED_FIELDS = ['Sprint'];\n\ntype Props = {\n  // Comes from the in-code definition of a `TicketEventAction`.\n  formFields: {[key: string]: any};\n  index: number;\n  // The AlertRuleAction from DB.\n  instance: IssueAlertRuleAction;\n  onSubmitAction: (\n    data: {[key: string]: string},\n    fetchedFieldOptionsCache: Record<string, Choices>\n  ) => void;\n  organization: Organization;\n  link?: string;\n  ticketType?: string;\n} & AbstractExternalIssueForm['props'];\n\ntype State = {\n  issueConfigFieldsCache: IssueConfigField[];\n} & AbstractExternalIssueForm['state'];\n\nclass TicketRuleModal extends AbstractExternalIssueForm<Props, State> {\n  getDefaultState(): State {\n    const {instance} = this.props;\n    const issueConfigFieldsCache = Object.values(instance?.dynamic_form_fields || {});\n    return {\n      ...super.getDefaultState(),\n      fetchedFieldOptionsCache: Object.fromEntries(\n        issueConfigFieldsCache.map(field => [field.name, field.choices as Choices])\n      ),\n      issueConfigFieldsCache,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {instance} = this.props;\n    const query = (instance.dynamic_form_fields || [])\n      .filter(field => field.updatesForm)\n      .filter(field => instance.hasOwnProperty(field.name))\n      .reduce(\n        (accumulator, {name}) => {\n          accumulator[name] = instance[name];\n          return accumulator;\n        },\n        {action: 'create'}\n      );\n    return [['integrationDetails', this.getEndPointString(), {query}]];\n  }\n\n  handleReceiveIntegrationDetails = (integrationDetails: any) => {\n    this.setState({\n      issueConfigFieldsCache: integrationDetails[this.getConfigName()],\n    });\n  };\n\n  /**\n   * Get a list of formFields names with valid config data.\n   */\n  getValidAndSavableFieldNames = (): string[] => {\n    const {issueConfigFieldsCache} = this.state;\n    return (issueConfigFieldsCache || [])\n      .filter(field => field.hasOwnProperty('name'))\n      .map(field => field.name);\n  };\n\n  getEndPointString(): string {\n    const {instance, organization} = this.props;\n    return `/organizations/${organization.slug}/integrations/${instance.integration}/?ignored=${IGNORED_FIELDS}`;\n  }\n\n  /**\n   * Clean up the form data before saving it to state.\n   */\n  cleanData = (data: {\n    [key: string]: string;\n  }): {\n    [key: string]: any;\n    integration?: string | number;\n  } => {\n    const {instance} = this.props;\n    const {issueConfigFieldsCache} = this.state;\n    const names: string[] = this.getValidAndSavableFieldNames();\n    const formData: {\n      [key: string]: any;\n      integration?: string | number;\n    } = {};\n    if (instance?.hasOwnProperty('integration')) {\n      formData.integration = instance.integration;\n    }\n    formData.dynamic_form_fields = issueConfigFieldsCache;\n    for (const [key, value] of Object.entries(data)) {\n      if (names.includes(key)) {\n        formData[key] = value;\n      }\n    }\n    return formData;\n  };\n\n  onFormSubmit: Form['props']['onSubmit'] = (data, _success, _error, e, model) => {\n    const {onSubmitAction, closeModal} = this.props;\n    const {fetchedFieldOptionsCache} = this.state;\n\n    // This is a \"fake form\", so don't actually POST to an endpoint.\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (model.validateForm()) {\n      onSubmitAction(this.cleanData(data), fetchedFieldOptionsCache);\n      addSuccessMessage(t('Changes applied.'));\n      closeModal();\n    }\n  };\n\n  getFormProps = (): Form['props'] => {\n    const {closeModal} = this.props;\n\n    return {\n      ...this.getDefaultFormProps(),\n      cancelLabel: t('Close'),\n      onCancel: closeModal,\n      onSubmit: this.onFormSubmit,\n      submitLabel: t('Apply Changes'),\n    };\n  };\n\n  /**\n   * Set the initial data from the Rule, replace `title` and `description` with\n   * disabled inputs, and use the cached dynamic choices.\n   */\n  cleanFields = (): IssueConfigField[] => {\n    const {instance} = this.props;\n\n    const fields: IssueConfigField[] = [\n      {\n        name: 'title',\n        label: 'Title',\n        type: 'string',\n        default: 'This will be the same as the Sentry Issue.',\n        disabled: true,\n      } as IssueConfigField,\n      {\n        name: 'description',\n        label: 'Description',\n        type: 'string',\n        default: 'This will be generated from the Sentry Issue details.',\n        disabled: true,\n      } as IssueConfigField,\n    ];\n\n    return fields.concat(\n      this.getCleanedFields()\n        // Skip fields if they already exist.\n        .filter(field => !fields.map(f => f.name).includes(field.name))\n        .map(field => {\n          // Overwrite defaults from cache.\n          if (instance.hasOwnProperty(field.name)) {\n            field.default = instance[field.name] || field.default;\n          }\n          return field;\n        })\n    );\n  };\n\n  getErrors() {\n    const errors: ExternalIssueFormErrors = {};\n    for (const field of this.cleanFields()) {\n      if (field.type === 'select' && field.default) {\n        const fieldChoices = (field.choices || []) as Choices;\n        const found = fieldChoices.find(([value, _]) =>\n          Array.isArray(field.default)\n            ? field.default.includes(value)\n            : value === field.default\n        );\n\n        if (!found) {\n          errors[field.name] = (\n            <FieldErrorLabel>{`Could not fetch saved option for ${field.label}. Please reselect.`}</FieldErrorLabel>\n          );\n        }\n      }\n    }\n    return errors;\n  }\n\n  renderBodyText = () => {\n    // `ticketType` already includes indefinite article.\n    const {ticketType, link} = this.props;\n    return (\n      <BodyText>\n        {tct(\n          'When this alert is triggered [ticketType] will be ' +\n            'created with the following fields. It will also [linkToDocs] ' +\n            'with the new Sentry Issue.',\n          {\n            linkToDocs: <ExternalLink href={link}>{t('stay in sync')}</ExternalLink>,\n            ticketType,\n          }\n        )}\n      </BodyText>\n    );\n  };\n\n  render() {\n    return this.renderForm(this.cleanFields(), this.getErrors());\n  }\n}\n\nconst BodyText = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst FieldErrorLabel = styled('label')`\n  padding-bottom: ${space(2)};\n  color: ${p => p.theme.errorText};\n`;\n\nexport default TicketRuleModal;\n","import {Fragment, useCallback, useEffect} from 'react';\nimport styled from '@emotion/styled';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport Input from 'sentry/components/forms/controls/input';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {releaseHealth} from 'sentry/data/platformCategories';\nimport {IconDelete, IconSettings} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Choices, Organization, Project} from 'sentry/types';\nimport {\n  AssigneeTargetType,\n  IssueAlertRuleAction,\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleCondition,\n  IssueAlertRuleConditionTemplate,\n  MailActionTargetType,\n} from 'sentry/types/alerts';\nimport MemberTeamFields from 'sentry/views/alerts/rules/issue/memberTeamFields';\nimport SentryAppRuleModal from 'sentry/views/alerts/rules/issue/sentryAppRuleModal';\nimport TicketRuleModal from 'sentry/views/alerts/rules/issue/ticketRuleModal';\nimport {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\nimport {EVENT_FREQUENCY_PERCENT_CONDITION} from 'sentry/views/projectInstall/issueAlertOptions';\n\ninterface FieldProps {\n  data: Props['data'];\n  disabled: boolean;\n  fieldConfig: FormField;\n  index: number;\n  name: string;\n  onMemberTeamChange: (data: Props['data']) => void;\n  onPropertyChange: Props['onPropertyChange'];\n  onReset: Props['onReset'];\n  organization: Organization;\n  project: Project;\n}\n\nfunction NumberField({\n  data,\n  index,\n  disabled,\n  name,\n  fieldConfig,\n  onPropertyChange,\n}: FieldProps) {\n  const value =\n    data[name] && typeof data[name] !== 'boolean' ? (data[name] as string | number) : '';\n\n  // Set default value of number fields to the placeholder value\n  useEffect(() => {\n    if (\n      value === '' &&\n      data.id === 'sentry.rules.filters.issue_occurrences.IssueOccurrencesFilter' &&\n      !isNaN(Number(fieldConfig.placeholder))\n    ) {\n      onPropertyChange(index, name, `${fieldConfig.placeholder}`);\n    }\n    // Value omitted on purpose to avoid overwriting user changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [onPropertyChange, index, name, fieldConfig.placeholder, data.id]);\n\n  return (\n    <InlineNumberInput\n      type=\"number\"\n      name={name}\n      value={value}\n      placeholder={`${fieldConfig.placeholder}`}\n      disabled={disabled}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n        onPropertyChange(index, name, e.target.value)\n      }\n    />\n  );\n}\n\nfunction AssigneeFilterFields({\n  data,\n  organization,\n  project,\n  disabled,\n  onMemberTeamChange,\n}: FieldProps) {\n  const isInitialized = data.targetType !== undefined && `${data.targetType}`.length > 0;\n  return (\n    <MemberTeamFields\n      disabled={disabled}\n      project={project}\n      organization={organization}\n      loading={!isInitialized}\n      ruleData={data}\n      onChange={onMemberTeamChange}\n      options={[\n        {value: AssigneeTargetType.Unassigned, label: t('No One')},\n        {value: AssigneeTargetType.Team, label: t('Team')},\n        {value: AssigneeTargetType.Member, label: t('Member')},\n      ]}\n      memberValue={AssigneeTargetType.Member}\n      teamValue={AssigneeTargetType.Team}\n    />\n  );\n}\n\nfunction MailActionFields({\n  data,\n  organization,\n  project,\n  disabled,\n  onMemberTeamChange,\n}: FieldProps) {\n  const isInitialized = data.targetType !== undefined && `${data.targetType}`.length > 0;\n  return (\n    <MemberTeamFields\n      disabled={disabled}\n      project={project}\n      organization={organization}\n      loading={!isInitialized}\n      ruleData={data as IssueAlertRuleAction}\n      onChange={onMemberTeamChange}\n      options={[\n        {value: MailActionTargetType.IssueOwners, label: t('Issue Owners')},\n        {value: MailActionTargetType.Team, label: t('Team')},\n        {value: MailActionTargetType.Member, label: t('Member')},\n      ]}\n      memberValue={MailActionTargetType.Member}\n      teamValue={MailActionTargetType.Team}\n    />\n  );\n}\n\nfunction ChoiceField({\n  data,\n  disabled,\n  index,\n  onPropertyChange,\n  onReset,\n  name,\n  fieldConfig,\n}: FieldProps) {\n  // Select the first item on this list\n  // If it's not yet defined, call onPropertyChange to make sure the value is set on state\n  let initialVal: string | undefined;\n  if (data[name] === undefined && !!fieldConfig.choices.length) {\n    initialVal = fieldConfig.initial\n      ? `${fieldConfig.initial}`\n      : `${fieldConfig.choices[0][0]}`;\n  } else {\n    initialVal = `${data[name]}`;\n  }\n\n  // All `value`s are cast to string\n  // There are integrations that give the form field choices with the value as number, but\n  // when the integration configuration gets saved, it gets saved and returned as a string\n  const options = fieldConfig.choices.map(([value, label]) => ({\n    value: `${value}`,\n    label,\n  }));\n\n  return (\n    <InlineSelectControl\n      isClearable={false}\n      name={name}\n      value={initialVal}\n      styles={{\n        control: (provided: any) => ({\n          ...provided,\n          minHeight: '28px',\n          height: '28px',\n        }),\n      }}\n      disabled={disabled}\n      options={options}\n      onChange={({value}: {value: string}) => {\n        if (fieldConfig.resetsForm) {\n          onReset(index, name, value);\n        } else {\n          onPropertyChange(index, name, value);\n        }\n      }}\n    />\n  );\n}\n\nfunction TextField({\n  data,\n  index,\n  onPropertyChange,\n  disabled,\n  name,\n  fieldConfig,\n}: FieldProps) {\n  const value =\n    data[name] && typeof data[name] !== 'boolean' ? (data[name] as string | number) : '';\n\n  return (\n    <InlineInput\n      type=\"text\"\n      name={name}\n      value={value}\n      placeholder={`${fieldConfig.placeholder}`}\n      disabled={disabled}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n        onPropertyChange(index, name, e.target.value)\n      }\n    />\n  );\n}\n\nexport type FormField = {\n  // The rest is configuration for the form field\n  [key: string]: any;\n  // Type of form fields\n  type: string;\n};\n\ninterface Props {\n  data: IssueAlertRuleAction | IssueAlertRuleCondition;\n  disabled: boolean;\n  index: number;\n  onDelete: (rowIndex: number) => void;\n  onPropertyChange: (rowIndex: number, name: string, value: string) => void;\n  onReset: (rowIndex: number, name: string, value: string) => void;\n  organization: Organization;\n  project: Project;\n  node?: IssueAlertRuleActionTemplate | IssueAlertRuleConditionTemplate | null;\n}\n\nfunction RuleNode({\n  index,\n  data,\n  node,\n  organization,\n  project,\n  disabled,\n  onDelete,\n  onPropertyChange,\n  onReset,\n}: Props) {\n  const handleDelete = useCallback(() => {\n    onDelete(index);\n  }, [index, onDelete]);\n\n  const handleMemberTeamChange = useCallback(\n    ({targetType, targetIdentifier}: IssueAlertRuleAction | IssueAlertRuleCondition) => {\n      onPropertyChange(index, 'targetType', `${targetType}`);\n      onPropertyChange(index, 'targetIdentifier', `${targetIdentifier}`);\n    },\n    [index, onPropertyChange]\n  );\n\n  function getField(name: string, fieldConfig: FormField) {\n    const fieldProps: FieldProps = {\n      index,\n      name,\n      fieldConfig,\n      data,\n      organization,\n      project,\n      disabled,\n      onMemberTeamChange: handleMemberTeamChange,\n      onPropertyChange,\n      onReset,\n    };\n\n    switch (fieldConfig.type) {\n      case 'choice':\n        return <ChoiceField {...fieldProps} />;\n      case 'number':\n        return <NumberField {...fieldProps} />;\n      case 'string':\n        return <TextField {...fieldProps} />;\n      case 'mailAction':\n        return <MailActionFields {...fieldProps} />;\n      case 'assignee':\n        return <AssigneeFilterFields {...fieldProps} />;\n      default:\n        return null;\n    }\n  }\n\n  function renderRow() {\n    if (!node) {\n      return (\n        <Separator>\n          This node failed to render. It may have migrated to another section of the alert\n          conditions\n        </Separator>\n      );\n    }\n\n    const {label, formFields} = node;\n\n    const parts = label.split(/({\\w+})/).map((part, i) => {\n      if (!/^{\\w+}$/.test(part)) {\n        return <Separator key={i}>{part}</Separator>;\n      }\n\n      const key = part.slice(1, -1);\n\n      // If matcher is \"is set\" or \"is not set\", then we do not want to show the value input\n      // because it is not required\n      if (key === 'value' && (data.match === 'is' || data.match === 'ns')) {\n        return null;\n      }\n      return (\n        <Separator key={key}>\n          {formFields && formFields.hasOwnProperty(key)\n            ? getField(key, formFields[key])\n            : part}\n        </Separator>\n      );\n    });\n\n    const [title, ...inputs] = parts;\n\n    // We return this so that it can be a grid\n    return (\n      <Fragment>\n        {title}\n        {inputs}\n      </Fragment>\n    );\n  }\n\n  function conditionallyRenderHelpfulBanner() {\n    if (data.id === EVENT_FREQUENCY_PERCENT_CONDITION) {\n      if (!project.platform || !releaseHealth.includes(project.platform)) {\n        return (\n          <MarginlessAlert type=\"error\">\n            {tct(\n              \"This project doesn't support sessions. [link:View supported platforms]\",\n              {\n                link: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/releases/health/setup/\" />\n                ),\n              }\n            )}\n          </MarginlessAlert>\n        );\n      }\n\n      return (\n        <MarginlessAlert type=\"warning\">\n          {tct(\n            'Percent of sessions affected is approximated by the ratio of the issue frequency to the number of sessions in the project. [link:Learn more.]',\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/alerts/create-alerts/issue-alert-config/\" />\n              ),\n            }\n          )}\n        </MarginlessAlert>\n      );\n    }\n\n    if (data.id === 'sentry.integrations.slack.notify_action.SlackNotifyServiceAction') {\n      return (\n        <MarginlessAlert\n          type=\"info\"\n          showIcon\n          trailingItems={\n            <Button\n              href=\"https://docs.sentry.io/product/integrations/notification-incidents/slack/#rate-limiting-error\"\n              size=\"xsmall\"\n            >\n              {t('Learn More')}\n            </Button>\n          }\n        >\n          {t('Having rate limiting problems? Enter a channel or user ID.')}\n        </MarginlessAlert>\n      );\n    }\n\n    if (\n      data.id === 'sentry.mail.actions.NotifyEmailAction' &&\n      data.targetType === MailActionTargetType.IssueOwners\n    ) {\n      return (\n        <MarginlessAlert type=\"warning\">\n          {tct(\n            'If there are no matching [issueOwners], ownership is determined by the [ownershipSettings].',\n            {\n              issueOwners: (\n                <ExternalLink href=\"https://docs.sentry.io/product/error-monitoring/issue-owners/\">\n                  {t('issue owners')}\n                </ExternalLink>\n              ),\n              ownershipSettings: (\n                <ExternalLink\n                  href={`/settings/${organization.slug}/projects/${project.slug}/ownership/`}\n                >\n                  {t('ownership settings')}\n                </ExternalLink>\n              ),\n            }\n          )}\n        </MarginlessAlert>\n      );\n    }\n\n    return null;\n  }\n\n  /**\n   * Update all the AlertRuleAction's fields from the TicketRuleModal together\n   * only after the user clicks \"Apply Changes\".\n   * @param formData Form data\n   * @param fetchedFieldOptionsCache Object\n   */\n  const updateParentFromTicketRule = useCallback(\n    (\n      formData: Record<string, string>,\n      fetchedFieldOptionsCache: Record<string, Choices>\n    ): void => {\n      // We only know the choices after the form loads.\n      formData.dynamic_form_fields = ((formData.dynamic_form_fields as any) || []).map(\n        (field: any) => {\n          // Overwrite the choices because the user's pick is in this list.\n          if (\n            field.name in formData &&\n            fetchedFieldOptionsCache?.hasOwnProperty(field.name)\n          ) {\n            field.choices = fetchedFieldOptionsCache[field.name];\n          }\n          return field;\n        }\n      );\n\n      for (const [name, value] of Object.entries(formData)) {\n        onPropertyChange(index, name, value);\n      }\n    },\n    [index, onPropertyChange]\n  );\n\n  /**\n   * Update all the AlertRuleAction's fields from the SentryAppRuleModal together\n   * only after the user clicks \"Save Changes\".\n   * @param formData Form data\n   */\n  const updateParentFromSentryAppRule = useCallback(\n    (formData: Record<string, string>): void => {\n      for (const [name, value] of Object.entries(formData)) {\n        onPropertyChange(index, name, value);\n      }\n    },\n    [index, onPropertyChange]\n  );\n\n  const {actionType, id, sentryAppInstallationUuid} = node || {};\n  const ticketRule = actionType === 'ticket';\n  const sentryAppRule = actionType === 'sentryapp' && sentryAppInstallationUuid;\n  const isNew = id === EVENT_FREQUENCY_PERCENT_CONDITION;\n  return (\n    <RuleRowContainer>\n      <RuleRow>\n        <Rule>\n          {isNew && <StyledFeatureBadge type=\"new\" />}\n          <input type=\"hidden\" name=\"id\" value={data.id} />\n          {renderRow()}\n          {ticketRule && node && (\n            <Button\n              size=\"small\"\n              icon={<IconSettings size=\"xs\" />}\n              type=\"button\"\n              onClick={() =>\n                openModal(deps => (\n                  <TicketRuleModal\n                    {...deps}\n                    formFields={node.formFields || {}}\n                    link={node.link}\n                    ticketType={node.ticketType}\n                    instance={data}\n                    index={index}\n                    onSubmitAction={updateParentFromTicketRule}\n                    organization={organization}\n                  />\n                ))\n              }\n            >\n              {t('Issue Link Settings')}\n            </Button>\n          )}\n          {sentryAppRule && node && (\n            <Button\n              size=\"small\"\n              icon={<IconSettings size=\"xs\" />}\n              type=\"button\"\n              disabled={Boolean(data.disabled) || disabled}\n              onClick={() => {\n                openModal(\n                  deps => (\n                    <SentryAppRuleModal\n                      {...deps}\n                      sentryAppInstallationUuid={sentryAppInstallationUuid}\n                      config={node.formFields as SchemaFormConfig}\n                      appName={node.prompt}\n                      onSubmitSuccess={updateParentFromSentryAppRule}\n                      resetValues={data}\n                    />\n                  ),\n                  {allowClickClose: false}\n                );\n              }}\n            >\n              {t('Settings')}\n            </Button>\n          )}\n        </Rule>\n        <DeleteButton\n          disabled={disabled}\n          aria-label={t('Delete Node')}\n          onClick={handleDelete}\n          type=\"button\"\n          size=\"small\"\n          icon={<IconDelete />}\n        />\n      </RuleRow>\n      {conditionallyRenderHelpfulBanner()}\n    </RuleRowContainer>\n  );\n}\n\nexport default RuleNode;\n\nconst InlineInput = styled(Input)`\n  width: auto;\n  height: 28px;\n`;\n\nconst InlineNumberInput = styled(Input)`\n  width: 90px;\n  height: 28px;\n`;\n\nconst InlineSelectControl = styled(SelectControl)`\n  width: 180px;\n`;\n\nconst Separator = styled('span')`\n  margin-right: ${space(1)};\n  padding-top: ${space(0.5)};\n  padding-bottom: ${space(0.5)};\n`;\n\nconst RuleRow = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)};\n`;\n\nconst RuleRowContainer = styled('div')`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-radius: ${p => p.theme.borderRadius};\n  border: 1px ${p => p.theme.innerBorder} solid;\n`;\n\nconst Rule = styled('div')`\n  display: flex;\n  align-items: center;\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst DeleteButton = styled(Button)`\n  flex-shrink: 0;\n`;\n\nconst MarginlessAlert = styled(Alert)`\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-width: 0;\n  border-top: 1px ${p => p.theme.innerBorder} solid;\n  margin: 0;\n  padding: ${space(1)} ${space(1)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin: 0 ${space(1)} 0 0;\n`;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  IssueAlertRuleAction,\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleCondition,\n  IssueAlertRuleConditionTemplate,\n} from 'sentry/types/alerts';\nimport {\n  CHANGE_ALERT_CONDITION_IDS,\n  COMPARISON_INTERVAL_CHOICES,\n  COMPARISON_TYPE_CHOICE_VALUES,\n  COMPARISON_TYPE_CHOICES,\n} from 'sentry/views/alerts/utils/constants';\nimport {EVENT_FREQUENCY_PERCENT_CONDITION} from 'sentry/views/projectInstall/issueAlertOptions';\n\nimport RuleNode from './ruleNode';\n\ntype Props = {\n  disabled: boolean;\n  error: React.ReactNode;\n  /**\n   * actions/conditions that have been added to the rule\n   */\n  items: IssueAlertRuleAction[] | IssueAlertRuleCondition[];\n  /**\n   * All available actions or conditions\n   */\n  nodes: IssueAlertRuleActionTemplate[] | IssueAlertRuleConditionTemplate[] | null;\n  onAddRow: (value: string) => void;\n  onDeleteRow: (ruleIndex: number) => void;\n  onPropertyChange: (ruleIndex: number, prop: string, val: string) => void;\n  onResetRow: (ruleIndex: number, name: string, value: string) => void;\n  organization: Organization;\n  /**\n   * Placeholder for select control\n   */\n  placeholder: string;\n  project: Project;\n  selectType?: 'grouped';\n};\n\nclass RuleNodeList extends Component<Props> {\n  componentWillUnmount() {\n    window.clearTimeout(this.propertyChangeTimeout);\n  }\n\n  propertyChangeTimeout: number | undefined = undefined;\n\n  getNode = (\n    id: string,\n    itemIdx: number\n  ):\n    | IssueAlertRuleActionTemplate\n    | IssueAlertRuleConditionTemplate\n    | null\n    | undefined => {\n    const {nodes, items, organization, onPropertyChange} = this.props;\n    const node = nodes ? nodes.find(n => n.id === id) : null;\n\n    if (!node) {\n      return null;\n    }\n\n    if (\n      !organization.features.includes('change-alerts') ||\n      !CHANGE_ALERT_CONDITION_IDS.includes(node.id)\n    ) {\n      return node;\n    }\n\n    const item = items[itemIdx] as IssueAlertRuleCondition;\n\n    let changeAlertNode: IssueAlertRuleConditionTemplate = {\n      ...node,\n      label: node.label.replace('...', ' {comparisonType}'),\n      formFields: {\n        ...node.formFields,\n        comparisonType: {\n          type: 'choice',\n          choices: COMPARISON_TYPE_CHOICES,\n          // give an initial value from not among choices so selector starts with none selected\n          initial: 'select',\n        },\n      },\n    };\n\n    // item.comparison type isn't backfilled and is missing for old alert rules\n    // this is a problem when an old alert is being edited, need to initialize it\n    if (!item.comparisonType && item.value && item.name) {\n      item.comparisonType = item.comparisonInterval === undefined ? 'count' : 'percent';\n    }\n\n    if (item.comparisonType) {\n      changeAlertNode = {\n        ...changeAlertNode,\n        label: changeAlertNode.label.replace(\n          '{comparisonType}',\n          COMPARISON_TYPE_CHOICE_VALUES[item.comparisonType]\n        ),\n      };\n\n      if (item.comparisonType === 'percent') {\n        if (!item.comparisonInterval) {\n          // comparisonInterval value in IssueRuleEditor state\n          // is undefined even if initial value is defined\n          // can't directly call onPropertyChange, because\n          // getNode is called during render\n          window.clearTimeout(this.propertyChangeTimeout);\n          this.propertyChangeTimeout = window.setTimeout(() =>\n            onPropertyChange(itemIdx, 'comparisonInterval', '1w')\n          );\n        }\n        changeAlertNode = {\n          ...changeAlertNode,\n          formFields: {\n            ...changeAlertNode.formFields,\n            comparisonInterval: {\n              type: 'choice',\n              choices: COMPARISON_INTERVAL_CHOICES,\n              initial: '1w',\n            },\n          },\n        };\n      }\n    }\n\n    return changeAlertNode;\n  };\n\n  render() {\n    const {\n      onAddRow,\n      onResetRow,\n      onDeleteRow,\n      onPropertyChange,\n      nodes,\n      placeholder,\n      items,\n      organization,\n      project,\n      disabled,\n      error,\n      selectType,\n    } = this.props;\n\n    const shouldUsePrompt = project.features?.includes?.('issue-alerts-targeting');\n    const enabledNodes = nodes ? nodes.filter(({enabled}) => enabled) : [];\n\n    const createSelectOptions = (actions: IssueAlertRuleActionTemplate[]) =>\n      actions.map(node => {\n        const isNew = node.id === EVENT_FREQUENCY_PERCENT_CONDITION;\n\n        if (node.id.includes('NotifyEmailAction')) {\n          return {\n            value: node.id,\n            label: t('Issue Owners, Team, or Member'),\n          };\n        }\n\n        return {\n          value: node.id,\n          label: (\n            <Fragment>\n              {isNew && <StyledFeatureBadge type=\"new\" noTooltip />}\n              {shouldUsePrompt && node.prompt?.length > 0 ? node.prompt : node.label}\n            </Fragment>\n          ),\n        };\n      });\n\n    let options: any = !selectType ? createSelectOptions(enabledNodes) : [];\n\n    if (selectType === 'grouped') {\n      const grouped = enabledNodes.reduce(\n        (acc, curr) => {\n          if (curr.actionType === 'ticket') {\n            acc.ticket.push(curr);\n          } else if (curr.id.includes('event_frequency')) {\n            acc.frequency.push(curr);\n          } else if (\n            curr.id.includes('sentry.rules.conditions') &&\n            !curr.id.includes('event_frequency')\n          ) {\n            acc.change.push(curr);\n          } else if (curr.id.includes('sentry.integrations')) {\n            acc.notifyIntegration.push(curr);\n          } else if (curr.id.includes('notify_event')) {\n            acc.notifyIntegration.push(curr);\n          } else {\n            acc.notify.push(curr);\n          }\n          return acc;\n        },\n        {\n          notify: [] as IssueAlertRuleActionTemplate[],\n          notifyIntegration: [] as IssueAlertRuleActionTemplate[],\n          ticket: [] as IssueAlertRuleActionTemplate[],\n          change: [] as IssueAlertRuleConditionTemplate[],\n          frequency: [] as IssueAlertRuleConditionTemplate[],\n        }\n      );\n\n      options = Object.entries(grouped)\n        .filter(([_, values]) => values.length)\n        .map(([key, values]) => {\n          const label = {\n            notify: t('Send notification to\\u{2026}'),\n            notifyIntegration: t('Notify integration\\u{2026}'),\n            ticket: t('Create new\\u{2026}'),\n            change: t('Issue state change'),\n            frequency: t('Issue frequency'),\n          };\n\n          return {label: label[key], options: createSelectOptions(values)};\n        });\n    }\n\n    return (\n      <Fragment>\n        <RuleNodes>\n          {error}\n          {items.map((item, idx) => (\n            <RuleNode\n              key={idx}\n              index={idx}\n              node={this.getNode(item.id, idx)}\n              onDelete={onDeleteRow}\n              onPropertyChange={onPropertyChange}\n              onReset={onResetRow}\n              data={item}\n              organization={organization}\n              project={project}\n              disabled={disabled}\n            />\n          ))}\n        </RuleNodes>\n        <StyledSelectControl\n          placeholder={placeholder}\n          value={null}\n          onChange={obj => onAddRow(obj ? obj.value : obj)}\n          options={options}\n          disabled={disabled}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default RuleNodeList;\n\nconst StyledSelectControl = styled(SelectControl)`\n  width: 100%;\n`;\n\nconst RuleNodes = styled('div')`\n  display: grid;\n  margin-bottom: ${space(1)};\n  gap: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints.medium}) {\n    grid-auto-flow: row;\n  }\n`;\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin: 0 ${space(1)} 0 0;\n`;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport ConfigStore from 'sentry/stores/configStore';\nimport {Organization, Project} from 'sentry/types';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projectSlug: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  detailedProject?: Project & {\n    hasAlertIntegrationInstalled: boolean;\n  };\n};\n\n/**\n * This component renders a button to Set up an alert integration (just Slack for now)\n * if the project has no alerting integrations setup already.\n */\nexport default class SetupAlertIntegrationButton extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {projectSlug, organization} = this.props;\n    return [\n      [\n        'detailedProject',\n        `/projects/${organization.slug}/${projectSlug}/?expand=hasAlertIntegration`,\n      ],\n    ];\n  }\n\n  renderLoading() {\n    return null;\n  }\n\n  // if there is an error, just show nothing\n  renderError() {\n    return null;\n  }\n\n  renderBody(): React.ReactNode {\n    const {organization} = this.props;\n    const {detailedProject} = this.state;\n    // don't render anything if we don't have the project yet or if an alert integration\n    // is installed\n    if (!detailedProject || detailedProject.hasAlertIntegrationInstalled) {\n      return null;\n    }\n\n    const config = ConfigStore.getConfig();\n    // link to docs to set up Slack for self-hosted folks\n    const referrerQuery = '?referrer=issue-alert-builder';\n    const buttonProps = config.isSelfHosted\n      ? {\n          href: `https://develop.sentry.dev/integrations/slack/${referrerQuery}`,\n        }\n      : {\n          to: `/settings/${organization.slug}/integrations/slack/${referrerQuery}`,\n        };\n\n    // TOOD(Steve): need to use the Tooltip component because adding a title to the button\n    // puts the tooltip in the upper left hand corner of the page instead of the button\n    return (\n      <Tooltip title={t('Send Alerts to Slack. Install the integration now.')}>\n        <Button\n          size=\"small\"\n          icon={<PluginIcon pluginId=\"slack\" size={16} />}\n          {...buttonProps}\n        >\n          {t('Set Up Slack Now')}\n        </Button>\n      </Tooltip>\n    );\n  }\n}\n","import {ChangeEvent, Fragment, ReactNode} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport {components} from 'react-select';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport {Location} from 'history';\nimport cloneDeep from 'lodash/cloneDeep';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {updateOnboardingTask} from 'sentry/actionCreators/onboardingTasks';\nimport Access from 'sentry/components/acl/access';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport FieldHelp from 'sentry/components/forms/field/fieldHelp';\nimport Form from 'sentry/components/forms/form';\nimport FormField from 'sentry/components/forms/formField';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport SelectField from 'sentry/components/forms/selectField';\nimport TeamSelector from 'sentry/components/forms/teamSelector';\nimport IdBadge from 'sentry/components/idBadge';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport LoadingMask from 'sentry/components/loadingMask';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {ALL_ENVIRONMENTS_KEY} from 'sentry/constants';\nimport {IconChevron} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Environment, OnboardingTaskKey, Organization, Project, Team} from 'sentry/types';\nimport {\n  IssueAlertRule,\n  IssueAlertRuleAction,\n  IssueAlertRuleActionTemplate,\n  IssueAlertRuleConditionTemplate,\n  UnsavedIssueAlertRule,\n} from 'sentry/types/alerts';\nimport {metric} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {getDisplayName} from 'sentry/utils/environment';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport recreateRoute from 'sentry/utils/recreateRoute';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport {\n  CHANGE_ALERT_CONDITION_IDS,\n  CHANGE_ALERT_PLACEHOLDERS_LABELS,\n} from 'sentry/views/alerts/utils/constants';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport RuleNodeList from './ruleNodeList';\nimport SetupAlertIntegrationButton from './setupAlertIntegrationButton';\n\nconst FREQUENCY_OPTIONS = [\n  {value: '5', label: t('5 minutes')},\n  {value: '10', label: t('10 minutes')},\n  {value: '30', label: t('30 minutes')},\n  {value: '60', label: t('60 minutes')},\n  {value: '180', label: t('3 hours')},\n  {value: '720', label: t('12 hours')},\n  {value: '1440', label: t('24 hours')},\n  {value: '10080', label: t('1 week')},\n  {value: '43200', label: t('30 days')},\n];\n\nconst ACTION_MATCH_OPTIONS = [\n  {value: 'all', label: t('all')},\n  {value: 'any', label: t('any')},\n  {value: 'none', label: t('none')},\n];\n\nconst ACTION_MATCH_OPTIONS_MIGRATED = [\n  {value: 'all', label: t('all')},\n  {value: 'any', label: t('any')},\n];\n\nconst defaultRule: UnsavedIssueAlertRule = {\n  actionMatch: 'all',\n  filterMatch: 'all',\n  actions: [],\n  conditions: [],\n  filters: [],\n  name: '',\n  frequency: 30,\n  environment: ALL_ENVIRONMENTS_KEY,\n};\n\nconst POLLING_MAX_TIME_LIMIT = 3 * 60000;\n\ntype ConditionOrActionProperty = 'conditions' | 'actions' | 'filters';\n\ntype RuleTaskResponse = {\n  status: 'pending' | 'failed' | 'success';\n  error?: string;\n  rule?: IssueAlertRule;\n};\n\ntype RouteParams = {orgId: string; projectId?: string; ruleId?: string};\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  project: Project;\n  projects: Project[];\n  userTeamIds: string[];\n  loadingProjects?: boolean;\n  onChangeTitle?: (data: string) => void;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = AsyncView['state'] & {\n  configs: {\n    actions: IssueAlertRuleActionTemplate[];\n    conditions: IssueAlertRuleConditionTemplate[];\n    filters: IssueAlertRuleConditionTemplate[];\n  } | null;\n  detailedError: null | {\n    [key: string]: string[];\n  };\n  environments: Environment[] | null;\n  project: Project;\n  uuid: null | string;\n  duplicateTargetRule?: UnsavedIssueAlertRule | IssueAlertRule | null;\n  rule?: UnsavedIssueAlertRule | IssueAlertRule | null;\n};\n\nfunction isSavedAlertRule(rule: State['rule']): rule is IssueAlertRule {\n  return rule?.hasOwnProperty('id') ?? false;\n}\n\nclass IssueRuleEditor extends AsyncView<Props, State> {\n  pollingTimeout: number | undefined = undefined;\n\n  get isDuplicateRule(): boolean {\n    const {location, organization} = this.props;\n    const createFromDuplicate = location?.query.createFromDuplicate === 'true';\n    const hasDuplicateAlertRules = organization.features.includes('duplicate-alert-rule');\n    return (\n      hasDuplicateAlertRules && createFromDuplicate && location?.query.duplicateRuleId\n    );\n  }\n\n  get hasAlertWizardV3(): boolean {\n    return this.props.organization.features.includes('alert-wizard-v3');\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.pollingTimeout);\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (prevState.project.id === this.state.project.id) {\n      return;\n    }\n\n    this.fetchEnvironments();\n  }\n\n  getTitle() {\n    const {organization} = this.props;\n    const {rule, project} = this.state;\n    const ruleName = rule?.name;\n\n    return routeTitleGen(\n      ruleName ? t('Alert %s', ruleName) : '',\n      organization.slug,\n      false,\n      project?.slug\n    );\n  }\n\n  getDefaultState() {\n    const {userTeamIds, project} = this.props;\n    const defaultState = {\n      ...super.getDefaultState(),\n      configs: null,\n      detailedError: null,\n      rule: {...defaultRule},\n      environments: [],\n      uuid: null,\n      project,\n    };\n\n    const projectTeamIds = new Set(project.teams.map(({id}) => id));\n    const userTeamId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n    defaultState.rule.owner = userTeamId && `team:${userTeamId}`;\n\n    return defaultState;\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      organization,\n      location: {query},\n      params: {ruleId, orgId},\n    } = this.props;\n    // project in state isn't initialized when getEndpoints is first called\n    const project = this.state?.project ?? this.props.project;\n    const hasDuplicateAlertRules = organization.features.includes('duplicate-alert-rule');\n\n    const endpoints = [\n      ['environments', `/projects/${orgId}/${project.slug}/environments/`],\n      ['configs', `/projects/${orgId}/${project.slug}/rules/configuration/`],\n    ];\n\n    if (ruleId) {\n      endpoints.push(['rule', `/projects/${orgId}/${project.slug}/rules/${ruleId}/`]);\n    }\n\n    if (\n      hasDuplicateAlertRules &&\n      !ruleId &&\n      query.createFromDuplicate &&\n      query.duplicateRuleId\n    ) {\n      endpoints.push([\n        'duplicateTargetRule',\n        `/projects/${orgId}/${project.slug}/rules/${query.duplicateRuleId}/`,\n      ]);\n    }\n\n    return endpoints as [string, string][];\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey === 'rule' && data.name) {\n      this.props.onChangeTitle?.(data.name);\n    }\n    if (stateKey === 'duplicateTargetRule') {\n      this.setState({\n        rule: {\n          ...omit(data, ['id']),\n          name: data.name + ' copy',\n        } as UnsavedIssueAlertRule,\n      });\n    }\n  }\n\n  onLoadAllEndpointsSuccess() {\n    const {rule} = this.state;\n    if (rule) {\n      ((rule as IssueAlertRule)?.errors || []).map(({detail}) =>\n        addErrorMessage(detail, {append: true})\n      );\n    }\n  }\n  pollHandler = async (quitTime: number) => {\n    if (Date.now() > quitTime) {\n      addErrorMessage(t('Looking for that channel took too long :('));\n      this.setState({loading: false});\n      return;\n    }\n\n    const {organization} = this.props;\n    const {uuid, project} = this.state;\n    const origRule = this.state.rule;\n\n    try {\n      const response: RuleTaskResponse = await this.api.requestPromise(\n        `/projects/${organization.slug}/${project.slug}/rule-task/${uuid}/`\n      );\n\n      const {status, rule, error} = response;\n\n      if (status === 'pending') {\n        window.clearTimeout(this.pollingTimeout);\n\n        this.pollingTimeout = window.setTimeout(() => {\n          this.pollHandler(quitTime);\n        }, 1000);\n        return;\n      }\n\n      if (status === 'failed') {\n        this.setState({\n          detailedError: {actions: [error ? error : t('An error occurred')]},\n          loading: false,\n        });\n        this.handleRuleSaveFailure(t('An error occurred'));\n      }\n      if (rule) {\n        const ruleId = isSavedAlertRule(origRule) ? `${origRule.id}/` : '';\n        const isNew = !ruleId;\n        this.handleRuleSuccess(isNew, rule);\n      }\n    } catch {\n      this.handleRuleSaveFailure(t('An error occurred'));\n      this.setState({loading: false});\n    }\n  };\n\n  fetchEnvironments() {\n    const {\n      params: {orgId},\n    } = this.props;\n    const {project} = this.state;\n\n    this.api\n      .requestPromise(`/projects/${orgId}/${project.slug}/environments/`, {\n        query: {\n          visibility: 'visible',\n        },\n      })\n      .then(response => this.setState({environments: response}))\n      .catch(_err => addErrorMessage(t('Unable to fetch environments')));\n  }\n\n  fetchStatus() {\n    // pollHandler calls itself until it gets either a success\n    // or failed status but we don't want to poll forever so we pass\n    // in a hard stop time of 3 minutes before we bail.\n    const quitTime = Date.now() + POLLING_MAX_TIME_LIMIT;\n    window.clearTimeout(this.pollingTimeout);\n\n    this.pollingTimeout = window.setTimeout(() => {\n      this.pollHandler(quitTime);\n    }, 1000);\n  }\n\n  handleRuleSuccess = (isNew: boolean, rule: IssueAlertRule) => {\n    const {organization, router} = this.props;\n    const {project} = this.state;\n    this.setState({detailedError: null, loading: false, rule});\n\n    // The onboarding task will be completed on the server side when the alert\n    // is created\n    updateOnboardingTask(null, organization, {\n      task: OnboardingTaskKey.ALERT_RULE,\n      status: 'complete',\n    });\n\n    metric.endTransaction({name: 'saveAlertRule'});\n\n    router.push({\n      pathname: `/organizations/${organization.slug}/alerts/rules/${project.slug}/${rule.id}/details/`,\n    });\n    addSuccessMessage(isNew ? t('Created alert rule') : t('Updated alert rule'));\n  };\n\n  handleRuleSaveFailure(msg: ReactNode) {\n    addErrorMessage(msg);\n    metric.endTransaction({name: 'saveAlertRule'});\n  }\n\n  handleSubmit = async () => {\n    const {project, rule} = this.state;\n    const ruleId = isSavedAlertRule(rule) ? `${rule.id}/` : '';\n    const isNew = !ruleId;\n    const {organization} = this.props;\n\n    const endpoint = `/projects/${organization.slug}/${project.slug}/rules/${ruleId}`;\n\n    if (rule && rule.environment === ALL_ENVIRONMENTS_KEY) {\n      delete rule.environment;\n    }\n\n    addLoadingMessage();\n\n    try {\n      const transaction = metric.startTransaction({name: 'saveAlertRule'});\n      transaction.setTag('type', 'issue');\n      transaction.setTag('operation', isNew ? 'create' : 'edit');\n      if (rule) {\n        for (const action of rule.actions) {\n          // Grab the last part of something like 'sentry.mail.actions.NotifyEmailAction'\n          const splitActionId = action.id.split('.');\n          const actionName = splitActionId[splitActionId.length - 1];\n          if (actionName === 'SlackNotifyServiceAction') {\n            transaction.setTag(actionName, true);\n          }\n        }\n        transaction.setData('actions', rule.actions);\n      }\n      const [data, , resp] = await this.api.requestPromise(endpoint, {\n        includeAllArgs: true,\n        method: isNew ? 'POST' : 'PUT',\n        data: rule,\n        query: {\n          duplicateRule: this.isDuplicateRule ? 'true' : 'false',\n          wizardV3: this.hasAlertWizardV3 ? 'true' : 'false',\n        },\n      });\n\n      // if we get a 202 back it means that we have an async task\n      // running to lookup and verify the channel id for Slack.\n      if (resp?.status === 202) {\n        this.setState({detailedError: null, loading: true, uuid: data.uuid});\n        this.fetchStatus();\n        addLoadingMessage(t('Looking through all your channels...'));\n      } else {\n        this.handleRuleSuccess(isNew, data);\n      }\n    } catch (err) {\n      this.setState({\n        detailedError: err.responseJSON || {__all__: 'Unknown error'},\n        loading: false,\n      });\n      this.handleRuleSaveFailure(t('An error occurred'));\n    }\n  };\n\n  handleDeleteRule = async () => {\n    const {project, rule} = this.state;\n    const ruleId = isSavedAlertRule(rule) ? `${rule.id}/` : '';\n    const isNew = !ruleId;\n    const {organization} = this.props;\n\n    if (isNew) {\n      return;\n    }\n\n    const endpoint = `/projects/${organization.slug}/${project.slug}/rules/${ruleId}`;\n\n    addLoadingMessage(t('Deleting...'));\n\n    try {\n      await this.api.requestPromise(endpoint, {\n        method: 'DELETE',\n      });\n\n      addSuccessMessage(t('Deleted alert rule'));\n      browserHistory.replace(recreateRoute('', {...this.props, stepBack: -2}));\n    } catch (err) {\n      this.setState({\n        detailedError: err.responseJSON || {__all__: 'Unknown error'},\n      });\n      addErrorMessage(t('There was a problem deleting the alert'));\n    }\n  };\n\n  handleCancel = () => {\n    const {organization, router} = this.props;\n\n    router.push(`/organizations/${organization.slug}/alerts/rules/`);\n  };\n\n  hasError = (field: string) => {\n    const {detailedError} = this.state;\n\n    if (!detailedError) {\n      return false;\n    }\n\n    return detailedError.hasOwnProperty(field);\n  };\n\n  handleEnvironmentChange = (val: string) => {\n    // If 'All Environments' is selected the value should be null\n    if (val === ALL_ENVIRONMENTS_KEY) {\n      this.handleChange('environment', null);\n    } else {\n      this.handleChange('environment', val);\n    }\n  };\n\n  handleChange = <T extends keyof IssueAlertRule>(prop: T, val: IssueAlertRule[T]) => {\n    this.setState(prevState => {\n      const clonedState = cloneDeep(prevState);\n      set(clonedState, `rule[${prop}]`, val);\n      return {...clonedState, detailedError: omit(prevState.detailedError, prop)};\n    });\n  };\n\n  handlePropertyChange = <T extends keyof IssueAlertRuleAction>(\n    type: ConditionOrActionProperty,\n    idx: number,\n    prop: T,\n    val: IssueAlertRuleAction[T]\n  ) => {\n    this.setState(prevState => {\n      const clonedState = cloneDeep(prevState);\n      set(clonedState, `rule[${type}][${idx}][${prop}]`, val);\n      return clonedState;\n    });\n  };\n\n  getInitialValue = (type: ConditionOrActionProperty, id: string) => {\n    const configuration = this.state.configs?.[type]?.find(c => c.id === id);\n\n    const hasChangeAlerts =\n      configuration?.id &&\n      this.props.organization.features.includes('change-alerts') &&\n      CHANGE_ALERT_CONDITION_IDS.includes(configuration.id);\n\n    return configuration?.formFields\n      ? Object.fromEntries(\n          Object.entries(configuration.formFields)\n            // TODO(ts): Doesn't work if I cast formField as IssueAlertRuleFormField\n            .map(([key, formField]: [string, any]) => [\n              key,\n              hasChangeAlerts && key === 'interval'\n                ? '1h'\n                : formField?.initial ?? formField?.choices?.[0]?.[0],\n            ])\n            .filter(([, initial]) => !!initial)\n        )\n      : {};\n  };\n\n  handleResetRow = <T extends keyof IssueAlertRuleAction>(\n    type: ConditionOrActionProperty,\n    idx: number,\n    prop: T,\n    val: IssueAlertRuleAction[T]\n  ) => {\n    this.setState(prevState => {\n      const clonedState = cloneDeep(prevState);\n\n      // Set initial configuration, but also set\n      const id = (clonedState.rule as IssueAlertRule)[type][idx].id;\n      const newRule = {\n        ...this.getInitialValue(type, id),\n        id,\n        [prop]: val,\n      };\n\n      set(clonedState, `rule[${type}][${idx}]`, newRule);\n      return clonedState;\n    });\n  };\n\n  handleAddRow = (type: ConditionOrActionProperty, id: string) => {\n    this.setState(prevState => {\n      const clonedState = cloneDeep(prevState);\n\n      // Set initial configuration\n      const newRule = {\n        ...this.getInitialValue(type, id),\n        id,\n      };\n      const newTypeList = prevState.rule ? prevState.rule[type] : [];\n\n      set(clonedState, `rule[${type}]`, [...newTypeList, newRule]);\n      return clonedState;\n    });\n\n    const {organization} = this.props;\n    const {project} = this.state;\n    trackAdvancedAnalyticsEvent('edit_alert_rule.add_row', {\n      organization,\n      project_id: project.id,\n      type,\n      name: id,\n    });\n  };\n\n  handleDeleteRow = (type: ConditionOrActionProperty, idx: number) => {\n    this.setState(prevState => {\n      const clonedState = cloneDeep(prevState);\n\n      const newTypeList = prevState.rule ? prevState.rule[type] : [];\n      if (prevState.rule) {\n        newTypeList.splice(idx, 1);\n      }\n\n      set(clonedState, `rule[${type}]`, newTypeList);\n      return clonedState;\n    });\n  };\n\n  handleAddCondition = (id: string) => this.handleAddRow('conditions', id);\n  handleAddAction = (id: string) => this.handleAddRow('actions', id);\n  handleAddFilter = (id: string) => this.handleAddRow('filters', id);\n  handleDeleteCondition = (ruleIndex: number) =>\n    this.handleDeleteRow('conditions', ruleIndex);\n  handleDeleteAction = (ruleIndex: number) => this.handleDeleteRow('actions', ruleIndex);\n  handleDeleteFilter = (ruleIndex: number) => this.handleDeleteRow('filters', ruleIndex);\n  handleChangeConditionProperty = (ruleIndex: number, prop: string, val: string) =>\n    this.handlePropertyChange('conditions', ruleIndex, prop, val);\n  handleChangeActionProperty = (ruleIndex: number, prop: string, val: string) =>\n    this.handlePropertyChange('actions', ruleIndex, prop, val);\n  handleChangeFilterProperty = (ruleIndex: number, prop: string, val: string) =>\n    this.handlePropertyChange('filters', ruleIndex, prop, val);\n  handleResetCondition = (ruleIndex: number, prop: string, value: string) =>\n    this.handleResetRow('conditions', ruleIndex, prop, value);\n  handleResetAction = (ruleIndex: number, prop: string, value: string) =>\n    this.handleResetRow('actions', ruleIndex, prop, value);\n  handleResetFilter = (ruleIndex: number, prop: string, value: string) =>\n    this.handleResetRow('filters', ruleIndex, prop, value);\n\n  handleValidateRuleName = () => {\n    const isRuleNameEmpty = !this.state.rule?.name.trim();\n\n    if (!isRuleNameEmpty) {\n      return;\n    }\n\n    this.setState(prevState => ({\n      detailedError: {\n        ...prevState.detailedError,\n        name: [t('Field Required')],\n      },\n    }));\n  };\n\n  getConditions() {\n    const {organization} = this.props;\n\n    if (!organization.features.includes('change-alerts')) {\n      return this.state.configs?.conditions ?? null;\n    }\n\n    return (\n      this.state.configs?.conditions?.map(condition =>\n        CHANGE_ALERT_CONDITION_IDS.includes(condition.id)\n          ? ({\n              ...condition,\n              label: CHANGE_ALERT_PLACEHOLDERS_LABELS[condition.id],\n            } as IssueAlertRuleConditionTemplate)\n          : condition\n      ) ?? null\n    );\n  }\n\n  getTeamId = () => {\n    const {rule} = this.state;\n    const owner = rule?.owner;\n    // ownership follows the format team:<id>, just grab the id\n    return owner && owner.split(':')[1];\n  };\n\n  handleOwnerChange = ({value}: {value: string}) => {\n    const ownerValue = value && `team:${value}`;\n    this.handleChange('owner', ownerValue);\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderError() {\n    return (\n      <Alert type=\"error\" showIcon>\n        {t(\n          'Unable to access this alert rule -- check to make sure you have the correct permissions'\n        )}\n      </Alert>\n    );\n  }\n\n  renderRuleName(disabled: boolean) {\n    const {rule, detailedError} = this.state;\n    const {name} = rule || {};\n\n    return (\n      <StyledField\n        hasAlertWizardV3={this.hasAlertWizardV3}\n        label={this.hasAlertWizardV3 ? null : t('Alert name')}\n        help={this.hasAlertWizardV3 ? null : t('Add a name for this alert')}\n        error={detailedError?.name?.[0]}\n        disabled={disabled}\n        required\n        stacked\n        flexibleControlStateSize={this.hasAlertWizardV3 ? true : undefined}\n      >\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          data-test-id=\"alert-name\"\n          placeholder={this.hasAlertWizardV3 ? t('Enter Alert Name') : t('My Rule Name')}\n          onChange={(event: ChangeEvent<HTMLInputElement>) =>\n            this.handleChange('name', event.target.value)\n          }\n          onBlur={this.handleValidateRuleName}\n          disabled={disabled}\n        />\n      </StyledField>\n    );\n  }\n\n  renderTeamSelect(disabled: boolean) {\n    const {rule, project} = this.state;\n    const ownerId = rule?.owner?.split(':')[1];\n\n    return (\n      <StyledField\n        hasAlertWizardV3={this.hasAlertWizardV3}\n        extraMargin\n        label={this.hasAlertWizardV3 ? null : t('Team')}\n        help={this.hasAlertWizardV3 ? null : t('The team that can edit this alert.')}\n        disabled={disabled}\n        flexibleControlStateSize={this.hasAlertWizardV3 ? true : undefined}\n      >\n        <TeamSelector\n          value={this.getTeamId()}\n          project={project}\n          onChange={this.handleOwnerChange}\n          teamFilter={(team: Team) => team.isMember || team.id === ownerId}\n          useId\n          includeUnassigned\n          disabled={disabled}\n        />\n      </StyledField>\n    );\n  }\n\n  renderIdBadge(project: Project) {\n    return (\n      <IdBadge\n        project={project}\n        avatarProps={{consistentWidth: true}}\n        avatarSize={18}\n        disableLink\n        hideName\n      />\n    );\n  }\n\n  renderProjectSelect(disabled: boolean) {\n    const {project: _selectedProject, projects, organization} = this.props;\n    const hasOpenMembership = organization.features.includes('open-membership');\n    const myProjects = projects.filter(project => project.hasAccess && project.isMember);\n    const allProjects = projects.filter(\n      project => project.hasAccess && !project.isMember\n    );\n\n    const myProjectOptions = myProjects.map(myProject => ({\n      value: myProject.id,\n      label: myProject.slug,\n      leadingItems: this.renderIdBadge(myProject),\n    }));\n\n    const openMembershipProjects = [\n      {\n        label: t('My Projects'),\n        options: myProjectOptions,\n      },\n      {\n        label: t('All Projects'),\n        options: allProjects.map(allProject => ({\n          value: allProject.id,\n          label: allProject.slug,\n          leadingItems: this.renderIdBadge(allProject),\n        })),\n      },\n    ];\n\n    const projectOptions =\n      hasOpenMembership || isActiveSuperuser()\n        ? openMembershipProjects\n        : myProjectOptions;\n\n    return (\n      <FormField\n        name=\"projectId\"\n        inline={false}\n        style={{padding: 0}}\n        flexibleControlStateSize\n      >\n        {({onChange, onBlur, model}) => {\n          const selectedProject =\n            projects.find(({id}) => id === model.getValue('projectId')) ||\n            _selectedProject;\n\n          return (\n            <SelectControl\n              disabled={disabled}\n              value={selectedProject.id}\n              styles={{\n                container: (provided: {[x: string]: string | number | boolean}) => ({\n                  ...provided,\n                  marginBottom: `${space(1)}`,\n                }),\n              }}\n              options={projectOptions}\n              onChange={({value}: {value: Project['id']}) => {\n                // if the current owner/team isn't part of project selected, update to the first available team\n                const nextSelectedProject =\n                  projects.find(({id}) => id === value) ?? selectedProject;\n                const ownerId: String | undefined = model\n                  .getValue('owner')\n                  ?.split(':')[1];\n                if (\n                  ownerId &&\n                  nextSelectedProject.teams.find(({id}) => id === ownerId) ===\n                    undefined &&\n                  nextSelectedProject.teams.length\n                ) {\n                  this.handleOwnerChange({value: nextSelectedProject.teams[0].id});\n                }\n\n                this.setState({project: nextSelectedProject});\n\n                onChange(value, {});\n                onBlur(value, {});\n              }}\n              components={{\n                SingleValue: containerProps => (\n                  <components.ValueContainer {...containerProps}>\n                    <IdBadge\n                      project={selectedProject}\n                      avatarProps={{consistentWidth: true}}\n                      avatarSize={18}\n                      disableLink\n                    />\n                  </components.ValueContainer>\n                ),\n              }}\n            />\n          );\n        }}\n      </FormField>\n    );\n  }\n\n  renderActionInterval(disabled: boolean) {\n    const {rule} = this.state;\n    const {frequency} = rule || {};\n\n    return (\n      <StyledSelectField\n        hasAlertWizardV3={this.hasAlertWizardV3}\n        label={this.hasAlertWizardV3 ? null : t('Action Interval')}\n        help={\n          this.hasAlertWizardV3\n            ? null\n            : t('Perform these actions once this often for an issue')\n        }\n        clearable={false}\n        name=\"frequency\"\n        className={this.hasError('frequency') ? ' error' : ''}\n        value={frequency}\n        required\n        options={FREQUENCY_OPTIONS}\n        onChange={val => this.handleChange('frequency', val)}\n        disabled={disabled}\n        flexibleControlStateSize={this.hasAlertWizardV3 ? true : undefined}\n      />\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const {environments, project, rule, detailedError, loading} = this.state;\n    const {actions, filters, conditions, frequency} = rule || {};\n\n    const environmentOptions = [\n      {\n        value: ALL_ENVIRONMENTS_KEY,\n        label: t('All Environments'),\n      },\n      ...(environments?.map(env => ({value: env.name, label: getDisplayName(env)})) ??\n        []),\n    ];\n\n    const environment =\n      !rule || !rule.environment ? ALL_ENVIRONMENTS_KEY : rule.environment;\n\n    // Note `key` on `<Form>` below is so that on initial load, we show\n    // the form with a loading mask on top of it, but force a re-render by using\n    // a different key when we have fetched the rule so that form inputs are filled in\n    return (\n      <Access access={['alerts:write']}>\n        {({hasAccess}) => {\n          // check if superuser or if user is on the alert's team\n          const disabled = loading || !(isActiveSuperuser() || hasAccess);\n\n          return (\n            <StyledForm\n              key={isSavedAlertRule(rule) ? rule.id : undefined}\n              onCancel={this.handleCancel}\n              onSubmit={this.handleSubmit}\n              initialData={{\n                ...rule,\n                environment,\n                frequency: `${frequency}`,\n                projectId: project.id,\n              }}\n              submitDisabled={disabled}\n              submitLabel={t('Save Rule')}\n              extraButton={\n                isSavedAlertRule(rule) ? (\n                  <Confirm\n                    disabled={disabled}\n                    priority=\"danger\"\n                    confirmText={t('Delete Rule')}\n                    onConfirm={this.handleDeleteRule}\n                    header={t('Delete Rule')}\n                    message={t('Are you sure you want to delete this rule?')}\n                  >\n                    <Button priority=\"danger\" type=\"button\">\n                      {t('Delete Rule')}\n                    </Button>\n                  </Confirm>\n                ) : null\n              }\n            >\n              <List symbol=\"colored-numeric\">\n                {loading && <SemiTransparentLoadingMask data-test-id=\"loading-mask\" />}\n                <StyledListItem>{t('Add alert settings')}</StyledListItem>\n                {this.hasAlertWizardV3 ? (\n                  <SettingsContainer>\n                    <StyledSelectField\n                      hasAlertWizardV3={this.hasAlertWizardV3}\n                      className={classNames({\n                        error: this.hasError('environment'),\n                      })}\n                      placeholder={t('Select an Environment')}\n                      clearable={false}\n                      name=\"environment\"\n                      options={environmentOptions}\n                      onChange={val => this.handleEnvironmentChange(val)}\n                      disabled={disabled}\n                      flexibleControlStateSize\n                    />\n                    {this.renderProjectSelect(disabled)}\n                  </SettingsContainer>\n                ) : (\n                  <Panel>\n                    <PanelBody>\n                      <SelectField\n                        className={classNames({\n                          error: this.hasError('environment'),\n                        })}\n                        label={t('Environment')}\n                        help={t('Choose an environment for these conditions to apply to')}\n                        placeholder={t('Select an Environment')}\n                        clearable={false}\n                        name=\"environment\"\n                        options={environmentOptions}\n                        onChange={val => this.handleEnvironmentChange(val)}\n                        disabled={disabled}\n                      />\n\n                      {this.renderTeamSelect(disabled)}\n                      {this.renderRuleName(disabled)}\n                    </PanelBody>\n                  </Panel>\n                )}\n                <SetConditionsListItem>\n                  {t('Set conditions')}\n                  <SetupAlertIntegrationButton\n                    projectSlug={project.slug}\n                    organization={organization}\n                  />\n                </SetConditionsListItem>\n                <ConditionsPanel>\n                  <PanelBody>\n                    <Step>\n                      <StepConnector />\n\n                      <StepContainer>\n                        <ChevronContainer>\n                          <IconChevron\n                            color=\"gray200\"\n                            isCircled\n                            direction=\"right\"\n                            size=\"sm\"\n                          />\n                        </ChevronContainer>\n\n                        <Feature features={['projects:alert-filters']} project={project}>\n                          {({hasFeature}) => (\n                            <StepContent>\n                              <StepLead>\n                                {tct(\n                                  '[when:When] an event is captured by Sentry and [selector] of the following happens',\n                                  {\n                                    when: <Badge />,\n                                    selector: (\n                                      <EmbeddedWrapper>\n                                        <EmbeddedSelectField\n                                          className={classNames({\n                                            error: this.hasError('actionMatch'),\n                                          })}\n                                          inline={false}\n                                          styles={{\n                                            control: provided => ({\n                                              ...provided,\n                                              minHeight: '20px',\n                                              height: '20px',\n                                            }),\n                                          }}\n                                          isSearchable={false}\n                                          isClearable={false}\n                                          name=\"actionMatch\"\n                                          required\n                                          flexibleControlStateSize\n                                          options={\n                                            hasFeature\n                                              ? ACTION_MATCH_OPTIONS_MIGRATED\n                                              : ACTION_MATCH_OPTIONS\n                                          }\n                                          onChange={val =>\n                                            this.handleChange('actionMatch', val)\n                                          }\n                                          disabled={disabled}\n                                        />\n                                      </EmbeddedWrapper>\n                                    ),\n                                  }\n                                )}\n                              </StepLead>\n                              <RuleNodeList\n                                nodes={this.getConditions()}\n                                items={conditions ?? []}\n                                selectType=\"grouped\"\n                                placeholder={\n                                  hasFeature\n                                    ? t('Add optional trigger...')\n                                    : t('Add optional condition...')\n                                }\n                                onPropertyChange={this.handleChangeConditionProperty}\n                                onAddRow={this.handleAddCondition}\n                                onResetRow={this.handleResetCondition}\n                                onDeleteRow={this.handleDeleteCondition}\n                                organization={organization}\n                                project={project}\n                                disabled={disabled}\n                                error={\n                                  this.hasError('conditions') && (\n                                    <StyledAlert type=\"error\">\n                                      {detailedError?.conditions[0]}\n                                    </StyledAlert>\n                                  )\n                                }\n                              />\n                            </StepContent>\n                          )}\n                        </Feature>\n                      </StepContainer>\n                    </Step>\n\n                    <Feature\n                      features={['organizations:alert-filters', 'projects:alert-filters']}\n                      organization={organization}\n                      project={project}\n                      requireAll={false}\n                    >\n                      <Step>\n                        <StepConnector />\n\n                        <StepContainer>\n                          <ChevronContainer>\n                            <IconChevron\n                              color=\"gray200\"\n                              isCircled\n                              direction=\"right\"\n                              size=\"sm\"\n                            />\n                          </ChevronContainer>\n\n                          <StepContent>\n                            <StepLead>\n                              {tct('[if:If] [selector] of these filters match', {\n                                if: <Badge />,\n                                selector: (\n                                  <EmbeddedWrapper>\n                                    <EmbeddedSelectField\n                                      className={classNames({\n                                        error: this.hasError('filterMatch'),\n                                      })}\n                                      inline={false}\n                                      styles={{\n                                        control: provided => ({\n                                          ...provided,\n                                          minHeight: '20px',\n                                          height: '20px',\n                                        }),\n                                      }}\n                                      isSearchable={false}\n                                      isClearable={false}\n                                      name=\"filterMatch\"\n                                      required\n                                      flexibleControlStateSize\n                                      options={ACTION_MATCH_OPTIONS}\n                                      onChange={val =>\n                                        this.handleChange('filterMatch', val)\n                                      }\n                                      disabled={disabled}\n                                    />\n                                  </EmbeddedWrapper>\n                                ),\n                              })}\n                            </StepLead>\n                            <RuleNodeList\n                              nodes={this.state.configs?.filters ?? null}\n                              items={filters ?? []}\n                              placeholder={t('Add optional filter...')}\n                              onPropertyChange={this.handleChangeFilterProperty}\n                              onAddRow={this.handleAddFilter}\n                              onResetRow={this.handleResetFilter}\n                              onDeleteRow={this.handleDeleteFilter}\n                              organization={organization}\n                              project={project}\n                              disabled={disabled}\n                              error={\n                                this.hasError('filters') && (\n                                  <StyledAlert type=\"error\">\n                                    {detailedError?.filters[0]}\n                                  </StyledAlert>\n                                )\n                              }\n                            />\n                          </StepContent>\n                        </StepContainer>\n                      </Step>\n                    </Feature>\n\n                    <Step>\n                      <StepContainer>\n                        <ChevronContainer>\n                          <IconChevron\n                            isCircled\n                            color=\"gray200\"\n                            direction=\"right\"\n                            size=\"sm\"\n                          />\n                        </ChevronContainer>\n                        <StepContent>\n                          <StepLead>\n                            {tct('[then:Then] perform these actions', {\n                              then: <Badge />,\n                            })}\n                          </StepLead>\n\n                          <RuleNodeList\n                            nodes={this.state.configs?.actions ?? null}\n                            selectType=\"grouped\"\n                            items={actions ?? []}\n                            placeholder={t('Add action...')}\n                            onPropertyChange={this.handleChangeActionProperty}\n                            onAddRow={this.handleAddAction}\n                            onResetRow={this.handleResetAction}\n                            onDeleteRow={this.handleDeleteAction}\n                            organization={organization}\n                            project={project}\n                            disabled={disabled}\n                            error={\n                              this.hasError('actions') && (\n                                <StyledAlert type=\"error\">\n                                  {detailedError?.actions[0]}\n                                </StyledAlert>\n                              )\n                            }\n                          />\n                        </StepContent>\n                      </StepContainer>\n                    </Step>\n                  </PanelBody>\n                </ConditionsPanel>\n                <StyledListItem>\n                  {t('Set action interval')}\n                  <StyledFieldHelp>\n                    {t('Perform the actions above once this often for an issue')}\n                  </StyledFieldHelp>\n                </StyledListItem>\n                {this.hasAlertWizardV3 ? (\n                  this.renderActionInterval(disabled)\n                ) : (\n                  <Panel>\n                    <PanelBody>{this.renderActionInterval(disabled)}</PanelBody>\n                  </Panel>\n                )}\n                {this.hasAlertWizardV3 && (\n                  <Fragment>\n                    <StyledListItem>{t('Establish ownership')}</StyledListItem>\n                    {this.renderRuleName(disabled)}\n                    {this.renderTeamSelect(disabled)}\n                  </Fragment>\n                )}\n              </List>\n            </StyledForm>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nexport default withOrganization(withProjects(IssueRuleEditor));\n\n// TODO(ts): Understand why styled is not correctly inheriting props here\nconst StyledForm = styled(Form)<Form['props']>`\n  position: relative;\n`;\n\nconst ConditionsPanel = styled(Panel)`\n  padding-top: ${space(0.5)};\n  padding-bottom: ${space(2)};\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin-bottom: 0;\n`;\n\nconst StyledListItem = styled(ListItem)`\n  margin: ${space(2)} 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst StyledFieldHelp = styled(FieldHelp)`\n  margin-top: 0;\n`;\n\nconst SetConditionsListItem = styled(StyledListItem)`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Step = styled('div')`\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  margin: ${space(4)} ${space(4)} ${space(3)} ${space(1)};\n`;\n\nconst StepContainer = styled('div')`\n  position: relative;\n  display: flex;\n  align-items: flex-start;\n  flex-grow: 1;\n`;\n\nconst StepContent = styled('div')`\n  flex-grow: 1;\n`;\n\nconst StepConnector = styled('div')`\n  position: absolute;\n  height: 100%;\n  top: 28px;\n  left: 19px;\n  border-right: 1px ${p => p.theme.gray200} dashed;\n`;\n\nconst StepLead = styled('div')`\n  margin-bottom: ${space(0.5)};\n`;\n\nconst ChevronContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(0.5)} ${space(1.5)};\n`;\n\nconst Badge = styled('span')`\n  display: inline-block;\n  min-width: 56px;\n  background-color: ${p => p.theme.purple300};\n  padding: 0 ${space(0.75)};\n  border-radius: ${p => p.theme.borderRadius};\n  color: ${p => p.theme.white};\n  text-transform: uppercase;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeMedium};\n  font-weight: 600;\n  line-height: 1.5;\n`;\n\nconst EmbeddedWrapper = styled('div')`\n  display: inline-block;\n  margin: 0 ${space(0.5)};\n  width: 80px;\n`;\n\nconst EmbeddedSelectField = styled(SelectField)`\n  padding: 0;\n  font-weight: normal;\n  text-transform: none;\n`;\n\nconst SemiTransparentLoadingMask = styled(LoadingMask)`\n  opacity: 0.6;\n  z-index: 1; /* Needed so that it sits above form elements */\n`;\n\nconst SettingsContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: ${space(1)};\n`;\n\nconst StyledField = styled(Field)<{extraMargin?: boolean; hasAlertWizardV3?: boolean}>`\n  :last-child {\n    padding-bottom: ${space(2)};\n  }\n\n  ${p =>\n    p.hasAlertWizardV3 &&\n    `\n    border-bottom: none;\n    padding: 0;\n\n    & > div {\n      padding: 0;\n      width: 100%;\n    }\n\n    margin-bottom: ${p.extraMargin ? '60px' : space(1)};\n  `}\n`;\n\nconst StyledSelectField = styled(SelectField)<{hasAlertWizardV3?: boolean}>`\n  ${p =>\n    p.hasAlertWizardV3 &&\n    `\n    border-bottom: none;\n    padding: 0;\n\n    & > div {\n      padding: 0;\n      width: 100%;\n    }\n\n    margin-bottom: ${space(1)};\n  `}\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {closeModal, ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport SentryAppExternalForm, {\n  SchemaFormConfig,\n} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\ntype Props = ModalRenderProps & {\n  appName: string;\n  config: SchemaFormConfig;\n  onSubmitSuccess: React.ComponentProps<typeof SentryAppExternalForm>['onSubmitSuccess'];\n  resetValues: {[key: string]: any};\n  sentryAppInstallationUuid: string;\n};\n\nconst SentryAppRuleModal = ({\n  Header,\n  Body,\n  sentryAppInstallationUuid,\n  appName,\n  config,\n  resetValues,\n  onSubmitSuccess,\n}: Props) => (\n  <Fragment>\n    <Header closeButton>\n      <div>{tct('[name] Settings', {name: appName})}</div>\n      {config.description && <Description>{config.description}</Description>}\n    </Header>\n    <Body>\n      <SentryAppExternalForm\n        sentryAppInstallationUuid={sentryAppInstallationUuid}\n        appName={appName}\n        config={resetValues?.formFields || config}\n        element=\"alert-rule-action\"\n        action=\"create\"\n        onSubmitSuccess={(...params) => {\n          onSubmitSuccess(...params);\n          closeModal();\n        }}\n        resetValues={{settings: resetValues?.settings}}\n      />\n    </Body>\n  </Fragment>\n);\n\nconst Description = styled('div')`\n  padding-top: ${space(0)};\n  color: ${p => p.theme.subText};\n`;\n\nexport default SentryAppRuleModal;\n","import {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AggregationKey, LooseFieldKey} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  TimeWindow,\n  Trigger,\n  UnsavedMetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n  isSessionAggregate,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nexport const DEFAULT_COUNT_TIME_WINDOW = 1; // 1min\nexport const DEFAULT_CHANGE_TIME_WINDOW = 60; // 1h\nexport const DEFAULT_CHANGE_COMP_DELTA = 10080; // 1w\n\nexport const DEFAULT_AGGREGATE = 'count()';\nexport const DEFAULT_TRANSACTION_AGGREGATE = 'p95(transaction.duration)';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: 'event.type:[error, default]',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\nexport type OptionConfig = {\n  aggregations: AggregationKey[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: ['count', 'count_unique'],\n  fields: ['user'],\n};\n\nconst commonAggregations: AggregationKey[] = [\n  'avg',\n  'percentile',\n  'p50',\n  'p75',\n  'p95',\n  'p99',\n  'p100',\n];\n\nconst allAggregations: AggregationKey[] = [\n  ...commonAggregations,\n  'failure_rate',\n  'apdex',\n  'count',\n];\n\nexport const DuplicateMetricFields: string[] = [\n  'dataset',\n  'eventTypes',\n  'aggregate',\n  'query',\n  'timeWindow',\n  'thresholdPeriod',\n  'projects',\n  'environment',\n  'resolveThreshold',\n  'thresholdType',\n  'owner',\n  'name',\n  'projectId',\n  'comparisonDelta',\n];\n\nexport const DuplicateTriggerFields: string[] = ['alertThreshold', 'label'];\n\nexport const DuplicateActionFields: string[] = [\n  'type',\n  'targetType',\n  'targetIdentifier',\n  'inputChannelId',\n  'options',\n];\n\nexport const COMPARISON_DELTA_OPTIONS = [\n  {value: 5, label: t('same time 5 minutes ago')}, // 5 minutes\n  {value: 15, label: t('same time 15 minutes ago')}, // 15 minutes\n  {value: 60, label: t('same time one hour ago')}, // one hour\n  {value: 1440, label: t('same time one day ago')}, // one day\n  {value: 10080, label: t('same time one week ago')}, // one week\n  {value: 43200, label: t('same time one month ago')}, // 30 days\n];\n\nexport function getWizardAlertFieldConfig(\n  alertType: AlertType,\n  dataset: Dataset\n): OptionConfig {\n  if (alertType === 'custom' && dataset === Dataset.ERRORS) {\n    return errorFieldConfig;\n  }\n  // If user selected apdex we must include that in the OptionConfig as it has a user specified column\n  const aggregations =\n    alertType === 'apdex' || alertType === 'custom'\n      ? allAggregations\n      : commonAggregations;\n  return {\n    aggregations,\n    fields: ['transaction.duration'],\n    measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n  };\n}\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: allAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: AlertRuleTriggerType): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(\n  defaultRuleOptions: Partial<UnsavedMetricRule> = {}\n): UnsavedMetricRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 60,\n    thresholdPeriod: 1,\n    triggers: [\n      createDefaultTrigger(AlertRuleTriggerType.CRITICAL),\n      createDefaultTrigger(AlertRuleTriggerType.WARNING),\n    ],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n    ...defaultRuleOptions,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedMetricRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n\n  let aggregate = eventView.getYAxis();\n  if (\n    datasetAndEventtypes.dataset === 'transactions' &&\n    /^p\\d{2,3}\\(\\)/.test(eventView.getYAxis())\n  ) {\n    // p95() -> p95(transaction.duration)\n    aggregate = eventView.getYAxis().slice(0, 3) + '(transaction.duration)';\n  }\n\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate,\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n\nexport function createRuleFromWizardTemplate(\n  wizardTemplate: WizardRuleTemplate\n): UnsavedMetricRule {\n  const {eventTypes, aggregate, dataset} = wizardTemplate;\n  const defaultRuleOptions: Partial<UnsavedMetricRule> = {};\n\n  if (isSessionAggregate(aggregate)) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n    defaultRuleOptions.timeWindow = TimeWindow.ONE_HOUR;\n  }\n\n  if (aggregate.includes('apdex')) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n  }\n\n  return {\n    ...createDefaultRule(defaultRuleOptions),\n    eventTypes: [eventTypes],\n    aggregate,\n    dataset,\n  };\n}\n\nexport function getThresholdUnits(\n  aggregate: string,\n  comparisonType: AlertRuleComparisonType\n): string {\n  // cls is a number not a measurement of time\n  if (\n    isSessionAggregate(aggregate) ||\n    comparisonType === AlertRuleComparisonType.CHANGE\n  ) {\n    return '%';\n  }\n\n  if (aggregate.includes('measurements.cls')) {\n    return '';\n  }\n\n  if (aggregate.includes('duration') || aggregate.includes('measurements')) {\n    return 'ms';\n  }\n\n  return '';\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport FormField from 'sentry/components/forms/formField';\nimport TeamSelector from 'sentry/components/forms/teamSelector';\nimport TextField from 'sentry/components/forms/textField';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Project, Team} from 'sentry/types';\n\ntype Props = {\n  disabled: boolean;\n  hasAlertWizardV3: boolean;\n  project: Project;\n};\n\nexport default function RuleNameOwnerForm({disabled, project, hasAlertWizardV3}: Props) {\n  const renderRuleName = () => (\n    <StyledTextField\n      data-test-id=\"alert-name\"\n      hasAlertWizardV3={hasAlertWizardV3}\n      disabled={disabled}\n      name=\"name\"\n      label={hasAlertWizardV3 ? null : t('Rule Name')}\n      help={hasAlertWizardV3 ? null : t('Add a name so it’s easy to find later.')}\n      placeholder={\n        hasAlertWizardV3 ? t('Enter Alert Name') : t('Something really bad happened')\n      }\n      required\n      flexibleControlStateSize\n    />\n  );\n\n  const renderTeamSelect = () => (\n    <StyledFormField\n      hasAlertWizardV3={hasAlertWizardV3}\n      extraMargin\n      name=\"owner\"\n      label={hasAlertWizardV3 ? null : t('Team')}\n      help={hasAlertWizardV3 ? null : t('The team that can edit this alert.')}\n      disabled={disabled}\n      flexibleControlStateSize\n    >\n      {({model}) => {\n        const owner = model.getValue('owner');\n        const ownerId = owner && owner.split(':')[1];\n        return (\n          <TeamSelector\n            value={ownerId}\n            project={project}\n            onChange={({value}) => model.setValue('owner', value && `team:${value}`)}\n            teamFilter={(team: Team) => team.isMember || team.id === ownerId}\n            useId\n            includeUnassigned\n            disabled={disabled}\n          />\n        );\n      }}\n    </StyledFormField>\n  );\n\n  return hasAlertWizardV3 ? (\n    <Fragment>\n      <StyledListItem>{t('Establish ownership')}</StyledListItem>\n      {renderRuleName()}\n      {renderTeamSelect()}\n    </Fragment>\n  ) : (\n    <Fragment>\n      <StyledListItem>{t('Add a rule name and team')}</StyledListItem>\n      <Panel>\n        <PanelBody>\n          {renderRuleName()}\n          {renderTeamSelect()}\n        </PanelBody>\n      </Panel>\n    </Fragment>\n  );\n}\n\nconst StyledListItem = styled(ListItem)`\n  margin: ${space(2)} 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst StyledTextField = styled(TextField)<{hasAlertWizardV3: boolean}>`\n  ${p =>\n    p.hasAlertWizardV3 &&\n    `\n    border-bottom: none;\n    padding: 0;\n\n    & > div {\n      padding: 0;\n      width: 100%;\n    }\n\n    margin-bottom: ${space(1)};\n  `}\n`;\n\nconst StyledFormField = styled(FormField)<{\n  hasAlertWizardV3: boolean;\n  extraMargin?: boolean;\n}>`\n  ${p =>\n    p.hasAlertWizardV3 &&\n    `\n    padding: 0;\n\n    & > div {\n      padding: 0;\n      width: 100%;\n    }\n\n    margin-bottom: ${p.extraMargin ? '60px' : space(1)};\n  `}\n`;\n","import styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport ListItem from 'sentry/components/list/listItem';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {COMPARISON_DELTA_OPTIONS} from 'sentry/views/alerts/rules/metric/constants';\n\nimport {isCrashFreeAlert} from './utils/isCrashFreeAlert';\nimport {AlertRuleComparisonType, Dataset} from './types';\n\ntype Props = {\n  comparisonType: AlertRuleComparisonType;\n  dataset: Dataset;\n  disabled: boolean;\n  hasAlertWizardV3: boolean;\n  onComparisonDeltaChange: (value: number) => void;\n  onComparisonTypeChange: (value: AlertRuleComparisonType) => void;\n  organization: Organization;\n  comparisonDelta?: number;\n};\n\nconst ThresholdTypeForm = ({\n  organization,\n  dataset,\n  disabled,\n  comparisonType,\n  onComparisonDeltaChange,\n  onComparisonTypeChange,\n  hasAlertWizardV3,\n  comparisonDelta,\n}: Props) =>\n  isCrashFreeAlert(dataset) ? null : (\n    <Feature features={['organizations:change-alerts']} organization={organization}>\n      {!hasAlertWizardV3 && <StyledListItem>{t('Select threshold type')}</StyledListItem>}\n      <FormRow hasAlertWizardV3={hasAlertWizardV3}>\n        <StyledRadioGroup\n          hasAlertWizardV3={hasAlertWizardV3}\n          disabled={disabled}\n          choices={[\n            [\n              AlertRuleComparisonType.COUNT,\n              hasAlertWizardV3 ? 'Static: above or below {x}' : 'Count',\n            ],\n            [\n              AlertRuleComparisonType.CHANGE,\n              hasAlertWizardV3 ? (\n                comparisonType === AlertRuleComparisonType.COUNT ? (\n                  t('Percent Change: {x%} higher or lower compared to previous period')\n                ) : (\n                  // Prevent default to avoid dropdown menu closing on click\n                  <ComparisonContainer onClick={e => e.preventDefault()}>\n                    {t('Percent Change: {x%} higher or lower compared to')}\n                    <SelectControl\n                      name=\"comparisonDelta\"\n                      styles={{\n                        container: (provided: {\n                          [x: string]: string | number | boolean;\n                        }) => ({\n                          ...provided,\n                          marginLeft: space(1),\n                        }),\n                        control: (provided: {\n                          [x: string]: string | number | boolean;\n                        }) => ({\n                          ...provided,\n                          minHeight: 30,\n                          minWidth: 500,\n                          maxWidth: 1000,\n                        }),\n                        valueContainer: (provided: {\n                          [x: string]: string | number | boolean;\n                        }) => ({\n                          ...provided,\n                          padding: 0,\n                        }),\n                        singleValue: (provided: {\n                          [x: string]: string | number | boolean;\n                        }) => ({\n                          ...provided,\n                        }),\n                      }}\n                      value={comparisonDelta}\n                      onChange={({value}) => onComparisonDeltaChange(value)}\n                      options={COMPARISON_DELTA_OPTIONS}\n                      required={comparisonType === AlertRuleComparisonType.CHANGE}\n                    />\n                  </ComparisonContainer>\n                )\n              ) : (\n                t('Percent Change')\n              ),\n            ],\n          ]}\n          value={comparisonType}\n          label={t('Threshold Type')}\n          onChange={value => onComparisonTypeChange(value as AlertRuleComparisonType)}\n        />\n      </FormRow>\n    </Feature>\n  );\n\nconst StyledListItem = styled(ListItem)`\n  margin-bottom: ${space(1)};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  line-height: 1.3;\n`;\n\nconst FormRow = styled('div')<{hasAlertWizardV3: boolean}>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  margin-bottom: ${p => (p.hasAlertWizardV3 ? space(2) : space(4))};\n`;\n\nconst ComparisonContainer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledRadioGroup = styled(RadioGroup)<{hasAlertWizardV3: boolean}>`\n  flex: 1;\n\n  ${p => p.hasAlertWizardV3 && 'gap: 0;'}\n  & > label {\n    ${p => p.hasAlertWizardV3 && 'height: 33px;'}\n  }\n`;\n\nexport default ThresholdTypeForm;\n","import Input from 'sentry/components/forms/controls/input';\nimport {t} from 'sentry/locale';\nimport {Action, ActionType, TargetType} from 'sentry/views/alerts/rules/metric/types';\n\ntype Props = {\n  action: Action;\n  disabled: boolean;\n  onChange: (value: string) => void;\n};\n\nfunction ActionSpecificTargetSelector({action, disabled, onChange}: Props) {\n  const handleChangeSpecificTargetIdentifier = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    onChange(e.target.value);\n  };\n\n  if (action.targetType !== TargetType.SPECIFIC || action.type !== ActionType.SLACK) {\n    return null;\n  }\n  return (\n    <Input\n      type=\"text\"\n      autoComplete=\"off\"\n      disabled={disabled}\n      key=\"inputChannelId\"\n      value={action.inputChannelId || ''}\n      onChange={handleChangeSpecificTargetIdentifier}\n      placeholder={t('optional: channel ID or user ID')}\n    />\n  );\n}\n\nexport default ActionSpecificTargetSelector;\n","import Input from 'sentry/components/forms/controls/input';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport TeamSelector from 'sentry/components/forms/teamSelector';\nimport SelectMembers from 'sentry/components/selectMembers';\nimport {Organization, Project, SelectValue} from 'sentry/types';\nimport {\n  Action,\n  ActionType,\n  MetricActionTemplate,\n  TargetType,\n} from 'sentry/views/alerts/rules/metric/types';\n\nconst getPlaceholderForType = (type: ActionType) => {\n  switch (type) {\n    case ActionType.SLACK:\n      return '@username or #channel';\n    case ActionType.MSTEAMS:\n      // no prefixes for msteams\n      return 'username or channel';\n    case ActionType.PAGERDUTY:\n      return 'service';\n    default:\n      throw Error('Not implemented');\n  }\n};\n\ntype Props = {\n  action: Action;\n  disabled: boolean;\n  loading: boolean;\n  onChange: (value: string) => void;\n  organization: Organization;\n  availableAction?: MetricActionTemplate;\n  project?: Project;\n};\n\nexport default function ActionTargetSelector(props: Props) {\n  const {action, availableAction, disabled, loading, onChange, organization, project} =\n    props;\n\n  const handleChangeTargetIdentifier = (value: SelectValue<string>) => {\n    onChange(value.value);\n  };\n\n  const handleChangeSpecificTargetIdentifier = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    onChange(e.target.value);\n  };\n\n  switch (action.targetType) {\n    case TargetType.TEAM:\n    case TargetType.USER:\n      const isTeam = action.targetType === TargetType.TEAM;\n\n      return isTeam ? (\n        <TeamSelector\n          disabled={disabled}\n          key=\"team\"\n          project={project}\n          value={action.targetIdentifier}\n          onChange={handleChangeTargetIdentifier}\n          useId\n        />\n      ) : (\n        <SelectMembers\n          disabled={disabled}\n          key=\"member\"\n          project={project}\n          organization={organization}\n          value={action.targetIdentifier}\n          onChange={handleChangeTargetIdentifier}\n        />\n      );\n\n    case TargetType.SPECIFIC:\n      return availableAction?.options ? (\n        <SelectControl\n          isDisabled={disabled || loading}\n          value={action.targetIdentifier}\n          options={availableAction.options}\n          onChange={handleChangeTargetIdentifier}\n        />\n      ) : (\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          disabled={disabled}\n          key={action.type}\n          value={action.targetIdentifier || ''}\n          onChange={handleChangeSpecificTargetIdentifier}\n          placeholder={getPlaceholderForType(action.type)}\n        />\n      );\n\n    default:\n      return null;\n  }\n}\n","import Button, {ButtonProps} from 'sentry/components/button';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\ninterface DeleteActionButtonProps extends Omit<ButtonProps, 'onClick'> {\n  index: number;\n  onClick: (triggerIndex: number, index: number, e: React.MouseEvent) => void;\n  triggerIndex: number;\n}\n\nexport default function DeleteActionButton(\n  props: DeleteActionButtonProps\n): React.ReactElement {\n  const handleClick = (e: React.MouseEvent) => {\n    const {triggerIndex, index, onClick} = props;\n    onClick(triggerIndex, index, e);\n  };\n\n  return (\n    <Button\n      type=\"button\"\n      size=\"small\"\n      icon={<IconDelete size=\"xs\" />}\n      aria-label={t('Remove action')}\n      {...props}\n      onClick={handleClick}\n    />\n  );\n}\n","import {Fragment, PureComponent} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport ListItem from 'sentry/components/list/listItem';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {PanelItem} from 'sentry/components/panels';\nimport {IconAdd, IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, SelectValue} from 'sentry/types';\nimport {uniqueId} from 'sentry/utils/guid';\nimport {removeAtArrayIndex} from 'sentry/utils/removeAtArrayIndex';\nimport {replaceAtArrayIndex} from 'sentry/utils/replaceAtArrayIndex';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport SentryAppRuleModal from 'sentry/views/alerts/rules/issue/sentryAppRuleModal';\nimport ActionSpecificTargetSelector from 'sentry/views/alerts/rules/metric/triggers/actionsPanel/actionSpecificTargetSelector';\nimport ActionTargetSelector from 'sentry/views/alerts/rules/metric/triggers/actionsPanel/actionTargetSelector';\nimport DeleteActionButton from 'sentry/views/alerts/rules/metric/triggers/actionsPanel/deleteActionButton';\nimport {\n  Action,\n  ActionLabel,\n  ActionType,\n  MetricActionTemplate,\n  TargetLabel,\n  Trigger,\n} from 'sentry/views/alerts/rules/metric/types';\n\ntype Props = {\n  availableActions: MetricActionTemplate[] | null;\n  currentProject: string;\n  disabled: boolean;\n  error: boolean;\n  hasAlertWizardV3: boolean;\n  loading: boolean;\n  onAdd: (triggerIndex: number, action: Action) => void;\n  onChange: (triggerIndex: number, triggers: Trigger[], actions: Action[]) => void;\n  organization: Organization;\n  projects: Project[];\n  triggers: Trigger[];\n  className?: string;\n};\n\n/**\n * When a new action is added, all of it's settings should be set to their default values.\n * @param actionConfig\n * @param dateCreated kept to maintain order of unsaved actions\n */\nconst getCleanAction = (actionConfig, dateCreated?: string): Action => {\n  return {\n    unsavedId: uniqueId(),\n    unsavedDateCreated: dateCreated ?? new Date().toISOString(),\n    type: actionConfig.type,\n    targetType:\n      actionConfig &&\n      actionConfig.allowedTargetTypes &&\n      actionConfig.allowedTargetTypes.length > 0\n        ? actionConfig.allowedTargetTypes[0]\n        : null,\n    targetIdentifier: actionConfig.sentryAppId || '',\n    inputChannelId: null,\n    integrationId: actionConfig.integrationId,\n    sentryAppId: actionConfig.sentryAppId,\n    options: actionConfig.options || null,\n  };\n};\n\n/**\n * Actions have a type (e.g. email, slack, etc), but only some have\n * an integrationId (e.g. email is null). This helper creates a unique\n * id based on the type and integrationId so that we know what action\n * a user's saved action corresponds to.\n */\nconst getActionUniqueKey = ({\n  type,\n  integrationId,\n  sentryAppId,\n}: Pick<Action, 'type' | 'integrationId' | 'sentryAppId'>) => {\n  if (integrationId) {\n    return `${type}-${integrationId}`;\n  }\n  if (sentryAppId) {\n    return `${type}-${sentryAppId}`;\n  }\n  return type;\n};\n\n/**\n * Creates a human-friendly display name for the integration based on type and\n * server provided `integrationName`\n *\n * e.g. for slack we show that it is slack and the `integrationName` is the workspace name\n */\nconst getFullActionTitle = ({\n  type,\n  integrationName,\n  sentryAppName,\n  status,\n}: Pick<\n  MetricActionTemplate,\n  'type' | 'integrationName' | 'sentryAppName' | 'status'\n>) => {\n  if (sentryAppName) {\n    if (status && status !== 'published') {\n      return `${sentryAppName} (${status})`;\n    }\n    return `${sentryAppName}`;\n  }\n\n  const label = ActionLabel[type];\n  if (integrationName) {\n    return `${label} - ${integrationName}`;\n  }\n  return label;\n};\n\n/**\n * Lists saved actions as well as control to add a new action\n */\nclass ActionsPanel extends PureComponent<Props> {\n  handleChangeKey(\n    triggerIndex: number,\n    index: number,\n    key: 'targetIdentifier' | 'inputChannelId',\n    value: string\n  ) {\n    const {triggers, onChange} = this.props;\n    const {actions} = triggers[triggerIndex];\n    const newAction = {\n      ...actions[index],\n      [key]: value,\n    };\n\n    onChange(triggerIndex, triggers, replaceAtArrayIndex(actions, index, newAction));\n  }\n\n  conditionallyRenderHelpfulBanner(triggerIndex: number, index: number) {\n    const {triggers} = this.props;\n    const {actions} = triggers[triggerIndex];\n    const newAction = {...actions[index]};\n    if (newAction.type !== 'slack') {\n      return null;\n    }\n    return (\n      <MarginlessAlert\n        type=\"info\"\n        showIcon\n        trailingItems={\n          <Button\n            href=\"https://docs.sentry.io/product/integrations/notification-incidents/slack/#rate-limiting-error\"\n            size=\"xsmall\"\n          >\n            {t('Learn More')}\n          </Button>\n        }\n      >\n        {t('Having rate limiting problems? Enter a channel or user ID.')}\n      </MarginlessAlert>\n    );\n  }\n\n  handleAddAction = () => {\n    const {availableActions, onAdd} = this.props;\n    const actionConfig = availableActions?.[0];\n\n    if (!actionConfig) {\n      addErrorMessage(t('There was a problem adding an action'));\n      Sentry.captureException(new Error('Unable to add an action'));\n      return;\n    }\n\n    const action: Action = getCleanAction(actionConfig);\n\n    // Add new actions to critical by default\n    const triggerIndex = 0;\n    onAdd(triggerIndex, action);\n  };\n\n  handleDeleteAction = (triggerIndex: number, index: number) => {\n    const {triggers, onChange} = this.props;\n    const {actions} = triggers[triggerIndex];\n\n    onChange(triggerIndex, triggers, removeAtArrayIndex(actions, index));\n  };\n\n  handleChangeActionLevel = (\n    triggerIndex: number,\n    index: number,\n    value: SelectValue<number>\n  ) => {\n    const {triggers, onChange} = this.props;\n    // Convert saved action to unsaved by removing id\n    const {id: _, ...action} = triggers[triggerIndex].actions[index];\n    action.unsavedId = uniqueId();\n    triggers[value.value].actions.push(action);\n    onChange(value.value, triggers, triggers[value.value].actions);\n    this.handleDeleteAction(triggerIndex, index);\n  };\n\n  handleChangeActionType = (\n    triggerIndex: number,\n    index: number,\n    value: SelectValue<ActionType>\n  ) => {\n    const {triggers, onChange, availableActions} = this.props;\n    const {actions} = triggers[triggerIndex];\n    const actionConfig = availableActions?.find(\n      availableAction => getActionUniqueKey(availableAction) === value.value\n    );\n    if (!actionConfig) {\n      addErrorMessage(t('There was a problem changing an action'));\n      Sentry.captureException(new Error('Unable to change an action type'));\n      return;\n    }\n\n    const existingDateCreated =\n      actions[index].dateCreated ?? actions[index].unsavedDateCreated;\n    const newAction: Action = getCleanAction(actionConfig, existingDateCreated);\n    onChange(triggerIndex, triggers, replaceAtArrayIndex(actions, index, newAction));\n  };\n\n  handleChangeTarget = (\n    triggerIndex: number,\n    index: number,\n    value: SelectValue<keyof typeof TargetLabel>\n  ) => {\n    const {triggers, onChange} = this.props;\n    const {actions} = triggers[triggerIndex];\n    const newAction = {\n      ...actions[index],\n      targetType: value.value,\n      targetIdentifier: '',\n    };\n\n    onChange(triggerIndex, triggers, replaceAtArrayIndex(actions, index, newAction));\n  };\n\n  /**\n   * Update the Trigger's Action fields from the SentryAppRuleModal together\n   * only after the user clicks \"Save Changes\".\n   * @param formData Form data\n   */\n  updateParentFromSentryAppRule = (\n    triggerIndex: number,\n    actionIndex: number,\n    formData: {[key: string]: string}\n  ): void => {\n    const {triggers, onChange} = this.props;\n    const {actions} = triggers[triggerIndex];\n    const newAction = {\n      ...actions[actionIndex],\n      ...formData,\n    };\n\n    onChange(\n      triggerIndex,\n      triggers,\n      replaceAtArrayIndex(actions, actionIndex, newAction)\n    );\n  };\n\n  render() {\n    const {\n      availableActions,\n      currentProject,\n      disabled,\n      loading,\n      organization,\n      projects,\n      triggers,\n      hasAlertWizardV3,\n    } = this.props;\n\n    const project = projects.find(({slug}) => slug === currentProject);\n    const items = availableActions?.map(availableAction => ({\n      value: getActionUniqueKey(availableAction),\n      label: getFullActionTitle(availableAction),\n    }));\n\n    const levels = [\n      {value: 0, label: 'Critical Status'},\n      {value: 1, label: 'Warning Status'},\n    ];\n\n    // Create single array of unsaved and saved trigger actions\n    // Sorted by date created ascending\n    const actions = triggers\n      .flatMap((trigger, triggerIndex) => {\n        return trigger.actions.map((action, actionIdx) => {\n          const availableAction = availableActions?.find(\n            a => getActionUniqueKey(a) === getActionUniqueKey(action)\n          );\n          return {\n            dateCreated: new Date(\n              action.dateCreated ?? action.unsavedDateCreated\n            ).getTime(),\n            triggerIndex,\n            action,\n            actionIdx,\n            availableAction,\n          };\n        });\n      })\n      .sort((a, b) => a.dateCreated - b.dateCreated);\n\n    return (\n      <Fragment>\n        <PerformActionsListItem>\n          {hasAlertWizardV3 ? t('Set actions') : t('Perform actions')}\n          {!hasAlertWizardV3 && (\n            <AlertParagraph>\n              {t(\n                'When any of the thresholds above are met, perform an action such as sending an email or using an integration.'\n              )}\n            </AlertParagraph>\n          )}\n        </PerformActionsListItem>\n        {loading && <LoadingIndicator />}\n        {actions.map(({action, actionIdx, triggerIndex, availableAction}) => {\n          const actionDisabled =\n            triggers[triggerIndex].actions[actionIdx]?.disabled || disabled;\n          return (\n            <div key={action.id ?? action.unsavedId}>\n              <RuleRowContainer>\n                <PanelItemGrid>\n                  <PanelItemSelects>\n                    <SelectControl\n                      name=\"select-level\"\n                      aria-label={t('Select a status level')}\n                      isDisabled={disabled || loading}\n                      placeholder={t('Select Level')}\n                      onChange={this.handleChangeActionLevel.bind(\n                        this,\n                        triggerIndex,\n                        actionIdx\n                      )}\n                      value={triggerIndex}\n                      options={levels}\n                    />\n                    <SelectControl\n                      name=\"select-action\"\n                      aria-label={t('Select an Action')}\n                      isDisabled={disabled || loading}\n                      placeholder={t('Select Action')}\n                      onChange={this.handleChangeActionType.bind(\n                        this,\n                        triggerIndex,\n                        actionIdx\n                      )}\n                      value={getActionUniqueKey(action)}\n                      options={items ?? []}\n                    />\n\n                    {availableAction && availableAction.allowedTargetTypes.length > 1 ? (\n                      <SelectControl\n                        isDisabled={disabled || loading}\n                        value={action.targetType}\n                        options={availableAction?.allowedTargetTypes?.map(\n                          allowedType => ({\n                            value: allowedType,\n                            label: TargetLabel[allowedType],\n                          })\n                        )}\n                        onChange={this.handleChangeTarget.bind(\n                          this,\n                          triggerIndex,\n                          actionIdx\n                        )}\n                      />\n                    ) : availableAction &&\n                      availableAction.type === 'sentry_app' &&\n                      availableAction.settings ? (\n                      <Button\n                        icon={<IconSettings />}\n                        type=\"button\"\n                        disabled={actionDisabled}\n                        onClick={() => {\n                          openModal(\n                            deps => (\n                              <SentryAppRuleModal\n                                {...deps}\n                                // Using ! for keys that will exist for sentryapps\n                                sentryAppInstallationUuid={\n                                  availableAction.sentryAppInstallationUuid!\n                                }\n                                config={availableAction.settings!}\n                                appName={availableAction.sentryAppName!}\n                                onSubmitSuccess={this.updateParentFromSentryAppRule.bind(\n                                  this,\n                                  triggerIndex,\n                                  actionIdx\n                                )}\n                                resetValues={\n                                  triggers[triggerIndex].actions[actionIdx] || {}\n                                }\n                              />\n                            ),\n                            {allowClickClose: false}\n                          );\n                        }}\n                      >\n                        {t('Settings')}\n                      </Button>\n                    ) : null}\n                    <ActionTargetSelector\n                      action={action}\n                      availableAction={availableAction}\n                      disabled={disabled}\n                      loading={loading}\n                      onChange={this.handleChangeKey.bind(\n                        this,\n                        triggerIndex,\n                        actionIdx,\n                        'targetIdentifier'\n                      )}\n                      organization={organization}\n                      project={project}\n                    />\n                    <ActionSpecificTargetSelector\n                      action={action}\n                      disabled={disabled}\n                      onChange={this.handleChangeKey.bind(\n                        this,\n                        triggerIndex,\n                        actionIdx,\n                        'inputChannelId'\n                      )}\n                    />\n                  </PanelItemSelects>\n                  <DeleteActionButton\n                    triggerIndex={triggerIndex}\n                    index={actionIdx}\n                    onClick={this.handleDeleteAction}\n                    disabled={disabled}\n                  />\n                </PanelItemGrid>\n              </RuleRowContainer>\n              {this.conditionallyRenderHelpfulBanner(triggerIndex, actionIdx)}\n            </div>\n          );\n        })}\n        <ActionSection>\n          <Button\n            type=\"button\"\n            disabled={disabled || loading}\n            icon={<IconAdd isCircled color=\"gray300\" />}\n            onClick={this.handleAddAction}\n          >\n            {t('Add Action')}\n          </Button>\n        </ActionSection>\n      </Fragment>\n    );\n  }\n}\n\nconst ActionsPanelWithSpace = styled(ActionsPanel)`\n  margin-top: ${space(4)};\n`;\n\nconst ActionSection = styled('div')`\n  margin-top: ${space(1)};\n  margin-bottom: ${space(3)};\n`;\n\nconst AlertParagraph = styled('p')`\n  color: ${p => p.theme.subText};\n  margin-bottom: ${space(1)};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst PanelItemGrid = styled(PanelItem)`\n  display: flex;\n  align-items: center;\n  border-bottom: 0;\n  padding: ${space(1)};\n`;\n\nconst PanelItemSelects = styled('div')`\n  display: flex;\n  width: 100%;\n  margin-right: ${space(1)};\n  > * {\n    flex: 0 1 200px;\n\n    &:not(:last-child) {\n      margin-right: ${space(1)};\n    }\n  }\n`;\n\nconst RuleRowContainer = styled('div')`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border: 1px ${p => p.theme.border} solid;\n  border-radius: ${p => p.theme.borderRadius} ${p => p.theme.borderRadius} 0 0;\n  &:last-child {\n    border-radius: ${p => p.theme.borderRadius};\n  }\n`;\n\nconst StyledListItem = styled(ListItem)`\n  margin: ${space(2)} 0 ${space(3)} 0;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst PerformActionsListItem = styled(StyledListItem)`\n  margin-bottom: 0;\n  line-height: 1.3;\n`;\n\nconst MarginlessAlert = styled(Alert)`\n  border-radius: 0 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius};\n  border: 1px ${p => p.theme.border} solid;\n  border-top-width: 0;\n  margin: 0;\n  padding: ${space(1)} ${space(1)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default withOrganization(ActionsPanelWithSpace);\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {IconArrow} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\n\ntype NumberDragControlProps = {\n  onChange: (delta: number, event: React.MouseEvent<HTMLDivElement>) => void;\n  axis?: 'x' | 'y';\n  /**\n   * The value to increment by if the shift key is held. Defaults to 1\n   */\n  shiftStep?: number;\n  /**\n   * The value to increment by as the mouse is dragged. Defaults to 1\n   */\n  step?: number;\n};\n\ntype Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof NumberDragControlProps> &\n  NumberDragControlProps;\n\ntype State = {\n  isClicked: boolean;\n};\n\nclass NumberDragControl extends Component<Props, State> {\n  state: State = {\n    isClicked: false,\n  };\n\n  render() {\n    const {onChange, axis, step, shiftStep, ...props} = this.props;\n    const isX = (axis ?? 'x') === 'x';\n\n    return (\n      <Wrapper\n        {...props}\n        onMouseDown={(event: React.MouseEvent<HTMLDivElement>) => {\n          if (event.button !== 0) {\n            return;\n          }\n\n          // XXX(epurkhiser): We can remove this later, just curious if people\n          // are actually using the drag control\n          trackAnalyticsEvent({\n            eventName: 'Number Drag Control: Clicked',\n            eventKey: 'number_drag_control.clicked',\n            organization_id: null,\n          });\n\n          event.currentTarget.requestPointerLock();\n          this.setState({isClicked: true});\n        }}\n        onMouseUp={() => {\n          document.exitPointerLock();\n          this.setState({isClicked: false});\n        }}\n        onMouseMove={(event: React.MouseEvent<HTMLDivElement>) => {\n          if (!this.state.isClicked) {\n            return;\n          }\n          const delta = isX ? event.movementX : event.movementY * -1;\n          const deltaOne = delta > 0 ? Math.ceil(delta / 100) : Math.floor(delta / 100);\n          const deltaStep = deltaOne * ((event.shiftKey ? shiftStep : step) ?? 1);\n\n          onChange(deltaStep, event);\n        }}\n        isActive={this.state.isClicked}\n        isX={isX}\n      >\n        <IconArrow direction={isX ? 'left' : 'up'} size=\"8px\" />\n        <IconArrow direction={isX ? 'right' : 'down'} size=\"8px\" />\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')<{isActive: boolean; isX: boolean}>`\n  display: grid;\n  padding: ${space(0.5)};\n  ${p =>\n    p.isX\n      ? 'grid-template-columns: max-content max-content'\n      : 'grid-template-rows: max-content max-content'};\n  cursor: ${p => (p.isX ? 'ew-resize' : 'ns-resize')};\n  color: ${p => (p.isActive ? p.theme.gray500 : p.theme.gray300)};\n  background: ${p => p.isActive && p.theme.backgroundSecondary};\n  border-radius: 2px;\n`;\n\nexport default NumberDragControl;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport Feature from 'sentry/components/acl/feature';\nimport Input from 'sentry/components/forms/controls/input';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport NumberDragControl from 'sentry/components/numberDragControl';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  ThresholdControlValue,\n} from 'sentry/views/alerts/rules/metric/types';\n\ntype Props = ThresholdControlValue & {\n  comparisonType: AlertRuleComparisonType;\n  disableThresholdType: boolean;\n  disabled: boolean;\n  onChange: (value: ThresholdControlValue, e: React.FormEvent) => void;\n  onThresholdPeriodChange: (value: number) => void;\n  onThresholdTypeChange: (thresholdType: AlertRuleThresholdType) => void;\n  placeholder: string;\n  thresholdPeriod: number | null;\n  type: string;\n  hideControl?: boolean;\n};\n\ntype State = {\n  currentValue: string | null;\n};\n\nclass ThresholdControl extends Component<Props, State> {\n  state: State = {\n    currentValue: null,\n  };\n\n  handleThresholdChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const {value} = e.target;\n\n    // Only allow number and partial number inputs\n    if (!/^[0-9]*\\.?[0-9]*$/.test(value)) {\n      return;\n    }\n\n    const {onChange, thresholdType} = this.props;\n\n    // Empty input\n    if (value === '') {\n      this.setState({currentValue: null});\n      onChange({thresholdType, threshold: ''}, e);\n      return;\n    }\n\n    // Only call onChange if the new number is valid, and not partially typed\n    // (eg writing out the decimal '5.')\n    if (/\\.+0*$/.test(value)) {\n      this.setState({currentValue: value});\n      return;\n    }\n\n    const numberValue = Number(value);\n\n    this.setState({currentValue: null});\n    onChange({thresholdType, threshold: numberValue}, e);\n  };\n\n  /**\n   * Coerce the currentValue to a number and trigger the onChange.\n   */\n  handleThresholdBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (this.state.currentValue === null) {\n      return;\n    }\n\n    const {onChange, thresholdType} = this.props;\n    onChange({thresholdType, threshold: Number(this.state.currentValue)}, e);\n    this.setState({currentValue: null});\n  };\n\n  handleTypeChange = ({value}) => {\n    const {onThresholdTypeChange} = this.props;\n    onThresholdTypeChange(value);\n  };\n\n  handleDragChange = (delta: number, e: React.MouseEvent) => {\n    const {onChange, thresholdType, threshold} = this.props;\n    const currentValue = threshold || 0;\n    onChange({thresholdType, threshold: currentValue + delta}, e);\n  };\n\n  handleThresholdPeriodChange = ({value}) => {\n    this.props.onThresholdPeriodChange(value);\n  };\n\n  render() {\n    const {currentValue} = this.state;\n    const {\n      thresholdPeriod,\n      thresholdType,\n      comparisonType,\n      hideControl,\n      threshold,\n      placeholder,\n      type,\n      onChange: _,\n      onThresholdTypeChange: __,\n      disabled,\n      disableThresholdType,\n    } = this.props;\n\n    return (\n      <Wrapper>\n        <Container comparisonType={comparisonType}>\n          <SelectContainer>\n            <SelectControl\n              isDisabled={disabled || disableThresholdType}\n              name={`${type}ThresholdType`}\n              value={thresholdType}\n              options={[\n                {\n                  value: AlertRuleThresholdType.BELOW,\n                  label:\n                    comparisonType === AlertRuleComparisonType.COUNT\n                      ? hideControl\n                        ? t('When below Critical or Warning')\n                        : t('Below')\n                      : hideControl\n                      ? t('When lower than Critical or Warning')\n                      : t('Lower than'),\n                },\n                {\n                  value: AlertRuleThresholdType.ABOVE,\n                  label:\n                    comparisonType === AlertRuleComparisonType.COUNT\n                      ? hideControl\n                        ? t('When above Critical or Warning')\n                        : t('Above')\n                      : hideControl\n                      ? t('When higher than Critical or Warning')\n                      : t('Higher than'),\n                },\n              ]}\n              components={disableThresholdType ? {DropdownIndicator: null} : undefined}\n              styles={\n                disableThresholdType\n                  ? {\n                      control: provided => ({\n                        ...provided,\n                        cursor: 'not-allowed',\n                        pointerEvents: 'auto',\n                      }),\n                    }\n                  : undefined\n              }\n              onChange={this.handleTypeChange}\n            />\n          </SelectContainer>\n          {!hideControl && (\n            <ThresholdContainer comparisonType={comparisonType}>\n              <ThresholdInput>\n                <StyledInput\n                  disabled={disabled}\n                  name={`${type}Threshold`}\n                  data-test-id={`${type}-threshold`}\n                  placeholder={placeholder}\n                  value={currentValue ?? threshold ?? ''}\n                  onChange={this.handleThresholdChange}\n                  onBlur={this.handleThresholdBlur}\n                  // Disable lastpass autocomplete\n                  data-lpignore=\"true\"\n                />\n                <DragContainer>\n                  <Tooltip\n                    title={tct(\n                      'Drag to adjust threshold[break]You can hold shift to fine tune',\n                      {\n                        break: <br />,\n                      }\n                    )}\n                  >\n                    <NumberDragControl\n                      step={5}\n                      axis=\"y\"\n                      onChange={this.handleDragChange}\n                    />\n                  </Tooltip>\n                </DragContainer>\n              </ThresholdInput>\n              {comparisonType === AlertRuleComparisonType.CHANGE && (\n                <PercentWrapper>%</PercentWrapper>\n              )}\n            </ThresholdContainer>\n          )}\n        </Container>\n        {!hideControl && (\n          <Feature features={['metric-alert-threshold-period']}>\n            <SelectContainer>\n              <SelectControl\n                isDisabled={disabled}\n                name=\"thresholdPeriod\"\n                value={thresholdPeriod}\n                options={[1, 2, 5, 10, 20].map(value => ({\n                  value,\n                  label: tn('For %s minute', 'For %s minutes', value),\n                }))}\n                onChange={this.handleThresholdPeriodChange}\n              />\n            </SelectContainer>\n          </Feature>\n        )}\n      </Wrapper>\n    );\n  }\n}\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst Container = styled('div')<{comparisonType: AlertRuleComparisonType}>`\n  flex: 2;\n  display: flex;\n  align-items: center;\n  flex-direction: ${p =>\n    p.comparisonType === AlertRuleComparisonType.COUNT ? 'row' : 'row-reverse'};\n  gap: ${space(1)};\n`;\n\nconst SelectContainer = styled('div')`\n  flex: 1;\n`;\n\nconst ThresholdContainer = styled('div')<{comparisonType: AlertRuleComparisonType}>`\n  flex: 1;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledInput = styled(Input)`\n  /* Match the height of the select controls */\n  height: 40px;\n`;\n\nconst ThresholdInput = styled('div')`\n  position: relative;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst PercentWrapper = styled('div')`\n  margin-left: ${space(1)};\n`;\n\nconst DragContainer = styled('div')`\n  position: absolute;\n  top: 4px;\n  right: 12px;\n`;\n\nexport default ThresholdControl;\n","import {Component, Fragment, PureComponent} from 'react';\nimport styled from '@emotion/styled';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {Client} from 'sentry/api';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Field from 'sentry/components/forms/field';\nimport {IconDiamond} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Config, Organization, Project} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport {getThresholdUnits} from 'sentry/views/alerts/rules/metric/constants';\nimport ThresholdControl from 'sentry/views/alerts/rules/metric/triggers/thresholdControl';\n\nimport {isSessionAggregate} from '../../../utils';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  ThresholdControlValue,\n  Trigger,\n  UnsavedMetricRule,\n  UnsavedTrigger,\n} from '../types';\n\ntype Props = {\n  aggregate: UnsavedMetricRule['aggregate'];\n  api: Client;\n  comparisonType: AlertRuleComparisonType;\n  config: Config;\n\n  disabled: boolean;\n  fieldHelp: React.ReactNode;\n  hasAlertWizardV3: boolean;\n  isCritical: boolean;\n  onChange: (trigger: Trigger, changeObj: Partial<Trigger>) => void;\n  onThresholdPeriodChange: (value: number) => void;\n  onThresholdTypeChange: (thresholdType: AlertRuleThresholdType) => void;\n  organization: Organization;\n  placeholder: string;\n  projects: Project[];\n  resolveThreshold: UnsavedMetricRule['resolveThreshold'];\n  thresholdPeriod: UnsavedMetricRule['thresholdPeriod'];\n  thresholdType: UnsavedMetricRule['thresholdType'];\n  trigger: Trigger;\n\n  triggerIndex: number;\n  triggerLabel: React.ReactNode;\n  /**\n   * Map of fieldName -> errorMessage\n   */\n  error?: {[fieldName: string]: string};\n\n  hideControl?: boolean;\n};\n\nclass TriggerFormItem extends PureComponent<Props> {\n  /**\n   * Handler for threshold changes coming from slider or chart.\n   * Needs to sync state with the form.\n   */\n  handleChangeThreshold = (value: ThresholdControlValue) => {\n    const {onChange, trigger} = this.props;\n\n    onChange(\n      {\n        ...trigger,\n        alertThreshold: value.threshold,\n      },\n      {alertThreshold: value.threshold}\n    );\n  };\n\n  render() {\n    const {\n      disabled,\n      error,\n      trigger,\n      isCritical,\n      thresholdType,\n      thresholdPeriod,\n      hasAlertWizardV3,\n      hideControl,\n      comparisonType,\n      fieldHelp,\n      triggerLabel,\n      placeholder,\n      onThresholdTypeChange,\n      onThresholdPeriodChange,\n    } = this.props;\n\n    return (\n      <StyledField\n        label={triggerLabel}\n        help={fieldHelp}\n        required={isCritical}\n        error={error && error.alertThreshold}\n        hasAlertWizardV3={hasAlertWizardV3}\n      >\n        <ThresholdControl\n          disabled={disabled}\n          disableThresholdType={!isCritical}\n          type={trigger.label}\n          thresholdType={thresholdType}\n          thresholdPeriod={thresholdPeriod}\n          hideControl={hideControl}\n          threshold={trigger.alertThreshold}\n          comparisonType={comparisonType}\n          placeholder={placeholder}\n          onChange={this.handleChangeThreshold}\n          onThresholdTypeChange={onThresholdTypeChange}\n          onThresholdPeriodChange={onThresholdPeriodChange}\n        />\n      </StyledField>\n    );\n  }\n}\n\ntype TriggerFormContainerProps = Omit<\n  React.ComponentProps<typeof TriggerFormItem>,\n  | 'onChange'\n  | 'isCritical'\n  | 'error'\n  | 'triggerIndex'\n  | 'trigger'\n  | 'fieldHelp'\n  | 'triggerHelp'\n  | 'triggerLabel'\n  | 'placeholder'\n> & {\n  hasAlertWizardV3: boolean;\n  onChange: (triggerIndex: number, trigger: Trigger, changeObj: Partial<Trigger>) => void;\n  onResolveThresholdChange: (\n    resolveThreshold: UnsavedMetricRule['resolveThreshold']\n  ) => void;\n  triggers: Trigger[];\n  errors?: Map<number, {[fieldName: string]: string}>;\n};\n\nclass TriggerFormContainer extends Component<TriggerFormContainerProps> {\n  componentDidMount() {\n    const {api, organization} = this.props;\n\n    fetchOrgMembers(api, organization.slug);\n  }\n\n  handleChangeTrigger =\n    (triggerIndex: number) => (trigger: Trigger, changeObj: Partial<Trigger>) => {\n      const {onChange} = this.props;\n      onChange(triggerIndex, trigger, changeObj);\n    };\n\n  handleChangeResolveTrigger = (trigger: Trigger, _: Partial<Trigger>) => {\n    const {onResolveThresholdChange} = this.props;\n    onResolveThresholdChange(trigger.alertThreshold);\n  };\n\n  getCriticalThresholdPlaceholder(\n    aggregate: string,\n    comparisonType: AlertRuleComparisonType\n  ) {\n    if (aggregate.includes('failure_rate')) {\n      return '0.05';\n    }\n\n    if (isSessionAggregate(aggregate)) {\n      return '97';\n    }\n\n    if (comparisonType === AlertRuleComparisonType.CHANGE) {\n      return '100';\n    }\n\n    return '300';\n  }\n\n  getIndicator(type: AlertRuleTriggerType) {\n    const {hasAlertWizardV3} = this.props;\n\n    if (type === AlertRuleTriggerType.CRITICAL) {\n      return hasAlertWizardV3 ? (\n        <StyledIconDiamond color=\"red300\" size=\"sm\" />\n      ) : (\n        <CriticalIndicator size={12} />\n      );\n    }\n\n    if (type === AlertRuleTriggerType.WARNING) {\n      return hasAlertWizardV3 ? (\n        <StyledIconDiamond color=\"yellow300\" size=\"sm\" />\n      ) : (\n        <WarningIndicator size={12} />\n      );\n    }\n\n    return hasAlertWizardV3 ? (\n      <StyledIconDiamond color=\"green300\" size=\"sm\" />\n    ) : (\n      <ResolvedIndicator size={12} />\n    );\n  }\n\n  render() {\n    const {\n      api,\n      config,\n      disabled,\n      errors,\n      organization,\n      triggers,\n      thresholdType,\n      thresholdPeriod,\n      comparisonType,\n      aggregate,\n      resolveThreshold,\n      projects,\n      hasAlertWizardV3,\n      onThresholdTypeChange,\n      onThresholdPeriodChange,\n    } = this.props;\n\n    const resolveTrigger: UnsavedTrigger = {\n      label: AlertRuleTriggerType.RESOLVE,\n      alertThreshold: resolveThreshold,\n      actions: [],\n    };\n\n    const thresholdUnits = getThresholdUnits(aggregate, comparisonType);\n\n    return (\n      <Fragment>\n        {triggers.map((trigger, index) => {\n          const isCritical = index === 0;\n          // eslint-disable-next-line no-use-before-define\n          return (\n            <TriggerFormItem\n              key={index}\n              api={api}\n              config={config}\n              disabled={disabled}\n              error={errors && errors.get(index)}\n              trigger={trigger}\n              thresholdPeriod={thresholdPeriod}\n              thresholdType={thresholdType}\n              comparisonType={comparisonType}\n              aggregate={aggregate}\n              resolveThreshold={resolveThreshold}\n              organization={organization}\n              projects={projects}\n              triggerIndex={index}\n              isCritical={isCritical}\n              hasAlertWizardV3={hasAlertWizardV3}\n              fieldHelp={\n                hasAlertWizardV3\n                  ? null\n                  : tct(\n                      'The threshold[units] that will activate the [severity] status.',\n                      {\n                        severity: isCritical ? t('critical') : t('warning'),\n                        units: thresholdUnits ? ` (${thresholdUnits})` : '',\n                      }\n                    )\n              }\n              triggerLabel={\n                <TriggerLabel>\n                  {this.getIndicator(\n                    isCritical\n                      ? AlertRuleTriggerType.CRITICAL\n                      : AlertRuleTriggerType.WARNING\n                  )}\n                  {isCritical ? t('Critical') : t('Warning')}\n                </TriggerLabel>\n              }\n              placeholder={\n                isCritical\n                  ? `${this.getCriticalThresholdPlaceholder(aggregate, comparisonType)}${\n                      comparisonType === AlertRuleComparisonType.COUNT\n                        ? thresholdUnits\n                        : ''\n                    }`\n                  : t('None')\n              }\n              onChange={this.handleChangeTrigger(index)}\n              onThresholdTypeChange={onThresholdTypeChange}\n              onThresholdPeriodChange={onThresholdPeriodChange}\n            />\n          );\n        })}\n        <TriggerFormItem\n          api={api}\n          config={config}\n          disabled={disabled}\n          error={errors && errors.get(2)}\n          trigger={resolveTrigger}\n          // Flip rule thresholdType to opposite\n          thresholdPeriod={thresholdPeriod}\n          thresholdType={+!thresholdType}\n          comparisonType={comparisonType}\n          aggregate={aggregate}\n          resolveThreshold={resolveThreshold}\n          organization={organization}\n          projects={projects}\n          triggerIndex={2}\n          isCritical={false}\n          hasAlertWizardV3={hasAlertWizardV3}\n          fieldHelp={\n            hasAlertWizardV3\n              ? null\n              : tct('The threshold[units] that will activate the resolved status.', {\n                  units: thresholdUnits ? ` (${thresholdUnits})` : '',\n                })\n          }\n          triggerLabel={\n            <TriggerLabel>\n              {this.getIndicator(AlertRuleTriggerType.RESOLVE)}\n              {t('Resolved')}\n            </TriggerLabel>\n          }\n          placeholder={t('Automatic')}\n          onChange={this.handleChangeResolveTrigger}\n          onThresholdTypeChange={onThresholdTypeChange}\n          onThresholdPeriodChange={onThresholdPeriodChange}\n        />\n      </Fragment>\n    );\n  }\n}\n\nconst CriticalIndicator = styled(CircleIndicator)`\n  background: ${p => p.theme.red300};\n  margin-right: ${space(1)};\n`;\n\nconst WarningIndicator = styled(CircleIndicator)`\n  background: ${p => p.theme.yellow300};\n  margin-right: ${space(1)};\n`;\n\nconst ResolvedIndicator = styled(CircleIndicator)`\n  background: ${p => p.theme.green300};\n  margin-right: ${space(1)};\n`;\n\nconst TriggerLabel = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst StyledIconDiamond = styled(IconDiamond)`\n  margin-right: ${space(0.75)};\n`;\n\nconst StyledField = styled(Field)<{hasAlertWizardV3: boolean}>`\n  & > label > div:first-child > span {\n    display: flex;\n    flex-direction: row;\n  }\n`;\n\nexport default withConfig(withApi(TriggerFormContainer));\n","import {Component, Fragment} from 'react';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {Organization, Project} from 'sentry/types';\nimport {removeAtArrayIndex} from 'sentry/utils/removeAtArrayIndex';\nimport {replaceAtArrayIndex} from 'sentry/utils/replaceAtArrayIndex';\nimport ActionsPanel from 'sentry/views/alerts/rules/metric/triggers/actionsPanel';\nimport TriggerForm from 'sentry/views/alerts/rules/metric/triggers/form';\n\nimport {\n  Action,\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  MetricActionTemplate,\n  Trigger,\n  UnsavedMetricRule,\n} from '../types';\n\ntype Props = {\n  aggregate: UnsavedMetricRule['aggregate'];\n  availableActions: MetricActionTemplate[] | null;\n  comparisonType: AlertRuleComparisonType;\n  currentProject: string;\n  disabled: boolean;\n  errors: Map<number, {[fieldName: string]: string}>;\n  hasAlertWizardV3: boolean;\n  onChange: (\n    triggers: Trigger[],\n    triggerIndex?: number,\n    changeObj?: Partial<Trigger>\n  ) => void;\n  onResolveThresholdChange: (\n    resolveThreshold: UnsavedMetricRule['resolveThreshold']\n  ) => void;\n  onThresholdPeriodChange: (value: number) => void;\n  onThresholdTypeChange: (thresholdType: AlertRuleThresholdType) => void;\n  organization: Organization;\n  projects: Project[];\n\n  resolveThreshold: UnsavedMetricRule['resolveThreshold'];\n\n  thresholdPeriod: UnsavedMetricRule['thresholdPeriod'];\n  thresholdType: UnsavedMetricRule['thresholdType'];\n  triggers: Trigger[];\n};\n\n/**\n * A list of forms to add, edit, and delete triggers.\n */\nclass Triggers extends Component<Props> {\n  handleDeleteTrigger = (index: number) => {\n    const {triggers, onChange} = this.props;\n    const updatedTriggers = removeAtArrayIndex(triggers, index);\n\n    onChange(updatedTriggers);\n  };\n\n  handleChangeTrigger = (\n    triggerIndex: number,\n    trigger: Trigger,\n    changeObj: Partial<Trigger>\n  ) => {\n    const {triggers, onChange} = this.props;\n    const updatedTriggers = replaceAtArrayIndex(triggers, triggerIndex, trigger);\n    onChange(updatedTriggers, triggerIndex, changeObj);\n  };\n\n  handleAddAction = (triggerIndex: number, action: Action) => {\n    const {onChange, triggers} = this.props;\n    const trigger = triggers[triggerIndex];\n    const actions = [...trigger.actions, action];\n    const updatedTriggers = replaceAtArrayIndex(triggers, triggerIndex, {\n      ...trigger,\n      actions,\n    });\n    onChange(updatedTriggers, triggerIndex, {actions});\n  };\n\n  handleChangeActions = (\n    triggerIndex: number,\n    triggers: Trigger[],\n    actions: Action[]\n  ): void => {\n    const {onChange} = this.props;\n    const trigger = triggers[triggerIndex];\n    const updatedTriggers = replaceAtArrayIndex(triggers, triggerIndex, {\n      ...trigger,\n      actions,\n    });\n    onChange(updatedTriggers, triggerIndex, {actions});\n  };\n\n  render() {\n    const {\n      availableActions,\n      currentProject,\n      errors,\n      organization,\n      projects,\n      triggers,\n      disabled,\n      aggregate,\n      thresholdType,\n      thresholdPeriod,\n      comparisonType,\n      resolveThreshold,\n      hasAlertWizardV3,\n      onThresholdTypeChange,\n      onResolveThresholdChange,\n      onThresholdPeriodChange,\n    } = this.props;\n\n    // Note we only support 2 triggers max\n    return (\n      <Fragment>\n        <Panel>\n          <PanelBody>\n            <TriggerForm\n              disabled={disabled}\n              errors={errors}\n              organization={organization}\n              projects={projects}\n              triggers={triggers}\n              aggregate={aggregate}\n              resolveThreshold={resolveThreshold}\n              thresholdType={thresholdType}\n              thresholdPeriod={thresholdPeriod}\n              comparisonType={comparisonType}\n              hasAlertWizardV3={hasAlertWizardV3}\n              onChange={this.handleChangeTrigger}\n              onThresholdTypeChange={onThresholdTypeChange}\n              onResolveThresholdChange={onResolveThresholdChange}\n              onThresholdPeriodChange={onThresholdPeriodChange}\n            />\n          </PanelBody>\n        </Panel>\n\n        <ActionsPanel\n          disabled={disabled}\n          loading={availableActions === null}\n          error={false}\n          availableActions={availableActions}\n          currentProject={currentProject}\n          organization={organization}\n          hasAlertWizardV3={hasAlertWizardV3}\n          projects={projects}\n          triggers={triggers}\n          onChange={this.handleChangeActions}\n          onAdd={this.handleAddAction}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default Triggers;\n","import {PureComponent} from 'react';\nimport color from 'color';\nimport type {TooltipComponentFormatterCallbackParams} from 'echarts';\nimport debounce from 'lodash/debounce';\nimport flatten from 'lodash/flatten';\n\nimport {AreaChart, AreaChartSeries} from 'sentry/components/charts/areaChart';\nimport Graphic from 'sentry/components/charts/components/graphic';\nimport {defaultFormatAxisLabel} from 'sentry/components/charts/components/tooltip';\nimport {LineChartSeries} from 'sentry/components/charts/lineChart';\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport space from 'sentry/styles/space';\nimport {PageFilters} from 'sentry/types';\nimport {ReactEchartsRef, Series} from 'sentry/types/echarts';\nimport theme from 'sentry/utils/theme';\nimport {\n  ALERT_CHART_MIN_MAX_BUFFER,\n  alertAxisFormatter,\n  alertTooltipValueFormatter,\n  isSessionAggregate,\n  shouldScaleAlertChart,\n} from 'sentry/views/alerts/utils';\nimport {getChangeStatus} from 'sentry/views/alerts/utils/getChangeStatus';\n\nimport {\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  MetricRule,\n  Trigger,\n} from '../../types';\n\ntype DefaultProps = {\n  comparisonData: Series[];\n  comparisonMarkLines: LineChartSeries[];\n  data: Series[];\n};\n\ntype Props = DefaultProps & {\n  aggregate: string;\n  hideThresholdLines: boolean;\n  resolveThreshold: MetricRule['resolveThreshold'];\n  thresholdType: MetricRule['thresholdType'];\n  triggers: Trigger[];\n  comparisonSeriesName?: string;\n  maxValue?: number;\n  minValue?: number;\n  minutesThresholdToDisplaySeconds?: number;\n} & Partial<PageFilters['datetime']>;\n\ntype State = {\n  height: number;\n  width: number;\n  yAxisMax: number | null;\n  yAxisMin: number | null;\n};\n\nconst CHART_GRID = {\n  left: space(2),\n  right: space(2),\n  top: space(4),\n  bottom: space(2),\n};\n\n// Colors to use for trigger thresholds\nconst COLOR = {\n  RESOLUTION_FILL: color(theme.green200).alpha(0.1).rgb().string(),\n  CRITICAL_FILL: color(theme.red300).alpha(0.25).rgb().string(),\n  WARNING_FILL: color(theme.yellow200).alpha(0.1).rgb().string(),\n};\n\n/**\n * This chart displays shaded regions that represent different Trigger thresholds in a\n * Metric Alert rule.\n */\nexport default class ThresholdsChart extends PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    data: [],\n    comparisonData: [],\n    comparisonMarkLines: [],\n  };\n\n  state: State = {\n    width: -1,\n    height: -1,\n    yAxisMax: null,\n    yAxisMin: null,\n  };\n\n  componentDidMount() {\n    this.handleUpdateChartAxis();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.triggers !== prevProps.triggers ||\n      this.props.data !== prevProps.data ||\n      this.props.comparisonData !== prevProps.comparisonData ||\n      this.props.comparisonMarkLines !== prevProps.comparisonMarkLines\n    ) {\n      this.handleUpdateChartAxis();\n    }\n  }\n\n  ref: null | ReactEchartsRef = null;\n\n  // If we have ref to chart and data, try to update chart axis so that\n  // alertThreshold or resolveThreshold is visible in chart\n  handleUpdateChartAxis = () => {\n    const {triggers, resolveThreshold, hideThresholdLines} = this.props;\n    const chartRef = this.ref?.getEchartsInstance?.();\n    if (hideThresholdLines) {\n      return;\n    }\n\n    if (chartRef) {\n      const thresholds = [\n        resolveThreshold || null,\n        ...triggers.map(t => t.alertThreshold || null),\n      ].filter(threshold => threshold !== null) as number[];\n      this.updateChartAxis(Math.min(...thresholds), Math.max(...thresholds));\n    }\n  };\n\n  /**\n   * Updates the chart so that yAxis is within bounds of our max value\n   */\n  updateChartAxis = debounce((minThreshold: number, maxThreshold: number) => {\n    const {minValue, maxValue, aggregate} = this.props;\n    const shouldScale = shouldScaleAlertChart(aggregate);\n    let yAxisMax =\n      shouldScale && maxValue\n        ? this.clampMaxValue(Math.ceil(maxValue * ALERT_CHART_MIN_MAX_BUFFER))\n        : null;\n    let yAxisMin =\n      shouldScale && minValue ? Math.floor(minValue / ALERT_CHART_MIN_MAX_BUFFER) : 0;\n\n    if (typeof maxValue === 'number' && maxThreshold > maxValue) {\n      yAxisMax = maxThreshold;\n    }\n    if (typeof minValue === 'number' && minThreshold < minValue) {\n      yAxisMin = Math.floor(minThreshold / ALERT_CHART_MIN_MAX_BUFFER);\n    }\n\n    // We need to force update after we set a new yAxis min/max because `convertToPixel`\n    // can return a negative position (probably because yAxisMin/yAxisMax is not synced with chart yet)\n    this.setState({yAxisMax, yAxisMin}, this.forceUpdate);\n  }, 150);\n\n  /**\n   * Syncs component state with the chart's width/heights\n   */\n  updateDimensions = () => {\n    const chartRef = this.ref?.getEchartsInstance?.();\n    if (!chartRef || !chartRef.getWidth?.()) {\n      return;\n    }\n\n    const width = chartRef.getWidth();\n    const height = chartRef.getHeight();\n    if (width !== this.state.width || height !== this.state.height) {\n      this.setState({\n        width,\n        height,\n      });\n    }\n  };\n\n  handleRef = (ref: ReactEchartsRef): void => {\n    // When chart initially renders, we want to update state with its width, as well as initialize starting\n    // locations (on y axis) for the draggable lines\n    if (ref && !this.ref) {\n      this.ref = ref;\n      this.updateDimensions();\n      this.handleUpdateChartAxis();\n    }\n\n    if (!ref) {\n      this.ref = null;\n    }\n  };\n\n  /**\n   * Draws the boundary lines and shaded areas for the chart.\n   *\n   * May need to refactor so that they are aware of other trigger thresholds.\n   *\n   * e.g. draw warning from threshold -> critical threshold instead of the entire height of chart\n   */\n  getThresholdLine = (\n    trigger: Trigger,\n    type: 'alertThreshold' | 'resolveThreshold',\n    isResolution: boolean\n  ) => {\n    const {thresholdType, resolveThreshold, maxValue, hideThresholdLines} = this.props;\n    const position =\n      type === 'alertThreshold'\n        ? this.getChartPixelForThreshold(trigger[type])\n        : this.getChartPixelForThreshold(resolveThreshold);\n    const isInverted = thresholdType === AlertRuleThresholdType.BELOW;\n    const chartRef = this.ref?.getEchartsInstance?.();\n\n    if (\n      typeof position !== 'number' ||\n      isNaN(position) ||\n      !this.state.height ||\n      !chartRef ||\n      hideThresholdLines\n    ) {\n      return [];\n    }\n\n    const yAxisPixelPosition = chartRef.convertToPixel(\n      {yAxisIndex: 0},\n      `${this.state.yAxisMin}`\n    );\n    const yAxisPosition = typeof yAxisPixelPosition === 'number' ? yAxisPixelPosition : 0;\n    // As the yAxis gets larger we want to start our line/area further to the right\n    // Handle case where the graph max is 1 and includes decimals\n    const yAxisMax =\n      (Math.round(Math.max(maxValue ?? 1, this.state.yAxisMax ?? 1)) * 100) / 100;\n    const yAxisSize = 15 + (yAxisMax <= 1 ? 15 : `${yAxisMax ?? ''}`.length * 8);\n    // Shave off the right margin and yAxisSize from the width to get the actual area we want to render content in\n    const graphAreaWidth =\n      this.state.width - parseInt(CHART_GRID.right.slice(0, -2), 10) - yAxisSize;\n    // Distance from the top of the chart to save for the legend\n    const legendPadding = 20;\n    // Shave off the left margin\n    const graphAreaMargin = 7;\n\n    const isCritical = trigger.label === AlertRuleTriggerType.CRITICAL;\n    const LINE_STYLE = {\n      stroke: isResolution ? theme.green300 : isCritical ? theme.red300 : theme.yellow300,\n      lineDash: [2],\n    };\n\n    return [\n      // This line is used as a \"border\" for the shaded region\n      // and represents the threshold value.\n      {\n        type: 'line',\n        // Resolution is considered \"off\" if it is -1\n        invisible: position === null,\n        draggable: false,\n        position: [yAxisSize, position],\n        shape: {y1: 1, y2: 1, x1: graphAreaMargin, x2: graphAreaWidth},\n        style: LINE_STYLE,\n        silent: true,\n        z: 100,\n      },\n\n      // Shaded area for incident/resolutions to show user when they can expect to be alerted\n      // (or when they will be considered as resolved)\n      //\n      // Resolution is considered \"off\" if it is -1\n      ...(position !== null\n        ? [\n            {\n              type: 'rect',\n              draggable: false,\n              silent: true,\n\n              position:\n                isResolution !== isInverted\n                  ? [yAxisSize + graphAreaMargin, position + 1]\n                  : [yAxisSize + graphAreaMargin, legendPadding],\n              shape: {\n                width: graphAreaWidth - graphAreaMargin,\n                height:\n                  isResolution !== isInverted\n                    ? yAxisPosition - position\n                    : position - legendPadding,\n              },\n\n              style: {\n                fill: isResolution\n                  ? COLOR.RESOLUTION_FILL\n                  : isCritical\n                  ? COLOR.CRITICAL_FILL\n                  : COLOR.WARNING_FILL,\n              },\n\n              // This needs to be below the draggable line\n              z: 100,\n            },\n          ]\n        : []),\n    ];\n  };\n\n  getChartPixelForThreshold = (threshold: number | '' | null) => {\n    const chartRef = this.ref?.getEchartsInstance?.();\n    return (\n      threshold !== '' &&\n      chartRef &&\n      chartRef.convertToPixel({yAxisIndex: 0}, `${threshold}`)\n    );\n  };\n\n  clampMaxValue(value: number) {\n    // When we apply top buffer to the crash free percentage (99.7% * 1.03), it\n    // can cross 100%, so we clamp it\n    if (isSessionAggregate(this.props.aggregate) && value > 100) {\n      return 100;\n    }\n\n    return value;\n  }\n\n  render() {\n    const {\n      data,\n      triggers,\n      period,\n      aggregate,\n      comparisonData,\n      comparisonSeriesName,\n      comparisonMarkLines,\n      minutesThresholdToDisplaySeconds,\n      thresholdType,\n    } = this.props;\n\n    const dataWithoutRecentBucket: AreaChartSeries[] = data?.map(\n      ({data: eventData, ...restOfData}) => ({\n        ...restOfData,\n        data: eventData.slice(0, -1),\n      })\n    );\n\n    const comparisonDataWithoutRecentBucket = comparisonData?.map(\n      ({data: eventData, ...restOfData}) => ({\n        ...restOfData,\n        data: eventData.slice(0, -1),\n      })\n    );\n\n    const chartOptions = {\n      tooltip: {\n        // use the main aggregate for all series (main, min, max, avg, comparison)\n        // to format all values similarly\n        valueFormatter: (value: number) =>\n          alertTooltipValueFormatter(value, aggregate, aggregate),\n\n        formatAxisLabel: (\n          value: number,\n          isTimestamp: boolean,\n          utc: boolean,\n          showTimeInTooltip: boolean,\n          addSecondsToTimeFormat: boolean,\n          bucketSize: number | undefined,\n          seriesParamsOrParam: TooltipComponentFormatterCallbackParams\n        ) => {\n          const date = defaultFormatAxisLabel(\n            value,\n            isTimestamp,\n            utc,\n            showTimeInTooltip,\n            addSecondsToTimeFormat,\n            bucketSize\n          );\n\n          const seriesParams = Array.isArray(seriesParamsOrParam)\n            ? seriesParamsOrParam\n            : [seriesParamsOrParam];\n\n          const pointY = (\n            seriesParams.length > 1 ? seriesParams[0].data[1] : undefined\n          ) as number | undefined;\n\n          const comparisonSeries =\n            seriesParams.length > 1\n              ? seriesParams.find(({seriesName: _sn}) => _sn === comparisonSeriesName)\n              : undefined;\n\n          const comparisonPointY = comparisonSeries?.data[1] as number | undefined;\n\n          if (\n            comparisonPointY === undefined ||\n            pointY === undefined ||\n            comparisonPointY === 0\n          ) {\n            return `<span>${date}</span>`;\n          }\n\n          const changePercentage = ((pointY - comparisonPointY) * 100) / comparisonPointY;\n\n          const changeStatus = getChangeStatus(changePercentage, thresholdType, triggers);\n\n          const changeStatusColor =\n            changeStatus === AlertRuleTriggerType.CRITICAL\n              ? theme.red300\n              : changeStatus === AlertRuleTriggerType.WARNING\n              ? theme.yellow300\n              : theme.green300;\n\n          return `<span>${date}<span style=\"color:${changeStatusColor};margin-left:10px;\">\n            ${Math.sign(changePercentage) === 1 ? '+' : '-'}${Math.abs(\n            changePercentage\n          ).toFixed(2)}%</span></span>`;\n        },\n      },\n      yAxis: {\n        min: this.state.yAxisMin ?? undefined,\n        max: this.state.yAxisMax ?? undefined,\n        axisLabel: {\n          formatter: (value: number) =>\n            alertAxisFormatter(value, data[0].seriesName, aggregate),\n        },\n      },\n    };\n\n    return (\n      <AreaChart\n        isGroupedByDate\n        showTimeInTooltip\n        minutesThresholdToDisplaySeconds={minutesThresholdToDisplaySeconds}\n        period={DEFAULT_STATS_PERIOD || period}\n        forwardedRef={this.handleRef}\n        grid={CHART_GRID}\n        {...chartOptions}\n        graphic={Graphic({\n          elements: flatten(\n            triggers.map((trigger: Trigger) => [\n              ...this.getThresholdLine(trigger, 'alertThreshold', false),\n              ...this.getThresholdLine(trigger, 'resolveThreshold', true),\n            ])\n          ),\n        })}\n        colors={CHART_PALETTE[0]}\n        series={[...dataWithoutRecentBucket, ...comparisonMarkLines]}\n        additionalSeries={comparisonDataWithoutRecentBucket.map(\n          ({data: _data, ...otherSeriesProps}) =>\n            LineSeries({\n              name: comparisonSeriesName,\n              data: _data.map(({name, value}) => [name, value]),\n              lineStyle: {color: theme.gray200, type: 'dashed', width: 1},\n              itemStyle: {color: theme.gray200},\n              animation: false,\n              animationThreshold: 1,\n              animationDuration: 0,\n              ...otherSeriesProps,\n            })\n        )}\n        onFinished={() => {\n          // We want to do this whenever the chart finishes re-rendering so that we can update the dimensions of\n          // any graphics related to the triggers (e.g. the threshold areas + boundaries)\n          this.updateDimensions();\n        }}\n      />\n    );\n  }\n}\n","import {Fragment, PureComponent} from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\nimport maxBy from 'lodash/maxBy';\nimport minBy from 'lodash/minBy';\n\nimport {fetchTotalCount} from 'sentry/actionCreators/events';\nimport {Client} from 'sentry/api';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {LineChartSeries} from 'sentry/components/charts/lineChart';\nimport OptionSelector from 'sentry/components/charts/optionSelector';\nimport SessionsRequest from 'sentry/components/charts/sessionsRequest';\nimport {\n  ChartControls,\n  InlineContainer,\n  SectionHeading,\n  SectionValue,\n} from 'sentry/components/charts/styles';\nimport LoadingMask from 'sentry/components/loadingMask';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport type {Series} from 'sentry/types/echarts';\nimport {\n  getCrashFreeRateSeries,\n  MINUTES_THRESHOLD_TO_DISPLAY_SECONDS,\n} from 'sentry/utils/sessions';\nimport withApi from 'sentry/utils/withApi';\nimport {COMPARISON_DELTA_OPTIONS} from 'sentry/views/alerts/rules/metric/constants';\nimport {isSessionAggregate, SESSION_AGGREGATE_TO_FIELD} from 'sentry/views/alerts/utils';\nimport {getComparisonMarkLines} from 'sentry/views/alerts/utils/getComparisonMarkLines';\nimport {AlertWizardAlertNames} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\nimport {\n  AlertRuleComparisonType,\n  Dataset,\n  MetricRule,\n  SessionsAggregate,\n  TimePeriod,\n  TimeWindow,\n  Trigger,\n} from '../../types';\n\nimport ThresholdsChart from './thresholdsChart';\n\ntype Props = {\n  aggregate: MetricRule['aggregate'];\n  api: Client;\n  comparisonType: AlertRuleComparisonType;\n\n  environment: string | null;\n  organization: Organization;\n  projects: Project[];\n  query: MetricRule['query'];\n  resolveThreshold: MetricRule['resolveThreshold'];\n  thresholdType: MetricRule['thresholdType'];\n  timeWindow: MetricRule['timeWindow'];\n  triggers: Trigger[];\n  comparisonDelta?: number;\n  header?: React.ReactNode;\n};\n\nconst TIME_PERIOD_MAP: Record<TimePeriod, string> = {\n  [TimePeriod.SIX_HOURS]: t('Last 6 hours'),\n  [TimePeriod.ONE_DAY]: t('Last 24 hours'),\n  [TimePeriod.THREE_DAYS]: t('Last 3 days'),\n  [TimePeriod.SEVEN_DAYS]: t('Last 7 days'),\n  [TimePeriod.FOURTEEN_DAYS]: t('Last 14 days'),\n  [TimePeriod.THIRTY_DAYS]: t('Last 30 days'),\n};\n\n/**\n * Just to avoid repeating it\n */\nconst MOST_TIME_PERIODS: readonly TimePeriod[] = [\n  TimePeriod.ONE_DAY,\n  TimePeriod.THREE_DAYS,\n  TimePeriod.SEVEN_DAYS,\n  TimePeriod.FOURTEEN_DAYS,\n  TimePeriod.THIRTY_DAYS,\n];\n\n/**\n * TimeWindow determines data available in TimePeriod\n * If TimeWindow is small, lower TimePeriod to limit data points\n */\nconst AVAILABLE_TIME_PERIODS: Record<TimeWindow, readonly TimePeriod[]> = {\n  [TimeWindow.ONE_MINUTE]: [\n    TimePeriod.SIX_HOURS,\n    TimePeriod.ONE_DAY,\n    TimePeriod.THREE_DAYS,\n    TimePeriod.SEVEN_DAYS,\n  ],\n  [TimeWindow.FIVE_MINUTES]: MOST_TIME_PERIODS,\n  [TimeWindow.TEN_MINUTES]: MOST_TIME_PERIODS,\n  [TimeWindow.FIFTEEN_MINUTES]: MOST_TIME_PERIODS,\n  [TimeWindow.THIRTY_MINUTES]: MOST_TIME_PERIODS,\n  [TimeWindow.ONE_HOUR]: MOST_TIME_PERIODS,\n  [TimeWindow.TWO_HOURS]: MOST_TIME_PERIODS,\n  [TimeWindow.FOUR_HOURS]: [\n    TimePeriod.THREE_DAYS,\n    TimePeriod.SEVEN_DAYS,\n    TimePeriod.FOURTEEN_DAYS,\n    TimePeriod.THIRTY_DAYS,\n  ],\n  [TimeWindow.ONE_DAY]: [TimePeriod.THIRTY_DAYS],\n};\n\nconst TIME_WINDOW_TO_SESSION_INTERVAL = {\n  [TimeWindow.THIRTY_MINUTES]: '30m',\n  [TimeWindow.ONE_HOUR]: '1h',\n  [TimeWindow.TWO_HOURS]: '2h',\n  [TimeWindow.FOUR_HOURS]: '4h',\n  [TimeWindow.ONE_DAY]: '1d',\n};\n\nconst SESSION_AGGREGATE_TO_HEADING = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: t('Total Sessions'),\n  [SessionsAggregate.CRASH_FREE_USERS]: t('Total Users'),\n};\n\ntype State = {\n  statsPeriod: TimePeriod;\n  totalCount: number | null;\n};\n\n/**\n * This is a chart to be used in Metric Alert rules that fetches events based on\n * query, timewindow, and aggregations.\n */\nclass TriggersChart extends PureComponent<Props, State> {\n  state: State = {\n    statsPeriod: TimePeriod.SEVEN_DAYS,\n    totalCount: null,\n  };\n\n  componentDidMount() {\n    if (!isSessionAggregate(this.props.aggregate)) {\n      this.fetchTotalCount();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const {query, environment, timeWindow, aggregate, projects} = this.props;\n    const {statsPeriod} = this.state;\n    if (\n      !isSessionAggregate(aggregate) &&\n      (prevProps.projects !== projects ||\n        prevProps.environment !== environment ||\n        prevProps.query !== query ||\n        prevProps.timeWindow !== timeWindow ||\n        prevState.statsPeriod !== statsPeriod)\n    ) {\n      this.fetchTotalCount();\n    }\n  }\n\n  get availableTimePeriods() {\n    // We need to special case sessions, because sub-hour windows are available\n    // only when time period is six hours or less (backend limitation)\n    if (isSessionAggregate(this.props.aggregate)) {\n      return {\n        ...AVAILABLE_TIME_PERIODS,\n        [TimeWindow.THIRTY_MINUTES]: [TimePeriod.SIX_HOURS],\n      };\n    }\n\n    return AVAILABLE_TIME_PERIODS;\n  }\n\n  handleStatsPeriodChange = (timePeriod: string) => {\n    this.setState({statsPeriod: timePeriod as TimePeriod});\n  };\n\n  getStatsPeriod = () => {\n    const {statsPeriod} = this.state;\n    const {timeWindow} = this.props;\n    const statsPeriodOptions = this.availableTimePeriods[timeWindow];\n    const period = statsPeriodOptions.includes(statsPeriod)\n      ? statsPeriod\n      : statsPeriodOptions[statsPeriodOptions.length - 1];\n    return period;\n  };\n\n  get comparisonSeriesName() {\n    return capitalize(\n      COMPARISON_DELTA_OPTIONS.find(({value}) => value === this.props.comparisonDelta)\n        ?.label || ''\n    );\n  }\n\n  async fetchTotalCount() {\n    const {api, organization, environment, projects, query} = this.props;\n    const statsPeriod = this.getStatsPeriod();\n    try {\n      const totalCount = await fetchTotalCount(api, organization.slug, {\n        field: [],\n        project: projects.map(({id}) => id),\n        query,\n        statsPeriod,\n        environment: environment ? [environment] : [],\n      });\n      this.setState({totalCount});\n    } catch (e) {\n      this.setState({totalCount: null});\n    }\n  }\n\n  renderChart(\n    timeseriesData: Series[] = [],\n    isLoading: boolean,\n    isReloading: boolean,\n    comparisonData?: Series[],\n    comparisonMarkLines?: LineChartSeries[],\n    minutesThresholdToDisplaySeconds?: number\n  ) {\n    const {\n      triggers,\n      resolveThreshold,\n      thresholdType,\n      header,\n      timeWindow,\n      aggregate,\n      comparisonType,\n    } = this.props;\n    const {statsPeriod, totalCount} = this.state;\n    const statsPeriodOptions = this.availableTimePeriods[timeWindow];\n    const period = this.getStatsPeriod();\n    return (\n      <Fragment>\n        {header}\n        <TransparentLoadingMask visible={isReloading} />\n        {isLoading ? (\n          <ChartPlaceholder />\n        ) : (\n          <ThresholdsChart\n            period={statsPeriod}\n            minValue={minBy(timeseriesData[0]?.data, ({value}) => value)?.value}\n            maxValue={maxBy(timeseriesData[0]?.data, ({value}) => value)?.value}\n            data={timeseriesData}\n            comparisonData={comparisonData ?? []}\n            comparisonSeriesName={this.comparisonSeriesName}\n            comparisonMarkLines={comparisonMarkLines ?? []}\n            hideThresholdLines={comparisonType === AlertRuleComparisonType.CHANGE}\n            triggers={triggers}\n            resolveThreshold={resolveThreshold}\n            thresholdType={thresholdType}\n            aggregate={aggregate}\n            minutesThresholdToDisplaySeconds={minutesThresholdToDisplaySeconds}\n          />\n        )}\n        <ChartControls>\n          <InlineContainer>\n            <SectionHeading>\n              {isSessionAggregate(aggregate)\n                ? SESSION_AGGREGATE_TO_HEADING[aggregate]\n                : t('Total Events')}\n            </SectionHeading>\n            <SectionValue>\n              {totalCount !== null ? totalCount.toLocaleString() : '\\u2014'}\n            </SectionValue>\n          </InlineContainer>\n          <InlineContainer>\n            <OptionSelector\n              options={statsPeriodOptions.map(timePeriod => ({\n                label: TIME_PERIOD_MAP[timePeriod],\n                value: timePeriod,\n                disabled: isLoading || isReloading,\n              }))}\n              selected={period}\n              onChange={this.handleStatsPeriodChange}\n              title={t('Display')}\n            />\n          </InlineContainer>\n        </ChartControls>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {\n      api,\n      organization,\n      projects,\n      timeWindow,\n      query,\n      aggregate,\n      environment,\n      comparisonDelta,\n      triggers,\n      thresholdType,\n    } = this.props;\n\n    const period = this.getStatsPeriod();\n    const renderComparisonStats = Boolean(\n      organization.features.includes('change-alerts') && comparisonDelta\n    );\n\n    return isSessionAggregate(aggregate) ? (\n      <SessionsRequest\n        api={api}\n        organization={organization}\n        project={projects.map(({id}) => Number(id))}\n        environment={environment ? [environment] : undefined}\n        statsPeriod={period}\n        query={query}\n        interval={TIME_WINDOW_TO_SESSION_INTERVAL[timeWindow]}\n        field={SESSION_AGGREGATE_TO_FIELD[aggregate]}\n        groupBy={['session.status']}\n      >\n        {({loading, reloading, response}) => {\n          const {groups, intervals} = response || {};\n          const sessionTimeSeries = [\n            {\n              seriesName:\n                AlertWizardAlertNames[\n                  getAlertTypeFromAggregateDataset({aggregate, dataset: Dataset.SESSIONS})\n                ],\n              data: getCrashFreeRateSeries(\n                groups,\n                intervals,\n                SESSION_AGGREGATE_TO_FIELD[aggregate]\n              ),\n            },\n          ];\n\n          return this.renderChart(\n            sessionTimeSeries,\n            loading,\n            reloading,\n            undefined,\n            undefined,\n            MINUTES_THRESHOLD_TO_DISPLAY_SECONDS\n          );\n        }}\n      </SessionsRequest>\n    ) : (\n      <EventsRequest\n        api={api}\n        organization={organization}\n        query={query}\n        environment={environment ? [environment] : undefined}\n        project={projects.map(({id}) => Number(id))}\n        interval={`${timeWindow}m`}\n        comparisonDelta={comparisonDelta && comparisonDelta * 60}\n        period={period}\n        yAxis={aggregate}\n        includePrevious={false}\n        currentSeriesNames={[aggregate]}\n        partial={false}\n      >\n        {({loading, reloading, timeseriesData, comparisonTimeseriesData}) => {\n          let comparisonMarkLines: LineChartSeries[] = [];\n          if (renderComparisonStats && comparisonTimeseriesData) {\n            comparisonMarkLines = getComparisonMarkLines(\n              timeseriesData,\n              comparisonTimeseriesData,\n              timeWindow,\n              triggers,\n              thresholdType\n            );\n          }\n\n          return this.renderChart(\n            timeseriesData,\n            loading,\n            reloading,\n            comparisonTimeseriesData,\n            comparisonMarkLines\n          );\n        }}\n      </EventsRequest>\n    );\n  }\n}\n\nexport default withApi(TriggersChart);\n\nconst TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nconst ChartPlaceholder = styled(Placeholder)`\n  /* Height and margin should add up to graph size (200px) */\n  margin: 0 0 ${space(2)};\n  height: 184px;\n`;\n","import MarkLine from 'sentry/components/charts/components/markLine';\nimport {LineChartSeries} from 'sentry/components/charts/lineChart';\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {MINUTE} from 'sentry/utils/formatters';\nimport theme from 'sentry/utils/theme';\nimport {\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Trigger,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {getChangeStatus} from 'sentry/views/alerts/utils/getChangeStatus';\n\nexport const getComparisonMarkLines = (\n  timeseriesData: Series[] = [],\n  comparisonTimeseriesData: Series[] = [],\n  timeWindow: number,\n  triggers: Trigger[],\n  thresholdType: AlertRuleThresholdType\n): LineChartSeries[] => {\n  const changeStatuses: {name: number | string; status: string}[] = [];\n\n  if (\n    timeseriesData?.[0]?.data !== undefined &&\n    timeseriesData[0].data.length > 1 &&\n    comparisonTimeseriesData?.[0]?.data !== undefined &&\n    comparisonTimeseriesData[0].data.length > 1\n  ) {\n    const changeData = comparisonTimeseriesData[0].data;\n    const baseData = timeseriesData[0].data;\n\n    if (triggers.some(({alertThreshold}) => typeof alertThreshold === 'number')) {\n      const lastPointLimit =\n        (baseData[changeData.length - 1].name as number) - timeWindow * MINUTE;\n      changeData.forEach(({name, value: comparisonValue}, idx) => {\n        const baseValue = baseData[idx].value;\n        const comparisonPercentage =\n          comparisonValue === 0\n            ? baseValue === 0\n              ? 0\n              : Infinity\n            : ((baseValue - comparisonValue) / comparisonValue) * 100;\n        const status = getChangeStatus(comparisonPercentage, thresholdType, triggers);\n        if (\n          idx === 0 ||\n          idx === changeData.length - 1 ||\n          status !== changeStatuses[changeStatuses.length - 1].status\n        ) {\n          changeStatuses.push({name, status});\n        }\n      });\n\n      return changeStatuses.slice(0, -1).map(({name, status}, idx) => ({\n        seriesName: t('status'),\n        type: 'line',\n        markLine: MarkLine({\n          silent: true,\n          lineStyle: {\n            color:\n              status === AlertRuleTriggerType.CRITICAL\n                ? theme.red300\n                : status === AlertRuleTriggerType.WARNING\n                ? theme.yellow300\n                : theme.green300,\n            type: 'solid',\n            width: 4,\n          },\n          data: [\n            [\n              {coord: [name, 0]},\n              {\n                coord: [\n                  Math.min(changeStatuses[idx + 1].name as number, lastPointLimit),\n                  0,\n                ],\n              },\n            ],\n          ],\n        }),\n        data: [],\n      }));\n    }\n  }\n\n  return [];\n};\n","import {defined} from 'sentry/utils';\n\n/**\n * A threshold has a value if it is not one of the following:\n *\n * '', null, undefined\n *\n *\n */\nexport default function hasThresholdValue(value: number | '' | null): value is number {\n  return defined(value) && value !== '';\n}\n","import {Client} from 'sentry/api';\n\nimport {MetricRule, SavedMetricRule} from './types';\n\nfunction isSavedRule(rule: MetricRule): rule is SavedMetricRule {\n  return !!rule.id;\n}\n\n/**\n * Add a new rule or update an existing rule\n *\n * @param api API Client\n * @param orgId Organization slug\n * @param rule Saved or Unsaved Metric Rule\n * @param query Query parameters for the request eg - referrer\n */\nexport function addOrUpdateRule(\n  api: Client,\n  orgId: string,\n  projectId: string,\n  rule: MetricRule,\n  query?: object | any\n) {\n  const isExisting = isSavedRule(rule);\n  const endpoint = `/projects/${orgId}/${projectId}/alert-rules/${\n    isSavedRule(rule) ? `${rule.id}/` : ''\n  }`;\n  const method = isExisting ? 'PUT' : 'POST';\n\n  return api.requestPromise(endpoint, {\n    method,\n    data: rule,\n    query,\n    includeAllArgs: true,\n  });\n}\n\n/**\n * Delete an existing rule\n *\n * @param api API Client\n * @param orgId Organization slug\n * @param rule Saved or Unsaved Metric Rule\n */\nexport function deleteRule(\n  api: Client,\n  orgId: string,\n  rule: SavedMetricRule\n): Promise<void> {\n  return api.requestPromise(`/organizations/${orgId}/alert-rules/${rule.id}/`, {\n    method: 'DELETE',\n  });\n}\n","import {NewQuery, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {Dataset} from 'sentry/views/alerts/rules/metric/types';\nimport {Incident, IncidentStats} from 'sentry/views/alerts/types';\nimport {getStartEndFromStats} from 'sentry/views/alerts/utils';\n/**\n * Gets the URL for a discover view of the incident with the following default\n * parameters:\n *\n * - Ordered by the incident aggregate, descending\n * - yAxis maps to the aggregate\n * - The following fields are displayed:\n *   - For Error dataset alerts: [issue, count(), count_unique(user)]\n *   - For Transaction dataset alerts: [transaction, count()]\n * - Start and end are scoped to the same period as the alert rule\n */\nexport function getIncidentDiscoverUrl(opts: {\n  orgSlug: string;\n  projects: Project[];\n  extraQueryParams?: Partial<NewQuery>;\n  incident?: Incident;\n  stats?: IncidentStats;\n}) {\n  const {orgSlug, projects, incident, stats, extraQueryParams} = opts;\n\n  if (!projects || !projects.length || !incident || !stats) {\n    return '';\n  }\n\n  const timeWindowString = `${incident.alertRule.timeWindow}m`;\n  const {start, end} = getStartEndFromStats(stats);\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: (incident && incident.title) || '',\n    orderby: `-${getAggregateAlias(incident.alertRule.aggregate)}`,\n    yAxis: incident.alertRule.aggregate ? [incident.alertRule.aggregate] : undefined,\n    query: incident?.discoverQuery ?? '',\n    projects: projects\n      .filter(({slug}) => incident.projects.includes(slug))\n      .map(({id}) => Number(id)),\n    version: 2,\n    fields:\n      incident.alertRule.dataset === Dataset.ERRORS\n        ? ['issue', 'count()', 'count_unique(user)']\n        : ['transaction', incident.alertRule.aggregate],\n    start,\n    end,\n    ...extraQueryParams,\n  };\n\n  const discoverView = EventView.fromSavedQuery(discoverQuery);\n  const {query, ...toObject} = discoverView.getResultsViewUrlTarget(orgSlug);\n\n  return {\n    query: {...query, interval: timeWindowString},\n    ...toObject,\n  };\n}\n","import type {LinkProps} from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {DisplayModes} from 'sentry/utils/discover/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {Incident, IncidentStats} from 'sentry/views/alerts/types';\nimport {getStartEndFromStats} from 'sentry/views/alerts/utils';\nimport {getIncidentDiscoverUrl} from 'sentry/views/alerts/utils/getIncidentDiscoverUrl';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport {Dataset} from './types';\n\ntype PresetCta = {\n  /**\n   * The CTA text\n   */\n  buttonText: string;\n  /**\n   * The location to direct to upon clicking the CTA.\n   */\n  to: LinkProps['to'];\n  /**\n   * The tooltip title for the CTA button, may be empty.\n   */\n  title?: string;\n};\n\ntype PresetCtaOpts = {\n  orgSlug: string;\n  projects: Project[];\n  incident?: Incident;\n  stats?: IncidentStats;\n};\n\ntype Preset = {\n  /**\n   * The default aggregate to use when selecting this preset\n   */\n  default: string;\n  /**\n   * Generates the CTA component\n   */\n  makeCtaParams: (opts: PresetCtaOpts) => PresetCta;\n  /**\n   * The regex used to match aggregates to this preset.\n   */\n  match: RegExp;\n  /**\n   * The name of the preset\n   */\n  name: string;\n  /**\n   * The dataset that this preset applys to.\n   */\n  validDataset: Dataset[];\n};\n\nexport const PRESET_AGGREGATES: Preset[] = [\n  {\n    name: t('Error count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count()',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Users affected'),\n    match: /^count_unique\\(user\\)/,\n    validDataset: [Dataset.ERRORS],\n    default: 'count_unique(user)',\n    /**\n     * Simple \"Open in Discover\" button\n     */\n    makeCtaParams: makeDefaultCta,\n  },\n  {\n    name: t('Latency'),\n    match: /^(p[0-9]{2,3}|percentile\\(transaction\\.duration,[^)]+\\)|avg\\([^)]+\\))/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'percentile(transaction.duration, 0.95)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Latency by Transaction'),\n      }),\n  },\n  {\n    name: t('Apdex'),\n    match: /^apdex\\([0-9.]+\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'apdex(300)',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts =>\n      makeGenericTransactionCta({\n        opts,\n        tooltip: t('Apdex by Transaction'),\n      }),\n  },\n  {\n    name: t('Transaction Count'),\n    match: /^count\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'count()',\n    /**\n     * see: makeGenericTransactionCta\n     */\n    makeCtaParams: opts => makeGenericTransactionCta({opts}),\n  },\n  {\n    name: t('Failure rate'),\n    match: /^failure_rate\\(\\)/,\n    validDataset: [Dataset.TRANSACTIONS],\n    default: 'failure_rate()',\n    /**\n     * See makeFailureRateCta\n     */\n    makeCtaParams: makeFailureRateCta,\n  },\n];\n\n/**\n * - CASE 1: If has a specific transaction filter\n *   - CTA is: \"View Transaction Summary\"\n *   - Tooltip is the transaction name\n *   - the same period as the alert graph (i.e. with alert start time in the middle)\n *\n * - CASE 2: If transaction is NOT filtered, or has a * filter:\n *   - \"Open in Discover\" button with optional tooltip which opens a discover view with...\n *      - fields {transaction, count(), <metric>} sorted by count()\n *      - top-5 activated\n */\nfunction makeGenericTransactionCta(opts: {\n  opts: PresetCtaOpts;\n  tooltip?: string;\n}): PresetCta {\n  const {\n    opts: {orgSlug, projects, incident, stats},\n    tooltip,\n  } = opts;\n\n  if (!incident || !stats) {\n    return {to: '', buttonText: t('Incident details')};\n  }\n\n  const query = new MutableSearch(incident.discoverQuery ?? '');\n  const transaction = query\n    .getFilterValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  // CASE 1\n  if (transaction !== undefined) {\n    const period = getStartEndFromStats(stats);\n\n    const summaryUrl = transactionSummaryRouteWithQuery({\n      orgSlug,\n      transaction,\n      projectID: projects\n        .filter(({slug}) => incident.projects.includes(slug))\n        .map(({id}) => id),\n      query: {...period},\n    });\n\n    return {\n      to: summaryUrl,\n      buttonText: t('View Transaction Summary'),\n      title: transaction,\n    };\n  }\n\n  // CASE 2\n  const extraQueryParams = {\n    fields: [...new Set(['transaction', 'count()', incident.alertRule.aggregate])],\n    orderby: '-count',\n    display: DisplayModes.TOP5,\n  };\n\n  const discoverUrl = getIncidentDiscoverUrl({\n    orgSlug,\n    projects,\n    incident,\n    stats,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: tooltip,\n  };\n}\n\n/**\n * - CASE 1: Filtered to a specific transaction, \"Open in Discover\" with...\n *   - fields [transaction.status, count()] sorted by count(),\n *   - \"Top 5 period\" activated.\n *\n * - CASE 2: If filtered on multiple transactions, \"Open in Discover\" button\n *   with tooltip \"Failure rate by transaction\" which opens a discover view\n *   - fields [transaction, failure_rate()] sorted by failure_rate\n *   - top 5 activated\n */\nfunction makeFailureRateCta({orgSlug, incident, projects, stats}: PresetCtaOpts) {\n  if (!incident || !stats) {\n    return {to: '', buttonText: t('Incident details')};\n  }\n\n  const query = new MutableSearch(incident.discoverQuery ?? '');\n  const transaction = query\n    .getFilterValues('transaction')\n    ?.find(filter => !filter.includes('*'));\n\n  const extraQueryParams =\n    transaction !== undefined\n      ? // CASE 1\n        {\n          fields: ['transaction.status', 'count()'],\n          orderby: '-count',\n          display: DisplayModes.TOP5,\n        }\n      : // Case 2\n        {\n          fields: ['transaction', 'failure_rate()'],\n          orderby: '-failure_rate',\n          display: DisplayModes.TOP5,\n        };\n\n  const discoverUrl = getIncidentDiscoverUrl({\n    orgSlug,\n    projects,\n    incident,\n    stats,\n    extraQueryParams,\n  });\n\n  return {\n    to: discoverUrl,\n    buttonText: t('Open in Discover'),\n    title: transaction === undefined ? t('Failure rate by transaction') : undefined,\n  };\n}\n\n/**\n * Get the CTA used for alerts that do not have a preset\n */\nfunction makeDefaultCta({orgSlug, projects, incident, stats}: PresetCtaOpts): PresetCta {\n  if (!incident) {\n    return {\n      buttonText: t('Open in Discover'),\n      to: '',\n    };\n  }\n\n  const extraQueryParams = {\n    display: DisplayModes.TOP5,\n  };\n\n  return {\n    buttonText: t('Open in Discover'),\n    to: getIncidentDiscoverUrl({orgSlug, projects, incident, stats, extraQueryParams}),\n  };\n}\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport FormField from 'sentry/components/forms/formField';\nimport FormModel from 'sentry/components/forms/model';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Aggregation,\n  AGGREGATIONS,\n  ColumnType,\n  explodeFieldString,\n  FIELDS,\n  generateFieldAsString,\n} from 'sentry/utils/discover/fields';\nimport {\n  AlertType,\n  hideParameterSelectorSet,\n  hidePrimarySelectorSet,\n} from 'sentry/views/alerts/wizard/options';\nimport {QueryField} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport {\n  errorFieldConfig,\n  getWizardAlertFieldConfig,\n  OptionConfig,\n  transactionFieldConfig,\n} from './constants';\nimport {PRESET_AGGREGATES} from './presets';\nimport {Dataset} from './types';\n\ntype Props = Omit<FormField['props'], 'children'> & {\n  organization: Organization;\n  alertType?: AlertType;\n  /**\n   * Optionally set a width for each column of selector\n   */\n  columnWidth?: number;\n  inFieldLabels?: boolean;\n};\n\nexport const getFieldOptionConfig = ({\n  dataset,\n  alertType,\n}: {\n  dataset: Dataset;\n  alertType?: AlertType;\n}) => {\n  let config: OptionConfig;\n  let hidePrimarySelector = false;\n  let hideParameterSelector = false;\n  if (alertType) {\n    config = getWizardAlertFieldConfig(alertType, dataset);\n    hidePrimarySelector = hidePrimarySelectorSet.has(alertType);\n    hideParameterSelector = hideParameterSelectorSet.has(alertType);\n  } else {\n    config = dataset === Dataset.ERRORS ? errorFieldConfig : transactionFieldConfig;\n  }\n  const aggregations = Object.fromEntries<Aggregation>(\n    config.aggregations.map(key => {\n      // TODO(scttcper): Temporary hack for default value while we handle the translation of user\n      if (key === 'count_unique') {\n        const agg = AGGREGATIONS[key] as Aggregation;\n        agg.getFieldOverrides = () => {\n          return {defaultValue: 'tags[sentry:user]'};\n        };\n        return [key, agg];\n      }\n\n      return [key, AGGREGATIONS[key]];\n    })\n  );\n\n  const fields = Object.fromEntries<ColumnType>(\n    config.fields.map(key => {\n      // XXX(epurkhiser): Temporary hack while we handle the translation of user ->\n      // tags[sentry:user].\n      if (key === 'user') {\n        return ['tags[sentry:user]', 'string'];\n      }\n\n      return [key, FIELDS[key]];\n    })\n  );\n\n  const {measurementKeys} = config;\n\n  return {\n    fieldOptionsConfig: {aggregations, fields, measurementKeys},\n    hidePrimarySelector,\n    hideParameterSelector,\n  };\n};\n\nconst help = ({name, model}: {model: FormModel; name: string}) => {\n  const aggregate = model.getValue(name) as string;\n\n  const presets = PRESET_AGGREGATES.filter(preset =>\n    preset.validDataset.includes(model.getValue('dataset') as Dataset)\n  )\n    .map(preset => ({...preset, selected: preset.match.test(aggregate)}))\n    .map((preset, i, list) => (\n      <Fragment key={preset.name}>\n        <Tooltip title={t('This preset is selected')} disabled={!preset.selected}>\n          <PresetButton\n            type=\"button\"\n            onClick={() => model.setValue(name, preset.default)}\n            disabled={preset.selected}\n          >\n            {preset.name}\n          </PresetButton>\n        </Tooltip>\n        {i + 1 < list.length && ', '}\n      </Fragment>\n    ));\n\n  return tct(\n    'Choose an aggregate function. Not sure what to select, try a preset: [presets]',\n    {presets}\n  );\n};\n\nconst MetricField = ({\n  organization,\n  columnWidth,\n  inFieldLabels,\n  alertType,\n  ...props\n}: Props) => (\n  <FormField help={help} {...props}>\n    {({onChange, value, model, disabled}) => {\n      const dataset = model.getValue('dataset');\n\n      const {fieldOptionsConfig, hidePrimarySelector, hideParameterSelector} =\n        getFieldOptionConfig({\n          dataset: dataset as Dataset,\n          alertType,\n        });\n      const fieldOptions = generateFieldOptions({organization, ...fieldOptionsConfig});\n      const fieldValue = explodeFieldString(value ?? '');\n\n      const fieldKey =\n        fieldValue?.kind === FieldValueKind.FUNCTION\n          ? `function:${fieldValue.function[0]}`\n          : '';\n\n      const selectedField = fieldOptions[fieldKey]?.value;\n      const numParameters: number =\n        selectedField?.kind === FieldValueKind.FUNCTION\n          ? selectedField.meta.parameters.length\n          : 0;\n\n      const parameterColumns =\n        numParameters - (hideParameterSelector ? 1 : 0) - (hidePrimarySelector ? 1 : 0);\n\n      return (\n        <Fragment>\n          <StyledQueryField\n            filterPrimaryOptions={option => option.value.kind === FieldValueKind.FUNCTION}\n            fieldOptions={fieldOptions}\n            fieldValue={fieldValue}\n            onChange={v => onChange(generateFieldAsString(v), {})}\n            columnWidth={columnWidth}\n            gridColumns={parameterColumns + 1}\n            inFieldLabels={inFieldLabels}\n            shouldRenderTag={false}\n            disabled={disabled}\n            hideParameterSelector={hideParameterSelector}\n            hidePrimarySelector={hidePrimarySelector}\n          />\n        </Fragment>\n      );\n    }}\n  </FormField>\n);\n\nconst StyledQueryField = styled(QueryField)<{gridColumns: number; columnWidth?: number}>`\n  ${p =>\n    p.columnWidth &&\n    css`\n      width: ${p.gridColumns * p.columnWidth}px;\n    `}\n`;\n\nconst PresetButton = styled(Button)<{disabled: boolean}>`\n  ${p =>\n    p.disabled &&\n    css`\n      color: ${p.theme.textColor};\n      &:hover,\n      &:focus {\n        color: ${p.theme.textColor};\n      }\n    `}\n`;\n\nPresetButton.defaultProps = {\n  priority: 'link',\n  borderless: true,\n};\n\nexport default MetricField;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport findKey from 'lodash/findKey';\n\nimport FormField from 'sentry/components/forms/formField';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {\n  AggregationKey,\n  AggregationRefinement,\n  explodeFieldString,\n  generateFieldAsString,\n} from 'sentry/utils/discover/fields';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {QueryField} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport {getFieldOptionConfig} from './metricField';\n\ntype WizardAggregateFunctionValue = {\n  function: [AggregationKey, string, AggregationRefinement, AggregationRefinement];\n  kind: 'function';\n  alias?: string;\n};\n\ntype WizardAggregateFieldValue = {\n  field: string;\n  kind: 'field';\n  alias?: string;\n};\n\ntype MenuOption = {label: string; value: AlertType};\n\ntype Props = Omit<FormField['props'], 'children'> & {\n  organization: Organization;\n  alertType?: AlertType;\n  /**\n   * Optionally set a width for each column of selector\n   */\n  columnWidth?: number;\n  inFieldLabels?: boolean;\n};\n\nconst menuOptions: {label: string; options: Array<MenuOption>}[] = [\n  {\n    label: t('ERRORS'),\n    options: [\n      {\n        label: AlertWizardAlertNames.num_errors,\n        value: 'num_errors',\n      },\n      {\n        label: AlertWizardAlertNames.users_experiencing_errors,\n        value: 'users_experiencing_errors',\n      },\n    ],\n  },\n\n  {\n    label: t('SESSIONS'),\n    options: [\n      {\n        label: AlertWizardAlertNames.crash_free_sessions,\n        value: 'crash_free_sessions',\n      },\n      {\n        label: AlertWizardAlertNames.crash_free_users,\n        value: 'crash_free_users',\n      },\n    ],\n  },\n\n  {\n    label: t('PERFORMANCE'),\n    options: [\n      {\n        label: AlertWizardAlertNames.throughput,\n        value: 'throughput',\n      },\n      {\n        label: AlertWizardAlertNames.trans_duration,\n        value: 'trans_duration',\n      },\n      {\n        label: AlertWizardAlertNames.apdex,\n        value: 'apdex',\n      },\n      {\n        label: AlertWizardAlertNames.failure_rate,\n        value: 'failure_rate',\n      },\n      {\n        label: AlertWizardAlertNames.lcp,\n        value: 'lcp',\n      },\n      {\n        label: AlertWizardAlertNames.fid,\n        value: 'fid',\n      },\n      {\n        label: AlertWizardAlertNames.cls,\n        value: 'cls',\n      },\n    ],\n  },\n\n  {\n    label: t('CUSTOM'),\n    options: [\n      {\n        label: AlertWizardAlertNames.custom,\n        value: 'custom',\n      },\n    ],\n  },\n];\n\nexport default function WizardField({\n  organization,\n  columnWidth,\n  inFieldLabels,\n  alertType,\n  ...fieldProps\n}: Props) {\n  const matchTemplateAggregate = (\n    template: WizardRuleTemplate,\n    aggregate: string\n  ): boolean => {\n    const templateFieldValue = explodeFieldString(template.aggregate) as\n      | WizardAggregateFieldValue\n      | WizardAggregateFunctionValue;\n    const aggregateFieldValue = explodeFieldString(aggregate) as\n      | WizardAggregateFieldValue\n      | WizardAggregateFunctionValue;\n\n    if (template.aggregate === aggregate) {\n      return true;\n    }\n\n    if (\n      templateFieldValue.kind !== 'function' ||\n      aggregateFieldValue.kind !== 'function'\n    ) {\n      return false;\n    }\n\n    if (\n      templateFieldValue.function?.[0] === 'apdex' &&\n      aggregateFieldValue.function?.[0] === 'apdex'\n    ) {\n      return true;\n    }\n\n    return templateFieldValue.function?.[1] && aggregateFieldValue.function?.[1]\n      ? templateFieldValue.function?.[1] === aggregateFieldValue.function?.[1]\n      : templateFieldValue.function?.[0] === aggregateFieldValue.function?.[0];\n  };\n\n  const matchTemplateDataset = (\n    template: WizardRuleTemplate,\n    dataset: Dataset\n  ): boolean =>\n    template.dataset === dataset ||\n    (organization.features.includes('alert-crash-free-metrics') &&\n      (template.aggregate === SessionsAggregate.CRASH_FREE_SESSIONS ||\n        template.aggregate === SessionsAggregate.CRASH_FREE_USERS) &&\n      dataset === Dataset.METRICS);\n\n  const matchTemplateEventTypes = (\n    template: WizardRuleTemplate,\n    eventTypes: EventTypes[],\n    aggregate: string\n  ): boolean =>\n    aggregate === SessionsAggregate.CRASH_FREE_SESSIONS ||\n    aggregate === SessionsAggregate.CRASH_FREE_USERS ||\n    eventTypes.includes(template.eventTypes);\n\n  return (\n    <FormField {...fieldProps}>\n      {({onChange, value: aggregate, model, disabled}) => {\n        const dataset: Dataset = model.getValue('dataset');\n        const eventTypes = [...(model.getValue('eventTypes') ?? [])];\n\n        const selectedTemplate =\n          alertType === 'custom'\n            ? alertType\n            : findKey(\n                AlertWizardRuleTemplates,\n                template =>\n                  matchTemplateAggregate(template, aggregate) &&\n                  matchTemplateDataset(template, dataset) &&\n                  matchTemplateEventTypes(template, eventTypes, aggregate)\n              ) || 'num_errors';\n\n        const {fieldOptionsConfig, hidePrimarySelector, hideParameterSelector} =\n          getFieldOptionConfig({\n            dataset: dataset as Dataset,\n            alertType,\n          });\n        const fieldOptions = generateFieldOptions({organization, ...fieldOptionsConfig});\n        const fieldValue = explodeFieldString(aggregate ?? '');\n\n        const fieldKey =\n          fieldValue?.kind === FieldValueKind.FUNCTION\n            ? `function:${fieldValue.function[0]}`\n            : '';\n\n        const selectedField = fieldOptions[fieldKey]?.value;\n        const numParameters: number =\n          selectedField?.kind === FieldValueKind.FUNCTION\n            ? selectedField.meta.parameters.length\n            : 0;\n\n        const gridColumns =\n          1 +\n          numParameters -\n          (hideParameterSelector ? 1 : 0) -\n          (hidePrimarySelector ? 1 : 0);\n\n        return (\n          <Container hideGap={gridColumns < 1}>\n            <SelectControl\n              value={selectedTemplate}\n              options={menuOptions}\n              onChange={(option: MenuOption) => {\n                const template = AlertWizardRuleTemplates[option.value];\n\n                model.setValue('aggregate', template.aggregate);\n                model.setValue('dataset', template.dataset);\n                model.setValue('eventTypes', [template.eventTypes]);\n              }}\n            />\n            <StyledQueryField\n              filterPrimaryOptions={option =>\n                option.value.kind === FieldValueKind.FUNCTION\n              }\n              fieldOptions={fieldOptions}\n              fieldValue={fieldValue}\n              onChange={v => onChange(generateFieldAsString(v), {})}\n              columnWidth={columnWidth}\n              gridColumns={gridColumns}\n              inFieldLabels={inFieldLabels}\n              shouldRenderTag={false}\n              disabled={disabled}\n              hideParameterSelector={hideParameterSelector}\n              hidePrimarySelector={hidePrimarySelector}\n            />\n          </Container>\n        );\n      }}\n    </FormField>\n  );\n}\n\nconst Container = styled('div')<{hideGap: boolean}>`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  gap: ${p => (p.hideGap ? space(0) : space(1))};\n`;\n\nconst StyledQueryField = styled(QueryField)<{gridColumns: number; columnWidth?: number}>`\n  ${p =>\n    p.columnWidth &&\n    css`\n      width: ${p.gridColumns * p.columnWidth}px;\n    `}\n`;\n","import {Fragment, PureComponent} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {components} from 'react-select';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport FormField from 'sentry/components/forms/formField';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport SelectField from 'sentry/components/forms/selectField';\nimport IdBadge from 'sentry/components/idBadge';\nimport ListItem from 'sentry/components/list/listItem';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconQuestion} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Environment, Organization, Project, SelectValue} from 'sentry/types';\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {getDisplayName} from 'sentry/utils/environment';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport withProjects from 'sentry/utils/withProjects';\nimport WizardField from 'sentry/views/alerts/rules/metric/wizardField';\nimport {\n  convertDatasetEventTypesToSource,\n  DATA_SOURCE_LABELS,\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, getFunctionHelpText} from 'sentry/views/alerts/wizard/options';\n\nimport {isCrashFreeAlert} from './utils/isCrashFreeAlert';\nimport {\n  COMPARISON_DELTA_OPTIONS,\n  DEFAULT_AGGREGATE,\n  DEFAULT_TRANSACTION_AGGREGATE,\n} from './constants';\nimport MetricField from './metricField';\nimport {AlertRuleComparisonType, Dataset, Datasource, TimeWindow} from './types';\n\nconst TIME_WINDOW_MAP: Record<TimeWindow, string> = {\n  [TimeWindow.ONE_MINUTE]: t('1 minute'),\n  [TimeWindow.FIVE_MINUTES]: t('5 minutes'),\n  [TimeWindow.TEN_MINUTES]: t('10 minutes'),\n  [TimeWindow.FIFTEEN_MINUTES]: t('15 minutes'),\n  [TimeWindow.THIRTY_MINUTES]: t('30 minutes'),\n  [TimeWindow.ONE_HOUR]: t('1 hour'),\n  [TimeWindow.TWO_HOURS]: t('2 hours'),\n  [TimeWindow.FOUR_HOURS]: t('4 hours'),\n  [TimeWindow.ONE_DAY]: t('24 hours'),\n};\n\ntype Props = {\n  alertType: AlertType;\n  api: Client;\n  comparisonType: AlertRuleComparisonType;\n  dataset: Dataset;\n  disabled: boolean;\n  hasAlertWizardV3: boolean;\n  onComparisonDeltaChange: (value: number) => void;\n  onFilterSearch: (query: string) => void;\n  onTimeWindowChange: (value: number) => void;\n  organization: Organization;\n  project: Project;\n  projects: Project[];\n  router: InjectedRouter;\n  thresholdChart: React.ReactNode;\n  timeWindow: number;\n  allowChangeEventTypes?: boolean;\n  comparisonDelta?: number;\n  disableProjectSelector?: boolean;\n  loadingProjects?: boolean;\n};\n\ntype State = {\n  environments: Environment[] | null;\n};\n\nclass RuleConditionsForm extends PureComponent<Props, State> {\n  state: State = {\n    environments: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.project.id === this.props.project.id) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  formElemBaseStyle = {\n    padding: `${space(0.5)}`,\n    border: 'none',\n  };\n\n  async fetchData() {\n    const {api, organization, project} = this.props;\n\n    try {\n      const environments = await api.requestPromise(\n        `/projects/${organization.slug}/${project.slug}/environments/`,\n        {\n          query: {\n            visibility: 'visible',\n          },\n        }\n      );\n      this.setState({environments});\n    } catch (_err) {\n      addErrorMessage(t('Unable to fetch environments'));\n    }\n  }\n\n  get timeWindowOptions() {\n    let options: Record<string, string> = TIME_WINDOW_MAP;\n\n    if (isCrashFreeAlert(this.props.dataset)) {\n      options = pick(TIME_WINDOW_MAP, [\n        // TimeWindow.THIRTY_MINUTES, leaving this option out until we figure out the sub-hour session resolution chart limitations\n        TimeWindow.ONE_HOUR,\n        TimeWindow.TWO_HOURS,\n        TimeWindow.FOUR_HOURS,\n        TimeWindow.ONE_DAY,\n      ]);\n    }\n\n    return Object.entries(options).map(([value, label]) => ({\n      value: parseInt(value, 10),\n      label: this.props.hasAlertWizardV3\n        ? tct('[timeWindow] interval', {\n            timeWindow: label.slice(-1) === 's' ? label.slice(0, -1) : label,\n          })\n        : label,\n    }));\n  }\n\n  get searchPlaceholder() {\n    switch (this.props.dataset) {\n      case Dataset.ERRORS:\n        return t('Filter events by level, message, and other properties\\u2026');\n      case Dataset.METRICS:\n      case Dataset.SESSIONS:\n        return t('Filter sessions by release version\\u2026');\n      case Dataset.TRANSACTIONS:\n      default:\n        return t('Filter transactions by URL, tags, and other properties\\u2026');\n    }\n  }\n\n  get searchSupportedTags() {\n    if (isCrashFreeAlert(this.props.dataset)) {\n      return {\n        release: {\n          key: 'release',\n          name: 'release',\n        },\n      };\n    }\n\n    return undefined;\n  }\n\n  renderEventTypeFilter() {\n    const {organization, disabled, alertType} = this.props;\n\n    const dataSourceOptions = [\n      {\n        label: t('Errors'),\n        options: [\n          {\n            value: Datasource.ERROR_DEFAULT,\n            label: DATA_SOURCE_LABELS[Datasource.ERROR_DEFAULT],\n          },\n          {\n            value: Datasource.DEFAULT,\n            label: DATA_SOURCE_LABELS[Datasource.DEFAULT],\n          },\n          {\n            value: Datasource.ERROR,\n            label: DATA_SOURCE_LABELS[Datasource.ERROR],\n          },\n        ],\n      },\n    ];\n\n    if (organization.features.includes('performance-view') && alertType === 'custom') {\n      dataSourceOptions.push({\n        label: t('Transactions'),\n        options: [\n          {\n            value: Datasource.TRANSACTION,\n            label: DATA_SOURCE_LABELS[Datasource.TRANSACTION],\n          },\n        ],\n      });\n    }\n\n    return (\n      <FormField\n        name=\"datasource\"\n        inline={false}\n        style={{\n          ...this.formElemBaseStyle,\n          minWidth: 300,\n          flex: 2,\n        }}\n        flexibleControlStateSize\n      >\n        {({onChange, onBlur, model}) => {\n          const formDataset = model.getValue('dataset');\n          const formEventTypes = model.getValue('eventTypes');\n          const mappedValue = convertDatasetEventTypesToSource(\n            formDataset,\n            formEventTypes\n          );\n          return (\n            <SelectControl\n              value={mappedValue}\n              inFieldLabel={t('Events: ')}\n              onChange={optionObj => {\n                const optionValue = optionObj.value;\n                onChange(optionValue, {});\n                onBlur(optionValue, {});\n                // Reset the aggregate to the default (which works across\n                // datatypes), otherwise we may send snuba an invalid query\n                // (transaction aggregate on events datasource = bad).\n                optionValue === 'transaction'\n                  ? model.setValue('aggregate', DEFAULT_TRANSACTION_AGGREGATE)\n                  : model.setValue('aggregate', DEFAULT_AGGREGATE);\n\n                // set the value of the dataset and event type from data source\n                const {dataset: datasetFromDataSource, eventTypes} =\n                  DATA_SOURCE_TO_SET_AND_EVENT_TYPES[optionValue] ?? {};\n                model.setValue('dataset', datasetFromDataSource);\n                model.setValue('eventTypes', eventTypes);\n              }}\n              options={dataSourceOptions}\n              isDisabled={disabled}\n            />\n          );\n        }}\n      </FormField>\n    );\n  }\n\n  renderIdBadge(project: Project) {\n    return (\n      <IdBadge\n        project={project}\n        avatarProps={{consistentWidth: true}}\n        avatarSize={18}\n        disableLink\n        hideName\n      />\n    );\n  }\n\n  renderProjectSelector() {\n    const {\n      project: _selectedProject,\n      projects,\n      disabled,\n      organization,\n      disableProjectSelector,\n    } = this.props;\n    const hasOpenMembership = organization.features.includes('open-membership');\n    const myProjects = projects.filter(project => project.hasAccess && project.isMember);\n    const allProjects = projects.filter(\n      project => project.hasAccess && !project.isMember\n    );\n\n    const myProjectOptions = myProjects.map(myProject => ({\n      value: myProject.id,\n      label: myProject.slug,\n      leadingItems: this.renderIdBadge(myProject),\n    }));\n\n    const openMembershipProjects = [\n      {\n        label: t('My Projects'),\n        options: myProjectOptions,\n      },\n      {\n        label: t('All Projects'),\n        options: allProjects.map(allProject => ({\n          value: allProject.id,\n          label: allProject.slug,\n          leadingItems: this.renderIdBadge(allProject),\n        })),\n      },\n    ];\n\n    const projectOptions =\n      hasOpenMembership || isActiveSuperuser()\n        ? openMembershipProjects\n        : myProjectOptions;\n\n    return (\n      <FormField\n        name=\"projectId\"\n        inline={false}\n        style={{\n          ...this.formElemBaseStyle,\n          minWidth: 300,\n          flex: 2,\n        }}\n        flexibleControlStateSize\n      >\n        {({onChange, onBlur, model}) => {\n          const selectedProject =\n            projects.find(({id}) => id === model.getValue('projectId')) ||\n            _selectedProject;\n\n          return (\n            <SelectControl\n              isDisabled={disabled || disableProjectSelector}\n              value={selectedProject.id}\n              options={projectOptions}\n              onChange={({value}: {value: Project['id']}) => {\n                // if the current owner/team isn't part of project selected, update to the first available team\n                const nextSelectedProject =\n                  projects.find(({id}) => id === value) ?? selectedProject;\n                const ownerId: String | undefined = model\n                  .getValue('owner')\n                  ?.split(':')[1];\n                if (\n                  ownerId &&\n                  nextSelectedProject.teams.find(({id}) => id === ownerId) ===\n                    undefined &&\n                  nextSelectedProject.teams.length\n                ) {\n                  model.setValue('owner', `team:${nextSelectedProject.teams[0].id}`);\n                }\n                onChange(value, {});\n                onBlur(value, {});\n              }}\n              components={{\n                SingleValue: containerProps => (\n                  <components.ValueContainer {...containerProps}>\n                    <IdBadge\n                      project={selectedProject}\n                      avatarProps={{consistentWidth: true}}\n                      avatarSize={18}\n                      disableLink\n                    />\n                  </components.ValueContainer>\n                ),\n              }}\n            />\n          );\n        }}\n      </FormField>\n    );\n  }\n\n  renderInterval() {\n    const {\n      organization,\n      disabled,\n      alertType,\n      hasAlertWizardV3,\n      timeWindow,\n      comparisonDelta,\n      comparisonType,\n      onTimeWindowChange,\n      onComparisonDeltaChange,\n    } = this.props;\n\n    const {labelText, timeWindowText} = getFunctionHelpText(alertType);\n    const intervalLabelText = hasAlertWizardV3 ? t('Define your metric') : labelText;\n\n    return (\n      <Fragment>\n        <StyledListItem>\n          <StyledListTitle>\n            <div>{intervalLabelText}</div>\n            {!hasAlertWizardV3 && (\n              <Tooltip\n                title={t(\n                  'Time window over which the metric is evaluated. Alerts are evaluated every minute regardless of this value.'\n                )}\n              >\n                <IconQuestion size=\"sm\" color=\"gray200\" />\n              </Tooltip>\n            )}\n          </StyledListTitle>\n        </StyledListItem>\n        <FormRow>\n          {hasAlertWizardV3 ? (\n            <WizardField\n              name=\"aggregate\"\n              help={null}\n              organization={organization}\n              disabled={disabled}\n              style={{\n                ...this.formElemBaseStyle,\n                flex: 1,\n              }}\n              inline={false}\n              flexibleControlStateSize\n              columnWidth={200}\n              alertType={alertType}\n              required\n            />\n          ) : (\n            <MetricField\n              name=\"aggregate\"\n              help={null}\n              organization={organization}\n              disabled={disabled}\n              style={{\n                ...this.formElemBaseStyle,\n              }}\n              inline={false}\n              flexibleControlStateSize\n              columnWidth={200}\n              alertType={alertType}\n              required\n            />\n          )}\n          {!hasAlertWizardV3 && timeWindowText && (\n            <FormRowText>{timeWindowText}</FormRowText>\n          )}\n          <SelectControl\n            name=\"timeWindow\"\n            styles={{\n              control: (provided: {[x: string]: string | number | boolean}) => ({\n                ...provided,\n                minWidth: hasAlertWizardV3 ? 200 : 130,\n                maxWidth: 300,\n              }),\n              container: (provided: {[x: string]: string | number | boolean}) => ({\n                ...provided,\n                margin: hasAlertWizardV3 ? `${space(0.5)}` : 0,\n              }),\n            }}\n            options={this.timeWindowOptions}\n            required\n            isDisabled={disabled}\n            value={timeWindow}\n            onChange={({value}) => onTimeWindowChange(value)}\n            inline={false}\n            flexibleControlStateSize\n          />\n          {!hasAlertWizardV3 && (\n            <Feature\n              features={['organizations:change-alerts']}\n              organization={organization}\n            >\n              {comparisonType === AlertRuleComparisonType.CHANGE && (\n                <ComparisonContainer>\n                  {t(' compared to ')}\n                  <SelectControl\n                    name=\"comparisonDelta\"\n                    styles={{\n                      container: (provided: {\n                        [x: string]: string | number | boolean;\n                      }) => ({\n                        ...provided,\n                        marginLeft: space(1),\n                      }),\n                      control: (provided: {[x: string]: string | number | boolean}) => ({\n                        ...provided,\n                        minWidth: 500,\n                        maxWidth: 1000,\n                      }),\n                    }}\n                    value={comparisonDelta}\n                    onChange={({value}) => onComparisonDeltaChange(value)}\n                    options={COMPARISON_DELTA_OPTIONS}\n                    required={comparisonType === AlertRuleComparisonType.CHANGE}\n                  />\n                </ComparisonContainer>\n              )}\n            </Feature>\n          )}\n        </FormRow>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {\n      organization,\n      disabled,\n      onFilterSearch,\n      allowChangeEventTypes,\n      hasAlertWizardV3,\n      dataset,\n    } = this.props;\n    const {environments} = this.state;\n\n    const environmentOptions: SelectValue<string | null>[] = [\n      {\n        value: null,\n        label: t('All Environments'),\n      },\n      ...(environments?.map(env => ({value: env.name, label: getDisplayName(env)})) ??\n        []),\n    ];\n\n    const transactionTags = [\n      'transaction',\n      'transaction.duration',\n      'transaction.op',\n      'transaction.status',\n    ];\n    const measurementTags = Object.values({...WebVital, ...MobileVital});\n    const eventOmitTags =\n      dataset === 'events' ? [...measurementTags, ...transactionTags] : [];\n\n    return (\n      <Fragment>\n        <ChartPanel>\n          <StyledPanelBody>{this.props.thresholdChart}</StyledPanelBody>\n        </ChartPanel>\n        {hasAlertWizardV3 && this.renderInterval()}\n        <StyledListItem>{t('Filter events')}</StyledListItem>\n        <FormRow\n          noMargin\n          columns={1 + (allowChangeEventTypes ? 1 : 0) + (hasAlertWizardV3 ? 1 : 0)}\n        >\n          {hasAlertWizardV3 && this.renderProjectSelector()}\n          <SelectField\n            name=\"environment\"\n            placeholder={t('All Environments')}\n            style={{\n              ...this.formElemBaseStyle,\n              minWidth: 230,\n              flex: 1,\n            }}\n            styles={{\n              singleValue: (base: any) => ({\n                ...base,\n              }),\n              option: (base: any) => ({\n                ...base,\n              }),\n            }}\n            options={environmentOptions}\n            isDisabled={disabled || this.state.environments === null}\n            isClearable\n            inline={false}\n            flexibleControlStateSize\n          />\n          {allowChangeEventTypes && this.renderEventTypeFilter()}\n        </FormRow>\n        <FormRow>\n          <FormField\n            name=\"query\"\n            inline={false}\n            style={{\n              ...this.formElemBaseStyle,\n              flex: '6 0 500px',\n            }}\n            flexibleControlStateSize\n          >\n            {({onChange, onBlur, onKeyDown, initialData}) => (\n              <SearchContainer>\n                <StyledSearchBar\n                  searchSource=\"alert_builder\"\n                  defaultQuery={initialData?.query ?? ''}\n                  omitTags={[\n                    'event.type',\n                    'release.version',\n                    'release.stage',\n                    'release.package',\n                    'release.build',\n                    'project',\n                    ...eventOmitTags,\n                  ]}\n                  includeSessionTagsValues={dataset === Dataset.SESSIONS}\n                  disabled={disabled}\n                  useFormWrapper={false}\n                  organization={organization}\n                  placeholder={this.searchPlaceholder}\n                  onChange={onChange}\n                  onKeyDown={e => {\n                    /**\n                     * Do not allow enter key to submit the alerts form since it is unlikely\n                     * users will be ready to create the rule as this sits above required fields.\n                     */\n                    if (e.key === 'Enter') {\n                      e.preventDefault();\n                      e.stopPropagation();\n                    }\n\n                    onKeyDown?.(e);\n                  }}\n                  onBlur={query => {\n                    onFilterSearch(query);\n                    onBlur(query);\n                  }}\n                  onSearch={query => {\n                    onFilterSearch(query);\n                    onChange(query, {});\n                  }}\n                  {...(this.searchSupportedTags\n                    ? {supportedTags: this.searchSupportedTags}\n                    : {})}\n                  hasRecentSearches={dataset !== Dataset.SESSIONS}\n                />\n              </SearchContainer>\n            )}\n          </FormField>\n        </FormRow>\n        {!hasAlertWizardV3 && this.renderInterval()}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledListTitle = styled('div')`\n  display: flex;\n  span {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst ChartPanel = styled(Panel)`\n  margin-bottom: ${space(4)};\n`;\n\nconst StyledPanelBody = styled(PanelBody)`\n  ol,\n  h4 {\n    margin-bottom: ${space(1)};\n  }\n`;\n\nconst SearchContainer = styled('div')`\n  display: flex;\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n`;\n\nconst StyledListItem = styled(ListItem)`\n  margin-bottom: ${space(1)};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  line-height: 1.3;\n`;\n\nconst FormRow = styled('div')<{columns?: number; noMargin?: boolean}>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  flex-wrap: wrap;\n  margin-bottom: ${p => (p.noMargin ? 0 : space(4))};\n  ${p =>\n    p.columns !== undefined &&\n    css`\n      display: grid;\n      grid-template-columns: repeat(${p.columns}, auto);\n    `}\n`;\n\nconst FormRowText = styled('div')`\n  margin: ${space(1)};\n`;\n\nconst ComparisonContainer = styled('div')`\n  margin-left: ${space(1)};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport default withProjects(RuleConditionsForm);\n","import {ReactNode} from 'react';\nimport {PlainRoute, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addSuccessMessage,\n  clearIndicators,\n  Indicator,\n} from 'sentry/actionCreators/indicator';\nimport {fetchOrganizationTags} from 'sentry/actionCreators/tags';\nimport Access from 'sentry/components/acl/access';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Confirm from 'sentry/components/confirm';\nimport Form from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport {t} from 'sentry/locale';\nimport IndicatorStore from 'sentry/stores/indicatorStore';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {metric} from 'sentry/utils/analytics';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {isActiveSuperuser} from 'sentry/utils/isActiveSuperuser';\nimport withProjects from 'sentry/utils/withProjects';\nimport RuleNameOwnerForm from 'sentry/views/alerts/rules/metric/ruleNameOwnerForm';\nimport ThresholdTypeForm from 'sentry/views/alerts/rules/metric/thresholdTypeForm';\nimport Triggers from 'sentry/views/alerts/rules/metric/triggers';\nimport TriggersChart from 'sentry/views/alerts/rules/metric/triggers/chart';\nimport {getEventTypeFilter} from 'sentry/views/alerts/rules/metric/utils/getEventTypeFilter';\nimport hasThresholdValue from 'sentry/views/alerts/rules/metric/utils/hasThresholdValue';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\nimport {AlertWizardAlertNames} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\nimport {isCrashFreeAlert} from './utils/isCrashFreeAlert';\nimport {addOrUpdateRule} from './actions';\nimport {\n  createDefaultTrigger,\n  DEFAULT_CHANGE_COMP_DELTA,\n  DEFAULT_CHANGE_TIME_WINDOW,\n  DEFAULT_COUNT_TIME_WINDOW,\n} from './constants';\nimport RuleConditionsForm from './ruleConditionsForm';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  EventTypes,\n  MetricActionTemplate,\n  MetricRule,\n  Trigger,\n  UnsavedMetricRule,\n} from './types';\n\nconst POLLING_MAX_TIME_LIMIT = 3 * 60000;\n\ntype RuleTaskResponse = {\n  status: 'pending' | 'failed' | 'success';\n  alertRule?: MetricRule;\n  error?: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  projects: Project[];\n  routes: PlainRoute[];\n  rule: MetricRule;\n  userTeamIds: string[];\n  disableProjectSelector?: boolean;\n  isCustomMetric?: boolean;\n  isDuplicateRule?: boolean;\n  ruleId?: string;\n  sessionId?: string;\n} & RouteComponentProps<{orgId: string; projectId?: string; ruleId?: string}, {}> & {\n    onSubmitSuccess?: Form['props']['onSubmitSuccess'];\n  } & AsyncComponent['props'];\n\ntype State = {\n  aggregate: string;\n  // `null` means loading\n  availableActions: MetricActionTemplate[] | null;\n  comparisonType: AlertRuleComparisonType;\n  // Rule conditions form inputs\n  // Needed for TriggersChart\n  dataset: Dataset;\n  environment: string | null;\n  project: Project;\n  query: string;\n  resolveThreshold: UnsavedMetricRule['resolveThreshold'];\n  thresholdPeriod: UnsavedMetricRule['thresholdPeriod'];\n  thresholdType: UnsavedMetricRule['thresholdType'];\n  timeWindow: number;\n  triggerErrors: Map<number, {[fieldName: string]: string}>;\n  triggers: Trigger[];\n  comparisonDelta?: number;\n  eventTypes?: EventTypes[];\n  uuid?: string;\n} & AsyncComponent['state'];\n\nconst isEmpty = (str: unknown): boolean => str === '' || !defined(str);\n\nclass RuleFormContainer extends AsyncComponent<Props, State> {\n  pollingTimeout: number | undefined = undefined;\n\n  get isDuplicateRule(): boolean {\n    return Boolean(this.props.isDuplicateRule);\n  }\n\n  get hasAlertWizardV3(): boolean {\n    return this.props.organization.features.includes('alert-wizard-v3');\n  }\n\n  componentDidMount() {\n    const {organization} = this.props;\n    const {project} = this.state;\n    // SearchBar gets its tags from Reflux.\n    fetchOrganizationTags(this.api, organization.slug, [project.id]);\n  }\n\n  componentWillUnmount() {\n    window.clearTimeout(this.pollingTimeout);\n  }\n\n  getDefaultState(): State {\n    const {rule, location} = this.props;\n    const triggersClone = [...rule.triggers];\n    const {aggregate, eventTypes: _eventTypes, dataset, name} = location?.query ?? {};\n    const eventTypes = typeof _eventTypes === 'string' ? [_eventTypes] : _eventTypes;\n\n    // Warning trigger is removed if it is blank when saving\n    if (triggersClone.length !== 2) {\n      triggersClone.push(createDefaultTrigger(AlertRuleTriggerType.WARNING));\n    }\n\n    return {\n      ...super.getDefaultState(),\n\n      name: name ?? rule.name ?? '',\n      aggregate: aggregate ?? rule.aggregate,\n      dataset: dataset ?? rule.dataset,\n      eventTypes: eventTypes ?? rule.eventTypes,\n      query: rule.query ?? '',\n      timeWindow: rule.timeWindow,\n      environment: rule.environment || null,\n      triggerErrors: new Map(),\n      availableActions: null,\n      triggers: triggersClone,\n      resolveThreshold: rule.resolveThreshold,\n      thresholdType: rule.thresholdType,\n      thresholdPeriod: rule.thresholdPeriod ?? 1,\n      comparisonDelta: rule.comparisonDelta ?? undefined,\n      comparisonType: rule.comparisonDelta\n        ? AlertRuleComparisonType.CHANGE\n        : AlertRuleComparisonType.COUNT,\n      project: this.props.project,\n      owner: rule.owner,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId} = this.props.params;\n\n    // TODO(incidents): This is temporary until new API endpoints\n    // We should be able to just fetch the rule if rule.id exists\n\n    return [\n      ['availableActions', `/organizations/${orgId}/alert-rules/available-actions/`],\n    ];\n  }\n\n  goBack() {\n    const {router} = this.props;\n    const {orgId} = this.props.params;\n\n    router.push(`/organizations/${orgId}/alerts/rules/`);\n  }\n\n  resetPollingState = (loadingSlackIndicator: Indicator) => {\n    IndicatorStore.remove(loadingSlackIndicator);\n    this.setState({loading: false, uuid: undefined});\n  };\n\n  fetchStatus(model: FormModel) {\n    const loadingSlackIndicator = IndicatorStore.addMessage(\n      t('Looking for your slack channel (this can take a while)'),\n      'loading'\n    );\n    // pollHandler calls itself until it gets either a success\n    // or failed status but we don't want to poll forever so we pass\n    // in a hard stop time of 3 minutes before we bail.\n    const quitTime = Date.now() + POLLING_MAX_TIME_LIMIT;\n    window.clearTimeout(this.pollingTimeout);\n    this.pollingTimeout = window.setTimeout(() => {\n      this.pollHandler(model, quitTime, loadingSlackIndicator);\n    }, 1000);\n  }\n\n  pollHandler = async (\n    model: FormModel,\n    quitTime: number,\n    loadingSlackIndicator: Indicator\n  ) => {\n    if (Date.now() > quitTime) {\n      addErrorMessage(t('Looking for that channel took too long :('));\n      this.resetPollingState(loadingSlackIndicator);\n      return;\n    }\n\n    const {\n      organization,\n      onSubmitSuccess,\n      params: {ruleId},\n    } = this.props;\n    const {uuid, project} = this.state;\n\n    try {\n      const response: RuleTaskResponse = await this.api.requestPromise(\n        `/projects/${organization.slug}/${project.slug}/alert-rule-task/${uuid}/`\n      );\n\n      const {status, alertRule, error} = response;\n\n      if (status === 'pending') {\n        window.clearTimeout(this.pollingTimeout);\n\n        this.pollingTimeout = window.setTimeout(() => {\n          this.pollHandler(model, quitTime, loadingSlackIndicator);\n        }, 1000);\n        return;\n      }\n\n      this.resetPollingState(loadingSlackIndicator);\n\n      if (status === 'failed') {\n        this.handleRuleSaveFailure(error);\n      }\n      if (alertRule) {\n        addSuccessMessage(ruleId ? t('Updated alert rule') : t('Created alert rule'));\n        if (onSubmitSuccess) {\n          onSubmitSuccess(alertRule, model);\n        }\n      }\n    } catch {\n      this.handleRuleSaveFailure(t('An error occurred'));\n      this.resetPollingState(loadingSlackIndicator);\n    }\n  };\n\n  /**\n   * Checks to see if threshold is valid given target value, and state of\n   * inverted threshold as well as the *other* threshold\n   *\n   * @param type The threshold type to be updated\n   * @param value The new threshold value\n   */\n  isValidTrigger = (\n    triggerIndex: number,\n    trigger: Trigger,\n    errors,\n    resolveThreshold: number | '' | null\n  ): boolean => {\n    const {alertThreshold} = trigger;\n    const {thresholdType} = this.state;\n\n    // If value and/or other value is empty\n    // then there are no checks to perform against\n    if (!hasThresholdValue(alertThreshold) || !hasThresholdValue(resolveThreshold)) {\n      return true;\n    }\n\n    // If this is alert threshold and not inverted, it can't be below resolve\n    // If this is alert threshold and inverted, it can't be above resolve\n    // If this is resolve threshold and not inverted, it can't be above resolve\n    // If this is resolve threshold and inverted, it can't be below resolve\n    // Since we're comparing non-inclusive thresholds here (>, <), we need\n    // to modify the values when we compare. An example of why:\n    // Alert > 0, resolve < 1. This means that we want to alert on values\n    // of 1 or more, and resolve on values of 0 or less. This is valid, but\n    // without modifying the values, this boundary case will fail.\n    const isValid =\n      thresholdType === AlertRuleThresholdType.BELOW\n        ? alertThreshold - 1 < resolveThreshold + 1\n        : alertThreshold + 1 > resolveThreshold - 1;\n\n    const otherErrors = errors.get(triggerIndex) || {};\n\n    if (isValid) {\n      return true;\n    }\n\n    // Not valid... let's figure out an error message\n    const isBelow = thresholdType === AlertRuleThresholdType.BELOW;\n    let errorMessage = '';\n\n    if (typeof resolveThreshold !== 'number') {\n      errorMessage = isBelow\n        ? t('Resolution threshold must be greater than alert')\n        : t('Resolution threshold must be less than alert');\n    } else {\n      errorMessage = isBelow\n        ? t('Alert threshold must be less than resolution')\n        : t('Alert threshold must be greater than resolution');\n    }\n\n    errors.set(triggerIndex, {\n      ...otherErrors,\n      alertThreshold: errorMessage,\n    });\n\n    return false;\n  };\n\n  validateFieldInTrigger({errors, triggerIndex, field, message, isValid}) {\n    // If valid, reset error for fieldName\n    if (isValid()) {\n      const {[field]: _validatedField, ...otherErrors} = errors.get(triggerIndex) || {};\n\n      if (Object.keys(otherErrors).length > 0) {\n        errors.set(triggerIndex, otherErrors);\n      } else {\n        errors.delete(triggerIndex);\n      }\n\n      return errors;\n    }\n\n    if (!errors.has(triggerIndex)) {\n      errors.set(triggerIndex, {});\n    }\n    const currentErrors = errors.get(triggerIndex);\n\n    errors.set(triggerIndex, {\n      ...currentErrors,\n      [field]: message,\n    });\n\n    return errors;\n  }\n\n  /**\n   * Validate triggers\n   *\n   * @return Returns true if triggers are valid\n   */\n  validateTriggers(\n    triggers = this.state.triggers,\n    thresholdType = this.state.thresholdType,\n    resolveThreshold = this.state.resolveThreshold,\n    changedTriggerIndex?: number\n  ) {\n    const triggerErrors = new Map();\n\n    const requiredFields = ['label', 'alertThreshold'];\n    triggers.forEach((trigger, triggerIndex) => {\n      requiredFields.forEach(field => {\n        // check required fields\n        this.validateFieldInTrigger({\n          errors: triggerErrors,\n          triggerIndex,\n          isValid: (): boolean => {\n            if (trigger.label === AlertRuleTriggerType.CRITICAL) {\n              return !isEmpty(trigger[field]);\n            }\n\n            // If warning trigger has actions, it must have a value\n            return trigger.actions.length === 0 || !isEmpty(trigger[field]);\n          },\n          field,\n          message: t('Field is required'),\n        });\n      });\n\n      // Check thresholds\n      this.isValidTrigger(\n        changedTriggerIndex ?? triggerIndex,\n        trigger,\n        triggerErrors,\n        resolveThreshold\n      );\n    });\n\n    // If we have 2 triggers, we need to make sure that the critical and warning\n    // alert thresholds are valid (e.g. if critical is above x, warning must be less than x)\n    const criticalTriggerIndex = triggers.findIndex(\n      ({label}) => label === AlertRuleTriggerType.CRITICAL\n    );\n    const warningTriggerIndex = criticalTriggerIndex ^ 1;\n    const criticalTrigger = triggers[criticalTriggerIndex];\n    const warningTrigger = triggers[warningTriggerIndex];\n\n    const isEmptyWarningThreshold = isEmpty(warningTrigger.alertThreshold);\n    const warningThreshold = warningTrigger.alertThreshold ?? 0;\n    const criticalThreshold = criticalTrigger.alertThreshold ?? 0;\n\n    const hasError =\n      thresholdType === AlertRuleThresholdType.ABOVE\n        ? warningThreshold > criticalThreshold\n        : warningThreshold < criticalThreshold;\n\n    if (hasError && !isEmptyWarningThreshold) {\n      [criticalTriggerIndex, warningTriggerIndex].forEach(index => {\n        const otherErrors = triggerErrors.get(index) ?? {};\n        triggerErrors.set(index, {\n          ...otherErrors,\n          alertThreshold:\n            thresholdType === AlertRuleThresholdType.BELOW\n              ? t('Warning threshold must be greater than critical alert')\n              : t('Warning threshold must be less than critical alert'),\n        });\n      });\n    }\n\n    return triggerErrors;\n  }\n\n  handleFieldChange = (name: string, value: unknown) => {\n    const {projects} = this.props;\n    if (\n      [\n        'aggregate',\n        'dataset',\n        'eventTypes',\n        'timeWindow',\n        'environment',\n        'comparisonDelta',\n        'projectId',\n      ].includes(name)\n    ) {\n      this.setState(({project: _project}) => ({\n        [name]: value,\n        project: name === 'projectId' ? projects.find(({id}) => id === value) : _project,\n      }));\n    }\n  };\n\n  // We handle the filter update outside of the fieldChange handler since we\n  // don't want to update the filter on every input change, just on blurs and\n  // searches.\n  handleFilterUpdate = (query: string) => {\n    const {organization, sessionId} = this.props;\n\n    trackAdvancedAnalyticsEvent('alert_builder.filter', {\n      organization,\n      session_id: sessionId,\n      query,\n    });\n\n    this.setState({query});\n  };\n\n  handleSubmit = async (\n    _data: Partial<MetricRule>,\n    _onSubmitSuccess,\n    _onSubmitError,\n    _e,\n    model: FormModel\n  ) => {\n    // This validates all fields *except* for Triggers\n    const validRule = model.validateForm();\n\n    // Validate Triggers\n    const triggerErrors = this.validateTriggers();\n    const validTriggers = Array.from(triggerErrors).length === 0;\n\n    if (!validTriggers) {\n      this.setState(state => ({\n        triggerErrors: new Map([...triggerErrors, ...state.triggerErrors]),\n      }));\n    }\n\n    if (!validRule || !validTriggers) {\n      const missingFields = [\n        !validRule && t('name'),\n        !validRule && !validTriggers && t('and'),\n        !validTriggers && t('critical threshold'),\n      ].filter(x => x);\n\n      addErrorMessage(t(`Alert not valid: missing %s`, missingFields.join(' ')));\n      return;\n    }\n\n    const {\n      organization,\n      rule,\n      onSubmitSuccess,\n      location,\n      sessionId,\n      params: {ruleId},\n    } = this.props;\n    const {\n      project,\n      aggregate,\n      resolveThreshold,\n      triggers,\n      thresholdType,\n      thresholdPeriod,\n      comparisonDelta,\n      uuid,\n      timeWindow,\n    } = this.state;\n    // Remove empty warning trigger\n    const sanitizedTriggers = triggers.filter(\n      trigger =>\n        trigger.label !== AlertRuleTriggerType.WARNING || !isEmpty(trigger.alertThreshold)\n    );\n\n    // form model has all form state data, however we use local state to keep\n    // track of the list of triggers (and actions within triggers)\n    const loadingIndicator = IndicatorStore.addMessage(\n      t('Saving your alert rule, hold on...'),\n      'loading'\n    );\n    try {\n      const transaction = metric.startTransaction({name: 'saveAlertRule'});\n      transaction.setTag('type', AlertRuleType.METRIC);\n      transaction.setTag('operation', !rule.id ? 'create' : 'edit');\n      for (const trigger of sanitizedTriggers) {\n        for (const action of trigger.actions) {\n          if (action.type === 'slack') {\n            transaction.setTag(action.type, true);\n          }\n        }\n      }\n      transaction.setData('actions', sanitizedTriggers);\n\n      this.setState({loading: true});\n      const [data, , resp] = await addOrUpdateRule(\n        this.api,\n        organization.slug,\n        project.slug,\n        {\n          ...rule,\n          ...model.getTransformedData(),\n          triggers: sanitizedTriggers,\n          resolveThreshold: isEmpty(resolveThreshold) ? null : resolveThreshold,\n          thresholdType,\n          thresholdPeriod,\n          comparisonDelta: comparisonDelta ?? null,\n          timeWindow,\n          aggregate,\n        },\n        {\n          duplicateRule: this.isDuplicateRule ? 'true' : 'false',\n          wizardV3: this.hasAlertWizardV3 ? 'true' : 'false',\n          referrer: location?.query?.referrer,\n          sessionId,\n        }\n      );\n      // if we get a 202 back it means that we have an async task\n      // running to lookup and verify the channel id for Slack.\n      if (resp?.status === 202) {\n        // if we have a uuid in state, no need to start a new polling cycle\n        if (!uuid) {\n          this.setState({loading: true, uuid: data.uuid});\n          this.fetchStatus(model);\n        }\n      } else {\n        IndicatorStore.remove(loadingIndicator);\n        this.setState({loading: false});\n        addSuccessMessage(ruleId ? t('Updated alert rule') : t('Created alert rule'));\n        if (onSubmitSuccess) {\n          onSubmitSuccess(data, model);\n        }\n      }\n    } catch (err) {\n      IndicatorStore.remove(loadingIndicator);\n      this.setState({loading: false});\n      const errors = err?.responseJSON\n        ? Array.isArray(err?.responseJSON)\n          ? err?.responseJSON\n          : Object.values(err?.responseJSON)\n        : [];\n      const apiErrors = errors.length > 0 ? `: ${errors.join(', ')}` : '';\n      this.handleRuleSaveFailure(t('Unable to save alert%s', apiErrors));\n    }\n  };\n\n  /**\n   * Callback for when triggers change\n   *\n   * Re-validate triggers on every change and reset indicators when no errors\n   */\n  handleChangeTriggers = (triggers: Trigger[], triggerIndex?: number) => {\n    this.setState(state => {\n      let triggerErrors = state.triggerErrors;\n\n      const newTriggerErrors = this.validateTriggers(\n        triggers,\n        state.thresholdType,\n        state.resolveThreshold,\n        triggerIndex\n      );\n      triggerErrors = newTriggerErrors;\n\n      if (Array.from(newTriggerErrors).length === 0) {\n        clearIndicators();\n      }\n\n      return {triggers, triggerErrors};\n    });\n  };\n\n  handleThresholdTypeChange = (thresholdType: AlertRuleThresholdType) => {\n    const {triggers} = this.state;\n\n    const triggerErrors = this.validateTriggers(triggers, thresholdType);\n    this.setState(state => ({\n      thresholdType,\n      triggerErrors: new Map([...triggerErrors, ...state.triggerErrors]),\n    }));\n  };\n\n  handleThresholdPeriodChange = (value: number) => {\n    this.setState({thresholdPeriod: value});\n  };\n\n  handleResolveThresholdChange = (\n    resolveThreshold: UnsavedMetricRule['resolveThreshold']\n  ) => {\n    this.setState(state => {\n      const triggerErrors = this.validateTriggers(\n        state.triggers,\n        state.thresholdType,\n        resolveThreshold\n      );\n      if (Array.from(triggerErrors).length === 0) {\n        clearIndicators();\n      }\n\n      return {resolveThreshold, triggerErrors};\n    });\n  };\n\n  handleComparisonTypeChange = (value: AlertRuleComparisonType) => {\n    const comparisonDelta =\n      value === AlertRuleComparisonType.COUNT\n        ? undefined\n        : this.state.comparisonDelta ?? DEFAULT_CHANGE_COMP_DELTA;\n    const timeWindow = this.state.comparisonDelta\n      ? DEFAULT_COUNT_TIME_WINDOW\n      : DEFAULT_CHANGE_TIME_WINDOW;\n    this.setState({comparisonType: value, comparisonDelta, timeWindow});\n  };\n\n  handleDeleteRule = async () => {\n    const {params} = this.props;\n    const {orgId, projectId, ruleId} = params;\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/alert-rules/${ruleId}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      this.goBack();\n    } catch (_err) {\n      addErrorMessage(t('Error deleting rule'));\n    }\n  };\n\n  handleRuleSaveFailure = (msg: ReactNode) => {\n    addErrorMessage(msg);\n    metric.endTransaction({name: 'saveAlertRule'});\n  };\n\n  handleCancel = () => {\n    this.goBack();\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization, ruleId, rule, onSubmitSuccess, router, disableProjectSelector} =\n      this.props;\n    const {\n      name,\n      query,\n      project,\n      timeWindow,\n      triggers,\n      aggregate,\n      environment,\n      thresholdType,\n      thresholdPeriod,\n      comparisonDelta,\n      comparisonType,\n      resolveThreshold,\n      loading,\n      eventTypes,\n      dataset,\n    } = this.state;\n\n    const eventTypeFilter = getEventTypeFilter(this.state.dataset, eventTypes);\n    const queryWithTypeFilter = `${query} ${eventTypeFilter}`.trim();\n\n    const chartProps = {\n      organization,\n      projects: [project],\n      triggers,\n      query: isCrashFreeAlert(dataset) ? query : queryWithTypeFilter,\n      aggregate,\n      timeWindow,\n      environment,\n      resolveThreshold,\n      thresholdType,\n      comparisonDelta,\n      comparisonType,\n    };\n    const alertType = getAlertTypeFromAggregateDataset({aggregate, dataset});\n\n    const wizardBuilderChart = (\n      <TriggersChart\n        {...chartProps}\n        header={\n          <ChartHeader>\n            <AlertName>{AlertWizardAlertNames[alertType]}</AlertName>\n            {!isCrashFreeAlert(dataset) && (\n              <AlertInfo>\n                <StyledCircleIndicator size={8} />\n                <Aggregate>{aggregate}</Aggregate>\n                event.type:{eventTypes?.join(',')}\n              </AlertInfo>\n            )}\n          </ChartHeader>\n        }\n      />\n    );\n\n    const triggerForm = (disabled: boolean) => (\n      <Triggers\n        disabled={disabled}\n        projects={[project]}\n        errors={this.state.triggerErrors}\n        triggers={triggers}\n        aggregate={aggregate}\n        resolveThreshold={resolveThreshold}\n        thresholdPeriod={thresholdPeriod}\n        thresholdType={thresholdType}\n        comparisonType={comparisonType}\n        currentProject={project.slug}\n        organization={organization}\n        availableActions={this.state.availableActions}\n        hasAlertWizardV3={this.hasAlertWizardV3}\n        onChange={this.handleChangeTriggers}\n        onThresholdTypeChange={this.handleThresholdTypeChange}\n        onThresholdPeriodChange={this.handleThresholdPeriodChange}\n        onResolveThresholdChange={this.handleResolveThresholdChange}\n      />\n    );\n\n    const ruleNameOwnerForm = (disabled: boolean) => (\n      <RuleNameOwnerForm\n        disabled={disabled}\n        project={project}\n        hasAlertWizardV3={this.hasAlertWizardV3}\n      />\n    );\n\n    const thresholdTypeForm = (disabled: boolean) => (\n      <ThresholdTypeForm\n        comparisonType={comparisonType}\n        dataset={dataset}\n        disabled={disabled}\n        onComparisonDeltaChange={value =>\n          this.handleFieldChange('comparisonDelta', value)\n        }\n        onComparisonTypeChange={this.handleComparisonTypeChange}\n        organization={organization}\n        hasAlertWizardV3={this.hasAlertWizardV3}\n        comparisonDelta={comparisonDelta}\n      />\n    );\n\n    return (\n      <Access access={['alerts:write']}>\n        {({hasAccess}) => {\n          const disabled = loading || !(isActiveSuperuser() || hasAccess);\n\n          return (\n            <Form\n              apiMethod={ruleId ? 'PUT' : 'POST'}\n              apiEndpoint={`/organizations/${organization.slug}/alert-rules/${\n                ruleId ? `${ruleId}/` : ''\n              }`}\n              submitDisabled={disabled}\n              initialData={{\n                name,\n                dataset,\n                eventTypes,\n                aggregate,\n                query,\n                timeWindow: rule.timeWindow,\n                environment: rule.environment || null,\n                owner: rule.owner,\n                projectId: project.id,\n              }}\n              saveOnBlur={false}\n              onSubmit={this.handleSubmit}\n              onSubmitSuccess={onSubmitSuccess}\n              onCancel={this.handleCancel}\n              onFieldChange={this.handleFieldChange}\n              extraButton={\n                !!rule.id ? (\n                  <Confirm\n                    disabled={disabled}\n                    message={t('Are you sure you want to delete this alert rule?')}\n                    header={t('Delete Alert Rule?')}\n                    priority=\"danger\"\n                    confirmText={t('Delete Rule')}\n                    onConfirm={this.handleDeleteRule}\n                  >\n                    <Button type=\"button\" priority=\"danger\">\n                      {t('Delete Rule')}\n                    </Button>\n                  </Confirm>\n                ) : null\n              }\n              submitLabel={t('Save Rule')}\n            >\n              <List symbol=\"colored-numeric\">\n                <RuleConditionsForm\n                  api={this.api}\n                  project={project}\n                  organization={organization}\n                  router={router}\n                  disabled={disabled}\n                  thresholdChart={wizardBuilderChart}\n                  onFilterSearch={this.handleFilterUpdate}\n                  allowChangeEventTypes={\n                    alertType === 'custom' || dataset === Dataset.ERRORS\n                  }\n                  alertType={alertType}\n                  hasAlertWizardV3={this.hasAlertWizardV3}\n                  dataset={dataset}\n                  timeWindow={timeWindow}\n                  comparisonType={comparisonType}\n                  comparisonDelta={comparisonDelta}\n                  onComparisonDeltaChange={value =>\n                    this.handleFieldChange('comparisonDelta', value)\n                  }\n                  onTimeWindowChange={value =>\n                    this.handleFieldChange('timeWindow', value)\n                  }\n                  disableProjectSelector={disableProjectSelector}\n                />\n                {!this.hasAlertWizardV3 && thresholdTypeForm(disabled)}\n                <AlertListItem>\n                  {this.hasAlertWizardV3\n                    ? t('Set thresholds')\n                    : t('Set thresholds to trigger alert')}\n                </AlertListItem>\n                {this.hasAlertWizardV3 && thresholdTypeForm(disabled)}\n                {triggerForm(disabled)}\n                {ruleNameOwnerForm(disabled)}\n              </List>\n            </Form>\n          );\n        }}\n      </Access>\n    );\n  }\n}\n\nconst StyledListItem = styled(ListItem)`\n  margin: ${space(2)} 0 ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nconst AlertListItem = styled(StyledListItem)`\n  margin-top: 0;\n`;\n\nconst ChartHeader = styled('div')`\n  padding: ${space(2)} ${space(3)} 0 ${space(3)};\n  margin-bottom: -${space(1.5)};\n`;\n\nconst AlertName = styled(HeaderTitleLegend)`\n  position: relative;\n`;\n\nconst AlertInfo = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-family: ${p => p.theme.text.family};\n  font-weight: normal;\n  color: ${p => p.theme.textColor};\n`;\n\nconst StyledCircleIndicator = styled(CircleIndicator)`\n  background: ${p => p.theme.formText};\n  height: ${space(1)};\n  margin-right: ${space(0.5)};\n`;\n\nconst Aggregate = styled('span')`\n  margin-right: ${space(1)};\n`;\n\nexport default withProjects(RuleFormContainer);\n","import {t} from 'sentry/locale';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {convertDatasetEventTypesToSource} from 'sentry/views/alerts/utils';\n\nimport {DATASET_EVENT_TYPE_FILTERS, DATASOURCE_EVENT_TYPE_FILTERS} from '../constants';\nimport {Dataset, Datasource, EventTypes, MetricRule} from '../types';\n\nexport function extractEventTypeFilterFromRule(metricRule: MetricRule) {\n  const {dataset, eventTypes} = metricRule;\n  return getEventTypeFilter(dataset, eventTypes);\n}\n\nexport function getEventTypeFilter(\n  dataset: Dataset,\n  eventTypes: EventTypes[] | undefined\n) {\n  if (eventTypes) {\n    return DATASOURCE_EVENT_TYPE_FILTERS[\n      convertDatasetEventTypesToSource(dataset, eventTypes) ?? Datasource.ERROR\n    ];\n  }\n  return DATASET_EVENT_TYPE_FILTERS[dataset ?? Dataset.ERRORS];\n}\n","import {Dataset} from '../types';\n\n/**\n * Currently we can tell if an alert is a crash free alert by the dataset,\n * but this may become more complicated soon\n */\nexport function isCrashFreeAlert(dataset?: Dataset): boolean {\n  return dataset !== undefined && [Dataset.SESSIONS, Dataset.METRICS].includes(dataset);\n}\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import {\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Trigger,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport const getChangeStatus = (\n  value: number,\n  thresholdType: AlertRuleThresholdType,\n  triggers: Trigger[]\n): string => {\n  const criticalTrigger = triggers?.find(\n    trig => trig.label === AlertRuleTriggerType.CRITICAL\n  );\n  const warningTrigger = triggers?.find(\n    trig => trig.label === AlertRuleTriggerType.WARNING\n  );\n  const criticalTriggerAlertThreshold =\n    typeof criticalTrigger?.alertThreshold === 'number'\n      ? criticalTrigger.alertThreshold\n      : undefined;\n  const warningTriggerAlertThreshold =\n    typeof warningTrigger?.alertThreshold === 'number'\n      ? warningTrigger.alertThreshold\n      : undefined;\n\n  // Need to catch the critical threshold cases before warning threshold cases\n  if (\n    thresholdType === AlertRuleThresholdType.ABOVE &&\n    criticalTriggerAlertThreshold &&\n    value >= criticalTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.CRITICAL;\n  }\n  if (\n    thresholdType === AlertRuleThresholdType.ABOVE &&\n    warningTriggerAlertThreshold &&\n    value >= warningTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.WARNING;\n  }\n  // When threshold is below(lower than in comparison alerts) the % diff value is negative\n  // It crosses the threshold if its abs value is greater than threshold\n  // -80% change crosses below 60% threshold -1 * (-80) > 60\n  if (\n    thresholdType === AlertRuleThresholdType.BELOW &&\n    criticalTriggerAlertThreshold &&\n    -1 * value >= criticalTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.CRITICAL;\n  }\n  if (\n    thresholdType === AlertRuleThresholdType.BELOW &&\n    warningTriggerAlertThreshold &&\n    -1 * value >= warningTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.WARNING;\n  }\n\n  return '';\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions only has one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, seriesName);\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, seriesName);\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n","import {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex threshold and time interval'),\n      timeWindowText,\n    };\n  }\n  if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  }\n  return {\n    labelText: t('Select function and time interval'),\n    timeWindowText,\n  };\n}\n","import {Dataset, SessionsAggregate} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertType, WizardRuleTemplate} from './options';\n\n// A set of unique identifiers to be able to tie aggregate and dataset back to a wizard alert type\nconst alertTypeIdentifiers: Record<Dataset, Partial<Record<AlertType, string>>> = {\n  [Dataset.ERRORS]: {\n    num_errors: 'count()',\n    users_experiencing_errors: 'count_unique(user)',\n  },\n  [Dataset.TRANSACTIONS]: {\n    throughput: 'count()',\n    trans_duration: 'transaction.duration',\n    apdex: 'apdex',\n    failure_rate: 'failure_rate()',\n    lcp: 'measurements.lcp',\n    fid: 'measurements.fid',\n    cls: 'measurements.cls',\n  },\n  [Dataset.SESSIONS]: {\n    crash_free_sessions: SessionsAggregate.CRASH_FREE_SESSIONS,\n    crash_free_users: SessionsAggregate.CRASH_FREE_USERS,\n  },\n  [Dataset.METRICS]: {\n    crash_free_sessions: SessionsAggregate.CRASH_FREE_SESSIONS,\n    crash_free_users: SessionsAggregate.CRASH_FREE_USERS,\n  },\n};\n\n/**\n * Given an aggregate and dataset object, will return the corresponding wizard alert type\n * e.g. {aggregate: 'count()', dataset: 'events'} will yield 'num_errors'\n * @param template\n */\nexport function getAlertTypeFromAggregateDataset({\n  aggregate,\n  dataset,\n}: Pick<WizardRuleTemplate, 'aggregate' | 'dataset'>): AlertType {\n  const identifierForDataset = alertTypeIdentifiers[dataset];\n  const matchingAlertTypeEntry = Object.entries(identifierForDataset).find(\n    ([_alertType, identifier]) => identifier && aggregate.includes(identifier)\n  );\n  const alertType = matchingAlertTypeEntry && (matchingAlertTypeEntry[0] as AlertType);\n  return alertType ? alertType : 'custom';\n}\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import {Component} from 'react';\nimport {createFilter} from 'react-select';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport FieldFromConfig from 'sentry/components/forms/fieldFromConfig';\nimport Form from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport {Field, FieldValue} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {replaceAtArrayIndex} from 'sentry/utils/replaceAtArrayIndex';\nimport withApi from 'sentry/utils/withApi';\n\n// 0 is a valid choice but empty string, undefined, and null are not\nconst hasValue = value => !!value || value === 0;\n\nexport type FieldFromSchema = Omit<Field, 'choices' | 'type'> & {\n  type: 'select' | 'textarea' | 'text';\n  async?: boolean;\n  choices?: Array<[any, string]>;\n  default?: 'issue.title' | 'issue.description';\n  depends_on?: string[];\n  uri?: string;\n};\n\nexport type SchemaFormConfig = {\n  description: string | null;\n  uri: string;\n  optional_fields?: FieldFromSchema[];\n  required_fields?: FieldFromSchema[];\n};\n\n// only need required_fields and optional_fields\ntype State = Omit<SchemaFormConfig, 'uri' | 'description'> & {\n  optionsByField: Map<string, Array<{label: string; value: any}>>;\n};\n\ntype Props = {\n  action: 'create' | 'link';\n  api: Client;\n  appName: string;\n  config: SchemaFormConfig;\n  element: 'issue-link' | 'alert-rule-action';\n  onSubmitSuccess: Function;\n  sentryAppInstallationUuid: string;\n  /**\n   * Additional form data to submit with the request\n   */\n  extraFields?: {[key: string]: any};\n  /**\n   * Additional body parameters to submit with the request\n   */\n  extraRequestBody?: {[key: string]: any};\n  /**\n   * Function to provide fields with pre-written data if a default is specified\n   */\n  getFieldDefault?: (field: FieldFromSchema) => string;\n  /**\n   * Object containing reset values for fields if previously entered, in case this form is unmounted\n   */\n  resetValues?: {[key: string]: any; settings?: {name: string; value: any}[]};\n};\n\n/**\n *  This component is the result of a refactor of sentryAppExternalIssueForm.tsx.\n *  Most of it contains a direct copy of the code from that original file (comments included)\n *  to allow for an abstract way of turning Sentry App Schema -> Form UI, rather than being\n *  specific to Issue Linking.\n *\n *  See (#28465) for more details.\n */\nexport class SentryAppExternalForm extends Component<Props, State> {\n  state: State = {optionsByField: new Map()};\n\n  componentDidMount() {\n    this.resetStateFromProps();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.action !== this.props.action) {\n      this.model.reset();\n      this.resetStateFromProps();\n    }\n  }\n\n  model = new FormModel();\n\n  // reset the state when we mount or the action changes\n  resetStateFromProps() {\n    const {config, action, extraFields, element} = this.props;\n    this.setState({\n      required_fields: config.required_fields,\n      optional_fields: config.optional_fields,\n    });\n    // For alert-rule-actions, the forms are entirely custom, extra fields are\n    // passed in on submission, not as part of the form. See handleAlertRuleSubmit().\n    if (element === 'alert-rule-action') {\n      const defaultResetValues = (this.props.resetValues || {}).settings || [];\n      const initialData = defaultResetValues.reduce((acc, curr) => {\n        acc[curr.name] = curr.value;\n        return acc;\n      }, {});\n      this.model.setInitialData({...initialData});\n    } else {\n      this.model.setInitialData({\n        ...extraFields,\n        // we need to pass these fields in the API so just set them as values so we don't need hidden form fields\n        action,\n        uri: config.uri,\n      });\n    }\n  }\n\n  onSubmitError = () => {\n    const {action, appName} = this.props;\n    addErrorMessage(t('Unable to %s %s %s.', action, appName, this.getElementText()));\n  };\n\n  getOptions = (field: FieldFromSchema, input: string) =>\n    new Promise(resolve => {\n      this.debouncedOptionLoad(field, input, resolve);\n    });\n\n  getElementText = () => {\n    const {element} = this.props;\n    switch (element) {\n      case 'issue-link':\n        return 'issue';\n      case 'alert-rule-action':\n        return 'alert';\n      default:\n        return 'connection';\n    }\n  };\n\n  getDefaultFieldValue = (field: FieldFromSchema) => {\n    // Interpret the default if a getFieldDefault function is provided.\n    const {resetValues, getFieldDefault} = this.props;\n    let defaultValue;\n\n    // Override this default if a reset value is provided\n    if (field.default && getFieldDefault) {\n      defaultValue = getFieldDefault(field);\n    }\n\n    const reset = ((resetValues || {}).settings || []).find(\n      value => value.name === field.name\n    );\n\n    if (reset) {\n      defaultValue = reset.value;\n    }\n    return defaultValue;\n  };\n\n  debouncedOptionLoad = debounce(\n    // debounce is used to prevent making a request for every input change and\n    // instead makes the requests every 200ms\n    async (field: FieldFromSchema, input, resolve) => {\n      const choices = await this.makeExternalRequest(field, input);\n      const options = choices.map(([value, label]) => ({value, label}));\n      const optionsByField = new Map(this.state.optionsByField);\n      optionsByField.set(field.name, options);\n      this.setState({\n        optionsByField,\n      });\n      return resolve(options);\n    },\n    200,\n    {trailing: true}\n  );\n\n  makeExternalRequest = async (field: FieldFromSchema, input: FieldValue) => {\n    const {extraRequestBody = {}, sentryAppInstallationUuid} = this.props;\n    const query: {[key: string]: any} = {\n      ...extraRequestBody,\n      uri: field.uri,\n      query: input,\n    };\n\n    if (field.depends_on) {\n      const dependentData = field.depends_on.reduce((accum, dependentField: string) => {\n        accum[dependentField] = this.model.getValue(dependentField);\n        return accum;\n      }, {});\n      // stringify the data\n      query.dependentData = JSON.stringify(dependentData);\n    }\n\n    const {choices} = await this.props.api.requestPromise(\n      `/sentry-app-installations/${sentryAppInstallationUuid}/external-requests/`,\n      {\n        query,\n      }\n    );\n    return choices || [];\n  };\n\n  /**\n   * This function determines which fields need to be reset and new options fetched\n   * based on the dependencies defined with the depends_on attribute.\n   * This is done because the autoload flag causes fields to load at different times\n   * if you have multiple dependent fields while this solution updates state at once.\n   */\n  handleFieldChange = async (id: string) => {\n    const config = this.state;\n\n    let requiredFields = config.required_fields || [];\n    let optionalFields = config.optional_fields || [];\n\n    const fieldList: FieldFromSchema[] = requiredFields.concat(optionalFields);\n\n    // could have multiple impacted fields\n    const impactedFields = fieldList.filter(({depends_on}) => {\n      if (!depends_on) {\n        return false;\n      }\n      // must be dependent on the field we just set\n      return depends_on.includes(id);\n    });\n\n    // load all options in parallel\n    const choiceArray = await Promise.all(\n      impactedFields.map(field => {\n        // reset all impacted fields first\n        this.model.setValue(field.name || '', '', {quiet: true});\n        return this.makeExternalRequest(field, '');\n      })\n    );\n\n    this.setState(state => {\n      // pull the field lists from latest state\n      requiredFields = state.required_fields || [];\n      optionalFields = state.optional_fields || [];\n      // iterate through all the impacted fields and get new values\n      impactedFields.forEach((impactedField, i) => {\n        const choices = choiceArray[i];\n        const requiredIndex = requiredFields.indexOf(impactedField);\n        const optionalIndex = optionalFields.indexOf(impactedField);\n\n        const updatedField = {...impactedField, choices};\n\n        // immutably update the lists with the updated field depending where we got it from\n        if (requiredIndex > -1) {\n          requiredFields = replaceAtArrayIndex(\n            requiredFields,\n            requiredIndex,\n            updatedField\n          );\n        } else if (optionalIndex > -1) {\n          optionalFields = replaceAtArrayIndex(\n            optionalFields,\n            optionalIndex,\n            updatedField\n          );\n        }\n      });\n      return {\n        required_fields: requiredFields,\n        optional_fields: optionalFields,\n      };\n    });\n  };\n\n  renderField = (field: FieldFromSchema, required: boolean) => {\n    // This function converts the field we get from the backend into\n    // the field we need to pass down\n    let fieldToPass: Field = {\n      ...field,\n      inline: false,\n      stacked: true,\n      flexibleControlStateSize: true,\n      required,\n    };\n\n    // async only used for select components\n    const isAsync = typeof field.async === 'undefined' ? true : !!field.async; // default to true\n    if (fieldToPass.type === 'select') {\n      // find the options from state to pass down\n      const defaultOptions = (field.choices || []).map(([value, label]) => ({\n        value,\n        label,\n      }));\n      const options = this.state.optionsByField.get(field.name) || defaultOptions;\n      const allowClear = !required;\n      const defaultValue = this.getDefaultFieldValue(field);\n      // filter by what the user is typing\n      const filterOption = createFilter({});\n      fieldToPass = {\n        ...fieldToPass,\n        options,\n        defaultValue,\n        defaultOptions,\n        filterOption,\n        allowClear,\n      };\n      // default message for async select fields\n      if (isAsync) {\n        fieldToPass.noOptionsMessage = () => 'Type to search';\n      }\n\n      if (field.depends_on) {\n        // check if this is dependent on other fields which haven't been set yet\n        const shouldDisable = field.depends_on.some(\n          dependentField => !hasValue(this.model.getValue(dependentField))\n        );\n        if (shouldDisable) {\n          fieldToPass = {...fieldToPass, disabled: true};\n        }\n      }\n    }\n    if (['text', 'textarea'].includes(fieldToPass.type || '')) {\n      fieldToPass = {\n        ...fieldToPass,\n        defaultValue: this.getDefaultFieldValue(field),\n      };\n    }\n\n    // if we have a uri, we need to set extra parameters\n    const extraProps = field.uri\n      ? {\n          loadOptions: (input: string) => this.getOptions(field, input),\n          async: isAsync,\n          cache: false,\n          onSelectResetsInput: false,\n          onCloseResetsInput: false,\n          onBlurResetsInput: false,\n          autoload: false,\n        }\n      : {};\n\n    return (\n      <FieldFromConfig\n        key={field.name}\n        field={fieldToPass}\n        data-test-id={field.name}\n        {...extraProps}\n      />\n    );\n  };\n\n  handleAlertRuleSubmit = (formData, onSubmitSuccess) => {\n    const {sentryAppInstallationUuid} = this.props;\n    if (this.model.validateForm()) {\n      onSubmitSuccess({\n        // The form data must be nested in 'settings' to ensure they don't overlap with any other field names.\n        settings: Object.entries(formData).map(([name, value]) => ({name, value})),\n        sentryAppInstallationUuid,\n        // Used on the backend to explicitly associate with a different rule than those without a custom form.\n        hasSchemaFormConfig: true,\n      });\n    }\n  };\n\n  render() {\n    const {sentryAppInstallationUuid, action, element, onSubmitSuccess} = this.props;\n\n    const requiredFields = this.state.required_fields || [];\n    const optionalFields = this.state.optional_fields || [];\n\n    if (!sentryAppInstallationUuid) {\n      return '';\n    }\n\n    return (\n      <Form\n        key={action}\n        apiEndpoint={`/sentry-app-installations/${sentryAppInstallationUuid}/external-issue-actions/`}\n        apiMethod=\"POST\"\n        // Without defining onSubmit, the Form will send an `apiMethod` request to the above `apiEndpoint`\n        onSubmit={\n          element === 'alert-rule-action' ? this.handleAlertRuleSubmit : undefined\n        }\n        onSubmitSuccess={(...params) => {\n          onSubmitSuccess(...params);\n        }}\n        onSubmitError={this.onSubmitError}\n        onFieldChange={this.handleFieldChange}\n        model={this.model}\n      >\n        {requiredFields.map((field: FieldFromSchema) => {\n          return this.renderField(field, true);\n        })}\n\n        {optionalFields.map((field: FieldFromSchema) => {\n          return this.renderField(field, false);\n        })}\n      </Form>\n    );\n  }\n}\n\nexport default withApi(SentryAppExternalForm);\n","import styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","import styled from '@emotion/styled';\n\nconst MenuItem = styled('div')`\n  font-size: 14px;\n  ${p => p.theme.overflowEllipsis};\n`;\n\nexport default MenuItem;\n","var isConstructor = require('../internals/is-constructor');\nvar tryToString = require('../internals/try-to-string');\n\nvar $TypeError = TypeError;\n\n// `Assert: IsConstructor(argument) is true`\nmodule.exports = function (argument) {\n  if (isConstructor(argument)) return argument;\n  throw $TypeError(tryToString(argument) + ' is not a constructor');\n};\n","var isObject = require('../internals/is-object');\nvar classof = require('../internals/classof-raw');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar MATCH = wellKnownSymbol('match');\n\n// `IsRegExp` abstract operation\n// https://tc39.es/ecma262/#sec-isregexp\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');\n};\n","var call = require('../internals/function-call');\nvar hasOwn = require('../internals/has-own-property');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar regExpFlags = require('../internals/regexp-flags');\n\nvar RegExpPrototype = RegExp.prototype;\n\nmodule.exports = function (R) {\n  var flags = R.flags;\n  return flags === undefined && !('flags' in RegExpPrototype) && !hasOwn(R, 'flags') && isPrototypeOf(RegExpPrototype, R)\n    ? call(regExpFlags, R) : flags;\n};\n","var anObject = require('../internals/an-object');\nvar aConstructor = require('../internals/a-constructor');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\n\n// `SpeciesConstructor` abstract operation\n// https://tc39.es/ecma262/#sec-speciesconstructor\nmodule.exports = function (O, defaultConstructor) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);\n};\n","'use strict';\n/* eslint-disable es-x/no-string-prototype-matchall -- safe */\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar anObject = require('../internals/an-object');\nvar classof = require('../internals/classof-raw');\nvar isRegExp = require('../internals/is-regexp');\nvar getRegExpFlags = require('../internals/regexp-get-flags');\nvar getMethod = require('../internals/get-method');\nvar defineBuiltIn = require('../internals/define-built-in');\nvar fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\nvar InternalStateModule = require('../internals/internal-state');\nvar IS_PURE = require('../internals/is-pure');\n\nvar MATCH_ALL = wellKnownSymbol('matchAll');\nvar REGEXP_STRING = 'RegExp String';\nvar REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);\nvar RegExpPrototype = RegExp.prototype;\nvar $TypeError = TypeError;\nvar stringIndexOf = uncurryThis(''.indexOf);\nvar un$MatchAll = uncurryThis(''.matchAll);\n\nvar WORKS_WITH_NON_GLOBAL_REGEX = !!un$MatchAll && !fails(function () {\n  un$MatchAll('a', /./);\n});\n\nvar $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, $global, fullUnicode) {\n  setInternalState(this, {\n    type: REGEXP_STRING_ITERATOR,\n    regexp: regexp,\n    string: string,\n    global: $global,\n    unicode: fullUnicode,\n    done: false\n  });\n}, REGEXP_STRING, function next() {\n  var state = getInternalState(this);\n  if (state.done) return { value: undefined, done: true };\n  var R = state.regexp;\n  var S = state.string;\n  var match = regExpExec(R, S);\n  if (match === null) return { value: undefined, done: state.done = true };\n  if (state.global) {\n    if (toString(match[0]) === '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);\n    return { value: match, done: false };\n  }\n  state.done = true;\n  return { value: match, done: false };\n});\n\nvar $matchAll = function (string) {\n  var R = anObject(this);\n  var S = toString(string);\n  var C = speciesConstructor(R, RegExp);\n  var flags = toString(getRegExpFlags(R));\n  var matcher, $global, fullUnicode;\n  matcher = new C(C === RegExp ? R.source : R, flags);\n  $global = !!~stringIndexOf(flags, 'g');\n  fullUnicode = !!~stringIndexOf(flags, 'u');\n  matcher.lastIndex = toLength(R.lastIndex);\n  return new $RegExpStringIterator(matcher, S, $global, fullUnicode);\n};\n\n// `String.prototype.matchAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.matchall\n$({ target: 'String', proto: true, forced: WORKS_WITH_NON_GLOBAL_REGEX }, {\n  matchAll: function matchAll(regexp) {\n    var O = requireObjectCoercible(this);\n    var flags, S, matcher, rx;\n    if (regexp != null) {\n      if (isRegExp(regexp)) {\n        flags = toString(requireObjectCoercible(getRegExpFlags(regexp)));\n        if (!~stringIndexOf(flags, 'g')) throw $TypeError('`.matchAll` does not allow non-global regexes');\n      }\n      if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);\n      matcher = getMethod(regexp, MATCH_ALL);\n      if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;\n      if (matcher) return call(matcher, regexp, O);\n    } else if (WORKS_WITH_NON_GLOBAL_REGEX) return un$MatchAll(O, regexp);\n    S = toString(O);\n    rx = new RegExp(regexp, 'g');\n    return IS_PURE ? call($matchAll, rx, S) : rx[MATCH_ALL](S);\n  }\n});\n\nIS_PURE || MATCH_ALL in RegExpPrototype || defineBuiltIn(RegExpPrototype, MATCH_ALL, $matchAll);\n","var isSymbol = require('./isSymbol');\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseExtremum;\n","/**\n * The base implementation of methods like `_.findKey` and `_.findLastKey`,\n * without support for iteratee shorthands, which iterates over `collection`\n * using `eachFunc`.\n *\n * @private\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @returns {*} Returns the found element or its key, else `undefined`.\n */\nfunction baseFindKey(collection, predicate, eachFunc) {\n  var result;\n  eachFunc(collection, function(value, key, collection) {\n    if (predicate(value, key, collection)) {\n      result = key;\n      return false;\n    }\n  });\n  return result;\n}\n\nmodule.exports = baseFindKey;\n","/**\n * The base implementation of `_.gt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n */\nfunction baseGt(value, other) {\n  return value > other;\n}\n\nmodule.exports = baseGt;\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nmodule.exports = baseLt;\n","var baseSum = require('./_baseSum');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/**\n * The base implementation of `_.mean` and `_.meanBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the mean.\n */\nfunction baseMean(array, iteratee) {\n  var length = array == null ? 0 : array.length;\n  return length ? (baseSum(array, iteratee) / length) : NAN;\n}\n\nmodule.exports = baseMean;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseFindKey = require('./_baseFindKey'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.find` except that it returns the key of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Object\n * @param {Object} object The object to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {string|undefined} Returns the key of the matched element,\n *  else `undefined`.\n * @example\n *\n * var users = {\n *   'barney':  { 'age': 36, 'active': true },\n *   'fred':    { 'age': 40, 'active': false },\n *   'pebbles': { 'age': 1,  'active': true }\n * };\n *\n * _.findKey(users, function(o) { return o.age < 40; });\n * // => 'barney' (iteration order is not guaranteed)\n *\n * // The `_.matches` iteratee shorthand.\n * _.findKey(users, { 'age': 1, 'active': true });\n * // => 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findKey(users, ['active', false]);\n * // => 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.findKey(users, 'active');\n * // => 'barney'\n */\nfunction findKey(object, predicate) {\n  return baseFindKey(object, baseIteratee(predicate, 3), baseForOwn);\n}\n\nmodule.exports = findKey;\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\nfunction maxBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)\n    : undefined;\n}\n\nmodule.exports = maxBy;\n","var baseMean = require('./_baseMean'),\n    identity = require('./identity');\n\n/**\n * Computes the mean of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the mean.\n * @example\n *\n * _.mean([4, 2, 8, 6]);\n * // => 5\n */\nfunction mean(array) {\n  return baseMean(array, identity);\n}\n\nmodule.exports = mean;\n","var baseExtremum = require('./_baseExtremum'),\n    baseIteratee = require('./_baseIteratee'),\n    baseLt = require('./_baseLt');\n\n/**\n * This method is like `_.min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.minBy(objects, function(o) { return o.n; });\n * // => { 'n': 1 }\n *\n * // The `_.property` iteratee shorthand.\n * _.minBy(objects, 'n');\n * // => { 'n': 1 }\n */\nfunction minBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)\n    : undefined;\n}\n\nmodule.exports = minBy;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n"],"names":["propNamesToIgnore","omitIgnoredProps","props","omitBy","_value","key","includes","EventsRequest","PureComponent","reloading","this","loading","errored","timeseriesData","fetchedWithPrevious","async","api","confirmedQuery","onError","expired","name","hideError","errorMessage","setState","state","undefined","t","addErrorMessage","append","clear","doEventsRequest","resp","responseJSON","detail","unmounting","includePrevious","data","period","hasPreviousPeriod","canIncludePreviousPeriod","dataMiddleIndex","Math","floor","length","current","slice","previous","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","componentWillUnmount","calculateTotalsPerTimestamp","getName","timestamp","map","i","countArray","value","reduce","acc","count","transformPreviousPeriodData","seriesName","_timestamp","_countArray","stack","transformAggregatedTimeseries","transformTimeseriesData","countsForTimestamp","transformComparisonTimeseriesData","comparisonCount","processData","response","seriesIndex","isMetricsData","totals","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","currentSeriesNames","previousSeriesNames","comparisonDelta","getData","comparisonData","allData","originalData","originalPreviousData","previousData","getPreviousSeriesName","timeAggregatedData","timeframe","start","end","render","children","showLoading","topEvents","isMultiSeriesStats","defined","seriesAdditionalInfo","sortedTimeseriesData","Object","keys","index","seriesData","processedData","stripEquationPrefix","order","sort","a","b","results","item","previousTimeseriesData","some","transformedTimeseriesData","transformedComparisonTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","comparisonTimeseriesData","interval","limit","query","OptionSelector","options","onChange","selected","title","featureType","multiple","rest","mappedOptions","useMemo","opt","label","String","maxLength","expandDirection","option","o","isOptionDisabled","disabled","triggerProps","size","borderless","prefix","Fragment","StyledFeatureBadge","type","placement","FeatureBadge","AbstractExternalIssueForm","AsyncComponent","FormModel","action","dynamicFieldValues","endpoint","getEndPointString","request","method","success","_","handleRequestSuccess","stateKey","error","handleError","Error","integrationDetailsParam","integrationDetails","integrationDetailsFromState","config","getConfigName","fromEntries","filter","field","updatesForm","default","handleReceiveIntegrationDetails","getDynamicFields","fieldName","hasOwnProperty","remainingRequests","refetchConfig","result","fetchedFieldOptionsCache","obj","currentOption","getDefaultOptions","find","model","getValue","tct","currentOptionResultIndex","findIndex","newResult","input","Promise","resolve","reject","debouncedOptionLoad","err","ensureCurrentOption","updateFetchedFieldOptionsCache","debounce","cb","qs","url","separator","fetch","ok","json","trailing","choices","autoload","cache","loadOptions","getOptions","defaultOptions","onBlurResetsInput","onCloseResetsInput","onSelectResetsInput","_data","footerClass","onFieldChange","submitDisabled","fieldCopy","formFields","errors","initialData","accumulator","Header","Body","closeButton","getTitle","renderNavTabs","shouldRenderLoading","renderLoading","renderBodyText","getFormProps","fields","noOptionsMessage","flexibleControlStateSize","inline","stacked","getFieldProps","getDefaultState","super","renderComponent","renderError","renderBody","getSearchKeyForUser","user","email","toLowerCase","SelectMembers","Component","inputValue","memberListLoading","MemberListStore","avatarSize","hideEmail","useLink","id","renderUserBadge","searchKey","actor","createMentionableUser","DisabledLabel","position","newValue","onInputChange","organization","requestPromise","slug","then","usersInProject","getMentionableUsers","usersInProjectById","queryMembers","members","indexOf","createUnmentionableUser","unlisteners","forEach","callIfFunction","placeholder","styles","StyledSelectControl","isDisabled","filterOption","filterText","handleLoadOptions","cacheOptions","handleInputChange","handleChange","provided","svg","color","isSelected","theme","white","SelectControl","withApi","tooltipFormatter","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","toFixed","DAY","HOUR","MINUTE","SECOND","getUrlRoutingName","env","encodeURIComponent","displayName","getDisplayName","getTransactionDetailsUrl","orgSlug","eventSlug","transaction","spanId","locationQuery","target","pathname","hash","spanTargetHash","recreateRoute","to","routes","params","location","stepBack","paths","path","lastRootIndex","routeIndex","findLastIndex","baseRoute","search","fullRoute","join","replaceRouterParams","replaceAtArrayIndex","array","newArray","splice","routeName","withSentry","projectSlug","tmplBase","tmpl","BuilderBreadCrumbs","alertName","canChangeProject","alertType","projects","useProjects","isSuperuser","isActiveSuperuser","project","hasAlertWizardV3","features","disableLink","projectCrumbLink","projectCrumb","onSelect","projectId","browserHistory","orgId","items","proj","isMember","avatarProps","consistentWidth","crumbs","preservePageFilters","push","StyledBreadcrumbs","Breadcrumbs","space","CHANGE_ALERT_CONDITION_IDS","CHANGE_ALERT_PLACEHOLDERS_LABELS","COMPARISON_TYPE_CHOICE_VALUES","percent","COMPARISON_TYPE_CHOICES","COMPARISON_INTERVAL_CHOICES","MailActionTargetType","AssigneeTargetType","MemberTeamFields","attribute","ruleData","newData","targetIdentifier","optionRecord","memberValue","teamValue","teamSelected","targetType","memberSelected","selectControlStyles","control","minHeight","height","PanelItemGrid","isClearable","handleChangeActorType","handleChangeActorId","useId","PanelItem","IGNORED_FIELDS","TicketRuleModal","issueConfigFieldsCache","instance","names","getValidAndSavableFieldNames","formData","integration","dynamic_form_fields","entries","_success","_error","e","onSubmitAction","closeModal","preventDefault","stopPropagation","validateForm","cleanData","addSuccessMessage","getDefaultFormProps","cancelLabel","onCancel","onSubmit","onFormSubmit","submitLabel","concat","getCleanedFields","f","ticketType","link","BodyText","linkToDocs","href","values","getEndpoints","getErrors","cleanFields","Array","isArray","FieldErrorLabel","renderForm","p","errorText","NumberField","fieldConfig","onPropertyChange","useEffect","isNaN","Number","InlineNumberInput","AssigneeFilterFields","onMemberTeamChange","isInitialized","Unassigned","Team","Member","MailActionFields","IssueOwners","ChoiceField","initialVal","onReset","initial","InlineSelectControl","resetsForm","TextField","InlineInput","RuleNode","node","onDelete","handleDelete","useCallback","handleMemberTeamChange","getField","fieldProps","updateParentFromTicketRule","updateParentFromSentryAppRule","actionType","sentryAppInstallationUuid","ticketRule","sentryAppRule","isNew","EVENT_FREQUENCY_PERCENT_CONDITION","RuleRowContainer","RuleRow","Rule","Separator","parts","split","part","test","match","inputs","renderRow","icon","onClick","openModal","deps","Boolean","appName","prompt","onSubmitSuccess","resetValues","allowClickClose","DeleteButton","platform","releaseHealth","MarginlessAlert","showIcon","trailingItems","issueOwners","ownershipSettings","Input","backgroundSecondary","borderRadius","innerBorder","Button","Alert","fontSizeSmall","RuleNodeList","itemIdx","nodes","n","changeAlertNode","replace","comparisonType","comparisonInterval","window","clearTimeout","propertyChangeTimeout","setTimeout","onAddRow","onResetRow","onDeleteRow","selectType","shouldUsePrompt","enabledNodes","enabled","createSelectOptions","actions","noTooltip","grouped","curr","ticket","frequency","change","notifyIntegration","notify","RuleNodes","idx","getNode","breakpoints","medium","SetupAlertIntegrationButton","detailedProject","hasAlertIntegrationInstalled","referrerQuery","buttonProps","ConfigStore","isSelfHosted","pluginId","FREQUENCY_OPTIONS","ACTION_MATCH_OPTIONS","ACTION_MATCH_OPTIONS_MIGRATED","defaultRule","actionMatch","filterMatch","conditions","filters","environment","ALL_ENVIRONMENTS_KEY","isSavedAlertRule","rule","IssueRuleEditor","AsyncView","Date","now","quitTime","uuid","origRule","status","pollingTimeout","pollHandler","detailedError","handleRuleSaveFailure","handleRuleSuccess","router","updateOnboardingTask","task","OnboardingTaskKey","metric","ruleId","addLoadingMessage","setTag","splitActionId","actionName","setData","includeAllArgs","duplicateRule","isDuplicateRule","wizardV3","fetchStatus","__all__","val","prop","prevState","clonedState","cloneDeep","set","omit","configuration","configs","c","hasChangeAlerts","formField","newRule","getInitialValue","newTypeList","trackAdvancedAnalyticsEvent","project_id","handleAddRow","ruleIndex","handleDeleteRow","handlePropertyChange","handleResetRow","trim","owner","ownerValue","createFromDuplicate","duplicateRuleId","_prevProps","fetchEnvironments","ruleName","routeTitleGen","userTeamIds","defaultState","environments","projectTeamIds","Set","teams","userTeamId","has","hasDuplicateAlertRules","endpoints","onRequestSuccess","onChangeTitle","onLoadAllEndpointsSuccess","visibility","catch","_err","msg","getConditions","condition","renderRuleName","StyledField","help","required","event","onBlur","handleValidateRuleName","renderTeamSelect","ownerId","extraMargin","getTeamId","handleOwnerChange","teamFilter","team","includeUnassigned","renderIdBadge","hideName","renderProjectSelect","_selectedProject","hasOpenMembership","myProjects","hasAccess","allProjects","myProjectOptions","myProject","leadingItems","openMembershipProjects","allProject","projectOptions","style","padding","selectedProject","container","marginBottom","nextSelectedProject","components","SingleValue","containerProps","renderActionInterval","StyledSelectField","clearable","className","hasError","environmentOptions","access","StyledForm","handleCancel","handleSubmit","extraButton","priority","confirmText","onConfirm","handleDeleteRule","header","message","symbol","SemiTransparentLoadingMask","StyledListItem","SettingsContainer","classNames","handleEnvironmentChange","SetConditionsListItem","ConditionsPanel","Step","StepConnector","StepContainer","ChevronContainer","isCircled","direction","hasFeature","StepContent","StepLead","when","Badge","selector","EmbeddedWrapper","EmbeddedSelectField","isSearchable","handleChangeConditionProperty","handleAddCondition","handleResetCondition","handleDeleteCondition","StyledAlert","requireAll","if","handleChangeFilterProperty","handleAddFilter","handleResetFilter","handleDeleteFilter","handleChangeActionProperty","handleAddAction","handleResetAction","handleDeleteAction","StyledFieldHelp","withOrganization","withProjects","Form","Panel","ListItem","fontSizeExtraLarge","FieldHelp","gray200","purple300","fontSizeMedium","SelectField","LoadingMask","Field","SentryAppRuleModal","description","Description","element","settings","subText","DEFAULT_COUNT_TIME_WINDOW","DEFAULT_CHANGE_TIME_WINDOW","DEFAULT_CHANGE_COMP_DELTA","DEFAULT_AGGREGATE","DEFAULT_TRANSACTION_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","Dataset","DATASOURCE_EVENT_TYPE_FILTERS","Datasource","errorFieldConfig","aggregations","commonAggregations","allAggregations","DuplicateMetricFields","DuplicateTriggerFields","DuplicateActionFields","COMPARISON_DELTA_OPTIONS","getWizardAlertFieldConfig","dataset","measurementKeys","WEB_VITAL_DETAILS","transactionFieldConfig","createDefaultTrigger","alertThreshold","createDefaultRule","defaultRuleOptions","eventTypes","EventTypes","aggregate","timeWindow","thresholdPeriod","triggers","AlertRuleTriggerType","resolveThreshold","thresholdType","AlertRuleThresholdType","createRuleFromEventView","eventView","parsedQuery","getQueryDatasource","datasetAndEventtypes","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","source","getYAxis","createRuleFromWizardTemplate","wizardTemplate","isSessionAggregate","TimeWindow","getThresholdUnits","AlertRuleComparisonType","RuleNameOwnerForm","StyledTextField","StyledFormField","setValue","FormField","FormRow","ComparisonContainer","StyledRadioGroup","RadioGroup","onComparisonDeltaChange","onComparisonTypeChange","isCrashFreeAlert","marginLeft","minWidth","maxWidth","valueContainer","singleValue","ActionSpecificTargetSelector","TargetType","ActionType","autoComplete","inputChannelId","getPlaceholderForType","ActionTargetSelector","availableAction","handleChangeTargetIdentifier","handleChangeSpecificTargetIdentifier","DeleteActionButton","triggerIndex","getCleanAction","actionConfig","dateCreated","unsavedId","uniqueId","unsavedDateCreated","toISOString","allowedTargetTypes","sentryAppId","integrationId","getActionUniqueKey","getFullActionTitle","integrationName","sentryAppName","ActionLabel","ActionsPanel","availableActions","onAdd","Sentry","removeAtArrayIndex","existingDateCreated","newAction","actionIndex","handleChangeKey","conditionallyRenderHelpfulBanner","currentProject","levels","flatMap","trigger","actionIdx","getTime","PerformActionsListItem","AlertParagraph","actionDisabled","PanelItemSelects","handleChangeActionLevel","bind","handleChangeActionType","allowedType","TargetLabel","handleChangeTarget","ActionSection","ActionsPanelWithSpace","fontSizeLarge","border","NumberDragControl","isClicked","axis","step","shiftStep","isX","Wrapper","onMouseDown","button","trackAnalyticsEvent","eventName","eventKey","organization_id","currentTarget","requestPointerLock","onMouseUp","document","exitPointerLock","onMouseMove","delta","movementX","movementY","deltaStep","ceil","shiftKey","isActive","gray500","gray300","ThresholdControl","currentValue","threshold","numberValue","onThresholdTypeChange","onThresholdPeriodChange","hideControl","__","disableThresholdType","Container","SelectContainer","DropdownIndicator","cursor","pointerEvents","handleTypeChange","ThresholdContainer","ThresholdInput","StyledInput","handleThresholdChange","handleThresholdBlur","DragContainer","break","handleDragChange","PercentWrapper","tn","handleThresholdPeriodChange","TriggerFormItem","isCritical","fieldHelp","triggerLabel","handleChangeThreshold","TriggerFormContainer","changeObj","onResolveThresholdChange","fetchOrgMembers","getCriticalThresholdPlaceholder","getIndicator","StyledIconDiamond","CriticalIndicator","WarningIndicator","ResolvedIndicator","resolveTrigger","thresholdUnits","get","severity","units","TriggerLabel","handleChangeTrigger","handleChangeResolveTrigger","CircleIndicator","red300","yellow300","green300","IconDiamond","withConfig","Triggers","handleChangeActions","CHART_GRID","left","right","top","bottom","COLOR","RESOLUTION_FILL","alpha","rgb","string","CRITICAL_FILL","WARNING_FILL","ThresholdsChart","width","yAxisMax","yAxisMin","hideThresholdLines","chartRef","ref","getEchartsInstance","thresholds","updateChartAxis","min","max","minThreshold","maxThreshold","minValue","maxValue","shouldScale","shouldScaleAlertChart","clampMaxValue","ALERT_CHART_MIN_MAX_BUFFER","forceUpdate","getWidth","getHeight","updateDimensions","handleUpdateChartAxis","isResolution","getChartPixelForThreshold","isInverted","yAxisPixelPosition","convertToPixel","yAxisIndex","yAxisPosition","round","yAxisSize","graphAreaWidth","parseInt","invisible","draggable","shape","y1","y2","x1","x2","stroke","lineDash","silent","z","fill","comparisonMarkLines","comparisonSeriesName","minutesThresholdToDisplaySeconds","dataWithoutRecentBucket","eventData","restOfData","comparisonDataWithoutRecentBucket","chartOptions","tooltip","valueFormatter","alertTooltipValueFormatter","formatAxisLabel","isTimestamp","utc","showTimeInTooltip","addSecondsToTimeFormat","bucketSize","seriesParamsOrParam","date","defaultFormatAxisLabel","seriesParams","pointY","comparisonSeries","_sn","comparisonPointY","changePercentage","changeStatus","getChangeStatus","sign","abs","yAxis","axisLabel","formatter","alertAxisFormatter","isGroupedByDate","DEFAULT_STATS_PERIOD","forwardedRef","handleRef","grid","graphic","elements","flatten","getThresholdLine","colors","CHART_PALETTE","series","additionalSeries","otherSeriesProps","LineSeries","lineStyle","itemStyle","animation","animationThreshold","animationDuration","onFinished","TIME_PERIOD_MAP","TimePeriod","MOST_TIME_PERIODS","AVAILABLE_TIME_PERIODS","TIME_WINDOW_TO_SESSION_INTERVAL","SESSION_AGGREGATE_TO_HEADING","SessionsAggregate","TriggersChart","statsPeriod","totalCount","timePeriod","statsPeriodOptions","availableTimePeriods","fetchTotalCount","capitalize","getStatsPeriod","renderChart","isLoading","isReloading","TransparentLoadingMask","visible","ChartPlaceholder","minBy","maxBy","handleStatsPeriodChange","renderComparisonStats","SESSION_AGGREGATE_TO_FIELD","groupBy","groups","intervals","sessionTimeSeries","AlertWizardAlertNames","getAlertTypeFromAggregateDataset","getCrashFreeRateSeries","MINUTES_THRESHOLD_TO_DISPLAY_SECONDS","partial","changeStatuses","changeData","baseData","lastPointLimit","comparisonValue","baseValue","comparisonPercentage","Infinity","markLine","MarkLine","coord","getComparisonMarkLines","Placeholder","hasThresholdValue","isSavedRule","getIncidentDiscoverUrl","opts","incident","stats","extraQueryParams","timeWindowString","alertRule","getStartEndFromStats","discoverQuery","orderby","getAggregateAlias","version","discoverView","EventView","toObject","getResultsViewUrlTarget","PRESET_AGGREGATES","validDataset","makeCtaParams","makeDefaultCta","makeGenericTransactionCta","buttonText","MutableSearch","getFilterValues","display","DisplayModes","transactionSummaryRouteWithQuery","projectID","getFieldOptionConfig","hidePrimarySelector","hideParameterSelector","hidePrimarySelectorSet","hideParameterSelectorSet","agg","AGGREGATIONS","getFieldOverrides","defaultValue","FIELDS","fieldOptionsConfig","presets","preset","list","PresetButton","MetricField","columnWidth","inFieldLabels","fieldOptions","generateFieldOptions","fieldValue","explodeFieldString","selectedField","kind","FieldValueKind","function","parameterColumns","meta","parameters","StyledQueryField","filterPrimaryOptions","v","generateFieldAsString","gridColumns","shouldRenderTag","QueryField","css","textColor","defaultProps","menuOptions","WizardField","selectedTemplate","findKey","AlertWizardRuleTemplates","template","templateFieldValue","aggregateFieldValue","matchTemplateAggregate","matchTemplateDataset","matchTemplateEventTypes","hideGap","TIME_WINDOW_MAP","RuleConditionsForm","timeWindowOptions","pick","searchPlaceholder","searchSupportedTags","release","renderEventTypeFilter","dataSourceOptions","DATA_SOURCE_LABELS","formElemBaseStyle","flex","formDataset","formEventTypes","mappedValue","convertDatasetEventTypesToSource","inFieldLabel","optionObj","optionValue","datasetFromDataSource","renderProjectSelector","disableProjectSelector","renderInterval","onTimeWindowChange","labelText","timeWindowText","getFunctionHelpText","intervalLabelText","StyledListTitle","FormRowText","margin","onFilterSearch","allowChangeEventTypes","measurementTags","WebVital","MobileVital","eventOmitTags","ChartPanel","StyledPanelBody","thresholdChart","noMargin","columns","base","onKeyDown","SearchContainer","StyledSearchBar","searchSource","defaultQuery","omitTags","includeSessionTagsValues","useFormWrapper","onSearch","supportedTags","hasRecentSearches","PanelBody","SearchBar","isEmpty","str","RuleFormContainer","loadingSlackIndicator","IndicatorStore","resetPollingState","isValid","otherErrors","isBelow","_project","sessionId","session_id","_onSubmitSuccess","_onSubmitError","_e","validRule","triggerErrors","validateTriggers","validTriggers","from","Map","missingFields","x","sanitizedTriggers","loadingIndicator","AlertRuleType","isExisting","addOrUpdateRule","getTransformedData","referrer","apiErrors","newTriggerErrors","clearIndicators","goBack","fetchOrganizationTags","triggersClone","_eventTypes","validateFieldInTrigger","_validatedField","delete","currentErrors","changedTriggerIndex","requiredFields","isValidTrigger","criticalTriggerIndex","warningTriggerIndex","criticalTrigger","warningTrigger","isEmptyWarningThreshold","warningThreshold","criticalThreshold","eventTypeFilter","getEventTypeFilter","queryWithTypeFilter","chartProps","wizardBuilderChart","ChartHeader","AlertName","AlertInfo","StyledCircleIndicator","Aggregate","triggerForm","handleChangeTriggers","handleThresholdTypeChange","handleResolveThresholdChange","ruleNameOwnerForm","thresholdTypeForm","handleFieldChange","handleComparisonTypeChange","apiMethod","apiEndpoint","saveOnBlur","handleFilterUpdate","AlertListItem","HeaderTitleLegend","text","family","formText","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","USER","TEAM","extractEventTypeFilterFromRule","metricRule","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","trig","criticalTriggerAlertThreshold","warningTriggerAlertThreshold","getUtcDateString","eventStats","isIssueAlert","toUpperCase","SessionFieldWithOperation","alertDetailsLink","originalAlertRuleId","getQueryStatus","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","DEFAULT_WIZARD_TEMPLATE","alertTypeIdentifiers","identifierForDataset","matchingAlertTypeEntry","_alertType","identifier","SentryAppExternalForm","optionsByField","getElementText","getFieldDefault","reset","makeExternalRequest","extraRequestBody","uri","depends_on","dependentData","accum","dependentField","JSON","stringify","required_fields","optionalFields","optional_fields","impactedFields","choiceArray","all","quiet","impactedField","requiredIndex","optionalIndex","updatedField","fieldToPass","isAsync","allowClear","getDefaultFieldValue","createFilter","extraProps","hasSchemaFormConfig","resetStateFromProps","extraFields","setInitialData","handleAlertRuleSubmit","onSubmitError","renderField","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","unselectedSeries","trendFunction","trendColumn","showTransactions","additionalQuery","generateTransactionSummaryRoute","searchFilter","formatString","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","transactionName","generateEventSlug","SidebarSpacer","overflowEllipsis","isConstructor","tryToString","$TypeError","TypeError","module","exports","argument","isObject","classof","MATCH","wellKnownSymbol","it","isRegExp","call","hasOwn","isPrototypeOf","regExpFlags","RegExpPrototype","RegExp","prototype","R","flags","anObject","aConstructor","SPECIES","O","defaultConstructor","S","C","constructor","$","uncurryThis","createIteratorConstructor","requireObjectCoercible","toLength","getRegExpFlags","getMethod","defineBuiltIn","fails","speciesConstructor","advanceStringIndex","regExpExec","InternalStateModule","IS_PURE","MATCH_ALL","REGEXP_STRING_ITERATOR","REGEXP_STRING","setInternalState","getInternalState","getterFor","stringIndexOf","un$MatchAll","matchAll","WORKS_WITH_NON_GLOBAL_REGEX","$RegExpStringIterator","regexp","$global","fullUnicode","global","unicode","done","lastIndex","$matchAll","matcher","proto","forced","rx","isSymbol","iteratee","comparator","computed","collection","predicate","eachFunc","other","baseSum","baseFindKey","baseForOwn","baseIteratee","object","baseExtremum","baseGt","baseMean","identity","baseLt","args","arguments","apply","negate","pickBy"],"sourceRoot":""}