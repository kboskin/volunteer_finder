{"version":3,"file":"chunks/app_views_alerts_rules_issue_details_ruleDetails_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/areaChart.tsx","webpack:///./app/components/charts/series/areaSeries.tsx","webpack:///./app/components/charts/components/dataZoomSlider.tsx","webpack:///./app/components/charts/chartZoom.tsx","webpack:///./app/components/charts/components/dataZoomInside.tsx","webpack:///./app/components/charts/components/toolBox.tsx","webpack:///./app/components/keyValueTable.tsx","webpack:///./app/components/pageTimeRangeSelector.tsx","webpack:///./app/views/alerts/rules/issue/details/alertChart.tsx","webpack:///./app/views/alerts/rules/issue/details/issuesList.tsx","webpack:///./app/views/alerts/rules/issue/details/sidebar.tsx","webpack:///./app/views/alerts/rules/issue/details/ruleDetails.tsx","webpack:///./app/views/alerts/rules/metric/details/constants.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx"],"sourcesContent":["import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport AreaSeries from './series/areaSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type AreaChartSeries = Series & Omit<LineSeriesOption, 'data' | 'name'>;\n\nexport interface AreaChartProps extends Omit<ChartProps, 'series'> {\n  series: AreaChartSeries[];\n  stacked?: boolean;\n}\n\nexport function AreaChart({series, stacked, colors, ...props}: AreaChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      data-test-id=\"area-chart\"\n      colors={colors}\n      series={series.map(({seriesName, data, ...otherSeriesProps}, i) =>\n        AreaSeries({\n          stack: stacked ? 'area' : undefined,\n          name: seriesName,\n          data: data.map(({name, value}) => [name, value]),\n          lineStyle: {\n            color: colors?.[i],\n            opacity: 1,\n            width: 0.4,\n          },\n          areaStyle: {\n            color: colors?.[i],\n            opacity: 1.0,\n          },\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n          ...otherSeriesProps,\n        })\n      )}\n    />\n  );\n}\n","import type {LineSeriesOption} from 'echarts';\n\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\n\nexport default function AreaSeries(props: LineSeriesOption = {}): LineSeriesOption {\n  return LineSeries({\n    ...props,\n  });\n}\n","import 'echarts/lib/component/dataZoomSlider';\n\nimport type {SliderDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: SliderDataZoomComponentOption = {\n  realtime: false,\n  showDetail: false,\n  left: 0,\n  right: 6,\n  bottom: 8,\n};\n\nexport default function DataZoomSlider(\n  props: SliderDataZoomComponentOption | SliderDataZoomComponentOption[]\n): SliderDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import {Component} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport type {\n  DataZoomComponentOption,\n  InsideDataZoomComponentOption,\n  ToolboxComponentOption,\n  XAXisComponentOption,\n} from 'echarts';\nimport moment from 'moment';\nimport * as qs from 'query-string';\n\nimport {updateDateTime} from 'sentry/actionCreators/pageFilters';\nimport DataZoomInside from 'sentry/components/charts/components/dataZoomInside';\nimport DataZoomSlider from 'sentry/components/charts/components/dataZoomSlider';\nimport ToolBox from 'sentry/components/charts/components/toolBox';\nimport {DateString} from 'sentry/types';\nimport {\n  EChartChartReadyHandler,\n  EChartDataZoomHandler,\n  EChartFinishedHandler,\n  EChartRestoreHandler,\n} from 'sentry/types/echarts';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\nimport {getUtcDateString, getUtcToLocalDateObject} from 'sentry/utils/dates';\n\nconst getDate = date =>\n  date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;\n\ntype Period = {\n  end: DateString;\n  period: string | null;\n  start: DateString;\n};\n\nconst ZoomPropKeys = [\n  'period',\n  'xAxis',\n  'onChartReady',\n  'onDataZoom',\n  'onRestore',\n  'onFinished',\n] as const;\n\nexport type ZoomRenderProps = Pick<Props, typeof ZoomPropKeys[number]> & {\n  dataZoom?: DataZoomComponentOption[];\n  end?: Date;\n  isGroupedByDate?: boolean;\n  showTimeInTooltip?: boolean;\n  start?: Date;\n  toolBox?: ToolboxComponentOption;\n  utc?: boolean;\n};\n\ntype Props = {\n  children: (props: ZoomRenderProps) => React.ReactNode;\n  chartZoomOptions?: DataZoomComponentOption;\n  disabled?: boolean;\n  end?: DateString;\n  onChartReady?: EChartChartReadyHandler;\n  onDataZoom?: EChartDataZoomHandler;\n  onFinished?: EChartFinishedHandler;\n  onRestore?: EChartRestoreHandler;\n  onZoom?: (period: Period) => void;\n  period?: string | null;\n  router?: InjectedRouter;\n  showSlider?: boolean;\n  start?: DateString;\n  usePageDate?: boolean;\n  utc?: boolean | null;\n  xAxis?: XAXisComponentOption;\n  xAxisIndex?: number | number[];\n};\n\n/**\n * This is a very opinionated component that takes a render prop through `children`. It\n * will provide props to be passed to `BaseChart` to enable support of zooming without\n * eCharts' clunky zoom toolboxes.\n *\n * This also is very tightly coupled with the Global Selection Header. We can make it more\n * generic if need be in the future.\n */\nclass ChartZoom extends Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    // Zoom history\n    this.history = [];\n\n    // Initialize current period instance state for zoom history\n    this.saveCurrentPeriod(props);\n  }\n\n  componentDidUpdate() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    // When component updates, make sure we sync current period state\n    // for use in zoom history\n    this.saveCurrentPeriod(this.props);\n  }\n\n  history: Period[];\n  currentPeriod?: Period;\n  zooming: (() => void) | null = null;\n\n  /**\n   * Save current period state from period in props to be used\n   * in handling chart's zoom history state\n   */\n  saveCurrentPeriod = props => {\n    this.currentPeriod = {\n      period: props.period,\n      start: getDate(props.start),\n      end: getDate(props.end),\n    };\n  };\n\n  /**\n   * Sets the new period due to a zoom related action\n   *\n   * Saves the current period to an instance property so that we\n   * can control URL state when zoom history is being manipulated\n   * by the chart controls.\n   *\n   * Saves a callback function to be called after chart animation is completed\n   */\n  setPeriod = ({period, start, end}, saveHistory = false) => {\n    const {router, onZoom, usePageDate} = this.props;\n    const startFormatted = getDate(start);\n    const endFormatted = getDate(end);\n\n    // Save period so that we can revert back to it when using echarts \"back\" navigation\n    if (saveHistory) {\n      this.history.push(this.currentPeriod!);\n    }\n\n    // Callback to let parent component know zoom has changed\n    // This is required for some more perceived responsiveness since\n    // we delay updating URL state so that chart animation can finish\n    //\n    // Parent container can use this to change into a loading state before\n    // URL parameters are changed\n    callIfFunction(onZoom, {\n      period,\n      start: startFormatted,\n      end: endFormatted,\n    });\n\n    this.zooming = () => {\n      if (usePageDate && router) {\n        const newQuery = {\n          ...router.location.query,\n          pageStart: start ? getUtcDateString(start) : undefined,\n          pageEnd: end ? getUtcDateString(end) : undefined,\n          pageStatsPeriod: period ?? undefined,\n        };\n\n        // Only push new location if query params has changed because this will cause a heavy re-render\n        if (qs.stringify(newQuery) !== qs.stringify(router.location.query)) {\n          router.push({\n            pathname: router.location.pathname,\n            query: newQuery,\n          });\n        }\n      } else {\n        updateDateTime(\n          {\n            period,\n            start: startFormatted\n              ? getUtcToLocalDateObject(startFormatted)\n              : startFormatted,\n            end: endFormatted ? getUtcToLocalDateObject(endFormatted) : endFormatted,\n          },\n          router\n        );\n      }\n\n      this.saveCurrentPeriod({period, start, end});\n    };\n  };\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Restores the chart to initial viewport/zoom level\n   *\n   * Updates URL state to reflect initial params\n   */\n  handleZoomRestore = (evt, chart) => {\n    if (!this.history.length) {\n      return;\n    }\n\n    this.setPeriod(this.history[0]);\n\n    // reset history\n    this.history = [];\n\n    callIfFunction(this.props.onRestore, evt, chart);\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {startValue, endValue} = model._payload.batch[0];\n\n    // if `rangeStart` and `rangeEnd` are null, then we are going back\n    if (startValue === null && endValue === null) {\n      const previousPeriod = this.history.pop();\n\n      if (!previousPeriod) {\n        return;\n      }\n\n      this.setPeriod(previousPeriod);\n    } else {\n      const start = moment.utc(startValue);\n\n      // Add a day so we go until the end of the day (e.g. next day at midnight)\n      const end = moment.utc(endValue);\n\n      this.setPeriod({period: null, start, end}, true);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = (_props, chart) => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n\n    // This attempts to activate the area zoom toolbox feature\n    const zoom = chart._componentsViews?.find(c => c._features && c._features.dataZoom);\n    if (zoom && !zoom._features.dataZoom._isZoomActive) {\n      // Calling dispatchAction will re-trigger handleChartFinished\n      chart.dispatchAction({\n        type: 'takeGlobalCursor',\n        key: 'dataZoomSelect',\n        dataZoomSelectActive: true,\n      });\n    }\n\n    callIfFunction(this.props.onFinished);\n  };\n\n  render() {\n    const {\n      utc: _utc,\n      start: _start,\n      end: _end,\n      disabled,\n      children,\n      xAxisIndex,\n\n      router: _router,\n      onZoom: _onZoom,\n      onRestore: _onRestore,\n      onChartReady: _onChartReady,\n      onDataZoom: _onDataZoom,\n      onFinished: _onFinished,\n      showSlider,\n      chartZoomOptions,\n      ...props\n    } = this.props;\n\n    const utc = _utc ?? undefined;\n    const start = _start ? getUtcToLocalDateObject(_start) : undefined;\n    const end = _end ? getUtcToLocalDateObject(_end) : undefined;\n\n    if (disabled) {\n      return children({\n        utc,\n        start,\n        end,\n        ...props,\n      });\n    }\n    const renderProps = {\n      // Zooming only works when grouped by date\n      isGroupedByDate: true,\n      onChartReady: this.handleChartReady,\n      utc,\n      start,\n      end,\n      dataZoom: showSlider\n        ? [\n            ...DataZoomSlider({xAxisIndex, ...chartZoomOptions}),\n            ...DataZoomInside({\n              xAxisIndex,\n              ...(chartZoomOptions as InsideDataZoomComponentOption),\n            }),\n          ]\n        : DataZoomInside({\n            xAxisIndex,\n            ...(chartZoomOptions as InsideDataZoomComponentOption),\n          }),\n      showTimeInTooltip: true,\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n      onFinished: this.handleChartFinished,\n      onRestore: this.handleZoomRestore,\n      ...props,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default ChartZoom;\n","import 'echarts/lib/component/dataZoomInside';\n\nimport type {InsideDataZoomComponentOption} from 'echarts';\n\nconst DEFAULT: InsideDataZoomComponentOption = {\n  type: 'inside',\n  // Mouse wheel can not trigger zoom\n  zoomOnMouseWheel: false,\n  // The translation (by mouse drag or touch drag) is avialable but zoom is not\n  zoomLock: true,\n  throttle: 50,\n};\n\nexport default function DataZoomInside(\n  props: InsideDataZoomComponentOption | InsideDataZoomComponentOption[]\n): InsideDataZoomComponentOption[] {\n  // `props` can be boolean, if so return default\n  if (!props || !Array.isArray(props)) {\n    const dataZoom = {\n      ...DEFAULT,\n      ...props,\n    };\n    return [dataZoom];\n  }\n\n  return props;\n}\n","import type {ToolboxComponentOption} from 'echarts';\n\nfunction getFeatures({\n  dataZoom,\n  ...features\n}: ToolboxComponentOption['feature'] = {}): ToolboxComponentOption['feature'] {\n  return {\n    ...(dataZoom\n      ? {\n          dataZoom: {\n            yAxisIndex: 'none',\n            title: {\n              zoom: 'zoom',\n              back: 'undo',\n            },\n            ...dataZoom,\n          },\n        }\n      : {}),\n    ...features,\n  };\n}\n\nexport default function ToolBox(\n  options: ToolboxComponentOption,\n  features: ToolboxComponentOption['feature']\n): ToolboxComponentOption {\n  return {\n    right: 0,\n    top: 0,\n    itemSize: 16,\n    // Stack the toolbox under the legend.\n    // so all series names are clickable.\n    z: -1,\n\n    feature: getFeatures(features),\n    ...options,\n  };\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","import styled from '@emotion/styled';\n\nimport TimeRangeSelector from 'sentry/components/organizations/timeRangeSelector';\nimport {Panel} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = React.ComponentProps<typeof TimeRangeSelector> & {className?: string};\n\nfunction PageTimeRangeSelector({className, ...props}: Props) {\n  return (\n    <DropdownDate className={className}>\n      <TimeRangeSelector\n        key={`period:${props.relative}-start:${props.start}-end:${props.end}-utc:${props.utc}-defaultPeriod:${props.defaultPeriod}`}\n        label={<DropdownLabel>{t('Date Range:')}</DropdownLabel>}\n        detached\n        {...props}\n      />\n    </DropdownDate>\n  );\n}\n\nconst DropdownDate = styled(Panel)`\n  padding: 0;\n  margin: 0;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 42px;\n  background: ${p => p.theme.background};\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.textColor};\n\n  > div {\n    width: 100%;\n    align-self: stretch;\n  }\n  /* StyledItemHeader used to show selected value of TimeRangeSelector */\n  > div > div:first-child > div {\n    padding: 0 ${space(2)};\n  }\n  /* Menu that dropdowns from TimeRangeSelector */\n  > div > div:last-child:not(:first-child) {\n    /* Remove awkward 1px width difference on dropdown due to border */\n    min-width: calc(100% + 2px);\n    transform: translateX(-1px);\n    right: auto;\n  }\n`;\n\nconst DropdownLabel = styled('span')`\n  text-align: left;\n  font-weight: 600;\n  color: ${p => p.theme.textColor};\n\n  > span:last-child {\n    font-weight: 400;\n  }\n`;\n\nexport default PageTimeRangeSelector;\n","import {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {AreaChart} from 'sentry/components/charts/areaChart';\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport {HeaderTitleLegend, SectionHeading} from 'sentry/components/charts/styles';\nimport type {DateTimeObject} from 'sentry/components/charts/utils';\nimport {Panel, PanelBody, PanelFooter} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {IssueAlertRule, ProjectAlertRuleStats} from 'sentry/types/alerts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\ntype Props = AsyncComponent['props'] &\n  DateTimeObject &\n  WithRouterProps & {\n    orgId: string;\n    organization: Organization;\n    project: Project;\n    rule: IssueAlertRule;\n  };\n\ntype State = AsyncComponent['state'] & {\n  ruleFireHistory: ProjectAlertRuleStats[];\n};\n\nclass AlertChart extends AsyncComponent<Props, State> {\n  componentDidUpdate(prevProps: Props) {\n    const {project, organization, start, end, period, utc} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.organization.id !== organization.id ||\n      prevProps.project.id !== project.id\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      ruleFireHistory: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {project, organization, period, start, end, utc, rule} = this.props;\n\n    return [\n      [\n        'ruleFireHistory',\n        `/projects/${organization.slug}/${project.slug}/rules/${rule.id}/stats/`,\n        {\n          query: {\n            ...(period && {statsPeriod: period}),\n            start,\n            end,\n            utc,\n          },\n        },\n      ],\n    ];\n  }\n\n  renderChart() {\n    const {router, period, start, end, utc} = this.props;\n    const {ruleFireHistory} = this.state;\n\n    const series = {\n      seriesName: 'Alerts Triggered',\n      data: ruleFireHistory.map(alert => ({\n        name: alert.date,\n        value: alert.count,\n      })),\n      emphasis: {\n        disabled: true,\n      },\n    };\n\n    return (\n      <ChartZoom\n        router={router}\n        period={period}\n        start={start}\n        end={end}\n        utc={utc}\n        usePageDate\n      >\n        {zoomRenderProps => (\n          <AreaChart\n            {...zoomRenderProps}\n            isGroupedByDate\n            showTimeInTooltip\n            grid={{\n              left: space(0.25),\n              right: space(2),\n              top: space(3),\n              bottom: 0,\n            }}\n            yAxis={{\n              minInterval: 1,\n            }}\n            series={[series]}\n          />\n        )}\n      </ChartZoom>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <Panel>\n        <PanelBody withPadding>\n          <Placeholder height=\"200px\" />\n        </PanelBody>\n      </Panel>\n    );\n  }\n\n  render() {\n    const {ruleFireHistory, loading} = this.state;\n\n    const totalAlertsTriggered = ruleFireHistory.reduce(\n      (acc, curr) => acc + curr.count,\n      0\n    );\n\n    return loading ? (\n      this.renderEmpty()\n    ) : (\n      <Panel>\n        <StyledPanelBody withPadding>\n          <ChartHeader>\n            <HeaderTitleLegend>{t('Alerts Triggered')}</HeaderTitleLegend>\n          </ChartHeader>\n          {getDynamicText({\n            value: this.renderChart(),\n            fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n          })}\n        </StyledPanelBody>\n        <ChartFooter>\n          <FooterHeader>{t('Total Alerts')}</FooterHeader>\n          <FooterValue>{totalAlertsTriggered.toLocaleString()}</FooterValue>\n        </ChartFooter>\n      </Panel>\n    );\n  }\n}\n\nexport default withRouter(AlertChart);\n\nconst ChartHeader = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst ChartFooter = styled(PanelFooter)`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} 20px;\n`;\n\nconst FooterHeader = styled(SectionHeading)`\n  display: flex;\n  align-items: center;\n  margin: 0;\n  font-weight: bold;\n  font-size: ${p => p.theme.fontSizeMedium};\n  line-height: 1;\n`;\n\nconst FooterValue = styled('div')`\n  display: flex;\n  align-items: center;\n  margin: 0 ${space(1)};\n`;\n\n/* Override padding to make chart appear centered */\nconst StyledPanelBody = styled(PanelBody)`\n  padding-right: 6px;\n`;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport type {DateTimeObject} from 'sentry/components/charts/utils';\nimport Count from 'sentry/components/count';\nimport DateTime from 'sentry/components/dateTime';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Group, Organization, Project} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {getMessage, getTitle} from 'sentry/utils/events';\nimport getDynamicText from 'sentry/utils/getDynamicText';\n\ntype GroupHistory = {\n  count: number;\n  group: Group;\n  lastTriggered: string;\n};\n\ntype Props = AsyncComponent['props'] &\n  DateTimeObject & {\n    organization: Organization;\n    project: Project;\n    rule: IssueAlertRule;\n    cursor?: string;\n  };\n\ntype State = AsyncComponent['state'] & {\n  groupHistory: GroupHistory[] | null;\n};\n\nclass AlertRuleIssuesList extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  componentDidUpdate(prevProps: Props) {\n    const {project, organization, start, end, period, utc, cursor} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.organization.id !== organization.id ||\n      prevProps.project.id !== project.id ||\n      prevProps.cursor !== cursor\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      groupHistory: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {project, rule, organization, period, start, end, utc, cursor} = this.props;\n    return [\n      [\n        'groupHistory',\n        `/projects/${organization.slug}/${project.slug}/rules/${rule.id}/group-history/`,\n        {\n          query: {\n            per_page: 10,\n            ...(period && {statsPeriod: period}),\n            start,\n            end,\n            utc,\n            cursor,\n          },\n        },\n      ],\n    ];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const {organization, rule} = this.props;\n    const {loading, groupHistory, groupHistoryPageLinks} = this.state;\n\n    return (\n      <Fragment>\n        <StyledPanelTable\n          isLoading={loading}\n          isEmpty={groupHistory?.length === 0}\n          emptyMessage={t('No issues exist for the current query.')}\n          headers={[\n            t('Issue'),\n            <AlignRight key=\"alerts\">{t('Alerts')}</AlignRight>,\n            <AlignRight key=\"events\">{t('Events')}</AlignRight>,\n            t('Last Triggered'),\n          ]}\n        >\n          {groupHistory?.map(({group: issue, count, lastTriggered}) => {\n            const message = getMessage(issue);\n            const {title} = getTitle(issue);\n\n            return (\n              <Fragment key={issue.id}>\n                <TitleWrapper>\n                  <Link\n                    to={{\n                      pathname: `/organizations/${organization.slug}/issues/${issue.id}/`,\n                      query: rule.environment ? {environment: rule.environment} : {},\n                    }}\n                  >\n                    {title}:\n                  </Link>\n                  <MessageWrapper>{message}</MessageWrapper>\n                </TitleWrapper>\n                <AlignRight>\n                  <Count value={count} />\n                </AlignRight>\n                <AlignRight>\n                  <Count value={issue.count} />\n                </AlignRight>\n                <div>\n                  <StyledDateTime\n                    date={getDynamicText({\n                      value: lastTriggered,\n                      fixed: 'Mar 16, 2020 9:10:13 AM UTC',\n                    })}\n                  />\n                </div>\n              </Fragment>\n            );\n          })}\n        </StyledPanelTable>\n        <PaginationWrapper>\n          <StyledPagination pageLinks={groupHistoryPageLinks} size=\"xsmall\" />\n        </PaginationWrapper>\n      </Fragment>\n    );\n  }\n}\n\nexport default AlertRuleIssuesList;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.5fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin-bottom: ${space(1.5)};\n\n  ${p =>\n    !p.isEmpty &&\n    css`\n      & > div {\n        padding: ${space(1)} ${space(2)};\n      }\n    `}\n`;\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  white-space: nowrap;\n  color: ${p => p.theme.subText};\n`;\n\nconst TitleWrapper = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  gap: ${space(0.5)};\n  min-width: 200px;\n`;\n\nconst MessageWrapper = styled('span')`\n  ${p => p.theme.overflowEllipsis};\n  color: ${p => p.theme.textColor};\n`;\n\nconst PaginationWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin-top: 0;\n`;\n","import {Fragment, PureComponent} from 'react';\nimport styled from '@emotion/styled';\n\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport {PanelBody} from 'sentry/components/panels';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconChevron} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Actor, Member, Team} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\n\ntype Props = {\n  memberList: Member[];\n  rule: IssueAlertRule;\n  teams: Team[];\n};\n\nclass Sidebar extends PureComponent<Props> {\n  renderConditions() {\n    const {rule, memberList, teams} = this.props;\n\n    const conditions = rule.conditions.length\n      ? rule.conditions.map(condition => (\n          <ConditionsBadge key={condition.id}>{condition.name}</ConditionsBadge>\n        ))\n      : null;\n    const filters = rule.filters.length\n      ? rule.filters.map(filter => (\n          <ConditionsBadge key={filter.id}>\n            {filter.time ? filter.name + '(s)' : filter.name}\n          </ConditionsBadge>\n        ))\n      : null;\n    const actions = rule.actions.length ? (\n      rule.actions.map(action => {\n        let name = action.name;\n        if (action.targetType === 'Member') {\n          const user = memberList.find(\n            member => member.user.id === `${action.targetIdentifier}`\n          );\n          name = t('Send a notification to %s', user?.email);\n        }\n        if (action.targetType === 'Team') {\n          const team = teams.find(tm => tm.id === `${action.targetIdentifier}`);\n          name = t('Send a notification to #%s', team?.name);\n        }\n        if (\n          action.id === 'sentry.integrations.slack.notify_action.SlackNotifyServiceAction'\n        ) {\n          // Remove (optionally, an ID: XXX) from slack action\n          name = name.replace(/\\(optionally.*\\)/, '');\n          // Remove tags if they aren't used\n          name = name.replace(' and show tags [] in notification', '');\n        }\n\n        return <ConditionsBadge key={action.id}>{name}</ConditionsBadge>;\n      })\n    ) : (\n      <ConditionsBadge>{t('Do nothing')}</ConditionsBadge>\n    );\n\n    return (\n      <PanelBody>\n        <Step>\n          <StepContainer>\n            <ChevronContainer>\n              <IconChevron color=\"gray200\" isCircled direction=\"right\" size=\"sm\" />\n            </ChevronContainer>\n            <StepContent>\n              <StepLead>\n                {tct('[when:When] an event is captured [selector]', {\n                  when: <Badge />,\n                  selector: conditions?.length ? t('and %s...', rule.actionMatch) : '',\n                })}\n              </StepLead>\n              {conditions}\n            </StepContent>\n          </StepContainer>\n        </Step>\n        {filters && (\n          <Step>\n            <StepContainer>\n              <ChevronContainer>\n                <IconChevron color=\"gray200\" isCircled direction=\"right\" size=\"sm\" />\n              </ChevronContainer>\n              <StepContent>\n                <StepLead>\n                  {tct('[if:If] [selector] of these filters match', {\n                    if: <Badge />,\n                    selector: rule.filterMatch,\n                  })}\n                </StepLead>\n                {filters}\n              </StepContent>\n            </StepContainer>\n          </Step>\n        )}\n        <Step>\n          <StepContainer>\n            <ChevronContainer>\n              <IconChevron isCircled color=\"gray200\" direction=\"right\" size=\"sm\" />\n            </ChevronContainer>\n            <div>\n              <StepLead>\n                {tct('[then:Then] perform these actions', {\n                  then: <Badge />,\n                })}\n              </StepLead>\n              {actions}\n            </div>\n          </StepContainer>\n        </Step>\n      </PanelBody>\n    );\n  }\n\n  render() {\n    const {rule} = this.props;\n\n    const ownerId = rule.owner?.split(':')[1];\n    const teamActor = ownerId && {type: 'team' as Actor['type'], id: ownerId, name: ''};\n\n    return (\n      <Fragment>\n        <StatusContainer>\n          <HeaderItem>\n            <Heading noMargin>{t('Last Triggered')}</Heading>\n            <Status>\n              {rule.lastTriggered ? (\n                <TimeSince date={rule.lastTriggered} />\n              ) : (\n                t('No alerts triggered')\n              )}\n            </Status>\n          </HeaderItem>\n        </StatusContainer>\n        <SidebarGroup>\n          <Heading noMargin>{t('Alert Conditions')}</Heading>\n          {this.renderConditions()}\n        </SidebarGroup>\n        <SidebarGroup>\n          <Heading>{t('Alert Rule Details')}</Heading>\n          <KeyValueTable>\n            <KeyValueTableRow\n              keyName={t('Environment')}\n              value={<OverflowTableValue>{rule.environment ?? '-'}</OverflowTableValue>}\n            />\n            {rule.dateCreated && (\n              <KeyValueTableRow\n                keyName={t('Date Created')}\n                value={<TimeSince date={rule.dateCreated} suffix={t('ago')} />}\n              />\n            )}\n            {rule.createdBy && (\n              <KeyValueTableRow\n                keyName={t('Created By')}\n                value={\n                  <OverflowTableValue>{rule.createdBy.name ?? '-'}</OverflowTableValue>\n                }\n              />\n            )}\n            <KeyValueTableRow\n              keyName={t('Team')}\n              value={\n                teamActor ? <ActorAvatar actor={teamActor} size={24} /> : 'Unassigned'\n              }\n            />\n          </KeyValueTable>\n        </SidebarGroup>\n      </Fragment>\n    );\n  }\n}\n\nexport default Sidebar;\n\nconst SidebarGroup = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst HeaderItem = styled('div')`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  > *:nth-child(2) {\n    flex: 1;\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst Status = styled('div')`\n  position: relative;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst StatusContainer = styled('div')`\n  height: 60px;\n  display: flex;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst Step = styled('div')`\n  position: relative;\n  margin-top: ${space(4)};\n\n  :first-child {\n    margin-top: ${space(1)};\n  }\n`;\n\nconst StepContainer = styled('div')`\n  display: flex;\n  align-items: flex-start;\n  flex-grow: 1;\n`;\n\nconst StepContent = styled('div')`\n  &::before {\n    content: '';\n    position: absolute;\n    height: 100%;\n    top: 28px;\n    left: ${space(1)};\n    border-right: 1px ${p => p.theme.gray200} dashed;\n  }\n`;\n\nconst StepLead = styled('div')`\n  margin-bottom: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeMedium};\n  font-weight: 400;\n`;\n\nconst ChevronContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(0.5)} ${space(1)} ${space(0.5)} 0;\n`;\n\nconst Badge = styled('span')`\n  display: inline-block;\n  background-color: ${p => p.theme.purple300};\n  padding: 0 ${space(0.75)};\n  border-radius: ${p => p.theme.borderRadius};\n  color: ${p => p.theme.white};\n  text-transform: uppercase;\n  text-align: center;\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-weight: 400;\n  line-height: 1.5;\n`;\n\nconst ConditionsBadge = styled('span')`\n  display: block;\n  background-color: ${p => p.theme.surface100};\n  padding: 0 ${space(0.75)};\n  border-radius: ${p => p.theme.borderRadius};\n  color: ${p => p.theme.textColor};\n  font-size: ${p => p.theme.fontSizeSmall};\n  margin-bottom: ${space(1)};\n  width: fit-content;\n  font-weight: 400;\n`;\n\nconst Heading = styled(SectionHeading)<{noMargin?: boolean}>`\n  margin-top: ${p => (p.noMargin ? 0 : space(2))};\n  margin-bottom: ${p => (p.noMargin ? 0 : space(1))};\n`;\n\nconst OverflowTableValue = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n`;\n","import type {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport type {DateTimeObject} from 'sentry/components/charts/utils';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {ChangeData} from 'sentry/components/organizations/timeRangeSelector';\nimport PageTimeRangeSelector from 'sentry/components/pageTimeRangeSelector';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DateString, Member, Organization, Project} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {ALERT_DEFAULT_CHART_PERIOD} from 'sentry/views/alerts/rules/metric/details/constants';\n\nimport AlertChart from './alertChart';\nimport AlertRuleIssuesList from './issuesList';\nimport Sidebar from './sidebar';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  project: Project;\n} & RouteComponentProps<{orgId: string; projectId: string; ruleId: string}, {}>;\n\ntype State = AsyncComponent['state'] & {\n  memberList: Member[];\n  rule: IssueAlertRule | null;\n};\n\nconst PAGE_QUERY_PARAMS = [\n  'pageStatsPeriod',\n  'pageStart',\n  'pageEnd',\n  'pageUtc',\n  'cursor',\n];\n\nclass AlertRuleDetails extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  componentDidMount() {\n    const {organization, params} = this.props;\n    trackAdvancedAnalyticsEvent('issue_alert_rule_details.viewed', {\n      organization,\n      rule_id: parseInt(params.ruleId, 10),\n    });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {params: prevParams} = prevProps;\n    const {params: currParams} = this.props;\n\n    if (\n      prevParams.ruleId !== currParams.ruleId ||\n      prevParams.orgId !== currParams.orgId ||\n      prevParams.projectId !== currParams.projectId\n    ) {\n      this.reloadData();\n    }\n  }\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      rule: null,\n      memberList: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, ruleId, projectId} = this.props.params;\n    return [\n      [\n        'rule',\n        `/projects/${orgId}/${projectId}/rules/${ruleId}/`,\n        {query: {expand: 'lastTriggered'}},\n      ],\n      [\n        'memberList',\n        `/organizations/${orgId}/users/`,\n        {query: {project: this.props.project.id}},\n      ],\n    ];\n  }\n\n  getDataDatetime(): DateTimeObject {\n    const query = this.props.location?.query ?? {};\n\n    const {\n      start,\n      end,\n      statsPeriod,\n      utc: utcString,\n    } = normalizeDateTimeParams(query, {\n      allowEmptyPeriod: true,\n      allowAbsoluteDatetime: true,\n      allowAbsolutePageDatetime: true,\n    });\n\n    if (!statsPeriod && !start && !end) {\n      return {period: ALERT_DEFAULT_CHART_PERIOD};\n    }\n\n    // Following getParams, statsPeriod will take priority over start/end\n    if (statsPeriod) {\n      return {period: statsPeriod};\n    }\n\n    const utc = utcString === 'true';\n    if (start && end) {\n      return utc\n        ? {\n            start: moment.utc(start).format(),\n            end: moment.utc(end).format(),\n            utc,\n          }\n        : {\n            start: moment(start).utc().format(),\n            end: moment(end).utc().format(),\n            utc,\n          };\n    }\n\n    return {period: ALERT_DEFAULT_CHART_PERIOD};\n  }\n\n  setStateOnUrl(nextState: {\n    cursor?: string;\n    pageEnd?: DateString;\n    pageStart?: DateString;\n    pageStatsPeriod?: string | null;\n    pageUtc?: boolean | null;\n    team?: string;\n  }) {\n    return this.props.router.push({\n      ...this.props.location,\n      query: {\n        ...this.props.location.query,\n        ...pick(nextState, PAGE_QUERY_PARAMS),\n      },\n    });\n  }\n\n  handleUpdateDatetime = (datetime: ChangeData) => {\n    const {start, end, relative, utc} = datetime;\n\n    if (start && end) {\n      const parser = utc ? moment.utc : moment;\n\n      return this.setStateOnUrl({\n        pageStatsPeriod: undefined,\n        pageStart: parser(start).format(),\n        pageEnd: parser(end).format(),\n        pageUtc: utc ?? undefined,\n        cursor: undefined,\n      });\n    }\n\n    return this.setStateOnUrl({\n      pageStatsPeriod: relative || undefined,\n      pageStart: undefined,\n      pageEnd: undefined,\n      pageUtc: undefined,\n      cursor: undefined,\n    });\n  };\n\n  renderLoading() {\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <LoadingIndicator />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  renderBody() {\n    const {params, location, organization, project} = this.props;\n    const {orgId, ruleId, projectId} = params;\n    const {cursor} = location.query;\n    const {period, start, end, utc} = this.getDataDatetime();\n    const {rule, memberList} = this.state;\n\n    if (!rule) {\n      return <LoadingError message={t('There was an error loading the alert rule.')} />;\n    }\n\n    if (!project) {\n      return (\n        <Alert type=\"warning\">\n          {t('The project you were looking for was not found.')}\n        </Alert>\n      );\n    }\n\n    return (\n      <PageFiltersContainer\n        skipInitializeUrlParams\n        skipLoadLastUsed\n        shouldForceProject\n        forceProject={project}\n        forceEnvironment={rule.environment ?? ''}\n        lockedMessageSubject={t('alert rule')}\n        showDateSelector={false}\n        hideGlobalHeader\n      >\n        <SentryDocumentTitle title={rule.name} orgSlug={orgId} projectSlug={projectId} />\n\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {label: t('Alerts'), to: `/organizations/${orgId}/alerts/rules/`},\n                {\n                  label: rule.name,\n                  to: null,\n                },\n              ]}\n            />\n            <Layout.Title>\n              <RuleName>\n                <IdBadge\n                  project={project}\n                  avatarSize={28}\n                  hideName\n                  avatarProps={{hasTooltip: true, tooltip: project.slug}}\n                />\n                {rule.name}\n              </RuleName>\n            </Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <Button\n                title={t('Send us feedback via email')}\n                href=\"mailto:alerting-feedback@sentry.io?subject=Issue Alert Details Feedback\"\n              >\n                {t('Give Feedback')}\n              </Button>\n              <Button\n                icon={<IconEdit />}\n                to={`/organizations/${orgId}/alerts/rules/${projectId}/${ruleId}/`}\n                onClick={() =>\n                  trackAdvancedAnalyticsEvent('issue_alert_rule_details.edit_clicked', {\n                    organization,\n                    rule_id: parseInt(ruleId, 10),\n                  })\n                }\n              >\n                {t('Edit Rule')}\n              </Button>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main>\n            <StyledPageTimeRangeSelector\n              organization={organization}\n              relative={period ?? ''}\n              start={start ?? null}\n              end={end ?? null}\n              utc={utc ?? null}\n              onUpdate={this.handleUpdateDatetime}\n            />\n            <AlertChart\n              organization={organization}\n              orgId={orgId}\n              project={project}\n              rule={rule}\n              period={period ?? ''}\n              start={start ?? null}\n              end={end ?? null}\n              utc={utc ?? null}\n            />\n            <AlertRuleIssuesList\n              organization={organization}\n              project={project}\n              rule={rule}\n              period={period ?? ''}\n              start={start ?? null}\n              end={end ?? null}\n              utc={utc ?? null}\n              cursor={cursor}\n            />\n          </Layout.Main>\n          <Layout.Side>\n            <Sidebar rule={rule} memberList={memberList} teams={project.teams} />\n          </Layout.Side>\n        </Layout.Body>\n      </PageFiltersContainer>\n    );\n  }\n}\n\nexport default AlertRuleDetails;\n\nconst StyledPageTimeRangeSelector = styled(PageTimeRangeSelector)`\n  margin-bottom: ${space(2)};\n`;\n\nconst RuleName = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n`;\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\nimport {TimePeriod, TimeWindow} from 'sentry/views/alerts/rules/metric/types';\n\nexport const SELECTOR_RELATIVE_PERIODS = {\n  [TimePeriod.SIX_HOURS]: t('Last 6 hours'),\n  [TimePeriod.ONE_DAY]: t('Last 24 hours'),\n  [TimePeriod.THREE_DAYS]: t('Last 3 days'),\n  [TimePeriod.SEVEN_DAYS]: t('Last 7 days'),\n};\n\nexport const ALERT_DEFAULT_CHART_PERIOD = '7d';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n  {label: t('Last 14 days'), value: TimePeriod.FOURTEEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n  [TimePeriod.FOURTEEN_DAYS]: TimeWindow.ONE_DAY * 14 * 60 * 1000,\n};\n\nexport const SELECTOR_DEFAULT_PERIOD = TimePeriod.FOURTEEN_DAYS;\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  display: React.ReactNode;\n  end: string;\n  label: string;\n  period: string;\n  start: string;\n  /**\n   * The start/end were chosen from the period and not the user\n   */\n  usingPeriod: boolean;\n  custom?: boolean;\n  utc?: boolean;\n};\n","import {t} from 'sentry/locale';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n"],"names":["AreaChart","series","stacked","colors","props","map","i","seriesName","data","otherSeriesProps","LineSeries","AreaSeries","stack","undefined","name","value","lineStyle","color","opacity","width","areaStyle","animation","animationThreshold","animationDuration","DEFAULT","realtime","showDetail","left","right","bottom","DataZoomSlider","Array","isArray","getDate","date","moment","format","ChartZoom","Component","constructor","super","this","currentPeriod","period","start","end","saveHistory","router","onZoom","usePageDate","startFormatted","endFormatted","history","push","callIfFunction","zooming","newQuery","location","query","pageStart","getUtcDateString","pageEnd","pageStatsPeriod","qs","pathname","updateDateTime","getUtcToLocalDateObject","saveCurrentPeriod","chart","onChartReady","evt","length","setPeriod","onRestore","model","getModel","startValue","endValue","_payload","batch","previousPeriod","pop","onDataZoom","_props","zoom","_componentsViews","find","c","_features","dataZoom","_isZoomActive","dispatchAction","type","key","dataZoomSelectActive","onFinished","componentDidUpdate","disabled","render","utc","_utc","_start","_end","children","xAxisIndex","_router","_onZoom","_onRestore","_onChartReady","_onDataZoom","_onFinished","showSlider","chartZoomOptions","isGroupedByDate","handleChartReady","DataZoomInside","showTimeInTooltip","toolBox","ToolBox","title","back","iconStyle","borderWidth","handleDataZoom","handleChartFinished","handleZoomRestore","zoomOnMouseWheel","zoomLock","throttle","getFeatures","features","yAxisIndex","options","top","itemSize","z","feature","KeyValueTable","KeyValueTableRow","keyName","Fragment","Key","Value","commonStyles","theme","fontSizeMedium","space","p","overflowEllipsis","backgroundSecondary","textColor","subText","PageTimeRangeSelector","className","DropdownDate","label","DropdownLabel","t","detached","relative","defaultPeriod","Panel","background","border","borderRadius","AlertChart","AsyncComponent","prevProps","project","organization","id","remountComponent","getDefaultState","ruleFireHistory","getEndpoints","rule","slug","statsPeriod","renderChart","state","alert","count","emphasis","zoomRenderProps","grid","yAxis","minInterval","renderEmpty","withPadding","height","loading","totalAlertsTriggered","reduce","acc","curr","StyledPanelBody","ChartHeader","getDynamicText","fixed","testId","ChartFooter","FooterHeader","FooterValue","toLocaleString","withRouter","PanelFooter","SectionHeading","PanelBody","AlertRuleIssuesList","cursor","groupHistory","per_page","renderLoading","renderBody","groupHistoryPageLinks","StyledPanelTable","isLoading","isEmpty","emptyMessage","headers","AlignRight","group","issue","lastTriggered","message","getMessage","getTitle","TitleWrapper","to","environment","MessageWrapper","StyledDateTime","PaginationWrapper","StyledPagination","pageLinks","size","PanelTable","css","DateTime","Pagination","Sidebar","PureComponent","renderConditions","memberList","teams","conditions","condition","ConditionsBadge","filters","filter","time","actions","action","targetType","user","member","targetIdentifier","email","team","tm","replace","Step","StepContainer","ChevronContainer","isCircled","direction","StepContent","StepLead","tct","when","Badge","selector","actionMatch","if","filterMatch","then","ownerId","owner","split","teamActor","StatusContainer","HeaderItem","Heading","noMargin","Status","SidebarGroup","OverflowTableValue","dateCreated","suffix","createdBy","actor","fontSizeLarge","gray200","purple300","white","fontSizeSmall","surface100","PAGE_QUERY_PARAMS","AlertRuleDetails","datetime","parser","setStateOnUrl","pageUtc","componentDidMount","params","trackAdvancedAnalyticsEvent","rule_id","parseInt","ruleId","prevParams","currParams","orgId","projectId","reloadData","expand","getDataDatetime","utcString","normalizeDateTimeParams","allowEmptyPeriod","allowAbsoluteDatetime","allowAbsolutePageDatetime","ALERT_DEFAULT_CHART_PERIOD","nextState","pick","fullWidth","skipInitializeUrlParams","skipLoadLastUsed","shouldForceProject","forceProject","forceEnvironment","lockedMessageSubject","showDateSelector","hideGlobalHeader","orgSlug","projectSlug","crumbs","RuleName","avatarSize","hideName","avatarProps","hasTooltip","tooltip","gap","href","icon","onClick","StyledPageTimeRangeSelector","onUpdate","handleUpdateDatetime","SELECTOR_RELATIVE_PERIODS","TimePeriod","TIME_OPTIONS","TIME_WINDOWS","TimeWindow","API_INTERVAL_POINTS_LIMIT","API_INTERVAL_POINTS_MIN","AlertRuleThresholdType","AlertRuleTriggerType","AlertRuleComparisonType","Dataset","EventTypes","Datasource","SessionsAggregate","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM"],"sourceRoot":""}