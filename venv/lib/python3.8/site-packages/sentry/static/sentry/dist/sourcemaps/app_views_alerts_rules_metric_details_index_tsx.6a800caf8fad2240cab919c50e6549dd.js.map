{"version":3,"file":"chunks/app_views_alerts_rules_metric_details_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertBadge.tsx","webpack:///./app/components/charts/components/markArea.tsx","webpack:///./app/components/collapsePanel.tsx","webpack:///./app/components/keyValueTable.tsx","webpack:///./app/components/pageTimeRangeSelector.tsx","webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/views/alerts/rules/metric/constants.tsx","webpack:///./app/views/alerts/rules/metric/details/constants.tsx","webpack:///./app/components/statusIndicator.tsx","webpack:///./app/views/alerts/rules/metric/details/metricHistory.tsx","webpack:///./app/views/alerts/utils/getMetricRuleDiscoverUrl.tsx","webpack:///./app/views/alerts/rules/metric/metricRulePresets.tsx","webpack:///./app/views/alerts/rules/metric/details/metricChartOption.tsx","webpack:///./app/views/alerts/rules/metric/details/metricChart.tsx","webpack:///./app/views/alerts/rules/metric/details/relatedIssues.tsx","webpack:///./app/views/alerts/rules/metric/details/relatedTransactions.tsx","webpack:///./app/views/alerts/rules/metric/details/sidebar.tsx","webpack:///./app/views/alerts/rules/metric/details/body.tsx","webpack:///./app/views/alerts/rules/metric/details/header.tsx","webpack:///./app/views/alerts/rules/metric/details/index.tsx","webpack:///./app/views/alerts/rules/details/utils.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/rules/metric/utils/getEventTypeFilter.tsx","webpack:///./app/views/alerts/rules/metric/utils/isCrashFreeAlert.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/apiCalls.tsx","webpack:///./app/views/alerts/utils/getChangeStatus.tsx","webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx","webpack:///./app/views/alerts/wizard/utils.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///../node_modules/echarts/lib/component/marker/MarkAreaModel.js","webpack:///../node_modules/echarts/lib/component/marker/MarkAreaView.js","webpack:///../node_modules/echarts/lib/component/markArea.js","webpack:///../node_modules/echarts/lib/component/marker/installMarkArea.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {\n  IconCheckmark,\n  IconDiamond,\n  IconExclamation,\n  IconFire,\n  IconIssues,\n} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\nimport {IncidentStatus} from 'sentry/views/alerts/types';\n\ntype Props = {\n  hideText?: boolean;\n  isIssue?: boolean;\n  status?: IncidentStatus;\n};\n\nfunction AlertBadge({status, hideText = false, isIssue}: Props) {\n  let statusText = t('Resolved');\n  let Icon = IconCheckmark;\n  let color: Color = 'green300';\n  if (isIssue) {\n    statusText = t('Issue');\n    Icon = IconIssues;\n    color = 'gray300';\n  } else if (status === IncidentStatus.CRITICAL) {\n    statusText = t('Critical');\n    Icon = IconFire;\n    color = 'red300';\n  } else if (status === IncidentStatus.WARNING) {\n    statusText = t('Warning');\n    Icon = IconExclamation;\n    color = 'yellow300';\n  }\n\n  return (\n    <Wrapper data-test-id=\"alert-badge\">\n      <AlertIconWrapper color={color} icon={Icon}>\n        <AlertIconBackground color={color} />\n        <Icon color=\"white\" />\n      </AlertIconWrapper>\n\n      {!hideText && <IncidentStatusValue color={color}>{statusText}</IncidentStatusValue>}\n    </Wrapper>\n  );\n}\n\nexport default AlertBadge;\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertIconWrapper = styled('div')<{color: Color; icon: React.ReactNode}>`\n  width: 36px;\n  height: 36px;\n  position: relative;\n\n  svg:last-child {\n    width: ${p => (p.icon === IconIssues ? '13px' : '16px')};\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n  }\n`;\n\nconst AlertIconBackground = styled(IconDiamond)<{color: Color}>`\n  width: 36px;\n  height: 36px;\n`;\n\nconst IncidentStatusValue = styled('div')`\n  margin-left: ${space(1)};\n`;\n","import 'echarts/lib/component/markArea';\n\nimport type {MarkAreaComponentOption} from 'echarts';\n\n/**\n * eCharts markArea\n *\n * See https://echarts.apache.org/en/option.html#series-line.markArea\n */\nexport default function MarkArea(\n  props: MarkAreaComponentOption\n): MarkAreaComponentOption {\n  return {\n    ...props,\n  };\n}\n","import {useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {IconChevron, IconList} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nexport const COLLAPSE_COUNT = 5;\n\ntype ChildRenderProps = {\n  isExpanded: boolean;\n  showMoreButton: React.ReactNode;\n};\n\ntype Props = {\n  children: (props: ChildRenderProps) => JSX.Element;\n  items: number;\n  buttonTitle?: string;\n  collapseCount?: number;\n  disableBorder?: boolean;\n};\n\n/**\n * Used to expand results.\n *\n * Our collapsible component was not used because we want our\n * expand button to be outside the list of children\n *\n */\nfunction CollapsePanel({\n  items,\n  children,\n  buttonTitle,\n  collapseCount = COLLAPSE_COUNT,\n  disableBorder = true,\n}: Props) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  function expandResults() {\n    setIsExpanded(true);\n  }\n\n  return children({\n    isExpanded,\n    showMoreButton:\n      isExpanded || items <= collapseCount ? null : (\n        <ShowMoreButton\n          items={items}\n          buttonTitle={buttonTitle}\n          collapseCount={collapseCount}\n          disableBorder={disableBorder}\n          onClick={expandResults}\n        />\n      ),\n  });\n}\n\ntype ShowMoreButtonProps = {\n  items: number;\n  onClick: () => void;\n  buttonTitle?: string;\n  collapseCount?: number;\n  disableBorder?: boolean;\n};\n\nfunction ShowMoreButton({\n  items,\n  buttonTitle = 'More',\n  collapseCount = COLLAPSE_COUNT,\n  disableBorder = true,\n  onClick,\n}: ShowMoreButtonProps) {\n  return (\n    <ShowMore\n      onClick={onClick}\n      role=\"button\"\n      data-test-id=\"collapse-show-more\"\n      disableBorder={disableBorder}\n    >\n      <ShowMoreText>\n        <StyledIconList color=\"gray300\" />\n        {tct('Show [count] [buttonTitle]', {count: items - collapseCount, buttonTitle})}\n      </ShowMoreText>\n\n      <IconChevron color=\"gray300\" direction=\"down\" />\n    </ShowMore>\n  );\n}\n\nexport default CollapsePanel;\n\nconst ShowMore = styled('div')<{disableBorder: boolean}>`\n  display: flex;\n  align-items: center;\n  padding: ${space(1)} ${space(2)};\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.subText};\n  cursor: pointer;\n  border-top: 1px solid ${p => p.theme.border};\n\n  ${p =>\n    !p.disableBorder &&\n    css`\n      border-left: 1px solid ${p.theme.border};\n      border-right: 1px solid ${p.theme.border};\n      border-bottom: 1px solid ${p.theme.border};\n      border-bottom-left-radius: ${p.theme.borderRadius};\n      border-bottom-right-radius: ${p.theme.borderRadius};\n      margin-bottom: ${space(2)};\n    `}\n`;\n\nconst StyledIconList = styled(IconList)`\n  margin-right: ${space(1)};\n`;\n\nconst ShowMoreText = styled('div')`\n  display: flex;\n  align-items: center;\n  flex-grow: 1;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","import styled from '@emotion/styled';\n\nimport TimeRangeSelector from 'sentry/components/organizations/timeRangeSelector';\nimport {Panel} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = React.ComponentProps<typeof TimeRangeSelector> & {className?: string};\n\nfunction PageTimeRangeSelector({className, ...props}: Props) {\n  return (\n    <DropdownDate className={className}>\n      <TimeRangeSelector\n        key={`period:${props.relative}-start:${props.start}-end:${props.end}-utc:${props.utc}-defaultPeriod:${props.defaultPeriod}`}\n        label={<DropdownLabel>{t('Date Range:')}</DropdownLabel>}\n        detached\n        {...props}\n      />\n    </DropdownDate>\n  );\n}\n\nconst DropdownDate = styled(Panel)`\n  padding: 0;\n  margin: 0;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 42px;\n  background: ${p => p.theme.background};\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.textColor};\n\n  > div {\n    width: 100%;\n    align-self: stretch;\n  }\n  /* StyledItemHeader used to show selected value of TimeRangeSelector */\n  > div > div:first-child > div {\n    padding: 0 ${space(2)};\n  }\n  /* Menu that dropdowns from TimeRangeSelector */\n  > div > div:last-child:not(:first-child) {\n    /* Remove awkward 1px width difference on dropdown due to border */\n    min-width: calc(100% + 2px);\n    transform: translateX(-1px);\n    right: auto;\n  }\n`;\n\nconst DropdownLabel = styled('span')`\n  text-align: left;\n  font-weight: 600;\n  color: ${p => p.theme.textColor};\n\n  > span:last-child {\n    font-weight: 400;\n  }\n`;\n\nexport default PageTimeRangeSelector;\n","import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AggregationKey, LooseFieldKey} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  TimeWindow,\n  Trigger,\n  UnsavedMetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n  isSessionAggregate,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nexport const DEFAULT_COUNT_TIME_WINDOW = 1; // 1min\nexport const DEFAULT_CHANGE_TIME_WINDOW = 60; // 1h\nexport const DEFAULT_CHANGE_COMP_DELTA = 10080; // 1w\n\nexport const DEFAULT_AGGREGATE = 'count()';\nexport const DEFAULT_TRANSACTION_AGGREGATE = 'p95(transaction.duration)';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: 'event.type:[error, default]',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\nexport type OptionConfig = {\n  aggregations: AggregationKey[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: ['count', 'count_unique'],\n  fields: ['user'],\n};\n\nconst commonAggregations: AggregationKey[] = [\n  'avg',\n  'percentile',\n  'p50',\n  'p75',\n  'p95',\n  'p99',\n  'p100',\n];\n\nconst allAggregations: AggregationKey[] = [\n  ...commonAggregations,\n  'failure_rate',\n  'apdex',\n  'count',\n];\n\nexport const DuplicateMetricFields: string[] = [\n  'dataset',\n  'eventTypes',\n  'aggregate',\n  'query',\n  'timeWindow',\n  'thresholdPeriod',\n  'projects',\n  'environment',\n  'resolveThreshold',\n  'thresholdType',\n  'owner',\n  'name',\n  'projectId',\n  'comparisonDelta',\n];\n\nexport const DuplicateTriggerFields: string[] = ['alertThreshold', 'label'];\n\nexport const DuplicateActionFields: string[] = [\n  'type',\n  'targetType',\n  'targetIdentifier',\n  'inputChannelId',\n  'options',\n];\n\nexport const COMPARISON_DELTA_OPTIONS = [\n  {value: 5, label: t('same time 5 minutes ago')}, // 5 minutes\n  {value: 15, label: t('same time 15 minutes ago')}, // 15 minutes\n  {value: 60, label: t('same time one hour ago')}, // one hour\n  {value: 1440, label: t('same time one day ago')}, // one day\n  {value: 10080, label: t('same time one week ago')}, // one week\n  {value: 43200, label: t('same time one month ago')}, // 30 days\n];\n\nexport function getWizardAlertFieldConfig(\n  alertType: AlertType,\n  dataset: Dataset\n): OptionConfig {\n  if (alertType === 'custom' && dataset === Dataset.ERRORS) {\n    return errorFieldConfig;\n  }\n  // If user selected apdex we must include that in the OptionConfig as it has a user specified column\n  const aggregations =\n    alertType === 'apdex' || alertType === 'custom'\n      ? allAggregations\n      : commonAggregations;\n  return {\n    aggregations,\n    fields: ['transaction.duration'],\n    measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n  };\n}\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: allAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: AlertRuleTriggerType): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(\n  defaultRuleOptions: Partial<UnsavedMetricRule> = {}\n): UnsavedMetricRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 60,\n    thresholdPeriod: 1,\n    triggers: [\n      createDefaultTrigger(AlertRuleTriggerType.CRITICAL),\n      createDefaultTrigger(AlertRuleTriggerType.WARNING),\n    ],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n    ...defaultRuleOptions,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedMetricRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n\n  let aggregate = eventView.getYAxis();\n  if (\n    datasetAndEventtypes.dataset === 'transactions' &&\n    /^p\\d{2,3}\\(\\)/.test(eventView.getYAxis())\n  ) {\n    // p95() -> p95(transaction.duration)\n    aggregate = eventView.getYAxis().slice(0, 3) + '(transaction.duration)';\n  }\n\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate,\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n\nexport function createRuleFromWizardTemplate(\n  wizardTemplate: WizardRuleTemplate\n): UnsavedMetricRule {\n  const {eventTypes, aggregate, dataset} = wizardTemplate;\n  const defaultRuleOptions: Partial<UnsavedMetricRule> = {};\n\n  if (isSessionAggregate(aggregate)) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n    defaultRuleOptions.timeWindow = TimeWindow.ONE_HOUR;\n  }\n\n  if (aggregate.includes('apdex')) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n  }\n\n  return {\n    ...createDefaultRule(defaultRuleOptions),\n    eventTypes: [eventTypes],\n    aggregate,\n    dataset,\n  };\n}\n\nexport function getThresholdUnits(\n  aggregate: string,\n  comparisonType: AlertRuleComparisonType\n): string {\n  // cls is a number not a measurement of time\n  if (\n    isSessionAggregate(aggregate) ||\n    comparisonType === AlertRuleComparisonType.CHANGE\n  ) {\n    return '%';\n  }\n\n  if (aggregate.includes('measurements.cls')) {\n    return '';\n  }\n\n  if (aggregate.includes('duration') || aggregate.includes('measurements')) {\n    return 'ms';\n  }\n\n  return '';\n}\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\nimport {TimePeriod, TimeWindow} from 'sentry/views/alerts/rules/metric/types';\n\nexport const SELECTOR_RELATIVE_PERIODS = {\n  [TimePeriod.SIX_HOURS]: t('Last 6 hours'),\n  [TimePeriod.ONE_DAY]: t('Last 24 hours'),\n  [TimePeriod.THREE_DAYS]: t('Last 3 days'),\n  [TimePeriod.SEVEN_DAYS]: t('Last 7 days'),\n};\n\nexport const ALERT_DEFAULT_CHART_PERIOD = '7d';\n\nexport const TIME_OPTIONS: SelectValue<string>[] = [\n  {label: t('Last 6 hours'), value: TimePeriod.SIX_HOURS},\n  {label: t('Last 24 hours'), value: TimePeriod.ONE_DAY},\n  {label: t('Last 3 days'), value: TimePeriod.THREE_DAYS},\n  {label: t('Last 7 days'), value: TimePeriod.SEVEN_DAYS},\n  {label: t('Last 14 days'), value: TimePeriod.FOURTEEN_DAYS},\n];\n\nexport const TIME_WINDOWS = {\n  [TimePeriod.SIX_HOURS]: TimeWindow.ONE_HOUR * 6 * 60 * 1000,\n  [TimePeriod.ONE_DAY]: TimeWindow.ONE_DAY * 60 * 1000,\n  [TimePeriod.THREE_DAYS]: TimeWindow.ONE_DAY * 3 * 60 * 1000,\n  [TimePeriod.SEVEN_DAYS]: TimeWindow.ONE_DAY * 7 * 60 * 1000,\n  [TimePeriod.FOURTEEN_DAYS]: TimeWindow.ONE_DAY * 14 * 60 * 1000,\n};\n\nexport const SELECTOR_DEFAULT_PERIOD = TimePeriod.FOURTEEN_DAYS;\nexport const API_INTERVAL_POINTS_LIMIT = 10000;\nexport const API_INTERVAL_POINTS_MIN = 150;\n\nexport type TimePeriodType = {\n  display: React.ReactNode;\n  end: string;\n  label: string;\n  period: string;\n  start: string;\n  /**\n   * The start/end were chosen from the period and not the user\n   */\n  usingPeriod: boolean;\n  custom?: boolean;\n  utc?: boolean;\n};\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'sentry/components/tooltip';\n\ntype Props = {\n  status: string;\n  tooltipTitle: string;\n};\n\n/**\n * A badge/indicator at the beginning of the row that displays\n * the color of the status level (Warning, Error, Success, etc)\n *\n */\nfunction StatusIndicator({status, tooltipTitle}: Props) {\n  let color: string = 'error';\n\n  if (status === 'muted') {\n    color = 'muted';\n  } else if (status === 'info') {\n    color = 'info';\n  } else if (status === 'warning') {\n    color = 'warning';\n  } else if (status === 'success' || status === 'resolved') {\n    color = 'success';\n  }\n\n  return (\n    <Tooltip title={tooltipTitle} skipWrapper>\n      <StatusLevel color={color} />\n    </Tooltip>\n  );\n}\n\nexport default StatusIndicator;\n\nconst StatusLevel = styled('div')<{color: string}>`\n  position: absolute;\n  left: -1px;\n  width: 9px;\n  height: 15px;\n  border-radius: 0 3px 3px 0;\n\n  background-color: ${p => p.theme.alert[p.color].background};\n  & span {\n    display: block;\n    width: 9px;\n    height: 15px;\n  }\n`;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport moment from 'moment-timezone';\n\nimport CollapsePanel from 'sentry/components/collapsePanel';\nimport DateTime from 'sentry/components/dateTime';\nimport Duration from 'sentry/components/duration';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport Link from 'sentry/components/links/link';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport StatusIndicator from 'sentry/components/statusIndicator';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {AlertRuleThresholdType} from 'sentry/views/alerts/rules/metric/types';\nimport {Incident, IncidentActivityType, IncidentStatus} from 'sentry/views/alerts/types';\nimport {alertDetailsLink} from 'sentry/views/alerts/utils';\nimport {AlertWizardAlertNames} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\nconst COLLAPSE_COUNT = 3;\n\nfunction getTriggerName(value: string | null) {\n  if (value === `${IncidentStatus.WARNING}`) {\n    return t('Warning');\n  }\n\n  if (value === `${IncidentStatus.CRITICAL}`) {\n    return t('Critical');\n  }\n\n  // Otherwise, activity type is not status change\n  return '';\n}\n\ntype MetricAlertActivityProps = {\n  incident: Incident;\n  organization: Organization;\n};\n\nfunction MetricAlertActivity({organization, incident}: MetricAlertActivityProps) {\n  const activities = (incident.activities ?? []).filter(\n    activity => activity.type === IncidentActivityType.STATUS_CHANGE\n  );\n  const criticalActivity = activities.filter(\n    activity => activity.value === `${IncidentStatus.CRITICAL}`\n  );\n  const warningActivity = activities.filter(\n    activity => activity.value === `${IncidentStatus.WARNING}`\n  );\n\n  const triggeredActivity = !!criticalActivity.length\n    ? criticalActivity[0]\n    : warningActivity[0];\n  const currentTrigger = getTriggerName(triggeredActivity.value);\n\n  const nextActivity = activities.find(\n    ({previousValue}) => previousValue === triggeredActivity.value\n  );\n\n  const activityDuration = (\n    nextActivity ? moment(nextActivity.dateCreated) : moment()\n  ).diff(moment(triggeredActivity.dateCreated), 'milliseconds');\n\n  const threshold =\n    activityDuration !== null &&\n    tct('[duration]', {\n      duration: <Duration abbreviation seconds={activityDuration / 1000} />,\n    });\n\n  const warningThreshold = incident.alertRule.triggers\n    .filter(trigger => trigger.label === 'warning')\n    .map(trig => trig.alertThreshold);\n  const criticalThreshold = incident.alertRule.triggers\n    .filter(trigger => trigger.label === 'critical')\n    .map(trig => trig.alertThreshold);\n\n  return (\n    <ErrorBoundary>\n      <Title data-test-id=\"alert-title\">\n        <StatusIndicator\n          status={currentTrigger.toLocaleLowerCase()}\n          tooltipTitle={tct('Status: [level]', {level: currentTrigger})}\n        />\n        <Link\n          to={{\n            pathname: alertDetailsLink(organization, incident),\n            query: {alert: incident.identifier},\n          }}\n        >\n          {tct('#[id]', {id: incident.identifier})}\n        </Link>\n      </Title>\n      <Cell>\n        {tct('[title] [selector] [threshold]', {\n          title:\n            AlertWizardAlertNames[getAlertTypeFromAggregateDataset(incident.alertRule)],\n          selector:\n            incident.alertRule.thresholdType === AlertRuleThresholdType.ABOVE\n              ? 'above'\n              : 'below',\n          threshold: currentTrigger === 'Warning' ? warningThreshold : criticalThreshold,\n        })}\n      </Cell>\n      <Cell>\n        {getDynamicText({\n          value: threshold,\n          fixed: '30s',\n        })}\n      </Cell>\n      <StyledDateTime\n        date={getDynamicText({\n          value: incident.dateCreated,\n          fixed: 'Mar 4, 2022 10:44:13 AM UTC',\n        })}\n      />\n    </ErrorBoundary>\n  );\n}\n\ntype Props = {\n  organization: Organization;\n  incidents?: Incident[];\n};\n\nfunction MetricHistory({organization, incidents}: Props) {\n  const numOfIncidents = (incidents ?? []).length;\n\n  return (\n    <CollapsePanel\n      items={numOfIncidents}\n      collapseCount={COLLAPSE_COUNT}\n      disableBorder={false}\n      buttonTitle={tn('Hidden Alert', 'Hidden Alerts', numOfIncidents - COLLAPSE_COUNT)}\n    >\n      {({isExpanded, showMoreButton}) => (\n        <div>\n          <StyledPanelTable\n            headers={[t('Alert'), t('Reason'), t('Duration'), t('Date Triggered')]}\n            isEmpty={!numOfIncidents}\n            emptyMessage={t('No alerts triggered during this time.')}\n            expanded={numOfIncidents <= COLLAPSE_COUNT || isExpanded}\n          >\n            {incidents &&\n              incidents.map((incident, idx) => {\n                if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                  return null;\n                }\n                return (\n                  <MetricAlertActivity\n                    key={idx}\n                    incident={incident}\n                    organization={organization}\n                  />\n                );\n              })}\n          </StyledPanelTable>\n          {showMoreButton}\n        </div>\n      )}\n    </CollapsePanel>\n  );\n}\n\nexport default MetricHistory;\n\nconst StyledPanelTable = styled(PanelTable)<{expanded: boolean; isEmpty: boolean}>`\n  grid-template-columns: max-content 1fr repeat(2, max-content);\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  div:last-of-type {\n    padding: ${p => p.isEmpty && `48px ${space(1)}`};\n  }\n\n  ${p =>\n    !p.expanded &&\n    css`\n      margin-bottom: 0px;\n      border-bottom-left-radius: 0px;\n      border-bottom-right-radius: 0px;\n      border-bottom: none;\n    `}\n`;\n\nconst StyledDateTime = styled(DateTime)`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n  display: flex;\n  justify-content: flex-start;\n  padding: ${space(1)} ${space(2)} !important;\n`;\n\nconst Title = styled('div')`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  width: 100%;\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1)};\n`;\n\nconst Cell = styled('div')`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n  font-size: ${p => p.theme.fontSizeMedium};\n  padding: ${space(1)};\n`;\n","import {NewQuery, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {Dataset, MetricRule} from 'sentry/views/alerts/rules/metric/types';\n/**\n * Gets the URL for a discover view of the rule with the following default\n * parameters:\n *\n * - Ordered by the rule aggregate, descending\n * - yAxis maps to the aggregate\n * - The following fields are displayed:\n *   - For Error dataset alert rules: [issue, count(), count_unique(user)]\n *   - For Transaction dataset alert rules: [transaction, count()]\n * - Start and end are the period's values selected in the chart header\n */\nexport function getMetricRuleDiscoverUrl(opts: {\n  orgSlug: string;\n  projects: Project[];\n  end?: string;\n  environment?: string | null;\n  eventType?: string;\n  extraQueryParams?: Partial<NewQuery>;\n  fields?: string[];\n  rule?: MetricRule;\n  start?: string;\n}) {\n  const {\n    orgSlug,\n    projects,\n    rule,\n    eventType,\n    start,\n    end,\n    extraQueryParams,\n    fields,\n    environment,\n  } = opts;\n  const eventTypeTagFilter = eventType && rule?.query ? eventType : '';\n\n  if (!projects || !projects.length || !rule || (!start && !end)) {\n    return '';\n  }\n\n  const timeWindowString = `${rule.timeWindow}m`;\n\n  const discoverQuery: NewQuery = {\n    id: undefined,\n    name: (rule && rule.name) || '',\n    orderby: `-${getAggregateAlias(rule.aggregate)}`,\n    yAxis: rule.aggregate ? [rule.aggregate] : undefined,\n    query: (eventTypeTagFilter || rule?.query || eventType) ?? '',\n    projects: projects\n      .filter(({slug}) => rule.projects.includes(slug))\n      .map(({id}) => Number(id)),\n    environment: environment ? [environment] : undefined,\n    version: 2,\n    fields: fields\n      ? fields\n      : rule.dataset === Dataset.ERRORS\n      ? ['issue', 'count()', 'count_unique(user)']\n      : ['transaction', rule.aggregate],\n    start,\n    end,\n    ...extraQueryParams,\n  };\n\n  const discoverView = EventView.fromSavedQuery(discoverQuery);\n  const {query, ...toObject} = discoverView.getResultsViewUrlTarget(orgSlug);\n\n  return {\n    query: {...query, interval: timeWindowString},\n    ...toObject,\n  };\n}\n","import type {LinkProps} from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {DisplayModes} from 'sentry/utils/discover/types';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport {getMetricRuleDiscoverUrl} from 'sentry/views/alerts/utils/getMetricRuleDiscoverUrl';\n\ninterface PresetCta {\n  /**\n   * The CTA text\n   */\n  buttonText: string;\n  /**\n   * The location to direct to upon clicking the CTA.\n   */\n  to: LinkProps['to'];\n  /**\n   * The tooltip title for the CTA button, may be empty.\n   */\n  title?: string;\n}\n\ninterface PresetCtaOpts {\n  orgSlug: string;\n  projects: Project[];\n  end?: string;\n  eventType?: string;\n  fields?: string[];\n  rule?: MetricRule;\n  start?: string;\n}\n\n/**\n * Get the CTA used for alert rules that do not have a preset\n */\nexport function makeDefaultCta({\n  orgSlug,\n  projects,\n  rule,\n  eventType,\n  start,\n  end,\n  fields,\n}: PresetCtaOpts): PresetCta {\n  if (!rule) {\n    return {\n      buttonText: t('Open in Discover'),\n      to: '',\n    };\n  }\n\n  const extraQueryParams = {\n    display: DisplayModes.TOP5,\n  };\n\n  return {\n    buttonText: t('Open in Discover'),\n    to: getMetricRuleDiscoverUrl({\n      orgSlug,\n      projects,\n      environment: rule.environment,\n      rule,\n      eventType,\n      start,\n      end,\n      extraQueryParams,\n      fields,\n    }),\n  };\n}\n","import color from 'color';\nimport type {YAXisComponentOption} from 'echarts';\nimport moment from 'moment';\nimport momentTimezone from 'moment-timezone';\n\nimport type {AreaChartProps, AreaChartSeries} from 'sentry/components/charts/areaChart';\nimport MarkArea from 'sentry/components/charts/components/markArea';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport type {SessionApiResponse} from 'sentry/types';\nimport type {Series} from 'sentry/types/echarts';\nimport {getCrashFreeRateSeries} from 'sentry/utils/sessions';\nimport {lightTheme as theme} from 'sentry/utils/theme';\nimport {\n  AlertRuleTriggerType,\n  Dataset,\n  MetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {Incident, IncidentActivityType, IncidentStatus} from 'sentry/views/alerts/types';\nimport {\n  ALERT_CHART_MIN_MAX_BUFFER,\n  alertAxisFormatter,\n  alertTooltipValueFormatter,\n  SESSION_AGGREGATE_TO_FIELD,\n  shouldScaleAlertChart,\n} from 'sentry/views/alerts/utils';\nimport {AlertWizardAlertNames} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\nimport {isCrashFreeAlert} from '../utils/isCrashFreeAlert';\n\nfunction formatTooltipDate(date: moment.MomentInput, format: string): string {\n  const {\n    options: {timezone},\n  } = ConfigStore.get('user');\n  return momentTimezone.tz(date, timezone).format(format);\n}\n\nfunction createStatusAreaSeries(\n  lineColor: string,\n  startTime: number,\n  endTime: number,\n  yPosition: number\n): AreaChartSeries {\n  return {\n    seriesName: '',\n    type: 'line',\n    markLine: MarkLine({\n      silent: true,\n      lineStyle: {color: lineColor, type: 'solid', width: 4},\n      data: [[{coord: [startTime, yPosition]}, {coord: [endTime, yPosition]}]],\n    }),\n    data: [],\n  };\n}\n\nfunction createThresholdSeries(lineColor: string, threshold: number): AreaChartSeries {\n  return {\n    seriesName: 'Threshold Line',\n    type: 'line',\n    markLine: MarkLine({\n      silent: true,\n      lineStyle: {color: lineColor, type: 'dashed', width: 1},\n      data: [{yAxis: threshold}],\n      label: {\n        show: false,\n      },\n    }),\n    data: [],\n  };\n}\n\nfunction createIncidentSeries(\n  incident: Incident,\n  lineColor: string,\n  incidentTimestamp: number,\n  dataPoint?: AreaChartSeries['data'][0],\n  seriesName?: string,\n  aggregate?: string,\n  handleIncidentClick?: (incident: Incident) => void\n): AreaChartSeries {\n  const formatter = ({value, marker}: any) => {\n    const time = formatTooltipDate(moment(value), 'MMM D, YYYY LT');\n    return [\n      `<div class=\"tooltip-series\"><div>`,\n      `<span class=\"tooltip-label\">${marker} <strong>${t('Alert')} #${\n        incident.identifier\n      }</strong></span>${\n        dataPoint?.value\n          ? `${seriesName} ${alertTooltipValueFormatter(\n              dataPoint.value,\n              seriesName ?? '',\n              aggregate ?? ''\n            )}`\n          : ''\n      }`,\n      `</div></div>`,\n      `<div class=\"tooltip-date\">${time}</div>`,\n      '<div class=\"tooltip-arrow\"></div>',\n    ].join('');\n  };\n\n  return {\n    seriesName: 'Incident Line',\n    type: 'line',\n    markLine: MarkLine({\n      silent: false,\n      lineStyle: {color: lineColor, type: 'solid'},\n      data: [\n        {\n          xAxis: incidentTimestamp,\n          // @ts-expect-error onClick not in echart types\n          onClick: () => handleIncidentClick?.(incident),\n        },\n      ],\n      label: {\n        silent: true,\n        show: !!incident.identifier,\n        position: 'insideEndBottom',\n        formatter: incident.identifier,\n        color: lineColor,\n        fontSize: 10,\n        fontFamily: 'Rubik',\n      },\n      tooltip: {\n        formatter,\n      },\n    }),\n    data: [],\n    tooltip: {\n      trigger: 'item',\n      alwaysShowContent: true,\n      formatter,\n    },\n  };\n}\n\nexport type MetricChartData = {\n  rule: MetricRule;\n  timeseriesData: Series[];\n  handleIncidentClick?: (incident: Incident) => void;\n  incidents?: Incident[];\n  selectedIncident?: Incident | null;\n};\n\ntype MetricChartOption = {\n  chartOption: AreaChartProps;\n  criticalDuration: number;\n  totalDuration: number;\n  warningDuration: number;\n};\n\nexport function getMetricAlertChartOption({\n  timeseriesData,\n  rule,\n  incidents,\n  selectedIncident,\n  handleIncidentClick,\n}: MetricChartData): MetricChartOption {\n  const criticalTrigger = rule.triggers.find(\n    ({label}) => label === AlertRuleTriggerType.CRITICAL\n  );\n  const warningTrigger = rule.triggers.find(\n    ({label}) => label === AlertRuleTriggerType.WARNING\n  );\n\n  const series: AreaChartSeries[] = [...timeseriesData];\n  const areaSeries: AreaChartSeries[] = [];\n  // Ensure series data appears below incident/mark lines\n  series[0].z = 1;\n  series[0].color = CHART_PALETTE[0][0];\n\n  const dataArr = timeseriesData[0].data;\n  const maxSeriesValue = dataArr.reduce(\n    (currMax, coord) => Math.max(currMax, coord.value),\n    0\n  );\n  // find the lowest value between chart data points, warning threshold,\n  // critical threshold and then apply some breathing space\n  const minChartValue = shouldScaleAlertChart(rule.aggregate)\n    ? Math.floor(\n        Math.min(\n          dataArr.reduce((currMax, coord) => Math.min(currMax, coord.value), Infinity),\n          typeof warningTrigger?.alertThreshold === 'number'\n            ? warningTrigger.alertThreshold\n            : Infinity,\n          typeof criticalTrigger?.alertThreshold === 'number'\n            ? criticalTrigger.alertThreshold\n            : Infinity\n        ) / ALERT_CHART_MIN_MAX_BUFFER\n      )\n    : 0;\n  const firstPoint = moment(dataArr[0]?.name).valueOf();\n  const lastPoint = moment(dataArr[dataArr.length - 1]?.name).valueOf();\n  const totalDuration = lastPoint - firstPoint;\n  let criticalDuration = 0;\n  let warningDuration = 0;\n\n  series.push(\n    createStatusAreaSeries(theme.green300, firstPoint, lastPoint, minChartValue)\n  );\n\n  if (incidents) {\n    // select incidents that fall within the graph range\n    const periodStart = moment.utc(firstPoint);\n\n    incidents\n      .filter(\n        incident =>\n          !incident.dateClosed || moment(incident.dateClosed).isAfter(periodStart)\n      )\n      .forEach(incident => {\n        const statusChanges = incident.activities\n          ?.filter(\n            ({type, value}) =>\n              type === IncidentActivityType.STATUS_CHANGE &&\n              value &&\n              [`${IncidentStatus.WARNING}`, `${IncidentStatus.CRITICAL}`].includes(value)\n          )\n          .sort(\n            (a, b) => moment(a.dateCreated).valueOf() - moment(b.dateCreated).valueOf()\n          );\n\n        const incidentEnd = incident.dateClosed ?? moment().valueOf();\n\n        const timeWindowMs = rule.timeWindow * 60 * 1000;\n        const incidentColor =\n          warningTrigger &&\n          statusChanges &&\n          !statusChanges.find(({value}) => value === `${IncidentStatus.CRITICAL}`)\n            ? theme.yellow300\n            : theme.red300;\n\n        const incidentStartDate = moment(incident.dateStarted).valueOf();\n        const incidentCloseDate = incident.dateClosed\n          ? moment(incident.dateClosed).valueOf()\n          : lastPoint;\n        const incidentStartValue = dataArr.find(\n          point => moment(point.name).valueOf() >= incidentStartDate\n        );\n        series.push(\n          createIncidentSeries(\n            incident,\n            incidentColor,\n            incidentStartDate,\n            incidentStartValue,\n            series[0].seriesName,\n            rule.aggregate,\n            handleIncidentClick\n          )\n        );\n        const areaStart = Math.max(moment(incident.dateStarted).valueOf(), firstPoint);\n        const areaEnd = Math.min(\n          statusChanges?.length && statusChanges[0].dateCreated\n            ? moment(statusChanges[0].dateCreated).valueOf() - timeWindowMs\n            : moment(incidentEnd).valueOf(),\n          lastPoint\n        );\n        const areaColor = warningTrigger ? theme.yellow300 : theme.red300;\n        if (areaEnd > areaStart) {\n          series.push(\n            createStatusAreaSeries(areaColor, areaStart, areaEnd, minChartValue)\n          );\n\n          if (areaColor === theme.yellow300) {\n            warningDuration += Math.abs(areaEnd - areaStart);\n          } else {\n            criticalDuration += Math.abs(areaEnd - areaStart);\n          }\n        }\n\n        statusChanges?.forEach((activity, idx) => {\n          const statusAreaStart = Math.max(\n            moment(activity.dateCreated).valueOf() - timeWindowMs,\n            firstPoint\n          );\n          const statusAreaEnd = Math.min(\n            idx === statusChanges.length - 1\n              ? moment(incidentEnd).valueOf()\n              : moment(statusChanges[idx + 1].dateCreated).valueOf() - timeWindowMs,\n            lastPoint\n          );\n          const statusAreaColor =\n            activity.value === `${IncidentStatus.CRITICAL}`\n              ? theme.red300\n              : theme.yellow300;\n          if (statusAreaEnd > statusAreaStart) {\n            series.push(\n              createStatusAreaSeries(\n                statusAreaColor,\n                statusAreaStart,\n                statusAreaEnd,\n                minChartValue\n              )\n            );\n            if (statusAreaColor === theme.yellow300) {\n              warningDuration += Math.abs(statusAreaEnd - statusAreaStart);\n            } else {\n              criticalDuration += Math.abs(statusAreaEnd - statusAreaStart);\n            }\n          }\n        });\n\n        if (selectedIncident && incident.id === selectedIncident.id) {\n          const selectedIncidentColor =\n            incidentColor === theme.yellow300 ? theme.yellow100 : theme.red100;\n\n          areaSeries.push({\n            seriesName: '',\n            type: 'line',\n            markArea: MarkArea({\n              silent: true,\n              itemStyle: {\n                color: color(selectedIncidentColor).alpha(0.42).rgb().string(),\n              },\n              data: [[{xAxis: incidentStartDate}, {xAxis: incidentCloseDate}]],\n            }),\n            data: [],\n          });\n        }\n      });\n  }\n\n  let maxThresholdValue = 0;\n  if (!rule.comparisonDelta && warningTrigger?.alertThreshold) {\n    const {alertThreshold} = warningTrigger;\n    const warningThresholdLine = createThresholdSeries(theme.yellow300, alertThreshold);\n    series.push(warningThresholdLine);\n    maxThresholdValue = Math.max(maxThresholdValue, alertThreshold);\n  }\n\n  if (!rule.comparisonDelta && criticalTrigger?.alertThreshold) {\n    const {alertThreshold} = criticalTrigger;\n    const criticalThresholdLine = createThresholdSeries(theme.red300, alertThreshold);\n    series.push(criticalThresholdLine);\n    maxThresholdValue = Math.max(maxThresholdValue, alertThreshold);\n  }\n\n  if (!rule.comparisonDelta && rule.resolveThreshold) {\n    const resolveThresholdLine = createThresholdSeries(\n      theme.green300,\n      rule.resolveThreshold\n    );\n    series.push(resolveThresholdLine);\n    maxThresholdValue = Math.max(maxThresholdValue, rule.resolveThreshold);\n  }\n\n  const yAxis: YAXisComponentOption = {\n    axisLabel: {\n      formatter: (value: number) =>\n        alertAxisFormatter(value, timeseriesData[0].seriesName, rule.aggregate),\n    },\n    max: isCrashFreeAlert(rule.dataset)\n      ? 100\n      : maxThresholdValue > maxSeriesValue\n      ? maxThresholdValue\n      : undefined,\n    min: minChartValue || undefined,\n  };\n\n  return {\n    criticalDuration,\n    warningDuration,\n    totalDuration,\n    chartOption: {\n      isGroupedByDate: true,\n      yAxis,\n      series,\n      grid: {\n        left: space(0.25),\n        right: space(2),\n        top: space(3),\n        bottom: 0,\n      },\n    },\n  };\n}\n\nexport function transformSessionResponseToSeries(\n  response: SessionApiResponse | null,\n  rule: MetricRule\n): MetricChartData['timeseriesData'] {\n  const {aggregate} = rule;\n\n  return [\n    {\n      seriesName:\n        AlertWizardAlertNames[\n          getAlertTypeFromAggregateDataset({\n            aggregate,\n            dataset: Dataset.SESSIONS,\n          })\n        ],\n      data: getCrashFreeRateSeries(\n        response?.groups,\n        response?.intervals,\n        SESSION_AGGREGATE_TO_FIELD[aggregate]\n      ),\n    },\n  ];\n}\n","import {PureComponent} from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport color from 'color';\nimport type {LineSeriesOption} from 'echarts';\nimport capitalize from 'lodash/capitalize';\nimport moment from 'moment';\nimport momentTimezone from 'moment-timezone';\n\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport {AreaChart, AreaChartSeries} from 'sentry/components/charts/areaChart';\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport MarkArea from 'sentry/components/charts/components/markArea';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport LineSeries from 'sentry/components/charts/series/lineSeries';\nimport SessionsRequest from 'sentry/components/charts/sessionsRequest';\nimport {\n  ChartControls,\n  HeaderTitleLegend,\n  InlineContainer,\n  SectionHeading,\n  SectionValue,\n} from 'sentry/components/charts/styles';\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport {\n  parseStatsPeriod,\n  StatsPeriodType,\n} from 'sentry/components/organizations/pageFilters/parse';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport Truncate from 'sentry/components/truncate';\nimport {IconCheckmark, IconFire, IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport ConfigStore from 'sentry/stores/configStore';\nimport space from 'sentry/styles/space';\nimport {DateString, Organization, Project} from 'sentry/types';\nimport {ReactEchartsRef, Series} from 'sentry/types/echarts';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {MINUTES_THRESHOLD_TO_DISPLAY_SECONDS} from 'sentry/utils/sessions';\nimport theme from 'sentry/utils/theme';\nimport {COMPARISON_DELTA_OPTIONS} from 'sentry/views/alerts/rules/metric/constants';\nimport {makeDefaultCta} from 'sentry/views/alerts/rules/metric/metricRulePresets';\nimport {\n  AlertRuleTriggerType,\n  MetricRule,\n  TimePeriod,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {getChangeStatus} from 'sentry/views/alerts/utils/getChangeStatus';\nimport {AlertWizardAlertNames} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\nimport {Incident} from '../../../types';\nimport {\n  alertDetailsLink,\n  alertTooltipValueFormatter,\n  isSessionAggregate,\n  SESSION_AGGREGATE_TO_FIELD,\n} from '../../../utils';\nimport {isCrashFreeAlert} from '../utils/isCrashFreeAlert';\n\nimport {TimePeriodType} from './constants';\nimport {\n  getMetricAlertChartOption,\n  transformSessionResponseToSeries,\n} from './metricChartOption';\n\ntype Props = WithRouterProps & {\n  api: Client;\n  filter: string[] | null;\n  interval: string;\n  orgId: string;\n  organization: Organization;\n  project: Project;\n  query: string;\n  rule: MetricRule;\n  timePeriod: TimePeriodType;\n  incidents?: Incident[];\n  selectedIncident?: Incident | null;\n};\n\ntype State = {\n  height: number;\n  width: number;\n};\n\nfunction formatTooltipDate(date: moment.MomentInput, format: string): string {\n  const {\n    options: {timezone},\n  } = ConfigStore.get('user');\n  return momentTimezone.tz(date, timezone).format(format);\n}\n\nfunction getRuleChangeSeries(\n  rule: MetricRule,\n  data: AreaChartSeries[]\n): LineSeriesOption[] {\n  const {dateModified} = rule;\n  if (!data.length || !data[0].data.length || !dateModified) {\n    return [];\n  }\n\n  const seriesData = data[0].data;\n  const seriesStart = moment(seriesData[0].name).valueOf();\n  const ruleChanged = moment(dateModified).valueOf();\n\n  if (ruleChanged < seriesStart) {\n    return [];\n  }\n\n  return [\n    {\n      type: 'line',\n      markLine: MarkLine({\n        silent: true,\n        animation: false,\n        lineStyle: {color: theme.gray200, type: 'solid', width: 1},\n        data: [{xAxis: ruleChanged}],\n        label: {\n          show: false,\n        },\n      }),\n      markArea: MarkArea({\n        silent: true,\n        itemStyle: {\n          color: color(theme.gray100).alpha(0.42).rgb().string(),\n        },\n        data: [[{xAxis: seriesStart}, {xAxis: ruleChanged}]],\n      }),\n      data: [],\n    },\n  ];\n}\n\nclass MetricChart extends PureComponent<Props, State> {\n  state = {\n    width: -1,\n    height: -1,\n  };\n\n  ref: null | ReactEchartsRef = null;\n\n  /**\n   * Syncs component state with the chart's width/heights\n   */\n  updateDimensions = () => {\n    const chartRef = this.ref?.getEchartsInstance?.();\n    if (!chartRef) {\n      return;\n    }\n\n    const width = chartRef.getWidth();\n    const height = chartRef.getHeight();\n    if (width !== this.state.width || height !== this.state.height) {\n      this.setState({\n        width,\n        height,\n      });\n    }\n  };\n\n  handleRef = (ref: ReactEchartsRef): void => {\n    if (ref && !this.ref) {\n      this.ref = ref;\n      this.updateDimensions();\n    }\n\n    if (!ref) {\n      this.ref = null;\n    }\n  };\n\n  handleZoom = (start: DateString, end: DateString) => {\n    const {location} = this.props;\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        start,\n        end,\n      },\n    });\n  };\n\n  renderChartActions(\n    totalDuration: number,\n    criticalDuration: number,\n    warningDuration: number\n  ) {\n    const {rule, orgId, project, timePeriod, query} = this.props;\n    const transactionFields = ['title', 'count()', 'count_unique(user)'];\n    const errorFields = ['issue', 'title', 'count()', 'count_unique(user)'];\n\n    const ctaOpts = {\n      orgSlug: orgId,\n      projects: [project],\n      rule,\n      eventType: query,\n      start: timePeriod.start,\n      end: timePeriod.end,\n      fields: rule.dataset === 'transactions' ? transactionFields : errorFields,\n    };\n\n    const {buttonText, ...props} = makeDefaultCta(ctaOpts);\n\n    const resolvedPercent =\n      (100 * Math.max(totalDuration - criticalDuration - warningDuration, 0)) /\n      totalDuration;\n    const criticalPercent = 100 * Math.min(criticalDuration / totalDuration, 1);\n    const warningPercent = 100 * Math.min(warningDuration / totalDuration, 1);\n\n    return (\n      <StyledChartControls>\n        <StyledInlineContainer>\n          <SectionHeading>{t('Summary')}</SectionHeading>\n          <StyledSectionValue>\n            <ValueItem>\n              <IconCheckmark color=\"green300\" isCircled />\n              {resolvedPercent ? resolvedPercent.toFixed(2) : 0}%\n            </ValueItem>\n            <ValueItem>\n              <IconWarning color=\"yellow300\" />\n              {warningPercent ? warningPercent.toFixed(2) : 0}%\n            </ValueItem>\n            <ValueItem>\n              <IconFire color=\"red300\" />\n              {criticalPercent ? criticalPercent.toFixed(2) : 0}%\n            </ValueItem>\n          </StyledSectionValue>\n        </StyledInlineContainer>\n        {!isSessionAggregate(rule.aggregate) && (\n          <Feature features={['discover-basic']}>\n            <Button size=\"small\" {...props}>\n              {buttonText}\n            </Button>\n          </Feature>\n        )}\n      </StyledChartControls>\n    );\n  }\n\n  renderChart(\n    loading: boolean,\n    timeseriesData?: Series[],\n    minutesThresholdToDisplaySeconds?: number,\n    comparisonTimeseriesData?: Series[]\n  ) {\n    const {\n      router,\n      selectedIncident,\n      interval,\n      filter,\n      incidents,\n      rule,\n      organization,\n      timePeriod: {start, end},\n    } = this.props;\n    const {width} = this.state;\n    const {dateModified, timeWindow} = rule;\n\n    if (loading || !timeseriesData) {\n      return this.renderEmpty();\n    }\n\n    const handleIncidentClick = (incident: Incident) => {\n      router.push({\n        pathname: alertDetailsLink(organization, incident),\n        query: {alert: incident.identifier},\n      });\n    };\n\n    const {criticalDuration, warningDuration, totalDuration, chartOption} =\n      getMetricAlertChartOption({\n        timeseriesData,\n        rule,\n        incidents,\n        selectedIncident,\n        handleIncidentClick,\n      });\n\n    const comparisonSeriesName = capitalize(\n      COMPARISON_DELTA_OPTIONS.find(({value}) => value === rule.comparisonDelta)?.label ||\n        ''\n    );\n\n    const additionalSeries: LineSeriesOption[] = [\n      ...(comparisonTimeseriesData || []).map(({data: _data, ...otherSeriesProps}) =>\n        LineSeries({\n          name: comparisonSeriesName,\n          data: _data.map(({name, value}) => [name, value]),\n          lineStyle: {color: theme.gray200, type: 'dashed', width: 1},\n          itemStyle: {color: theme.gray200},\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n          ...otherSeriesProps,\n        })\n      ),\n      ...getRuleChangeSeries(rule, timeseriesData),\n    ];\n\n    const queryFilter =\n      filter?.join(' ') + t(' over ') + getDuration(rule.timeWindow * 60);\n\n    const percentOfWidth =\n      width >= 1151\n        ? 15\n        : width < 1151 && width >= 700\n        ? 14\n        : width < 700 && width >= 515\n        ? 13\n        : width < 515 && width >= 300\n        ? 12\n        : 8;\n    const truncateWidth = (percentOfWidth / 100) * width;\n\n    return (\n      <ChartPanel>\n        <StyledPanelBody withPadding>\n          <ChartHeader>\n            <HeaderTitleLegend>\n              {AlertWizardAlertNames[getAlertTypeFromAggregateDataset(rule)]}\n            </HeaderTitleLegend>\n          </ChartHeader>\n          <ChartFilters>\n            <StyledCircleIndicator size={8} />\n            <Filters>{rule.aggregate}</Filters>\n            <Truncate value={queryFilter ?? ''} maxLength={truncateWidth} />\n          </ChartFilters>\n          {getDynamicText({\n            value: (\n              <ChartZoom\n                router={router}\n                start={start}\n                end={end}\n                onZoom={zoomArgs => this.handleZoom(zoomArgs.start, zoomArgs.end)}\n                onFinished={() => {\n                  // We want to do this whenever the chart finishes re-rendering so that we can update the dimensions of\n                  // any graphics related to the triggers (e.g. the threshold areas + boundaries)\n                  this.updateDimensions();\n                }}\n              >\n                {zoomRenderProps => (\n                  <AreaChart\n                    {...zoomRenderProps}\n                    {...chartOption}\n                    showTimeInTooltip\n                    minutesThresholdToDisplaySeconds={minutesThresholdToDisplaySeconds}\n                    forwardedRef={this.handleRef}\n                    additionalSeries={additionalSeries}\n                    tooltip={{\n                      formatter: seriesParams => {\n                        // seriesParams can be object instead of array\n                        const pointSeries = Array.isArray(seriesParams)\n                          ? seriesParams\n                          : [seriesParams];\n                        const {marker, data: pointData, seriesName} = pointSeries[0];\n                        const [pointX, pointY] = pointData as [number, number];\n                        const pointYFormatted = alertTooltipValueFormatter(\n                          pointY,\n                          seriesName ?? '',\n                          rule.aggregate\n                        );\n\n                        const isModified =\n                          dateModified && pointX <= new Date(dateModified).getTime();\n\n                        const startTime = formatTooltipDate(moment(pointX), 'MMM D LT');\n                        const {period, periodLength} = parseStatsPeriod(interval) ?? {\n                          periodLength: 'm',\n                          period: `${timeWindow}`,\n                        };\n                        const endTime = formatTooltipDate(\n                          moment(pointX).add(\n                            parseInt(period, 10),\n                            periodLength as StatsPeriodType\n                          ),\n                          'MMM D LT'\n                        );\n\n                        const comparisonSeries =\n                          pointSeries.length > 1\n                            ? pointSeries.find(\n                                ({seriesName: _sn}) => _sn === comparisonSeriesName\n                              )\n                            : undefined;\n\n                        const comparisonPointY = comparisonSeries?.data[1] as\n                          | number\n                          | undefined;\n                        const comparisonPointYFormatted =\n                          comparisonPointY !== undefined\n                            ? alertTooltipValueFormatter(\n                                comparisonPointY,\n                                seriesName ?? '',\n                                rule.aggregate\n                              )\n                            : undefined;\n\n                        const changePercentage =\n                          comparisonPointY === undefined\n                            ? NaN\n                            : ((pointY - comparisonPointY) * 100) / comparisonPointY;\n\n                        const changeStatus = getChangeStatus(\n                          changePercentage,\n                          rule.thresholdType,\n                          rule.triggers\n                        );\n\n                        const changeStatusColor =\n                          changeStatus === AlertRuleTriggerType.CRITICAL\n                            ? theme.red300\n                            : changeStatus === AlertRuleTriggerType.WARNING\n                            ? theme.yellow300\n                            : theme.green300;\n\n                        return [\n                          `<div class=\"tooltip-series\">`,\n                          isModified &&\n                            `<div><span class=\"tooltip-label\"><strong>${t(\n                              'Alert Rule Modified'\n                            )}</strong></span></div>`,\n                          `<div><span class=\"tooltip-label\">${marker} <strong>${seriesName}</strong></span>${pointYFormatted}</div>`,\n                          comparisonSeries &&\n                            `<div><span class=\"tooltip-label\">${comparisonSeries.marker} <strong>${comparisonSeriesName}</strong></span>${comparisonPointYFormatted}</div>`,\n                          `</div>`,\n                          `<div class=\"tooltip-date\">`,\n                          `<span>${startTime} &mdash; ${endTime}</span>`,\n                          comparisonPointY !== undefined &&\n                            Math.abs(changePercentage) !== Infinity &&\n                            !isNaN(changePercentage) &&\n                            `<span style=\"color:${changeStatusColor};margin-left:10px;\">${\n                              Math.sign(changePercentage) === 1 ? '+' : '-'\n                            }${Math.abs(changePercentage).toFixed(2)}%</span>`,\n                          `</div>`,\n                          '<div class=\"tooltip-arrow\"></div>',\n                        ]\n                          .filter(e => e)\n                          .join('');\n                      },\n                    }}\n                  />\n                )}\n              </ChartZoom>\n            ),\n            fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n          })}\n        </StyledPanelBody>\n        {this.renderChartActions(totalDuration, criticalDuration, warningDuration)}\n      </ChartPanel>\n    );\n  }\n\n  renderEmpty() {\n    return (\n      <ChartPanel>\n        <PanelBody withPadding>\n          <Placeholder height=\"200px\" />\n        </PanelBody>\n      </ChartPanel>\n    );\n  }\n\n  render() {\n    const {api, rule, organization, timePeriod, project, interval, query} = this.props;\n    const {aggregate, timeWindow, environment, dataset} = rule;\n\n    // Fix for 7 days * 1m interval being over the max number of results from events api\n    // 10k events is the current max\n    if (\n      timePeriod.usingPeriod &&\n      timePeriod.period === TimePeriod.SEVEN_DAYS &&\n      interval === '1m'\n    ) {\n      timePeriod.start = getUtcDateString(\n        // -5 minutes provides a small cushion for rounding up minutes. This might be able to be smaller\n        moment(moment.utc(timePeriod.end).subtract(10000 - 5, 'minutes'))\n      );\n    }\n\n    // If the chart duration isn't as long as the rollup duration the events-stats\n    // endpoint will return an invalid timeseriesData dataset\n    const viableStartDate = getUtcDateString(\n      moment.min(\n        moment.utc(timePeriod.start),\n        moment.utc(timePeriod.end).subtract(timeWindow, 'minutes')\n      )\n    );\n\n    const viableEndDate = getUtcDateString(\n      moment.utc(timePeriod.end).add(timeWindow, 'minutes')\n    );\n\n    return isCrashFreeAlert(dataset) ? (\n      <SessionsRequest\n        api={api}\n        organization={organization}\n        project={project.id ? [Number(project.id)] : []}\n        environment={environment ? [environment] : undefined}\n        start={viableStartDate}\n        end={viableEndDate}\n        query={query}\n        interval={interval}\n        field={SESSION_AGGREGATE_TO_FIELD[aggregate]}\n        groupBy={['session.status']}\n      >\n        {({loading, response}) =>\n          this.renderChart(\n            loading,\n            transformSessionResponseToSeries(response, rule),\n            MINUTES_THRESHOLD_TO_DISPLAY_SECONDS\n          )\n        }\n      </SessionsRequest>\n    ) : (\n      <EventsRequest\n        api={api}\n        organization={organization}\n        query={query}\n        environment={environment ? [environment] : undefined}\n        project={project.id ? [Number(project.id)] : []}\n        interval={interval}\n        comparisonDelta={rule.comparisonDelta ? rule.comparisonDelta * 60 : undefined}\n        start={viableStartDate}\n        end={viableEndDate}\n        yAxis={aggregate}\n        includePrevious={false}\n        currentSeriesNames={[aggregate]}\n        partial={false}\n        referrer=\"api.alerts.alert-rule-chart\"\n      >\n        {({loading, timeseriesData, comparisonTimeseriesData}) =>\n          this.renderChart(loading, timeseriesData, undefined, comparisonTimeseriesData)\n        }\n      </EventsRequest>\n    );\n  }\n}\n\nexport default withRouter(MetricChart);\n\nconst ChartPanel = styled(Panel)`\n  margin-top: ${space(2)};\n`;\n\nconst ChartHeader = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst StyledChartControls = styled(ChartControls)`\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n`;\n\nconst StyledInlineContainer = styled(InlineContainer)`\n  grid-auto-flow: column;\n  grid-column-gap: ${space(1)};\n`;\n\nconst StyledCircleIndicator = styled(CircleIndicator)`\n  background: ${p => p.theme.formText};\n  height: ${space(1)};\n  margin-right: ${space(0.5)};\n`;\n\nconst ChartFilters = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  font-family: ${p => p.theme.text.family};\n  color: ${p => p.theme.textColor};\n  display: inline-grid;\n  grid-template-columns: repeat(3, max-content);\n  align-items: center;\n`;\n\nconst Filters = styled('span')`\n  margin-right: ${space(1)};\n`;\n\nconst StyledSectionValue = styled(SectionValue)`\n  display: grid;\n  grid-template-columns: repeat(3, auto);\n  gap: ${space(1.5)};\n  margin: 0 0 0 ${space(1.5)};\n`;\n\nconst ValueItem = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, auto);\n  gap: ${space(0.5)};\n  align-items: center;\n  font-variant-numeric: tabular-nums;\n`;\n\n/* Override padding to make chart appear centered */\nconst StyledPanelBody = styled(PanelBody)`\n  padding-right: 6px;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport GroupList from 'sentry/components/issues/groupList';\nimport LoadingError from 'sentry/components/loadingError';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {OrganizationSummary, Project} from 'sentry/types';\nimport {\n  RELATED_ISSUES_BOOLEAN_QUERY_ERROR,\n  RelatedIssuesNotAvailable,\n} from 'sentry/views/alerts/rules/metric/details/relatedIssuesNotAvailable';\nimport {makeDefaultCta} from 'sentry/views/alerts/rules/metric/metricRulePresets';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport {isSessionAggregate} from 'sentry/views/alerts/utils';\n\nimport {TimePeriodType} from './constants';\n\ninterface Props {\n  organization: OrganizationSummary;\n  projects: Project[];\n  rule: MetricRule;\n  timePeriod: TimePeriodType;\n  query?: string;\n}\n\nfunction RelatedIssues({rule, organization, projects, query, timePeriod}: Props) {\n  function renderErrorMessage({detail}: {detail: string}, retry: () => void) {\n    if (\n      detail === RELATED_ISSUES_BOOLEAN_QUERY_ERROR &&\n      !isSessionAggregate(rule.aggregate)\n    ) {\n      const ctaOpts = {\n        orgSlug: organization.slug,\n        projects,\n        rule,\n        eventType: query,\n        start: timePeriod.start,\n        end: timePeriod.end,\n      };\n\n      const {buttonText, to} = makeDefaultCta(ctaOpts);\n      return <RelatedIssuesNotAvailable buttonTo={to} buttonText={buttonText} />;\n    }\n\n    return <LoadingError onRetry={retry} />;\n  }\n\n  function renderEmptyMessage() {\n    return (\n      <Panel>\n        <PanelBody>\n          <EmptyStateWarning small withIcon={false}>\n            {t('No issues for this alert rule')}\n          </EmptyStateWarning>\n        </PanelBody>\n      </Panel>\n    );\n  }\n\n  const {start, end} = timePeriod;\n\n  const path = `/organizations/${organization.slug}/issues/`;\n  const queryParams = {\n    start,\n    end,\n    groupStatsPeriod: 'auto',\n    limit: 5,\n    ...(rule.environment ? {environment: rule.environment} : {}),\n    sort: rule.aggregate === 'count_unique(user)' ? 'user' : 'freq',\n    query,\n    project: projects.map(project => project.id),\n  };\n  const issueSearch = {\n    pathname: `/organizations/${organization.slug}/issues/`,\n    query: queryParams,\n  };\n\n  return (\n    <Fragment>\n      <ControlsWrapper>\n        <StyledSectionHeading>{t('Related Issues')}</StyledSectionHeading>\n        <Button data-test-id=\"issues-open\" size=\"xsmall\" to={issueSearch}>\n          {t('Open in Issues')}\n        </Button>\n      </ControlsWrapper>\n\n      <TableWrapper>\n        <GroupList\n          orgId={organization.slug}\n          endpointPath={path}\n          queryParams={queryParams}\n          query={`start=${start}&end=${end}&groupStatsPeriod=auto`}\n          canSelectGroups={false}\n          renderEmptyMessage={renderEmptyMessage}\n          renderErrorMessage={renderErrorMessage}\n          withChart\n          withPagination={false}\n          useFilteredStats\n          customStatsPeriod={timePeriod}\n          useTintRow={false}\n        />\n      </TableWrapper>\n    </Fragment>\n  );\n}\n\nconst StyledSectionHeading = styled(SectionHeading)`\n  display: flex;\n  align-items: center;\n`;\n\nconst ControlsWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n`;\n\nconst TableWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n  ${Panel} {\n    /* smaller space between table and pagination */\n    margin-bottom: -${space(1)};\n  }\n`;\n\nexport default RelatedIssues;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n} from 'sentry/components/gridEditable';\nimport {Alignments} from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {NewQuery, Organization, Project} from 'sentry/types';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {EventData} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {fieldAlignment, getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {MetricRule, TimePeriod} from 'sentry/views/alerts/rules/metric/types';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\nimport {DEFAULT_PROJECT_THRESHOLD} from 'sentry/views/performance/data';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport type {TimePeriodType} from './constants';\n\nfunction getProjectID(eventData: EventData, projects: Project[]): string | undefined {\n  const projectSlug = (eventData?.project as string) || undefined;\n\n  if (typeof projectSlug === undefined) {\n    return undefined;\n  }\n\n  const project = projects.find(currentProject => currentProject.slug === projectSlug);\n\n  if (!project) {\n    return undefined;\n  }\n\n  return project.id;\n}\n\ntype TableProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  summaryConditions: string;\n};\n\ntype TableState = {\n  widths: number[];\n};\nclass Table extends Component<TableProps, TableState> {\n  state: TableState = {\n    widths: [],\n  };\n\n  renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow\n  ): React.ReactNode {\n    const {eventView, organization, projects, location, summaryConditions} = this.props;\n\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n    const tableMeta = tableData.meta;\n\n    const field = String(column.key);\n    const fieldRenderer = getFieldRenderer(field, tableMeta, false);\n    const rendered = fieldRenderer(dataRow, {organization, location});\n\n    if (field === 'transaction') {\n      const projectID = getProjectID(dataRow, projects);\n      const summaryView = eventView.clone();\n      summaryView.query = summaryConditions;\n\n      const target = transactionSummaryRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: String(dataRow.transaction) || '',\n        query: summaryView.generateQueryStringObject(),\n        projectID,\n      });\n\n      return <Link to={target}>{rendered}</Link>;\n    }\n\n    return rendered;\n  }\n\n  renderBodyCellWithData = (tableData: TableData | null) => {\n    return (\n      column: TableColumn<keyof TableDataRow>,\n      dataRow: TableDataRow\n    ): React.ReactNode => this.renderBodyCell(tableData, column, dataRow);\n  };\n\n  renderHeadCell(\n    tableMeta: TableData['meta'],\n    column: TableColumn<keyof TableDataRow>,\n    title: React.ReactNode\n  ): React.ReactNode {\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const field = {field: column.name, width: column.width};\n\n    return <HeaderCell align={align}>{title || field.field}</HeaderCell>;\n  }\n\n  renderHeadCellWithMeta = (tableMeta: TableData['meta'], columnName: string) => {\n    const columnTitles = ['transactions', 'project', columnName, 'users', 'user misery'];\n\n    return (column: TableColumn<keyof TableDataRow>, index: number): React.ReactNode =>\n      this.renderHeadCell(tableMeta, column, columnTitles[index]);\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getSortedEventView() {\n    const {eventView} = this.props;\n    return eventView.withSorts([...eventView.sorts]);\n  }\n\n  render() {\n    const {eventView, organization, location} = this.props;\n\n    const {widths} = this.state;\n    const columnOrder = eventView\n      .getColumns()\n      .map((col: TableColumn<React.ReactText>, i: number) => {\n        if (typeof widths[i] === 'number') {\n          return {...col, width: widths[i]};\n        }\n        return col;\n      });\n\n    const sortedEventView = this.getSortedEventView();\n    const columnSortBy = sortedEventView.getSorts();\n\n    return (\n      <Fragment>\n        <DiscoverQuery\n          eventView={sortedEventView}\n          orgSlug={organization.slug}\n          location={location}\n          useEvents\n        >\n          {({isLoading, tableData}) => (\n            <GridEditable\n              isLoading={isLoading}\n              data={tableData ? tableData.data.slice(0, 5) : []}\n              columnOrder={columnOrder}\n              columnSortBy={columnSortBy}\n              grid={{\n                onResizeColumn: this.handleResizeColumn,\n                renderHeadCell: this.renderHeadCellWithMeta(\n                  tableData?.meta,\n                  columnOrder[2].name as string\n                ) as any,\n                renderBodyCell: this.renderBodyCellWithData(tableData) as any,\n              }}\n              location={location}\n            />\n          )}\n        </DiscoverQuery>\n      </Fragment>\n    );\n  }\n}\n\ninterface Props {\n  filter: string;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  rule: MetricRule;\n  timePeriod: TimePeriodType;\n}\n\nfunction RelatedTransactions({\n  rule,\n  projects,\n  filter,\n  location,\n  organization,\n  timePeriod,\n}: Props) {\n  const aggregateAlias = getAggregateAlias(rule.aggregate);\n\n  const timePeriodFields = timePeriod.usingPeriod\n    ? {range: timePeriod.period}\n    : {start: timePeriod.start, end: timePeriod.end};\n\n  if (timePeriodFields.range && timePeriodFields.range === TimePeriod.SEVEN_DAYS) {\n    timePeriodFields.range = '7d';\n  }\n\n  const eventQuery: NewQuery = {\n    id: undefined,\n    name: 'Transactions',\n    fields: [\n      'transaction',\n      'project',\n      `${rule.aggregate}`,\n      'count_unique(user)',\n      `user_misery(${DEFAULT_PROJECT_THRESHOLD})`,\n    ],\n    orderby: `-${aggregateAlias}`,\n\n    query: `${rule.query}`,\n    version: 2,\n    projects: projects.map(project => Number(project.id)),\n    environment: rule.environment ? [rule.environment] : undefined,\n    ...timePeriodFields,\n  };\n\n  const eventView = EventView.fromSavedQuery(eventQuery);\n\n  return (\n    <Table\n      eventView={eventView}\n      projects={projects}\n      organization={organization}\n      location={location}\n      summaryConditions={`${rule.query} ${filter}`}\n    />\n  );\n}\n\nexport default RelatedTransactions;\n\nconst HeaderCell = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n","import {Fragment, PureComponent, ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport AlertBadge from 'sentry/components/alertBadge';\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport DateTime from 'sentry/components/dateTime';\nimport Duration from 'sentry/components/duration';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconDiamond} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Actor} from 'sentry/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {COMPARISON_DELTA_OPTIONS} from 'sentry/views/alerts/rules/metric/constants';\nimport {\n  Action,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  MetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {AlertWizardAlertNames} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\nimport {IncidentStatus} from '../../../types';\n\ninterface Props {\n  rule: MetricRule;\n}\n\nexport default class Sidebar extends PureComponent<Props> {\n  getTimeWindow(): ReactNode {\n    const {rule} = this.props;\n\n    if (!rule) {\n      return '';\n    }\n\n    const {timeWindow} = rule;\n\n    return tct('[window]', {\n      window: <Duration seconds={timeWindow * 60} />,\n    });\n  }\n\n  renderTrigger(label: string, threshold: number, actions: Action[]): ReactNode {\n    const {rule} = this.props;\n\n    const status =\n      label === AlertRuleTriggerType.CRITICAL\n        ? t('Critical')\n        : label === AlertRuleTriggerType.WARNING\n        ? t('Warning')\n        : t('Resolved');\n\n    const statusIconColor =\n      label === AlertRuleTriggerType.CRITICAL\n        ? 'red300'\n        : label === AlertRuleTriggerType.WARNING\n        ? 'yellow300'\n        : 'green300';\n\n    const defaultAction = t('Change alert status to %s', status);\n\n    const aboveThreshold =\n      label === AlertRuleTriggerType.RESOLVE\n        ? rule.thresholdType === AlertRuleThresholdType.BELOW\n        : rule.thresholdType === AlertRuleThresholdType.ABOVE;\n\n    const thresholdTypeText = aboveThreshold\n      ? rule.comparisonDelta\n        ? t('higher')\n        : t('above')\n      : rule.comparisonDelta\n      ? t('lower')\n      : t('below');\n\n    const thresholdText = rule.comparisonDelta\n      ? tct(\n          '[metric] is [threshold]% [comparisonType] in [timeWindow] compared to [comparisonDelta]',\n          {\n            metric: AlertWizardAlertNames[getAlertTypeFromAggregateDataset(rule)],\n            threshold,\n            comparisonType: thresholdTypeText,\n            timeWindow: this.getTimeWindow(),\n            comparisonDelta: (\n              COMPARISON_DELTA_OPTIONS.find(\n                ({value}) => value === rule.comparisonDelta\n              ) ?? COMPARISON_DELTA_OPTIONS[0]\n            ).label,\n          }\n        )\n      : tct('[metric] is [condition] in [timeWindow]', {\n          metric: AlertWizardAlertNames[getAlertTypeFromAggregateDataset(rule)],\n          condition: `${thresholdTypeText} ${threshold}`,\n          timeWindow: this.getTimeWindow(),\n        });\n\n    return (\n      <TriggerContainer>\n        <TriggerTitle>\n          <IconDiamond color={statusIconColor} size=\"xs\" />\n          <TriggerTitleText>{t('%s Conditions', status)}</TriggerTitleText>\n        </TriggerTitle>\n        <TriggerStep>\n          <TriggerTitleText>When</TriggerTitleText>\n          <TriggerActions>\n            <TriggerText>{thresholdText}</TriggerText>\n          </TriggerActions>\n        </TriggerStep>\n        <TriggerStep>\n          <TriggerTitleText>Then</TriggerTitleText>\n          <TriggerActions>\n            {actions.map(action => (\n              <TriggerText key={action.id}>{action.desc}</TriggerText>\n            ))}\n            <TriggerText>{defaultAction}</TriggerText>\n          </TriggerActions>\n        </TriggerStep>\n      </TriggerContainer>\n    );\n  }\n\n  render() {\n    const {rule} = this.props;\n\n    // get current status\n    const latestIncident = rule.latestIncident;\n    const status = latestIncident ? latestIncident.status : IncidentStatus.CLOSED;\n    // The date at which the alert was triggered or resolved\n    const activityDate =\n      latestIncident?.dateClosed ?? latestIncident?.dateStarted ?? null;\n\n    const criticalTrigger = rule?.triggers.find(\n      ({label}) => label === AlertRuleTriggerType.CRITICAL\n    );\n    const warningTrigger = rule?.triggers.find(\n      ({label}) => label === AlertRuleTriggerType.WARNING\n    );\n\n    const ownerId = rule.owner?.split(':')[1];\n    const teamActor = ownerId && {type: 'team' as Actor['type'], id: ownerId, name: ''};\n\n    return (\n      <Fragment>\n        <StatusContainer>\n          <HeaderItem>\n            <Heading noMargin>{t('Alert Status')}</Heading>\n            <Status>\n              <AlertBadge status={status} />\n            </Status>\n          </HeaderItem>\n          <HeaderItem>\n            <Heading noMargin>{t('Last Triggered')}</Heading>\n            <Status>\n              {activityDate ? (\n                <TimeSince date={activityDate} />\n              ) : (\n                t('No alerts triggered')\n              )}\n            </Status>\n          </HeaderItem>\n        </StatusContainer>\n        <SidebarGroup>\n          {typeof criticalTrigger?.alertThreshold === 'number' &&\n            this.renderTrigger(\n              criticalTrigger.label,\n              criticalTrigger.alertThreshold,\n              criticalTrigger.actions\n            )}\n          {typeof warningTrigger?.alertThreshold === 'number' &&\n            this.renderTrigger(\n              warningTrigger.label,\n              warningTrigger.alertThreshold,\n              warningTrigger.actions\n            )}\n          {typeof rule.resolveThreshold === 'number' &&\n            this.renderTrigger(AlertRuleTriggerType.RESOLVE, rule.resolveThreshold, [])}\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <Heading>{t('Alert Rule Details')}</Heading>\n          <KeyValueTable>\n            <KeyValueTableRow\n              keyName={t('Environment')}\n              value={<OverflowTableValue>{rule.environment ?? '-'}</OverflowTableValue>}\n            />\n\n            <KeyValueTableRow\n              keyName={t('Date created')}\n              value={\n                <DateTime\n                  date={getDynamicText({\n                    value: rule.dateCreated,\n                    fixed: new Date('2021-04-20'),\n                  })}\n                  format=\"ll\"\n                />\n              }\n            />\n\n            {rule.createdBy && (\n              <KeyValueTableRow\n                keyName={t('Created By')}\n                value={\n                  <OverflowTableValue>{rule.createdBy.name ?? '-'}</OverflowTableValue>\n                }\n              />\n            )}\n\n            {rule.dateModified && (\n              <KeyValueTableRow\n                keyName={t('Last Modified')}\n                value={<TimeSince date={rule.dateModified} suffix={t('ago')} />}\n              />\n            )}\n\n            <KeyValueTableRow\n              keyName={t('Team')}\n              value={\n                teamActor ? <ActorAvatar actor={teamActor} size={24} /> : t('Unassigned')\n              }\n            />\n          </KeyValueTable>\n        </SidebarGroup>\n      </Fragment>\n    );\n  }\n}\n\nconst SidebarGroup = styled('div')`\n  margin-bottom: ${space(3)};\n`;\n\nconst HeaderItem = styled('div')`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n\n  > *:nth-child(2) {\n    flex: 1;\n    display: flex;\n    align-items: center;\n  }\n`;\n\nconst Status = styled('div')`\n  position: relative;\n  display: grid;\n  grid-template-columns: auto auto auto;\n  gap: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeLarge};\n`;\n\nconst StatusContainer = styled('div')`\n  height: 60px;\n  display: flex;\n  margin-bottom: ${space(1)};\n`;\n\nconst Heading = styled(SectionHeading)<{noMargin?: boolean}>`\n  margin-top: ${p => (p.noMargin ? 0 : space(2))};\n  margin-bottom: ${p => (p.noMargin ? 0 : space(1))};\n`;\n\nconst OverflowTableValue = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst TriggerContainer = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto auto;\n  gap: ${space(1)};\n  margin-top: ${space(4)};\n`;\n\nconst TriggerTitle = styled('div')`\n  display: grid;\n  grid-template-columns: 20px 1fr;\n  align-items: center;\n`;\n\nconst TriggerTitleText = styled('h4')`\n  color: ${p => p.theme.subText};\n  font-size: ${p => p.theme.fontSizeMedium};\n  margin: 0;\n  line-height: 24px;\n  min-width: 40px;\n`;\n\nconst TriggerStep = styled('div')`\n  display: grid;\n  grid-template-columns: 40px 1fr;\n  align-items: flex-start;\n`;\n\nconst TriggerActions = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(1fr);\n  gap: ${space(0.25)};\n`;\n\nconst TriggerText = styled('span')`\n  display: block;\n  background-color: ${p => p.theme.surface100};\n  padding: 0 ${space(0.75)};\n  border-radius: ${p => p.theme.borderRadius};\n  color: ${p => p.theme.textColor};\n  font-size: ${p => p.theme.fontSizeSmall};\n  width: 100%;\n  font-weight: 400;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport Duration from 'sentry/components/duration';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {ChangeData} from 'sentry/components/organizations/timeRangeSelector';\nimport PageTimeRangeSelector from 'sentry/components/pageTimeRangeSelector';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport MetricHistory from 'sentry/views/alerts/rules/metric/details/metricHistory';\nimport {Dataset, MetricRule, TimePeriod} from 'sentry/views/alerts/rules/metric/types';\nimport {extractEventTypeFilterFromRule} from 'sentry/views/alerts/rules/metric/utils/getEventTypeFilter';\n\nimport {AlertRuleStatus, Incident} from '../../../types';\nimport {isCrashFreeAlert} from '../utils/isCrashFreeAlert';\n\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  SELECTOR_RELATIVE_PERIODS,\n  TIME_WINDOWS,\n  TimePeriodType,\n} from './constants';\nimport MetricChart from './metricChart';\nimport RelatedIssues from './relatedIssues';\nimport RelatedTransactions from './relatedTransactions';\nimport Sidebar from './sidebar';\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  timePeriod: TimePeriodType;\n  incidents?: Incident[];\n  project?: Project;\n  rule?: MetricRule;\n  selectedIncident?: Incident | null;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nexport default class DetailsBody extends Component<Props> {\n  getTimeWindow(): React.ReactNode {\n    const {rule} = this.props;\n\n    if (!rule) {\n      return '';\n    }\n\n    const {timeWindow} = rule;\n\n    return tct('[window]', {\n      window: <Duration seconds={timeWindow * 60} />,\n    });\n  }\n\n  getInterval() {\n    const {\n      timePeriod: {start, end},\n      rule,\n    } = this.props;\n    const startDate = moment.utc(start);\n    const endDate = moment.utc(end);\n    const timeWindow = rule?.timeWindow;\n    const startEndDifferenceMs = endDate.diff(startDate);\n\n    if (\n      timeWindow &&\n      (startEndDifferenceMs < API_INTERVAL_POINTS_LIMIT * timeWindow * 60 * 1000 ||\n        // Special case 7 days * 1m interval over the api limit\n        startEndDifferenceMs === TIME_WINDOWS[TimePeriod.SEVEN_DAYS])\n    ) {\n      return `${timeWindow}m`;\n    }\n\n    return getInterval({start, end}, 'high');\n  }\n\n  getFilter() {\n    const {rule} = this.props;\n    const {dataset, query} = rule ?? {};\n    if (!rule) {\n      return null;\n    }\n\n    const eventType = isCrashFreeAlert(dataset)\n      ? null\n      : extractEventTypeFilterFromRule(rule);\n    return [eventType, query].join(' ').split(' ');\n  }\n\n  handleTimePeriodChange = (datetime: ChangeData) => {\n    const {start, end, relative} = datetime;\n\n    if (start && end) {\n      return this.props.router.push({\n        ...this.props.location,\n        query: {\n          start: moment(start).utc().format(),\n          end: moment(end).utc().format(),\n        },\n      });\n    }\n\n    return this.props.router.push({\n      ...this.props.location,\n      query: {\n        period: relative,\n      },\n    });\n  };\n\n  renderLoading() {\n    return (\n      <Layout.Body>\n        <Layout.Main>\n          <Placeholder height=\"38px\" />\n          <ChartPanel>\n            <PanelBody withPadding>\n              <Placeholder height=\"200px\" />\n            </PanelBody>\n          </ChartPanel>\n        </Layout.Main>\n        <Layout.Side>\n          <Placeholder height=\"200px\" />\n        </Layout.Side>\n      </Layout.Body>\n    );\n  }\n\n  render() {\n    const {\n      api,\n      project,\n      rule,\n      incidents,\n      location,\n      organization,\n      timePeriod,\n      selectedIncident,\n      params: {orgId},\n    } = this.props;\n\n    if (!rule || !project) {\n      return this.renderLoading();\n    }\n\n    const {query, dataset} = rule;\n\n    const queryWithTypeFilter = `${query} ${extractEventTypeFilterFromRule(rule)}`.trim();\n    const relativeOptions = {\n      ...SELECTOR_RELATIVE_PERIODS,\n      ...(rule.timeWindow > 1 ? {[TimePeriod.FOURTEEN_DAYS]: t('Last 14 days')} : {}),\n    };\n\n    return (\n      <Fragment>\n        {selectedIncident &&\n          selectedIncident.alertRule.status === AlertRuleStatus.SNAPSHOT && (\n            <StyledLayoutBody>\n              <StyledAlert type=\"warning\" showIcon>\n                {t(\n                  'Alert Rule settings have been updated since this alert was triggered.'\n                )}\n              </StyledAlert>\n            </StyledLayoutBody>\n          )}\n        <Layout.Body>\n          <Layout.Main>\n            <StyledPageTimeRangeSelector\n              organization={organization}\n              relative={timePeriod.period ?? ''}\n              start={(timePeriod.custom && timePeriod.start) || null}\n              end={(timePeriod.custom && timePeriod.end) || null}\n              utc={null}\n              onUpdate={this.handleTimePeriodChange}\n              relativeOptions={relativeOptions}\n              showAbsolute={false}\n            />\n\n            <MetricChart\n              api={api}\n              rule={rule}\n              incidents={incidents}\n              timePeriod={timePeriod}\n              selectedIncident={selectedIncident}\n              organization={organization}\n              project={project}\n              interval={this.getInterval()}\n              query={isCrashFreeAlert(dataset) ? query : queryWithTypeFilter}\n              filter={this.getFilter()}\n              orgId={orgId}\n            />\n            <DetailWrapper>\n              <ActivityWrapper>\n                <MetricHistory organization={organization} incidents={incidents} />\n                {[Dataset.METRICS, Dataset.SESSIONS, Dataset.ERRORS].includes(\n                  dataset\n                ) && (\n                  <RelatedIssues\n                    organization={organization}\n                    rule={rule}\n                    projects={[project]}\n                    timePeriod={timePeriod}\n                    query={\n                      dataset === Dataset.ERRORS\n                        ? queryWithTypeFilter\n                        : isCrashFreeAlert(dataset)\n                        ? `${query} error.unhandled:true`\n                        : undefined\n                    }\n                  />\n                )}\n                {dataset === Dataset.TRANSACTIONS && (\n                  <RelatedTransactions\n                    organization={organization}\n                    location={location}\n                    rule={rule}\n                    projects={[project]}\n                    timePeriod={timePeriod}\n                    filter={extractEventTypeFilterFromRule(rule)}\n                  />\n                )}\n              </ActivityWrapper>\n            </DetailWrapper>\n          </Layout.Main>\n          <Layout.Side>\n            <Sidebar rule={rule} />\n          </Layout.Side>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nconst DetailWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    flex-direction: column-reverse;\n  }\n`;\n\nconst StyledLayoutBody = styled(Layout.Body)`\n  flex-grow: 0;\n  padding-bottom: 0 !important;\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    grid-template-columns: auto;\n  }\n`;\n\nconst StyledAlert = styled(Alert)`\n  margin: 0;\n`;\n\nconst ActivityWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  width: 100%;\n`;\n\nconst ChartPanel = styled(Panel)`\n  margin-top: ${space(2)};\n`;\n\nconst StyledPageTimeRangeSelector = styled(PageTimeRangeSelector)`\n  margin-bottom: ${space(2)};\n`;\n","import {RouteComponentProps} from 'react-router';\nimport isPropValid from '@emotion/is-prop-valid';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport Button from 'sentry/components/button';\nimport IdBadge from 'sentry/components/idBadge';\nimport PageHeading from 'sentry/components/pageHeading';\nimport {IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\nimport {isIssueAlert} from '../../../utils';\n\ntype Props = Pick<RouteComponentProps<{orgId: string}, {}>, 'params'> & {\n  hasMetricRuleDetailsError: boolean;\n  project?: Project;\n  rule?: MetricRule;\n};\n\nfunction DetailsHeader({hasMetricRuleDetailsError, rule, params, project}: Props) {\n  const isRuleReady = !!rule && !hasMetricRuleDetailsError;\n  const ruleTitle = rule && !hasMetricRuleDetailsError ? rule.name : '';\n  const settingsLink =\n    rule &&\n    `/organizations/${params.orgId}/alerts/${\n      isIssueAlert(rule) ? 'rules' : 'metric-rules'\n    }/${project?.slug ?? rule?.projects?.[0]}/${rule.id}/`;\n\n  return (\n    <Header>\n      <BreadCrumbBar>\n        <AlertBreadcrumbs\n          crumbs={[\n            {label: t('Alerts'), to: `/organizations/${params.orgId}/alerts/rules/`},\n            {label: ruleTitle},\n          ]}\n        />\n        <Controls>\n          <Button icon={<IconEdit />} to={settingsLink}>\n            {t('Edit Rule')}\n          </Button>\n        </Controls>\n      </BreadCrumbBar>\n      <Details>\n        <RuleTitle data-test-id=\"incident-rule-title\" loading={!isRuleReady}>\n          {project && (\n            <IdBadge\n              project={project}\n              avatarSize={28}\n              hideName\n              avatarProps={{hasTooltip: true, tooltip: project.slug}}\n            />\n          )}\n          {ruleTitle}\n        </RuleTitle>\n      </Details>\n    </Header>\n  );\n}\n\nexport default DetailsHeader;\n\nconst Header = styled('div')`\n  background-color: ${p => p.theme.backgroundSecondary};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst BreadCrumbBar = styled('div')`\n  display: flex;\n  margin-bottom: 0;\n  padding: ${space(2)} ${space(4)} ${space(1)};\n`;\n\nconst AlertBreadcrumbs = styled(Breadcrumbs)`\n  flex-grow: 1;\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  padding: 0;\n`;\n\nconst Controls = styled('div')`\n  display: grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n`;\n\nconst Details = styled(PageHeader)`\n  margin-bottom: 0;\n  padding: ${space(1.5)} ${space(4)} ${space(2)};\n\n  grid-template-columns: max-content auto;\n  display: grid;\n  gap: ${space(3)};\n  grid-auto-flow: column;\n\n  @media (max-width: ${p => p.theme.breakpoints.medium}) {\n    grid-template-columns: auto;\n    grid-auto-flow: row;\n  }\n`;\n\nconst RuleTitle = styled(PageHeading, {\n  shouldForwardProp: p => typeof p === 'string' && isPropValid(p) && p !== 'loading',\n})<{loading: boolean}>`\n  ${p => p.loading && 'opacity: 0'};\n  line-height: 1.5;\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport DateTime from 'sentry/components/dateTime';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\nimport {buildMetricGraphDateRange} from 'sentry/views/alerts/rules/details/utils';\nimport {MetricRule, TimePeriod} from 'sentry/views/alerts/rules/metric/types';\nimport type {Incident} from 'sentry/views/alerts/types';\nimport {\n  fetchAlertRule,\n  fetchIncident,\n  fetchIncidentsForRule,\n} from 'sentry/views/alerts/utils/apiCalls';\n\nimport DetailsBody from './body';\nimport {TIME_OPTIONS, TIME_WINDOWS, TimePeriodType} from './constants';\nimport DetailsHeader from './header';\n\ninterface Props extends RouteComponentProps<{orgId: string; ruleId: string}, {}> {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  loadingProjects?: boolean;\n}\n\ninterface State {\n  error: ResponseMeta | null;\n  hasError: boolean;\n  isLoading: boolean;\n  selectedIncident: Incident | null;\n  incidents?: Incident[];\n  rule?: MetricRule;\n}\n\nclass MetricAlertDetails extends Component<Props, State> {\n  state: State = {isLoading: false, hasError: false, error: null, selectedIncident: null};\n\n  componentDidMount() {\n    const {api, params} = this.props;\n\n    fetchOrgMembers(api, params.orgId);\n    this.fetchData();\n    this.trackView();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.location.search !== this.props.location.search ||\n      prevProps.params.orgId !== this.props.params.orgId ||\n      prevProps.params.ruleId !== this.props.params.ruleId\n    ) {\n      this.fetchData();\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {params, organization, location} = this.props;\n\n    trackAdvancedAnalyticsEvent('alert_rule_details.viewed', {\n      organization,\n      rule_id: parseInt(params.ruleId, 10),\n      alert: (location.query.alert as string) ?? '',\n      has_chartcuterie: organization.features\n        .includes('metric-alert-chartcuterie')\n        .toString(),\n    });\n  }\n\n  getTimePeriod(selectedIncident: Incident | null): TimePeriodType {\n    const {location} = this.props;\n    const period = (location.query.period as string) ?? TimePeriod.SEVEN_DAYS;\n\n    if (location.query.start && location.query.end) {\n      return {\n        start: location.query.start as string,\n        end: location.query.end as string,\n        period,\n        usingPeriod: false,\n        label: t('Custom time'),\n        display: (\n          <Fragment>\n            <DateTime date={moment.utc(location.query.start)} timeAndDate />\n            {' — '}\n            <DateTime date={moment.utc(location.query.end)} timeAndDate />\n          </Fragment>\n        ),\n        custom: true,\n      };\n    }\n\n    if (location.query.alert && selectedIncident) {\n      const {start, end} = buildMetricGraphDateRange(selectedIncident);\n      return {\n        start,\n        end,\n        period,\n        usingPeriod: false,\n        label: t('Custom time'),\n        display: (\n          <Fragment>\n            <DateTime date={moment.utc(start)} timeAndDate />\n            {' — '}\n            <DateTime date={moment.utc(end)} timeAndDate />\n          </Fragment>\n        ),\n        custom: true,\n      };\n    }\n\n    const timeOption =\n      TIME_OPTIONS.find(item => item.value === period) ?? TIME_OPTIONS[1];\n    const start = getUtcDateString(\n      moment(moment.utc().diff(TIME_WINDOWS[timeOption.value]))\n    );\n    const end = getUtcDateString(moment.utc());\n\n    return {\n      start,\n      end,\n      period,\n      usingPeriod: true,\n      label: timeOption.label as string,\n      display: timeOption.label as string,\n    };\n  }\n\n  fetchData = async () => {\n    const {\n      api,\n      params: {orgId, ruleId},\n      location,\n    } = this.props;\n\n    this.setState({isLoading: true, hasError: false});\n\n    // Skip loading existing rule\n    const rulePromise =\n      ruleId === this.state.rule?.id\n        ? Promise.resolve(this.state.rule)\n        : fetchAlertRule(orgId, ruleId, {expand: 'latestIncident'});\n\n    // Fetch selected incident, if it exists. We need this to set the selected date range\n    let selectedIncident: Incident | null = null;\n    if (location.query.alert) {\n      try {\n        selectedIncident = await fetchIncident(\n          api,\n          orgId,\n          location.query.alert as string\n        );\n      } catch {\n        // TODO: selectedIncident specific error\n      }\n    }\n\n    const timePeriod = this.getTimePeriod(selectedIncident);\n    const {start, end} = timePeriod;\n    try {\n      const [incidents, rule] = await Promise.all([\n        fetchIncidentsForRule(orgId, ruleId, start, end),\n        rulePromise,\n      ]);\n      this.setState({\n        incidents,\n        rule,\n        selectedIncident,\n        isLoading: false,\n        hasError: false,\n      });\n    } catch (error) {\n      this.setState({selectedIncident, isLoading: false, hasError: true, error});\n    }\n  };\n\n  renderError() {\n    const {error} = this.state;\n\n    return (\n      <PageContent>\n        <Alert type=\"error\" showIcon>\n          {error?.status === 404\n            ? t('This alert rule could not be found.')\n            : t('An error occurred while fetching the alert rule.')}\n        </Alert>\n      </PageContent>\n    );\n  }\n\n  render() {\n    const {rule, incidents, hasError, selectedIncident} = this.state;\n    const {params, projects, loadingProjects} = this.props;\n    const timePeriod = this.getTimePeriod(selectedIncident);\n\n    if (hasError) {\n      return this.renderError();\n    }\n\n    const project = projects.find(({slug}) => slug === rule?.projects[0]) as\n      | Project\n      | undefined;\n    const isGlobalSelectionReady = project !== undefined && !loadingProjects;\n\n    return (\n      <PageFiltersContainer\n        skipLoadLastUsed\n        skipInitializeUrlParams\n        isGlobalSelectionReady={isGlobalSelectionReady}\n        shouldForceProject={isGlobalSelectionReady}\n        forceProject={project}\n        forceEnvironment={rule?.environment ?? ''}\n        lockedMessageSubject={t('alert rule')}\n        showDateSelector={false}\n        hideGlobalHeader\n      >\n        <SentryDocumentTitle title={rule?.name ?? ''} />\n\n        <DetailsHeader\n          hasMetricRuleDetailsError={hasError}\n          params={params}\n          rule={rule}\n          project={project}\n        />\n        <DetailsBody\n          {...this.props}\n          rule={rule}\n          project={project}\n          incidents={incidents}\n          timePeriod={timePeriod}\n          selectedIncident={selectedIncident}\n        />\n      </PageFiltersContainer>\n    );\n  }\n}\n\nexport default withApi(withProjects(MetricAlertDetails));\n","import moment from 'moment';\n\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {\n  API_INTERVAL_POINTS_LIMIT,\n  API_INTERVAL_POINTS_MIN,\n} from 'sentry/views/alerts/rules/metric/details/constants';\nimport type {Incident} from 'sentry/views/alerts/types';\n\n/**\n * Retrieve start/end date of a metric alert incident for the events graph\n * Will show at least 150 and no more than 10,000 data points\n */\nexport function buildMetricGraphDateRange(incident: Incident): {\n  end: string;\n  start: string;\n} {\n  const timeWindowMillis = incident.alertRule.timeWindow * 60 * 1000;\n  const minRange = timeWindowMillis * API_INTERVAL_POINTS_MIN;\n  const maxRange = timeWindowMillis * API_INTERVAL_POINTS_LIMIT;\n  const now = moment.utc();\n  const startDate = moment.utc(incident.dateStarted);\n  // make a copy of now since we will modify endDate and use now for comparing\n  const endDate = incident.dateClosed ? moment.utc(incident.dateClosed) : moment(now);\n  const incidentRange = Math.max(endDate.diff(startDate), 3 * timeWindowMillis);\n  const range = Math.min(maxRange, Math.max(minRange, incidentRange));\n  const halfRange = moment.duration(range / 2);\n\n  return {\n    start: getUtcDateString(startDate.subtract(halfRange)),\n    end: getUtcDateString(moment.min(endDate.add(halfRange), now)),\n  };\n}\n","import {t} from 'sentry/locale';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {convertDatasetEventTypesToSource} from 'sentry/views/alerts/utils';\n\nimport {DATASET_EVENT_TYPE_FILTERS, DATASOURCE_EVENT_TYPE_FILTERS} from '../constants';\nimport {Dataset, Datasource, EventTypes, MetricRule} from '../types';\n\nexport function extractEventTypeFilterFromRule(metricRule: MetricRule) {\n  const {dataset, eventTypes} = metricRule;\n  return getEventTypeFilter(dataset, eventTypes);\n}\n\nexport function getEventTypeFilter(\n  dataset: Dataset,\n  eventTypes: EventTypes[] | undefined\n) {\n  if (eventTypes) {\n    return DATASOURCE_EVENT_TYPE_FILTERS[\n      convertDatasetEventTypesToSource(dataset, eventTypes) ?? Datasource.ERROR\n    ];\n  }\n  return DATASET_EVENT_TYPE_FILTERS[dataset ?? Dataset.ERRORS];\n}\n","import {Dataset} from '../types';\n\n/**\n * Currently we can tell if an alert is a crash free alert by the dataset,\n * but this may become more complicated soon\n */\nexport function isCrashFreeAlert(dataset?: Dataset): boolean {\n  return dataset !== undefined && [Dataset.SESSIONS, Dataset.METRICS].includes(dataset);\n}\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import {Client} from 'sentry/api';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\nimport type {Incident} from '../types';\n\n// Use this api for requests that are getting cancelled\nconst uncancellableApi = new Client();\n\nexport function fetchAlertRule(\n  orgId: string,\n  ruleId: string,\n  query?: Record<string, string>\n): Promise<MetricRule> {\n  return uncancellableApi.requestPromise(\n    `/organizations/${orgId}/alert-rules/${ruleId}/`,\n    {query}\n  );\n}\n\nexport function fetchIncidentsForRule(\n  orgId: string,\n  alertRule: string,\n  start: string,\n  end: string\n): Promise<Incident[]> {\n  return uncancellableApi.requestPromise(`/organizations/${orgId}/incidents/`, {\n    query: {\n      project: '-1',\n      alertRule,\n      includeSnapshots: true,\n      start,\n      end,\n      expand: ['activities', 'seen_by', 'original_alert_rule'],\n    },\n  });\n}\n\nexport function fetchIncident(\n  api: Client,\n  orgId: string,\n  alertId: string\n): Promise<Incident> {\n  return api.requestPromise(`/organizations/${orgId}/incidents/${alertId}/`);\n}\n","import {\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Trigger,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport const getChangeStatus = (\n  value: number,\n  thresholdType: AlertRuleThresholdType,\n  triggers: Trigger[]\n): string => {\n  const criticalTrigger = triggers?.find(\n    trig => trig.label === AlertRuleTriggerType.CRITICAL\n  );\n  const warningTrigger = triggers?.find(\n    trig => trig.label === AlertRuleTriggerType.WARNING\n  );\n  const criticalTriggerAlertThreshold =\n    typeof criticalTrigger?.alertThreshold === 'number'\n      ? criticalTrigger.alertThreshold\n      : undefined;\n  const warningTriggerAlertThreshold =\n    typeof warningTrigger?.alertThreshold === 'number'\n      ? warningTrigger.alertThreshold\n      : undefined;\n\n  // Need to catch the critical threshold cases before warning threshold cases\n  if (\n    thresholdType === AlertRuleThresholdType.ABOVE &&\n    criticalTriggerAlertThreshold &&\n    value >= criticalTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.CRITICAL;\n  }\n  if (\n    thresholdType === AlertRuleThresholdType.ABOVE &&\n    warningTriggerAlertThreshold &&\n    value >= warningTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.WARNING;\n  }\n  // When threshold is below(lower than in comparison alerts) the % diff value is negative\n  // It crosses the threshold if its abs value is greater than threshold\n  // -80% change crosses below 60% threshold -1 * (-80) > 60\n  if (\n    thresholdType === AlertRuleThresholdType.BELOW &&\n    criticalTriggerAlertThreshold &&\n    -1 * value >= criticalTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.CRITICAL;\n  }\n  if (\n    thresholdType === AlertRuleThresholdType.BELOW &&\n    warningTriggerAlertThreshold &&\n    -1 * value >= warningTriggerAlertThreshold\n  ) {\n    return AlertRuleTriggerType.WARNING;\n  }\n\n  return '';\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions only has one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, seriesName);\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, seriesName);\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n","import {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex threshold and time interval'),\n      timeWindowText,\n    };\n  }\n  if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  }\n  return {\n    labelText: t('Select function and time interval'),\n    timeWindowText,\n  };\n}\n","import {Dataset, SessionsAggregate} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertType, WizardRuleTemplate} from './options';\n\n// A set of unique identifiers to be able to tie aggregate and dataset back to a wizard alert type\nconst alertTypeIdentifiers: Record<Dataset, Partial<Record<AlertType, string>>> = {\n  [Dataset.ERRORS]: {\n    num_errors: 'count()',\n    users_experiencing_errors: 'count_unique(user)',\n  },\n  [Dataset.TRANSACTIONS]: {\n    throughput: 'count()',\n    trans_duration: 'transaction.duration',\n    apdex: 'apdex',\n    failure_rate: 'failure_rate()',\n    lcp: 'measurements.lcp',\n    fid: 'measurements.fid',\n    cls: 'measurements.cls',\n  },\n  [Dataset.SESSIONS]: {\n    crash_free_sessions: SessionsAggregate.CRASH_FREE_SESSIONS,\n    crash_free_users: SessionsAggregate.CRASH_FREE_USERS,\n  },\n  [Dataset.METRICS]: {\n    crash_free_sessions: SessionsAggregate.CRASH_FREE_SESSIONS,\n    crash_free_users: SessionsAggregate.CRASH_FREE_USERS,\n  },\n};\n\n/**\n * Given an aggregate and dataset object, will return the corresponding wizard alert type\n * e.g. {aggregate: 'count()', dataset: 'events'} will yield 'num_errors'\n * @param template\n */\nexport function getAlertTypeFromAggregateDataset({\n  aggregate,\n  dataset,\n}: Pick<WizardRuleTemplate, 'aggregate' | 'dataset'>): AlertType {\n  const identifierForDataset = alertTypeIdentifiers[dataset];\n  const matchingAlertTypeEntry = Object.entries(identifierForDataset).find(\n    ([_alertType, identifier]) => identifier && aggregate.includes(identifier)\n  );\n  const alertType = matchingAlertTypeEntry && (matchingAlertTypeEntry[0] as AlertType);\n  return alertType ? alertType : 'custom';\n}\n","import styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport MarkerModel from './MarkerModel.js';\n\nvar MarkAreaModel =\n/** @class */\nfunction (_super) {\n  __extends(MarkAreaModel, _super);\n\n  function MarkAreaModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = MarkAreaModel.type;\n    return _this;\n  }\n\n  MarkAreaModel.prototype.createMarkerModelFromSeries = function (markerOpt, masterMarkerModel, ecModel) {\n    return new MarkAreaModel(markerOpt, masterMarkerModel, ecModel);\n  };\n\n  MarkAreaModel.type = 'markArea';\n  MarkAreaModel.defaultOption = {\n    // zlevel: 0,\n    // PENDING\n    z: 1,\n    tooltip: {\n      trigger: 'item'\n    },\n    // markArea should fixed on the coordinate system\n    animation: false,\n    label: {\n      show: true,\n      position: 'top'\n    },\n    itemStyle: {\n      // color and borderColor default to use color from series\n      // color: 'auto'\n      // borderColor: 'auto'\n      borderWidth: 0\n    },\n    emphasis: {\n      label: {\n        show: true,\n        position: 'top'\n      }\n    }\n  };\n  return MarkAreaModel;\n}(MarkerModel);\n\nexport default MarkAreaModel;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\"; // TODO Optimize on polar\n\nimport * as colorUtil from 'zrender/lib/tool/color.js';\nimport SeriesData from '../../data/SeriesData.js';\nimport * as numberUtil from '../../util/number.js';\nimport * as graphic from '../../util/graphic.js';\nimport { toggleHoverEmphasis, setStatesStylesFromModel } from '../../util/states.js';\nimport * as markerHelper from './markerHelper.js';\nimport MarkerView from './MarkerView.js';\nimport { retrieve, mergeAll, map, curry, filter, extend, isString } from 'zrender/lib/core/util.js';\nimport { isCoordinateSystemType } from '../../coord/CoordinateSystem.js';\nimport MarkerModel from './MarkerModel.js';\nimport { makeInner } from '../../util/model.js';\nimport { getVisualFromData } from '../../visual/helper.js';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle.js';\nimport { getECData } from '../../util/innerStore.js';\nimport { parseDataValue } from '../../data/helper/dataValueHelper.js';\nvar inner = makeInner();\n\nvar markAreaTransform = function (seriesModel, coordSys, maModel, item) {\n  var lt = markerHelper.dataTransform(seriesModel, item[0]);\n  var rb = markerHelper.dataTransform(seriesModel, item[1]); // FIXME make sure lt is less than rb\n\n  var ltCoord = lt.coord;\n  var rbCoord = rb.coord;\n  ltCoord[0] = retrieve(ltCoord[0], -Infinity);\n  ltCoord[1] = retrieve(ltCoord[1], -Infinity);\n  rbCoord[0] = retrieve(rbCoord[0], Infinity);\n  rbCoord[1] = retrieve(rbCoord[1], Infinity); // Merge option into one\n\n  var result = mergeAll([{}, lt, rb]);\n  result.coord = [lt.coord, rb.coord];\n  result.x0 = lt.x;\n  result.y0 = lt.y;\n  result.x1 = rb.x;\n  result.y1 = rb.y;\n  return result;\n};\n\nfunction isInifinity(val) {\n  return !isNaN(val) && !isFinite(val);\n} // If a markArea has one dim\n\n\nfunction ifMarkAreaHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {\n  var otherDimIndex = 1 - dimIndex;\n  return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);\n}\n\nfunction markAreaFilter(coordSys, item) {\n  var fromCoord = item.coord[0];\n  var toCoord = item.coord[1];\n  var item0 = {\n    coord: fromCoord,\n    x: item.x0,\n    y: item.y0\n  };\n  var item1 = {\n    coord: toCoord,\n    x: item.x1,\n    y: item.y1\n  };\n\n  if (isCoordinateSystemType(coordSys, 'cartesian2d')) {\n    // In case\n    // {\n    //  markArea: {\n    //    data: [{ yAxis: 2 }]\n    //  }\n    // }\n    if (fromCoord && toCoord && (ifMarkAreaHasOnlyDim(1, fromCoord, toCoord, coordSys) || ifMarkAreaHasOnlyDim(0, fromCoord, toCoord, coordSys))) {\n      return true;\n    } //Directly returning true may also do the work,\n    //because markArea will not be shown automatically\n    //when it's not included in coordinate system.\n    //But filtering ahead can avoid keeping rendering markArea\n    //when there are too many of them.\n\n\n    return markerHelper.zoneFilter(coordSys, item0, item1);\n  }\n\n  return markerHelper.dataFilter(coordSys, item0) || markerHelper.dataFilter(coordSys, item1);\n} // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']\n\n\nfunction getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {\n  var coordSys = seriesModel.coordinateSystem;\n  var itemModel = data.getItemModel(idx);\n  var point;\n  var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());\n  var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());\n\n  if (!isNaN(xPx) && !isNaN(yPx)) {\n    point = [xPx, yPx];\n  } else {\n    // Chart like bar may have there own marker positioning logic\n    if (seriesModel.getMarkerPosition) {\n      // Use the getMarkerPoisition\n      point = seriesModel.getMarkerPosition(data.getValues(dims, idx));\n    } else {\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n      var pt = [x, y];\n      coordSys.clampData && coordSys.clampData(pt, pt);\n      point = coordSys.dataToPoint(pt, true);\n    }\n\n    if (isCoordinateSystemType(coordSys, 'cartesian2d')) {\n      // TODO: TYPE ts@4.1 may still infer it as Axis instead of Axis2D. Not sure if it's a bug\n      var xAxis = coordSys.getAxis('x');\n      var yAxis = coordSys.getAxis('y');\n      var x = data.get(dims[0], idx);\n      var y = data.get(dims[1], idx);\n\n      if (isInifinity(x)) {\n        point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);\n      } else if (isInifinity(y)) {\n        point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);\n      }\n    } // Use x, y if has any\n\n\n    if (!isNaN(xPx)) {\n      point[0] = xPx;\n    }\n\n    if (!isNaN(yPx)) {\n      point[1] = yPx;\n    }\n  }\n\n  return point;\n}\n\nvar dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];\n\nvar MarkAreaView =\n/** @class */\nfunction (_super) {\n  __extends(MarkAreaView, _super);\n\n  function MarkAreaView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = MarkAreaView.type;\n    return _this;\n  }\n\n  MarkAreaView.prototype.updateTransform = function (markAreaModel, ecModel, api) {\n    ecModel.eachSeries(function (seriesModel) {\n      var maModel = MarkerModel.getMarkerModelFromSeries(seriesModel, 'markArea');\n\n      if (maModel) {\n        var areaData_1 = maModel.getData();\n        areaData_1.each(function (idx) {\n          var points = map(dimPermutations, function (dim) {\n            return getSingleMarkerEndPoint(areaData_1, idx, dim, seriesModel, api);\n          }); // Layout\n\n          areaData_1.setItemLayout(idx, points);\n          var el = areaData_1.getItemGraphicEl(idx);\n          el.setShape('points', points);\n        });\n      }\n    }, this);\n  };\n\n  MarkAreaView.prototype.renderSeries = function (seriesModel, maModel, ecModel, api) {\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesId = seriesModel.id;\n    var seriesData = seriesModel.getData();\n    var areaGroupMap = this.markerGroupMap;\n    var polygonGroup = areaGroupMap.get(seriesId) || areaGroupMap.set(seriesId, {\n      group: new graphic.Group()\n    });\n    this.group.add(polygonGroup.group);\n    this.markKeep(polygonGroup);\n    var areaData = createList(coordSys, seriesModel, maModel); // Line data for tooltip and formatter\n\n    maModel.setData(areaData); // Update visual and layout of line\n\n    areaData.each(function (idx) {\n      // Layout\n      var points = map(dimPermutations, function (dim) {\n        return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);\n      });\n      var xAxisScale = coordSys.getAxis('x').scale;\n      var yAxisScale = coordSys.getAxis('y').scale;\n      var xAxisExtent = xAxisScale.getExtent();\n      var yAxisExtent = yAxisScale.getExtent();\n      var xPointExtent = [xAxisScale.parse(areaData.get('x0', idx)), xAxisScale.parse(areaData.get('x1', idx))];\n      var yPointExtent = [yAxisScale.parse(areaData.get('y0', idx)), yAxisScale.parse(areaData.get('y1', idx))];\n      numberUtil.asc(xPointExtent);\n      numberUtil.asc(yPointExtent);\n      var overlapped = !(xAxisExtent[0] > xPointExtent[1] || xAxisExtent[1] < xPointExtent[0] || yAxisExtent[0] > yPointExtent[1] || yAxisExtent[1] < yPointExtent[0]); // If none of the area is inside coordSys, allClipped is set to be true\n      // in layout so that label will not be displayed. See #12591\n\n      var allClipped = !overlapped;\n      areaData.setItemLayout(idx, {\n        points: points,\n        allClipped: allClipped\n      });\n      var style = areaData.getItemModel(idx).getModel('itemStyle').getItemStyle();\n      var color = getVisualFromData(seriesData, 'color');\n\n      if (!style.fill) {\n        style.fill = color;\n\n        if (isString(style.fill)) {\n          style.fill = colorUtil.modifyAlpha(style.fill, 0.4);\n        }\n      }\n\n      if (!style.stroke) {\n        style.stroke = color;\n      } // Visual\n\n\n      areaData.setItemVisual(idx, 'style', style);\n    });\n    areaData.diff(inner(polygonGroup).data).add(function (idx) {\n      var layout = areaData.getItemLayout(idx);\n\n      if (!layout.allClipped) {\n        var polygon = new graphic.Polygon({\n          shape: {\n            points: layout.points\n          }\n        });\n        areaData.setItemGraphicEl(idx, polygon);\n        polygonGroup.group.add(polygon);\n      }\n    }).update(function (newIdx, oldIdx) {\n      var polygon = inner(polygonGroup).data.getItemGraphicEl(oldIdx);\n      var layout = areaData.getItemLayout(newIdx);\n\n      if (!layout.allClipped) {\n        if (polygon) {\n          graphic.updateProps(polygon, {\n            shape: {\n              points: layout.points\n            }\n          }, maModel, newIdx);\n        } else {\n          polygon = new graphic.Polygon({\n            shape: {\n              points: layout.points\n            }\n          });\n        }\n\n        areaData.setItemGraphicEl(newIdx, polygon);\n        polygonGroup.group.add(polygon);\n      } else if (polygon) {\n        polygonGroup.group.remove(polygon);\n      }\n    }).remove(function (idx) {\n      var polygon = inner(polygonGroup).data.getItemGraphicEl(idx);\n      polygonGroup.group.remove(polygon);\n    }).execute();\n    areaData.eachItemGraphicEl(function (polygon, idx) {\n      var itemModel = areaData.getItemModel(idx);\n      var style = areaData.getItemVisual(idx, 'style');\n      polygon.useStyle(areaData.getItemVisual(idx, 'style'));\n      setLabelStyle(polygon, getLabelStatesModels(itemModel), {\n        labelFetcher: maModel,\n        labelDataIndex: idx,\n        defaultText: areaData.getName(idx) || '',\n        inheritColor: isString(style.fill) ? colorUtil.modifyAlpha(style.fill, 1) : '#000'\n      });\n      setStatesStylesFromModel(polygon, itemModel);\n      toggleHoverEmphasis(polygon, null, null, itemModel.get(['emphasis', 'disabled']));\n      getECData(polygon).dataModel = maModel;\n    });\n    inner(polygonGroup).data = areaData;\n    polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');\n  };\n\n  MarkAreaView.type = 'markArea';\n  return MarkAreaView;\n}(MarkerView);\n\nfunction createList(coordSys, seriesModel, maModel) {\n  var areaData;\n  var dataDims;\n  var dims = ['x0', 'y0', 'x1', 'y1'];\n\n  if (coordSys) {\n    var coordDimsInfos_1 = map(coordSys && coordSys.dimensions, function (coordDim) {\n      var data = seriesModel.getData();\n      var info = data.getDimensionInfo(data.mapDimension(coordDim)) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys\n\n      return extend(extend({}, info), {\n        name: coordDim,\n        // DON'T use ordinalMeta to parse and collect ordinal.\n        ordinalMeta: null\n      });\n    });\n    dataDims = map(dims, function (dim, idx) {\n      return {\n        name: dim,\n        type: coordDimsInfos_1[idx % 2].type\n      };\n    });\n    areaData = new SeriesData(dataDims, maModel);\n  } else {\n    dataDims = [{\n      name: 'value',\n      type: 'float'\n    }];\n    areaData = new SeriesData(dataDims, maModel);\n  }\n\n  var optData = map(maModel.get('data'), curry(markAreaTransform, seriesModel, coordSys, maModel));\n\n  if (coordSys) {\n    optData = filter(optData, curry(markAreaFilter, coordSys));\n  }\n\n  var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {\n    // TODO should convert to ParsedValue?\n    var rawVal = item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];\n    return parseDataValue(rawVal, dataDims[dimIndex]);\n  } : function (item, dimName, dataIndex, dimIndex) {\n    return parseDataValue(item.value, dataDims[dimIndex]);\n  };\n  areaData.initData(optData, null, dimValueGetter);\n  areaData.hasItemOption = true;\n  return areaData;\n}\n\nexport default MarkAreaView;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { use } from '../extension.js';\nimport { install } from './marker/installMarkArea.js';\nuse(install);","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport checkMarkerInSeries from './checkMarkerInSeries.js';\nimport MarkAreaModel from './MarkAreaModel.js';\nimport MarkAreaView from './MarkAreaView.js';\nexport function install(registers) {\n  registers.registerComponentModel(MarkAreaModel);\n  registers.registerComponentView(MarkAreaView);\n  registers.registerPreprocessor(function (opt) {\n    if (checkMarkerInSeries(opt.series, 'markArea')) {\n      // Make sure markArea component is enabled\n      opt.markArea = opt.markArea || {};\n    }\n  });\n}"],"names":["AlertBadge","status","hideText","isIssue","statusText","t","Icon","IconCheckmark","color","IconIssues","IncidentStatus","IconFire","IconExclamation","Wrapper","AlertIconWrapper","icon","AlertIconBackground","IncidentStatusValue","p","IconDiamond","space","MarkArea","props","COLLAPSE_COUNT","ShowMoreButton","items","buttonTitle","collapseCount","disableBorder","onClick","ShowMore","role","ShowMoreText","StyledIconList","tct","count","direction","children","isExpanded","setIsExpanded","useState","showMoreButton","theme","fontSizeMedium","subText","border","css","borderRadius","IconList","KeyValueTable","KeyValueTableRow","keyName","value","Fragment","Key","Value","commonStyles","overflowEllipsis","backgroundSecondary","textColor","PageTimeRangeSelector","className","DropdownDate","label","DropdownLabel","detached","relative","start","end","utc","defaultPeriod","Panel","background","tooltipFormatter","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","toFixed","DAY","HOUR","MINUTE","SECOND","shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","endpoint","useEvents","afterFetch","data","_","fields","otherMeta","meta","undefined","route","withApi","getTransactionDetailsUrl","orgSlug","eventSlug","transaction","query","spanId","locationQuery","target","pathname","hash","spanTargetHash","DEFAULT_COUNT_TIME_WINDOW","DEFAULT_CHANGE_TIME_WINDOW","DEFAULT_CHANGE_COMP_DELTA","DEFAULT_AGGREGATE","DEFAULT_TRANSACTION_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","Dataset","DATASOURCE_EVENT_TYPE_FILTERS","Datasource","errorFieldConfig","aggregations","commonAggregations","allAggregations","DuplicateMetricFields","DuplicateTriggerFields","DuplicateActionFields","COMPARISON_DELTA_OPTIONS","getWizardAlertFieldConfig","alertType","dataset","measurementKeys","Object","keys","WEB_VITAL_DETAILS","transactionFieldConfig","createDefaultTrigger","alertThreshold","actions","createDefaultRule","defaultRuleOptions","eventTypes","EventTypes","aggregate","timeWindow","thresholdPeriod","triggers","AlertRuleTriggerType","projects","environment","resolveThreshold","thresholdType","AlertRuleThresholdType","createRuleFromEventView","eventView","parsedQuery","getQueryDatasource","datasetAndEventtypes","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","source","getYAxis","test","slice","length","createRuleFromWizardTemplate","wizardTemplate","isSessionAggregate","TimeWindow","includes","getThresholdUnits","comparisonType","AlertRuleComparisonType","SELECTOR_RELATIVE_PERIODS","TimePeriod","ALERT_DEFAULT_CHART_PERIOD","TIME_OPTIONS","TIME_WINDOWS","API_INTERVAL_POINTS_LIMIT","API_INTERVAL_POINTS_MIN","StatusIndicator","tooltipTitle","title","skipWrapper","StatusLevel","alert","MetricAlertActivity","organization","incident","activities","filter","activity","type","IncidentActivityType","criticalActivity","warningActivity","triggeredActivity","currentTrigger","nextActivity","find","previousValue","activityDuration","moment","dateCreated","diff","threshold","duration","seconds","warningThreshold","alertRule","trigger","map","trig","criticalThreshold","Title","toLocaleLowerCase","level","to","alertDetailsLink","identifier","id","Cell","AlertWizardAlertNames","getAlertTypeFromAggregateDataset","selector","getDynamicText","fixed","StyledDateTime","date","MetricHistory","incidents","numOfIncidents","tn","StyledPanelTable","headers","isEmpty","emptyMessage","expanded","idx","PanelTable","DateTime","gray300","getMetricRuleDiscoverUrl","opts","rule","eventType","extraQueryParams","eventTypeTagFilter","timeWindowString","discoverQuery","name","orderby","getAggregateAlias","yAxis","slug","Number","version","discoverView","EventView","toObject","getResultsViewUrlTarget","interval","makeDefaultCta","buttonText","display","DisplayModes","createStatusAreaSeries","lineColor","startTime","endTime","yPosition","markLine","MarkLine","silent","lineStyle","width","coord","createThresholdSeries","show","formatTooltipDate","format","options","timezone","ConfigStore","momentTimezone","getRuleChangeSeries","dateModified","seriesData","seriesStart","valueOf","ruleChanged","animation","xAxis","markArea","itemStyle","alpha","rgb","string","MetricChart","PureComponent","height","chartRef","this","ref","getEchartsInstance","getWidth","getHeight","state","setState","updateDimensions","location","browserHistory","renderChartActions","totalDuration","criticalDuration","warningDuration","orgId","project","timePeriod","ctaOpts","resolvedPercent","Math","max","criticalPercent","min","warningPercent","StyledChartControls","StyledInlineContainer","StyledSectionValue","ValueItem","isCircled","features","size","renderChart","loading","timeseriesData","minutesThresholdToDisplaySeconds","comparisonTimeseriesData","router","selectedIncident","renderEmpty","chartOption","handleIncidentClick","criticalTrigger","warningTrigger","series","areaSeries","z","CHART_PALETTE","dataArr","maxSeriesValue","reduce","currMax","minChartValue","shouldScaleAlertChart","floor","Infinity","ALERT_CHART_MIN_MAX_BUFFER","firstPoint","lastPoint","push","periodStart","dateClosed","isAfter","forEach","statusChanges","sort","a","b","incidentEnd","timeWindowMs","incidentColor","incidentStartDate","dateStarted","incidentCloseDate","incidentStartValue","point","incidentTimestamp","dataPoint","formatter","marker","time","alertTooltipValueFormatter","join","position","fontSize","fontFamily","tooltip","alwaysShowContent","createIncidentSeries","areaStart","areaEnd","areaColor","abs","statusAreaStart","statusAreaEnd","statusAreaColor","selectedIncidentColor","maxThresholdValue","comparisonDelta","warningThresholdLine","criticalThresholdLine","resolveThresholdLine","axisLabel","alertAxisFormatter","isCrashFreeAlert","isGroupedByDate","grid","left","right","top","bottom","getMetricAlertChartOption","comparisonSeriesName","capitalize","additionalSeries","_data","otherSeriesProps","LineSeries","animationThreshold","animationDuration","queryFilter","truncateWidth","ChartPanel","StyledPanelBody","withPadding","ChartHeader","ChartFilters","StyledCircleIndicator","Filters","maxLength","onZoom","zoomArgs","handleZoom","onFinished","zoomRenderProps","showTimeInTooltip","forwardedRef","handleRef","seriesParams","pointSeries","Array","isArray","pointData","pointX","pointY","pointYFormatted","isModified","Date","getTime","period","periodLength","parseStatsPeriod","add","parseInt","comparisonSeries","_sn","comparisonPointY","comparisonPointYFormatted","changePercentage","NaN","changeStatus","getChangeStatus","changeStatusColor","isNaN","sign","e","testId","render","api","usingPeriod","getUtcDateString","subtract","viableStartDate","viableEndDate","field","SESSION_AGGREGATE_TO_FIELD","groupBy","response","getCrashFreeRateSeries","groups","intervals","transformSessionResponseToSeries","MINUTES_THRESHOLD_TO_DISPLAY_SECONDS","includePrevious","currentSeriesNames","partial","referrer","withRouter","ChartControls","InlineContainer","CircleIndicator","formText","fontSizeSmall","text","family","SectionValue","PanelBody","RelatedIssues","path","queryParams","groupStatsPeriod","limit","issueSearch","ControlsWrapper","StyledSectionHeading","TableWrapper","endpointPath","canSelectGroups","renderEmptyMessage","small","withIcon","renderErrorMessage","retry","detail","RELATED_ISSUES_BOOLEAN_QUERY_ERROR","buttonTo","onRetry","withChart","withPagination","useFilteredStats","customStatsPeriod","useTintRow","SectionHeading","Table","Component","widths","tableData","column","dataRow","renderBodyCell","tableMeta","columnName","columnTitles","index","renderHeadCell","columnIndex","nextColumn","COL_WIDTH_UNDEFINED","summaryConditions","key","String","rendered","getFieldRenderer","fieldRenderer","projectID","eventData","projectSlug","currentProject","getProjectID","summaryView","clone","transactionSummaryRouteWithQuery","generateQueryStringObject","align","fieldAlignment","HeaderCell","getSortedEventView","withSorts","sorts","columnOrder","getColumns","col","i","sortedEventView","columnSortBy","getSorts","isLoading","onResizeColumn","handleResizeColumn","renderHeadCellWithMeta","renderBodyCellWithData","RelatedTransactions","aggregateAlias","timePeriodFields","range","eventQuery","DEFAULT_PROJECT_THRESHOLD","Sidebar","getTimeWindow","window","renderTrigger","statusIconColor","defaultAction","thresholdTypeText","thresholdText","metric","condition","TriggerContainer","TriggerTitle","TriggerTitleText","TriggerStep","TriggerActions","TriggerText","action","desc","latestIncident","activityDate","ownerId","owner","split","teamActor","StatusContainer","HeaderItem","Heading","noMargin","Status","SidebarGroup","OverflowTableValue","createdBy","suffix","actor","fontSizeLarge","surface100","DetailsBody","datetime","getInterval","startDate","endDate","startEndDifferenceMs","getFilter","extractEventTypeFilterFromRule","renderLoading","params","queryWithTypeFilter","trim","relativeOptions","AlertRuleStatus","StyledLayoutBody","StyledAlert","showIcon","StyledPageTimeRangeSelector","custom","onUpdate","handleTimePeriodChange","showAbsolute","DetailWrapper","ActivityWrapper","breakpoints","Layout","medium","Alert","DetailsHeader","hasMetricRuleDetailsError","isRuleReady","ruleTitle","settingsLink","isIssueAlert","Header","BreadCrumbBar","AlertBreadcrumbs","crumbs","Controls","Details","RuleTitle","avatarSize","hideName","avatarProps","hasTooltip","Breadcrumbs","fontSizeExtraLarge","PageHeader","PageHeading","shouldForwardProp","isPropValid","MetricAlertDetails","hasError","error","async","ruleId","rulePromise","Promise","resolve","fetchAlertRule","expand","fetchIncident","getTimePeriod","all","fetchIncidentsForRule","componentDidMount","fetchOrgMembers","fetchData","trackView","componentDidUpdate","search","trackAdvancedAnalyticsEvent","rule_id","has_chartcuterie","timeAndDate","timeWindowMillis","minRange","maxRange","now","incidentRange","halfRange","buildMetricGraphDateRange","timeOption","item","renderError","loadingProjects","isGlobalSelectionReady","skipLoadLastUsed","skipInitializeUrlParams","shouldForceProject","forceProject","forceEnvironment","lockedMessageSubject","showDateSelector","hideGlobalHeader","withProjects","SessionsAggregate","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","metricRule","getEventTypeFilter","convertDatasetEventTypesToSource","AlertRuleType","IncidentStatusMethod","CombinedAlertType","uncancellableApi","Client","requestPromise","includeSnapshots","alertId","criticalTriggerAlertThreshold","warningTriggerAlertThreshold","getStartEndFromStats","stats","eventStats","hasOwnProperty","DATA_SOURCE_LABELS","match","replace","toUpperCase","values","SessionFieldWithOperation","round","originalAlertRuleId","getQueryStatus","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","hidePrimarySelectorSet","Set","hideParameterSelectorSet","getFunctionHelpText","timeWindowText","labelText","has","alertTypeIdentifiers","identifierForDataset","matchingAlertTypeEntry","entries","_alertType","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","unselectedSeries","trendFunction","trendColumn","showTransactions","additionalQuery","generateTransactionSummaryRoute","searchFilter","formatString","statsPeriod","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","generateEventSlug","SidebarSpacer","_super","MarkAreaModel","_this","apply","arguments","prototype","createMarkerModelFromSeries","markerOpt","masterMarkerModel","ecModel","defaultOption","borderWidth","emphasis","MarkerModel","inner","markAreaTransform","seriesModel","coordSys","maModel","lt","markerHelper","rb","ltCoord","rbCoord","retrieve","result","mergeAll","x0","x","y0","y","x1","y1","isInifinity","val","isFinite","ifMarkAreaHasOnlyDim","dimIndex","fromCoord","toCoord","otherDimIndex","markAreaFilter","item0","item1","getSingleMarkerEndPoint","dims","coordinateSystem","itemModel","getItemModel","xPx","number","get","yPx","getMarkerPosition","getValues","pt","clampData","dataToPoint","getAxis","toGlobalCoord","getExtent","dimPermutations","MarkAreaView","updateTransform","markAreaModel","eachSeries","areaData_1","getData","each","points","dim","setItemLayout","getItemGraphicEl","setShape","renderSeries","seriesId","areaGroupMap","markerGroupMap","polygonGroup","set","group","markKeep","areaData","dataDims","coordDimsInfos_1","dimensions","coordDim","info","getDimensionInfo","mapDimension","extend","ordinalMeta","SeriesData","optData","curry","dimValueGetter","dimName","dataIndex","rawVal","initData","hasItemOption","createList","setData","xAxisScale","scale","yAxisScale","xAxisExtent","yAxisExtent","xPointExtent","parse","yPointExtent","allClipped","style","getModel","getItemStyle","fill","isString","stroke","setItemVisual","layout","getItemLayout","polygon","shape","setItemGraphicEl","update","newIdx","oldIdx","remove","execute","eachItemGraphicEl","getItemVisual","useStyle","labelFetcher","labelDataIndex","defaultText","getName","inheritColor","dataModel","MarkerView","registers","registerComponentModel","registerComponentView","registerPreprocessor","opt","checkMarkerInSeries"],"sourceRoot":""}