{"version":3,"file":"chunks/app_views_dashboardsV2_widgetBuilder_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/featureFeedback/index.tsx","webpack:///./app/utils/usePrevious.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/issuesSearchBar.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/buildStep.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/columnsStep/columnFields.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/columnsStep/releaseColumnFields.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/columnsStep/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/dataSetStep.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/eventsSearchBar.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/filterResultsStep/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/groupByStep/queryField.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/groupByStep/sortableQueryField.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/groupByStep/groupBySelector.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/groupByStep/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/sortByStep/sortBySelectors.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/sortByStep/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/visualizationStep.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/yAxisStep/yAxisSelector/addButton.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/yAxisStep/yAxisSelector/deleteButton.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/yAxisStep/yAxisSelector/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/yAxisStep/releaseYAxisSelector.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/buildSteps/yAxisStep/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/footer.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/header.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/widgetLibrary/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/widgetBuilder.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/index.tsx","webpack:///./app/views/dashboardsV2/widgetBuilder/widgetLibrary/card.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/data.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx"],"sourcesContent":["import {openModal} from 'sentry/actionCreators/modal';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport {IconMegaphone} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\nimport {FeedBackModalProps} from './feedbackModal';\n\nexport interface FeatureFeedbackProps extends FeedBackModalProps {\n  buttonProps?: Partial<ButtonProps>;\n}\n\n// Provides a button that, when clicked, opens a modal with a form that,\n// when filled and submitted, will send feedback to Sentry (feedbacks project).\nexport function FeatureFeedback({\n  feedbackTypes,\n  featureName,\n  buttonProps = {},\n}: FeatureFeedbackProps) {\n  async function handleClick() {\n    const mod = await import('sentry/components/featureFeedback/feedbackModal');\n\n    const {FeedbackModal, modalCss} = mod;\n\n    openModal(\n      deps => (\n        <FeedbackModal\n          {...deps}\n          featureName={featureName}\n          feedbackTypes={feedbackTypes}\n        />\n      ),\n      {\n        modalCss,\n      }\n    );\n  }\n\n  return (\n    <Button icon={<IconMegaphone />} onClick={handleClick} {...buttonProps}>\n      {t('Give Feedback')}\n    </Button>\n  );\n}\n","import {useEffect, useRef} from 'react';\n\n/**\n * Provides previous prop or state inside of function components.\n * It’s possible that in the future React will provide a usePrevious Hook out of the box since it’s a relatively common use case.\n * @see {@link https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state}\n *\n * @returns 'ref.current' and therefore should not be used as a dependency of useEffect.\n * Mutable values like 'ref.current' are not valid dependencies of useEffect because changing them does not re-render the component.\n */\nfunction usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>(value);\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport default usePrevious;\n","import {ClassNames} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport {SearchBarProps} from 'sentry/components/events/searchBar';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, SavedSearchType, TagCollection} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport useApi from 'sentry/utils/useApi';\nimport withIssueTags from 'sentry/utils/withIssueTags';\nimport {WidgetQuery} from 'sentry/views/dashboardsV2/types';\nimport {\n  MAX_MENU_HEIGHT,\n  MAX_SEARCH_ITEMS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport IssueListSearchBar from 'sentry/views/issueList/searchBar';\n\ninterface Props {\n  onBlur: SearchBarProps['onBlur'];\n  onSearch: SearchBarProps['onSearch'];\n  organization: Organization;\n  query: WidgetQuery;\n  selection: PageFilters;\n  tags: TagCollection;\n  searchSource?: string;\n}\n\nfunction IssuesSearchBarContainer({\n  tags,\n  onSearch,\n  onBlur,\n  organization,\n  query,\n  selection,\n  searchSource,\n}: Props) {\n  const api = useApi();\n  function tagValueLoader(key: string, search: string) {\n    const orgId = organization.slug;\n    const projectIds = selection.projects.map(id => id.toString());\n    const endpointParams = {\n      start: getUtcDateString(selection.datetime.start),\n      end: getUtcDateString(selection.datetime.end),\n      statsPeriod: selection.datetime.period,\n    };\n\n    return fetchTagValues(api, orgId, key, search, projectIds, endpointParams);\n  }\n\n  return (\n    <ClassNames>\n      {({css}) => (\n        <StyledIssueListSearchBar\n          searchSource={searchSource}\n          organization={organization}\n          query={query.conditions || ''}\n          sort=\"\"\n          onSearch={onSearch}\n          onBlur={onBlur}\n          excludeEnvironment\n          supportedTags={tags}\n          placeholder={t('Search for issues, status, assigned, and more')}\n          tagValueLoader={tagValueLoader}\n          onSidebarToggle={() => undefined}\n          maxSearchItems={MAX_SEARCH_ITEMS}\n          savedSearchType={SavedSearchType.ISSUE}\n          dropdownClassName={css`\n            max-height: ${MAX_MENU_HEIGHT}px;\n            overflow-y: auto;\n          `}\n        />\n      )}\n    </ClassNames>\n  );\n}\n\nconst IssuesSearchBar = withIssueTags(IssuesSearchBarContainer);\n\nexport {IssuesSearchBar};\n\nconst StyledIssueListSearchBar = styled(IssueListSearchBar)`\n  flex-grow: 1;\n  button:not([aria-label='Clear search']) {\n    display: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport ListItem from 'sentry/components/list/listItem';\nimport space from 'sentry/styles/space';\n\ninterface Props {\n  children: React.ReactNode;\n  description: string;\n  title: string;\n  required?: boolean;\n}\n\nexport function BuildStep({title, description, required = false, children}: Props) {\n  return (\n    <Wrapper>\n      <Heading>\n        {title}\n        {required && <RequiredBadge />}\n      </Heading>\n      <SubHeading>{description}</SubHeading>\n      <Content>{children}</Content>\n    </Wrapper>\n  );\n}\n\nconst Wrapper = styled(ListItem)`\n  display: grid;\n`;\n\nconst Heading = styled('h5')`\n  margin-bottom: 0;\n  color: ${p => p.theme.gray500};\n`;\n\nconst SubHeading = styled('small')`\n  color: ${p => p.theme.gray300};\n  padding: ${space(0.25)} ${space(2)} ${space(2)} 0;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    padding-top: ${space(1)};\n    margin-left: -${space(4)};\n  }\n`;\n\nconst Content = styled('div')`\n  display: grid;\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    margin-left: -${space(4)};\n  }\n`;\n\nconst RequiredBadge = styled('div')`\n  background: ${p => p.theme.red300};\n  opacity: 0.6;\n  width: 5px;\n  height: 5px;\n  border-radius: 5px;\n  margin-left: ${space(0.5)};\n  display: inline-block;\n  vertical-align: super;\n`;\n","import styled from '@emotion/styled';\n\nimport Field from 'sentry/components/forms/field';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {DisplayType, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport ColumnEditCollection from 'sentry/views/eventsV2/table/columnEditCollection';\nimport {FieldValueOption} from 'sentry/views/eventsV2/table/queryField';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\ninterface Props {\n  displayType: DisplayType;\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  fields: QueryFieldValue[];\n  onChange: (newColumns: QueryFieldValue[]) => void;\n  organization: Organization;\n  widgetType: WidgetType;\n  errors?: Record<string, string>[];\n  filterAggregateParameters?: (option: FieldValueOption) => boolean;\n  filterPrimaryOptions?: (option: FieldValueOption) => boolean;\n  noFieldsMessage?: string;\n}\n\nexport function ColumnFields({\n  displayType,\n  fieldOptions,\n  widgetType,\n  fields,\n  organization,\n  errors,\n  onChange,\n  filterAggregateParameters,\n  filterPrimaryOptions,\n  noFieldsMessage,\n}: Props) {\n  return (\n    <Field\n      inline={false}\n      error={errors?.find(error => error?.fields)?.fields}\n      flexibleControlStateSize\n      stacked\n    >\n      {displayType === DisplayType.TABLE ? (\n        <ColumnCollectionEdit\n          columns={fields}\n          onChange={onChange}\n          fieldOptions={fieldOptions}\n          organization={organization}\n          source={widgetType}\n          showAliasField={organization.features.includes(\n            'new-widget-builder-experience-design'\n          )}\n          filterAggregateParameters={filterAggregateParameters}\n          filterPrimaryOptions={filterPrimaryOptions}\n          noFieldsMessage={noFieldsMessage}\n        />\n      ) : (\n        // The only other display type this component\n        // renders for is TOP_N, where the n - 1 fields\n        // are columns and the nth field is the y-axis\n        <ColumnCollectionEdit\n          columns={fields.slice(0, fields.length - 1)}\n          onChange={newColumns => {\n            onChange([...newColumns, fields[fields.length - 1]]);\n          }}\n          fieldOptions={fieldOptions}\n          organization={organization}\n          source={widgetType}\n          filterPrimaryOptions={filterPrimaryOptions}\n          noFieldsMessage={noFieldsMessage}\n        />\n      )}\n    </Field>\n  );\n}\n\nconst ColumnCollectionEdit = styled(ColumnEditCollection)`\n  margin-top: ${space(1)};\n`;\n","import {Organization} from 'sentry/types';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {getDatasetConfig} from 'sentry/views/dashboardsV2/datasetConfig/base';\nimport {DisplayType, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {filterPrimaryOptions} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport {FieldValueOption} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\n\nimport {ColumnFields} from './columnFields';\n\ninterface Props {\n  displayType: DisplayType;\n  explodedFields: QueryFieldValue[];\n  onYAxisOrColumnFieldChange: (newFields: QueryFieldValue[]) => void;\n  organization: Organization;\n  widgetType: WidgetType;\n  queryErrors?: Record<string, any>[];\n}\n\nexport function ReleaseColumnFields({\n  displayType,\n  organization,\n  widgetType,\n  explodedFields,\n  queryErrors,\n  onYAxisOrColumnFieldChange,\n}: Props) {\n  const datasetConfig = getDatasetConfig(WidgetType.RELEASE);\n  const filterAggregateParameters = (option: FieldValueOption) => {\n    return option.value.kind === FieldValueKind.METRICS;\n  };\n  return (\n    <ColumnFields\n      displayType={displayType}\n      organization={organization}\n      widgetType={widgetType}\n      fields={explodedFields}\n      errors={queryErrors?.[0] ? [queryErrors?.[0]] : undefined}\n      fieldOptions={datasetConfig.getTableFieldOptions()}\n      filterAggregateParameters={filterAggregateParameters}\n      filterPrimaryOptions={option =>\n        filterPrimaryOptions({\n          option,\n          widgetType,\n          displayType,\n        })\n      }\n      onChange={onYAxisOrColumnFieldChange}\n    />\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, TagCollection} from 'sentry/types';\nimport {\n  generateFieldAsString,\n  getColumnsAndAggregatesAsStrings,\n  QueryFieldValue,\n} from 'sentry/utils/discover/fields';\nimport {getDatasetConfig} from 'sentry/views/dashboardsV2/datasetConfig/base';\nimport {DisplayType, WidgetQuery, WidgetType} from 'sentry/views/dashboardsV2/types';\n\nimport {DataSet} from '../../utils';\nimport {BuildStep} from '../buildStep';\n\nimport {ColumnFields} from './columnFields';\nimport {ReleaseColumnFields} from './releaseColumnFields';\n\ninterface Props {\n  dataSet: DataSet;\n  displayType: DisplayType;\n  explodedFields: QueryFieldValue[];\n  onQueryChange: (queryIndex: number, newQuery: WidgetQuery) => void;\n  onYAxisOrColumnFieldChange: (newFields: QueryFieldValue[]) => void;\n  organization: Organization;\n  queries: WidgetQuery[];\n  tags: TagCollection;\n  widgetType: WidgetType;\n  queryErrors?: Record<string, any>[];\n}\n\nexport function ColumnsStep({\n  dataSet,\n  displayType,\n  onQueryChange,\n  organization,\n  queries,\n  widgetType,\n  onYAxisOrColumnFieldChange,\n  queryErrors,\n  explodedFields,\n  tags,\n}: Props) {\n  const datasetConfig = getDatasetConfig(widgetType);\n  return (\n    <BuildStep\n      title={t('Choose your columns')}\n      description={\n        dataSet === DataSet.ISSUES\n          ? tct(\n              '[fieldTagLink: Field and tag] columns will help you view more details about the issues (e.g., title).',\n              {\n                fieldTagLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/search/searchable-properties/#event-properties\" />\n                ),\n              }\n            )\n          : dataSet === DataSet.RELEASES\n          ? tct(\n              'To stack sessions, add [functionLink: functions] f(x) that may take in additional parameters. [fieldTagLink: Field and tag] columns will help you view more details about the sessions (e.g., releases).',\n              {\n                functionLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/discover-queries/query-builder/#filter-by-table-columns\" />\n                ),\n                fieldTagLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/search/searchable-properties/#release-properties\" />\n                ),\n              }\n            )\n          : tct(\n              'To stack events, add [functionLink: functions] f(x) that may take in additional parameters. [fieldTagLink: Field and tag] columns will help you view more details about the events (e.g., title).',\n              {\n                functionLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/discover-queries/query-builder/#filter-by-table-columns\" />\n                ),\n                fieldTagLink: (\n                  <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/search/searchable-properties/#event-properties\" />\n                ),\n              }\n            )\n      }\n    >\n      {dataSet === DataSet.EVENTS ? (\n        <ColumnFields\n          displayType={displayType}\n          organization={organization}\n          widgetType={widgetType}\n          fields={explodedFields}\n          errors={queryErrors}\n          fieldOptions={datasetConfig.getTableFieldOptions({organization}, tags)}\n          onChange={onYAxisOrColumnFieldChange}\n        />\n      ) : dataSet === DataSet.ISSUES ? (\n        <ColumnFields\n          displayType={displayType}\n          organization={organization}\n          widgetType={widgetType}\n          fields={explodedFields}\n          errors={queryErrors?.[0] ? [queryErrors?.[0]] : undefined}\n          fieldOptions={datasetConfig.getTableFieldOptions({organization}, tags)}\n          onChange={newFields => {\n            const fieldStrings = newFields.map(generateFieldAsString);\n            const splitFields = getColumnsAndAggregatesAsStrings(newFields);\n            const newQuery = cloneDeep(queries[0]);\n            newQuery.fields = fieldStrings;\n            newQuery.aggregates = splitFields.aggregates;\n            newQuery.columns = splitFields.columns;\n            newQuery.fieldAliases = splitFields.fieldAliases;\n            onQueryChange(0, newQuery);\n          }}\n        />\n      ) : (\n        <ReleaseColumnFields\n          displayType={displayType}\n          organization={organization}\n          widgetType={widgetType}\n          explodedFields={explodedFields}\n          queryErrors={queryErrors}\n          onYAxisOrColumnFieldChange={onYAxisOrColumnFieldChange}\n        />\n      )}\n    </BuildStep>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport RadioGroup, {RadioGroupProps} from 'sentry/components/forms/controls/radioGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DisplayType} from 'sentry/views/dashboardsV2/types';\n\nimport {DataSet} from '../utils';\n\nimport {BuildStep} from './buildStep';\n\nconst DATASET_CHOICES: [DataSet, string][] = [\n  [DataSet.EVENTS, t('Errors and Transactions')],\n  [DataSet.ISSUES, t('Issues (States, Assignment, Time, etc.)')],\n];\n\ninterface Props {\n  dataSet: DataSet;\n  displayType: DisplayType;\n  hasReleaseHealthFeature: boolean;\n  onChange: (dataSet: DataSet) => void;\n}\n\nexport function DataSetStep({\n  dataSet,\n  onChange,\n  hasReleaseHealthFeature,\n  displayType,\n}: Props) {\n  const disabledChoices: RadioGroupProps<string>['disabledChoices'] = [];\n\n  if (displayType !== DisplayType.TABLE) {\n    disabledChoices.push([\n      DataSet.ISSUES,\n      t('This dataset is restricted to tabular visualization.'),\n    ]);\n\n    if (displayType === DisplayType.WORLD_MAP) {\n      disabledChoices.push([\n        DataSet.RELEASES,\n        t(\n          'This dataset is restricted to big number, tabular and time series visualizations.'\n        ),\n      ]);\n    }\n  }\n\n  return (\n    <BuildStep\n      title={t('Choose your dataset')}\n      description={tct(\n        `This reflects the type of information you want to use. To learn more, [link: read the docs].`,\n        {\n          link: (\n            <ExternalLink href=\"https://docs.sentry.io/product/dashboards/custom-dashboards/#data-set-selection\" />\n          ),\n        }\n      )}\n    >\n      <DataSetChoices\n        label=\"dataSet\"\n        value={dataSet}\n        choices={\n          hasReleaseHealthFeature\n            ? [\n                ...DATASET_CHOICES,\n                [\n                  DataSet.RELEASES,\n                  <Fragment key=\"releases-dataset\">\n                    {t('Releases (sessions, crash rates)')} <FeatureBadge type=\"beta\" />\n                  </Fragment>,\n                ],\n              ]\n            : DATASET_CHOICES\n        }\n        disabledChoices={disabledChoices}\n        onChange={newDataSet => {\n          onChange(newDataSet as DataSet);\n        }}\n      />\n    </BuildStep>\n  );\n}\n\nconst DataSetChoices = styled(RadioGroup)`\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${space(2)};\n`;\n","import styled from '@emotion/styled';\n\nimport SearchBar, {SearchBarProps} from 'sentry/components/events/searchBar';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {Organization, SavedSearchType} from 'sentry/types';\nimport {WidgetQuery} from 'sentry/views/dashboardsV2/types';\nimport {\n  MAX_MENU_HEIGHT,\n  MAX_SEARCH_ITEMS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\n\ninterface Props {\n  onBlur: SearchBarProps['onBlur'];\n  onSearch: SearchBarProps['onSearch'];\n  organization: Organization;\n  projectIds: SearchBarProps['projectIds'];\n  query: WidgetQuery;\n}\n\nexport function EventsSearchBar({\n  projectIds,\n  onSearch,\n  onBlur,\n  organization,\n  query,\n}: Props) {\n  return (\n    <Search\n      searchSource=\"widget_builder\"\n      organization={organization}\n      projectIds={projectIds}\n      query={query.conditions}\n      fields={[]}\n      onSearch={onSearch}\n      onBlur={onBlur}\n      useFormWrapper={false}\n      maxQueryLength={MAX_QUERY_LENGTH}\n      maxSearchItems={MAX_SEARCH_ITEMS}\n      maxMenuHeight={MAX_MENU_HEIGHT}\n      savedSearchType={SavedSearchType.EVENT}\n    />\n  );\n}\n\nconst Search = styled(SearchBar)`\n  flex-grow: 1;\n`;\n","import {useCallback, useEffect, useRef} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport {IconAdd, IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {WidgetQuery, WidgetType} from 'sentry/views/dashboardsV2/types';\n\nimport {BuildStep} from '../buildStep';\n\nimport {EventsSearchBar} from './eventsSearchBar';\nimport {IssuesSearchBar} from './issuesSearchBar';\nimport {ReleaseSearchBar} from './releaseSearchBar';\n\ninterface Props {\n  canAddSearchConditions: boolean;\n  hideLegendAlias: boolean;\n  onAddSearchConditions: () => void;\n  onQueryChange: (queryIndex: number, newQuery: WidgetQuery) => void;\n  onQueryRemove: (queryIndex: number) => void;\n  organization: Organization;\n  queries: WidgetQuery[];\n  selection: PageFilters;\n  widgetType: WidgetType;\n  projectIds?: number[] | readonly number[];\n  queryErrors?: Record<string, any>[];\n}\n\nexport function FilterResultsStep({\n  canAddSearchConditions,\n  queries,\n  onQueryRemove,\n  onAddSearchConditions,\n  onQueryChange,\n  organization,\n  hideLegendAlias,\n  projectIds,\n  queryErrors,\n  widgetType,\n  selection,\n}: Props) {\n  const blurTimeoutRef = useRef<number | undefined>(undefined);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(blurTimeoutRef.current);\n    };\n  }, []);\n\n  const handleSearch = useCallback(\n    (queryIndex: number) => {\n      return (field: string) => {\n        // SearchBar will call handlers for both onSearch and onBlur\n        // when selecting a value from the autocomplete dropdown. This can\n        // cause state issues for the search bar in our use case. To prevent\n        // this, we set a timer in our onSearch handler to block our onBlur\n        // handler from firing if it is within 200ms, ie from clicking an\n        // autocomplete value.\n        window.clearTimeout(blurTimeoutRef.current);\n        blurTimeoutRef.current = window.setTimeout(() => {\n          blurTimeoutRef.current = undefined;\n        }, 200);\n\n        const newQuery: WidgetQuery = {\n          ...queries[queryIndex],\n          conditions: field,\n        };\n\n        onQueryChange(queryIndex, newQuery);\n      };\n    },\n    [queries]\n  );\n\n  const handleBlur = useCallback(\n    (queryIndex: number) => {\n      return (field: string) => {\n        if (!blurTimeoutRef.current) {\n          const newQuery: WidgetQuery = {\n            ...queries[queryIndex],\n            conditions: field,\n          };\n          onQueryChange(queryIndex, newQuery);\n        }\n      };\n    },\n    [queries]\n  );\n\n  return (\n    <BuildStep\n      title={t('Filter your results')}\n      description={\n        canAddSearchConditions\n          ? t(\n              'This is how you filter down your search. You can add multiple queries to compare data for each overlay.'\n            )\n          : t('This is how you filter down your search.')\n      }\n    >\n      <div>\n        {queries.map((query, queryIndex) => {\n          return (\n            <QueryField\n              key={queryIndex}\n              inline={false}\n              flexibleControlStateSize\n              stacked\n              error={queryErrors?.[queryIndex]?.conditions}\n            >\n              <SearchConditionsWrapper>\n                {widgetType === WidgetType.ISSUE ? (\n                  <IssuesSearchBar\n                    searchSource=\"widget_builder\"\n                    organization={organization}\n                    query={query}\n                    onBlur={handleBlur(queryIndex)}\n                    onSearch={handleSearch(queryIndex)}\n                    selection={selection}\n                  />\n                ) : widgetType === WidgetType.DISCOVER ? (\n                  <EventsSearchBar\n                    organization={organization}\n                    query={query}\n                    projectIds={projectIds}\n                    onBlur={handleBlur(queryIndex)}\n                    onSearch={handleSearch(queryIndex)}\n                  />\n                ) : (\n                  <ReleaseSearchBar\n                    orgSlug={organization.slug}\n                    query={query}\n                    projectIds={projectIds}\n                    onBlur={handleBlur(queryIndex)}\n                    onSearch={handleSearch(queryIndex)}\n                  />\n                )}\n                {!hideLegendAlias && (\n                  <LegendAliasInput\n                    type=\"text\"\n                    name=\"name\"\n                    value={query.name}\n                    placeholder={t('Legend Alias')}\n                    onChange={event => {\n                      const newQuery: WidgetQuery = {\n                        ...queries[queryIndex],\n                        name: event.target.value,\n                      };\n                      onQueryChange(queryIndex, newQuery);\n                    }}\n                  />\n                )}\n                {queries.length > 1 && (\n                  <Button\n                    size=\"zero\"\n                    borderless\n                    onClick={() => onQueryRemove(queryIndex)}\n                    icon={<IconDelete />}\n                    title={t('Remove query')}\n                    aria-label={t('Remove query')}\n                  />\n                )}\n              </SearchConditionsWrapper>\n            </QueryField>\n          );\n        })}\n        {canAddSearchConditions && (\n          <Button\n            size=\"small\"\n            icon={<IconAdd isCircled />}\n            onClick={onAddSearchConditions}\n          >\n            {t('Add Query')}\n          </Button>\n        )}\n      </div>\n    </BuildStep>\n  );\n}\n\nconst LegendAliasInput = styled(Input)`\n  width: 33%;\n`;\n\nconst QueryField = styled(Field)`\n  padding-bottom: ${space(1)};\n`;\n\nconst SearchConditionsWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n","import {Fragment} from 'react';\nimport {DraggableSyntheticListeners, UseDraggableArguments} from '@dnd-kit/core';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport {IconDelete, IconGrabbable} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {QueryField as TableQueryField} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\n\nexport interface QueryFieldProps {\n  fieldOptions: React.ComponentProps<typeof TableQueryField>['fieldOptions'];\n  onChange: (newValue: QueryFieldValue) => void;\n  value: QueryFieldValue;\n  attributes?: UseDraggableArguments['attributes'];\n  canDelete?: boolean;\n  canDrag?: boolean;\n  forwardRef?: React.Ref<HTMLDivElement>;\n  isDragging?: boolean;\n  listeners?: DraggableSyntheticListeners;\n  onDelete?: () => void;\n  style?: React.CSSProperties;\n}\n\nexport function QueryField({\n  onDelete,\n  onChange,\n  fieldOptions,\n  value,\n  forwardRef,\n  listeners,\n  attributes,\n  canDelete,\n  canDrag,\n  style,\n  isDragging,\n}: QueryFieldProps) {\n  return (\n    <QueryFieldWrapper ref={forwardRef} style={style}>\n      {isDragging ? null : (\n        <Fragment>\n          {canDrag && (\n            <DragAndReorderButton\n              {...listeners}\n              {...attributes}\n              aria-label={t('Drag to reorder')}\n              icon={<IconGrabbable size=\"xs\" />}\n              size=\"zero\"\n              borderless\n            />\n          )}\n          <TableQueryField\n            placeholder={t('Select group')}\n            fieldValue={value}\n            fieldOptions={fieldOptions}\n            onChange={onChange}\n            filterPrimaryOptions={option => option.value.kind !== FieldValueKind.FUNCTION}\n          />\n          {canDelete && (\n            <Button\n              size=\"zero\"\n              borderless\n              onClick={onDelete}\n              icon={<IconDelete />}\n              title={t('Remove group')}\n              aria-label={t('Remove group')}\n            />\n          )}\n        </Fragment>\n      )}\n    </QueryFieldWrapper>\n  );\n}\n\nconst DragAndReorderButton = styled(Button)`\n  height: 40px;\n`;\n\nconst QueryFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n","import {useSortable} from '@dnd-kit/sortable';\nimport {CSS} from '@dnd-kit/utilities';\nimport {useTheme} from '@emotion/react';\n\nimport {QueryField, QueryFieldProps} from './queryField';\n\ninterface SortableItemProps extends QueryFieldProps {\n  dragId: string;\n}\n\nexport function SortableQueryField({dragId, ...props}: SortableItemProps) {\n  const theme = useTheme();\n  const {listeners, setNodeRef, transform, transition, attributes, isDragging} =\n    useSortable({\n      id: dragId,\n      transition: null,\n    });\n\n  let style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    zIndex: 'auto',\n  } as React.CSSProperties;\n\n  if (isDragging) {\n    style = {\n      ...style,\n      zIndex: 100,\n      height: '40px',\n      border: `2px dashed ${theme.border}`,\n      borderRadius: theme.borderRadius,\n    };\n  }\n\n  return (\n    <QueryField\n      forwardRef={setNodeRef}\n      listeners={listeners}\n      attributes={attributes}\n      isDragging={isDragging}\n      style={style}\n      {...props}\n    />\n  );\n}\n","import React, {Fragment, useMemo, useState} from 'react';\nimport {closestCenter, DndContext, DragOverlay} from '@dnd-kit/core';\nimport {arrayMove, SortableContext, verticalListSortingStrategy} from '@dnd-kit/sortable';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Field from 'sentry/components/forms/field';\nimport {IconAdd} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {generateFieldAsString, QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport {QueryField} from './queryField';\nimport {SortableQueryField} from './sortableQueryField';\n\nconst GROUP_BY_LIMIT = 20;\nconst EMPTY_FIELD: QueryFieldValue = {kind: FieldValueKind.FIELD, field: ''};\n\ntype FieldOptions = ReturnType<typeof generateFieldOptions>;\ninterface Props {\n  fieldOptions: FieldOptions;\n  onChange: (fields: QueryFieldValue[]) => void;\n  columns?: QueryFieldValue[];\n}\n\nexport function GroupBySelector({fieldOptions, columns = [], onChange}: Props) {\n  const [activeId, setActiveId] = useState<string | null>(null);\n\n  function handleAdd() {\n    const newColumns =\n      columns.length === 0\n        ? [{...EMPTY_FIELD}, {...EMPTY_FIELD}]\n        : [...columns, {...EMPTY_FIELD}];\n    onChange(newColumns);\n  }\n\n  function handleSelect(value: QueryFieldValue, index?: number) {\n    const newColumns = [...columns];\n    if (columns.length === 0) {\n      newColumns.push(value);\n    } else if (defined(index)) {\n      newColumns[index] = value;\n    }\n    onChange(newColumns);\n  }\n\n  function handleRemove(index: number) {\n    const newColumns = [...columns];\n    newColumns.splice(index, 1);\n    onChange(newColumns);\n  }\n\n  const hasOnlySingleColumnWithValue =\n    columns.length === 1 &&\n    columns[0].kind === FieldValueKind.FIELD &&\n    columns[0]?.field !== '';\n\n  const canDrag = columns.length > 1;\n  const canDelete = canDrag || hasOnlySingleColumnWithValue;\n  const columnFieldsAsString = columns.map(generateFieldAsString);\n\n  const {filteredFieldOptions, columnsAsFieldOptions} = useMemo(() => {\n    return Object.keys(fieldOptions).reduce(\n      (acc, key) => {\n        const value = fieldOptions[key];\n        const optionInColumnsIndex = columnFieldsAsString.findIndex(\n          column => column === value.value.meta.name\n        );\n        if (optionInColumnsIndex === -1) {\n          acc.filteredFieldOptions[key] = value;\n          return acc;\n        }\n        acc.columnsAsFieldOptions[optionInColumnsIndex] = {[key]: value};\n        return acc;\n      },\n      {\n        filteredFieldOptions: {},\n        columnsAsFieldOptions: [],\n      } as {\n        columnsAsFieldOptions: FieldOptions[];\n        filteredFieldOptions: FieldOptions;\n      }\n    );\n  }, [fieldOptions, columns]);\n\n  const items = useMemo(() => {\n    return columns.reduce((acc, _column, index) => {\n      acc.push(String(index));\n      return acc;\n    }, [] as string[]);\n  }, [columns]);\n\n  return (\n    <Fragment>\n      <StyledField inline={false} flexibleControlStateSize stacked>\n        {columns.length === 0 ? (\n          <QueryField\n            value={EMPTY_FIELD}\n            fieldOptions={filteredFieldOptions}\n            onChange={value => handleSelect(value, 0)}\n            canDelete={canDelete}\n          />\n        ) : (\n          <DndContext\n            collisionDetection={closestCenter}\n            onDragStart={({active}) => {\n              setActiveId(active.id);\n            }}\n            onDragEnd={({over, active}) => {\n              setActiveId(null);\n\n              if (over) {\n                const getIndex = items.indexOf.bind(items);\n                const activeIndex = getIndex(active.id);\n                const overIndex = getIndex(over.id);\n\n                if (activeIndex !== overIndex) {\n                  onChange(arrayMove(columns, activeIndex, overIndex));\n                }\n              }\n            }}\n            onDragCancel={() => {\n              setActiveId(null);\n            }}\n          >\n            <SortableContext items={items} strategy={verticalListSortingStrategy}>\n              <SortableQueryFields>\n                {columns.map((column, index) => (\n                  <SortableQueryField\n                    key={items[index]}\n                    dragId={items[index]}\n                    value={column}\n                    fieldOptions={{\n                      ...filteredFieldOptions,\n                      ...columnsAsFieldOptions[index],\n                    }}\n                    onChange={value => handleSelect(value, index)}\n                    onDelete={() => handleRemove(index)}\n                    canDrag={canDrag}\n                    canDelete={canDelete}\n                  />\n                ))}\n              </SortableQueryFields>\n            </SortableContext>\n            <DragOverlay dropAnimation={null}>\n              {activeId ? (\n                <Ghost>\n                  <QueryField\n                    value={columns[Number(activeId)]}\n                    fieldOptions={{\n                      ...filteredFieldOptions,\n                      ...columnsAsFieldOptions[Number(activeId)],\n                    }}\n                    onChange={value => handleSelect(value, Number(activeId))}\n                    canDrag={canDrag}\n                    canDelete={canDelete}\n                  />\n                </Ghost>\n              ) : null}\n            </DragOverlay>\n          </DndContext>\n        )}\n      </StyledField>\n      {columns.length < GROUP_BY_LIMIT && (\n        <AddGroupButton size=\"small\" icon={<IconAdd isCircled />} onClick={handleAdd}>\n          {t('Add Group')}\n        </AddGroupButton>\n      )}\n    </Fragment>\n  );\n}\n\nconst StyledField = styled(Field)`\n  padding-bottom: ${space(1)};\n`;\n\nconst AddGroupButton = styled(Button)`\n  width: min-content;\n`;\n\nconst SortableQueryFields = styled('div')`\n  display: grid;\n  grid-auto-flow: row;\n  gap: ${space(1)};\n`;\n\nconst Ghost = styled('div')`\n  position: absolute;\n  background: ${p => p.theme.background};\n  padding: ${space(0.5)};\n  border-radius: ${p => p.theme.borderRadius};\n  box-shadow: 0 0 15px rgba(0, 0, 0, 0.15);\n  opacity: 0.8;\n  cursor: grabbing;\n  padding-right: ${space(2)};\n  width: 100%;\n\n  button {\n    cursor: grabbing;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    width: 710px;\n  }\n`;\n","import {t} from 'sentry/locale';\nimport {Organization, SessionsMeta, TagCollection} from 'sentry/types';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\n\nimport {\n  generateReleaseWidgetFieldOptions,\n  SESSIONS_TAGS,\n} from '../../releaseWidget/fields';\nimport {DataSet, getAmendedFieldOptions} from '../../utils';\nimport {BuildStep} from '../buildStep';\n\nimport {GroupBySelector} from './groupBySelector';\n\ninterface Props {\n  columns: QueryFieldValue[];\n  dataSet: DataSet;\n  onGroupByChange: (newFields: QueryFieldValue[]) => void;\n  organization: Organization;\n  tags: TagCollection;\n}\n\nexport function GroupByStep({\n  dataSet,\n  columns,\n  onGroupByChange,\n  organization,\n  tags,\n}: Props) {\n  return (\n    <BuildStep\n      title={t('Group your results')}\n      description={t('This is how you can group your data result by field or tag.')}\n    >\n      {dataSet === DataSet.RELEASES ? (\n        <GroupBySelector\n          columns={columns}\n          fieldOptions={generateReleaseWidgetFieldOptions(\n            [] as SessionsMeta[],\n            SESSIONS_TAGS\n          )}\n          onChange={onGroupByChange}\n        />\n      ) : (\n        <Measurements>\n          {({measurements}) => (\n            <GroupBySelector\n              columns={columns}\n              fieldOptions={getAmendedFieldOptions({\n                measurements,\n                tags,\n                organization,\n              })}\n              onChange={onGroupByChange}\n            />\n          )}\n        </Measurements>\n      )}\n    </BuildStep>\n  );\n}\n","import React, {useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\nimport trimStart from 'lodash/trimStart';\nimport uniqBy from 'lodash/uniqBy';\n\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {SelectValue, TagCollection} from 'sentry/types';\nimport {\n  EQUATION_PREFIX,\n  explodeField,\n  generateFieldAsString,\n  getEquation,\n  isEquation,\n  isEquationAlias,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {DisplayType, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {\n  getAmendedFieldOptions,\n  SortDirection,\n  sortDirections,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport ArithmeticInput from 'sentry/views/eventsV2/table/arithmeticInput';\nimport {QueryField} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\n\nimport {\n  generateReleaseWidgetFieldOptions,\n  SESSIONS_FIELDS,\n  SESSIONS_TAGS,\n} from '../../releaseWidget/fields';\n\nimport {CUSTOM_EQUATION_VALUE} from '.';\n\ninterface Values {\n  sortBy: string;\n  sortDirection: SortDirection;\n}\n\ninterface Props {\n  displayType: DisplayType;\n  filterPrimaryOptions: React.ComponentProps<typeof QueryField>['filterPrimaryOptions'];\n  onChange: (values: Values) => void;\n  sortByOptions: SelectValue<string>[];\n  tags: TagCollection;\n  values: Values;\n  widgetType: WidgetType;\n  disabledReason?: string;\n  disabledSort?: boolean;\n  disabledSortDirection?: boolean;\n  hasGroupBy?: boolean;\n}\n\nexport function SortBySelectors({\n  values,\n  sortByOptions,\n  widgetType,\n  onChange,\n  disabledReason,\n  disabledSort,\n  disabledSortDirection,\n  hasGroupBy,\n  tags,\n  filterPrimaryOptions,\n  displayType,\n}: Props) {\n  const organization = useOrganization();\n  const [showCustomEquation, setShowCustomEquation] = useState(false);\n  const [customEquation, setCustomEquation] = useState<Values>({\n    sortBy: `${EQUATION_PREFIX}`,\n    sortDirection: values.sortDirection,\n  });\n  useEffect(() => {\n    const isSortingByEquation = isEquation(trimStart(values.sortBy, '-'));\n    if (isSortingByEquation) {\n      setCustomEquation({\n        sortBy: trimStart(values.sortBy, '-'),\n        sortDirection: values.sortDirection,\n      });\n    }\n    setShowCustomEquation(isSortingByEquation);\n  }, [values.sortBy, values.sortDirection]);\n\n  function generateEquationOptions(options: Props['sortByOptions']) {\n    return options.reduce((acc, option) => {\n      if (option.value.startsWith('equation')) {\n        acc[`equation:${option.value}`] = {\n          label: option.label,\n          value: {\n            kind: FieldValueKind.EQUATION,\n            meta: {\n              name: option.value,\n            },\n          },\n        };\n      }\n      return acc;\n    }, {});\n  }\n\n  function getSortByField() {\n    if (\n      widgetType === WidgetType.DISCOVER &&\n      ![DisplayType.TABLE, DisplayType.TOP_N].includes(displayType)\n    ) {\n      return (\n        <Measurements>\n          {({measurements}) => (\n            <QueryField\n              fieldValue={\n                showCustomEquation\n                  ? explodeField({field: CUSTOM_EQUATION_VALUE})\n                  : explodeField({field: values.sortBy})\n              }\n              fieldOptions={{\n                ...(hasGroupBy\n                  ? {\n                      [`field:${CUSTOM_EQUATION_VALUE}`]: {\n                        label: 'Custom Equation',\n                        value: {\n                          kind: FieldValueKind.EQUATION,\n                          meta: {name: CUSTOM_EQUATION_VALUE},\n                        },\n                      },\n                    }\n                  : {}),\n                ...generateEquationOptions(sortByOptions),\n                ...getAmendedFieldOptions({measurements, organization, tags}),\n              }}\n              onChange={value => {\n                if (value.alias && isEquationAlias(value.alias)) {\n                  onChange({\n                    sortBy: value.alias,\n                    sortDirection: values.sortDirection,\n                  });\n                  return;\n                }\n\n                const parsedValue = generateFieldAsString(value);\n                const isSortingByCustomEquation = isEquation(parsedValue);\n                setShowCustomEquation(isSortingByCustomEquation);\n                if (isSortingByCustomEquation) {\n                  onChange(customEquation);\n                  return;\n                }\n\n                onChange({\n                  sortBy: parsedValue,\n                  sortDirection: values.sortDirection,\n                });\n              }}\n              filterPrimaryOptions={filterPrimaryOptions}\n            />\n          )}\n        </Measurements>\n      );\n    }\n    if (\n      widgetType === WidgetType.RELEASE &&\n      ![DisplayType.TABLE, DisplayType.TOP_N].includes(displayType)\n    ) {\n      return (\n        <Tooltip\n          title={disabledReason}\n          disabled={!disabledSort || (disabledSortDirection && disabledSort)}\n        >\n          <QueryField\n            disabled={disabledSort}\n            fieldValue={explodeField({field: values.sortBy})}\n            fieldOptions={generateReleaseWidgetFieldOptions(\n              Object.values(SESSIONS_FIELDS),\n              SESSIONS_TAGS\n            )}\n            onChange={value => {\n              const parsedValue = generateFieldAsString(value);\n              onChange({\n                sortBy: parsedValue,\n                sortDirection: values.sortDirection,\n              });\n            }}\n            filterPrimaryOptions={filterPrimaryOptions}\n          />\n        </Tooltip>\n      );\n    }\n    return (\n      <Tooltip\n        title={disabledReason}\n        disabled={!disabledSort || (disabledSortDirection && disabledSort)}\n      >\n        <SelectControl\n          name=\"sortBy\"\n          aria-label=\"Sort by\"\n          menuPlacement=\"auto\"\n          disabled={disabledSort}\n          placeholder={`${t('Select a column')}\\u{2026}`}\n          value={values.sortBy}\n          options={uniqBy(sortByOptions, ({value}) => value)}\n          onChange={(option: SelectValue<string>) => {\n            onChange({\n              sortBy: option.value,\n              sortDirection: values.sortDirection,\n            });\n          }}\n        />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <Tooltip title={disabledReason} disabled={!(disabledSortDirection && disabledSort)}>\n      <Wrapper>\n        <Tooltip\n          title={disabledReason}\n          disabled={!disabledSortDirection || (disabledSortDirection && disabledSort)}\n        >\n          <SelectControl\n            name=\"sortDirection\"\n            aria-label=\"Sort direction\"\n            menuPlacement=\"auto\"\n            disabled={disabledSortDirection}\n            options={Object.keys(sortDirections).map(value => ({\n              label: sortDirections[value],\n              value,\n            }))}\n            value={values.sortDirection}\n            onChange={(option: SelectValue<SortDirection>) => {\n              onChange({\n                sortBy: values.sortBy,\n                sortDirection: option.value,\n              });\n            }}\n          />\n        </Tooltip>\n        {getSortByField()}\n        {showCustomEquation && (\n          <ArithmeticInputWrapper>\n            <ArithmeticInput\n              name=\"arithmetic\"\n              type=\"text\"\n              required\n              placeholder={t('Enter Equation')}\n              value={getEquation(customEquation.sortBy)}\n              onUpdate={value => {\n                const newValue = {\n                  sortBy: `${EQUATION_PREFIX}${value}`,\n                  sortDirection: values.sortDirection,\n                };\n                onChange(newValue);\n                setCustomEquation(newValue);\n              }}\n              hideFieldOptions\n            />\n          </ArithmeticInputWrapper>\n        )}\n      </Wrapper>\n    </Tooltip>\n  );\n}\n\nconst Wrapper = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: 200px 1fr;\n  }\n`;\n\nconst ArithmeticInputWrapper = styled('div')`\n  grid-column: 1/-1;\n`;\n","import {useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport trimStart from 'lodash/trimStart';\n\nimport {generateOrderOptions} from 'sentry/components/dashboards/widgetQueriesForm';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, SelectValue, TagCollection} from 'sentry/types';\nimport {DisplayType, WidgetQuery, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {generateIssueWidgetOrderOptions} from 'sentry/views/dashboardsV2/widgetBuilder/issueWidget/utils';\nimport {\n  DataSet,\n  filterPrimaryOptions as filterReleaseSortOptions,\n  getResultsLimit,\n  SortDirection,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport {BuildStep} from '../buildStep';\n\nimport {SortBySelectors} from './sortBySelectors';\n\nexport const CUSTOM_EQUATION_VALUE = 'custom-equation';\n\ninterface Props {\n  dataSet: DataSet;\n  displayType: DisplayType;\n  onLimitChange: (newLimit: number) => void;\n  onSortByChange: (newSortBy: string) => void;\n  organization: Organization;\n  queries: WidgetQuery[];\n  tags: TagCollection;\n  widgetBuilderNewDesign: boolean;\n  widgetType: WidgetType;\n  error?: string;\n  limit?: number;\n}\n\nexport function SortByStep({\n  displayType,\n  onSortByChange,\n  queries,\n  dataSet,\n  widgetBuilderNewDesign,\n  widgetType,\n  organization,\n  error,\n  limit,\n  onLimitChange,\n  tags,\n}: Props) {\n  const fields = queries[0].columns;\n\n  let disabledSort = false;\n  let disabledSortDirection = false;\n  let disabledReason: string | undefined = undefined;\n\n  if (widgetType === WidgetType.RELEASE && fields.includes('session.status')) {\n    disabledSort = true;\n    disabledSortDirection = true;\n    disabledReason = t('Sorting currently not supported with session.status');\n  }\n\n  if (widgetType === WidgetType.ISSUE) {\n    disabledSortDirection = true;\n    disabledReason = t('Issues dataset does not yet support descending order');\n  }\n\n  const orderBy = queries[0].orderby;\n  const strippedOrderBy = trimStart(orderBy, '-');\n  const maxLimit = getResultsLimit(queries.length, queries[0].aggregates.length);\n\n  const isTimeseriesChart = [\n    DisplayType.LINE,\n    DisplayType.BAR,\n    DisplayType.AREA,\n  ].includes(displayType);\n\n  useEffect(() => {\n    if (!limit) {\n      return;\n    }\n    if (limit > maxLimit) {\n      onLimitChange(maxLimit);\n    }\n  }, [limit, maxLimit]);\n\n  const columnSet = new Set(queries[0].columns);\n  const filterDiscoverOptions = option => {\n    if (\n      option.value.kind === FieldValueKind.FUNCTION ||\n      option.value.kind === FieldValueKind.EQUATION\n    ) {\n      return true;\n    }\n\n    return (\n      columnSet.has(option.value.meta.name) ||\n      option.value.meta.name === CUSTOM_EQUATION_VALUE\n    );\n  };\n\n  const filterReleaseOptions = option => {\n    if (['count_healthy', 'count_errored'].includes(option.value.meta.name)) {\n      return false;\n    }\n    if (option.value.kind === FieldValueKind.TAG) {\n      // Only allow sorting by release tag\n      return (\n        columnSet.has(option.value.meta.name) && option.value.meta.name === 'release'\n      );\n    }\n    return filterReleaseSortOptions({\n      option,\n      widgetType,\n      displayType: DisplayType.TABLE,\n    });\n  };\n\n  if (widgetBuilderNewDesign) {\n    return (\n      <BuildStep\n        title={\n          displayType === DisplayType.TABLE\n            ? t('Sort by a column')\n            : t('Sort by a y-axis')\n        }\n        description={\n          displayType === DisplayType.TABLE\n            ? t(\"Choose one of the columns you've created to sort by.\")\n            : t(\"Choose one of the y-axis you've created to sort by.\")\n        }\n      >\n        <Field inline={false} error={error} flexibleControlStateSize stacked>\n          {[DisplayType.AREA, DisplayType.BAR, DisplayType.LINE].includes(displayType) &&\n            limit && (\n              <ResultsLimitSelector\n                name=\"resultsLimit\"\n                menuPlacement=\"auto\"\n                options={[...Array(maxLimit).keys()].map(resultLimit => {\n                  const value = resultLimit + 1;\n                  return {\n                    label: tn('Limit to %s result', 'Limit to %s results', value),\n                    value,\n                  };\n                })}\n                value={limit}\n                onChange={(option: SelectValue<number>) => {\n                  onLimitChange(option.value);\n                }}\n              />\n            )}\n          <SortBySelectors\n            displayType={displayType}\n            widgetType={widgetType}\n            hasGroupBy={isTimeseriesChart && !!queries[0].columns.length}\n            disabledReason={disabledReason}\n            disabledSort={disabledSort}\n            disabledSortDirection={disabledSortDirection}\n            sortByOptions={\n              dataSet === DataSet.ISSUES\n                ? generateIssueWidgetOrderOptions(\n                    organization.features.includes('issue-list-trend-sort')\n                  )\n                : generateOrderOptions({\n                    widgetType,\n                    widgetBuilderNewDesign: true,\n                    columns: queries[0].columns,\n                    aggregates: queries[0].aggregates,\n                  })\n            }\n            values={{\n              sortDirection:\n                orderBy[0] === '-'\n                  ? SortDirection.HIGH_TO_LOW\n                  : SortDirection.LOW_TO_HIGH,\n              sortBy: strippedOrderBy,\n            }}\n            onChange={({sortDirection, sortBy}) => {\n              const newOrderBy =\n                sortDirection === SortDirection.HIGH_TO_LOW ? `-${sortBy}` : sortBy;\n              onSortByChange(newOrderBy);\n            }}\n            tags={tags}\n            filterPrimaryOptions={\n              dataSet === DataSet.RELEASES ? filterReleaseOptions : filterDiscoverOptions\n            }\n          />\n        </Field>\n      </BuildStep>\n    );\n  }\n\n  return (\n    <BuildStep\n      title={t('Sort by a column')}\n      description={t(\"Choose one of the columns you've created to sort by.\")}\n    >\n      <Field inline={false} error={error} flexibleControlStateSize stacked>\n        <SelectControl\n          menuPlacement=\"auto\"\n          value={\n            dataSet === DataSet.EVENTS\n              ? queries[0].orderby\n              : queries[0].orderby || IssueSortOptions.DATE\n          }\n          name=\"orderby\"\n          options={\n            dataSet === DataSet.EVENTS\n              ? generateOrderOptions({\n                  widgetType,\n                  columns: queries[0].columns,\n                  aggregates: queries[0].aggregates,\n                })\n              : generateIssueWidgetOrderOptions(\n                  organization.features.includes('issue-list-trend-sort')\n                )\n          }\n          onChange={(option: SelectValue<string>) => {\n            onSortByChange(option.value);\n          }}\n        />\n      </Field>\n    </BuildStep>\n  );\n}\n\nconst ResultsLimitSelector = styled(SelectControl)`\n  margin-bottom: ${space(1)};\n`;\n","import {CSSProperties, useCallback, useEffect, useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\n\nimport {TableCell} from 'sentry/components/charts/simpleTableChart';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport {PanelAlert} from 'sentry/components/panels';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, SelectValue} from 'sentry/types';\nimport usePrevious from 'sentry/utils/usePrevious';\nimport {DisplayType, Widget} from 'sentry/views/dashboardsV2/types';\n\nimport WidgetCard, {WidgetCardPanel} from '../../widgetCard';\nimport {displayTypes} from '../utils';\n\nimport {BuildStep} from './buildStep';\n\ninterface Props {\n  displayType: DisplayType;\n  onChange: (displayType: DisplayType) => void;\n  organization: Organization;\n  pageFilters: PageFilters;\n  widget: Widget;\n  error?: string;\n}\n\nexport function VisualizationStep({\n  organization,\n  pageFilters,\n  displayType,\n  error,\n  onChange,\n  widget,\n}: Props) {\n  const [debouncedWidget, setDebouncedWidget] = useState(widget);\n\n  const previousWidget = usePrevious(widget);\n\n  // Disabling for now because we use debounce to avoid excessively hitting\n  // our endpoints, but useCallback wants an inline function and not one\n  // returned from debounce\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const debounceWidget = useCallback(\n    debounce((value: Widget, shouldCancelUpdates: boolean) => {\n      if (shouldCancelUpdates) {\n        return;\n      }\n      setDebouncedWidget(value);\n    }, DEFAULT_DEBOUNCE_DURATION),\n    []\n  );\n\n  useEffect(() => {\n    let shouldCancelUpdates = false;\n\n    if (!isEqual(previousWidget, widget)) {\n      debounceWidget(widget, shouldCancelUpdates);\n    }\n\n    return () => {\n      shouldCancelUpdates = true;\n    };\n  }, [widget, previousWidget, debounceWidget]);\n\n  const displayOptions = Object.keys(displayTypes).map(value => ({\n    label: displayTypes[value],\n    value,\n  }));\n\n  return (\n    <BuildStep\n      title={t('Choose your visualization')}\n      description={t(\n        'This is a preview of how your widget will appear in the dashboard.'\n      )}\n    >\n      <Field error={error} inline={false} flexibleControlStateSize stacked>\n        <SelectControl\n          name=\"displayType\"\n          options={displayOptions}\n          value={displayType}\n          onChange={(option: SelectValue<DisplayType>) => {\n            onChange(option.value);\n          }}\n          styles={{\n            singleValue: (provided: CSSProperties) => ({\n              ...provided,\n              width: `calc(100% - ${space(1)})`,\n            }),\n          }}\n        />\n      </Field>\n      <VisualizationWrapper displayType={displayType}>\n        <WidgetCard\n          organization={organization}\n          selection={pageFilters}\n          widget={debouncedWidget}\n          isEditing={false}\n          widgetLimitReached={false}\n          renderErrorMessage={errorMessage =>\n            typeof errorMessage === 'string' && (\n              <PanelAlert type=\"error\">{errorMessage}</PanelAlert>\n            )\n          }\n          isSorting={false}\n          currentWidgetDragging={false}\n          noLazyLoad\n          showStoredAlert\n        />\n      </VisualizationWrapper>\n    </BuildStep>\n  );\n}\n\nconst VisualizationWrapper = styled('div')<{displayType: DisplayType}>`\n  padding-right: ${space(2)};\n  ${WidgetCardPanel} {\n    height: initial;\n  }\n  ${p =>\n    p.displayType === DisplayType.TABLE &&\n    css`\n      overflow: hidden;\n      ${TableCell} {\n        /* 24px ActorContainer height + 16px top and bottom padding + 1px border = 41px */\n        height: 41px;\n      }\n      ${WidgetCardPanel} {\n        /* total size of a table, if it would display 5 rows of content */\n        height: 301px;\n      }\n    `};\n`;\n","import {MouseEventHandler} from 'react';\n\nimport Button from 'sentry/components/button';\nimport {IconAdd} from 'sentry/icons';\n\ninterface Props {\n  onAdd: MouseEventHandler<Element>;\n  title: string;\n}\n\nexport function AddButton({title, onAdd}: Props) {\n  return (\n    <Button size=\"small\" onClick={onAdd} icon={<IconAdd isCircled />}>\n      {title}\n    </Button>\n  );\n}\n","import {MouseEventHandler} from 'react';\n\nimport Button from 'sentry/components/button';\nimport {IconDelete} from 'sentry/icons';\nimport {t} from 'sentry/locale';\n\ninterface Props {\n  onDelete: MouseEventHandler<Element>;\n}\n\nexport function DeleteButton({onDelete}: Props) {\n  return (\n    <Button\n      size=\"zero\"\n      borderless\n      onClick={onDelete}\n      icon={<IconDelete />}\n      title={t('Remove this Y-Axis')}\n      aria-label={t('Remove this Y-Axis')}\n    />\n  );\n}\n","import styled from '@emotion/styled';\n\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Field from 'sentry/components/forms/field';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  aggregateFunctionOutputType,\n  isLegalYAxisType,\n  QueryFieldValue,\n} from 'sentry/utils/discover/fields';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {DisplayType, Widget, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {\n  doNotValidateYAxis,\n  filterPrimaryOptions,\n} from 'sentry/views/dashboardsV2/widgetBuilder/utils';\nimport {FieldValueOption, QueryField} from 'sentry/views/eventsV2/table/queryField';\nimport {FieldValueKind} from 'sentry/views/eventsV2/table/types';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport {AddButton} from './addButton';\nimport {DeleteButton} from './deleteButton';\n\ninterface Props {\n  aggregates: QueryFieldValue[];\n  displayType: DisplayType;\n  fieldOptions: ReturnType<typeof generateFieldOptions>;\n  /**\n   * Fired when aggregates are added/removed/modified/reordered.\n   */\n  onChange: (aggregates: QueryFieldValue[]) => void;\n  widgetType: Widget['widgetType'];\n  errors?: Record<string, any>;\n  noFieldsMessage?: string;\n}\n\nexport function YAxisSelector({\n  displayType,\n  widgetType,\n  aggregates,\n  fieldOptions,\n  onChange,\n  errors,\n  noFieldsMessage,\n}: Props) {\n  const organization = useOrganization();\n  const isReleaseWidget = widgetType === WidgetType.RELEASE;\n\n  function handleAddOverlay(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newAggregates = [\n      ...aggregates,\n      {kind: FieldValueKind.FIELD, field: ''} as QueryFieldValue,\n    ];\n    onChange(newAggregates);\n  }\n\n  function handleAddEquation(event: React.MouseEvent) {\n    event.preventDefault();\n\n    const newAggregates = [\n      ...aggregates,\n      {kind: FieldValueKind.EQUATION, field: ''} as QueryFieldValue,\n    ];\n    onChange(newAggregates);\n  }\n\n  function handleRemoveQueryField(event: React.MouseEvent, fieldIndex: number) {\n    event.preventDefault();\n\n    const newAggregates = [...aggregates];\n    newAggregates.splice(fieldIndex, 1);\n    onChange(newAggregates);\n  }\n\n  function handleChangeQueryField(value: QueryFieldValue, fieldIndex: number) {\n    const newAggregates = [...aggregates];\n    newAggregates[fieldIndex] = value;\n    onChange(newAggregates);\n  }\n\n  function handleTopNChangeField(value: QueryFieldValue) {\n    // Top N widgets can only ever change a single y-axis\n    onChange([value]);\n  }\n\n  function filterAggregateParameters(fieldValue: QueryFieldValue) {\n    return (option: FieldValueOption) => {\n      if (isReleaseWidget) {\n        if (option.value.kind === FieldValueKind.METRICS) {\n          return true;\n        }\n        return false;\n      }\n\n      // Only validate function parameters for timeseries widgets and\n      // world map widgets.\n      if (doNotValidateYAxis(displayType)) {\n        return true;\n      }\n\n      if (fieldValue.kind !== FieldValueKind.FUNCTION) {\n        return true;\n      }\n\n      const functionName = fieldValue.function[0];\n      const primaryOutput = aggregateFunctionOutputType(\n        functionName as string,\n        option.value.meta.name\n      );\n      if (primaryOutput) {\n        return isLegalYAxisType(primaryOutput);\n      }\n\n      if (\n        option.value.kind === FieldValueKind.FUNCTION ||\n        option.value.kind === FieldValueKind.EQUATION\n      ) {\n        // Functions and equations are not legal options as an aggregate/function parameter.\n        return false;\n      }\n\n      return isLegalYAxisType(option.value.meta.dataType);\n    };\n  }\n\n  const fieldError = errors?.find(error => error?.aggregates)?.aggregates;\n\n  if (displayType === DisplayType.TOP_N) {\n    const fieldValue = aggregates[aggregates.length - 1];\n    return (\n      <Field inline={false} flexibleControlStateSize error={fieldError} stacked>\n        <QueryFieldWrapper>\n          <QueryField\n            fieldValue={fieldValue}\n            fieldOptions={generateFieldOptions({organization})}\n            onChange={handleTopNChangeField}\n            filterPrimaryOptions={option =>\n              filterPrimaryOptions({\n                option,\n                widgetType,\n                displayType,\n              })\n            }\n            filterAggregateParameters={filterAggregateParameters(fieldValue)}\n          />\n        </QueryFieldWrapper>\n      </Field>\n    );\n  }\n\n  const canDelete = aggregates.length > 1;\n\n  const hideAddYAxisButtons =\n    ([DisplayType.WORLD_MAP, DisplayType.BIG_NUMBER].includes(displayType) &&\n      aggregates.length === 1) ||\n    ([DisplayType.LINE, DisplayType.AREA, DisplayType.BAR].includes(displayType) &&\n      aggregates.length === 3);\n\n  return (\n    <Field inline={false} flexibleControlStateSize error={fieldError} stacked>\n      {aggregates.map((fieldValue, i) => (\n        <QueryFieldWrapper key={`${fieldValue}:${i}`}>\n          <QueryField\n            fieldValue={fieldValue}\n            fieldOptions={fieldOptions}\n            onChange={value => handleChangeQueryField(value, i)}\n            filterPrimaryOptions={option =>\n              filterPrimaryOptions({\n                option,\n                widgetType,\n                displayType,\n              })\n            }\n            filterAggregateParameters={filterAggregateParameters(fieldValue)}\n            otherColumns={aggregates}\n            noFieldsMessage={noFieldsMessage}\n          />\n          {aggregates.length > 1 &&\n            (canDelete || fieldValue.kind === FieldValueKind.EQUATION) && (\n              <DeleteButton onDelete={event => handleRemoveQueryField(event, i)} />\n            )}\n        </QueryFieldWrapper>\n      ))}\n      {!hideAddYAxisButtons && (\n        <Actions gap={1}>\n          <AddButton title={t('Add Overlay')} onAdd={handleAddOverlay} />\n          {!isReleaseWidget && (\n            <AddButton title={t('Add an Equation')} onAdd={handleAddEquation} />\n          )}\n        </Actions>\n      )}\n    </Field>\n  );\n}\n\nconst QueryFieldWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  :not(:last-child) {\n    margin-bottom: ${space(1)};\n  }\n\n  > * + * {\n    margin-left: ${space(1)};\n  }\n`;\n\nconst Actions = styled(ButtonBar)`\n  justify-content: flex-start;\n`;\n","import {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport {DisplayType, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {\n  generateReleaseWidgetFieldOptions,\n  SESSIONS_FIELDS,\n  SESSIONS_TAGS,\n} from 'sentry/views/dashboardsV2/widgetBuilder/releaseWidget/fields';\n\nimport {YAxisSelector} from './yAxisSelector';\n\ninterface Props {\n  aggregates: QueryFieldValue[];\n  displayType: DisplayType;\n  onChange: (newFields: QueryFieldValue[]) => void;\n  widgetType: WidgetType;\n  errors?: Record<string, any>[];\n}\n\nexport function ReleaseYAxisSelector({\n  aggregates,\n  displayType,\n  widgetType,\n  onChange,\n  errors,\n}: Props) {\n  return (\n    <YAxisSelector\n      widgetType={widgetType}\n      displayType={displayType}\n      aggregates={aggregates}\n      onChange={onChange}\n      errors={errors}\n      fieldOptions={generateReleaseWidgetFieldOptions(\n        Object.values(SESSIONS_FIELDS),\n        SESSIONS_TAGS\n      )}\n    />\n  );\n}\n","import {t} from 'sentry/locale';\nimport {Organization, TagCollection} from 'sentry/types';\nimport {QueryFieldValue} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport {DisplayType, WidgetType} from 'sentry/views/dashboardsV2/types';\n\nimport {DataSet, getAmendedFieldOptions} from '../../utils';\nimport {BuildStep} from '../buildStep';\n\nimport {ReleaseYAxisSelector} from './releaseYAxisSelector';\nimport {YAxisSelector} from './yAxisSelector';\n\ninterface Props {\n  aggregates: QueryFieldValue[];\n  dataSet: DataSet;\n  displayType: DisplayType;\n  onYAxisChange: (newFields: QueryFieldValue[]) => void;\n  organization: Organization;\n  tags: TagCollection;\n  widgetType: WidgetType;\n  queryErrors?: Record<string, any>[];\n}\n\nexport function YAxisStep({\n  displayType,\n  dataSet,\n  queryErrors,\n  aggregates,\n  onYAxisChange,\n  organization,\n  tags,\n  widgetType,\n}: Props) {\n  return (\n    <BuildStep\n      title={\n        displayType === DisplayType.BIG_NUMBER\n          ? t('Choose what to plot')\n          : t('Choose what to plot in the y-axis')\n      }\n      description={\n        [DisplayType.AREA, DisplayType.BAR, DisplayType.LINE].includes(displayType)\n          ? t(\n              \"This is the data you'd be visualizing in the display. If the overlay units conflict, the charts will always base it off of the first line.\"\n            )\n          : t(\"This is the data you'd be visualizing in the display.\")\n      }\n    >\n      {dataSet === DataSet.RELEASES ? (\n        <ReleaseYAxisSelector\n          widgetType={widgetType}\n          displayType={displayType}\n          aggregates={aggregates}\n          onChange={onYAxisChange}\n          errors={queryErrors}\n        />\n      ) : (\n        <Measurements>\n          {({measurements}) => (\n            <YAxisSelector\n              widgetType={widgetType}\n              displayType={displayType}\n              aggregates={aggregates}\n              fieldOptions={getAmendedFieldOptions({measurements, organization, tags})}\n              onChange={onYAxisChange}\n              errors={queryErrors}\n            />\n          )}\n        </Measurements>\n      )}\n    </BuildStep>\n  );\n}\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Confirm from 'sentry/components/confirm';\nimport type {LinkProps} from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ninterface Props {\n  goBackLocation: LinkProps['to'];\n  invalidForm: boolean;\n  onSave: (event: React.MouseEvent) => void;\n  isEditing?: boolean;\n  onDelete?: () => void;\n}\n\nexport function Footer({\n  goBackLocation,\n  onSave,\n  onDelete,\n  invalidForm,\n  isEditing,\n}: Props) {\n  return (\n    <Wrapper>\n      <Actions gap={1}>\n        <Button to={goBackLocation}>{t('Cancel')}</Button>\n        {isEditing && onDelete && (\n          <Confirm\n            priority=\"danger\"\n            message={t('Are you sure you want to delete this widget?')}\n            onConfirm={onDelete}\n          >\n            <Button priority=\"danger\">{t('Delete')}</Button>\n          </Confirm>\n        )}\n        <Button\n          priority=\"primary\"\n          onClick={onSave}\n          disabled={invalidForm}\n          title={invalidForm ? t('Required fields must be filled out') : undefined}\n        >\n          {isEditing ? t('Update Widget') : t('Add Widget')}\n        </Button>\n      </Actions>\n    </Wrapper>\n  );\n}\n\nconst Actions = styled(ButtonBar)`\n  justify-content: flex-end;\n  max-width: 1000px;\n  padding: ${space(4)} ${space(2)};\n\n  /* to match Layout.Main padding + Field padding-right */\n  padding-right: calc(${space(2)} + ${space(2)});\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    padding: ${space(4)};\n\n    /* to match Layout.Main padding + Field padding-right */\n    padding-right: calc(${space(4)} + ${space(2)});\n  }\n`;\n\nconst Wrapper = styled('div')`\n  background: ${p => p.theme.background};\n  border-top: 1px solid ${p => p.theme.gray200};\n`;\n","import Breadcrumbs from 'sentry/components/breadcrumbs';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport EditableText from 'sentry/components/editableText';\nimport {FeatureFeedback} from 'sentry/components/featureFeedback';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport type {LinkProps} from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\n\nimport {DashboardDetails} from '../types';\n\ninterface Props {\n  dashboardTitle: DashboardDetails['title'];\n  goBackLocation: LinkProps['to'];\n  onChangeTitle: (title: string) => void;\n  orgSlug: string;\n  title: string;\n}\n\nexport function Header({\n  title,\n  orgSlug,\n  goBackLocation,\n  dashboardTitle,\n  onChangeTitle,\n}: Props) {\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <Breadcrumbs\n          crumbs={[\n            {\n              to: `/organizations/${orgSlug}/dashboards/`,\n              label: t('Dashboards'),\n            },\n            {\n              to: goBackLocation,\n              label: dashboardTitle,\n            },\n            {label: t('Widget Builder')},\n          ]}\n        />\n        <Layout.Title>\n          <EditableText\n            aria-label={t('Widget title')}\n            value={title}\n            onChange={onChangeTitle}\n            errorMessage={t('Widget title is required')}\n            maxLength={255}\n          />\n        </Layout.Title>\n      </Layout.HeaderContent>\n\n      <Layout.HeaderActions>\n        <ButtonBar gap={1}>\n          <FeatureFeedback featureName=\"widget-builder\" />\n          <Button\n            external\n            href=\"https://docs.sentry.io/product/dashboards/custom-dashboards/#widget-builder\"\n          >\n            {t('Read the docs')}\n          </Button>\n        </ButtonBar>\n      </Layout.HeaderActions>\n    </Layout.Header>\n  );\n}\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {openWidgetBuilderOverwriteModal} from 'sentry/actionCreators/modal';\nimport {OverwriteWidgetModalProps} from 'sentry/components/modals/widgetBuilder/overwriteWidgetModal';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {DisplayType, WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {\n  getTopNConvertedDefaultWidgets,\n  WidgetTemplate,\n} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport {normalizeQueries} from '../utils';\n\nimport {Card} from './card';\n\ninterface Props {\n  bypassOverwriteModal: boolean;\n  onWidgetSelect: (widget: WidgetTemplate) => void;\n  organization: Organization;\n  widgetBuilderNewDesign: boolean;\n}\n\nexport function WidgetLibrary({\n  bypassOverwriteModal,\n  onWidgetSelect,\n  widgetBuilderNewDesign,\n  organization,\n}: Props) {\n  const theme = useTheme();\n  let defaultWidgets = getTopNConvertedDefaultWidgets();\n  if (!!!organization.features.includes('dashboards-releases')) {\n    defaultWidgets = defaultWidgets.filter(\n      widget => !!!(widget.widgetType === WidgetType.RELEASE)\n    );\n  }\n\n  function getLibrarySelectionHandler(\n    widget: OverwriteWidgetModalProps['widget'],\n    iconColor: OverwriteWidgetModalProps['iconColor']\n  ) {\n    return function handleWidgetSelect() {\n      if (bypassOverwriteModal) {\n        onWidgetSelect(widget);\n        return;\n      }\n\n      openWidgetBuilderOverwriteModal({\n        onConfirm: () => onWidgetSelect(widget),\n        widget,\n        iconColor,\n      });\n    };\n  }\n\n  return (\n    <Fragment>\n      <Header>{t('Widget Library')}</Header>\n      <WidgetLibraryWrapper>\n        {defaultWidgets.map((widget, index) => {\n          const iconColor = theme.charts.getColorPalette(defaultWidgets.length - 2)[\n            index\n          ];\n\n          const displayType =\n            widgetBuilderNewDesign && widget.displayType === DisplayType.TOP_N\n              ? DisplayType.TABLE\n              : widget.displayType;\n\n          const normalizedQueries = normalizeQueries({\n            displayType,\n            queries: widget.queries,\n            widgetBuilderNewDesign,\n            widgetType: widget.widgetType,\n          });\n\n          const newWidget = {\n            ...widget,\n            displayType,\n            queries: normalizedQueries,\n          };\n\n          return (\n            <CardHoverWrapper\n              key={widget.title}\n              onClick={getLibrarySelectionHandler(newWidget, iconColor)}\n            >\n              <Card widget={newWidget} iconColor={iconColor} />\n            </CardHoverWrapper>\n          );\n        })}\n      </WidgetLibraryWrapper>\n    </Fragment>\n  );\n}\n\nconst WidgetLibraryWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Header = styled('h5')`\n  /* to be aligned with the 30px of Layout.main padding */\n  padding-left: calc(${space(2)} - ${space(0.25)});\n`;\n\nconst CardHoverWrapper = styled('div')`\n  /* to be aligned with the 30px of Layout.main padding - 1px of the widget item border */\n  padding: calc(${space(2)} - 3px);\n  border: 1px solid transparent;\n  border-radius: ${p => p.theme.borderRadius};\n  transition: border-color 0.3s ease;\n  cursor: pointer;\n  &:hover {\n    border-color: ${p => p.theme.gray100};\n  }\n`;\n","import {useEffect, useMemo, useState} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport set from 'lodash/set';\nimport trimStart from 'lodash/trimStart';\n\nimport {validateWidget} from 'sentry/actionCreators/dashboards';\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {fetchOrgMembers} from 'sentry/actionCreators/members';\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport {generateOrderOptions} from 'sentry/components/dashboards/widgetQueriesForm';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport LoadingError from 'sentry/components/loadingError';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {\n  DateString,\n  Organization,\n  PageFilters,\n  SelectValue,\n  SessionField,\n  TagCollection,\n} from 'sentry/types';\nimport {defined, objectIsEmpty} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {\n  explodeField,\n  generateFieldAsString,\n  getAggregateAlias,\n  getColumnsAndAggregates,\n  getColumnsAndAggregatesAsStrings,\n  isEquation,\n  QueryFieldValue,\n  stripDerivedMetricsPrefix,\n  stripEquationPrefix,\n} from 'sentry/utils/discover/fields';\nimport handleXhrErrorResponse from 'sentry/utils/handleXhrErrorResponse';\nimport useApi from 'sentry/utils/useApi';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withTags from 'sentry/utils/withTags';\nimport {\n  assignTempId,\n  enforceWidgetHeightValues,\n  generateWidgetsAfterCompaction,\n  getDefaultWidgetHeight,\n} from 'sentry/views/dashboardsV2/layoutUtils';\nimport {\n  DashboardDetails,\n  DashboardListItem,\n  DashboardWidgetSource,\n  DisplayType,\n  Widget,\n  WidgetQuery,\n  WidgetType,\n} from 'sentry/views/dashboardsV2/types';\n\nimport {DEFAULT_STATS_PERIOD} from '../data';\nimport {getDatasetConfig} from '../datasetConfig/base';\nimport {getNumEquations} from '../utils';\n\nimport {ColumnsStep} from './buildSteps/columnsStep';\nimport {DataSetStep} from './buildSteps/dataSetStep';\nimport {FilterResultsStep} from './buildSteps/filterResultsStep';\nimport {GroupByStep} from './buildSteps/groupByStep';\nimport {SortByStep} from './buildSteps/sortByStep';\nimport {VisualizationStep} from './buildSteps/visualizationStep';\nimport {YAxisStep} from './buildSteps/yAxisStep';\nimport {Footer} from './footer';\nimport {Header} from './header';\nimport {\n  DataSet,\n  DEFAULT_RESULTS_LIMIT,\n  getIsTimeseriesChart,\n  getParsedDefaultWidgetQuery,\n  getResultsLimit,\n  mapErrors,\n  NEW_DASHBOARD_ID,\n  normalizeQueries,\n} from './utils';\nimport {WidgetLibrary} from './widgetLibrary';\n\nconst WIDGET_TYPE_TO_DATA_SET = {\n  [WidgetType.DISCOVER]: DataSet.EVENTS,\n  [WidgetType.ISSUE]: DataSet.ISSUES,\n  [WidgetType.RELEASE]: DataSet.RELEASES,\n};\n\nconst DATA_SET_TO_WIDGET_TYPE = {\n  [DataSet.EVENTS]: WidgetType.DISCOVER,\n  [DataSet.ISSUES]: WidgetType.ISSUE,\n  [DataSet.RELEASES]: WidgetType.RELEASE,\n};\n\ninterface RouteParams {\n  dashboardId: string;\n  orgId: string;\n  widgetIndex?: string;\n}\n\ninterface QueryData {\n  queryConditions: string[];\n  queryFields: string[];\n  queryNames: string[];\n  queryOrderby: string;\n}\n\ninterface Props extends RouteComponentProps<RouteParams, {}> {\n  dashboard: DashboardDetails;\n  onSave: (widgets: Widget[]) => void;\n  organization: Organization;\n  selection: PageFilters;\n  tags: TagCollection;\n  displayType?: DisplayType;\n  end?: DateString;\n  start?: DateString;\n  statsPeriod?: string | null;\n}\n\ninterface State {\n  dashboards: DashboardListItem[];\n  dataSet: DataSet;\n  displayType: Widget['displayType'];\n  interval: Widget['interval'];\n  limit: Widget['limit'];\n  loading: boolean;\n  queries: Widget['queries'];\n  title: string;\n  userHasModified: boolean;\n  errors?: Record<string, any>;\n  selectedDashboard?: SelectValue<string>;\n  widgetToBeUpdated?: Widget;\n}\n\nfunction WidgetBuilder({\n  dashboard,\n  params,\n  location,\n  organization,\n  selection,\n  start,\n  end,\n  statsPeriod,\n  onSave,\n  route,\n  router,\n  tags,\n}: Props) {\n  const {widgetIndex, orgId, dashboardId} = params;\n  const {source, displayType, defaultTitle, defaultTableColumns, limit} = location.query;\n  const defaultWidgetQuery = getParsedDefaultWidgetQuery(\n    location.query.defaultWidgetQuery\n  );\n\n  // Feature flag for new widget builder design. This feature is still a work in progress and not yet available internally.\n  const widgetBuilderNewDesign = organization.features.includes(\n    'new-widget-builder-experience-design'\n  );\n  const hasReleaseHealthFeature = organization.features.includes('dashboards-releases');\n\n  const filteredDashboardWidgets = dashboard.widgets.filter(({widgetType}) => {\n    if (widgetType === WidgetType.RELEASE) {\n      return hasReleaseHealthFeature;\n    }\n    return true;\n  });\n\n  const isEditing = defined(widgetIndex);\n  const widgetIndexNum = Number(widgetIndex);\n  const isValidWidgetIndex =\n    widgetIndexNum >= 0 &&\n    widgetIndexNum < filteredDashboardWidgets.length &&\n    Number.isInteger(widgetIndexNum);\n  const orgSlug = organization.slug;\n\n  // Construct PageFilters object using statsPeriod/start/end props so we can\n  // render widget graph using saved timeframe from Saved/Prebuilt Query\n  const pageFilters: PageFilters = statsPeriod\n    ? {...selection, datetime: {start: null, end: null, period: statsPeriod, utc: null}}\n    : start && end\n    ? {...selection, datetime: {start, end, period: null, utc: null}}\n    : selection;\n\n  // when opening from discover or issues page, the user selects the dashboard in the widget UI\n  const notDashboardsOrigin = [\n    DashboardWidgetSource.DISCOVERV2,\n    DashboardWidgetSource.ISSUE_DETAILS,\n  ].includes(source);\n\n  const api = useApi();\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const [datasetConfig, setDataSetConfig] = useState<ReturnType<typeof getDatasetConfig>>(\n    getDatasetConfig(WidgetType.DISCOVER)\n  );\n  const [state, setState] = useState<State>(() => {\n    const defaultState: State = {\n      title: defaultTitle ?? t('Custom Widget'),\n      displayType:\n        (widgetBuilderNewDesign && displayType === DisplayType.TOP_N\n          ? DisplayType.AREA\n          : displayType) ?? DisplayType.TABLE,\n      interval: '5m',\n      queries: [],\n      limit: limit ? Number(limit) : undefined,\n      errors: undefined,\n      loading: !!notDashboardsOrigin,\n      dashboards: [],\n      userHasModified: false,\n      dataSet: DataSet.EVENTS,\n    };\n\n    if (defaultWidgetQuery) {\n      if (widgetBuilderNewDesign) {\n        defaultState.queries = [\n          {\n            ...defaultWidgetQuery,\n            orderby:\n              defaultWidgetQuery.orderby ||\n              generateOrderOptions({\n                widgetType: WidgetType.DISCOVER,\n                widgetBuilderNewDesign,\n                columns: defaultWidgetQuery.columns,\n                aggregates: defaultWidgetQuery.aggregates,\n              })[0].value,\n          },\n        ];\n      } else {\n        defaultState.queries = [{...defaultWidgetQuery}];\n      }\n\n      if (\n        ![DisplayType.TABLE, DisplayType.TOP_N].includes(defaultState.displayType) &&\n        !(\n          getIsTimeseriesChart(defaultState.displayType) &&\n          defaultState.queries[0].columns.length\n        )\n      ) {\n        defaultState.queries[0].orderby = '';\n      }\n    } else {\n      defaultState.queries = [{...datasetConfig.defaultWidgetQuery}];\n    }\n\n    return defaultState;\n  });\n\n  const [widgetToBeUpdated, setWidgetToBeUpdated] = useState<Widget | null>(null);\n\n  // For analytics around widget library selection\n  const [latestLibrarySelectionTitle, setLatestLibrarySelectionTitle] = useState<\n    string | null\n  >(null);\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('dashboards_views.widget_builder.opened', {\n      organization,\n      new_widget: !isEditing,\n    });\n\n    if (objectIsEmpty(tags)) {\n      loadOrganizationTags(api, organization.slug, selection);\n    }\n\n    if (isEditing && isValidWidgetIndex) {\n      const widgetFromDashboard = filteredDashboardWidgets[widgetIndexNum];\n\n      let queries;\n      let newDisplayType = widgetFromDashboard.displayType;\n      let newLimit = widgetFromDashboard.limit;\n      if (widgetFromDashboard.displayType === DisplayType.TOP_N) {\n        newLimit = DEFAULT_RESULTS_LIMIT;\n        newDisplayType = DisplayType.AREA;\n\n        queries = normalizeQueries({\n          displayType: newDisplayType,\n          queries: widgetFromDashboard.queries,\n          widgetType: widgetFromDashboard.widgetType ?? WidgetType.DISCOVER,\n          widgetBuilderNewDesign,\n        }).map(query => ({\n          ...query,\n          // Use the last aggregate because that's where the y-axis is stored\n          aggregates: query.aggregates.length\n            ? [query.aggregates[query.aggregates.length - 1]]\n            : [],\n        }));\n      } else {\n        queries = normalizeQueries({\n          displayType: newDisplayType,\n          queries: widgetFromDashboard.queries,\n          widgetType: widgetFromDashboard.widgetType ?? WidgetType.DISCOVER,\n          widgetBuilderNewDesign,\n        });\n      }\n\n      setState({\n        title: widgetFromDashboard.title,\n        displayType: newDisplayType,\n        interval: widgetFromDashboard.interval,\n        queries,\n        errors: undefined,\n        loading: false,\n        dashboards: [],\n        userHasModified: false,\n        dataSet: widgetFromDashboard.widgetType\n          ? WIDGET_TYPE_TO_DATA_SET[widgetFromDashboard.widgetType]\n          : DataSet.EVENTS,\n        limit: newLimit,\n      });\n      setDataSetConfig(getDatasetConfig(widgetFromDashboard.widgetType));\n      setWidgetToBeUpdated(widgetFromDashboard);\n    }\n    // This should only run once on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    async function fetchDashboards() {\n      const promise: Promise<DashboardListItem[]> = api.requestPromise(\n        `/organizations/${organization.slug}/dashboards/`,\n        {\n          method: 'GET',\n          query: {sort: 'myDashboardsAndRecentlyViewed'},\n        }\n      );\n\n      try {\n        const dashboards = await promise;\n        setState(prevState => ({...prevState, dashboards, loading: false}));\n      } catch (error) {\n        const errorMessage = t('Unable to fetch dashboards');\n        addErrorMessage(errorMessage);\n        handleXhrErrorResponse(errorMessage)(error);\n        setState(prevState => ({...prevState, loading: false}));\n      }\n    }\n\n    if (notDashboardsOrigin) {\n      fetchDashboards();\n    }\n\n    if (widgetBuilderNewDesign) {\n      setState(prevState => ({\n        ...prevState,\n        selectedDashboard: {\n          label: dashboard.title,\n          value: dashboard.id || NEW_DASHBOARD_ID,\n        },\n      }));\n    }\n  }, [\n    api,\n    dashboard.id,\n    dashboard.title,\n    notDashboardsOrigin,\n    organization.slug,\n    source,\n    widgetBuilderNewDesign,\n  ]);\n\n  useEffect(() => {\n    fetchOrgMembers(api, organization.slug, selection.projects?.map(String));\n  }, [selection.projects, api, organization.slug]);\n\n  useEffect(() => {\n    const onUnload = () => {\n      if (!isSubmitting && state.userHasModified) {\n        return t('You have unsaved changes, are you sure you want to leave?');\n      }\n      return undefined;\n    };\n\n    router.setRouteLeaveHook(route, onUnload);\n  }, [isSubmitting, state.userHasModified, route, router]);\n\n  const widgetType =\n    state.dataSet === DataSet.EVENTS\n      ? WidgetType.DISCOVER\n      : state.dataSet === DataSet.ISSUES\n      ? WidgetType.ISSUE\n      : WidgetType.RELEASE;\n\n  const currentWidget = {\n    title: state.title,\n    displayType: state.displayType,\n    interval: state.interval,\n    queries: state.queries,\n    limit: state.limit,\n    widgetType,\n  };\n\n  const currentDashboardId = state.selectedDashboard?.value ?? dashboardId;\n  const queryParamsWithoutSource = omit(location.query, 'source');\n  const previousLocation = {\n    pathname:\n      defined(currentDashboardId) && currentDashboardId !== NEW_DASHBOARD_ID\n        ? `/organizations/${orgId}/dashboard/${currentDashboardId}/`\n        : `/organizations/${orgId}/dashboards/${NEW_DASHBOARD_ID}/`,\n    query: isEmpty(queryParamsWithoutSource) ? undefined : queryParamsWithoutSource,\n  };\n\n  const isTimeseriesChart = getIsTimeseriesChart(state.displayType);\n\n  const isTabularChart = [DisplayType.TABLE, DisplayType.TOP_N].includes(\n    state.displayType\n  );\n\n  function updateFieldsAccordingToDisplayType(newDisplayType: DisplayType) {\n    setState(prevState => {\n      const newState = cloneDeep(prevState);\n\n      if (!!!datasetConfig.supportedDisplayTypes.includes(newDisplayType)) {\n        // Set to Events dataset if Display Type is not supported by\n        // current dataset\n        set(\n          newState,\n          'queries',\n          normalizeQueries({\n            displayType: newDisplayType,\n            queries: [{...getDatasetConfig(WidgetType.DISCOVER).defaultWidgetQuery}],\n            widgetType: WidgetType.DISCOVER,\n            widgetBuilderNewDesign,\n          })\n        );\n        set(newState, 'dataSet', DataSet.EVENTS);\n        setDataSetConfig(getDatasetConfig(WidgetType.DISCOVER));\n        return {...newState, errors: undefined};\n      }\n\n      const normalized = normalizeQueries({\n        displayType: newDisplayType,\n        queries: prevState.queries,\n        widgetType: DATA_SET_TO_WIDGET_TYPE[prevState.dataSet],\n        widgetBuilderNewDesign,\n      });\n\n      if (newDisplayType === DisplayType.TOP_N) {\n        // TOP N display should only allow a single query\n        normalized.splice(1);\n      }\n\n      if (!prevState.userHasModified) {\n        // Default widget provided by Add to Dashboard from Discover\n        if (defaultWidgetQuery && defaultTableColumns) {\n          // If switching to Table visualization, use saved query fields for Y-Axis if user has not made query changes\n          // This is so the widget can reflect the same columns as the table in Discover without requiring additional user input\n          if (newDisplayType === DisplayType.TABLE) {\n            normalized.forEach(query => {\n              const tableQuery = getColumnsAndAggregates(defaultTableColumns);\n              query.columns = [...tableQuery.columns];\n              query.aggregates = [...tableQuery.aggregates];\n              query.fields = [...defaultTableColumns];\n              query.orderby =\n                defaultWidgetQuery.orderby ??\n                (query.fields.length ? `${query.fields[0]}` : '-');\n            });\n          } else if (newDisplayType === displayType) {\n            // When switching back to original display type, default fields back to the fields provided from the discover query\n            normalized.forEach(query => {\n              query.fields = [\n                ...defaultWidgetQuery.columns,\n                ...defaultWidgetQuery.aggregates,\n              ];\n              query.aggregates = [...defaultWidgetQuery.aggregates];\n              query.columns = [...defaultWidgetQuery.columns];\n              if (\n                !!defaultWidgetQuery.orderby &&\n                (displayType === DisplayType.TOP_N || defaultWidgetQuery.columns.length)\n              ) {\n                query.orderby = defaultWidgetQuery.orderby;\n              }\n            });\n          }\n        }\n      }\n\n      set(newState, 'queries', normalized);\n\n      if (widgetBuilderNewDesign) {\n        if (\n          getIsTimeseriesChart(newDisplayType) &&\n          normalized[0].columns.filter(column => !!column).length\n        ) {\n          // If a limit already exists (i.e. going between timeseries) then keep it,\n          // otherwise calculate a limit\n          newState.limit =\n            prevState.limit ??\n            Math.min(\n              getResultsLimit(normalized.length, normalized[0].columns.length),\n              DEFAULT_RESULTS_LIMIT\n            );\n        } else {\n          newState.limit = undefined;\n        }\n      }\n\n      set(newState, 'userHasModified', true);\n      return {...newState, errors: undefined};\n    });\n  }\n\n  function getUpdateWidgetIndex() {\n    if (!widgetToBeUpdated) {\n      return -1;\n    }\n\n    return dashboard.widgets.findIndex(widget => {\n      if (defined(widget.id)) {\n        return widget.id === widgetToBeUpdated.id;\n      }\n\n      if (defined(widget.tempId)) {\n        return widget.tempId === widgetToBeUpdated.tempId;\n      }\n\n      return false;\n    });\n  }\n\n  function handleDisplayTypeOrTitleChange<\n    F extends keyof Pick<State, 'displayType' | 'title'>\n  >(field: F, value: State[F]) {\n    trackAdvancedAnalyticsEvent('dashboards_views.widget_builder.change', {\n      from: source,\n      field,\n      value,\n      widget_type: widgetType,\n      organization,\n      new_widget: !isEditing,\n    });\n\n    setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n      if (field === 'title') {\n        set(newState, 'userHasModified', true);\n      }\n      return {...newState, errors: undefined};\n    });\n\n    if (field === 'displayType' && value !== state.displayType) {\n      updateFieldsAccordingToDisplayType(value as DisplayType);\n    }\n  }\n\n  function handleDataSetChange(newDataSet: string) {\n    setState(prevState => {\n      const newState = cloneDeep(prevState);\n      newState.queries.splice(0, newState.queries.length);\n      set(newState, 'dataSet', newDataSet);\n\n      if (newDataSet === DataSet.ISSUES) {\n        set(newState, 'displayType', DisplayType.TABLE);\n      }\n\n      const config = getDatasetConfig(DATA_SET_TO_WIDGET_TYPE[newDataSet]);\n      setDataSetConfig(config);\n\n      newState.queries.push(\n        ...(widgetToBeUpdated?.widgetType &&\n        WIDGET_TYPE_TO_DATA_SET[widgetToBeUpdated.widgetType] === newDataSet\n          ? widgetToBeUpdated.queries\n          : [{...config.defaultWidgetQuery}])\n      );\n\n      set(newState, 'userHasModified', true);\n      return {...newState, errors: undefined};\n    });\n  }\n\n  function handleAddSearchConditions() {\n    setState(prevState => {\n      const newState = cloneDeep(prevState);\n      const config = getDatasetConfig(DATA_SET_TO_WIDGET_TYPE[prevState.dataSet]);\n      const query = cloneDeep(config.defaultWidgetQuery);\n      query.fields = prevState.queries[0].fields;\n      query.aggregates = prevState.queries[0].aggregates;\n      query.columns = prevState.queries[0].columns;\n      query.orderby = prevState.queries[0].orderby;\n      newState.queries.push(query);\n      return newState;\n    });\n  }\n\n  function handleQueryRemove(index: number) {\n    setState(prevState => {\n      const newState = cloneDeep(prevState);\n      newState.queries.splice(index, 1);\n      return {...newState, errors: undefined};\n    });\n  }\n\n  function handleQueryChange(queryIndex: number, newQuery: WidgetQuery) {\n    setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, `queries.${queryIndex}`, newQuery);\n      set(newState, 'userHasModified', true);\n      return {...newState, errors: undefined};\n    });\n  }\n\n  function handleYAxisOrColumnFieldChange(\n    newFields: QueryFieldValue[],\n    isColumn = false\n  ) {\n    const fieldStrings = newFields\n      .map(generateFieldAsString)\n      .map(field =>\n        state.dataSet === DataSet.RELEASES ? stripDerivedMetricsPrefix(field) : field\n      );\n\n    const columnsAndAggregates = isColumn\n      ? getColumnsAndAggregatesAsStrings(newFields)\n      : undefined;\n\n    const newState = cloneDeep(state);\n\n    const disableSortBy =\n      widgetType === WidgetType.RELEASE && fieldStrings.includes('session.status');\n\n    const newQueries = state.queries.map(query => {\n      const isDescending = query.orderby.startsWith('-');\n      const orderbyPrefix = isDescending ? '-' : '';\n      const rawOrderby = trimStart(query.orderby, '-');\n      const prevAggregateFieldStrings = query.aggregates.map(aggregate =>\n        state.dataSet === DataSet.RELEASES\n          ? stripDerivedMetricsPrefix(aggregate)\n          : aggregate\n      );\n      const newQuery = cloneDeep(query);\n\n      if (disableSortBy) {\n        newQuery.orderby = '';\n      }\n\n      if (isColumn) {\n        newQuery.fields = fieldStrings;\n        newQuery.aggregates = columnsAndAggregates?.aggregates ?? [];\n        if (state.dataSet === DataSet.RELEASES && newQuery.aggregates.length === 0) {\n          // Release Health widgets require an aggregate in tables\n          const defaultReleaseHealthAggregate = `crash_free_rate(${SessionField.SESSION})`;\n          newQuery.aggregates = [defaultReleaseHealthAggregate];\n          newQuery.fields = [...newQuery.fields, defaultReleaseHealthAggregate];\n        }\n      } else if (state.displayType === DisplayType.TOP_N) {\n        // Top N queries use n-1 fields for columns and the nth field for y-axis\n        newQuery.fields = [\n          ...(newQuery.fields?.slice(0, newQuery.fields.length - 1) ?? []),\n          ...fieldStrings,\n        ];\n        newQuery.aggregates = [\n          ...newQuery.aggregates.slice(0, newQuery.aggregates.length - 1),\n          ...fieldStrings,\n        ];\n      } else {\n        newQuery.fields = [...newQuery.columns, ...fieldStrings];\n        newQuery.aggregates = fieldStrings;\n      }\n\n      // Prevent overwriting columns when setting y-axis for time series\n      if (!(widgetBuilderNewDesign && isTimeseriesChart) && isColumn) {\n        newQuery.columns = columnsAndAggregates?.columns ?? [];\n      }\n\n      if (!fieldStrings.includes(rawOrderby) && query.orderby !== '') {\n        if (\n          !widgetBuilderNewDesign &&\n          prevAggregateFieldStrings.length === newFields.length &&\n          prevAggregateFieldStrings.includes(rawOrderby)\n        ) {\n          // The aggregate that was used in orderby has changed. Get the new field.\n          let newOrderByValue =\n            fieldStrings[prevAggregateFieldStrings.indexOf(rawOrderby)];\n\n          if (!stripEquationPrefix(newOrderByValue ?? '')) {\n            newOrderByValue = '';\n          }\n\n          newQuery.orderby = `${orderbyPrefix}${newOrderByValue}`;\n        } else {\n          const isFromAggregates = newQuery.aggregates.includes(rawOrderby);\n          const isCustomEquation = isEquation(rawOrderby);\n          const isUsedInGrouping = newQuery.columns.includes(rawOrderby);\n\n          const keepCurrentOrderby =\n            isFromAggregates || isCustomEquation || isUsedInGrouping;\n          const firstAggregateAlias = isEquation(newQuery.aggregates[0] ?? '')\n            ? `equation[${getNumEquations(newQuery.aggregates) - 1}]`\n            : fieldStrings[0];\n\n          newQuery.orderby = widgetBuilderNewDesign\n            ? (keepCurrentOrderby && newQuery.orderby) ||\n              `${orderbyPrefix}${firstAggregateAlias}`\n            : '';\n        }\n      }\n\n      if (widgetBuilderNewDesign) {\n        newQuery.fieldAliases = columnsAndAggregates?.fieldAliases ?? [];\n      }\n\n      return newQuery;\n    });\n\n    set(newState, 'queries', newQueries);\n    set(newState, 'userHasModified', true);\n\n    if (widgetBuilderNewDesign && isTimeseriesChart) {\n      const groupByFields = newState.queries[0].columns.filter(\n        field => !(field === 'equation|')\n      );\n      if (groupByFields.length === 0) {\n        set(newState, 'limit', undefined);\n      } else {\n        set(\n          newState,\n          'limit',\n          Math.min(\n            newState.limit ?? DEFAULT_RESULTS_LIMIT,\n            getResultsLimit(newQueries.length, newQueries[0].aggregates.length)\n          )\n        );\n      }\n    }\n\n    setState(newState);\n  }\n\n  function handleGroupByChange(newFields: QueryFieldValue[]) {\n    const fieldStrings = newFields.map(generateFieldAsString);\n\n    const newState = cloneDeep(state);\n\n    const newQueries = state.queries.map(query => {\n      const newQuery = cloneDeep(query);\n      newQuery.columns = fieldStrings;\n      const orderby = trimStart(newQuery.orderby, '-');\n      const aggregateAliasFieldStrings = newQuery.aggregates.map(getAggregateAlias);\n\n      if (!fieldStrings.length) {\n        // The grouping was cleared, so clear the orderby\n        newQuery.orderby = '';\n      } else if (widgetBuilderNewDesign && !newQuery.orderby) {\n        const orderOptions = generateOrderOptions({\n          widgetType: widgetType ?? WidgetType.DISCOVER,\n          widgetBuilderNewDesign,\n          columns: query.columns,\n          aggregates: query.aggregates,\n        });\n        let orderOption: string;\n        // If no orderby options are available because of DISABLED_SORTS\n        if (!!!orderOptions.length && state.dataSet === DataSet.RELEASES) {\n          newQuery.orderby = '';\n        } else {\n          orderOption = orderOptions[0].value;\n          newQuery.orderby = `-${orderOption}`;\n        }\n      } else if (\n        !widgetBuilderNewDesign &&\n        aggregateAliasFieldStrings.length &&\n        !aggregateAliasFieldStrings.includes(orderby) &&\n        !newQuery.columns.includes(orderby) &&\n        !isEquation(orderby)\n      ) {\n        // If the orderby isn't contained in either aggregates or columns, choose the first aggregate\n        const isDescending = newQuery.orderby.startsWith('-');\n        const prefix = orderby && !isDescending ? '' : '-';\n        const firstAggregateAlias = isEquation(aggregateAliasFieldStrings[0])\n          ? `equation[${getNumEquations(aggregateAliasFieldStrings) - 1}]`\n          : aggregateAliasFieldStrings[0];\n        newQuery.orderby = `${prefix}${firstAggregateAlias}`;\n      }\n      return newQuery;\n    });\n\n    set(newState, 'userHasModified', true);\n    set(newState, 'queries', newQueries);\n\n    const groupByFields = newState.queries[0].columns.filter(\n      field => !(field === 'equation|')\n    );\n\n    if (groupByFields.length === 0) {\n      set(newState, 'limit', undefined);\n    } else {\n      set(\n        newState,\n        'limit',\n        Math.min(\n          newState.limit ?? DEFAULT_RESULTS_LIMIT,\n          getResultsLimit(newQueries.length, newQueries[0].aggregates.length)\n        )\n      );\n    }\n\n    setState(newState);\n  }\n\n  function handleLimitChange(newLimit: number) {\n    setState(prevState => ({...prevState, limit: newLimit}));\n  }\n\n  function handleSortByChange(newSortBy: string) {\n    const newState = cloneDeep(state);\n\n    state.queries.forEach((query, index) => {\n      const newQuery = cloneDeep(query);\n      newQuery.orderby = newSortBy;\n      set(newState, `queries.${index}`, newQuery);\n    });\n\n    set(newState, 'userHasModified', true);\n    setState(newState);\n  }\n\n  function handleDelete() {\n    if (!isEditing) {\n      return;\n    }\n\n    setIsSubmitting(true);\n    let nextWidgetList = [...dashboard.widgets];\n    const updateWidgetIndex = getUpdateWidgetIndex();\n    nextWidgetList.splice(updateWidgetIndex, 1);\n    nextWidgetList = generateWidgetsAfterCompaction(nextWidgetList);\n\n    onSave(nextWidgetList);\n    router.push(previousLocation);\n  }\n\n  async function handleSave() {\n    const widgetData: Widget = assignTempId(currentWidget);\n\n    if (widgetToBeUpdated) {\n      widgetData.layout = widgetToBeUpdated?.layout;\n    }\n\n    // Only Table and Top N views need orderby\n    if (!widgetBuilderNewDesign && !isTabularChart) {\n      widgetData.queries.forEach(query => {\n        query.orderby = '';\n      });\n    }\n\n    if (!widgetBuilderNewDesign) {\n      widgetData.queries.forEach(query => omit(query, 'fieldAliases'));\n    }\n\n    // Only Time Series charts shall have a limit\n    if (widgetBuilderNewDesign && !isTimeseriesChart) {\n      widgetData.limit = undefined;\n    }\n\n    if (!(await dataIsValid(widgetData))) {\n      return;\n    }\n\n    if (latestLibrarySelectionTitle) {\n      // User has selected a widget library in this session\n      trackAdvancedAnalyticsEvent('dashboards_views.widget_library.add_widget', {\n        organization,\n        title: latestLibrarySelectionTitle,\n      });\n    }\n\n    setIsSubmitting(true);\n    if (notDashboardsOrigin) {\n      submitFromSelectedDashboard(widgetData);\n      return;\n    }\n\n    if (!!widgetToBeUpdated) {\n      let nextWidgetList = [...dashboard.widgets];\n      const updateWidgetIndex = getUpdateWidgetIndex();\n      const nextWidgetData = {...widgetData, id: widgetToBeUpdated.id};\n\n      // Only modify and re-compact if the default height has changed\n      if (\n        getDefaultWidgetHeight(widgetToBeUpdated.displayType) !==\n        getDefaultWidgetHeight(widgetData.displayType)\n      ) {\n        nextWidgetList[updateWidgetIndex] = enforceWidgetHeightValues(nextWidgetData);\n        nextWidgetList = generateWidgetsAfterCompaction(nextWidgetList);\n      } else {\n        nextWidgetList[updateWidgetIndex] = nextWidgetData;\n      }\n\n      onSave(nextWidgetList);\n      addSuccessMessage(t('Updated widget.'));\n      goToDashboards(dashboardId ?? NEW_DASHBOARD_ID);\n      trackAdvancedAnalyticsEvent('dashboards_views.widget_builder.save', {\n        organization,\n        data_set: widgetData.widgetType ?? WidgetType.DISCOVER,\n        new_widget: false,\n      });\n      return;\n    }\n\n    onSave([...dashboard.widgets, widgetData]);\n    addSuccessMessage(t('Added widget.'));\n    goToDashboards(dashboardId ?? NEW_DASHBOARD_ID);\n    trackAdvancedAnalyticsEvent('dashboards_views.widget_builder.save', {\n      organization,\n      data_set: widgetData.widgetType ?? WidgetType.DISCOVER,\n      new_widget: true,\n    });\n  }\n\n  async function dataIsValid(widgetData: Widget): Promise<boolean> {\n    if (notDashboardsOrigin) {\n      // Validate that a dashboard was selected since api call to /dashboards/widgets/ does not check for dashboard\n      if (\n        !state.selectedDashboard ||\n        !(\n          state.dashboards.find(\n            ({title, id}) =>\n              title === state.selectedDashboard?.label &&\n              id === state.selectedDashboard?.value\n          ) || state.selectedDashboard.value === NEW_DASHBOARD_ID\n        )\n      ) {\n        setState({\n          ...state,\n          errors: {...state.errors, dashboard: t('This field may not be blank')},\n        });\n        return false;\n      }\n    }\n\n    setState({...state, loading: true});\n\n    try {\n      await validateWidget(api, organization.slug, widgetData);\n      return true;\n    } catch (error) {\n      setState({\n        ...state,\n        loading: false,\n        errors: {...state.errors, ...mapErrors(error?.responseJSON ?? {}, {})},\n      });\n      return false;\n    }\n  }\n\n  function submitFromSelectedDashboard(widgetData: Widget) {\n    if (!state.selectedDashboard) {\n      return;\n    }\n\n    const queryData: QueryData = {\n      queryNames: [],\n      queryConditions: [],\n      queryFields: [\n        ...widgetData.queries[0].columns,\n        ...widgetData.queries[0].aggregates,\n      ],\n      queryOrderby: widgetData.queries[0].orderby,\n    };\n\n    widgetData.queries.forEach(query => {\n      queryData.queryNames.push(query.name);\n      queryData.queryConditions.push(query.conditions);\n    });\n\n    const pathQuery = {\n      displayType: widgetData.displayType,\n      interval: widgetData.interval,\n      title: widgetData.title,\n      ...queryData,\n      // Propagate page filters\n      project: pageFilters.projects,\n      environment: pageFilters.environments,\n      ...omit(pageFilters.datetime, 'period'),\n      statsPeriod: pageFilters.datetime?.period,\n    };\n\n    addSuccessMessage(t('Added widget.'));\n    goToDashboards(state.selectedDashboard.value, pathQuery);\n  }\n\n  function goToDashboards(id: string, query?: Record<string, any>) {\n    const pathQuery =\n      !isEmpty(queryParamsWithoutSource) || query\n        ? {\n            ...queryParamsWithoutSource,\n            ...query,\n          }\n        : undefined;\n\n    if (id === NEW_DASHBOARD_ID) {\n      router.push({\n        pathname: `/organizations/${organization.slug}/dashboards/new/`,\n        query: pathQuery,\n      });\n      return;\n    }\n\n    router.push({\n      pathname: `/organizations/${organization.slug}/dashboard/${id}/`,\n      query: pathQuery,\n    });\n  }\n\n  function isFormInvalid() {\n    if (notDashboardsOrigin && !state.selectedDashboard) {\n      return true;\n    }\n\n    return false;\n  }\n\n  const canAddSearchConditions =\n    [DisplayType.LINE, DisplayType.AREA, DisplayType.BAR].includes(state.displayType) &&\n    state.queries.length < 3;\n\n  const hideLegendAlias = [\n    DisplayType.TABLE,\n    DisplayType.WORLD_MAP,\n    DisplayType.BIG_NUMBER,\n  ].includes(state.displayType);\n\n  // Tabular visualizations will always have only one query and that query cannot be deleted,\n  // so we will always have the first query available to get data from.\n  const {columns, aggregates, fields, fieldAliases = []} = state.queries[0];\n\n  const explodedColumns = useMemo(() => {\n    return columns.map((field, index) =>\n      explodeField({field, alias: fieldAliases[index]})\n    );\n  }, [columns, fieldAliases]);\n\n  const explodedAggregates = useMemo(() => {\n    return aggregates.map((field, index) =>\n      explodeField({field, alias: fieldAliases[index]})\n    );\n  }, [aggregates, fieldAliases]);\n\n  const explodedFields = defined(fields)\n    ? fields.map((field, index) => explodeField({field, alias: fieldAliases[index]}))\n    : [...explodedColumns, ...explodedAggregates];\n\n  const groupByValueSelected = currentWidget.queries.some(query => {\n    const noEmptyColumns = query.columns.filter(column => !!column);\n    return noEmptyColumns.length > 0;\n  });\n\n  // The SortBy field shall only be displayed in tabular visualizations or\n  // on time-series visualizations when at least one groupBy value is selected\n  const displaySortByStep =\n    (widgetBuilderNewDesign && isTimeseriesChart && groupByValueSelected) ||\n    isTabularChart;\n\n  if (isEditing && !isValidWidgetIndex) {\n    return (\n      <SentryDocumentTitle title={dashboard.title} orgSlug={orgSlug}>\n        <PageContent>\n          <LoadingError message={t('The widget you want to edit was not found.')} />\n        </PageContent>\n      </SentryDocumentTitle>\n    );\n  }\n\n  return (\n    <SentryDocumentTitle title={dashboard.title} orgSlug={orgSlug}>\n      <PageFiltersContainer\n        defaultSelection={{\n          datetime: {start: null, end: null, utc: false, period: DEFAULT_STATS_PERIOD},\n        }}\n        hideGlobalHeader\n      >\n        <PageContentWithoutPadding>\n          <Header\n            orgSlug={orgSlug}\n            title={state.title}\n            dashboardTitle={dashboard.title}\n            goBackLocation={previousLocation}\n            onChangeTitle={newTitle => {\n              handleDisplayTypeOrTitleChange('title', newTitle);\n            }}\n          />\n          <Body>\n            <MainWrapper>\n              <Main>\n                <StyledPageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </StyledPageFilterBar>\n                <BuildSteps symbol=\"colored-numeric\">\n                  <VisualizationStep\n                    widget={currentWidget}\n                    organization={organization}\n                    pageFilters={pageFilters}\n                    displayType={state.displayType}\n                    error={state.errors?.displayType}\n                    onChange={newDisplayType => {\n                      handleDisplayTypeOrTitleChange('displayType', newDisplayType);\n                    }}\n                  />\n                  <DataSetStep\n                    dataSet={state.dataSet}\n                    displayType={state.displayType}\n                    onChange={handleDataSetChange}\n                    hasReleaseHealthFeature={hasReleaseHealthFeature}\n                  />\n                  {isTabularChart && (\n                    <ColumnsStep\n                      dataSet={state.dataSet}\n                      queries={state.queries}\n                      displayType={state.displayType}\n                      widgetType={widgetType}\n                      queryErrors={state.errors?.queries}\n                      onQueryChange={handleQueryChange}\n                      onYAxisOrColumnFieldChange={newFields => {\n                        handleYAxisOrColumnFieldChange(newFields, true);\n                      }}\n                      explodedFields={explodedFields}\n                      tags={tags}\n                      organization={organization}\n                    />\n                  )}\n                  {![DisplayType.TABLE].includes(state.displayType) && (\n                    <YAxisStep\n                      dataSet={state.dataSet}\n                      displayType={state.displayType}\n                      widgetType={widgetType}\n                      queryErrors={state.errors?.queries}\n                      onYAxisChange={newFields => {\n                        handleYAxisOrColumnFieldChange(newFields);\n                      }}\n                      aggregates={explodedAggregates}\n                      tags={tags}\n                      organization={organization}\n                    />\n                  )}\n                  <FilterResultsStep\n                    queries={state.queries}\n                    hideLegendAlias={hideLegendAlias}\n                    canAddSearchConditions={canAddSearchConditions}\n                    organization={organization}\n                    queryErrors={state.errors?.queries}\n                    onAddSearchConditions={handleAddSearchConditions}\n                    onQueryChange={handleQueryChange}\n                    onQueryRemove={handleQueryRemove}\n                    selection={pageFilters}\n                    widgetType={widgetType}\n                  />\n                  {widgetBuilderNewDesign && isTimeseriesChart && (\n                    <GroupByStep\n                      columns={columns\n                        .filter(field => !(field === 'equation|'))\n                        .map((field, index) =>\n                          explodeField({field, alias: fieldAliases[index]})\n                        )}\n                      onGroupByChange={handleGroupByChange}\n                      organization={organization}\n                      tags={tags}\n                      dataSet={state.dataSet}\n                    />\n                  )}\n                  {displaySortByStep && (\n                    <SortByStep\n                      limit={state.limit}\n                      displayType={state.displayType}\n                      queries={state.queries}\n                      dataSet={state.dataSet}\n                      widgetBuilderNewDesign={widgetBuilderNewDesign}\n                      error={state.errors?.orderby}\n                      onSortByChange={handleSortByChange}\n                      onLimitChange={handleLimitChange}\n                      organization={organization}\n                      widgetType={widgetType}\n                      tags={tags}\n                    />\n                  )}\n                </BuildSteps>\n              </Main>\n              <Footer\n                goBackLocation={previousLocation}\n                isEditing={isEditing}\n                onSave={handleSave}\n                onDelete={handleDelete}\n                invalidForm={isFormInvalid()}\n              />\n            </MainWrapper>\n            <Side>\n              <WidgetLibrary\n                organization={organization}\n                widgetBuilderNewDesign={widgetBuilderNewDesign}\n                onWidgetSelect={prebuiltWidget => {\n                  setLatestLibrarySelectionTitle(prebuiltWidget.title);\n                  setDataSetConfig(\n                    getDatasetConfig(prebuiltWidget.widgetType || WidgetType.DISCOVER)\n                  );\n                  setState({\n                    ...state,\n                    ...prebuiltWidget,\n                    dataSet: prebuiltWidget.widgetType\n                      ? WIDGET_TYPE_TO_DATA_SET[prebuiltWidget.widgetType]\n                      : DataSet.EVENTS,\n                    userHasModified: false,\n                  });\n                }}\n                bypassOverwriteModal={!state.userHasModified}\n              />\n            </Side>\n          </Body>\n        </PageContentWithoutPadding>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default withPageFilters(withTags(WidgetBuilder));\n\nconst PageContentWithoutPadding = styled(PageContent)`\n  padding: 0;\n`;\n\nconst StyledPageFilterBar = styled(PageFilterBar)`\n  margin-bottom: ${space(2)};\n`;\n\nconst BuildSteps = styled(List)`\n  gap: ${space(4)};\n  max-width: 100%;\n`;\n\nconst Body = styled(Layout.Body)`\n  && {\n    gap: 0;\n    padding: 0;\n  }\n\n  grid-template-rows: 1fr;\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: minmax(100px, auto) 400px;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: 1fr;\n  }\n`;\n\n// HACK: Since we add 30px of padding to the ListItems\n// there is 30px of overlap when the screen is just above 1200px.\n// When we're up to 1230px (1200 + 30 to account for the padding)\n// we decrease the width of ListItems by 30px\nconst Main = styled(Layout.Main)`\n  max-width: 1000px;\n  flex: 1;\n\n  padding: ${space(4)} ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    padding: ${space(4)};\n  }\n\n  @media (max-width: calc(${p => p.theme.breakpoints.large} + ${space(4)})) {\n    ${ListItem} {\n      width: calc(100% - ${space(4)});\n    }\n  }\n`;\n\nconst Side = styled(Layout.Side)`\n  padding: ${space(4)} ${space(2)};\n\n  @media (max-width: ${p => p.theme.breakpoints.large}) {\n    border-top: 1px solid ${p => p.theme.gray200};\n    grid-row: 2/2;\n    grid-column: 1/-1;\n    max-width: 100%;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    border-left: 1px solid ${p => p.theme.gray200};\n\n    /* to be consistent with Layout.Body in other verticals */\n    padding-right: ${space(4)};\n    max-width: 400px;\n  }\n`;\n\nconst MainWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n\n  @media (max-width: ${p => p.theme.breakpoints.large}) {\n    grid-column: 1/-1;\n  }\n`;\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport WidgetBuilder from './widgetBuilder';\n\ninterface WidgetBuilderProps\n  extends Omit<React.ComponentProps<typeof WidgetBuilder>, 'organization'> {}\n\nfunction WidgetBuilderContainer(props: WidgetBuilderProps) {\n  const organization = useOrganization();\n\n  return (\n    <Feature\n      features={['new-widget-builder-experience-design', 'dashboards-edit']}\n      organization={organization}\n      renderDisabled={() => (\n        <PageContent>\n          <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n        </PageContent>\n      )}\n    >\n      <WidgetBuilder {...props} organization={organization} />\n    </Feature>\n  );\n}\n\nexport {WidgetBuilderProps};\nexport default WidgetBuilderContainer;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport {getWidgetIcon} from 'sentry/views/dashboardsV2/widgetLibrary/widgetCard';\n\ninterface CardProps {\n  iconColor: string;\n  widget: WidgetTemplate;\n}\n\nexport function Card({widget, iconColor}: CardProps) {\n  const {title, description, displayType} = widget;\n  const Icon = getWidgetIcon(displayType);\n\n  return (\n    <Container>\n      <IconWrapper backgroundColor={iconColor}>\n        <Icon color=\"white\" />\n      </IconWrapper>\n      <Information>\n        <Heading>{title}</Heading>\n        <SubHeading>{description}</SubHeading>\n      </Information>\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: flex;\n  flex-direction: row;\n  gap: ${space(1)};\n`;\n\nconst Information = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Heading = styled('div')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: 500;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray500};\n`;\n\nconst SubHeading = styled('small')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst IconWrapper = styled('div')<{backgroundColor: string}>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: ${space(1)};\n  min-width: 40px;\n  height: 40px;\n  border-radius: ${p => p.theme.borderRadius};\n  background: ${p => p.backgroundColor};\n`;\n","import {t} from 'sentry/locale';\nimport {TOP_N} from 'sentry/utils/discover/types';\n\nimport {DisplayType, Widget, WidgetType} from '../types';\n\nexport type WidgetTemplate = Widget & {\n  description: string;\n};\n\nexport const DEFAULT_WIDGETS: Readonly<Array<WidgetTemplate>> = [\n  {\n    id: undefined,\n    title: t('Duration Distribution'),\n    description: t('Compare transaction durations across different percentiles.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: [\n          'p50(transaction.duration)',\n          'p75(transaction.duration)',\n          'p95(transaction.duration)',\n        ],\n        aggregates: [\n          'p50(transaction.duration)',\n          'p75(transaction.duration)',\n          'p95(transaction.duration)',\n        ],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('High Throughput Transactions'),\n    description: t('Top 5 transactions with the largest volume.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: ['transaction', 'count()'],\n        aggregates: ['count()'],\n        columns: ['transaction'],\n        orderby: '-count()',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Crash Rates for Recent Releases'),\n    description: t('Percentage of crashed sessions for latest releases.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.RELEASE,\n    interval: '5m',\n    limit: 8,\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['crash_rate(session)', 'release'],\n        aggregates: ['crash_rate(session)'],\n        columns: ['release'],\n        orderby: '-release',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Session Health'),\n    description: t('Number of abnormal,crashed, errored and healthy sessions.'),\n    displayType: DisplayType.TABLE,\n    widgetType: WidgetType.RELEASE,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['session.status', 'sum(session)'],\n        aggregates: ['sum(session)'],\n        columns: ['session.status'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('LCP by Country'),\n    description: t('Density map showing page load times by country.'),\n    displayType: DisplayType.WORLD_MAP,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'has:geo.country_code',\n        fields: ['p75(measurements.lcp)'],\n        aggregates: ['p75(measurements.lcp)'],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Miserable Users'),\n    description: t('Unique users who have experienced slow load times.'),\n    displayType: DisplayType.BIG_NUMBER,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['count_miserable(user,300)'],\n        aggregates: ['count_miserable(user,300)'],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Slow vs. Fast Transactions'),\n    description: t('Percentage breakdown of transaction durations over and under 300ms.'),\n    displayType: DisplayType.BAR,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: [\n          'equation|(count_if(transaction.duration,greater,300) / count()) * 100',\n          'equation|(count_if(transaction.duration,lessOrEquals,300) / count()) * 100',\n        ],\n        aggregates: [\n          'equation|(count_if(transaction.duration,greater,300) / count()) * 100',\n          'equation|(count_if(transaction.duration,lessOrEquals,300) / count()) * 100',\n        ],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Issues For Review'),\n    description: t('Most recently seen unresolved issues for review.'),\n    displayType: DisplayType.TABLE,\n    widgetType: WidgetType.ISSUE,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'is:unresolved is:for_review',\n        fields: ['issue', 'assignee', 'events', 'title'],\n        aggregates: [],\n        columns: ['issue', 'assignee', 'events', 'title'],\n        orderby: 'date',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Top Unhandled Error Types'),\n    description: t('Most frequently encountered unhandled errors.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'error.unhandled:true',\n        fields: ['error.type', 'count()'],\n        aggregates: ['count()'],\n        columns: ['error.type'],\n        orderby: '-count()',\n      },\n    ],\n  },\n  {\n    id: undefined,\n    title: t('Users Affected by Errors'),\n    description: t('Footprint of unique users affected by errors.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:error',\n        fields: ['count_unique(user)', 'count()'],\n        aggregates: ['count_unique(user)', 'count()'],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n];\n\nexport function getTopNConvertedDefaultWidgets(): Readonly<Array<WidgetTemplate>> {\n  return DEFAULT_WIDGETS.map(widget => {\n    if (widget.displayType === DisplayType.TOP_N) {\n      return {\n        ...widget,\n        displayType: DisplayType.AREA,\n        limit: TOP_N,\n      };\n    }\n    return widget;\n  });\n}\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\nimport space from 'sentry/styles/space';\n\nimport {DisplayType} from '../types';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  widget: WidgetTemplate;\n  ['data-test-id']?: string;\n};\n\nexport function getWidgetIcon(displayType: DisplayType) {\n  switch (displayType) {\n    case DisplayType.TABLE:\n      return IconMenu;\n    case DisplayType.WORLD_MAP:\n      return IconGlobe;\n    case DisplayType.BIG_NUMBER:\n      return IconNumber;\n    case DisplayType.BAR:\n      return IconGraphBar;\n    case DisplayType.TOP_N:\n      return IconArrow;\n    case DisplayType.AREA:\n      return IconGraphArea;\n    case DisplayType.LINE:\n    default:\n      return IconGraph;\n  }\n}\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  const [selected, setSelected] = useState(selectedWidgets.includes(widget));\n  const Icon = getWidgetIcon(widget.displayType);\n\n  return (\n    <StyledPanel\n      data-test-id={dataTestId}\n      selected={selected}\n      onClick={() => {\n        if (selected) {\n          const updatedWidgets = selectedWidgets.filter(\n            selectedWidget => widget !== selectedWidget\n          );\n          setSelectedWidgets(updatedWidgets);\n        } else {\n          const updatedWidgets = selectedWidgets.slice().concat(widget);\n          setSelectedWidgets(updatedWidgets);\n        }\n        setSelected(!!!selected);\n      }}\n    >\n      <PanelBody>\n        <TitleContainer>\n          <Icon size=\"xs\" />\n          <Title>{widget.title}</Title>\n        </TitleContainer>\n        <Description>{widget.description}</Description>\n      </PanelBody>\n    </StyledPanel>\n  );\n}\n\nconst Title = styled('div')`\n  padding-left: ${space(1)};\n  font-size: 16px;\n  line-height: 140%;\n  color: ${p => p.theme.gray500};\n`;\n\nconst TitleContainer = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  padding-bottom: ${space(0.5)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Description = styled('div')`\n  padding: 0 ${space(1)} ${space(1.5)} 36px;\n  font-size: 14px;\n  line-height: 21px;\n  color: ${p => p.theme.gray300};\n`;\n\ntype PanelProps = {\n  selected?: boolean;\n};\n\nconst StyledPanel = styled(Panel)<PanelProps>`\n  border: ${p =>\n    p.selected ? `2px solid ${p.theme.active}` : `1px solid ${p.theme.border}`};\n  margin: ${p => (p.selected ? '-1px' : 0)};\n  box-sizing: border-box;\n  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n`;\n\nexport default WidgetLibraryCard;\n"],"names":["FeatureFeedback","feedbackTypes","featureName","buttonProps","icon","onClick","async","mod","FeedbackModal","modalCss","openModal","deps","t","value","ref","useRef","useEffect","current","IssuesSearchBarContainer","tags","onSearch","onBlur","organization","query","selection","searchSource","api","useApi","tagValueLoader","key","search","orgId","slug","projectIds","projects","map","id","toString","endpointParams","start","getUtcDateString","datetime","end","statsPeriod","period","fetchTagValues","css","StyledIssueListSearchBar","conditions","sort","excludeEnvironment","supportedTags","placeholder","onSidebarToggle","maxSearchItems","MAX_SEARCH_ITEMS","savedSearchType","SavedSearchType","dropdownClassName","MAX_MENU_HEIGHT","IssuesSearchBar","withIssueTags","IssueListSearchBar","BuildStep","title","description","required","children","Wrapper","Heading","RequiredBadge","SubHeading","Content","ListItem","p","theme","gray500","gray300","space","breakpoints","small","red300","ColumnFields","displayType","fieldOptions","widgetType","fields","errors","onChange","filterAggregateParameters","filterPrimaryOptions","noFieldsMessage","inline","error","find","flexibleControlStateSize","stacked","DisplayType","ColumnCollectionEdit","columns","source","showAliasField","features","includes","slice","length","newColumns","ColumnEditCollection","ReleaseColumnFields","explodedFields","queryErrors","onYAxisOrColumnFieldChange","datasetConfig","getDatasetConfig","WidgetType","undefined","getTableFieldOptions","option","kind","FieldValueKind","ColumnsStep","dataSet","onQueryChange","queries","DataSet","tct","fieldTagLink","href","functionLink","newFields","fieldStrings","generateFieldAsString","splitFields","getColumnsAndAggregatesAsStrings","newQuery","cloneDeep","aggregates","fieldAliases","DATASET_CHOICES","DataSetStep","hasReleaseHealthFeature","disabledChoices","push","link","DataSetChoices","label","choices","Fragment","type","newDataSet","RadioGroup","EventsSearchBar","Search","useFormWrapper","maxQueryLength","MAX_QUERY_LENGTH","maxMenuHeight","SearchBar","FilterResultsStep","canAddSearchConditions","onQueryRemove","onAddSearchConditions","hideLegendAlias","blurTimeoutRef","window","clearTimeout","handleSearch","useCallback","queryIndex","field","setTimeout","handleBlur","QueryField","SearchConditionsWrapper","orgSlug","LegendAliasInput","name","event","target","size","borderless","isCircled","Input","Field","onDelete","forwardRef","listeners","attributes","canDelete","canDrag","style","isDragging","QueryFieldWrapper","DragAndReorderButton","fieldValue","Button","SortableQueryField","dragId","props","useTheme","setNodeRef","transform","transition","useSortable","CSS","zIndex","height","border","borderRadius","EMPTY_FIELD","GroupBySelector","activeId","setActiveId","useState","handleSelect","index","defined","hasOnlySingleColumnWithValue","columnFieldsAsString","filteredFieldOptions","columnsAsFieldOptions","useMemo","Object","keys","reduce","acc","optionInColumnsIndex","findIndex","column","meta","items","_column","String","StyledField","collisionDetection","closestCenter","onDragStart","active","onDragEnd","over","getIndex","indexOf","bind","activeIndex","overIndex","arrayMove","onDragCancel","strategy","verticalListSortingStrategy","SortableQueryFields","splice","handleRemove","dropAnimation","Ghost","Number","AddGroupButton","background","GroupByStep","onGroupByChange","generateReleaseWidgetFieldOptions","SESSIONS_TAGS","measurements","getAmendedFieldOptions","SortBySelectors","values","sortByOptions","disabledReason","disabledSort","disabledSortDirection","hasGroupBy","useOrganization","showCustomEquation","setShowCustomEquation","customEquation","setCustomEquation","sortBy","EQUATION_PREFIX","sortDirection","isSortingByEquation","isEquation","trimStart","disabled","menuPlacement","options","sortDirections","uniqBy","explodeField","SESSIONS_FIELDS","parsedValue","CUSTOM_EQUATION_VALUE","startsWith","alias","isEquationAlias","isSortingByCustomEquation","ArithmeticInputWrapper","getEquation","onUpdate","newValue","hideFieldOptions","SortByStep","onSortByChange","widgetBuilderNewDesign","limit","onLimitChange","orderBy","orderby","strippedOrderBy","maxLimit","getResultsLimit","isTimeseriesChart","columnSet","Set","ResultsLimitSelector","Array","resultLimit","tn","generateIssueWidgetOrderOptions","generateOrderOptions","SortDirection","newOrderBy","has","filterReleaseSortOptions","IssueSortOptions","SelectControl","VisualizationStep","pageFilters","widget","debouncedWidget","setDebouncedWidget","previousWidget","usePrevious","debounceWidget","debounce","shouldCancelUpdates","DEFAULT_DEBOUNCE_DURATION","isEqual","displayOptions","displayTypes","styles","singleValue","provided","width","VisualizationWrapper","isEditing","widgetLimitReached","renderErrorMessage","errorMessage","isSorting","currentWidgetDragging","noLazyLoad","showStoredAlert","WidgetCardPanel","TableCell","AddButton","onAdd","DeleteButton","YAxisSelector","isReleaseWidget","doNotValidateYAxis","functionName","function","primaryOutput","aggregateFunctionOutputType","isLegalYAxisType","dataType","fieldError","generateFieldOptions","hideAddYAxisButtons","i","fieldIndex","newAggregates","handleChangeQueryField","otherColumns","preventDefault","handleRemoveQueryField","Actions","gap","ButtonBar","ReleaseYAxisSelector","YAxisStep","onYAxisChange","Footer","goBackLocation","onSave","invalidForm","to","priority","message","onConfirm","medium","gray200","Header","dashboardTitle","onChangeTitle","crumbs","maxLength","external","WidgetLibrary","bypassOverwriteModal","onWidgetSelect","defaultWidgets","getTopNConvertedDefaultWidgets","getLibrarySelectionHandler","iconColor","openWidgetBuilderOverwriteModal","filter","WidgetLibraryWrapper","charts","getColorPalette","normalizedQueries","normalizeQueries","newWidget","CardHoverWrapper","gray100","WIDGET_TYPE_TO_DATA_SET","DATA_SET_TO_WIDGET_TYPE","WidgetBuilder","dashboard","params","location","route","router","widgetIndex","dashboardId","defaultTitle","defaultTableColumns","defaultWidgetQuery","getParsedDefaultWidgetQuery","filteredDashboardWidgets","widgets","widgetIndexNum","isValidWidgetIndex","isInteger","utc","notDashboardsOrigin","DashboardWidgetSource","isSubmitting","setIsSubmitting","setDataSetConfig","state","setState","defaultState","interval","loading","dashboards","userHasModified","getIsTimeseriesChart","widgetToBeUpdated","setWidgetToBeUpdated","latestLibrarySelectionTitle","setLatestLibrarySelectionTitle","trackAdvancedAnalyticsEvent","new_widget","objectIsEmpty","loadOrganizationTags","widgetFromDashboard","newDisplayType","newLimit","DEFAULT_RESULTS_LIMIT","promise","requestPromise","method","prevState","addErrorMessage","handleXhrErrorResponse","fetchDashboards","selectedDashboard","NEW_DASHBOARD_ID","fetchOrgMembers","setRouteLeaveHook","currentWidget","currentDashboardId","queryParamsWithoutSource","omit","previousLocation","pathname","isEmpty","isTabularChart","getUpdateWidgetIndex","tempId","handleDisplayTypeOrTitleChange","from","widget_type","newState","set","supportedDisplayTypes","normalized","forEach","tableQuery","getColumnsAndAggregates","Math","min","handleQueryChange","handleYAxisOrColumnFieldChange","isColumn","stripDerivedMetricsPrefix","columnsAndAggregates","disableSortBy","newQueries","orderbyPrefix","rawOrderby","prevAggregateFieldStrings","aggregate","defaultReleaseHealthAggregate","SessionField","newOrderByValue","stripEquationPrefix","isFromAggregates","isCustomEquation","isUsedInGrouping","keepCurrentOrderby","firstAggregateAlias","getNumEquations","groupByFields","goToDashboards","pathQuery","explodedColumns","explodedAggregates","groupByValueSelected","some","displaySortByStep","defaultSelection","DEFAULT_STATS_PERIOD","hideGlobalHeader","PageContentWithoutPadding","newTitle","Body","MainWrapper","Main","StyledPageFilterBar","condensed","alignDropdown","BuildSteps","symbol","config","aggregateAliasFieldStrings","getAggregateAlias","orderOptions","orderOption","isDescending","prefix","newSortBy","widgetData","assignTempId","layout","validateWidget","mapErrors","responseJSON","dataIsValid","queryData","queryNames","queryConditions","queryFields","queryOrderby","project","environment","environments","addSuccessMessage","submitFromSelectedDashboard","nextWidgetList","updateWidgetIndex","nextWidgetData","getDefaultWidgetHeight","enforceWidgetHeightValues","generateWidgetsAfterCompaction","data_set","Side","prebuiltWidget","withPageFilters","withTags","PageContent","PageFilterBar","List","Layout","large","xlarge","WidgetBuilderContainer","renderDisabled","Card","Icon","getWidgetIcon","Container","IconWrapper","backgroundColor","color","Information","fontSizeLarge","DEFAULT_WIDGETS","TOP_N","IconMenu","IconGlobe","IconNumber","IconGraphBar","IconArrow","IconGraphArea","IconGraph","WidgetLibraryCard","selectedWidgets","setSelectedWidgets","dataTestId","selected","setSelected","StyledPanel","updatedWidgets","selectedWidget","concat","TitleContainer","Title","Description","Panel"],"sourceRoot":""}