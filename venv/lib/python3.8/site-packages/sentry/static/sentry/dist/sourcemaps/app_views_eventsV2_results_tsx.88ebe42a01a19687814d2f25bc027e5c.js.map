{"version":3,"file":"chunks/app_views_eventsV2_results_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/eventsChart.tsx","webpack:///./app/components/charts/optionSelector.tsx","webpack:///./app/components/charts/releaseSeries.tsx","webpack:///./app/components/dataExport.tsx","webpack:///./app/utils/performance/spanOperationBreakdowns/constants.tsx","webpack:///./app/views/eventsV2/breadcrumb.tsx","webpack:///./app/views/eventsV2/chartFooter.tsx","webpack:///./app/views/eventsV2/resultsChart.tsx","webpack:///./app/views/eventsV2/eventInputName.tsx","webpack:///./app/views/eventsV2/savedQuery/index.tsx","webpack:///./app/views/eventsV2/resultsHeader.tsx","webpack:///./app/views/eventsV2/table/columnEditModal.tsx","webpack:///./app/utils/useTags.tsx","webpack:///./app/views/eventsV2/table/tableActions.tsx","webpack:///./app/views/eventsV2/table/tableView.tsx","webpack:///./app/views/eventsV2/table/index.tsx","webpack:///./app/views/eventsV2/results.tsx","webpack:///./app/views/eventsV2/tags.tsx","webpack:///./app/views/performance/trends/types.tsx","webpack:///./app/views/performance/trends/utils.tsx","webpack:///./app/views/performance/utils.tsx"],"sourcesContent":["import * as React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport type {\n  EChartsOption,\n  LegendComponentOption,\n  XAXisComponentOption,\n  YAXisComponentOption,\n} from 'echarts';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport {AreaChart, AreaChartProps} from 'sentry/components/charts/areaChart';\nimport {BarChart, BarChartProps} from 'sentry/components/charts/barChart';\nimport ChartZoom, {ZoomRenderProps} from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {\n  getInterval,\n  processTableResults,\n  RELEASE_LINES_THRESHOLD,\n} from 'sentry/components/charts/utils';\nimport {WorldMapChart, WorldMapChartProps} from 'sentry/components/charts/worldMapChart';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport {\n  aggregateMultiPlotType,\n  getEquation,\n  isEquation,\n} from 'sentry/utils/discover/fields';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\n\nimport EventsGeoRequest from './eventsGeoRequest';\nimport EventsRequest from './eventsRequest';\n\ntype ChartComponent =\n  | React.ComponentType<BarChartProps>\n  | React.ComponentType<AreaChartProps>\n  | React.ComponentType<LineChartProps>\n  | React.ComponentType<WorldMapChartProps>;\n\ntype ChartProps = {\n  currentSeriesNames: string[];\n  loading: boolean;\n  previousSeriesNames: string[];\n  reloading: boolean;\n  stacked: boolean;\n  tableData: TableDataWithTitle[];\n  theme: Theme;\n  timeseriesData: Series[];\n  yAxis: string;\n  zoomRenderProps: ZoomRenderProps;\n  chartComponent?: ChartComponent;\n  chartOptions?: Omit<EChartsOption, 'xAxis' | 'yAxis'> & {\n    xAxis?: XAXisComponentOption;\n    yAxis?: YAXisComponentOption;\n  };\n  colors?: string[];\n  /**\n   * By default, only the release series is disableable. This adds\n   * a list of series names that are also disableable.\n   */\n  disableableSeries?: string[];\n  fromDiscover?: boolean;\n  height?: number;\n  interval?: string;\n  legendOptions?: LegendComponentOption;\n  minutesThresholdToDisplaySeconds?: number;\n  previousSeriesTransformer?: (series?: Series | null) => Series | null | undefined;\n  previousTimeseriesData?: Series[] | null;\n  referrer?: string;\n  releaseSeries?: Series[];\n  /**\n   * A callback to allow for post-processing of the series data.\n   * Can be used to rename series or even insert a new series.\n   */\n  seriesTransformer?: (series: Series[]) => Series[];\n  showDaily?: boolean;\n  showLegend?: boolean;\n  timeframe?: {end: number; start: number};\n  topEvents?: number;\n};\n\ntype State = {\n  forceUpdate: boolean;\n  seriesSelection: Record<string, boolean>;\n};\n\nclass Chart extends React.Component<ChartProps, State> {\n  state: State = {\n    seriesSelection: {},\n    forceUpdate: false,\n  };\n\n  shouldComponentUpdate(nextProps: ChartProps, nextState: State) {\n    if (nextState.forceUpdate) {\n      return true;\n    }\n\n    if (!isEqual(this.state.seriesSelection, nextState.seriesSelection)) {\n      return true;\n    }\n\n    if (nextProps.reloading || !nextProps.timeseriesData) {\n      return false;\n    }\n\n    if (\n      isEqual(this.props.timeseriesData, nextProps.timeseriesData) &&\n      isEqual(this.props.releaseSeries, nextProps.releaseSeries) &&\n      isEqual(this.props.previousTimeseriesData, nextProps.previousTimeseriesData) &&\n      isEqual(this.props.tableData, nextProps.tableData)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getChartComponent(): ChartComponent {\n    const {showDaily, timeseriesData, yAxis, chartComponent} = this.props;\n\n    if (defined(chartComponent)) {\n      return chartComponent;\n    }\n\n    if (showDaily) {\n      return BarChart;\n    }\n\n    if (timeseriesData.length > 1) {\n      switch (aggregateMultiPlotType(yAxis)) {\n        case 'line':\n          return LineChart;\n        case 'area':\n          return AreaChart;\n        default:\n          throw new Error(`Unknown multi plot type for ${yAxis}`);\n      }\n    }\n\n    return AreaChart;\n  }\n\n  handleLegendSelectChanged = legendChange => {\n    const {disableableSeries = []} = this.props;\n    const {selected} = legendChange;\n    const seriesSelection = Object.keys(selected).reduce((state, key) => {\n      // we only want them to be able to disable the Releases&Other series,\n      // and not any of the other possible series here\n      const disableable =\n        ['Releases', 'Other'].includes(key) || disableableSeries.includes(key);\n      state[key] = disableable ? selected[key] : true;\n      return state;\n    }, {});\n\n    // we have to force an update here otherwise ECharts will\n    // update its internal state and disable the series\n    this.setState({seriesSelection, forceUpdate: true}, () =>\n      this.setState({forceUpdate: false})\n    );\n  };\n\n  render() {\n    const {\n      theme,\n      loading: _loading,\n      reloading: _reloading,\n      yAxis,\n      releaseSeries,\n      zoomRenderProps,\n      timeseriesData,\n      previousTimeseriesData,\n      showLegend,\n      legendOptions,\n      chartOptions: chartOptionsProp,\n      currentSeriesNames,\n      previousSeriesNames,\n      seriesTransformer,\n      previousSeriesTransformer,\n      colors,\n      height,\n      timeframe,\n      topEvents,\n      tableData,\n      fromDiscover,\n      ...props\n    } = this.props;\n    const {seriesSelection} = this.state;\n\n    let Component = this.getChartComponent();\n\n    if (Component === WorldMapChart) {\n      const {data, title} = processTableResults(tableData);\n      const tableSeries = [\n        {\n          seriesName: title,\n          data,\n        },\n      ];\n      return <WorldMapChart series={tableSeries} fromDiscover={fromDiscover} />;\n    }\n\n    Component = Component as Exclude<\n      ChartComponent,\n      React.ComponentType<WorldMapChartProps>\n    >;\n\n    const data = [\n      ...(currentSeriesNames.length > 0 ? currentSeriesNames : [t('Current')]),\n      ...(previousSeriesNames.length > 0 ? previousSeriesNames : [t('Previous')]),\n    ];\n\n    const releasesLegend = t('Releases');\n\n    const hasOther = topEvents && topEvents + 1 === timeseriesData.length;\n    if (hasOther) {\n      data.push('Other');\n    }\n\n    if (Array.isArray(releaseSeries)) {\n      data.push(releasesLegend);\n    }\n\n    // Temporary fix to improve performance on pages with a high number of releases.\n    const releases = releaseSeries && releaseSeries[0];\n    const hideReleasesByDefault =\n      Array.isArray(releaseSeries) &&\n      (releases as any)?.markLine?.data &&\n      (releases as any).markLine.data.length >= RELEASE_LINES_THRESHOLD;\n\n    const selected = !Array.isArray(releaseSeries)\n      ? seriesSelection\n      : Object.keys(seriesSelection).length === 0 && hideReleasesByDefault\n      ? {[releasesLegend]: false}\n      : seriesSelection;\n\n    const legend = showLegend\n      ? {\n          right: 16,\n          top: 12,\n          data,\n          selected,\n          ...(legendOptions ?? {}),\n        }\n      : undefined;\n\n    let series = Array.isArray(releaseSeries)\n      ? [...timeseriesData, ...releaseSeries]\n      : timeseriesData;\n    let previousSeries = previousTimeseriesData;\n\n    if (seriesTransformer) {\n      series = seriesTransformer(series);\n    }\n\n    if (previousSeriesTransformer) {\n      previousSeries = previousSeries?.map(\n        prev => previousSeriesTransformer(prev) as Series\n      );\n    }\n    const chartColors = timeseriesData.length\n      ? colors?.slice(0, series.length) ?? [\n          ...theme.charts.getColorPalette(timeseriesData.length - 2 - (hasOther ? 1 : 0)),\n        ]\n      : undefined;\n    if (chartColors && chartColors.length && hasOther) {\n      chartColors.push(theme.chartOther);\n    }\n    const chartOptions = {\n      colors: chartColors,\n      grid: {\n        left: '24px',\n        right: '24px',\n        top: '32px',\n        bottom: '12px',\n      },\n      seriesOptions: {\n        showSymbol: false,\n      },\n      tooltip: {\n        trigger: 'axis' as const,\n        truncate: 80,\n        valueFormatter: (value: number) => tooltipFormatter(value, yAxis),\n      },\n      xAxis: timeframe\n        ? {\n            min: timeframe.start,\n            max: timeframe.end,\n          }\n        : undefined,\n      yAxis: {\n        axisLabel: {\n          color: theme.chartLabel,\n          formatter: (value: number) => axisLabelFormatter(value, yAxis),\n        },\n      },\n      ...(chartOptionsProp ?? {}),\n      animation: typeof Component === typeof BarChart ? false : undefined,\n    };\n\n    return (\n      <Component\n        {...props}\n        {...zoomRenderProps}\n        {...chartOptions}\n        legend={legend}\n        onLegendSelectChanged={this.handleLegendSelectChanged}\n        series={series}\n        previousPeriod={previousSeries ? previousSeries : undefined}\n        height={height}\n      />\n    );\n  }\n}\n\nconst ThemedChart = withTheme(Chart);\n\nexport type EventsChartProps = {\n  api: Client;\n  /**\n   * Absolute end date.\n   */\n  end: DateString;\n  /**\n   * Environment condition.\n   */\n  environments: string[];\n  organization: OrganizationSummary;\n  /**\n   * Project ids\n   */\n  projects: number[];\n  /**\n   * The discover query string to find events with.\n   */\n  query: string;\n  router: InjectedRouter;\n  /**\n   * Absolute start date.\n   */\n  start: DateString;\n  /**\n   * The aggregate/metric to plot.\n   */\n  yAxis: string | string[];\n  /**\n   * Markup for optional chart header\n   */\n  chartHeader?: React.ReactNode;\n  /**\n   * Override the default color palette.\n   */\n  colors?: string[];\n  confirmedQuery?: boolean;\n  /**\n   * Name of the series\n   */\n  currentSeriesName?: string;\n  /**\n   * Don't show the previous period's data. Will automatically disable\n   * when start/end are used.\n   */\n  disablePrevious?: boolean;\n  /**\n   * Don't show the release marklines.\n   */\n  disableReleases?: boolean;\n  /**\n   * A list of release names to visually emphasize. Can only be used when `disableReleases` is false.\n   */\n  emphasizeReleases?: string[];\n  /**\n   * The fields that act as grouping conditions when generating a topEvents chart.\n   */\n  field?: string[];\n  /**\n   * The interval resolution for a chart e.g. 1m, 5m, 1d\n   */\n  interval?: string;\n  /**\n   * Order condition when showing topEvents\n   */\n  orderby?: string;\n  /**\n   * Relative datetime expression. eg. 14d\n   */\n  period?: string | null;\n  preserveReleaseQueryParams?: boolean;\n  /**\n   * Name of the previous series\n   */\n  previousSeriesName?: string;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  releaseQueryExtra?: Query;\n  /**\n   * Override the interval calculation and show daily results.\n   */\n  showDaily?: boolean;\n  /**\n   * Fetch n top events as dictated by the field and orderby props.\n   */\n  topEvents?: number;\n  /**\n   * Chart zoom will change 'pageStart' instead of 'start'\n   */\n  usePageZoom?: boolean;\n  /**\n   * Should datetimes be formatted in UTC?\n   */\n  utc?: boolean | null;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n} & Pick<\n  ChartProps,\n  | 'seriesTransformer'\n  | 'previousSeriesTransformer'\n  | 'showLegend'\n  | 'minutesThresholdToDisplaySeconds'\n  | 'disableableSeries'\n  | 'legendOptions'\n  | 'chartOptions'\n  | 'chartComponent'\n  | 'height'\n  | 'fromDiscover'\n>;\n\ntype ChartDataProps = {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  zoomRenderProps: ZoomRenderProps;\n  previousTimeseriesData?: Series[] | null;\n  releaseSeries?: Series[];\n  results?: Series[];\n  tableData?: TableDataWithTitle[];\n  timeframe?: {end: number; start: number};\n  timeseriesData?: Series[];\n  topEvents?: number;\n};\n\nclass EventsChart extends React.Component<EventsChartProps> {\n  isStacked() {\n    const {topEvents, yAxis} = this.props;\n    return (\n      (typeof topEvents === 'number' && topEvents > 0) ||\n      (Array.isArray(yAxis) && yAxis.length > 1)\n    );\n  }\n\n  render() {\n    const {\n      api,\n      organization,\n      period,\n      utc,\n      query,\n      router,\n      start,\n      end,\n      projects,\n      environments,\n      showLegend,\n      minutesThresholdToDisplaySeconds,\n      yAxis,\n      disablePrevious,\n      disableReleases,\n      emphasizeReleases,\n      currentSeriesName: currentName,\n      previousSeriesName: previousName,\n      seriesTransformer,\n      previousSeriesTransformer,\n      field,\n      interval,\n      showDaily,\n      topEvents,\n      orderby,\n      confirmedQuery,\n      colors,\n      chartHeader,\n      legendOptions,\n      chartOptions,\n      preserveReleaseQueryParams,\n      releaseQueryExtra,\n      disableableSeries,\n      chartComponent,\n      usePageZoom,\n      height,\n      withoutZerofill,\n      fromDiscover,\n      ...props\n    } = this.props;\n\n    // Include previous only on relative dates (defaults to relative if no start and end)\n    const includePrevious = !disablePrevious && !start && !end;\n\n    const yAxisArray = decodeList(yAxis);\n    const yAxisSeriesNames = yAxisArray.map(name => {\n      let yAxisLabel = name && isEquation(name) ? getEquation(name) : name;\n      if (yAxisLabel && yAxisLabel.length > 60) {\n        yAxisLabel = yAxisLabel.substr(0, 60) + '...';\n      }\n      return yAxisLabel;\n    });\n\n    const previousSeriesNames = previousName\n      ? [previousName]\n      : yAxisSeriesNames.map(name => t('previous %s', name));\n    const currentSeriesNames = currentName ? [currentName] : yAxisSeriesNames;\n\n    const intervalVal = showDaily ? '1d' : interval || getInterval(this.props, 'high');\n\n    let chartImplementation = ({\n      zoomRenderProps,\n      releaseSeries,\n      errored,\n      loading,\n      reloading,\n      results,\n      timeseriesData,\n      previousTimeseriesData,\n      timeframe,\n      tableData,\n    }: ChartDataProps) => {\n      if (errored) {\n        return (\n          <ErrorPanel>\n            <IconWarning color=\"gray300\" size=\"lg\" />\n          </ErrorPanel>\n        );\n      }\n      const seriesData = results ? results : timeseriesData;\n\n      return (\n        <TransitionChart\n          loading={loading}\n          reloading={reloading}\n          height={height ? `${height}px` : undefined}\n        >\n          <TransparentLoadingMask visible={reloading} />\n\n          {React.isValidElement(chartHeader) && chartHeader}\n\n          <ThemedChart\n            zoomRenderProps={zoomRenderProps}\n            loading={loading}\n            reloading={reloading}\n            showLegend={showLegend}\n            minutesThresholdToDisplaySeconds={minutesThresholdToDisplaySeconds}\n            releaseSeries={releaseSeries || []}\n            timeseriesData={seriesData ?? []}\n            previousTimeseriesData={previousTimeseriesData}\n            currentSeriesNames={currentSeriesNames}\n            previousSeriesNames={previousSeriesNames}\n            seriesTransformer={seriesTransformer}\n            previousSeriesTransformer={previousSeriesTransformer}\n            stacked={this.isStacked()}\n            yAxis={yAxisArray[0]}\n            showDaily={showDaily}\n            colors={colors}\n            legendOptions={legendOptions}\n            chartOptions={chartOptions}\n            disableableSeries={disableableSeries}\n            chartComponent={chartComponent}\n            height={height}\n            timeframe={timeframe}\n            topEvents={topEvents}\n            tableData={tableData ?? []}\n            fromDiscover={fromDiscover}\n          />\n        </TransitionChart>\n      );\n    };\n\n    if (!disableReleases) {\n      const previousChart = chartImplementation;\n      chartImplementation = chartProps => (\n        <ReleaseSeries\n          utc={utc}\n          period={period}\n          start={start}\n          end={end}\n          projects={projects}\n          environments={environments}\n          emphasizeReleases={emphasizeReleases}\n          preserveQueryParams={preserveReleaseQueryParams}\n          queryExtra={releaseQueryExtra}\n        >\n          {({releaseSeries}) => previousChart({...chartProps, releaseSeries})}\n        </ReleaseSeries>\n      );\n    }\n\n    return (\n      <ChartZoom\n        router={router}\n        period={period}\n        start={start}\n        end={end}\n        utc={utc}\n        usePageDate={usePageZoom}\n        {...props}\n      >\n        {zoomRenderProps => {\n          if (chartComponent === WorldMapChart) {\n            return (\n              <EventsGeoRequest\n                api={api}\n                organization={organization}\n                yAxis={yAxis}\n                query={query}\n                orderby={orderby}\n                projects={projects}\n                period={period}\n                start={start}\n                end={end}\n                environments={environments}\n                referrer={props.referrer}\n              >\n                {({errored, loading, reloading, tableData}) =>\n                  chartImplementation({\n                    errored,\n                    loading,\n                    reloading,\n                    zoomRenderProps,\n                    tableData,\n                  })\n                }\n              </EventsGeoRequest>\n            );\n          }\n          return (\n            <EventsRequest\n              {...props}\n              api={api}\n              organization={organization}\n              period={period}\n              project={projects}\n              environment={environments}\n              start={start}\n              end={end}\n              interval={intervalVal}\n              query={query}\n              includePrevious={includePrevious}\n              currentSeriesNames={currentSeriesNames}\n              previousSeriesNames={previousSeriesNames}\n              yAxis={yAxis}\n              field={field}\n              orderby={orderby}\n              topEvents={topEvents}\n              confirmedQuery={confirmedQuery}\n              partial\n              // Cannot do interpolation when stacking series\n              withoutZerofill={withoutZerofill && !this.isStacked()}\n              userModified={decodeScalar(router.location.query.userModified)}\n            >\n              {eventData => {\n                return chartImplementation({\n                  ...eventData,\n                  zoomRenderProps,\n                });\n              }}\n            </EventsRequest>\n          );\n        }}\n      </ChartZoom>\n    );\n  }\n}\n\nexport default EventsChart;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport Truncate from 'sentry/components/truncate';\nimport {SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\ntype BaseProps = React.ComponentProps<typeof CompactSelect> & {\n  options: SelectValue<string>[];\n  title: string;\n  featureType?: 'alpha' | 'beta' | 'new';\n};\n\ntype SingleProps = BaseProps & {\n  onChange: (value: string) => void;\n  selected: string;\n  multiple?: false;\n};\ntype MultipleProps = BaseProps & {\n  multiple: true;\n  onChange: (value: string[]) => void;\n  selected: string[];\n};\n\nfunction OptionSelector({\n  options,\n  onChange,\n  selected,\n  title,\n  featureType,\n  multiple,\n  ...rest\n}: SingleProps | MultipleProps) {\n  const mappedOptions = useMemo(() => {\n    return options.map(opt => ({\n      ...opt,\n      label: <Truncate value={String(opt.label)} maxLength={60} expandDirection=\"left\" />,\n    }));\n  }, [options]);\n\n  function onValueChange(option) {\n    onChange(multiple ? option.map(o => o.value) : option.value);\n  }\n\n  function isOptionDisabled(option) {\n    return (\n      // Option is explicitly marked as disabled\n      option.disabled ||\n      // The user has reached the maximum number of selections (3), and the option hasn't\n      // yet been selected. These options should be disabled to visually indicate that the\n      // user has reached the max.\n      (multiple && selected.length === 3 && !selected.includes(option.value))\n    );\n  }\n\n  return (\n    <CompactSelect\n      options={mappedOptions}\n      value={selected}\n      onChange={onValueChange}\n      isOptionDisabled={isOptionDisabled}\n      multiple={multiple}\n      triggerProps={{\n        size: 'small',\n        borderless: true,\n        prefix: (\n          <Fragment>\n            {title}\n            {defined(featureType) ? <StyledFeatureBadge type={featureType} /> : null}\n          </Fragment>\n        ),\n      }}\n      placement=\"bottom right\"\n      {...rest}\n    />\n  );\n}\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin-left: 0px;\n`;\n\nexport default OptionSelector;\n","import {Component} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport partition from 'lodash/partition';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {t} from 'sentry/locale';\nimport {DateString, Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {escape} from 'sentry/utils';\nimport {getFormattedDate, getUtcDateString} from 'sentry/utils/dates';\nimport {formatVersion} from 'sentry/utils/formatters';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport {Theme} from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype ReleaseMetaBasic = {\n  date: string;\n  version: string;\n};\n\ntype ReleaseConditions = {\n  end: DateString;\n  environment: Readonly<string[]>;\n  project: Readonly<number[]>;\n  start: DateString;\n  cursor?: string;\n  query?: string;\n  statsPeriod?: string | null;\n};\n\n// This is not an exported action/function because releases list uses AsyncComponent\n// and this is not re-used anywhere else afaict\nfunction getOrganizationReleases(\n  api: Client,\n  organization: Organization,\n  conditions: ReleaseConditions\n) {\n  const query = {};\n  Object.keys(conditions).forEach(key => {\n    let value = conditions[key];\n    if (value && (key === 'start' || key === 'end')) {\n      value = getUtcDateString(value);\n    }\n    if (value) {\n      query[key] = value;\n    }\n  });\n  api.clear();\n  return api.requestPromise(`/organizations/${organization.slug}/releases/stats/`, {\n    includeAllArgs: true,\n    method: 'GET',\n    query,\n  }) as Promise<[ReleaseMetaBasic[], any, ResponseMeta]>;\n}\n\ntype Props = WithRouterProps & {\n  api: Client;\n  children: (s: State) => React.ReactNode;\n  end: DateString;\n  environments: Readonly<string[]>;\n  organization: Organization;\n  projects: Readonly<number[]>;\n  start: DateString;\n  theme: Theme;\n  emphasizeReleases?: string[];\n  memoized?: boolean;\n  period?: string | null;\n  preserveQueryParams?: boolean;\n  query?: string;\n  queryExtra?: Query;\n  releases?: ReleaseMetaBasic[] | null;\n  tooltip?: Exclude<Parameters<typeof MarkLine>[0], undefined>['tooltip'];\n  utc?: boolean | null;\n};\n\ntype State = {\n  releaseSeries: Series[];\n  releases: ReleaseMetaBasic[] | null;\n};\n\nclass ReleaseSeries extends Component<Props, State> {\n  state: State = {\n    releases: null,\n    releaseSeries: [],\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {releases} = this.props;\n\n    if (releases) {\n      // No need to fetch releases if passed in from props\n      this.setReleasesWithSeries(releases);\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !isEqual(prevProps.projects, this.props.projects) ||\n      !isEqual(prevProps.environments, this.props.environments) ||\n      !isEqual(prevProps.start, this.props.start) ||\n      !isEqual(prevProps.end, this.props.end) ||\n      !isEqual(prevProps.period, this.props.period) ||\n      !isEqual(prevProps.query, this.props.query)\n    ) {\n      this.fetchData();\n    } else if (!isEqual(prevProps.emphasizeReleases, this.props.emphasizeReleases)) {\n      this.setReleasesWithSeries(this.state.releases);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.props.api.clear();\n  }\n\n  _isMounted: boolean = false;\n\n  getOrganizationReleasesMemoized = memoize(\n    (api: Client, organization: Organization, conditions: ReleaseConditions) =>\n      getOrganizationReleases(api, organization, conditions),\n    (_, __, conditions) =>\n      Object.values(conditions)\n        .map(val => JSON.stringify(val))\n        .join('-')\n  );\n\n  async fetchData() {\n    const {\n      api,\n      organization,\n      projects,\n      environments,\n      period,\n      start,\n      end,\n      memoized,\n      query,\n    } = this.props;\n    const conditions: ReleaseConditions = {\n      start,\n      end,\n      project: projects,\n      environment: environments,\n      statsPeriod: period,\n      query,\n    };\n    let hasMore = true;\n    const releases: ReleaseMetaBasic[] = [];\n    while (hasMore) {\n      try {\n        const getReleases = memoized\n          ? this.getOrganizationReleasesMemoized\n          : getOrganizationReleases;\n        const [newReleases, , resp] = await getReleases(api, organization, conditions);\n        releases.push(...newReleases);\n        if (this._isMounted) {\n          this.setReleasesWithSeries(releases);\n        }\n\n        const pageLinks = resp?.getResponseHeader('Link');\n        if (pageLinks) {\n          const paginationObject = parseLinkHeader(pageLinks);\n          hasMore = paginationObject?.next?.results ?? false;\n          conditions.cursor = paginationObject.next.cursor;\n        } else {\n          hasMore = false;\n        }\n      } catch {\n        addErrorMessage(t('Error fetching releases'));\n        hasMore = false;\n      }\n    }\n  }\n\n  setReleasesWithSeries(releases) {\n    const {emphasizeReleases = []} = this.props;\n    const releaseSeries: Series[] = [];\n\n    if (emphasizeReleases.length) {\n      const [unemphasizedReleases, emphasizedReleases] = partition(\n        releases,\n        release => !emphasizeReleases.includes(release.version)\n      );\n      if (unemphasizedReleases.length) {\n        releaseSeries.push(this.getReleaseSeries(unemphasizedReleases, {type: 'dotted'}));\n      }\n      if (emphasizedReleases.length) {\n        releaseSeries.push(\n          this.getReleaseSeries(emphasizedReleases, {\n            opacity: 0.8,\n          })\n        );\n      }\n    } else {\n      releaseSeries.push(this.getReleaseSeries(releases));\n    }\n\n    this.setState({\n      releases,\n      releaseSeries,\n    });\n  }\n\n  getReleaseSeries = (releases, lineStyle = {}) => {\n    const {\n      organization,\n      router,\n      tooltip,\n      environments,\n      start,\n      end,\n      period,\n      preserveQueryParams,\n      queryExtra,\n      theme,\n    } = this.props;\n\n    const query = {...queryExtra};\n    if (organization.features.includes('global-views')) {\n      query.project = router.location.query.project;\n    }\n    if (preserveQueryParams) {\n      query.environment = [...environments];\n      query.start = start ? getUtcDateString(start) : undefined;\n      query.end = end ? getUtcDateString(end) : undefined;\n      query.statsPeriod = period || undefined;\n    }\n\n    const markLine = MarkLine({\n      animation: false,\n      lineStyle: {\n        color: theme.purple300,\n        opacity: 0.3,\n        type: 'solid',\n        ...lineStyle,\n      },\n      label: {\n        show: false,\n      },\n      data: releases.map(release => ({\n        xAxis: +new Date(release.date),\n        name: formatVersion(release.version, true),\n        value: formatVersion(release.version, true),\n        onClick: () => {\n          router.push({\n            pathname: `/organizations/${organization.slug}/releases/${release.version}/`,\n            query,\n          });\n        },\n        label: {\n          formatter: () => formatVersion(release.version, true),\n        },\n      })),\n      tooltip: tooltip || {\n        trigger: 'item',\n        formatter: ({data}: any) => {\n          // XXX using this.props here as this function does not get re-run\n          // unless projects are changed. Using a closure variable would result\n          // in stale values.\n          const time = getFormattedDate(data.value, 'MMM D, YYYY LT', {\n            local: !this.props.utc,\n          });\n          const version = escape(formatVersion(data.name, true));\n          return [\n            '<div class=\"tooltip-series\">',\n            `<div><span class=\"tooltip-label\"><strong>${t(\n              'Release'\n            )}</strong></span> ${version}</div>`,\n            '</div>',\n            '<div class=\"tooltip-date\">',\n            time,\n            '</div>',\n            '</div>',\n            '<div class=\"tooltip-arrow\"></div>',\n          ].join('');\n        },\n      },\n    });\n\n    return {\n      seriesName: 'Releases',\n      color: theme.purple200,\n      data: [],\n      markLine,\n    };\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children({\n      releases: this.state.releases,\n      releaseSeries: this.state.releaseSeries,\n    });\n  }\n}\n\nexport default withRouter(withOrganization(withApi(withTheme(ReleaseSeries))));\n","import {useCallback, useEffect, useState} from 'react';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\n// NOTE: Coordinate with other ExportQueryType (src/sentry/data_export/base.py)\nexport enum ExportQueryType {\n  IssuesByTag = 'Issues-by-Tag',\n  Discover = 'Discover',\n}\n\ninterface DataExportPayload {\n  queryInfo: any;\n  queryType: ExportQueryType; // TODO(ts): Formalize different possible payloads\n}\n\ninterface DataExportProps {\n  api: Client;\n  organization: Organization;\n  payload: DataExportPayload;\n  children?: React.ReactNode;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n}\n\nfunction DataExport({\n  api,\n  children,\n  disabled,\n  organization,\n  payload,\n  icon,\n}: DataExportProps): React.ReactElement {\n  const [inProgress, setInProgress] = useState(false);\n\n  useEffect(() => {\n    if (inProgress) {\n      setInProgress(false);\n    }\n  }, [payload.queryType, payload.queryInfo]);\n\n  const handleDataExport = useCallback(() => {\n    setInProgress(true);\n\n    api\n      .requestPromise(`/organizations/${organization.slug}/data-export/`, {\n        includeAllArgs: true,\n        method: 'POST',\n        data: {\n          query_type: payload.queryType,\n          query_info: payload.queryInfo,\n        },\n      })\n      .then(([_data, _, response]) => {\n        addSuccessMessage(\n          response?.status === 201\n            ? t(\n                \"Sit tight. We'll shoot you an email when your data is ready for download.\"\n              )\n            : t(\"It looks like we're already working on it. Sit tight, we'll email you.\")\n        );\n      })\n      .catch(err => {\n        const message =\n          err?.responseJSON?.detail ??\n          \"We tried our hardest, but we couldn't export your data. Give it another go.\";\n\n        addErrorMessage(t(message));\n        setInProgress(false);\n      });\n  }, [payload.queryInfo, payload.queryType, organization.slug, api]);\n\n  return (\n    <Feature features={['organizations:discover-query']}>\n      {inProgress ? (\n        <Button\n          size=\"small\"\n          priority=\"default\"\n          title=\"You can get on with your life. We'll email you when your data's ready.\"\n          disabled\n          icon={icon}\n        >\n          {t(\"We're working on it...\")}\n        </Button>\n      ) : (\n        <Button\n          onClick={debounce(handleDataExport, 500)}\n          disabled={disabled || false}\n          size=\"small\"\n          priority=\"default\"\n          title=\"Put your data to work. Start your export and we'll email you when it's finished.\"\n          icon={icon}\n        >\n          {children ? children : t('Export All to CSV')}\n        </Button>\n      )}\n    </Feature>\n  );\n}\n\nexport {DataExport};\nexport default withApi(withOrganization(DataExport));\n","export const SPAN_OP_BREAKDOWN_FIELDS = [\n  'spans.browser',\n  'spans.http',\n  'spans.db',\n  'spans.resource',\n];\n","import {Location} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getDiscoverLandingUrl} from 'sentry/utils/discover/urls';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  event?: Event;\n};\n\nfunction DiscoverBreadcrumb({eventView, event, organization, location}: Props) {\n  const crumbs: Crumb[] = [];\n  const discoverTarget = organization.features.includes('discover-query')\n    ? {\n        pathname: getDiscoverLandingUrl(organization),\n        query: {\n          ...location.query,\n          ...eventView.generateBlankQueryStringObject(),\n          ...eventView.getPageFiltersQuery(),\n        },\n      }\n    : null;\n\n  crumbs.push({\n    to: discoverTarget,\n    label: t('Discover'),\n  });\n\n  if (eventView && eventView.isValid()) {\n    crumbs.push({\n      to: eventView.getResultsViewUrlTarget(organization.slug),\n      label: eventView.name || '',\n    });\n  }\n\n  if (event) {\n    crumbs.push({\n      label: t('Event Detail'),\n    });\n  }\n\n  return <Breadcrumbs crumbs={crumbs} />;\n}\n\nexport default DiscoverBreadcrumb;\n","import OptionSelector from 'sentry/components/charts/optionSelector';\nimport {\n  ChartControls,\n  InlineContainer,\n  SectionHeading,\n  SectionValue,\n} from 'sentry/components/charts/styles';\nimport {t} from 'sentry/locale';\nimport {Organization, SelectValue} from 'sentry/types';\nimport {TOP_EVENT_MODES} from 'sentry/utils/discover/types';\n\ntype Props = {\n  displayMode: string;\n  displayOptions: SelectValue<string>[];\n  onAxisChange: (value: string[]) => void;\n  onDisplayChange: (value: string) => void;\n  onTopEventsChange: (value: string) => void;\n  organization: Organization;\n  topEvents: string;\n  total: number | null;\n  yAxisOptions: SelectValue<string>[];\n  yAxisValue: string[];\n};\n\nexport default function ChartFooter({\n  total,\n  yAxisValue,\n  yAxisOptions,\n  onAxisChange,\n  displayMode,\n  displayOptions,\n  onDisplayChange,\n  onTopEventsChange,\n  topEvents,\n}: Props) {\n  const elements: React.ReactNode[] = [];\n\n  elements.push(<SectionHeading key=\"total-label\">{t('Total Events')}</SectionHeading>);\n  elements.push(\n    total === null ? (\n      <SectionValue data-test-id=\"loading-placeholder\" key=\"total-value\">\n        &mdash;\n      </SectionValue>\n    ) : (\n      <SectionValue key=\"total-value\">{total.toLocaleString()}</SectionValue>\n    )\n  );\n  const topEventOptions: SelectValue<string>[] = [];\n  for (let i = 1; i <= 10; i++) {\n    topEventOptions.push({value: i.toString(), label: i.toString()});\n  }\n\n  return (\n    <ChartControls>\n      <InlineContainer>{elements}</InlineContainer>\n      <InlineContainer>\n        <OptionSelector\n          title={t('Display')}\n          selected={displayMode}\n          options={displayOptions}\n          onChange={onDisplayChange}\n        />\n        {TOP_EVENT_MODES.includes(displayMode) && (\n          <OptionSelector\n            title={t('Limit')}\n            selected={topEvents}\n            options={topEventOptions}\n            onChange={onTopEventsChange}\n          />\n        )}\n        {TOP_EVENT_MODES.includes(displayMode) ? (\n          <OptionSelector\n            title={t('Y-Axis')}\n            selected={yAxisValue[0]}\n            options={yAxisOptions}\n            onChange={yAxis => onAxisChange([yAxis])}\n          />\n        ) : (\n          <OptionSelector\n            multiple\n            isClearable\n            menuTitle={\n              yAxisOptions.length > 3 ? t('Select up to 3 options') : t('Y-axis')\n            }\n            title={t('Y-Axis')}\n            selected={yAxisValue}\n            options={yAxisOptions}\n            onChange={onAxisChange}\n          />\n        )}\n      </InlineContainer>\n    </ChartControls>\n  );\n}\n","import {Component, Fragment} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport EventsChart from 'sentry/components/charts/eventsChart';\nimport {getInterval, getPreviousSeriesName} from 'sentry/components/charts/utils';\nimport {WorldMapChart} from 'sentry/components/charts/worldMapChart';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {Panel} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {valueIsEqual} from 'sentry/utils';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {isEquation, stripEquationPrefix} from 'sentry/utils/discover/fields';\nimport {\n  DisplayModes,\n  MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES,\n  TOP_EVENT_MODES,\n  TOP_N,\n} from 'sentry/utils/discover/types';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\n\nimport ChartFooter from './chartFooter';\n\ntype ResultsChartProps = {\n  api: Client;\n  confirmedQuery: boolean;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  yAxisValue: string[];\n};\n\nclass ResultsChart extends Component<ResultsChartProps> {\n  shouldComponentUpdate(nextProps: ResultsChartProps) {\n    const {eventView, ...restProps} = this.props;\n    const {eventView: nextEventView, ...restNextProps} = nextProps;\n\n    if (!eventView.isEqualTo(nextEventView)) {\n      return true;\n    }\n\n    return !isEqual(restProps, restNextProps);\n  }\n\n  render() {\n    const {api, eventView, location, organization, router, confirmedQuery, yAxisValue} =\n      this.props;\n\n    const hasPerformanceChartInterpolation = organization.features.includes(\n      'performance-chart-interpolation'\n    );\n\n    const globalSelection = eventView.getPageFilters();\n    const start = globalSelection.datetime.start\n      ? getUtcToLocalDateObject(globalSelection.datetime.start)\n      : null;\n\n    const end = globalSelection.datetime.end\n      ? getUtcToLocalDateObject(globalSelection.datetime.end)\n      : null;\n\n    const {utc} = normalizeDateTimeParams(location.query);\n    const apiPayload = eventView.getEventsAPIPayload(location);\n    const display = eventView.getDisplayMode();\n    const isTopEvents =\n      display === DisplayModes.TOP5 || display === DisplayModes.DAILYTOP5;\n    const isPeriod = display === DisplayModes.DEFAULT || display === DisplayModes.TOP5;\n    const isDaily = display === DisplayModes.DAILYTOP5 || display === DisplayModes.DAILY;\n    const isPrevious = display === DisplayModes.PREVIOUS;\n    const referrer = `api.discover.${display}-chart`;\n    const topEvents = eventView.topEvents ? parseInt(eventView.topEvents, 10) : TOP_N;\n    const chartComponent =\n      display === DisplayModes.WORLDMAP\n        ? WorldMapChart\n        : display === DisplayModes.BAR\n        ? BarChart\n        : undefined;\n    const interval =\n      display === DisplayModes.BAR\n        ? getInterval(\n            {\n              start,\n              end,\n              period: globalSelection.datetime.period,\n              utc: utc === 'true',\n            },\n            'low'\n          )\n        : eventView.interval;\n\n    const seriesLabels = yAxisValue.map(stripEquationPrefix);\n    const disableableSeries = [\n      ...seriesLabels,\n      ...seriesLabels.map(getPreviousSeriesName),\n    ];\n    return (\n      <Fragment>\n        {getDynamicText({\n          value: (\n            <EventsChart\n              api={api}\n              router={router}\n              query={apiPayload.query}\n              organization={organization}\n              showLegend\n              yAxis={yAxisValue}\n              projects={globalSelection.projects}\n              environments={globalSelection.environments}\n              start={start}\n              end={end}\n              period={globalSelection.datetime.period}\n              disablePrevious={!isPrevious}\n              disableReleases={!isPeriod}\n              field={isTopEvents ? apiPayload.field : undefined}\n              interval={interval}\n              showDaily={isDaily}\n              topEvents={isTopEvents ? topEvents : undefined}\n              orderby={isTopEvents ? decodeScalar(apiPayload.sort) : undefined}\n              utc={utc === 'true'}\n              confirmedQuery={confirmedQuery}\n              withoutZerofill={hasPerformanceChartInterpolation}\n              chartComponent={chartComponent}\n              referrer={referrer}\n              fromDiscover\n              disableableSeries={disableableSeries}\n            />\n          ),\n          fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n        })}\n      </Fragment>\n    );\n  }\n}\n\ntype ContainerProps = {\n  api: Client;\n  confirmedQuery: boolean;\n  eventView: EventView;\n  location: Location;\n  onAxisChange: (value: string[]) => void;\n  onDisplayChange: (value: string) => void;\n  onTopEventsChange: (value: string) => void;\n\n  organization: Organization;\n  router: InjectedRouter;\n  // chart footer props\n  total: number | null;\n  yAxis: string[];\n};\n\nclass ResultsChartContainer extends Component<ContainerProps> {\n  state = {\n    yAxisOptions: this.getYAxisOptions(this.props.eventView),\n  };\n\n  componentWillReceiveProps(nextProps) {\n    const yAxisOptions = this.getYAxisOptions(this.props.eventView);\n    const nextYAxisOptions = this.getYAxisOptions(nextProps.eventView);\n\n    if (!valueIsEqual(yAxisOptions, nextYAxisOptions, true)) {\n      this.setState({yAxisOptions: nextYAxisOptions});\n    }\n  }\n\n  shouldComponentUpdate(nextProps: ContainerProps) {\n    const {eventView, ...restProps} = this.props;\n    const {eventView: nextEventView, ...restNextProps} = nextProps;\n\n    if (\n      !eventView.isEqualTo(nextEventView) ||\n      this.props.confirmedQuery !== nextProps.confirmedQuery\n    ) {\n      return true;\n    }\n\n    return !isEqual(restProps, restNextProps);\n  }\n\n  getYAxisOptions(eventView) {\n    const yAxisOptions = eventView.getYAxisOptions();\n\n    // Equations on World Map isn't supported on the events-geo endpoint\n    // Disabling equations as an option to prevent erroring out\n    if (eventView.getDisplayMode() === DisplayModes.WORLDMAP) {\n      return yAxisOptions.filter(({value}) => !isEquation(value));\n    }\n\n    return yAxisOptions;\n  }\n\n  render() {\n    const {\n      api,\n      eventView,\n      location,\n      router,\n      total,\n      onAxisChange,\n      onDisplayChange,\n      onTopEventsChange,\n      organization,\n      confirmedQuery,\n      yAxis,\n    } = this.props;\n\n    const {yAxisOptions} = this.state;\n\n    const hasQueryFeature = organization.features.includes('discover-query');\n    const displayOptions = eventView\n      .getDisplayOptions()\n      .filter(opt => {\n        // top5 modes are only available with larger packages in saas.\n        // We remove instead of disable here as showing tooltips in dropdown\n        // menus is clunky.\n        if (TOP_EVENT_MODES.includes(opt.value) && !hasQueryFeature) {\n          return false;\n        }\n        return true;\n      })\n      .map(opt => {\n        // Can only use default display or total daily with multi y axis\n        if (TOP_EVENT_MODES.includes(opt.value)) {\n          opt.label = DisplayModes.TOP5 === opt.value ? 'Top Period' : 'Top Daily';\n        }\n        if (\n          yAxis.length > 1 &&\n          !MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES.includes(opt.value as DisplayModes)\n        ) {\n          return {\n            ...opt,\n            disabled: true,\n            tooltip: t(\n              'Change the Y-Axis dropdown to display only 1 function to use this view.'\n            ),\n          };\n        }\n        return opt;\n      });\n\n    return (\n      <StyledPanel>\n        {(yAxis.length > 0 && (\n          <ResultsChart\n            api={api}\n            eventView={eventView}\n            location={location}\n            organization={organization}\n            router={router}\n            confirmedQuery={confirmedQuery}\n            yAxisValue={yAxis}\n          />\n        )) || <NoChartContainer>{t('No Y-Axis selected.')}</NoChartContainer>}\n        <ChartFooter\n          organization={organization}\n          total={total}\n          yAxisValue={yAxis}\n          yAxisOptions={yAxisOptions}\n          onAxisChange={onAxisChange}\n          displayOptions={displayOptions}\n          displayMode={eventView.getDisplayMode()}\n          onDisplayChange={onDisplayChange}\n          onTopEventsChange={onTopEventsChange}\n          topEvents={eventView.topEvents ?? TOP_N.toString()}\n        />\n      </StyledPanel>\n    );\n  }\n}\n\nexport default withApi(ResultsChartContainer);\n\nconst StyledPanel = styled(Panel)`\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    margin: 0;\n  }\n`;\n\nconst NoChartContainer = styled('div')<{height?: string}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height || '200px'};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n","import {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport EditableText from 'sentry/components/editableText';\nimport {Title} from 'sentry/components/layouts/thirds';\nimport {t} from 'sentry/locale';\nimport {Organization, SavedQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useApi from 'sentry/utils/useApi';\n\nimport {handleUpdateQueryName} from './savedQuery/utils';\n\ntype Props = {\n  eventView: EventView;\n  organization: Organization;\n  savedQuery?: SavedQuery;\n};\n\nconst NAME_DEFAULT = t('Untitled query');\n\n/**\n * Allows user to edit the name of the query.\n * By pressing Enter or clicking outside the component, the changes will be saved, if valid.\n */\nfunction EventInputName({organization, eventView, savedQuery}: Props) {\n  const api = useApi();\n\n  function handleChange(nextQueryName: string) {\n    // Do not update automatically if\n    // 1) It is a new query\n    // 2) The new name is same as the old name\n    if (!savedQuery || savedQuery.name === nextQueryName) {\n      return;\n    }\n\n    // This ensures that we are updating SavedQuery.name only.\n    // Changes on QueryBuilder table will not be saved.\n    const nextEventView = EventView.fromSavedQuery({\n      ...savedQuery,\n      name: nextQueryName,\n    });\n\n    handleUpdateQueryName(api, organization, nextEventView).then(\n      (_updatedQuery: SavedQuery) => {\n        // The current eventview may have changes that are not explicitly saved.\n        // So, we just preserve them and change its name\n        const renamedEventView = eventView.clone();\n        renamedEventView.name = nextQueryName;\n\n        browserHistory.push(renamedEventView.getResultsViewUrlTarget(organization.slug));\n      }\n    );\n  }\n\n  const value = eventView.name || NAME_DEFAULT;\n\n  return (\n    <StyledTitle data-test-id={`discover2-query-name-${value}`}>\n      <EditableText\n        value={value}\n        onChange={handleChange}\n        isDisabled={!eventView.id}\n        errorMessage={t('Please set a name for this query')}\n      />\n    </StyledTitle>\n  );\n}\n\nconst StyledTitle = styled(Title)`\n  overflow: unset;\n`;\n\nexport default EventInputName;\n","import {Fragment, PureComponent} from 'react';\nimport {browserHistory, InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Banner from 'sentry/components/banner';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {CreateAlertFromViewButton} from 'sentry/components/createAlertButton';\nimport DropdownControl from 'sentry/components/dropdownControl';\nimport InputControl from 'sentry/components/forms/controls/input';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {IconDelete, IconStar} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, SavedQuery} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getDiscoverLandingUrl} from 'sentry/utils/discover/urls';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\nimport {handleAddQueryToDashboard} from 'sentry/views/eventsV2/utils';\n\nimport {handleCreateQuery, handleDeleteQuery, handleUpdateQuery} from './utils';\n\ntype DefaultProps = {\n  disabled: boolean;\n};\n\ntype Props = DefaultProps & {\n  api: Client;\n\n  eventView: EventView;\n  /**\n   * DO NOT USE `Location` TO GENERATE `EventView` IN THIS COMPONENT.\n   *\n   * In this component, state is generated from EventView and SavedQueriesStore.\n   * Using Location to rebuild EventView will break the tests. `Location` is\n   * passed down only because it is needed for navigation.\n   */\n  location: Location;\n  onIncompatibleAlertQuery: React.ComponentProps<\n    typeof CreateAlertFromViewButton\n  >['onIncompatibleQuery'];\n  organization: Organization;\n  projects: Project[];\n  router: InjectedRouter;\n  savedQuery: SavedQuery | undefined;\n  savedQueryLoading: boolean;\n  updateCallback: () => void;\n  yAxis: string[];\n};\n\ntype State = {\n  isEditingQuery: boolean;\n  isNewQuery: boolean;\n\n  queryName: string;\n};\n\nclass SavedQueryButtonGroup extends PureComponent<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    const {eventView: nextEventView, savedQuery, savedQueryLoading, yAxis} = nextProps;\n\n    // For a new unsaved query\n    if (!savedQuery) {\n      return {\n        isNewQuery: true,\n        isEditingQuery: false,\n        queryName: prevState.queryName || '',\n      };\n    }\n\n    if (savedQueryLoading) {\n      return prevState;\n    }\n\n    const savedEventView = EventView.fromSavedQuery(savedQuery);\n\n    // Switching from a SavedQuery to another SavedQuery\n    if (savedEventView.id !== nextEventView.id) {\n      return {\n        isNewQuery: false,\n        isEditingQuery: false,\n        queryName: '',\n      };\n    }\n\n    // For modifying a SavedQuery\n    const isEqualQuery = nextEventView.isEqualTo(savedEventView);\n    // undefined saved yAxis defaults to count() and string values are converted to array\n    const isEqualYAxis = isEqual(\n      yAxis,\n      !savedQuery.yAxis\n        ? ['count()']\n        : typeof savedQuery.yAxis === 'string'\n        ? [savedQuery.yAxis]\n        : savedQuery.yAxis\n    );\n    return {\n      isNewQuery: false,\n      isEditingQuery: !isEqualQuery || !isEqualYAxis,\n\n      // HACK(leedongwei): See comment at SavedQueryButtonGroup.onFocusInput\n      queryName: prevState.queryName || '',\n    };\n  }\n\n  /**\n   * Stop propagation for the input and container so people can interact with\n   * the inputs in the dropdown.\n   */\n  static stopEventPropagation = (event: React.MouseEvent) => {\n    const capturedElements = ['LI', 'INPUT'];\n\n    if (\n      event.target instanceof Element &&\n      capturedElements.includes(event.target.nodeName)\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  static defaultProps: DefaultProps = {\n    disabled: false,\n  };\n\n  state: State = {\n    isNewQuery: true,\n    isEditingQuery: false,\n\n    queryName: '',\n  };\n\n  onBlurInput = (event: React.FormEvent<HTMLInputElement>) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({queryName: target.value});\n  };\n\n  onChangeInput = (event: React.FormEvent<HTMLInputElement>) => {\n    const target = event.target as HTMLInputElement;\n    this.setState({queryName: target.value});\n  };\n\n  /**\n   * There are two ways to create a query\n   * 1) Creating a query from scratch and saving it\n   * 2) Modifying an existing query and saving it\n   */\n  handleCreateQuery = (event: React.MouseEvent<Element>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const {api, organization, eventView, yAxis} = this.props;\n\n    if (!this.state.queryName) {\n      return;\n    }\n\n    const nextEventView = eventView.clone();\n    nextEventView.name = this.state.queryName;\n\n    // Checks if \"Save as\" button is clicked from a clean state, or it is\n    // clicked while modifying an existing query\n    const isNewQuery = !eventView.id;\n\n    handleCreateQuery(api, organization, nextEventView, yAxis, isNewQuery).then(\n      (savedQuery: SavedQuery) => {\n        const view = EventView.fromSavedQuery(savedQuery);\n\n        Banner.dismiss('discover');\n        this.setState({queryName: ''});\n        browserHistory.push(view.getResultsViewUrlTarget(organization.slug));\n      }\n    );\n  };\n\n  handleUpdateQuery = (event: React.MouseEvent<Element>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const {api, organization, eventView, updateCallback, yAxis} = this.props;\n\n    handleUpdateQuery(api, organization, eventView, yAxis).then(\n      (savedQuery: SavedQuery) => {\n        const view = EventView.fromSavedQuery(savedQuery);\n        this.setState({queryName: ''});\n        browserHistory.push(view.getResultsViewShortUrlTarget(organization.slug));\n        updateCallback();\n      }\n    );\n  };\n\n  handleDeleteQuery = (event: React.MouseEvent<Element>) => {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const {api, organization, eventView} = this.props;\n\n    handleDeleteQuery(api, organization, eventView).then(() => {\n      browserHistory.push({\n        pathname: getDiscoverLandingUrl(organization),\n        query: {},\n      });\n    });\n  };\n\n  handleCreateAlertSuccess = () => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.create_alert_clicked',\n      eventName: 'Discoverv2: Create alert clicked',\n      status: 'success',\n      organization_id: organization.id,\n      url: window.location.href,\n    });\n  };\n\n  renderButtonSaveAs(disabled: boolean) {\n    const {queryName} = this.state;\n    /**\n     * For a great UX, we should focus on `ButtonSaveInput` when `ButtonSave`\n     * is clicked. However, `DropdownControl` wraps them in a FunctionComponent\n     * which breaks `React.createRef`.\n     */\n    return (\n      <DropdownControl\n        alignRight\n        menuWidth=\"220px\"\n        priority=\"default\"\n        buttonProps={{\n          'aria-label': t('Save as'),\n          showChevron: false,\n          icon: <IconStar />,\n          disabled,\n        }}\n        label={`${t('Save as')}\\u{2026}`}\n      >\n        <ButtonSaveDropDown onClick={SavedQueryButtonGroup.stopEventPropagation}>\n          <ButtonSaveInput\n            type=\"text\"\n            name=\"query_name\"\n            placeholder={t('Display name')}\n            value={queryName || ''}\n            onBlur={this.onBlurInput}\n            onChange={this.onChangeInput}\n            disabled={disabled}\n          />\n          <Button\n            onClick={this.handleCreateQuery}\n            priority=\"primary\"\n            disabled={disabled || !this.state.queryName}\n            style={{width: '100%'}}\n          >\n            {t('Save for Org')}\n          </Button>\n        </ButtonSaveDropDown>\n      </DropdownControl>\n    );\n  }\n\n  renderButtonSave(disabled: boolean) {\n    const {isNewQuery, isEditingQuery} = this.state;\n\n    // Existing query that hasn't been modified.\n    if (!isNewQuery && !isEditingQuery) {\n      return (\n        <Button\n          icon={<IconStar color=\"yellow100\" isSolid size=\"sm\" />}\n          disabled\n          data-test-id=\"discover2-savedquery-button-saved\"\n        >\n          {t('Saved for Org')}\n        </Button>\n      );\n    }\n    // Existing query with edits, show save and save as.\n    if (!isNewQuery && isEditingQuery) {\n      return (\n        <Fragment>\n          <Button\n            onClick={this.handleUpdateQuery}\n            data-test-id=\"discover2-savedquery-button-update\"\n            disabled={disabled}\n          >\n            <IconUpdate />\n            {t('Save Changes')}\n          </Button>\n          {this.renderButtonSaveAs(disabled)}\n        </Fragment>\n      );\n    }\n\n    // Is a new query enable saveas\n    return this.renderButtonSaveAs(disabled);\n  }\n\n  renderButtonDelete(disabled: boolean) {\n    const {isNewQuery} = this.state;\n\n    if (isNewQuery) {\n      return null;\n    }\n\n    return (\n      <Button\n        data-test-id=\"discover2-savedquery-button-delete\"\n        onClick={this.handleDeleteQuery}\n        disabled={disabled}\n        icon={<IconDelete />}\n        aria-label={t('Delete')}\n      />\n    );\n  }\n\n  renderButtonCreateAlert() {\n    const {eventView, organization, projects, onIncompatibleAlertQuery} = this.props;\n\n    return (\n      <GuideAnchor target=\"create_alert_from_discover\">\n        <CreateAlertFromViewButton\n          eventView={eventView}\n          organization={organization}\n          projects={projects}\n          onIncompatibleQuery={onIncompatibleAlertQuery}\n          onSuccess={this.handleCreateAlertSuccess}\n          referrer=\"discover\"\n          aria-label={t('Create Alert')}\n          data-test-id=\"discover2-create-from-discover\"\n        />\n      </GuideAnchor>\n    );\n  }\n\n  renderButtonAddToDashboard() {\n    const {organization, eventView, savedQuery, yAxis, router} = this.props;\n    return (\n      <Button\n        key=\"add-dashboard-widget-from-discover\"\n        data-test-id=\"add-dashboard-widget-from-discover\"\n        onClick={() =>\n          handleAddQueryToDashboard({\n            organization,\n            eventView,\n            query: savedQuery,\n            yAxis,\n            router,\n          })\n        }\n      >\n        {t('Add to Dashboard')}\n      </Button>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    const renderDisabled = p => (\n      <Hovercard\n        body={\n          <FeatureDisabled\n            features={p.features}\n            hideHelpToggle\n            message={t('Discover queries are disabled')}\n            featureName={t('Discover queries')}\n          />\n        }\n      >\n        {p.children(p)}\n      </Hovercard>\n    );\n\n    const renderQueryButton = (renderFunc: (disabled: boolean) => React.ReactNode) => {\n      return (\n        <Feature\n          organization={organization}\n          features={['discover-query']}\n          hookName=\"feature-disabled:discover-saved-query-create\"\n          renderDisabled={renderDisabled}\n        >\n          {({hasFeature}) => renderFunc(!hasFeature || this.props.disabled)}\n        </Feature>\n      );\n    };\n\n    return (\n      <ResponsiveButtonBar gap={1}>\n        {renderQueryButton(disabled => this.renderButtonSave(disabled))}\n        <Feature organization={organization} features={['incidents']}>\n          {({hasFeature}) => hasFeature && this.renderButtonCreateAlert()}\n        </Feature>\n        <Feature organization={organization} features={['dashboards-edit']}>\n          {({hasFeature}) => hasFeature && this.renderButtonAddToDashboard()}\n        </Feature>\n        {renderQueryButton(disabled => this.renderButtonDelete(disabled))}\n      </ResponsiveButtonBar>\n    );\n  }\n}\n\nconst ResponsiveButtonBar = styled(ButtonBar)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    margin-top: 0;\n  }\n`;\n\nconst ButtonSaveDropDown = styled('div')`\n  display: flex;\n  flex-direction: column;\n  padding: ${space(1)};\n  gap: ${space(1)};\n`;\n\nconst ButtonSaveInput = styled(InputControl)`\n  height: 40px;\n`;\n\nconst IconUpdate = styled('div')`\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n\n  margin-right: ${space(0.75)};\n  border-radius: 5px;\n  background-color: ${p => p.theme.yellow300};\n`;\n\nexport default withProjects(withApi(SavedQueryButtonGroup));\n","import {Component} from 'react';\nimport {InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {fetchSavedQuery} from 'sentry/actionCreators/discoverSavedQueries';\nimport {Client} from 'sentry/api';\nimport {CreateAlertFromViewButton} from 'sentry/components/createAlertButton';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, SavedQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\n\nimport DiscoverBreadcrumb from './breadcrumb';\nimport EventInputName from './eventInputName';\nimport SavedQueryButtonGroup from './savedQuery';\n\ntype Props = {\n  api: Client;\n  errorCode: number;\n  eventView: EventView;\n  location: Location;\n  onIncompatibleAlertQuery: React.ComponentProps<\n    typeof CreateAlertFromViewButton\n  >['onIncompatibleQuery'];\n  organization: Organization;\n  router: InjectedRouter;\n  yAxis: string[];\n};\n\ntype State = {\n  loading: boolean;\n  savedQuery: SavedQuery | undefined;\n};\n\nclass ResultsHeader extends Component<Props, State> {\n  state: State = {\n    savedQuery: undefined,\n    loading: true,\n  };\n\n  componentDidMount() {\n    if (this.props.eventView.id) {\n      this.fetchData();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      prevProps.eventView &&\n      this.props.eventView &&\n      prevProps.eventView.id !== this.props.eventView.id\n    ) {\n      this.fetchData();\n    }\n  }\n\n  fetchData() {\n    const {api, eventView, organization} = this.props;\n    if (typeof eventView.id === 'string') {\n      this.setState({loading: true});\n      fetchSavedQuery(api, organization.slug, eventView.id).then(savedQuery => {\n        this.setState({savedQuery, loading: false});\n      });\n    }\n  }\n\n  renderAuthor() {\n    const {eventView} = this.props;\n    const {savedQuery} = this.state;\n    // No saved query in use.\n    if (!eventView.id) {\n      return null;\n    }\n    let createdBy = ' \\u2014 ';\n    let lastEdit: React.ReactNode = ' \\u2014 ';\n    if (savedQuery !== undefined) {\n      createdBy = savedQuery.createdBy?.email || '\\u2014';\n      lastEdit = <TimeSince date={savedQuery.dateUpdated} />;\n    }\n    return (\n      <Subtitle>\n        {t('Created by:')} {createdBy} | {t('Last edited:')} {lastEdit}\n      </Subtitle>\n    );\n  }\n\n  render() {\n    const {\n      organization,\n      location,\n      errorCode,\n      eventView,\n      onIncompatibleAlertQuery,\n      yAxis,\n      router,\n    } = this.props;\n    const {savedQuery, loading} = this.state;\n\n    return (\n      <Layout.Header>\n        <StyledHeaderContent>\n          <DiscoverBreadcrumb\n            eventView={eventView}\n            organization={organization}\n            location={location}\n          />\n          <EventInputName\n            savedQuery={savedQuery}\n            organization={organization}\n            eventView={eventView}\n          />\n          {this.renderAuthor()}\n        </StyledHeaderContent>\n        <Layout.HeaderActions>\n          <SavedQueryButtonGroup\n            location={location}\n            organization={organization}\n            eventView={eventView}\n            savedQuery={savedQuery}\n            savedQueryLoading={loading}\n            disabled={errorCode >= 400 && errorCode < 500}\n            updateCallback={() => this.fetchData()}\n            onIncompatibleAlertQuery={onIncompatibleAlertQuery}\n            yAxis={yAxis}\n            router={router}\n          />\n        </Layout.HeaderActions>\n      </Layout.Header>\n    );\n  }\n}\n\nconst Subtitle = styled('h4')`\n  font-size: ${p => p.theme.fontSizeLarge};\n  font-weight: normal;\n  color: ${p => p.theme.gray300};\n  margin: ${space(0.5)} 0 0 0;\n`;\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: unset;\n`;\n\nexport default withApi(ResultsHeader);\n","import {Fragment, useEffect, useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {DISCOVER2_DOCS_URL} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {Column} from 'sentry/utils/discover/fields';\nimport theme from 'sentry/utils/theme';\nimport useTags from 'sentry/utils/useTags';\nimport {generateFieldOptions} from 'sentry/views/eventsV2/utils';\n\nimport ColumnEditCollection from './columnEditCollection';\n\ntype Props = {\n  columns: Column[];\n  measurementKeys: null | string[];\n  // Fired when column selections have been applied.\n  onApply: (columns: Column[]) => void;\n  organization: Organization;\n  spanOperationBreakdownKeys?: string[];\n} & ModalRenderProps;\n\nfunction ColumnEditModal(props: Props) {\n  const {\n    Header,\n    Body,\n    Footer,\n    measurementKeys,\n    spanOperationBreakdownKeys,\n    organization,\n    onApply,\n    closeModal,\n  } = props;\n\n  // Only run once for each organization.id.\n  useEffect(() => {\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.column_editor.open',\n      eventName: 'Discoverv2: Open column editor',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }, [organization.id]);\n\n  const {tags} = useTags();\n  const tagKeys = Object.values(tags).map(({key}) => key);\n\n  const [columns, setColumns] = useState<Column[]>(props.columns);\n\n  function handleApply() {\n    onApply(columns);\n    closeModal();\n  }\n\n  const fieldOptions = generateFieldOptions({\n    organization,\n    tagKeys,\n    measurementKeys,\n    spanOperationBreakdownKeys,\n  });\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Edit Columns')}</h4>\n      </Header>\n      <Body>\n        <Instruction>\n          {tct(\n            'To group events, add [functionLink: functions] f(x) that may take in additional parameters. [fieldTagLink: Tag and field] columns will help you view more details about the events (i.e. title).',\n            {\n              functionLink: (\n                <ExternalLink href=\"https://docs.sentry.io/product/discover-queries/query-builder/#filter-by-table-columns\" />\n              ),\n              fieldTagLink: (\n                <ExternalLink href=\"https://docs.sentry.io/product/sentry-basics/search/searchable-properties/#event-properties\" />\n              ),\n            }\n          )}\n        </Instruction>\n        <ColumnEditCollection\n          columns={columns}\n          fieldOptions={fieldOptions}\n          onChange={setColumns}\n          organization={organization}\n        />\n      </Body>\n      <Footer>\n        <ButtonBar gap={1}>\n          <Button priority=\"default\" href={DISCOVER2_DOCS_URL} external>\n            {t('Read the Docs')}\n          </Button>\n          <Button aria-label={t('Apply')} priority=\"primary\" onClick={handleApply}>\n            {t('Apply')}\n          </Button>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nconst modalCss = css`\n  @media (min-width: ${theme.breakpoints.medium}) {\n    width: auto;\n    max-width: 900px;\n  }\n`;\n\nexport default ColumnEditModal;\nexport {modalCss};\n","import TagStore from 'sentry/stores/tagStore';\nimport {useLegacyStore} from 'sentry/stores/useLegacyStore';\nimport {TagCollection} from 'sentry/types';\n\ntype Result = {\n  tags: TagCollection;\n};\n\nfunction useTags(): Result {\n  const tags = useLegacyStore(TagStore);\n\n  return {\n    tags,\n  };\n}\n\nexport default useTags;\n","import {Fragment} from 'react';\nimport {Location} from 'history';\n\nimport Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button from 'sentry/components/button';\nimport DataExport, {ExportQueryType} from 'sentry/components/dataExport';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {IconDownload, IconStack, IconTag} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\n\nimport {downloadAsCsv} from '../utils';\n\ntype Props = {\n  error: string | null;\n  eventView: EventView;\n  isLoading: boolean;\n  location: Location;\n  onChangeShowTags: () => void;\n  onEdit: () => void;\n  organization: OrganizationSummary;\n  showTags: boolean;\n  tableData: TableData | null | undefined;\n  title: string;\n};\n\nfunction handleDownloadAsCsv(title: string, {organization, eventView, tableData}: Props) {\n  trackAnalyticsEvent({\n    eventKey: 'discover_v2.results.download_csv',\n    eventName: 'Discoverv2: Download CSV',\n    organization_id: parseInt(organization.id, 10),\n  });\n  downloadAsCsv(tableData, eventView.getColumns(), title);\n}\n\nfunction renderDownloadButton(canEdit: boolean, props: Props) {\n  return (\n    <Feature\n      features={['organizations:discover-query']}\n      renderDisabled={() => renderBrowserExportButton(canEdit, props)}\n    >\n      {renderAsyncExportButton(canEdit, props)}\n    </Feature>\n  );\n}\n\nfunction renderBrowserExportButton(canEdit: boolean, props: Props) {\n  const {isLoading, error} = props;\n  const disabled = isLoading || error !== null || canEdit === false;\n  const onClick = disabled ? undefined : () => handleDownloadAsCsv(props.title, props);\n\n  return (\n    <Button\n      size=\"small\"\n      disabled={disabled}\n      onClick={onClick}\n      data-test-id=\"grid-download-csv\"\n      icon={<IconDownload size=\"xs\" />}\n    >\n      {t('Export')}\n    </Button>\n  );\n}\n\nfunction renderAsyncExportButton(canEdit: boolean, props: Props) {\n  const {isLoading, error, location, eventView} = props;\n  const disabled = isLoading || error !== null || canEdit === false;\n  return (\n    <DataExport\n      payload={{\n        queryType: ExportQueryType.Discover,\n        queryInfo: eventView.getEventsAPIPayload(location),\n      }}\n      disabled={disabled}\n      icon={<IconDownload size=\"xs\" />}\n    >\n      {t('Export All')}\n    </DataExport>\n  );\n}\n// Placate eslint proptype checking\n\nfunction renderEditButton(canEdit: boolean, props: Props) {\n  const onClick = canEdit ? props.onEdit : undefined;\n  return (\n    <GuideAnchor target=\"columns_header_button\">\n      <Button\n        size=\"small\"\n        disabled={!canEdit}\n        onClick={onClick}\n        data-test-id=\"grid-edit-enable\"\n        icon={<IconStack size=\"xs\" />}\n      >\n        {t('Columns')}\n      </Button>\n    </GuideAnchor>\n  );\n}\n// Placate eslint proptype checking\n\nfunction renderSummaryButton({onChangeShowTags, showTags}: Props) {\n  return (\n    <Button\n      data-test-id=\"toggle-show-tags\"\n      size=\"small\"\n      onClick={onChangeShowTags}\n      icon={<IconTag size=\"xs\" />}\n    >\n      {showTags ? t('Hide Tags') : t('Show Tags')}\n    </Button>\n  );\n}\n\ntype FeatureWrapperProps = Props & {\n  children: (hasFeature: boolean, props: Props) => React.ReactNode;\n};\n\nfunction FeatureWrapper(props: FeatureWrapperProps) {\n  const noEditMessage = t('Requires discover query feature.');\n  const editFeatures = ['organizations:discover-query'];\n\n  const renderDisabled = p => (\n    <Hovercard\n      body={\n        <FeatureDisabled\n          features={p.features}\n          hideHelpToggle\n          message={noEditMessage}\n          featureName={noEditMessage}\n        />\n      }\n    >\n      {p.children(p)}\n    </Hovercard>\n  );\n  return (\n    <Feature\n      hookName=\"feature-disabled:grid-editable-actions\"\n      renderDisabled={renderDisabled}\n      features={editFeatures}\n    >\n      {({hasFeature}) => props.children(hasFeature, props)}\n    </Feature>\n  );\n}\n\nfunction HeaderActions(props: Props) {\n  return (\n    <Fragment>\n      <FeatureWrapper {...props} key=\"edit\">\n        {renderEditButton}\n      </FeatureWrapper>\n      <FeatureWrapper {...props} key=\"download\">\n        {renderDownloadButton}\n      </FeatureWrapper>\n      {renderSummaryButton(props)}\n    </Fragment>\n  );\n}\n\nexport default HeaderActions;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport GridEditable, {\n  COL_WIDTH_MINIMUM,\n  COL_WIDTH_UNDEFINED,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport Truncate from 'sentry/components/truncate';\nimport {IconStack} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {TableData, TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {\n  isFieldSortable,\n  pickRelevantLocationQueryStrings,\n} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  Column,\n  fieldAlignment,\n  getAggregateAlias,\n  getEquationAliasIndex,\n  isEquationAlias,\n} from 'sentry/utils/discover/fields';\nimport {DisplayModes, TOP_N} from 'sentry/utils/discover/types';\nimport {\n  eventDetailsRouteWithEventView,\n  generateEventSlug,\n} from 'sentry/utils/discover/urls';\nimport {decodeList} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withProjects from 'sentry/utils/withProjects';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport {getExpandedResults, pushEventViewToLocation} from '../utils';\n\nimport CellAction, {Actions, updateQuery} from './cellAction';\nimport ColumnEditModal, {modalCss} from './columnEditModal';\nimport TableActions from './tableActions';\nimport TopResultsIndicator from './topResultsIndicator';\nimport {TableColumn} from './types';\n\nexport type TableViewProps = {\n  error: string | null;\n  eventView: EventView;\n  isFirstPage: boolean;\n\n  isLoading: boolean;\n  location: Location;\n\n  measurementKeys: null | string[];\n  onChangeShowTags: () => void;\n  organization: Organization;\n  projects: Project[];\n  showTags: boolean;\n  tableData: TableData | null | undefined;\n\n  title: string;\n  spanOperationBreakdownKeys?: string[];\n};\n\n/**\n * The `TableView` is marked with leading _ in its method names. It consumes\n * the EventView object given in its props to generate new EventView objects\n * for actions like resizing column.\n\n * The entire state of the table view (or event view) is co-located within\n * the EventView object. This object is fed from the props.\n *\n * Attempting to modify the state, and therefore, modifying the given EventView\n * object given from its props, will generate new instances of EventView objects.\n *\n * In most cases, the new EventView object differs from the previous EventView\n * object. The new EventView object is pushed to the location object.\n */\nclass TableView extends Component<TableViewProps> {\n  /**\n   * Updates a column on resizing\n   */\n  _resizeColumn = (columnIndex: number, nextColumn: TableColumn<keyof TableDataRow>) => {\n    const {location, eventView} = this.props;\n\n    const newWidth = nextColumn.width ? Number(nextColumn.width) : COL_WIDTH_UNDEFINED;\n    const nextEventView = eventView.withResizedColumn(columnIndex, newWidth);\n\n    pushEventViewToLocation({\n      location,\n      nextEventView,\n      extraQuery: pickRelevantLocationQueryStrings(location),\n    });\n  };\n\n  _renderPrependColumns = (\n    isHeader: boolean,\n    dataRow?: any,\n    rowIndex?: number\n  ): React.ReactNode[] => {\n    const {organization, eventView, tableData, location} = this.props;\n    const hasAggregates = eventView.hasAggregateField();\n    const hasIdField = eventView.hasIdField();\n\n    if (isHeader) {\n      if (hasAggregates) {\n        return [\n          <PrependHeader key=\"header-icon\">\n            <IconStack size=\"sm\" />\n          </PrependHeader>,\n        ];\n      }\n      if (!hasIdField) {\n        return [\n          <PrependHeader key=\"header-event-id\">\n            <SortLink\n              align=\"left\"\n              title={t('event id')}\n              direction={undefined}\n              canSort={false}\n              generateSortLink={() => undefined}\n            />\n          </PrependHeader>,\n        ];\n      }\n      return [];\n    }\n\n    if (hasAggregates) {\n      const nextView = getExpandedResults(eventView, {}, dataRow);\n\n      const target = {\n        pathname: location.pathname,\n        query: nextView.generateQueryStringObject(),\n      };\n\n      return [\n        <Tooltip key={`eventlink${rowIndex}`} title={t('Open Group')}>\n          <Link\n            to={target}\n            data-test-id=\"open-group\"\n            onClick={() => {\n              if (nextView.isEqualTo(eventView)) {\n                Sentry.captureException(new Error('Failed to drilldown'));\n              }\n            }}\n          >\n            <StyledIcon size=\"sm\" />\n          </Link>\n        </Tooltip>,\n      ];\n    }\n    if (!hasIdField) {\n      let value = dataRow.id;\n\n      if (tableData && tableData.meta) {\n        const fieldRenderer = getFieldRenderer('id', tableData.meta);\n        value = fieldRenderer(dataRow, {organization, location});\n      }\n\n      const eventSlug = generateEventSlug(dataRow);\n\n      const target = eventDetailsRouteWithEventView({\n        orgSlug: organization.slug,\n        eventSlug,\n        eventView,\n      });\n\n      return [\n        <Tooltip key={`eventlink${rowIndex}`} title={t('View Event')}>\n          <StyledLink data-test-id=\"view-event\" to={target}>\n            {value}\n          </StyledLink>\n        </Tooltip>,\n      ];\n    }\n    return [];\n  };\n\n  _renderGridHeaderCell = (column: TableColumn<keyof TableDataRow>): React.ReactNode => {\n    const {eventView, location, tableData} = this.props;\n    const tableMeta = tableData?.meta;\n\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const field = {field: column.key as string, width: column.width};\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, tableMeta);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n      // Need to pull yAxis from location since eventView only stores 1 yAxis field at time\n      queryStringObject.yAxis = decodeList(location.query.yAxis);\n\n      return {\n        ...location,\n        query: queryStringObject,\n      };\n    }\n    const currentSort = eventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n    const titleText = isEquationAlias(column.name)\n      ? eventView.getEquations()[getEquationAliasIndex(column.name)]\n      : column.name;\n\n    const title = (\n      <StyledTooltip title={titleText}>\n        <Truncate value={titleText} maxLength={60} expandable={false} />\n      </StyledTooltip>\n    );\n\n    return (\n      <SortLink\n        align={align}\n        title={title}\n        direction={currentSort ? currentSort.kind : undefined}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n      />\n    );\n  };\n\n  _renderGridBodyCell = (\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow,\n    rowIndex: number,\n    columnIndex: number\n  ): React.ReactNode => {\n    const {isFirstPage, eventView, location, organization, tableData} = this.props;\n\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n\n    const columnKey = String(column.key);\n    const fieldRenderer = getFieldRenderer(\n      columnKey,\n      tableData.meta,\n      !organization.features.includes('discover-frontend-use-events-endpoint')\n    );\n\n    const display = eventView.getDisplayMode();\n    const isTopEvents =\n      display === DisplayModes.TOP5 || display === DisplayModes.DAILYTOP5;\n\n    const topEvents = eventView.topEvents ? parseInt(eventView.topEvents, 10) : TOP_N;\n    const count = Math.min(tableData?.data?.length ?? topEvents, topEvents);\n\n    let cell = fieldRenderer(dataRow, {organization, location});\n\n    if (columnKey === 'id') {\n      const eventSlug = generateEventSlug(dataRow);\n\n      const target = eventDetailsRouteWithEventView({\n        orgSlug: organization.slug,\n        eventSlug,\n        eventView,\n      });\n\n      cell = (\n        <Tooltip title={t('View Event')}>\n          <StyledLink data-test-id=\"view-event\" to={target}>\n            {cell}\n          </StyledLink>\n        </Tooltip>\n      );\n    } else if (columnKey === 'trace') {\n      const dateSelection = eventView.normalizeDateSelection(location);\n      if (dataRow.trace) {\n        const target = getTraceDetailsUrl(\n          organization,\n          String(dataRow.trace),\n          dateSelection,\n          {}\n        );\n\n        cell = (\n          <Tooltip title={t('View Trace')}>\n            <StyledLink data-test-id=\"view-trace\" to={target}>\n              {cell}\n            </StyledLink>\n          </Tooltip>\n        );\n      }\n    }\n\n    const fieldName = getAggregateAlias(columnKey);\n    const value = dataRow[fieldName];\n    if (tableData.meta[fieldName] === 'integer' && defined(value) && value > 999) {\n      return (\n        <Tooltip\n          title={value.toLocaleString()}\n          containerDisplayMode=\"block\"\n          position=\"right\"\n        >\n          <CellAction\n            column={column}\n            dataRow={dataRow}\n            handleCellAction={this.handleCellAction(dataRow, column)}\n          >\n            {cell}\n          </CellAction>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <Fragment>\n        {isFirstPage && isTopEvents && rowIndex < topEvents && columnIndex === 0 ? (\n          // Add one if we need to include Other in the series\n          <TopResultsIndicator count={count} index={rowIndex} />\n        ) : null}\n        <CellAction\n          column={column}\n          dataRow={dataRow}\n          handleCellAction={this.handleCellAction(dataRow, column)}\n        >\n          {cell}\n        </CellAction>\n      </Fragment>\n    );\n  };\n\n  handleEditColumns = () => {\n    const {organization, eventView, measurementKeys, spanOperationBreakdownKeys} =\n      this.props;\n\n    const hasBreakdownFeature = organization.features.includes(\n      'performance-ops-breakdown'\n    );\n\n    openModal(\n      modalProps => (\n        <ColumnEditModal\n          {...modalProps}\n          organization={organization}\n          measurementKeys={measurementKeys}\n          spanOperationBreakdownKeys={\n            hasBreakdownFeature ? spanOperationBreakdownKeys : undefined\n          }\n          columns={eventView.getColumns().map(col => col.column)}\n          onApply={this.handleUpdateColumns}\n        />\n      ),\n      {modalCss, backdrop: 'static'}\n    );\n  };\n\n  handleCellAction = (dataRow: TableDataRow, column: TableColumn<keyof TableDataRow>) => {\n    return (action: Actions, value: React.ReactText) => {\n      const {eventView, organization, projects, location} = this.props;\n\n      const query = new MutableSearch(eventView.query);\n\n      let nextView = eventView.clone();\n\n      trackAnalyticsEvent({\n        eventKey: 'discover_v2.results.cellaction',\n        eventName: 'Discoverv2: Cell Action Clicked',\n        organization_id: parseInt(organization.id, 10),\n        action,\n      });\n\n      switch (action) {\n        case Actions.TRANSACTION: {\n          const maybeProject = projects.find(\n            project =>\n              project.slug &&\n              [dataRow['project.name'], dataRow.project].includes(project.slug)\n          );\n          const projectID = maybeProject ? [maybeProject.id] : undefined;\n\n          const next = transactionSummaryRouteWithQuery({\n            orgSlug: organization.slug,\n            transaction: String(value),\n            projectID,\n            query: nextView.getPageFiltersQuery(),\n          });\n\n          browserHistory.push(next);\n          return;\n        }\n        case Actions.RELEASE: {\n          const maybeProject = projects.find(project => {\n            return project.slug === dataRow.project;\n          });\n\n          browserHistory.push({\n            pathname: `/organizations/${organization.slug}/releases/${encodeURIComponent(\n              value\n            )}/`,\n            query: {\n              ...nextView.getPageFiltersQuery(),\n\n              project: maybeProject ? maybeProject.id : undefined,\n            },\n          });\n\n          return;\n        }\n        case Actions.DRILLDOWN: {\n          // count_unique(column) drilldown\n\n          trackAnalyticsEvent({\n            eventKey: 'discover_v2.results.drilldown',\n            eventName: 'Discoverv2: Click aggregate drilldown',\n            organization_id: parseInt(organization.id, 10),\n          });\n\n          // Drilldown into each distinct value and get a count() for each value.\n          nextView = getExpandedResults(nextView, {}, dataRow).withNewColumn({\n            kind: 'function',\n            function: ['count', '', undefined, undefined],\n          });\n\n          browserHistory.push(nextView.getResultsViewUrlTarget(organization.slug));\n\n          return;\n        }\n        default: {\n          updateQuery(query, action, column, value);\n        }\n      }\n      nextView.query = query.formatString();\n\n      const target = nextView.getResultsViewUrlTarget(organization.slug);\n      // Get yAxis from location\n      target.query.yAxis = decodeList(location.query.yAxis);\n      browserHistory.push(target);\n    };\n  };\n\n  handleUpdateColumns = (columns: Column[]): void => {\n    const {organization, eventView, location} = this.props;\n\n    // metrics\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.update_columns',\n      eventName: 'Discoverv2: Update columns',\n      organization_id: parseInt(organization.id, 10),\n    });\n\n    const nextView = eventView.withColumns(columns);\n    const resultsViewUrlTarget = nextView.getResultsViewUrlTarget(organization.slug);\n    // Need to pull yAxis from location since eventView only stores 1 yAxis field at time\n    const previousYAxis = decodeList(location.query.yAxis);\n    resultsViewUrlTarget.query.yAxis = previousYAxis.filter(yAxis =>\n      nextView.getYAxisOptions().find(({value}) => value === yAxis)\n    );\n    browserHistory.push(resultsViewUrlTarget);\n  };\n\n  renderHeaderButtons = () => {\n    const {\n      organization,\n      title,\n      eventView,\n      isLoading,\n      error,\n      tableData,\n      location,\n      onChangeShowTags,\n      showTags,\n    } = this.props;\n\n    return (\n      <TableActions\n        title={title}\n        isLoading={isLoading}\n        error={error}\n        organization={organization}\n        eventView={eventView}\n        onEdit={this.handleEditColumns}\n        tableData={tableData}\n        location={location}\n        onChangeShowTags={onChangeShowTags}\n        showTags={showTags}\n      />\n    );\n  };\n\n  render() {\n    const {isLoading, error, location, tableData, eventView, organization} = this.props;\n\n    const columnOrder = eventView.getColumns(\n      organization.features.includes('discover-frontend-use-events-endpoint')\n    );\n    const columnSortBy = eventView.getSorts();\n\n    const prependColumnWidths = eventView.hasAggregateField()\n      ? ['40px']\n      : eventView.hasIdField()\n      ? []\n      : [`minmax(${COL_WIDTH_MINIMUM}px, max-content)`];\n\n    return (\n      <GridEditable\n        isLoading={isLoading}\n        error={error}\n        data={tableData ? tableData.data : []}\n        columnOrder={columnOrder}\n        columnSortBy={columnSortBy}\n        title={t('Results')}\n        grid={{\n          renderHeadCell: this._renderGridHeaderCell as any,\n          renderBodyCell: this._renderGridBodyCell as any,\n          onResizeColumn: this._resizeColumn as any,\n          renderPrependColumns: this._renderPrependColumns as any,\n          prependColumnWidths,\n        }}\n        headerButtons={this.renderHeaderButtons}\n        location={location}\n      />\n    );\n  }\n}\n\nconst PrependHeader = styled('span')`\n  color: ${p => p.theme.subText};\n`;\n\nconst StyledTooltip = styled(Tooltip)`\n  display: initial;\n`;\n\nconst StyledLink = styled(Link)`\n  > div {\n    display: inline;\n  }\n`;\n\nconst StyledIcon = styled(IconStack)`\n  vertical-align: middle;\n`;\n\nexport default withProjects(TableView);\n","import {PureComponent} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client} from 'sentry/api';\nimport Pagination from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {metric, trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport {SPAN_OP_BREAKDOWN_FIELDS} from 'sentry/utils/performance/spanOperationBreakdowns/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\n\nimport TableView from './tableView';\n\ntype TableProps = {\n  api: Client;\n  confirmedQuery: boolean;\n  eventView: EventView;\n  location: Location;\n  onChangeShowTags: () => void;\n  organization: Organization;\n  setError: (msg: string, code: number) => void;\n  showTags: boolean;\n  title: string;\n};\n\ntype TableState = {\n  error: null | string;\n  isLoading: boolean;\n  pageLinks: null | string;\n  tableData: TableData | null | undefined;\n  tableFetchID: symbol | undefined;\n};\n\n/**\n * `Table` is a container element that handles 2 things\n * 1. Fetch data from source\n * 2. Handle pagination of data\n *\n * It will pass the data it fetched to `TableView`, where the state of the\n * Table is maintained and controlled\n */\nclass Table extends PureComponent<TableProps, TableState> {\n  state: TableState = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    pageLinks: null,\n    tableData: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: TableProps) {\n    // Reload data if we aren't already loading, or if we've moved\n    // from an invalid view state to a valid one.\n    if (\n      (!this.state.isLoading && this.shouldRefetchData(prevProps)) ||\n      (prevProps.eventView.isValid() === false && this.props.eventView.isValid()) ||\n      prevProps.confirmedQuery !== this.props.confirmedQuery\n    ) {\n      this.fetchData();\n    }\n  }\n\n  shouldRefetchData = (prevProps: TableProps): boolean => {\n    const thisAPIPayload = this.props.eventView.getEventsAPIPayload(this.props.location);\n    const otherAPIPayload = prevProps.eventView.getEventsAPIPayload(prevProps.location);\n\n    return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);\n  };\n\n  fetchData = () => {\n    const {eventView, organization, location, setError, confirmedQuery} = this.props;\n\n    if (!eventView.isValid() || !confirmedQuery) {\n      return;\n    }\n\n    // note: If the eventView has no aggregates, the endpoint will automatically add the event id in\n    // the API payload response\n\n    const shouldUseEvents = organization.features.includes(\n      'discover-frontend-use-events-endpoint'\n    );\n    const url = shouldUseEvents\n      ? `/organizations/${organization.slug}/events/`\n      : `/organizations/${organization.slug}/eventsv2/`;\n    const tableFetchID = Symbol('tableFetchID');\n\n    // adding user_modified property. this property will be removed once search bar experiment is complete\n    const apiPayload = eventView.getEventsAPIPayload(location) as LocationQuery &\n      EventQuery & {user_modified?: string};\n    apiPayload.referrer = 'api.discover.query-table';\n\n    const queryUserModified = decodeScalar(location.query.userModified);\n    if (queryUserModified !== undefined) {\n      apiPayload.user_modified = queryUserModified;\n    }\n\n    setError('', 200);\n\n    this.setState({isLoading: true, tableFetchID});\n    metric.mark({name: `discover-events-start-${apiPayload.query}`});\n\n    this.props.api.clear();\n    this.props.api\n      .requestPromise(url, {\n        method: 'GET',\n        includeAllArgs: true,\n        query: apiPayload,\n      })\n      .then(([data, _, resp]) => {\n        // We want to measure this metric regardless of whether we use the result\n        metric.measure({\n          name: 'app.api.discover-query',\n          start: `discover-events-start-${apiPayload.query}`,\n          data: {\n            status: resp && resp.status,\n          },\n        });\n        if (this.state.tableFetchID !== tableFetchID) {\n          // invariant: a different request was initiated after this request\n          return;\n        }\n\n        const {fields, ...nonFieldsMeta} = data.meta ?? {};\n        // events api uses a different response format so we need to construct tableData differently\n        const tableData = shouldUseEvents\n          ? {\n              ...data,\n              meta: {...fields, nonFieldsMeta},\n            }\n          : data;\n\n        this.setState(prevState => ({\n          isLoading: false,\n          tableFetchID: undefined,\n          error: null,\n          pageLinks: resp ? resp.getResponseHeader('Link') : prevState.pageLinks,\n          tableData,\n        }));\n      })\n      .catch(err => {\n        metric.measure({\n          name: 'app.api.discover-query',\n          start: `discover-events-start-${apiPayload.query}`,\n          data: {\n            status: err.status,\n          },\n        });\n\n        const message = err?.responseJSON?.detail || t('An unknown error occurred.');\n        this.setState({\n          isLoading: false,\n          tableFetchID: undefined,\n          error: message,\n          pageLinks: null,\n          tableData: null,\n        });\n\n        trackAnalyticsEvent({\n          eventKey: 'discover_search.failed',\n          eventName: 'Discover Search: Failed',\n          organization_id: this.props.organization.id,\n          search_type: 'events',\n          search_source: 'discover_search',\n          error: message,\n        });\n\n        setError(message, err.status);\n      });\n  };\n\n  render() {\n    const {eventView} = this.props;\n    const {pageLinks, tableData, isLoading, error} = this.state;\n\n    const isFirstPage = pageLinks\n      ? parseLinkHeader(pageLinks).previous.results === false\n      : false;\n\n    return (\n      <Container>\n        <Measurements>\n          {({measurements}) => {\n            const measurementKeys = Object.values(measurements).map(({key}) => key);\n\n            return (\n              <TableView\n                {...this.props}\n                isLoading={isLoading}\n                isFirstPage={isFirstPage}\n                error={error}\n                eventView={eventView}\n                tableData={tableData}\n                measurementKeys={measurementKeys}\n                spanOperationBreakdownKeys={SPAN_OP_BREAKDOWN_FIELDS}\n              />\n            );\n          }}\n        </Measurements>\n        <Pagination pageLinks={pageLinks} />\n      </Container>\n    );\n  }\n}\n\nexport default withApi(Table);\n\nconst Container = styled('div')`\n  min-width: 0;\n`;\n","import {Component} from 'react';\nimport {browserHistory, InjectedRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {updateSavedQueryVisit} from 'sentry/actionCreators/discoverSavedQueries';\nimport {fetchTotalCount} from 'sentry/actionCreators/events';\nimport {fetchProjectsCount} from 'sentry/actionCreators/projects';\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport {Client} from 'sentry/api';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Confirm from 'sentry/components/confirm';\nimport {CreateAlertFromViewButton} from 'sentry/components/createAlertButton';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, SavedQuery} from 'sentry/types';\nimport {defined, generateQueryWithTag} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView, {isAPIPayloadSimilar} from 'sentry/utils/discover/eventView';\nimport {formatTagKey, generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {\n  DisplayModes,\n  MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES,\n} from 'sentry/utils/discover/types';\nimport localStorage from 'sentry/utils/localStorage';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {addRoutePerformanceContext} from '../performance/utils';\n\nimport {DEFAULT_EVENT_VIEW} from './data';\nimport ResultsChart from './resultsChart';\nimport ResultsHeader from './resultsHeader';\nimport Table from './table';\nimport Tags from './tags';\nimport {generateTitle} from './utils';\n\ntype Props = {\n  api: Client;\n  loading: boolean;\n  location: Location;\n  organization: Organization;\n  router: InjectedRouter;\n  selection: PageFilters;\n  savedQuery?: SavedQuery;\n};\n\ntype State = {\n  confirmedQuery: boolean;\n  error: string;\n  errorCode: number;\n  eventView: EventView;\n  incompatibleAlertNotice: React.ReactNode;\n  needConfirmation: boolean;\n  showTags: boolean;\n  totalValues: null | number;\n  savedQuery?: SavedQuery;\n};\nconst SHOW_TAGS_STORAGE_KEY = 'discover2:show-tags';\n\nfunction readShowTagsState() {\n  const value = localStorage.getItem(SHOW_TAGS_STORAGE_KEY);\n  return value === '1';\n}\n\nfunction getYAxis(location: Location, eventView: EventView, savedQuery?: SavedQuery) {\n  if (location.query.yAxis) {\n    return decodeList(location.query.yAxis);\n  }\n  if (location.query.yAxis === null) {\n    return [];\n  }\n  return savedQuery?.yAxis && savedQuery?.yAxis.length > 0\n    ? decodeList(savedQuery?.yAxis)\n    : [eventView.getYAxis()];\n}\n\nclass Results extends Component<Props, State> {\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    if (nextProps.savedQuery || !nextProps.loading) {\n      const eventView = EventView.fromSavedQueryOrLocation(\n        nextProps.savedQuery,\n        nextProps.location\n      );\n      return {...prevState, eventView, savedQuery: nextProps.savedQuery};\n    }\n    return prevState;\n  }\n\n  state: State = {\n    eventView: EventView.fromSavedQueryOrLocation(\n      this.props.savedQuery,\n      this.props.location\n    ),\n    error: '',\n    errorCode: 200,\n    totalValues: null,\n    showTags: readShowTagsState(),\n    needConfirmation: false,\n    confirmedQuery: false,\n    incompatibleAlertNotice: null,\n  };\n\n  componentDidMount() {\n    const {organization, selection, location} = this.props;\n    loadOrganizationTags(this.tagsApi, organization.slug, selection);\n    addRoutePerformanceContext(selection);\n    this.checkEventView();\n    this.canLoadEvents();\n    if (defined(location.query.id)) {\n      updateSavedQueryVisit(organization.slug, location.query.id);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const {api, location, organization, selection} = this.props;\n    const {eventView, confirmedQuery, savedQuery} = this.state;\n\n    this.checkEventView();\n    const currentQuery = eventView.getEventsAPIPayload(location);\n    const prevQuery = prevState.eventView.getEventsAPIPayload(prevProps.location);\n    const yAxisArray = getYAxis(location, eventView, savedQuery);\n    const prevYAxisArray = getYAxis(prevProps.location, eventView, prevState.savedQuery);\n\n    if (\n      !isAPIPayloadSimilar(currentQuery, prevQuery) ||\n      this.hasChartParametersChanged(\n        prevState.eventView,\n        eventView,\n        prevYAxisArray,\n        yAxisArray\n      )\n    ) {\n      api.clear();\n      this.canLoadEvents();\n    }\n    if (\n      !isEqual(prevProps.selection.datetime, selection.datetime) ||\n      !isEqual(prevProps.selection.projects, selection.projects)\n    ) {\n      loadOrganizationTags(this.tagsApi, organization.slug, selection);\n      addRoutePerformanceContext(selection);\n    }\n\n    if (prevState.confirmedQuery !== confirmedQuery) {\n      this.fetchTotalCount();\n    }\n  }\n\n  tagsApi: Client = new Client();\n\n  hasChartParametersChanged(\n    prevEventView: EventView,\n    eventView: EventView,\n    prevYAxisArray: string[],\n    yAxisArray: string[]\n  ) {\n    if (!isEqual(prevYAxisArray, yAxisArray)) {\n      return true;\n    }\n\n    const prevDisplay = prevEventView.getDisplayMode();\n    const display = eventView.getDisplayMode();\n\n    return prevDisplay !== display;\n  }\n\n  canLoadEvents = async () => {\n    const {api, location, organization} = this.props;\n    const {eventView} = this.state;\n    let needConfirmation = false;\n    let confirmedQuery = true;\n    const currentQuery = eventView.getEventsAPIPayload(location);\n    const duration = eventView.getDays();\n\n    if (duration > 30 && currentQuery.project) {\n      let projectLength = currentQuery.project.length;\n\n      if (\n        projectLength === 0 ||\n        (projectLength === 1 && currentQuery.project[0] === '-1')\n      ) {\n        try {\n          const results = await fetchProjectsCount(api, organization.slug);\n\n          if (projectLength === 0) {\n            projectLength = results.myProjects;\n          } else {\n            projectLength = results.allProjects;\n          }\n        } catch (err) {\n          // do nothing, so the length is 0 or 1 and the query is assumed safe\n        }\n      }\n\n      if (projectLength > 10) {\n        needConfirmation = true;\n        confirmedQuery = false;\n      }\n    }\n    // Once confirmed, a change of project or datetime will happen before this can set it to false,\n    // this means a query will still happen even if the new conditions need confirmation\n    // using a state callback to return this to false\n    this.setState({needConfirmation, confirmedQuery}, () => {\n      this.setState({confirmedQuery: false});\n    });\n    if (needConfirmation) {\n      this.openConfirm();\n    }\n  };\n\n  openConfirm = () => {};\n\n  setOpenFunction = ({open}) => {\n    this.openConfirm = open;\n    return null;\n  };\n\n  handleConfirmed = () => {\n    this.setState({needConfirmation: false, confirmedQuery: true}, () => {\n      this.setState({confirmedQuery: false});\n    });\n  };\n\n  handleCancelled = () => {\n    this.setState({needConfirmation: false, confirmedQuery: false});\n  };\n\n  async fetchTotalCount() {\n    const {api, organization, location} = this.props;\n    const {eventView, confirmedQuery} = this.state;\n\n    if (confirmedQuery === false || !eventView.isValid()) {\n      return;\n    }\n\n    try {\n      const totals = await fetchTotalCount(\n        api,\n        organization.slug,\n        eventView.getEventsAPIPayload(location)\n      );\n      this.setState({totalValues: totals});\n    } catch (err) {\n      Sentry.captureException(err);\n    }\n  }\n\n  checkEventView() {\n    const {eventView} = this.state;\n    const {loading} = this.props;\n    if (eventView.isValid() || loading) {\n      return;\n    }\n\n    // If the view is not valid, redirect to a known valid state.\n    const {location, organization, selection} = this.props;\n    const nextEventView = EventView.fromNewQueryWithLocation(\n      DEFAULT_EVENT_VIEW,\n      location\n    );\n    if (nextEventView.project.length === 0 && selection.projects) {\n      nextEventView.project = selection.projects;\n    }\n    if (location.query?.query) {\n      nextEventView.query = decodeScalar(location.query.query, '');\n    }\n\n    browserHistory.replace(nextEventView.getResultsViewUrlTarget(organization.slug));\n  }\n\n  handleChangeShowTags = () => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.results.toggle_tag_facets',\n      eventName: 'Discoverv2: Toggle Tag Facets',\n      organization_id: parseInt(organization.id, 10),\n    });\n    this.setState(state => {\n      const newValue = !state.showTags;\n      localStorage.setItem(SHOW_TAGS_STORAGE_KEY, newValue ? '1' : '0');\n      return {...state, showTags: newValue};\n    });\n  };\n\n  handleSearch = (query: string) => {\n    const {router, location} = this.props;\n\n    const queryParams = normalizeDateTimeParams({\n      ...(location.query || {}),\n      query,\n    });\n\n    // do not propagate pagination when making a new search\n    const searchQueryParams = omit(queryParams, 'cursor');\n\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...searchQueryParams,\n        userModified: true,\n      },\n    });\n  };\n\n  handleYAxisChange = (value: string[]) => {\n    const {router, location} = this.props;\n    const isDisplayMultiYAxisSupported = MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES.includes(\n      location.query.display as DisplayModes\n    );\n\n    const newQuery = {\n      ...location.query,\n      yAxis: value.length > 0 ? value : [null],\n      // If using Multi Y-axis and not in a supported display, change to the default display mode\n      display:\n        value.length > 1 && !isDisplayMultiYAxisSupported\n          ? location.query.display === DisplayModes.DAILYTOP5\n            ? DisplayModes.DAILY\n            : DisplayModes.DEFAULT\n          : location.query.display,\n    };\n\n    router.push({\n      pathname: location.pathname,\n      query: newQuery,\n    });\n\n    // Treat axis changing like the user already confirmed the query\n    if (!this.state.needConfirmation) {\n      this.handleConfirmed();\n    }\n\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.y_axis_change',\n      eventName: \"Discoverv2: Change chart's y axis\",\n      organization_id: parseInt(this.props.organization.id, 10),\n      y_axis_value: value,\n    });\n  };\n\n  handleDisplayChange = (value: string) => {\n    const {router, location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n      display: value,\n    };\n\n    router.push({\n      pathname: location.pathname,\n      query: newQuery,\n    });\n\n    // Treat display changing like the user already confirmed the query\n    if (!this.state.needConfirmation) {\n      this.handleConfirmed();\n    }\n  };\n\n  handleTopEventsChange = (value: string) => {\n    const {router, location} = this.props;\n\n    const newQuery = {\n      ...location.query,\n      topEvents: value,\n    };\n\n    router.push({\n      pathname: location.pathname,\n      query: newQuery,\n    });\n\n    // Treat display changing like the user already confirmed the query\n    if (!this.state.needConfirmation) {\n      this.handleConfirmed();\n    }\n  };\n\n  getDocumentTitle(): string {\n    const {organization} = this.props;\n    const {eventView} = this.state;\n    if (!eventView) {\n      return '';\n    }\n    return generateTitle({eventView, organization});\n  }\n\n  renderTagsTable() {\n    const {organization, location} = this.props;\n    const {eventView, totalValues, confirmedQuery} = this.state;\n\n    return (\n      <Layout.Side>\n        <Tags\n          generateUrl={this.generateTagUrl}\n          totalValues={totalValues}\n          eventView={eventView}\n          organization={organization}\n          location={location}\n          confirmedQuery={confirmedQuery}\n        />\n      </Layout.Side>\n    );\n  }\n\n  generateTagUrl = (key: string, value: string) => {\n    const {organization} = this.props;\n    const {eventView} = this.state;\n\n    const url = eventView.getResultsViewUrlTarget(organization.slug);\n    url.query = generateQueryWithTag(url.query, {\n      key: formatTagKey(key),\n      value,\n    });\n    return url;\n  };\n\n  handleIncompatibleQuery: React.ComponentProps<\n    typeof CreateAlertFromViewButton\n  >['onIncompatibleQuery'] = (incompatibleAlertNoticeFn, errors) => {\n    const {organization} = this.props;\n    const {eventView} = this.state;\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.create_alert_clicked',\n      eventName: 'Discoverv2: Create alert clicked',\n      status: 'error',\n      query: eventView.query,\n      errors,\n      organization_id: organization.id,\n      url: window.location.href,\n    });\n\n    const incompatibleAlertNotice = incompatibleAlertNoticeFn(() =>\n      this.setState({incompatibleAlertNotice: null})\n    );\n\n    this.setState({incompatibleAlertNotice});\n  };\n\n  renderError(error: string) {\n    if (!error) {\n      return null;\n    }\n    return (\n      <Alert type=\"error\" showIcon>\n        {error}\n      </Alert>\n    );\n  }\n\n  setError = (error: string, errorCode: number) => {\n    this.setState({error, errorCode});\n  };\n\n  render() {\n    const {organization, location, router} = this.props;\n    const {\n      eventView,\n      error,\n      errorCode,\n      totalValues,\n      showTags,\n      incompatibleAlertNotice,\n      confirmedQuery,\n      savedQuery,\n    } = this.state;\n    const fields = eventView.hasAggregateField()\n      ? generateAggregateFields(organization, eventView.fields)\n      : eventView.fields;\n    const query = eventView.query;\n    const title = this.getDocumentTitle();\n    const yAxisArray = getYAxis(location, eventView, savedQuery);\n\n    return (\n      <SentryDocumentTitle title={title} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            <ResultsHeader\n              errorCode={errorCode}\n              organization={organization}\n              location={location}\n              eventView={eventView}\n              onIncompatibleAlertQuery={this.handleIncompatibleQuery}\n              yAxis={yAxisArray}\n              router={router}\n            />\n            <Layout.Body>\n              {incompatibleAlertNotice && <Top fullWidth>{incompatibleAlertNotice}</Top>}\n              <Top fullWidth>\n                {this.renderError(error)}\n                <StyledPageFilterBar condensed>\n                  <ProjectPageFilter />\n                  <EnvironmentPageFilter />\n                  <DatePageFilter alignDropdown=\"left\" />\n                </StyledPageFilterBar>\n                <StyledSearchBar\n                  searchSource=\"eventsv2\"\n                  organization={organization}\n                  projectIds={eventView.project}\n                  query={query}\n                  fields={fields}\n                  onSearch={this.handleSearch}\n                  maxQueryLength={MAX_QUERY_LENGTH}\n                />\n                <ResultsChart\n                  router={router}\n                  organization={organization}\n                  eventView={eventView}\n                  location={location}\n                  onAxisChange={this.handleYAxisChange}\n                  onDisplayChange={this.handleDisplayChange}\n                  onTopEventsChange={this.handleTopEventsChange}\n                  total={totalValues}\n                  confirmedQuery={confirmedQuery}\n                  yAxis={yAxisArray}\n                />\n              </Top>\n              <Layout.Main fullWidth={!showTags}>\n                <Table\n                  organization={organization}\n                  eventView={eventView}\n                  location={location}\n                  title={title}\n                  setError={this.setError}\n                  onChangeShowTags={this.handleChangeShowTags}\n                  showTags={showTags}\n                  confirmedQuery={confirmedQuery}\n                />\n              </Layout.Main>\n              {showTags ? this.renderTagsTable() : null}\n              <Confirm\n                priority=\"primary\"\n                header={<strong>{t('May lead to thumb twiddling')}</strong>}\n                confirmText={t('Do it')}\n                cancelText={t('Nevermind')}\n                onConfirm={this.handleConfirmed}\n                onCancel={this.handleCancelled}\n                message={\n                  <p>\n                    {tct(\n                      `You've created a query that will search for events made\n                      [dayLimit:over more than 30 days] for [projectLimit:more than 10 projects].\n                      A lot has happened during that time, so this might take awhile.\n                      Are you sure you want to do this?`,\n                      {\n                        dayLimit: <strong />,\n                        projectLimit: <strong />,\n                      }\n                    )}\n                  </p>\n                }\n              >\n                {this.setOpenFunction}\n              </Confirm>\n            </Layout.Body>\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst StyledPageFilterBar = styled(PageFilterBar)`\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  margin-bottom: ${space(2)};\n`;\n\nconst Top = styled(Layout.Main)`\n  flex-grow: 0;\n`;\n\ntype SavedQueryState = AsyncComponent['state'] & {\n  savedQuery?: SavedQuery | null;\n};\n\nclass SavedQueryAPI extends AsyncComponent<Props, SavedQueryState> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, location} = this.props;\n    if (location.query.id) {\n      return [\n        [\n          'savedQuery',\n          `/organizations/${organization.slug}/discover/saved/${location.query.id}/`,\n        ],\n      ];\n    }\n    return [];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody(): React.ReactNode {\n    const {savedQuery, loading} = this.state;\n    return (\n      <Results {...this.props} savedQuery={savedQuery ?? undefined} loading={loading} />\n    );\n  }\n}\n\nfunction ResultsContainer(props: Props) {\n  /**\n   * Block `<Results>` from mounting until GSH is ready since there are API\n   * requests being performed on mount.\n   *\n   * Also, we skip loading last used projects if you have multiple projects feature as\n   * you no longer need to enforce a project if it is empty. We assume an empty project is\n   * the desired behavior because saved queries can contain a project filter. The only\n   * exception is if we are showing a prebuilt saved query in which case we want to\n   * respect pinned filters.\n   */\n\n  return (\n    <PageFiltersContainer\n      skipLoadLastUsed={\n        props.organization.features.includes('global-views') && !!props.savedQuery\n      }\n      hideGlobalHeader\n    >\n      <SavedQueryAPI {...props} />\n    </PageFiltersContainer>\n  );\n}\n\nexport default withApi(withOrganization(withPageFilters(ResultsContainer)));\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport {fetchTagFacets, Tag, TagSegment} from 'sentry/actionCreators/events';\nimport {Client} from 'sentry/api';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Placeholder from 'sentry/components/placeholder';\nimport TagDistributionMeter from 'sentry/components/tagDistributionMeter';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView, {isAPIPayloadSimilar} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  generateUrl: (key: string, value: string) => LocationDescriptor;\n  location: Location;\n  organization: Organization;\n  totalValues: null | number;\n  confirmedQuery?: boolean;\n};\n\ntype State = {\n  error: string;\n  loading: boolean;\n  tags: Tag[];\n  totalValues: null | number;\n};\n\nclass Tags extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    tags: [],\n    totalValues: null,\n    error: '',\n  };\n\n  componentDidMount() {\n    this.fetchData(true);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.shouldRefetchData(prevProps) ||\n      prevProps.confirmedQuery !== this.props.confirmedQuery\n    ) {\n      this.fetchData();\n    }\n  }\n\n  shouldRefetchData = (prevProps: Props): boolean => {\n    const thisAPIPayload = this.props.eventView.getFacetsAPIPayload(this.props.location);\n    const otherAPIPayload = prevProps.eventView.getFacetsAPIPayload(prevProps.location);\n\n    return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);\n  };\n\n  fetchData = async (forceFetchData = false) => {\n    const {api, organization, eventView, location, confirmedQuery} = this.props;\n    this.setState({loading: true, error: '', tags: []});\n\n    // Fetch should be forced after mounting as confirmedQuery isn't guaranteed\n    // since this component can mount/unmount via show/hide tags separate from\n    // data being loaded for the rest of the page.\n    if (!forceFetchData && confirmedQuery === false) {\n      return;\n    }\n\n    try {\n      const tags = await fetchTagFacets(\n        api,\n        organization.slug,\n        eventView.getFacetsAPIPayload(location)\n      );\n      this.setState({loading: false, tags});\n    } catch (err) {\n      Sentry.captureException(err);\n      this.setState({loading: false, error: err});\n    }\n  };\n\n  handleTagClick = (tag: string) => {\n    const {organization} = this.props;\n    // metrics\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.facet_map.clicked',\n      eventName: 'Discoverv2: Clicked on a tag on the facet map',\n      tag,\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  renderTag(tag: Tag) {\n    const {generateUrl, totalValues} = this.props;\n\n    const segments: TagSegment[] = tag.topValues.map(segment => {\n      segment.url = generateUrl(tag.key, segment.value);\n\n      return segment;\n    });\n    // Ensure we don't show >100% if there's a slight mismatch between the facets\n    // endpoint and the totals endpoint\n    const maxTotalValues =\n      segments.length > 0\n        ? Math.max(Number(totalValues), segments[0].count)\n        : totalValues;\n    return (\n      <TagDistributionMeter\n        key={tag.key}\n        title={tag.key}\n        segments={segments}\n        totalValues={Number(maxTotalValues)}\n        renderLoading={() => <StyledPlaceholder height=\"16px\" />}\n        onTagClick={this.handleTagClick}\n        showReleasePackage\n      />\n    );\n  }\n\n  renderPlaceholders() {\n    return (\n      <Fragment>\n        <StyledPlaceholderTitle key=\"title-1\" />\n        <StyledPlaceholder key=\"bar-1\" />\n        <StyledPlaceholderTitle key=\"title-2\" />\n        <StyledPlaceholder key=\"bar-2\" />\n        <StyledPlaceholderTitle key=\"title-3\" />\n        <StyledPlaceholder key=\"bar-3\" />\n      </Fragment>\n    );\n  }\n\n  renderBody = () => {\n    const {loading, error, tags} = this.state;\n    if (loading) {\n      return this.renderPlaceholders();\n    }\n    if (error) {\n      return (\n        <ErrorPanel height=\"132px\">\n          <IconWarning color=\"gray300\" size=\"lg\" />\n        </ErrorPanel>\n      );\n    }\n    if (tags.length > 0) {\n      return tags.map(tag => this.renderTag(tag));\n    }\n    return <StyledEmptyStateWarning small>{t('No tags found')}</StyledEmptyStateWarning>;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <SectionHeading>{t('Tag Summary')}</SectionHeading>\n        {this.renderBody()}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  height: 132px;\n  padding: 54px 15%;\n`;\n\nconst StyledPlaceholder = styled(Placeholder)`\n  border-radius: ${p => p.theme.borderRadius};\n  height: 16px;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst StyledPlaceholderTitle = styled(Placeholder)`\n  width: 100px;\n  height: 12px;\n  margin-bottom: ${space(0.5)};\n`;\n\nexport {Tags};\nexport default withApi(Tags);\n","import moment from 'moment';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {EventsStatsData, Project} from 'sentry/types';\nimport EventView, {LocationQuery} from 'sentry/utils/discover/eventView';\n\nexport type TrendView = EventView & {\n  middle?: string;\n  orderby?: string;\n  trendFunction?: string;\n  trendType?: TrendChangeType;\n};\n\nexport type TrendsQuery = EventQuery &\n  LocationQuery & {\n    interval?: string;\n    middle?: string;\n    trendFunction?: string;\n    trendType?: TrendChangeType;\n  };\n\nexport type TrendFunction = {\n  alias: string;\n  field: TrendFunctionField;\n  label: string;\n  legendLabel: string;\n};\n\nexport type TrendParameter = {\n  column: string;\n  label: string;\n};\n\nexport enum TrendChangeType {\n  IMPROVED = 'improved',\n  REGRESSION = 'regression',\n}\n\nexport enum TrendFunctionField {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  AVG = 'avg',\n}\n\nexport enum TrendColumnField {\n  DURATION = 'transaction.duration',\n  LCP = 'measurements.lcp',\n  FCP = 'measurements.fcp',\n  FID = 'measurements.fid',\n  CLS = 'measurements.cls',\n  SPANS_DB = 'spans.db',\n  SPANS_HTTP = 'spans.http',\n  SPANS_BROWSER = 'spans.browser',\n  SPANS_RESOURCE = 'spans.resource',\n}\n\nexport type TrendStat = {\n  data: EventsStatsData;\n  order: number;\n};\n\nexport type TrendsStats = {\n  [transaction: string]: TrendStat;\n};\n\nexport type TrendsTransaction = {\n  aggregate_range_1: number;\n  aggregate_range_2: number;\n  count: number;\n\n  count_percentage: number;\n  count_range_1: number;\n  count_range_2: number;\n  project: string;\n  transaction: string;\n  trend_difference: number;\n  trend_percentage: number;\n};\n\nexport type TrendsDataEvents = {\n  data: TrendsTransaction[];\n  meta: any;\n};\n\nexport type TrendsData = {\n  events: TrendsDataEvents;\n  projects: Project[];\n  stats: TrendsStats;\n};\n\nexport type NormalizedTrendsTransaction = TrendsTransaction & {\n  received_at: Readonly<moment.Moment>;\n};\n","import {ASAP} from 'downsample/methods/ASAP';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  AggregationKey,\n  Field,\n  generateFieldAsString,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunction,\n  TrendFunctionField,\n  TrendParameter,\n  TrendsTransaction,\n  TrendView,\n} from './types';\n\nexport const DEFAULT_TRENDS_STATS_PERIOD = '14d';\nexport const DEFAULT_MAX_DURATION = '15min';\n\nexport const TRENDS_FUNCTIONS: TrendFunction[] = [\n  {\n    label: 'p50',\n    field: TrendFunctionField.P50,\n    alias: 'percentile_range',\n    legendLabel: 'p50',\n  },\n  {\n    label: 'p75',\n    field: TrendFunctionField.P75,\n    alias: 'percentile_range',\n    legendLabel: 'p75',\n  },\n  {\n    label: 'p95',\n    field: TrendFunctionField.P95,\n    alias: 'percentile_range',\n    legendLabel: 'p95',\n  },\n  {\n    label: 'p99',\n    field: TrendFunctionField.P99,\n    alias: 'percentile_range',\n    legendLabel: 'p99',\n  },\n  {\n    label: 'average',\n    field: TrendFunctionField.AVG,\n    alias: 'avg_range',\n    legendLabel: 'average',\n  },\n];\n\nexport const TRENDS_PARAMETERS: TrendParameter[] = [\n  {\n    label: 'Duration',\n    column: TrendColumnField.DURATION,\n  },\n  {\n    label: 'LCP',\n    column: TrendColumnField.LCP,\n  },\n  {\n    label: 'FCP',\n    column: TrendColumnField.FCP,\n  },\n  {\n    label: 'FID',\n    column: TrendColumnField.FID,\n  },\n  {\n    label: 'CLS',\n    column: TrendColumnField.CLS,\n  },\n  {\n    label: 'Spans (http)',\n    column: TrendColumnField.SPANS_HTTP,\n  },\n  {\n    label: 'Spans (db)',\n    column: TrendColumnField.SPANS_DB,\n  },\n  {\n    label: 'Spans (browser)',\n    column: TrendColumnField.SPANS_BROWSER,\n  },\n  {\n    label: 'Spans (resource)',\n    column: TrendColumnField.SPANS_RESOURCE,\n  },\n];\n\nexport const trendToColor = {\n  [TrendChangeType.IMPROVED]: {\n    lighter: theme.green200,\n    default: theme.green300,\n  },\n  [TrendChangeType.REGRESSION]: {\n    lighter: theme.red200,\n    default: theme.red300,\n  },\n};\n\nexport const trendSelectedQueryKeys = {\n  [TrendChangeType.IMPROVED]: 'improvedSelected',\n  [TrendChangeType.REGRESSION]: 'regressionSelected',\n};\n\nexport const trendUnselectedSeries = {\n  [TrendChangeType.IMPROVED]: 'improvedUnselectedSeries',\n  [TrendChangeType.REGRESSION]: 'regressionUnselectedSeries',\n};\n\nexport const trendCursorNames = {\n  [TrendChangeType.IMPROVED]: 'improvedCursor',\n  [TrendChangeType.REGRESSION]: 'regressionCursor',\n};\n\nexport function resetCursors() {\n  const cursors = {};\n  Object.values(trendCursorNames).forEach(cursor => (cursors[cursor] = undefined)); // Resets both cursors\n  return cursors;\n}\n\nexport function getCurrentTrendFunction(\n  location: Location,\n  _trendFunctionField?: TrendFunctionField\n): TrendFunction {\n  const trendFunctionField =\n    _trendFunctionField ?? decodeScalar(location?.query?.trendFunction);\n  const trendFunction = TRENDS_FUNCTIONS.find(({field}) => field === trendFunctionField);\n  return trendFunction || TRENDS_FUNCTIONS[0];\n}\n\nfunction getDefaultTrendParameter(\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const trendParameter = performanceTypeToTrendParameterLabel(performanceType);\n\n  return trendParameter;\n}\n\nexport function getCurrentTrendParameter(\n  location: Location,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const trendParameterLabel = decodeScalar(location?.query?.trendParameter);\n  const trendParameter = TRENDS_PARAMETERS.find(\n    ({label}) => label === trendParameterLabel\n  );\n\n  if (trendParameter) {\n    return trendParameter;\n  }\n\n  const defaultTrendParameter = getDefaultTrendParameter(projects, projectIds);\n  return defaultTrendParameter;\n}\n\nexport function performanceTypeToTrendParameterLabel(\n  performanceType: PROJECT_PERFORMANCE_TYPE\n): TrendParameter {\n  switch (performanceType) {\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND:\n      return {\n        label: 'LCP',\n        column: TrendColumnField.LCP,\n      };\n    case PROJECT_PERFORMANCE_TYPE.ANY:\n    case PROJECT_PERFORMANCE_TYPE.BACKEND:\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER:\n    default:\n      return {\n        label: 'Duration',\n        column: TrendColumnField.DURATION,\n      };\n  }\n}\n\nexport function generateTrendFunctionAsString(\n  trendFunction: TrendFunctionField,\n  trendParameter: string\n): string {\n  return generateFieldAsString({\n    kind: 'function',\n    function: [trendFunction as AggregationKey, trendParameter, undefined, undefined],\n  });\n}\n\nexport function transformDeltaSpread(from: number, to: number) {\n  const fromSeconds = from / 1000;\n  const toSeconds = to / 1000;\n\n  const showDigits = from > 1000 || to > 1000 || from < 10 || to < 10; // Show digits consistently if either has them\n\n  return {fromSeconds, toSeconds, showDigits};\n}\n\nexport function getTrendProjectId(\n  trend: NormalizedTrendsTransaction,\n  projects?: Project[]\n): string | undefined {\n  if (!trend.project || !projects) {\n    return undefined;\n  }\n  const transactionProject = projects.find(project => project.slug === trend.project);\n  return transactionProject?.id;\n}\n\nexport function modifyTrendView(\n  trendView: TrendView,\n  location: Location,\n  trendsType: TrendChangeType,\n  projects: Project[],\n  isProjectOnly?: boolean\n) {\n  const trendFunction = getCurrentTrendFunction(location);\n  const trendParameter = getCurrentTrendParameter(location, projects, trendView.project);\n\n  const transactionField = isProjectOnly ? [] : ['transaction'];\n  const fields = [...transactionField, 'project'].map(field => ({\n    field,\n  })) as Field[];\n\n  const trendSort = {\n    field: 'trend_percentage()',\n    kind: 'asc',\n  } as Sort;\n\n  trendView.trendType = trendsType;\n  if (trendsType === TrendChangeType.REGRESSION) {\n    trendSort.kind = 'desc';\n  }\n\n  if (trendFunction && trendParameter) {\n    trendView.trendFunction = generateTrendFunctionAsString(\n      trendFunction.field,\n      trendParameter.column\n    );\n  }\n  trendView.query = getLimitTransactionItems(trendView.query);\n\n  trendView.interval = getQueryInterval(location, trendView);\n\n  trendView.sorts = [trendSort];\n  trendView.fields = fields;\n}\n\nexport function modifyTrendsViewDefaultPeriod(eventView: EventView, location: Location) {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    eventView.statsPeriod = DEFAULT_TRENDS_STATS_PERIOD;\n  }\n  return eventView;\n}\n\nfunction getQueryInterval(location: Location, eventView: TrendView) {\n  const intervalFromQueryParam = decodeScalar(location?.query?.interval);\n  const {start, end, statsPeriod} = eventView;\n\n  const datetimeSelection = {\n    start: start || null,\n    end: end || null,\n    period: statsPeriod,\n  };\n\n  const intervalFromSmoothing = getInterval(datetimeSelection, 'high');\n\n  return intervalFromQueryParam || intervalFromSmoothing;\n}\n\nexport function transformValueDelta(value: number, trendType: TrendChangeType) {\n  const absoluteValue = Math.abs(value);\n\n  const changeLabel =\n    trendType === TrendChangeType.REGRESSION ? t('slower') : t('faster');\n\n  const seconds = absoluteValue / 1000;\n\n  const fixedDigits = absoluteValue > 1000 || absoluteValue < 10 ? 1 : 0;\n\n  return {seconds, fixedDigits, changeLabel};\n}\n\n/**\n * This will normalize the trends transactions while the current trend function and current data are out of sync\n * To minimize extra renders with missing results.\n */\nexport function normalizeTrends(\n  data: Array<TrendsTransaction>\n): Array<NormalizedTrendsTransaction> {\n  const received_at = moment(); // Adding the received time for the transaction so calls to get baseline always line up with the transaction\n  return data.map(row => {\n    return {\n      ...row,\n      received_at,\n      transaction: row.transaction,\n    } as NormalizedTrendsTransaction;\n  });\n}\n\nexport function getSelectedQueryKey(trendChangeType: TrendChangeType) {\n  return trendSelectedQueryKeys[trendChangeType];\n}\n\nexport function getUnselectedSeries(trendChangeType: TrendChangeType) {\n  return trendUnselectedSeries[trendChangeType];\n}\n\nexport function movingAverage(data, index, size) {\n  return (\n    data\n      .slice(index - size, index)\n      .map(a => a.value)\n      .reduce((a, b) => a + b, 0) / size\n  );\n}\n\n/**\n * This function applies defaults for trend and count percentage, and adds the confidence limit to the query\n */\nfunction getLimitTransactionItems(query: string) {\n  const limitQuery = new MutableSearch(query);\n  if (!limitQuery.hasFilter('count_percentage()')) {\n    limitQuery.addFilterValues('count_percentage()', ['>0.25', '<4']);\n  }\n  if (!limitQuery.hasFilter('trend_percentage()')) {\n    limitQuery.addFilterValues('trend_percentage()', ['>0%']);\n  }\n  if (!limitQuery.hasFilter('confidence()')) {\n    limitQuery.addFilterValues('confidence()', ['>6']);\n  }\n  return limitQuery.formatString();\n}\n\nexport const smoothTrend = (data: [number, number][], resolution = 100) => {\n  return ASAP(data, resolution);\n};\n\nexport const replaceSeriesName = (seriesName: string) => {\n  return ['p50', 'p75'].find(aggregate => seriesName.includes(aggregate));\n};\n\nexport const replaceSmoothedSeriesName = (seriesName: string) => {\n  return `Smoothed ${['p50', 'p75'].find(aggregate => seriesName.includes(aggregate))}`;\n};\n\nexport function transformEventStatsSmoothed(data?: Series[], seriesName?: string) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = 0;\n  if (!data) {\n    return {\n      maxValue,\n      minValue,\n      smoothedResults: undefined,\n    };\n  }\n\n  const smoothedResults: Series[] = [];\n\n  for (const current of data) {\n    const currentData = current.data;\n    const resultData: SeriesDataUnit[] = [];\n\n    const smoothed = smoothTrend(\n      currentData.map(({name, value}) => [Number(name), value])\n    );\n\n    for (let i = 0; i < smoothed.length; i++) {\n      const point = smoothed[i] as any;\n      const value = point.y;\n      resultData.push({\n        name: point.x,\n        value,\n      });\n      if (!isNaN(value)) {\n        const rounded = Math.round(value);\n        minValue = Math.min(rounded, minValue);\n        maxValue = Math.max(rounded, maxValue);\n      }\n    }\n    smoothedResults.push({\n      seriesName: seriesName || current.seriesName || 'Current',\n      data: resultData,\n      lineStyle: current.lineStyle,\n      color: current.color,\n    });\n  }\n\n  return {\n    minValue,\n    maxValue,\n    smoothedResults,\n  };\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {backend, frontend, mobile} from 'sentry/data/platformCategories';\nimport {\n  Organization,\n  OrganizationSummary,\n  PageFilters,\n  Project,\n  ReleaseProject,\n} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {statsPeriodToDays} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TRACING_FIELDS} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getCurrentSentryReactTransaction from 'sentry/utils/getCurrentSentryReactTransaction';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {DEFAULT_MAX_DURATION} from './trends/utils';\n\nexport const QUERY_KEYS = [\n  'environment',\n  'project',\n  'query',\n  'start',\n  'end',\n  'statsPeriod',\n] as const;\n\n/**\n * Performance type can used to determine a default view or which specific field should be used by default on pages\n * where we don't want to wait for transaction data to return to determine how to display aspects of a page.\n */\nexport enum PROJECT_PERFORMANCE_TYPE {\n  ANY = 'any', // Fallback to transaction duration\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  FRONTEND_OTHER = 'frontend_other',\n  MOBILE = 'mobile',\n}\n\n// The native SDK is equally used on clients and end-devices as on\n// backend, the default view should be \"All Transactions\".\nconst FRONTEND_PLATFORMS: string[] = [...frontend];\nconst BACKEND_PLATFORMS: string[] = backend.filter(platform => platform !== 'native');\nconst MOBILE_PLATFORMS: string[] = [...mobile];\n\nexport function platformToPerformanceType(\n  projects: (Project | ReleaseProject)[],\n  projectIds: readonly number[]\n) {\n  if (projectIds.length === 0 || projectIds[0] === ALL_ACCESS_PROJECTS) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  const selectedProjects = projects.filter(p =>\n    projectIds.includes(parseInt(`${p.id}`, 10))\n  );\n\n  if (selectedProjects.length === 0 || selectedProjects.some(p => !p.platform)) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      FRONTEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.FRONTEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      BACKEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.BACKEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      MOBILE_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.MOBILE;\n  }\n\n  return PROJECT_PERFORMANCE_TYPE.ANY;\n}\n\n/**\n * Used for transaction summary to determine appropriate columns on a page, since there is no display field set for the page.\n */\nexport function platformAndConditionsToPerformanceType(\n  projects: Project[],\n  eventView: EventView\n) {\n  const performanceType = platformToPerformanceType(projects, eventView.project);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    const conditions = new MutableSearch(eventView.query);\n    const ops = conditions.getFilterValues('!transaction.op');\n    if (ops.some(op => op === 'pageload')) {\n      return PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER;\n    }\n  }\n\n  return performanceType;\n}\n\n/**\n * Used for transaction summary to check the view itself, since it can have conditions which would exclude it from having vitals aside from platform.\n */\nexport function isSummaryViewFrontendPageLoad(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n    PROJECT_PERFORMANCE_TYPE.FRONTEND\n  );\n}\n\nexport function isSummaryViewFrontend(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND ||\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER\n  );\n}\n\nexport function getPerformanceLandingUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/`;\n}\n\nexport function getPerformanceTrendsUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/trends/`;\n}\n\nexport function getTransactionSearchQuery(location: Location, query: string = '') {\n  return decodeScalar(location.query.query, query).trim();\n}\n\nexport function handleTrendsClick({\n  location,\n  organization,\n}: {\n  location: Location;\n  organization: Organization;\n}) {\n  trackAnalyticsEvent({\n    eventKey: 'performance_views.change_view',\n    eventName: 'Performance Views: Change View',\n    organization_id: parseInt(organization.id, 10),\n    view_name: 'TRENDS',\n  });\n\n  const target = trendsTargetRoute({location, organization});\n\n  browserHistory.push(target);\n}\n\nexport function trendsTargetRoute({\n  location,\n  organization,\n  initialConditions,\n  additionalQuery,\n}: {\n  location: Location;\n  organization: Organization;\n  additionalQuery?: {[x: string]: string};\n  initialConditions?: MutableSearch;\n}) {\n  const newQuery = {\n    ...location.query,\n    ...additionalQuery,\n  };\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  const modifiedConditions = initialConditions ?? new MutableSearch([]);\n\n  if (conditions.hasFilter('tpm()')) {\n    modifiedConditions.setFilterValues('tpm()', conditions.getFilterValues('tpm()'));\n  } else {\n    modifiedConditions.setFilterValues('tpm()', ['>0.01']);\n  }\n  if (conditions.hasFilter('transaction.duration')) {\n    modifiedConditions.setFilterValues(\n      'transaction.duration',\n      conditions.getFilterValues('transaction.duration')\n    );\n  } else {\n    modifiedConditions.setFilterValues('transaction.duration', [\n      '>0',\n      `<${DEFAULT_MAX_DURATION}`,\n    ]);\n  }\n  newQuery.query = modifiedConditions.formatString();\n\n  return {pathname: getPerformanceTrendsUrl(organization), query: {...newQuery}};\n}\n\nexport function removeTracingKeysFromSearch(\n  currentFilter: MutableSearch,\n  options: {excludeTagKeys: Set<string>} = {\n    excludeTagKeys: new Set([\n      // event type can be \"transaction\" but we're searching for issues\n      'event.type',\n      // the project is already determined by the transaction,\n      // and issue search does not support the project filter\n      'project',\n    ]),\n  }\n) {\n  currentFilter.getFilterKeys().forEach(tagKey => {\n    const searchKey = tagKey.startsWith('!') ? tagKey.substr(1) : tagKey;\n    // Remove aggregates and transaction event fields\n    if (\n      // aggregates\n      searchKey.match(/\\w+\\(.*\\)/) ||\n      // transaction event fields\n      TRACING_FIELDS.includes(searchKey) ||\n      // tags that we don't want to pass to pass to issue search\n      options.excludeTagKeys.has(searchKey)\n    ) {\n      currentFilter.removeFilter(tagKey);\n    }\n  });\n\n  return currentFilter;\n}\n\nexport function addRoutePerformanceContext(selection: PageFilters) {\n  const transaction = getCurrentSentryReactTransaction();\n  const days = statsPeriodToDays(\n    selection.datetime.period,\n    selection.datetime.start,\n    selection.datetime.end\n  );\n  const oneDay = 86400;\n  const seconds = Math.floor(days * oneDay);\n\n  transaction?.setTag('query.period', seconds.toString());\n  let groupedPeriod = '>30d';\n  if (seconds <= oneDay) {\n    groupedPeriod = '<=1d';\n  } else if (seconds <= oneDay * 7) {\n    groupedPeriod = '<=7d';\n  } else if (seconds <= oneDay * 14) {\n    groupedPeriod = '<=14d';\n  } else if (seconds <= oneDay * 30) {\n    groupedPeriod = '<=30d';\n  }\n  transaction?.setTag('query.period.grouped', groupedPeriod);\n}\n\nexport function getTransactionName(location: Location): string | undefined {\n  const {transaction} = location.query;\n\n  return decodeScalar(transaction);\n}\n\nexport function getPerformanceDuration(milliseconds: number) {\n  return getDuration(milliseconds / 1000, milliseconds > 1000 ? 2 : 0, true);\n}\n"],"names":["Chart","React","seriesSelection","forceUpdate","legendChange","disableableSeries","this","props","selected","Object","keys","reduce","state","key","disableable","includes","setState","shouldComponentUpdate","nextProps","nextState","isEqual","reloading","timeseriesData","releaseSeries","previousTimeseriesData","tableData","getChartComponent","showDaily","yAxis","chartComponent","defined","BarChart","length","aggregateMultiPlotType","LineChart","AreaChart","Error","render","theme","loading","_loading","_reloading","zoomRenderProps","showLegend","legendOptions","chartOptions","chartOptionsProp","currentSeriesNames","previousSeriesNames","seriesTransformer","previousSeriesTransformer","colors","height","timeframe","topEvents","fromDiscover","Component","WorldMapChart","data","title","processTableResults","tableSeries","seriesName","series","t","releasesLegend","hasOther","push","Array","isArray","releases","hideReleasesByDefault","markLine","RELEASE_LINES_THRESHOLD","legend","right","top","undefined","previousSeries","map","prev","chartColors","slice","charts","getColorPalette","chartOther","grid","left","bottom","seriesOptions","showSymbol","tooltip","trigger","truncate","valueFormatter","value","tooltipFormatter","xAxis","min","start","max","end","axisLabel","color","chartLabel","formatter","axisLabelFormatter","animation","onLegendSelectChanged","handleLegendSelectChanged","previousPeriod","ThemedChart","withTheme","EventsChart","isStacked","api","organization","period","utc","query","router","projects","environments","minutesThresholdToDisplaySeconds","disablePrevious","disableReleases","emphasizeReleases","currentSeriesName","currentName","previousSeriesName","previousName","field","interval","orderby","confirmedQuery","chartHeader","preserveReleaseQueryParams","releaseQueryExtra","usePageZoom","withoutZerofill","includePrevious","yAxisArray","decodeList","yAxisSeriesNames","name","yAxisLabel","isEquation","getEquation","substr","intervalVal","getInterval","chartImplementation","errored","results","size","seriesData","visible","stacked","previousChart","chartProps","preserveQueryParams","queryExtra","usePageDate","referrer","project","environment","partial","userModified","decodeScalar","location","eventData","OptionSelector","options","onChange","featureType","multiple","rest","mappedOptions","useMemo","opt","label","String","maxLength","expandDirection","option","o","isOptionDisabled","disabled","triggerProps","borderless","prefix","Fragment","StyledFeatureBadge","type","placement","FeatureBadge","getOrganizationReleases","conditions","forEach","getUtcDateString","clear","requestPromise","slug","includeAllArgs","method","ReleaseSeries","memoize","_","__","values","val","JSON","stringify","join","lineStyle","features","statsPeriod","MarkLine","purple300","opacity","show","release","Date","date","formatVersion","version","onClick","pathname","time","getFormattedDate","local","escape","purple200","componentDidMount","_isMounted","setReleasesWithSeries","fetchData","componentDidUpdate","prevProps","componentWillUnmount","memoized","hasMore","getReleases","getOrganizationReleasesMemoized","newReleases","resp","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","cursor","addErrorMessage","unemphasizedReleases","emphasizedReleases","partition","getReleaseSeries","children","withRouter","withOrganization","withApi","ExportQueryType","DataExport","payload","icon","inProgress","setInProgress","useState","useEffect","queryType","queryInfo","handleDataExport","useCallback","query_type","query_info","then","_data","response","addSuccessMessage","status","catch","err","message","responseJSON","detail","priority","debounce","SPAN_OP_BREAKDOWN_FIELDS","DiscoverBreadcrumb","eventView","event","crumbs","discoverTarget","getDiscoverLandingUrl","generateBlankQueryStringObject","getPageFiltersQuery","to","isValid","getResultsViewUrlTarget","ChartFooter","total","yAxisValue","yAxisOptions","onAxisChange","displayMode","displayOptions","onDisplayChange","onTopEventsChange","elements","toLocaleString","topEventOptions","i","toString","TOP_EVENT_MODES","isClearable","menuTitle","ResultsChart","restProps","nextEventView","restNextProps","isEqualTo","hasPerformanceChartInterpolation","globalSelection","getPageFilters","datetime","getUtcToLocalDateObject","normalizeDateTimeParams","apiPayload","getEventsAPIPayload","display","getDisplayMode","isTopEvents","DisplayModes","isPeriod","isDaily","isPrevious","parseInt","TOP_N","seriesLabels","stripEquationPrefix","getPreviousSeriesName","getDynamicText","sort","fixed","testId","ResultsChartContainer","getYAxisOptions","componentWillReceiveProps","nextYAxisOptions","valueIsEqual","filter","hasQueryFeature","getDisplayOptions","MULTI_Y_AXIS_SUPPORTED_DISPLAY_MODES","StyledPanel","NoChartContainer","Panel","p","breakpoints","large","gray300","fontSizeExtraLarge","NAME_DEFAULT","EventInputName","savedQuery","useApi","StyledTitle","nextQueryName","EventView","handleUpdateQueryName","_updatedQuery","renamedEventView","clone","browserHistory","isDisabled","id","errorMessage","Title","SavedQueryButtonGroup","PureComponent","isNewQuery","isEditingQuery","queryName","target","preventDefault","stopPropagation","handleCreateQuery","view","Banner","updateCallback","handleUpdateQuery","getResultsViewShortUrlTarget","handleDeleteQuery","trackAnalyticsEvent","eventKey","eventName","organization_id","url","window","href","prevState","savedQueryLoading","savedEventView","isEqualQuery","isEqualYAxis","renderButtonSaveAs","alignRight","menuWidth","buttonProps","showChevron","ButtonSaveDropDown","stopEventPropagation","ButtonSaveInput","placeholder","onBlur","onBlurInput","onChangeInput","style","width","renderButtonSave","IconUpdate","isSolid","renderButtonDelete","renderButtonCreateAlert","onIncompatibleAlertQuery","onIncompatibleQuery","onSuccess","handleCreateAlertSuccess","renderButtonAddToDashboard","handleAddQueryToDashboard","renderDisabled","body","hideHelpToggle","featureName","renderQueryButton","renderFunc","hookName","hasFeature","ResponsiveButtonBar","gap","Element","nodeName","ButtonBar","medium","space","InputControl","yellow300","withProjects","ResultsHeader","fetchSavedQuery","renderAuthor","createdBy","lastEdit","email","dateUpdated","Subtitle","errorCode","StyledHeaderContent","fontSizeLarge","Layout","ColumnEditModal","Header","Body","Footer","measurementKeys","spanOperationBreakdownKeys","onApply","closeModal","tags","useLegacyStore","TagStore","tagKeys","columns","setColumns","fieldOptions","generateFieldOptions","closeButton","Instruction","tct","functionLink","fieldTagLink","DISCOVER2_DOCS_URL","external","modalCss","css","renderDownloadButton","canEdit","renderBrowserExportButton","renderAsyncExportButton","isLoading","error","downloadAsCsv","getColumns","handleDownloadAsCsv","renderEditButton","onEdit","renderSummaryButton","onChangeShowTags","showTags","FeatureWrapper","noEditMessage","HeaderActions","TableView","columnIndex","nextColumn","newWidth","Number","COL_WIDTH_UNDEFINED","withResizedColumn","pushEventViewToLocation","extraQuery","pickRelevantLocationQueryStrings","isHeader","dataRow","rowIndex","hasAggregates","hasAggregateField","hasIdField","PrependHeader","align","direction","canSort","generateSortLink","nextView","getExpandedResults","generateQueryStringObject","Sentry","StyledIcon","meta","getFieldRenderer","fieldRenderer","eventSlug","generateEventSlug","eventDetailsRouteWithEventView","orgSlug","StyledLink","column","tableMeta","fieldAlignment","currentSort","sortForField","isFieldSortable","titleText","isEquationAlias","getEquations","getEquationAliasIndex","StyledTooltip","expandable","kind","queryStringObject","sortOnField","isFirstPage","columnKey","count","Math","cell","dateSelection","normalizeDateSelection","trace","getTraceDetailsUrl","fieldName","getAggregateAlias","containerDisplayMode","position","handleCellAction","index","hasBreakdownFeature","openModal","modalProps","col","handleUpdateColumns","backdrop","action","MutableSearch","Actions","maybeProject","find","projectID","transactionSummaryRouteWithQuery","transaction","encodeURIComponent","withNewColumn","function","updateQuery","formatString","withColumns","resultsViewUrlTarget","previousYAxis","handleEditColumns","columnOrder","columnSortBy","getSorts","prependColumnWidths","COL_WIDTH_MINIMUM","renderHeadCell","_renderGridHeaderCell","renderBodyCell","_renderGridBodyCell","onResizeColumn","_resizeColumn","renderPrependColumns","_renderPrependColumns","headerButtons","renderHeaderButtons","subText","Tooltip","Link","IconStack","Table","tableFetchID","thisAPIPayload","otherAPIPayload","isAPIPayloadSimilar","setError","shouldUseEvents","Symbol","queryUserModified","user_modified","metric","fields","nonFieldsMeta","search_type","search_source","shouldRefetchData","previous","Container","measurements","SHOW_TAGS_STORAGE_KEY","getYAxis","Results","totalValues","localStorage","needConfirmation","incompatibleAlertNotice","Client","async","currentQuery","getDays","projectLength","fetchProjectsCount","myProjects","allProjects","openConfirm","open","newValue","queryParams","searchQueryParams","omit","isDisplayMultiYAxisSupported","newQuery","handleConfirmed","y_axis_value","generateQueryWithTag","formatTagKey","incompatibleAlertNoticeFn","errors","selection","loadOrganizationTags","tagsApi","addRoutePerformanceContext","checkEventView","canLoadEvents","updateSavedQueryVisit","prevQuery","prevYAxisArray","hasChartParametersChanged","fetchTotalCount","prevEventView","totals","DEFAULT_EVENT_VIEW","getDocumentTitle","generateTitle","renderTagsTable","generateUrl","generateTagUrl","renderError","showIcon","generateAggregateFields","StyledPageContent","handleIncompatibleQuery","Top","fullWidth","StyledPageFilterBar","condensed","alignDropdown","StyledSearchBar","searchSource","projectIds","onSearch","handleSearch","maxQueryLength","MAX_QUERY_LENGTH","handleYAxisChange","handleDisplayChange","handleTopEventsChange","handleChangeShowTags","header","confirmText","cancelText","onConfirm","onCancel","handleCancelled","dayLimit","projectLimit","setOpenFunction","PageContent","PageFilterBar","SearchBar","SavedQueryAPI","AsyncComponent","getEndpoints","renderLoading","renderBody","ResultsContainer","skipLoadLastUsed","hideGlobalHeader","withPageFilters","Tags","getFacetsAPIPayload","forceFetchData","fetchTagFacets","tag","renderPlaceholders","renderTag","StyledEmptyStateWarning","small","segments","topValues","segment","maxTotalValues","StyledPlaceholder","onTagClick","handleTagClick","showReleasePackage","StyledPlaceholderTitle","EmptyStateWarning","Placeholder","borderRadius","TrendChangeType","TrendFunctionField","TrendColumnField","DEFAULT_TRENDS_STATS_PERIOD","DEFAULT_MAX_DURATION","TRENDS_FUNCTIONS","alias","legendLabel","TRENDS_PARAMETERS","trendToColor","lighter","default","trendSelectedQueryKeys","trendUnselectedSeries","trendCursorNames","resetCursors","cursors","getCurrentTrendFunction","_trendFunctionField","trendFunctionField","trendFunction","getCurrentTrendParameter","trendParameterLabel","trendParameter","performanceType","PROJECT_PERFORMANCE_TYPE","performanceTypeToTrendParameterLabel","platformToPerformanceType","getDefaultTrendParameter","generateTrendFunctionAsString","generateFieldAsString","transformDeltaSpread","from","fromSeconds","toSeconds","showDigits","getTrendProjectId","trend","transactionProject","modifyTrendView","trendView","trendsType","isProjectOnly","trendSort","trendType","limitQuery","hasFilter","addFilterValues","getLimitTransactionItems","intervalFromQueryParam","datetimeSelection","intervalFromSmoothing","getQueryInterval","sorts","modifyTrendsViewDefaultPeriod","hasStartAndEnd","transformValueDelta","absoluteValue","abs","seconds","fixedDigits","changeLabel","normalizeTrends","received_at","moment","row","getSelectedQueryKey","trendChangeType","getUnselectedSeries","smoothTrend","resolution","ASAP","replaceSeriesName","aggregate","transformEventStatsSmoothed","minValue","MAX_SAFE_INTEGER","maxValue","smoothedResults","current","currentData","resultData","smoothed","point","y","x","isNaN","rounded","round","QUERY_KEYS","FRONTEND_PLATFORMS","frontend","BACKEND_PLATFORMS","backend","platform","MOBILE_PLATFORMS","mobile","ALL_ACCESS_PROJECTS","ANY","selectedProjects","some","every","FRONTEND","BACKEND","MOBILE","platformAndConditionsToPerformanceType","getFilterValues","op","FRONTEND_OTHER","isSummaryViewFrontendPageLoad","isSummaryViewFrontend","getPerformanceLandingUrl","getPerformanceTrendsUrl","getTransactionSearchQuery","trim","handleTrendsClick","view_name","trendsTargetRoute","initialConditions","additionalQuery","modifiedConditions","setFilterValues","removeTracingKeysFromSearch","currentFilter","excludeTagKeys","Set","getFilterKeys","tagKey","searchKey","startsWith","match","TRACING_FIELDS","has","removeFilter","getCurrentSentryReactTransaction","days","statsPeriodToDays","floor","setTag","groupedPeriod","oneDay","getTransactionName","getPerformanceDuration","milliseconds","getDuration"],"sourceRoot":""}