{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupSimilarIssues_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/groupingActions.tsx","webpack:///./app/stores/groupingStore.tsx","webpack:///./app/components/similarSpectrum.tsx","webpack:///./app/components/similarScoreCard.tsx","webpack:///./app/views/organizationGroupDetails/groupSimilarIssues/similarStackTrace/item.tsx","webpack:///./app/views/organizationGroupDetails/groupSimilarIssues/similarStackTrace/toolbar.tsx","webpack:///./app/views/organizationGroupDetails/groupSimilarIssues/similarStackTrace/list.tsx","webpack:///./app/views/organizationGroupDetails/groupSimilarIssues/similarStackTrace/index.tsx","webpack:///./app/views/organizationGroupDetails/groupSimilarIssues/index.tsx"],"sourcesContent":["import {createActions} from 'reflux';\n\n// Actions for \"Grouping\" view - for merging/unmerging events/issues\nconst GroupingActions = createActions([\n  'fetch',\n  'showAllSimilarItems',\n  'toggleUnmerge',\n  'toggleMerge',\n  'unmerge',\n  'merge',\n  'toggleCollapseFingerprint',\n  'toggleCollapseFingerprints',\n]);\n\nexport default GroupingActions;\n","import pick from 'lodash/pick';\nimport {createStore} from 'reflux';\n\nimport {mergeGroups} from 'sentry/actionCreators/group';\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport GroupingActions from 'sentry/actions/groupingActions';\nimport {Client} from 'sentry/api';\nimport {Group, Organization, Project} from 'sentry/types';\nimport {Event} from 'sentry/types/event';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\nimport {CommonStoreDefinition} from './types';\n\n// Between 0-100\nconst MIN_SCORE = 0.6;\n\n// @param score: {[key: string]: number}\nconst checkBelowThreshold = (scores = {}) => {\n  const scoreKeys = Object.keys(scores);\n  return !scoreKeys.map(key => scores[key]).find(score => score >= MIN_SCORE);\n};\n\ntype State = {\n  // \"Compare\" button state\n  enableFingerprintCompare: boolean;\n  error: boolean;\n  filteredSimilarItems: [];\n  loading: boolean;\n  mergeDisabled: boolean;\n  mergeList: Array<string>;\n  mergeState: Map<any, any>;\n  // List of fingerprints that belong to issue\n  mergedItems: [];\n  mergedLinks: string;\n  similarItems: [];\n  similarLinks: string;\n  // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n  unmergeDisabled: boolean;\n  // If \"Collapse All\" was just used, this will be true\n  unmergeLastCollapsed: boolean;\n  // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n  unmergeList: Map<any, any>;\n  // Map of state for each fingerprint (i.e. \"collapsed\")\n  unmergeState: Map<any, any>;\n};\n\ntype ScoreMap = Record<string, number | null>;\n\ntype ApiFingerprint = {\n  id: string;\n  latestEvent: Event;\n  childId?: string;\n  childLabel?: string;\n  eventCount?: number;\n  label?: string;\n  lastSeen?: string;\n  parentId?: string;\n  parentLabel?: string;\n  state?: string;\n};\n\ntype ChildFingerprint = {\n  childId: string;\n  childLabel?: string;\n  eventCount?: number;\n  lastSeen?: string;\n  latestEvent?: Event;\n};\n\nexport type Fingerprint = {\n  children: Array<ChildFingerprint>;\n  eventCount: number;\n  id: string;\n  latestEvent: Event;\n  label?: string;\n  lastSeen?: string;\n  parentId?: string;\n  parentLabel?: string;\n  state?: string;\n};\n\ntype ResponseProcessors = {\n  merged: (item: ApiFingerprint[]) => Fingerprint[];\n  similar: (data: [Group, ScoreMap]) => {\n    aggregate: Record<string, number>;\n    isBelowThreshold: boolean;\n    issue: Group;\n    score: ScoreMap;\n    scoresByInterface: Record<string, Array<[string, number | null]>>;\n  };\n};\n\ntype DataKey = keyof ResponseProcessors;\n\ntype ResultsAsArrayDataMerged = Parameters<ResponseProcessors['merged']>[0];\n\ntype ResultsAsArrayDataSimilar = Array<Parameters<ResponseProcessors['similar']>[0]>;\n\ntype ResultsAsArray = Array<{\n  data: ResultsAsArrayDataMerged | ResultsAsArrayDataSimilar;\n  dataKey: DataKey;\n  links: string | null;\n}>;\n\ntype IdState = {\n  busy?: boolean;\n  checked?: boolean;\n  collapsed?: boolean;\n};\n\ntype InternalDefinition = {\n  api: Client;\n};\n\ninterface GroupingStoreDefinition\n  extends CommonStoreDefinition<State>,\n    InternalDefinition {\n  getInitialState(): State;\n  init(): void;\n  isAllUnmergedSelected(): boolean;\n  onFetch(\n    toFetchArray?: Array<{\n      dataKey: DataKey;\n      endpoint: string;\n      queryParams?: Record<string, any>;\n    }>\n  ): Promise<any>;\n  onMerge(props: {\n    params?: {\n      groupId: Group['id'];\n      orgId: Organization['id'];\n      projectId: Project['id'];\n    };\n    projectId?: Project['id'];\n    query?: string;\n  }): undefined | Promise<any>;\n  onToggleCollapseFingerprint(fingerprint: string): void;\n  onToggleCollapseFingerprints(): void;\n  onToggleMerge(id: string): void;\n  onToggleUnmerge(props: [string, string] | string): void;\n  onUnmerge(props: {\n    groupId: Group['id'];\n    errorMessage?: string;\n    loadingMessage?: string;\n    successMessage?: string;\n  }): void;\n  setStateForId(\n    map: Map<string, IdState>,\n    idOrIds: Array<string> | string,\n    newState: IdState\n  ): Array<IdState>;\n  triggerFetchState(): Pick<\n    State,\n    | 'similarItems'\n    | 'filteredSimilarItems'\n    | 'mergedItems'\n    | 'mergedLinks'\n    | 'similarLinks'\n    | 'mergeState'\n    | 'unmergeState'\n    | 'loading'\n    | 'error'\n  >;\n  triggerMergeState(): Pick<State, 'mergeState' | 'mergeDisabled' | 'mergeList'>;\n  triggerUnmergeState(): Pick<\n    State,\n    | 'unmergeDisabled'\n    | 'unmergeState'\n    | 'unmergeList'\n    | 'enableFingerprintCompare'\n    | 'unmergeLastCollapsed'\n  >;\n}\n\nconst storeConfig: GroupingStoreDefinition = {\n  listenables: [GroupingActions],\n  api: new Client(),\n\n  init() {\n    const state = this.getInitialState();\n\n    Object.entries(state).forEach(([key, value]) => {\n      this[key] = value;\n    });\n  },\n\n  getInitialState() {\n    return {\n      // List of fingerprints that belong to issue\n      mergedItems: [],\n      // Map of {[fingerprint]: Array<fingerprint, event id>} that is selected to be unmerged\n      unmergeList: new Map(),\n      // Map of state for each fingerprint (i.e. \"collapsed\")\n      unmergeState: new Map(),\n      // Disabled state of \"Unmerge\" button in \"Merged\" tab (for Issues)\n      unmergeDisabled: true,\n      // If \"Collapse All\" was just used, this will be true\n      unmergeLastCollapsed: false,\n      // \"Compare\" button state\n      enableFingerprintCompare: false,\n      similarItems: [],\n      filteredSimilarItems: [],\n      similarLinks: '',\n      mergeState: new Map(),\n      mergeList: [],\n      mergedLinks: '',\n      mergeDisabled: false,\n      loading: true,\n      error: false,\n    };\n  },\n\n  setStateForId(map, idOrIds, newState) {\n    const ids = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n\n    return ids.map(id => {\n      const state = (map.has(id) && map.get(id)) || {};\n      const mergedState = {...state, ...newState};\n      map.set(id, mergedState);\n      return mergedState;\n    });\n  },\n\n  isAllUnmergedSelected() {\n    const lockedItems =\n      (Array.from(this.unmergeState.values()) as Array<IdState>).filter(\n        ({busy}) => busy\n      ) || [];\n    return (\n      this.unmergeList.size ===\n      this.mergedItems.filter(({latestEvent}) => !!latestEvent).length -\n        lockedItems.length\n    );\n  },\n\n  // Fetches data\n  onFetch(toFetchArray) {\n    const requests = toFetchArray || this.toFetchArray;\n\n    // Reset state and trigger update\n    this.init();\n    this.triggerFetchState();\n\n    const promises = requests.map(\n      ({endpoint, queryParams, dataKey}) =>\n        new Promise((resolve, reject) => {\n          this.api.request(endpoint, {\n            method: 'GET',\n            data: queryParams,\n            success: (data, _, resp) => {\n              resolve({\n                dataKey,\n                data,\n                links: resp ? resp.getResponseHeader('Link') : null,\n              });\n            },\n            error: err => {\n              const error = err.responseJSON?.detail || true;\n              reject(error);\n            },\n          });\n        })\n    );\n\n    const responseProcessors: ResponseProcessors = {\n      merged: items => {\n        const newItemsMap: Record<string, Fingerprint> = {};\n        const newItems: Fingerprint[] = [];\n\n        items.forEach(item => {\n          if (!newItemsMap[item.id]) {\n            const newItem = {\n              eventCount: 0,\n              children: [],\n              // lastSeen and latestEvent properties are correct\n              // since the server returns items in\n              // descending order of lastSeen\n              ...item,\n            };\n            // Check for locked items\n            this.setStateForId(this.unmergeState, item.id, {\n              busy: item.state === 'locked',\n            });\n\n            newItemsMap[item.id] = newItem;\n            newItems.push(newItem);\n          }\n\n          const newItem = newItemsMap[item.id];\n          const {childId, childLabel, eventCount, lastSeen, latestEvent} = item;\n\n          if (eventCount) {\n            newItem.eventCount += eventCount;\n          }\n\n          if (childId) {\n            newItem.children.push({\n              childId,\n              childLabel,\n              lastSeen,\n              latestEvent,\n              eventCount,\n            });\n          }\n        });\n\n        return newItems;\n      },\n      similar: ([issue, scoreMap]) => {\n        // Hide items with a low scores\n        const isBelowThreshold = checkBelowThreshold(scoreMap);\n\n        // List of scores indexed by interface (i.e., exception and message)\n        // Note: for v2, the interface is always \"similarity\". When v2 is\n        // rolled out we can get rid of this grouping entirely.\n        const scoresByInterface = Object.keys(scoreMap)\n          .map(scoreKey => [scoreKey, scoreMap[scoreKey]])\n          .reduce((acc, [scoreKey, score]) => {\n            // v1 layout: '<interface>:...'\n            const [interfaceName] = String(scoreKey).split(':');\n\n            if (!acc[interfaceName]) {\n              acc[interfaceName] = [];\n            }\n            acc[interfaceName].push([scoreKey, score]);\n\n            return acc;\n          }, {});\n\n        // Aggregate score by interface\n        const aggregate = Object.keys(scoresByInterface)\n          .map(interfaceName => [interfaceName, scoresByInterface[interfaceName]])\n          .reduce((acc, [interfaceName, allScores]) => {\n            // `null` scores means feature was not present in both issues, do not\n            // include in aggregate\n            const scores = allScores.filter(([, score]) => score !== null);\n\n            const avg = scores.reduce((sum, [, score]) => sum + score, 0) / scores.length;\n\n            acc[interfaceName] = avg;\n            return acc;\n          }, {});\n\n        return {\n          issue,\n          score: scoreMap,\n          scoresByInterface,\n          aggregate,\n          isBelowThreshold,\n        };\n      },\n    };\n\n    if (toFetchArray) {\n      this.toFetchArray = toFetchArray;\n    }\n\n    return Promise.all(promises).then(\n      resultsArray => {\n        (resultsArray as ResultsAsArray).forEach(({dataKey, data, links}) => {\n          const items =\n            dataKey === 'similar'\n              ? (data as ResultsAsArrayDataSimilar).map(responseProcessors[dataKey])\n              : responseProcessors[dataKey](data as ResultsAsArrayDataMerged);\n\n          this[`${dataKey}Items`] = items;\n          this[`${dataKey}Links`] = links;\n        });\n\n        this.loading = false;\n        this.error = false;\n        this.triggerFetchState();\n      },\n      () => {\n        this.loading = false;\n        this.error = true;\n        this.triggerFetchState();\n      }\n    );\n  },\n\n  // Toggle merge checkbox\n  onToggleMerge(id) {\n    let checked = false;\n\n    // Don't do anything if item is busy\n    const state = this.mergeState.has(id) ? this.mergeState.get(id) : undefined;\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.mergeList.includes(id)) {\n      this.mergeList = this.mergeList.filter(item => item !== id);\n    } else {\n      this.mergeList = [...this.mergeList, id];\n      checked = true;\n    }\n\n    this.setStateForId(this.mergeState, id, {\n      checked,\n    });\n\n    this.triggerMergeState();\n  },\n\n  // Toggle unmerge check box\n  onToggleUnmerge([fingerprint, eventId]) {\n    let checked = false;\n\n    // Uncheck an item to unmerge\n    const state = this.unmergeState.get(fingerprint);\n\n    if (state?.busy === true) {\n      return;\n    }\n\n    if (this.unmergeList.has(fingerprint)) {\n      this.unmergeList.delete(fingerprint);\n    } else {\n      this.unmergeList.set(fingerprint, eventId);\n      checked = true;\n    }\n\n    // Update \"checked\" state for row\n    this.setStateForId(this.unmergeState, fingerprint, {\n      checked,\n    });\n\n    // Unmerge should be disabled if 0 or all items are selected, or if there's\n    // only one item to select\n    this.unmergeDisabled =\n      this.mergedItems.size <= 1 ||\n      this.unmergeList.size === 0 ||\n      this.isAllUnmergedSelected();\n    this.enableFingerprintCompare = this.unmergeList.size === 2;\n\n    this.triggerUnmergeState();\n  },\n\n  onUnmerge({groupId, loadingMessage, successMessage, errorMessage}) {\n    const ids = Array.from(this.unmergeList.keys()) as Array<string>;\n\n    return new Promise((resolve, reject) => {\n      if (this.isAllUnmergedSelected()) {\n        reject(new Error('Not allowed to unmerge ALL events'));\n        return;\n      }\n\n      // Disable unmerge button\n      this.unmergeDisabled = true;\n\n      // Disable rows\n      this.setStateForId(this.unmergeState, ids, {\n        checked: false,\n        busy: true,\n      });\n      this.triggerUnmergeState();\n      addLoadingMessage(loadingMessage);\n\n      this.api.request(`/issues/${groupId}/hashes/`, {\n        method: 'DELETE',\n        query: {\n          id: ids,\n        },\n        success: () => {\n          addSuccessMessage(successMessage);\n\n          // Busy rows after successful Unmerge\n          this.setStateForId(this.unmergeState, ids, {\n            checked: false,\n            busy: true,\n          });\n          this.unmergeList.clear();\n        },\n        error: () => {\n          addErrorMessage(errorMessage);\n          this.setStateForId(this.unmergeState, ids, {\n            checked: true,\n            busy: false,\n          });\n        },\n        complete: () => {\n          this.unmergeDisabled = false;\n          resolve(this.triggerUnmergeState());\n        },\n      });\n    });\n  },\n\n  // For cross-project views, we need to pass projectId instead of\n  // depending on router params (since we will only have orgId in that case)\n  onMerge({params, query, projectId}) {\n    if (!params) {\n      return undefined;\n    }\n\n    const ids = this.mergeList;\n\n    this.mergeDisabled = true;\n\n    this.setStateForId(this.mergeState, ids as Array<string>, {\n      busy: true,\n    });\n\n    this.triggerMergeState();\n\n    const promise = new Promise(resolve => {\n      // Disable merge button\n      const {orgId, groupId} = params;\n\n      mergeGroups(\n        this.api,\n        {\n          orgId,\n          projectId: projectId || params.projectId,\n          itemIds: [...ids, groupId] as Array<number>,\n          query,\n        },\n        {\n          success: data => {\n            if (data?.merge?.parent) {\n              this.trigger({\n                mergedParent: data.merge.parent,\n              });\n            }\n\n            // Hide rows after successful merge\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: false,\n              busy: true,\n            });\n            this.mergeList = [];\n          },\n          error: () => {\n            this.setStateForId(this.mergeState, ids as Array<string>, {\n              checked: true,\n              busy: false,\n            });\n          },\n          complete: () => {\n            this.mergeDisabled = false;\n            resolve(this.triggerMergeState());\n          },\n        }\n      );\n    });\n\n    return promise;\n  },\n\n  // Toggle collapsed state of all fingerprints\n  onToggleCollapseFingerprints() {\n    this.setStateForId(\n      this.unmergeState,\n      this.mergedItems.map(({id}) => id),\n      {\n        collapsed: !this.unmergeLastCollapsed,\n      }\n    );\n\n    this.unmergeLastCollapsed = !this.unmergeLastCollapsed;\n\n    this.trigger({\n      unmergeLastCollapsed: this.unmergeLastCollapsed,\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  onToggleCollapseFingerprint(fingerprint) {\n    const collapsed =\n      this.unmergeState.has(fingerprint) && this.unmergeState.get(fingerprint).collapsed;\n    this.setStateForId(this.unmergeState, fingerprint, {collapsed: !collapsed});\n    this.trigger({\n      unmergeState: this.unmergeState,\n    });\n  },\n\n  triggerFetchState() {\n    const state = {\n      similarItems: this.similarItems.filter(({isBelowThreshold}) => !isBelowThreshold),\n      filteredSimilarItems: this.similarItems.filter(\n        ({isBelowThreshold}) => isBelowThreshold\n      ),\n      ...pick(this, [\n        'mergedItems',\n        'mergedLinks',\n        'similarLinks',\n        'mergeState',\n        'unmergeState',\n        'loading',\n        'error',\n        'enableFingerprintCompare',\n        'unmergeList',\n      ]),\n    };\n    this.trigger(state);\n    return state;\n  },\n\n  triggerUnmergeState() {\n    const state = pick(this, [\n      'unmergeDisabled',\n      'unmergeState',\n      'unmergeList',\n      'enableFingerprintCompare',\n      'unmergeLastCollapsed',\n    ]);\n    this.trigger(state);\n    return state;\n  },\n\n  triggerMergeState() {\n    const state = pick(this, ['mergeDisabled', 'mergeState', 'mergeList']);\n    this.trigger(state);\n    return state;\n  },\n\n  getState(): State {\n    return this.state;\n  },\n};\n\nconst GroupingStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default GroupingStore;\n","import styled from '@emotion/styled';\n\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  className?: string;\n};\n\nconst BaseSimilarSpectrum = ({className}: Props) => (\n  <div className={className}>\n    <span>{t('Similar')}</span>\n    <SpectrumItem colorIndex={4} />\n    <SpectrumItem colorIndex={3} />\n    <SpectrumItem colorIndex={2} />\n    <SpectrumItem colorIndex={1} />\n    <SpectrumItem colorIndex={0} />\n    <span>{t('Not Similar')}</span>\n  </div>\n);\n\nconst SimilarSpectrum = styled(BaseSimilarSpectrum)`\n  display: flex;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\ntype ItemProps = {\n  colorIndex: number;\n};\n\nconst SpectrumItem = styled('span')<ItemProps>`\n  border-radius: 2px;\n  margin: 5px;\n  width: 14px;\n  ${p => `background-color: ${p.theme.similarity.colors[p.colorIndex]};`};\n`;\n\nexport default SimilarSpectrum;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nconst scoreComponents = {\n  'exception:message:character-shingles': t('Exception Message'),\n  'exception:stacktrace:pairs': t('Stack Trace Frames'),\n  'exception:stacktrace:application-chunks': t('In-App Frames'),\n  'message:message:character-shingles': t('Log Message'),\n\n  // v2\n  'similarity:*:type:character-5-shingle': t('Exception Type'),\n  'similarity:*:value:character-5-shingle': t('Exception Message'),\n  'similarity:*:stacktrace:frames-pairs': t('Stack Trace Frames'),\n  'similarity:*:message:character-5-shingle': t('Log Message'),\n};\n\ntype ScoreValue = number | null;\n\ntype Props = {\n  // we treat the score list keys as opaque as we wish to be able to extend the\n  // backend without having to fix UI. Keys not in scoreComponents are grouped\n  // into Other anyway\n  scoreList?: [string, ScoreValue][];\n};\n\nconst SimilarScoreCard = ({scoreList = []}: Props) => {\n  if (scoreList.length === 0) {\n    return null;\n  }\n\n  let sumOtherScores = 0;\n  let numOtherScores = 0;\n\n  return (\n    <Fragment>\n      {scoreList.map(([key, score]) => {\n        const title =\n          scoreComponents[key.replace(/similarity:\\d\\d\\d\\d-\\d\\d-\\d\\d/, 'similarity:*')];\n\n        if (!title) {\n          if (score !== null) {\n            sumOtherScores += score;\n            numOtherScores += 1;\n          }\n          return null;\n        }\n\n        return (\n          <Wrapper key={key}>\n            <div>{title}</div>\n            <Score score={score === null ? score : Math.round(score * 4)} />\n          </Wrapper>\n        );\n      })}\n\n      {numOtherScores > 0 && sumOtherScores > 0 && (\n        <Wrapper>\n          <div>{t('Other')}</div>\n          <Score score={Math.round((sumOtherScores * 4) / numOtherScores)} />\n        </Wrapper>\n      )}\n    </Fragment>\n  );\n};\n\nconst Wrapper = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin: ${space(0.25)} 0;\n`;\n\nconst Score = styled('div')<{score: ScoreValue}>`\n  height: 16px;\n  width: 48px;\n  border-radius: 2px;\n  background-color: ${p =>\n    p.score === null ? p.theme.similarity.empty : p.theme.similarity.colors[p.score]};\n`;\n\nexport default SimilarScoreCard;\n","import {Component} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport {openDiffModal} from 'sentry/actionCreators/modal';\nimport GroupingActions from 'sentry/actions/groupingActions';\nimport Button from 'sentry/components/button';\nimport Checkbox from 'sentry/components/checkbox';\nimport Count from 'sentry/components/count';\nimport EventOrGroupExtraDetails from 'sentry/components/eventOrGroupExtraDetails';\nimport EventOrGroupHeader from 'sentry/components/eventOrGroupHeader';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {PanelItem} from 'sentry/components/panels';\nimport ScoreBar from 'sentry/components/scoreBar';\nimport SimilarScoreCard from 'sentry/components/similarScoreCard';\nimport {t} from 'sentry/locale';\nimport GroupingStore from 'sentry/stores/groupingStore';\nimport space from 'sentry/styles/space';\nimport {Group, Organization, Project} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\n\ntype Props = {\n  groupId: Group['id'];\n  issue: Group;\n  orgId: Organization['id'];\n  project: Project;\n  v2: boolean;\n  aggregate?: {\n    exception: number;\n    message: number;\n  };\n  score?: Record<string, any>;\n  scoresByInterface?: {\n    exception: Array<[string, number | null]>;\n    message: Array<[string, any | null]>;\n  };\n};\n\nconst initialState = {visible: true, checked: false, busy: false};\n\ntype State = typeof initialState;\n\nclass Item extends Component<Props, State> {\n  state: State = initialState;\n\n  componentWillUnmount() {\n    callIfFunction(this.listener);\n  }\n\n  listener = GroupingStore.listen(data => this.onGroupChange(data), undefined);\n\n  handleToggle = () => {\n    const {issue} = this.props;\n\n    // clicking anywhere in the row will toggle the checkbox\n    if (!this.state.busy) {\n      GroupingActions.toggleMerge(issue.id);\n    }\n  };\n\n  handleShowDiff = (event: React.MouseEvent) => {\n    const {orgId, groupId: baseIssueId, issue, project} = this.props;\n    const {id: targetIssueId} = issue;\n\n    openDiffModal({baseIssueId, targetIssueId, project, orgId});\n    event.stopPropagation();\n  };\n\n  handleCheckClick = () => {\n    // noop to appease React warnings\n    // This is controlled via row click instead of only Checkbox\n  };\n\n  onGroupChange = ({mergeState}) => {\n    if (!mergeState) {\n      return;\n    }\n\n    const {issue} = this.props;\n\n    const stateForId = mergeState.has(issue.id) && mergeState.get(issue.id);\n\n    if (!stateForId) {\n      return;\n    }\n\n    Object.keys(stateForId).forEach(key => {\n      if (stateForId[key] === this.state[key]) {\n        return;\n      }\n      this.setState(prevState => ({\n        ...prevState,\n        [key]: stateForId[key],\n      }));\n    });\n  };\n\n  render() {\n    const {aggregate, scoresByInterface, issue, v2} = this.props;\n    const {visible, busy} = this.state;\n    const similarInterfaces = v2 ? ['similarity'] : ['exception', 'message'];\n\n    if (!visible) {\n      return null;\n    }\n\n    const cx = classNames('group', {\n      isResolved: issue.status === 'resolved',\n      busy,\n    });\n\n    return (\n      <StyledPanelItem\n        data-test-id=\"similar-item-row\"\n        className={cx}\n        onClick={this.handleToggle}\n      >\n        <Details>\n          <Checkbox\n            id={issue.id}\n            value={issue.id}\n            checked={this.state.checked}\n            onChange={this.handleCheckClick}\n          />\n          <EventDetails>\n            <EventOrGroupHeader data={issue} includeLink size=\"normal\" />\n            <EventOrGroupExtraDetails data={{...issue, lastSeen: ''}} showAssignee />\n          </EventDetails>\n\n          <Diff>\n            <Button onClick={this.handleShowDiff} size=\"small\">\n              {t('Diff')}\n            </Button>\n          </Diff>\n        </Details>\n\n        <Columns>\n          <StyledCount value={issue.count} />\n\n          {similarInterfaces.map(interfaceName => {\n            const avgScore = aggregate?.[interfaceName];\n            const scoreList = scoresByInterface?.[interfaceName] || [];\n            // Check for valid number (and not NaN)\n            const scoreValue =\n              typeof avgScore === 'number' && !Number.isNaN(avgScore) ? avgScore : 0;\n\n            return (\n              <Column key={interfaceName}>\n                <Hovercard\n                  body={scoreList.length && <SimilarScoreCard scoreList={scoreList} />}\n                >\n                  <ScoreBar vertical score={Math.round(scoreValue * 5)} />\n                </Hovercard>\n              </Column>\n            );\n          })}\n        </Columns>\n      </StyledPanelItem>\n    );\n  }\n}\n\nconst Details = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n\n  display: grid;\n  gap: ${space(1)};\n  grid-template-columns: max-content auto max-content;\n  margin-left: ${space(2)};\n\n  input[type='checkbox'] {\n    margin: 0;\n  }\n`;\n\nconst StyledPanelItem = styled(PanelItem)`\n  padding: ${space(1)} 0;\n`;\n\nconst Columns = styled('div')`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  min-width: 300px;\n  width: 300px;\n`;\n\nconst columnStyle = css`\n  flex: 1;\n  flex-shrink: 0;\n  display: flex;\n  justify-content: center;\n  padding: ${space(0.5)} 0;\n`;\n\nconst Column = styled('div')`\n  ${columnStyle}\n`;\n\nconst StyledCount = styled(Count)`\n  ${columnStyle}\n  font-variant-numeric: tabular-nums;\n`;\n\nconst Diff = styled('div')`\n  display: flex;\n  align-items: center;\n  margin-right: ${space(0.25)};\n`;\n\nconst EventDetails = styled('div')`\n  flex: 1;\n  ${p => p.theme.overflowEllipsis};\n`;\n\nexport default Item;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport {PanelHeader} from 'sentry/components/panels';\nimport ToolbarHeader from 'sentry/components/toolbarHeader';\nimport {t} from 'sentry/locale';\nimport GroupingStore from 'sentry/stores/groupingStore';\nimport space from 'sentry/styles/space';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\n\ntype Props = {\n  onMerge: () => void;\n  v2: boolean;\n};\n\nconst initialState = {\n  mergeCount: 0,\n};\n\ntype State = typeof initialState;\n\nclass SimilarToolbar extends Component<Props, State> {\n  state: State = initialState;\n\n  componentWillUnmount() {\n    callIfFunction(this.listener);\n  }\n\n  onGroupChange = ({mergeList}) => {\n    if (!mergeList?.length) {\n      return;\n    }\n\n    if (mergeList.length !== this.state.mergeCount) {\n      this.setState({mergeCount: mergeList.length});\n    }\n  };\n\n  listener = GroupingStore.listen(this.onGroupChange, undefined);\n\n  render() {\n    const {onMerge, v2} = this.props;\n    const {mergeCount} = this.state;\n\n    return (\n      <PanelHeader hasButtons>\n        <Confirm\n          data-test-id=\"merge\"\n          disabled={mergeCount === 0}\n          message={t('Are you sure you want to merge these issues?')}\n          onConfirm={onMerge}\n        >\n          <Button size=\"small\" title={t('Merging %s issues', mergeCount)}>\n            {t('Merge %s', `(${mergeCount || 0})`)}\n          </Button>\n        </Confirm>\n\n        <Columns>\n          <StyledToolbarHeader>{t('Events')}</StyledToolbarHeader>\n\n          {v2 ? (\n            <StyledToolbarHeader>{t('Score')}</StyledToolbarHeader>\n          ) : (\n            <Fragment>\n              <StyledToolbarHeader>{t('Exception')}</StyledToolbarHeader>\n              <StyledToolbarHeader>{t('Message')}</StyledToolbarHeader>\n            </Fragment>\n          )}\n        </Columns>\n      </PanelHeader>\n    );\n  }\n}\nexport default SimilarToolbar;\n\nconst Columns = styled('div')`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  min-width: 300px;\n  width: 300px;\n`;\n\nconst StyledToolbarHeader = styled(ToolbarHeader)`\n  flex: 1;\n  flex-shrink: 0;\n  display: flex;\n  justify-content: center;\n  padding: ${space(0.5)} 0;\n`;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport SimilarSpectrum from 'sentry/components/similarSpectrum';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Group, Organization, Project} from 'sentry/types';\n\nimport Item from './item';\nimport Toolbar from './toolbar';\n\ntype SimilarItem = {\n  isBelowThreshold: boolean;\n  issue: Group;\n  aggregate?: {\n    exception: number;\n    message: number;\n  };\n  score?: Record<string, number | null>;\n  scoresByInterface?: {\n    exception: Array<[string, number | null]>;\n    message: Array<[string, any | null]>;\n  };\n};\n\ntype DefaultProps = {\n  filteredItems: Array<SimilarItem>;\n};\n\ntype Props = {\n  groupId: string;\n  items: Array<SimilarItem>;\n  onMerge: () => void;\n  orgId: Organization['id'];\n  pageLinks: string | null;\n  project: Project;\n  v2: boolean;\n} & DefaultProps;\n\ntype State = {\n  showAllItems: boolean;\n};\n\nclass List extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    filteredItems: [],\n  };\n\n  state: State = {\n    showAllItems: false,\n  };\n\n  renderEmpty = () => (\n    <Panel>\n      <PanelBody>\n        <EmptyStateWarning small withIcon={false}>\n          {t('No issues with a similar stack trace have been found.')}\n        </EmptyStateWarning>\n      </PanelBody>\n    </Panel>\n  );\n\n  handleShowAll = () => {\n    this.setState({showAllItems: true});\n  };\n  render() {\n    const {orgId, groupId, project, items, filteredItems, pageLinks, onMerge, v2} =\n      this.props;\n\n    const {showAllItems} = this.state;\n\n    const hasHiddenItems = !!filteredItems.length;\n    const hasResults = items.length > 0 || hasHiddenItems;\n    const itemsWithFiltered = items.concat((showAllItems && filteredItems) || []);\n\n    if (!hasResults) {\n      return this.renderEmpty();\n    }\n\n    return (\n      <Fragment>\n        <Header>\n          <SimilarSpectrum />\n        </Header>\n\n        <Panel>\n          <Toolbar v2={v2} onMerge={onMerge} />\n\n          <PanelBody>\n            {itemsWithFiltered.map(item => (\n              <Item\n                key={item.issue.id}\n                orgId={orgId}\n                v2={v2}\n                groupId={groupId}\n                project={project}\n                {...item}\n              />\n            ))}\n\n            {hasHiddenItems && !showAllItems && (\n              <Footer>\n                <Button onClick={this.handleShowAll}>\n                  {t('Show %s issues below threshold', filteredItems.length)}\n                </Button>\n              </Footer>\n            )}\n          </PanelBody>\n        </Panel>\n        <Pagination pageLinks={pageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nexport default List;\n\nconst Header = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: ${space(1)};\n`;\n\nconst Footer = styled('div')`\n  display: flex;\n  justify-content: center;\n  padding: ${space(1.5)};\n`;\n","import {Component} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport * as qs from 'query-string';\n\nimport GroupingActions from 'sentry/actions/groupingActions';\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport GroupingStore from 'sentry/stores/groupingStore';\nimport space from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\n\nimport List from './list';\n\ntype ListProps = React.ComponentProps<typeof List>;\n\ntype SimilarItems = ListProps['items'];\ntype RouteParams = {\n  groupId: string;\n  orgId: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  location: Location;\n  project: Project;\n};\n\ntype State = {\n  error: boolean;\n  filteredSimilarItems: SimilarItems;\n  loading: boolean;\n  similarItems: SimilarItems;\n  similarLinks: string | null;\n  v2: boolean;\n};\n\nclass SimilarStackTrace extends Component<Props, State> {\n  state: State = {\n    similarItems: [],\n    filteredSimilarItems: [],\n    similarLinks: null,\n    loading: true,\n    error: false,\n    v2: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (\n      nextProps.params.groupId !== this.props.params.groupId ||\n      nextProps.location.search !== this.props.location.search\n    ) {\n      this.fetchData();\n    }\n  }\n\n  componentWillUnmount() {\n    callIfFunction(this.listener);\n  }\n\n  onGroupingChange = ({\n    mergedParent,\n    similarItems,\n    similarLinks,\n    filteredSimilarItems,\n    loading,\n    error,\n  }) => {\n    if (similarItems) {\n      this.setState({\n        similarItems,\n        similarLinks,\n        filteredSimilarItems,\n        loading: loading ?? false,\n        error: error ?? false,\n      });\n      return;\n    }\n\n    if (!mergedParent) {\n      return;\n    }\n\n    if (mergedParent !== this.props.params.groupId) {\n      const {params} = this.props;\n      // Merge success, since we can't specify target, we need to redirect to new parent\n      browserHistory.push(\n        `/organizations/${params.orgId}/issues/${mergedParent}/similar/`\n      );\n\n      return;\n    }\n\n    return;\n  };\n\n  listener = GroupingStore.listen(this.onGroupingChange, undefined);\n\n  fetchData() {\n    const {params, location} = this.props;\n\n    this.setState({loading: true, error: false});\n\n    const reqs: Parameters<typeof GroupingStore.onFetch>[0] = [];\n\n    if (this.hasSimilarityFeature()) {\n      const version = this.state.v2 ? '2' : '1';\n\n      reqs.push({\n        endpoint: `/issues/${params.groupId}/similar/?${qs.stringify({\n          ...location.query,\n          limit: 50,\n          version,\n        })}`,\n        dataKey: 'similar',\n      });\n    }\n\n    GroupingActions.fetch(reqs);\n  }\n\n  handleMerge = () => {\n    const {params, location} = this.props;\n    const query = location.query;\n\n    if (!params) {\n      return;\n    }\n\n    // You need at least 1 similarItem OR filteredSimilarItems to be able to merge,\n    // so `firstIssue` should always exist from one of those lists.\n    //\n    // Similar issues API currently does not return issues across projects,\n    // so we can assume that the first issues project slug is the project in\n    // scope\n    const [firstIssue] = this.state.similarItems.length\n      ? this.state.similarItems\n      : this.state.filteredSimilarItems;\n\n    GroupingActions.merge({\n      params,\n      query,\n      projectId: firstIssue.issue.project.slug,\n    });\n  };\n\n  hasSimilarityV2Feature() {\n    return this.props.project.features.includes('similarity-view-v2');\n  }\n\n  hasSimilarityFeature() {\n    return this.props.project.features.includes('similarity-view');\n  }\n\n  toggleSimilarityVersion = () => {\n    this.setState(prevState => ({v2: !prevState.v2}), this.fetchData);\n  };\n\n  render() {\n    const {params, project} = this.props;\n    const {orgId, groupId} = params;\n    const {similarItems, filteredSimilarItems, loading, error, v2, similarLinks} =\n      this.state;\n\n    const hasV2 = this.hasSimilarityV2Feature();\n    const isLoading = loading;\n    const isError = error && !isLoading;\n    const isLoadedSuccessfully = !isError && !isLoading;\n    const hasSimilarItems =\n      this.hasSimilarityFeature() &&\n      (similarItems.length > 0 || filteredSimilarItems.length > 0) &&\n      isLoadedSuccessfully;\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          <Alert type=\"warning\">\n            {t(\n              'This is an experimental feature. Data may not be immediately available while we process merges.'\n            )}\n          </Alert>\n          <HeaderWrapper>\n            <Title>{t('Issues with a similar stack trace')}</Title>\n            {hasV2 && (\n              <ButtonBar merged active={v2 ? 'new' : 'old'}>\n                <Button barId=\"old\" size=\"small\" onClick={this.toggleSimilarityVersion}>\n                  {t('Old Algorithm')}\n                </Button>\n                <Button barId=\"new\" size=\"small\" onClick={this.toggleSimilarityVersion}>\n                  {t('New Algorithm')}\n                </Button>\n              </ButtonBar>\n            )}\n          </HeaderWrapper>\n          {isLoading && <LoadingIndicator />}\n          {isError && (\n            <LoadingError\n              message={t('Unable to load similar issues, please try again later')}\n              onRetry={this.fetchData}\n            />\n          )}\n          {hasSimilarItems && (\n            <List\n              items={similarItems}\n              filteredItems={filteredSimilarItems}\n              onMerge={this.handleMerge}\n              orgId={orgId}\n              project={project}\n              groupId={groupId}\n              pageLinks={similarLinks}\n              v2={v2}\n            />\n          )}\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n}\n\nexport default SimilarStackTrace;\n\nconst Title = styled('h4')`\n  margin-bottom: 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(2)};\n`;\n","import Feature from 'sentry/components/acl/feature';\n\nimport SimilarStackTrace from './similarStackTrace';\n\ntype Props = React.ComponentProps<typeof SimilarStackTrace>;\n\nconst GroupSimilarIssues = ({project, ...props}: Props) => (\n  <Feature features={['similarity-view']} project={project}>\n    <SimilarStackTrace project={project} {...props} />\n  </Feature>\n);\n\nexport default GroupSimilarIssues;\n"],"names":["createActions","storeConfig","listenables","GroupingActions","api","Client","init","state","this","getInitialState","Object","entries","forEach","key","value","mergedItems","unmergeList","Map","unmergeState","unmergeDisabled","unmergeLastCollapsed","enableFingerprintCompare","similarItems","filteredSimilarItems","similarLinks","mergeState","mergeList","mergedLinks","mergeDisabled","loading","error","setStateForId","map","idOrIds","newState","Array","isArray","id","mergedState","has","get","set","isAllUnmergedSelected","lockedItems","from","values","filter","busy","size","latestEvent","length","onFetch","toFetchArray","requests","triggerFetchState","promises","endpoint","queryParams","dataKey","Promise","resolve","reject","request","method","data","success","_","resp","links","getResponseHeader","err","responseJSON","detail","responseProcessors","merged","items","newItemsMap","newItems","item","newItem","eventCount","children","push","childId","childLabel","lastSeen","similar","issue","scoreMap","isBelowThreshold","scores","keys","find","score","checkBelowThreshold","scoresByInterface","scoreKey","reduce","acc","interfaceName","String","split","aggregate","allScores","avg","sum","all","then","resultsArray","onToggleMerge","checked","undefined","includes","triggerMergeState","onToggleUnmerge","fingerprint","eventId","delete","triggerUnmergeState","onUnmerge","groupId","loadingMessage","successMessage","errorMessage","ids","Error","addLoadingMessage","query","addSuccessMessage","clear","addErrorMessage","complete","onMerge","params","projectId","orgId","mergeGroups","itemIds","merge","parent","trigger","mergedParent","onToggleCollapseFingerprints","collapsed","onToggleCollapseFingerprint","pick","getState","createStore","makeSafeRefluxStore","BaseSimilarSpectrum","className","t","SpectrumItem","colorIndex","SimilarSpectrum","p","theme","fontSizeSmall","similarity","colors","scoreComponents","SimilarScoreCard","scoreList","sumOtherScores","numOtherScores","Fragment","title","replace","Wrapper","Score","Math","round","space","empty","initialState","visible","Item","Component","GroupingStore","onGroupChange","props","event","baseIssueId","project","targetIssueId","openDiffModal","stopPropagation","stateForId","setState","prevState","componentWillUnmount","callIfFunction","listener","render","v2","similarInterfaces","cx","classNames","isResolved","status","StyledPanelItem","onClick","handleToggle","Details","onChange","handleCheckClick","EventDetails","includeLink","showAssignee","Diff","handleShowDiff","Columns","StyledCount","count","avgScore","scoreValue","Number","isNaN","Column","body","vertical","overflowEllipsis","PanelItem","columnStyle","css","Count","mergeCount","SimilarToolbar","hasButtons","disabled","message","onConfirm","StyledToolbarHeader","ToolbarHeader","List","showAllItems","small","withIcon","filteredItems","pageLinks","hasHiddenItems","hasResults","itemsWithFiltered","concat","Header","Footer","handleShowAll","renderEmpty","SimilarStackTrace","browserHistory","onGroupingChange","location","firstIssue","slug","fetchData","componentDidMount","componentWillReceiveProps","nextProps","search","reqs","hasSimilarityFeature","version","qs","limit","hasSimilarityV2Feature","features","hasV2","isLoading","isError","isLoadedSuccessfully","hasSimilarItems","fullWidth","type","HeaderWrapper","Title","active","barId","toggleSimilarityVersion","onRetry","handleMerge","GroupSimilarIssues"],"sourceRoot":""}