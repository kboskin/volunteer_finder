{"version":3,"file":"chunks/app_views_organizationStats_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/errorPanel.tsx","webpack:///./app/components/charts/optionSelector.tsx","webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/components/notAvailable.tsx","webpack:///./app/components/pageTimeRangeSelector.tsx","webpack:///./app/components/scoreCard.tsx","webpack:///./app/views/organizationStats/header.tsx","webpack:///./app/views/organizationStats/utils.tsx","webpack:///./app/views/organizationStats/usageChart/utils.tsx","webpack:///./app/views/organizationStats/usageChart/index.tsx","webpack:///./app/views/organizationStats/types.tsx","webpack:///./app/views/organizationStats/usageStatsPerMin.tsx","webpack:///./app/views/organizationStats/usageStatsOrg.tsx","webpack:///./app/views/organizationStats/usageTable/index.tsx","webpack:///./app/views/organizationStats/usageStatsProjects.tsx","webpack:///./app/views/organizationStats/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst ErrorPanel = styled('div')<{height?: string}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height || '200px'};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nexport default ErrorPanel;\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport Truncate from 'sentry/components/truncate';\nimport {SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\ntype BaseProps = React.ComponentProps<typeof CompactSelect> & {\n  options: SelectValue<string>[];\n  title: string;\n  featureType?: 'alpha' | 'beta' | 'new';\n};\n\ntype SingleProps = BaseProps & {\n  onChange: (value: string) => void;\n  selected: string;\n  multiple?: false;\n};\ntype MultipleProps = BaseProps & {\n  multiple: true;\n  onChange: (value: string[]) => void;\n  selected: string[];\n};\n\nfunction OptionSelector({\n  options,\n  onChange,\n  selected,\n  title,\n  featureType,\n  multiple,\n  ...rest\n}: SingleProps | MultipleProps) {\n  const mappedOptions = useMemo(() => {\n    return options.map(opt => ({\n      ...opt,\n      label: <Truncate value={String(opt.label)} maxLength={60} expandDirection=\"left\" />,\n    }));\n  }, [options]);\n\n  function onValueChange(option) {\n    onChange(multiple ? option.map(o => o.value) : option.value);\n  }\n\n  function isOptionDisabled(option) {\n    return (\n      // Option is explicitly marked as disabled\n      option.disabled ||\n      // The user has reached the maximum number of selections (3), and the option hasn't\n      // yet been selected. These options should be disabled to visually indicate that the\n      // user has reached the max.\n      (multiple && selected.length === 3 && !selected.includes(option.value))\n    );\n  }\n\n  return (\n    <CompactSelect\n      options={mappedOptions}\n      value={selected}\n      onChange={onValueChange}\n      isOptionDisabled={isOptionDisabled}\n      multiple={multiple}\n      triggerProps={{\n        size: 'small',\n        borderless: true,\n        prefix: (\n          <Fragment>\n            {title}\n            {defined(featureType) ? <StyledFeatureBadge type={featureType} /> : null}\n          </Fragment>\n        ),\n      }}\n      placement=\"bottom right\"\n      {...rest}\n    />\n  );\n}\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin-left: 0px;\n`;\n\nexport default OptionSelector;\n","import styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport omit from 'lodash/omit';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n};\n\nfunction SortLink({align, title, canSort, generateSortLink, onClick, direction}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  return (\n    <StyledLink align={align} to={target} onClick={onClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  const forwardProps = omit(props, ['align']);\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'sentry/components/tooltip';\n\ntype Props = {\n  className?: string;\n  tooltip?: React.ReactNode;\n};\n\nfunction NotAvailable({tooltip, className}: Props) {\n  return (\n    <Tooltip title={tooltip} skipWrapper disabled={tooltip === undefined}>\n      <Wrapper className={className}>{'\\u2014'}</Wrapper>\n    </Tooltip>\n  );\n}\n\nconst Wrapper = styled('div')`\n  color: ${p => p.theme.gray200};\n`;\n\nexport default NotAvailable;\n","import styled from '@emotion/styled';\n\nimport TimeRangeSelector from 'sentry/components/organizations/timeRangeSelector';\nimport {Panel} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = React.ComponentProps<typeof TimeRangeSelector> & {className?: string};\n\nfunction PageTimeRangeSelector({className, ...props}: Props) {\n  return (\n    <DropdownDate className={className}>\n      <TimeRangeSelector\n        key={`period:${props.relative}-start:${props.start}-end:${props.end}-utc:${props.utc}-defaultPeriod:${props.defaultPeriod}`}\n        label={<DropdownLabel>{t('Date Range:')}</DropdownLabel>}\n        detached\n        {...props}\n      />\n    </DropdownDate>\n  );\n}\n\nconst DropdownDate = styled(Panel)`\n  padding: 0;\n  margin: 0;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 42px;\n  background: ${p => p.theme.background};\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.textColor};\n\n  > div {\n    width: 100%;\n    align-self: stretch;\n  }\n  /* StyledItemHeader used to show selected value of TimeRangeSelector */\n  > div > div:first-child > div {\n    padding: 0 ${space(2)};\n  }\n  /* Menu that dropdowns from TimeRangeSelector */\n  > div > div:last-child:not(:first-child) {\n    /* Remove awkward 1px width difference on dropdown due to border */\n    min-width: calc(100% + 2px);\n    transform: translateX(-1px);\n    right: auto;\n  }\n`;\n\nconst DropdownLabel = styled('span')`\n  text-align: left;\n  font-weight: 600;\n  color: ${p => p.theme.textColor};\n\n  > span:last-child {\n    font-weight: 400;\n  }\n`;\n\nexport default PageTimeRangeSelector;\n","import styled from '@emotion/styled';\n\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  title: React.ReactNode;\n  className?: string;\n  help?: React.ReactNode;\n  score?: React.ReactNode;\n  trend?: React.ReactNode;\n  trendStatus?: 'good' | 'bad';\n};\n\nfunction ScoreCard({title, score, help, trend, trendStatus, className}: Props) {\n  return (\n    <ScorePanel className={className}>\n      <HeaderTitle>\n        <Title>{title}</Title>\n        {help && <QuestionTooltip title={help} size=\"sm\" position=\"top\" />}\n      </HeaderTitle>\n\n      <ScoreWrapper>\n        <Score>{score ?? '\\u2014'}</Score>\n        {defined(trend) && (\n          <Trend trendStatus={trendStatus}>\n            <TextOverflow>{trend}</TextOverflow>\n          </Trend>\n        )}\n      </ScoreWrapper>\n    </ScorePanel>\n  );\n}\n\nfunction getTrendColor(p: TrendProps & {theme: Theme}) {\n  switch (p.trendStatus) {\n    case 'good':\n      return p.theme.green300;\n    case 'bad':\n      return p.theme.red300;\n    default:\n      return p.theme.gray300;\n  }\n}\n\nexport const ScorePanel = styled(Panel)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: ${space(2)} ${space(3)};\n  min-height: 96px;\n`;\n\nexport const HeaderTitle = styled('div')`\n  display: inline-grid;\n  grid-auto-flow: column;\n  gap: ${space(1)};\n  align-items: center;\n  width: fit-content;\n`;\n\nexport const Title = styled('div')`\n  color: ${p => p.theme.headingColor};\n  ${p => p.theme.overflowEllipsis};\n  font-weight: 600;\n`;\n\nexport const ScoreWrapper = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n  max-width: 100%;\n`;\n\nexport const Score = styled('span')`\n  flex-shrink: 1;\n  font-size: 32px;\n  line-height: 1;\n  color: ${p => p.theme.headingColor};\n  white-space: nowrap;\n`;\n\ntype TrendProps = {trendStatus: Props['trendStatus']};\n\nexport const Trend = styled('div')<TrendProps>`\n  color: ${getTrendColor};\n  margin-left: ${space(1)};\n  line-height: 1;\n  overflow: hidden;\n`;\n\nexport default ScoreCard;\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  activeTab: 'stats' | 'issues' | 'health';\n  organization: Organization;\n};\n\nfunction StatsHeader({organization, activeTab}: Props) {\n  return (\n    <Layout.Header>\n      <Layout.HeaderContent>\n        <StyledLayoutTitle>{t('Stats')}</StyledLayoutTitle>\n      </Layout.HeaderContent>\n      <Layout.HeaderActions>\n        {activeTab !== 'stats' && (\n          <Button\n            title={t('Send us feedback via email')}\n            size=\"small\"\n            href=\"mailto:alerting-feedback@sentry.io?subject=Team Stats Feedback\"\n          >\n            {t('Give Feedback')}\n          </Button>\n        )}\n      </Layout.HeaderActions>\n      <Layout.HeaderNavTabs underlined>\n        <li className={`${activeTab === 'stats' ? 'active' : ''}`}>\n          <Link to={`/organizations/${organization.slug}/stats/`}>{t('Usage')}</Link>\n        </li>\n        <li className={`${activeTab === 'issues' ? 'active' : ''}`}>\n          <Link to={`/organizations/${organization.slug}/stats/issues/`}>\n            {t('Issues')}\n          </Link>\n        </li>\n        <li className={`${activeTab === 'health' ? 'active' : ''}`}>\n          <Link to={`/organizations/${organization.slug}/stats/health/`}>\n            {t('Health')}\n          </Link>\n        </li>\n      </Layout.HeaderNavTabs>\n    </Layout.Header>\n  );\n}\n\nexport default StatsHeader;\n\nconst StyledLayoutTitle = styled(Layout.Title)`\n  margin-top: ${space(0.5)};\n`;\n","import {DateTimeObject, getSeriesApiInterval} from 'sentry/components/charts/utils';\nimport {DataCategory} from 'sentry/types';\nimport {formatBytesBase10} from 'sentry/utils';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\n\nexport const MILLION = 10 ** 6;\nexport const BILLION = 10 ** 9;\nexport const GIGABYTE = 10 ** 9;\n\ntype FormatOptions = {\n  /**\n   * Truncate 1234 => 1.2k or 1,234,000 to 1.23M\n   */\n  isAbbreviated?: boolean;\n\n  /**\n   * Convert attachments to use the most appropriate unit KB/MB/GB/TB/etc.\n   * Otherwise, it will default to GB\n   */\n  useUnitScaling?: boolean;\n};\n\n/**\n * This expects usage values/quantities for the data categories that we sell.\n *\n * Note: usageQuantity for Attachments should be in BYTES\n */\nexport function formatUsageWithUnits(\n  usageQuantity: number = 0,\n  dataCategory: DataCategory,\n  options: FormatOptions = {isAbbreviated: false, useUnitScaling: false}\n) {\n  if (dataCategory !== DataCategory.ATTACHMENTS) {\n    return options.isAbbreviated\n      ? abbreviateUsageNumber(usageQuantity)\n      : usageQuantity.toLocaleString();\n  }\n\n  if (options.useUnitScaling) {\n    return formatBytesBase10(usageQuantity);\n  }\n\n  const usageGb = usageQuantity / GIGABYTE;\n  return options.isAbbreviated\n    ? `${abbreviateUsageNumber(usageGb)} GB`\n    : `${usageGb.toLocaleString(undefined, {maximumFractionDigits: 2})} GB`;\n}\n\n/**\n * Good default for \"formatUsageWithUnits\"\n */\nexport function getFormatUsageOptions(dataCategory: DataCategory): FormatOptions {\n  return {\n    isAbbreviated: dataCategory !== DataCategory.ATTACHMENTS,\n    useUnitScaling: dataCategory === DataCategory.ATTACHMENTS,\n  };\n}\n\n/**\n * Instead of using this function directly, use formatReservedWithUnits or\n * formatUsageWithUnits with options.isAbbreviated to true instead.\n *\n * This function display different precision for billion/million/thousand to\n * provide clarity on usage of errors/transactions/attachments to the user.\n *\n * If you are not displaying usage numbers, it might be better to use\n * `formatAbbreviatedNumber` in 'sentry/utils/formatters'\n */\nexport function abbreviateUsageNumber(n: number) {\n  if (n >= BILLION) {\n    return (n / BILLION).toLocaleString(undefined, {maximumFractionDigits: 2}) + 'B';\n  }\n\n  if (n >= MILLION) {\n    return (n / MILLION).toLocaleString(undefined, {maximumFractionDigits: 1}) + 'M';\n  }\n\n  if (n >= 1000) {\n    return (n / 1000).toFixed().toLocaleString() + 'K';\n  }\n\n  // Do not show decimals\n  return n.toFixed().toLocaleString();\n}\n\n/**\n * We want to display datetime in UTC in the following situations:\n *\n * 1) The user selected an absolute date range with UTC\n * 2) The user selected a wide date range with 1d interval\n *\n * When the interval is 1d, we need to use UTC because the 24 hour range might\n * shift forward/backward depending on the user's timezone, or it might be\n * displayed as a day earlier/later\n */\nexport function isDisplayUtc(datetime: DateTimeObject): boolean {\n  if (datetime.utc) {\n    return true;\n  }\n\n  const interval = getSeriesApiInterval(datetime);\n  const hours = parsePeriodToHours(interval);\n  return hours >= 24;\n}\n","import moment from 'moment';\n\nimport {parseStatsPeriod} from 'sentry/components/organizations/pageFilters/parse';\nimport {DataCategory, IntervalPeriod} from 'sentry/types';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\n\nimport {formatUsageWithUnits} from '../utils';\n\n/**\n * Avoid changing \"MMM D\" format as X-axis labels on UsageChart are naively\n * truncated by date.slice(0, 6). This avoids \"...\" when truncating by ECharts.\n */\nexport const FORMAT_DATETIME_DAILY = 'MMM D';\nexport const FORMAT_DATETIME_HOURLY = 'MMM D LT';\n\n/**\n * Used to generate X-axis data points and labels for UsageChart\n * Ensure that this method is idempotent and doesn't change the moment object\n * that is passed in\n *\n * Use the `useUtc` parameter to get the UTC date for the provided\n * moment instance.\n */\nexport function getDateFromMoment(\n  m: moment.Moment,\n  interval: IntervalPeriod = '1d',\n  useUtc: boolean = false\n) {\n  const days = parsePeriodToHours(interval) / 24;\n  if (days >= 1) {\n    return useUtc\n      ? moment.utc(m).format(FORMAT_DATETIME_DAILY)\n      : m.format(FORMAT_DATETIME_DAILY);\n  }\n\n  const parsedInterval = parseStatsPeriod(interval);\n  const datetime = useUtc ? moment(m).utc() : moment(m).local();\n\n  return parsedInterval\n    ? `${datetime.format(FORMAT_DATETIME_HOURLY)} - ${datetime\n        .add(parsedInterval.period as any, parsedInterval.periodLength as any)\n        .format('LT (Z)')}`\n    : datetime.format(FORMAT_DATETIME_HOURLY);\n}\n\nexport function getDateFromUnixTimestamp(timestamp: number) {\n  const date = moment.unix(timestamp);\n  return getDateFromMoment(date);\n}\n\nexport function getXAxisDates(\n  dateStart: string,\n  dateEnd: string,\n  dateUtc: boolean = false,\n  interval: IntervalPeriod = '1d'\n): string[] {\n  const range: string[] = [];\n  const start = moment(dateStart).startOf('h');\n  const end = moment(dateEnd).startOf('h');\n\n  if (!start.isValid() || !end.isValid()) {\n    return range;\n  }\n\n  const {period, periodLength} = parseStatsPeriod(interval) ?? {\n    period: 1,\n    periodLength: 'd',\n  };\n\n  while (!start.isAfter(end)) {\n    range.push(getDateFromMoment(start, interval, dateUtc));\n    start.add(period as any, periodLength as any); // FIXME(ts): Something odd with momentjs types\n  }\n\n  return range;\n}\n\nexport function getTooltipFormatter(dataCategory: DataCategory) {\n  if (dataCategory === DataCategory.ATTACHMENTS) {\n    return (val: number = 0) =>\n      formatUsageWithUnits(val, DataCategory.ATTACHMENTS, {useUnitScaling: true});\n  }\n\n  return (val: number = 0) => val.toLocaleString();\n}\n\nconst MAX_NUMBER_OF_LABELS = 10;\n\n/**\n *\n * @param dataPeriod - Quantity of hours covered by the data\n * @param numBars - Quantity of data points covered by the dataPeriod\n */\nexport function getXAxisLabelInterval(dataPeriod: number, numBars: number) {\n  return dataPeriod > 7 * 24\n    ? getLabelIntervalLongPeriod(dataPeriod, numBars)\n    : getLabelIntervalShortPeriod(dataPeriod, numBars);\n}\n\n/**\n * @param dataPeriod - Quantity of hours covered by data, expected 7+ days\n */\nfunction getLabelIntervalLongPeriod(dataPeriod: number, numBars: number) {\n  const days = dataPeriod / 24;\n  if (days <= 7) {\n    throw new Error('This method should be used for periods > 7 days');\n  }\n\n  // Use 1 tick per day\n  let numTicks = days;\n  let numLabels = numTicks;\n\n  const daysBetweenLabels = [2, 4, 7, 14];\n  const daysBetweenTicks = [1, 2, 7, 7];\n\n  for (let i = 0; i < daysBetweenLabels.length && numLabels > MAX_NUMBER_OF_LABELS; i++) {\n    numLabels = numTicks / daysBetweenLabels[i];\n    numTicks = days / daysBetweenTicks[i];\n  }\n\n  return {\n    xAxisTickInterval: numBars / numTicks - 1,\n    xAxisLabelInterval: numBars / numLabels - 1,\n  };\n}\n\n/**\n * @param dataPeriod - Quantity of hours covered by data, expected <7 days\n */\nfunction getLabelIntervalShortPeriod(dataPeriod: number, numBars: number) {\n  const days = dataPeriod / 24;\n  if (days > 7) {\n    throw new Error('This method should be used for periods <= 7 days');\n  }\n\n  // Use 1 tick/label per day, since it's guaranteed to be 7 or less\n  const numTicks = days;\n  const interval = numBars / numTicks;\n\n  return {\n    xAxisTickInterval: interval - 1,\n    xAxisLabelInterval: interval - 1,\n  };\n}\n","import {Component, Fragment} from 'react';\nimport {withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport Color from 'color';\nimport type {SeriesOption, TooltipComponentOption} from 'echarts';\n\nimport BaseChart from 'sentry/components/charts/baseChart';\nimport Legend from 'sentry/components/charts/components/legend';\nimport xAxis from 'sentry/components/charts/components/xAxis';\nimport barSeries from 'sentry/components/charts/series/barSeries';\nimport {ChartContainer, HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport Panel from 'sentry/components/panels/panel';\nimport Placeholder from 'sentry/components/placeholder';\nimport {DATA_CATEGORY_NAMES} from 'sentry/constants';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DataCategory, IntervalPeriod, SelectValue} from 'sentry/types';\nimport {parsePeriodToHours, statsPeriodToDays} from 'sentry/utils/dates';\nimport {formatAbbreviatedNumber} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport commonTheme, {Theme} from 'sentry/utils/theme';\n\nimport {formatUsageWithUnits, GIGABYTE} from '../utils';\n\nimport {getTooltipFormatter, getXAxisDates, getXAxisLabelInterval} from './utils';\n\ntype ChartProps = React.ComponentProps<typeof BaseChart>;\n\nconst COLOR_ERRORS = Color(commonTheme.dataCategory.errors).lighten(0.25).string();\nconst COLOR_TRANSACTIONS = Color(commonTheme.dataCategory.transactions)\n  .lighten(0.35)\n  .string();\nconst COLOR_ATTACHMENTS = Color(commonTheme.dataCategory.attachments)\n  .lighten(0.65)\n  .string();\n\nconst COLOR_DROPPED = commonTheme.red300;\nconst COLOR_FILTERED = commonTheme.pink100;\n\nexport const CHART_OPTIONS_DATACATEGORY: SelectValue<DataCategory>[] = [\n  {\n    label: DATA_CATEGORY_NAMES[DataCategory.ERRORS],\n    value: DataCategory.ERRORS,\n    disabled: false,\n  },\n  {\n    label: DATA_CATEGORY_NAMES[DataCategory.TRANSACTIONS],\n    value: DataCategory.TRANSACTIONS,\n    disabled: false,\n  },\n  {\n    label: DATA_CATEGORY_NAMES[DataCategory.ATTACHMENTS],\n    value: DataCategory.ATTACHMENTS,\n    disabled: false,\n  },\n];\n\nexport enum ChartDataTransform {\n  CUMULATIVE = 'cumulative',\n  PERIODIC = 'periodic',\n}\n\nexport const CHART_OPTIONS_DATA_TRANSFORM: SelectValue<ChartDataTransform>[] = [\n  {\n    label: t('Cumulative'),\n    value: ChartDataTransform.CUMULATIVE,\n    disabled: false,\n  },\n  {\n    label: t('Periodic'),\n    value: ChartDataTransform.PERIODIC,\n    disabled: false,\n  },\n];\n\nexport enum SeriesTypes {\n  ACCEPTED = 'Accepted',\n  DROPPED = 'Dropped',\n  PROJECTED = 'Projected',\n  FILTERED = 'Filtered',\n}\n\ntype DefaultProps = {\n  /**\n   * Modify the usageStats using the transformation method selected.\n   * 1. This must be a pure function!\n   * 2. If the parent component will handle the data transformation, you should\n   *    replace this prop with \"(s) => {return s}\"\n   */\n  handleDataTransformation: (\n    stats: ChartStats,\n    transform: ChartDataTransform\n  ) => ChartStats;\n\n  /**\n   * Intervals between the x-axis values\n   */\n  usageDateInterval: IntervalPeriod;\n\n  /**\n   * Display datetime in UTC\n   */\n  usageDateShowUtc: boolean;\n};\n\ntype Props = DefaultProps & {\n  dataCategory: DataCategory;\n\n  dataTransform: ChartDataTransform;\n  theme: Theme;\n  usageDateEnd: string;\n\n  usageDateStart: string;\n  /**\n   * Usage data to draw on chart\n   */\n  usageStats: ChartStats;\n\n  /**\n   * Additional data to draw on the chart alongside usage\n   */\n  chartSeries?: SeriesOption[];\n  /**\n   * Replace default tooltip\n   */\n  chartTooltip?: TooltipComponentOption;\n\n  errors?: Record<string, Error>;\n  footer?: React.ReactNode;\n\n  isError?: boolean;\n\n  isLoading?: boolean;\n\n  title?: React.ReactNode;\n};\n\ntype State = {\n  xAxisDates: string[];\n};\n\nexport type ChartStats = {\n  accepted: NonNullable<SeriesOption['data']>;\n  dropped: NonNullable<SeriesOption['data']>;\n  projected: NonNullable<SeriesOption['data']>;\n  filtered?: NonNullable<SeriesOption['data']>;\n};\n\nexport class UsageChart extends Component<Props, State> {\n  static defaultProps: DefaultProps = {\n    usageDateShowUtc: true,\n    usageDateInterval: '1d',\n    handleDataTransformation: (stats, transform) => {\n      const chartData: ChartStats = {\n        accepted: [],\n        dropped: [],\n        projected: [],\n        filtered: [],\n      };\n      const isCumulative = transform === ChartDataTransform.CUMULATIVE;\n\n      Object.keys(stats).forEach(k => {\n        let count = 0;\n\n        chartData[k] = stats[k].map(stat => {\n          const [x, y] = stat.value;\n          count = isCumulative ? count + y : y;\n\n          return {\n            ...stat,\n            value: [x, count],\n          };\n        });\n      });\n\n      return chartData;\n    },\n  };\n\n  state: State = {\n    xAxisDates: [],\n  };\n\n  /**\n   * UsageChart needs to generate the X-Axis dates as props.usageStats may\n   * not pass the complete range of X-Axis data points\n   *\n   * E.g. usageStats.accepted covers day 1-15 of a month, usageStats.projected\n   * either covers day 16-30 or may not be available at all.\n   */\n  static getDerivedStateFromProps(nextProps: Readonly<Props>, prevState: State): State {\n    const {usageDateStart, usageDateEnd, usageDateShowUtc, usageDateInterval} = nextProps;\n\n    return {\n      ...prevState,\n      xAxisDates: getXAxisDates(\n        usageDateStart,\n        usageDateEnd,\n        usageDateShowUtc,\n        usageDateInterval\n      ),\n    };\n  }\n\n  get chartColors() {\n    const {dataCategory, theme} = this.props;\n    const COLOR_PROJECTED = theme.chartOther;\n\n    if (dataCategory === DataCategory.ERRORS) {\n      return [COLOR_ERRORS, COLOR_FILTERED, COLOR_DROPPED, COLOR_PROJECTED];\n    }\n\n    if (dataCategory === DataCategory.ATTACHMENTS) {\n      return [COLOR_ATTACHMENTS, COLOR_FILTERED, COLOR_DROPPED, COLOR_PROJECTED];\n    }\n\n    return [COLOR_TRANSACTIONS, COLOR_FILTERED, COLOR_DROPPED, COLOR_PROJECTED];\n  }\n\n  get chartMetadata(): {\n    chartData: ChartStats;\n    chartLabel: React.ReactNode;\n    tooltipValueFormatter: (val?: number) => string;\n    xAxisData: string[];\n    xAxisLabelInterval: number;\n    xAxisTickInterval: number;\n    yAxisFormatter: (val: number) => string;\n    yAxisMinInterval: number;\n  } {\n    const {usageDateStart, usageDateEnd} = this.props;\n    const {\n      usageDateInterval,\n      usageStats,\n      dataCategory,\n      dataTransform,\n      handleDataTransformation,\n    } = this.props;\n    const {xAxisDates} = this.state;\n\n    const selectDataCategory = CHART_OPTIONS_DATACATEGORY.find(\n      o => o.value === dataCategory\n    );\n    if (!selectDataCategory) {\n      throw new Error('Selected item is not supported');\n    }\n\n    // Do not assume that handleDataTransformation is a pure function\n    const chartData: ChartStats = {\n      ...handleDataTransformation(usageStats, dataTransform),\n    };\n\n    Object.keys(chartData).forEach(k => {\n      const isProjected = k === SeriesTypes.PROJECTED;\n\n      // Map the array and destructure elements to avoid side-effects\n      chartData[k] = chartData[k].map(stat => {\n        return {\n          ...stat,\n          tooltip: {show: false},\n          itemStyle: {opacity: isProjected ? 0.6 : 1},\n        };\n      });\n    });\n\n    // Use hours as common units\n    const dataPeriod = statsPeriodToDays(undefined, usageDateStart, usageDateEnd) * 24;\n    const barPeriod = parsePeriodToHours(usageDateInterval);\n    if (dataPeriod < 0 || barPeriod < 0) {\n      throw new Error('UsageChart: Unable to parse data time period');\n    }\n\n    const {xAxisTickInterval, xAxisLabelInterval} = getXAxisLabelInterval(\n      dataPeriod,\n      dataPeriod / barPeriod\n    );\n\n    const {label, value} = selectDataCategory;\n\n    if (value === DataCategory.ERRORS || value === DataCategory.TRANSACTIONS) {\n      return {\n        chartLabel: label,\n        chartData,\n        xAxisData: xAxisDates,\n        xAxisTickInterval,\n        xAxisLabelInterval,\n        yAxisMinInterval: 100,\n        yAxisFormatter: formatAbbreviatedNumber,\n        tooltipValueFormatter: getTooltipFormatter(dataCategory),\n      };\n    }\n\n    return {\n      chartLabel: label,\n      chartData,\n      xAxisData: xAxisDates,\n      xAxisTickInterval,\n      xAxisLabelInterval,\n      yAxisMinInterval: 0.5 * GIGABYTE,\n      yAxisFormatter: (val: number) =>\n        formatUsageWithUnits(val, DataCategory.ATTACHMENTS, {\n          isAbbreviated: true,\n          useUnitScaling: true,\n        }),\n      tooltipValueFormatter: getTooltipFormatter(dataCategory),\n    };\n  }\n\n  get chartSeries() {\n    const {chartSeries} = this.props;\n    const {chartData} = this.chartMetadata;\n\n    let series: SeriesOption[] = [\n      barSeries({\n        name: SeriesTypes.ACCEPTED,\n        data: chartData.accepted as any, // TODO(ts)\n        barMinHeight: 1,\n        stack: 'usage',\n        legendHoverLink: false,\n      }),\n      barSeries({\n        name: SeriesTypes.FILTERED,\n        data: chartData.filtered as any, // TODO(ts)\n        barMinHeight: 1,\n        stack: 'usage',\n        legendHoverLink: false,\n      }),\n      barSeries({\n        name: SeriesTypes.DROPPED,\n        data: chartData.dropped as any, // TODO(ts)\n        stack: 'usage',\n        legendHoverLink: false,\n      }),\n      barSeries({\n        name: SeriesTypes.PROJECTED,\n        data: chartData.projected as any, // TODO(ts)\n        barMinHeight: 1,\n        stack: 'usage',\n        legendHoverLink: false,\n      }),\n    ];\n\n    // Additional series passed by parent component\n    if (chartSeries) {\n      series = series.concat(chartSeries as SeriesOption[]);\n    }\n\n    return series;\n  }\n\n  get chartLegend() {\n    const {chartData} = this.chartMetadata;\n    const legend = [\n      {\n        name: SeriesTypes.ACCEPTED,\n      },\n    ];\n\n    if (chartData.filtered && (chartData.filtered as any[]).length > 0) {\n      legend.push({\n        name: SeriesTypes.FILTERED,\n      });\n    }\n\n    if ((chartData.dropped as any[]).length > 0) {\n      legend.push({\n        name: SeriesTypes.DROPPED,\n      });\n    }\n\n    if ((chartData.projected as any[]).length > 0) {\n      legend.push({\n        name: SeriesTypes.PROJECTED,\n      });\n    }\n    return legend;\n  }\n\n  get chartTooltip(): ChartProps['tooltip'] {\n    const {chartTooltip} = this.props;\n\n    if (chartTooltip) {\n      return chartTooltip;\n    }\n\n    const {tooltipValueFormatter} = this.chartMetadata;\n\n    return {\n      // Trigger to axis prevents tooltip from redrawing when hovering\n      // over individual bars\n      trigger: 'axis',\n      valueFormatter: tooltipValueFormatter,\n    };\n  }\n\n  renderChart() {\n    const {theme, title, isLoading, isError, errors} = this.props;\n    if (isLoading) {\n      return (\n        <Placeholder height=\"200px\">\n          <LoadingIndicator mini />\n        </Placeholder>\n      );\n    }\n\n    if (isError) {\n      return (\n        <Placeholder height=\"200px\">\n          <IconWarning size={theme.fontSizeExtraLarge} />\n          <ErrorMessages>\n            {errors &&\n              Object.keys(errors).map(k => <span key={k}>{errors[k]?.message}</span>)}\n          </ErrorMessages>\n        </Placeholder>\n      );\n    }\n\n    const {\n      xAxisData,\n      xAxisTickInterval,\n      xAxisLabelInterval,\n      yAxisMinInterval,\n      yAxisFormatter,\n    } = this.chartMetadata;\n\n    return (\n      <Fragment>\n        <HeaderTitleLegend>{title || t('Current Usage Period')}</HeaderTitleLegend>\n        {getDynamicText({\n          value: (\n            <BaseChart\n              colors={this.chartColors}\n              grid={{bottom: '3px', left: '0px', right: '10px', top: '40px'}}\n              xAxis={xAxis({\n                show: true,\n                type: 'category',\n                name: 'Date',\n                data: xAxisData,\n                axisTick: {\n                  interval: xAxisTickInterval,\n                  alignWithLabel: true,\n                },\n                axisLabel: {\n                  interval: xAxisLabelInterval,\n                  formatter: (label: string) => label.slice(0, 6), // Limit label to 6 chars\n                },\n                theme,\n              })}\n              yAxis={{\n                min: 0,\n                minInterval: yAxisMinInterval,\n                axisLabel: {\n                  formatter: yAxisFormatter,\n                  color: theme.chartLabel,\n                },\n              }}\n              series={this.chartSeries}\n              tooltip={this.chartTooltip}\n              onLegendSelectChanged={() => {}}\n              legend={Legend({\n                right: 10,\n                top: 5,\n                data: this.chartLegend,\n                theme,\n              })}\n            />\n          ),\n          fixed: <Placeholder height=\"200px\" />,\n        })}\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {footer} = this.props;\n\n    return (\n      <Panel id=\"usage-chart\">\n        <ChartContainer>{this.renderChart()}</ChartContainer>\n        {footer}\n      </Panel>\n    );\n  }\n}\n\nexport default withTheme(UsageChart);\n\nconst ErrorMessages = styled('div')`\n  display: flex;\n  flex-direction: column;\n\n  margin-top: ${space(1)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n","import {SeriesApi} from 'sentry/types';\n\nexport enum Outcome {\n  ACCEPTED = 'accepted',\n  FILTERED = 'filtered',\n  INVALID = 'invalid',\n  DROPPED = 'dropped',\n  RATE_LIMITED = 'rate_limited',\n  CLIENT_DISCARD = 'client_discard',\n}\n\n/**\n * Raw response from API endpoint\n */\nexport type UsageSeries = SeriesApi & {\n  end: string;\n  start: string;\n};\n\nexport type UsageStat = {\n  accepted: number;\n  date: string;\n  dropped: {\n    total: number;\n    other?: number;\n  };\n  filtered: number;\n  total: number;\n};\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {t} from 'sentry/locale';\nimport {DataCategory, Organization} from 'sentry/types';\n\nimport {Outcome, UsageSeries} from './types';\nimport {formatUsageWithUnits, getFormatUsageOptions} from './utils';\n\ntype Props = {\n  dataCategory: DataCategory;\n  organization: Organization;\n} & AsyncComponent['props'];\n\ntype State = {\n  orgStats: UsageSeries | undefined;\n} & AsyncComponent['state'];\n\n/**\n * Making 1 extra API call to display this number isn't very efficient.\n * The other approach would be to fetch the data in UsageStatsOrg with 1min\n * interval and roll it up on the frontend, but that (1) adds unnecessary\n * complexity as it's gnarly to fetch + rollup 90 days of 1min intervals,\n * (3) API resultset has a limit of 1000, so 90 days of 1min would not work.\n *\n * We're going with this approach for simplicity sake. By keeping the range\n * as small as possible, this call is quite fast.\n */\nclass UsageStatsPerMin extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['orgStats', this.endpointPath, {query: this.endpointQuery}]];\n  }\n\n  get endpointPath() {\n    const {organization} = this.props;\n    return `/organizations/${organization.slug}/stats_v2/`;\n  }\n\n  get endpointQuery() {\n    return {\n      statsPeriod: '5m', // Any value <1h will return current hour's data\n      interval: '1m',\n      groupBy: ['category', 'outcome'],\n      field: ['sum(quantity)'],\n    };\n  }\n\n  get minuteData(): string | undefined {\n    const {dataCategory} = this.props;\n    const {loading, error, orgStats} = this.state;\n\n    if (loading || error || !orgStats || orgStats.intervals.length === 0) {\n      return undefined;\n    }\n\n    // The last minute in the series is still \"in progress\"\n    // Read data from 2nd last element for the latest complete minute\n    const {intervals, groups} = orgStats;\n    const lastMin = Math.max(intervals.length - 2, 0);\n\n    const eventsLastMin = groups.reduce((count, group) => {\n      const {outcome, category} = group.by;\n\n      // HACK: The backend enum are singular, but the frontend enums are plural\n      if (!dataCategory.includes(`${category}`) || outcome !== Outcome.ACCEPTED) {\n        return count;\n      }\n\n      count += group.series['sum(quantity)'][lastMin];\n      return count;\n    }, 0);\n\n    return formatUsageWithUnits(\n      eventsLastMin,\n      dataCategory,\n      getFormatUsageOptions(dataCategory)\n    );\n  }\n\n  renderComponent() {\n    if (!this.minuteData) {\n      return null;\n    }\n\n    return (\n      <Wrapper>\n        {this.minuteData} {t('in last min')}\n      </Wrapper>\n    );\n  }\n}\n\nexport default UsageStatsPerMin;\n\nconst Wrapper = styled('div')`\n  display: inline-block;\n  color: ${p => p.theme.success};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport moment from 'moment';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport OptionSelector from 'sentry/components/charts/optionSelector';\nimport {InlineContainer, SectionHeading} from 'sentry/components/charts/styles';\nimport {DateTimeObject, getSeriesApiInterval} from 'sentry/components/charts/utils';\nimport NotAvailable from 'sentry/components/notAvailable';\nimport ScoreCard from 'sentry/components/scoreCard';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DataCategory, IntervalPeriod, Organization} from 'sentry/types';\nimport {parsePeriodToHours} from 'sentry/utils/dates';\n\nimport {\n  FORMAT_DATETIME_DAILY,\n  FORMAT_DATETIME_HOURLY,\n  getDateFromMoment,\n} from './usageChart/utils';\nimport {Outcome, UsageSeries, UsageStat} from './types';\nimport UsageChart, {\n  CHART_OPTIONS_DATA_TRANSFORM,\n  ChartDataTransform,\n  ChartStats,\n} from './usageChart';\nimport UsageStatsPerMin from './usageStatsPerMin';\nimport {formatUsageWithUnits, getFormatUsageOptions, isDisplayUtc} from './utils';\n\ntype Props = {\n  dataCategory: DataCategory;\n  dataCategoryName: string;\n  dataDatetime: DateTimeObject;\n  handleChangeState: (state: {\n    dataCategory?: DataCategory;\n    pagePeriod?: string | null;\n    transform?: ChartDataTransform;\n  }) => void;\n  organization: Organization;\n  chartTransform?: string;\n} & AsyncComponent['props'];\n\ntype State = {\n  orgStats: UsageSeries | undefined;\n} & AsyncComponent['state'];\n\nclass UsageStatsOrganization extends AsyncComponent<Props, State> {\n  componentDidUpdate(prevProps: Props) {\n    const {dataDatetime: prevDateTime} = prevProps;\n    const {dataDatetime: currDateTime} = this.props;\n\n    if (\n      prevDateTime.start !== currDateTime.start ||\n      prevDateTime.end !== currDateTime.end ||\n      prevDateTime.period !== currDateTime.period ||\n      prevDateTime.utc !== currDateTime.utc\n    ) {\n      this.reloadData();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['orgStats', this.endpointPath, {query: this.endpointQuery}]];\n  }\n\n  get endpointPath() {\n    const {organization} = this.props;\n    return `/organizations/${organization.slug}/stats_v2/`;\n  }\n\n  get endpointQuery() {\n    const {dataDatetime} = this.props;\n\n    const queryDatetime =\n      dataDatetime.start && dataDatetime.end\n        ? {\n            start: dataDatetime.start,\n            end: dataDatetime.end,\n            utc: dataDatetime.utc,\n          }\n        : {\n            statsPeriod: dataDatetime.period || DEFAULT_STATS_PERIOD,\n          };\n\n    return {\n      ...queryDatetime,\n      interval: getSeriesApiInterval(dataDatetime),\n      groupBy: ['category', 'outcome'],\n      field: ['sum(quantity)'],\n    };\n  }\n\n  get chartData(): {\n    cardStats: {\n      accepted?: string;\n      dropped?: string;\n      filtered?: string;\n      total?: string;\n    };\n    chartDateEnd: string;\n    chartDateEndDisplay: string;\n    chartDateInterval: IntervalPeriod;\n    chartDateStart: string;\n    chartDateStartDisplay: string;\n    chartDateTimezoneDisplay: string;\n    chartDateUtc: boolean;\n    chartStats: ChartStats;\n    chartTransform: ChartDataTransform;\n    dataError?: Error;\n  } {\n    const {orgStats} = this.state;\n\n    return {\n      ...this.mapSeriesToChart(orgStats),\n      ...this.chartDateRange,\n      ...this.chartTransform,\n    };\n  }\n\n  get chartTransform(): {chartTransform: ChartDataTransform} {\n    const {chartTransform} = this.props;\n\n    switch (chartTransform) {\n      case ChartDataTransform.CUMULATIVE:\n      case ChartDataTransform.PERIODIC:\n        return {chartTransform};\n      default:\n        return {chartTransform: ChartDataTransform.PERIODIC};\n    }\n  }\n\n  get chartDateRange(): {\n    chartDateEnd: string;\n    chartDateEndDisplay: string;\n    chartDateInterval: IntervalPeriod;\n    chartDateStart: string;\n    chartDateStartDisplay: string;\n    chartDateTimezoneDisplay: string;\n    chartDateUtc: boolean;\n  } {\n    const {orgStats} = this.state;\n    const {dataDatetime} = this.props;\n\n    const interval = getSeriesApiInterval(dataDatetime);\n\n    // Use fillers as loading/error states will not display datetime at all\n    if (!orgStats || !orgStats.intervals) {\n      return {\n        chartDateInterval: interval,\n        chartDateStart: '',\n        chartDateEnd: '',\n        chartDateUtc: true,\n        chartDateStartDisplay: '',\n        chartDateEndDisplay: '',\n        chartDateTimezoneDisplay: '',\n      };\n    }\n\n    const {intervals} = orgStats;\n    const intervalHours = parsePeriodToHours(interval);\n\n    // Keep datetime in UTC until we want to display it to users\n    const startTime = moment(intervals[0]).utc();\n    const endTime =\n      intervals.length < 2\n        ? moment(startTime) // when statsPeriod and interval is the same value\n        : moment(intervals[intervals.length - 1]).utc();\n    const useUtc = isDisplayUtc(dataDatetime);\n\n    // If interval is a day or more, use UTC to format date. Otherwise, the date\n    // may shift ahead/behind when converting to the user's local time.\n    const FORMAT_DATETIME =\n      intervalHours >= 24 ? FORMAT_DATETIME_DAILY : FORMAT_DATETIME_HOURLY;\n\n    const xAxisStart = moment(startTime);\n    const xAxisEnd = moment(endTime);\n    const displayStart = useUtc ? moment(startTime).utc() : moment(startTime).local();\n    const displayEnd = useUtc ? moment(endTime).utc() : moment(endTime).local();\n\n    if (intervalHours < 24) {\n      displayEnd.add(intervalHours, 'h');\n    }\n\n    return {\n      chartDateInterval: interval,\n      chartDateStart: xAxisStart.format(),\n      chartDateEnd: xAxisEnd.format(),\n      chartDateUtc: useUtc,\n      chartDateStartDisplay: displayStart.format(FORMAT_DATETIME),\n      chartDateEndDisplay: displayEnd.format(FORMAT_DATETIME),\n      chartDateTimezoneDisplay: displayStart.format('Z'),\n    };\n  }\n\n  mapSeriesToChart(orgStats?: UsageSeries): {\n    cardStats: {\n      accepted?: string;\n      dropped?: string;\n      filtered?: string;\n      total?: string;\n    };\n    chartStats: ChartStats;\n    dataError?: Error;\n  } {\n    const cardStats = {\n      total: undefined,\n      accepted: undefined,\n      dropped: undefined,\n      filtered: undefined,\n    };\n    const chartStats: ChartStats = {\n      accepted: [],\n      dropped: [],\n      projected: [],\n      filtered: [],\n    };\n\n    if (!orgStats) {\n      return {cardStats, chartStats};\n    }\n\n    try {\n      const {dataCategory} = this.props;\n      const {chartDateInterval, chartDateUtc} = this.chartDateRange;\n\n      const usageStats: UsageStat[] = orgStats.intervals.map(interval => {\n        const dateTime = moment(interval);\n\n        return {\n          date: getDateFromMoment(dateTime, chartDateInterval, chartDateUtc),\n          total: 0,\n          accepted: 0,\n          filtered: 0,\n          dropped: {total: 0},\n        };\n      });\n\n      // Tally totals for card data\n      const count: Record<'total' | Outcome, number> = {\n        total: 0,\n        [Outcome.ACCEPTED]: 0,\n        [Outcome.FILTERED]: 0,\n        [Outcome.DROPPED]: 0,\n        [Outcome.INVALID]: 0, // Combined with dropped later\n        [Outcome.RATE_LIMITED]: 0, // Combined with dropped later\n        [Outcome.CLIENT_DISCARD]: 0, // Not exposed yet\n      };\n\n      orgStats.groups.forEach(group => {\n        const {outcome, category} = group.by;\n        // HACK: The backend enum are singular, but the frontend enums are plural\n        if (!dataCategory.includes(`${category}`)) {\n          return;\n        }\n\n        if (outcome !== Outcome.CLIENT_DISCARD) {\n          count.total += group.totals['sum(quantity)'];\n        }\n\n        count[outcome] += group.totals['sum(quantity)'];\n\n        group.series['sum(quantity)'].forEach((stat, i) => {\n          switch (outcome) {\n            case Outcome.ACCEPTED:\n            case Outcome.FILTERED:\n              usageStats[i][outcome] += stat;\n              return;\n            case Outcome.DROPPED:\n            case Outcome.RATE_LIMITED:\n            case Outcome.INVALID:\n              usageStats[i].dropped.total += stat;\n              // TODO: add client discards to dropped?\n              return;\n            default:\n              return;\n          }\n        });\n      });\n\n      // Invalid and rate_limited data is combined with dropped\n      count[Outcome.DROPPED] += count[Outcome.INVALID];\n      count[Outcome.DROPPED] += count[Outcome.RATE_LIMITED];\n\n      usageStats.forEach(stat => {\n        stat.total = stat.accepted + stat.filtered + stat.dropped.total;\n\n        // Chart Data\n        (chartStats.accepted as any[]).push({value: [stat.date, stat.accepted]});\n        (chartStats.dropped as any[]).push({\n          value: [stat.date, stat.dropped.total],\n        } as any);\n        (chartStats.filtered as any[])?.push({value: [stat.date, stat.filtered]});\n      });\n\n      return {\n        cardStats: {\n          total: formatUsageWithUnits(\n            count.total,\n            dataCategory,\n            getFormatUsageOptions(dataCategory)\n          ),\n          accepted: formatUsageWithUnits(\n            count[Outcome.ACCEPTED],\n            dataCategory,\n            getFormatUsageOptions(dataCategory)\n          ),\n          filtered: formatUsageWithUnits(\n            count[Outcome.FILTERED],\n            dataCategory,\n            getFormatUsageOptions(dataCategory)\n          ),\n          dropped: formatUsageWithUnits(\n            count[Outcome.DROPPED],\n            dataCategory,\n            getFormatUsageOptions(dataCategory)\n          ),\n        },\n        chartStats,\n      };\n    } catch (err) {\n      Sentry.withScope(scope => {\n        scope.setContext('query', this.endpointQuery);\n        scope.setContext('body', orgStats);\n        Sentry.captureException(err);\n      });\n\n      return {\n        cardStats,\n        chartStats,\n        dataError: new Error('Failed to parse stats data'),\n      };\n    }\n  }\n\n  renderCards() {\n    const {dataCategory, dataCategoryName, organization} = this.props;\n    const {loading} = this.state;\n    const {total, accepted, dropped, filtered} = this.chartData.cardStats;\n\n    const cardMetadata = [\n      {\n        title: tct('Total [dataCategory]', {dataCategory: dataCategoryName}),\n        value: total,\n      },\n      {\n        title: t('Accepted'),\n        help: tct('Accepted [dataCategory] were successfully processed by Sentry', {\n          dataCategory,\n        }),\n        value: accepted,\n        secondaryValue: (\n          <UsageStatsPerMin organization={organization} dataCategory={dataCategory} />\n        ),\n      },\n      {\n        title: t('Filtered'),\n        help: tct(\n          'Filtered [dataCategory] were blocked due to your inbound data filter rules',\n          {dataCategory}\n        ),\n        value: filtered,\n      },\n      {\n        title: t('Dropped'),\n        help: tct(\n          'Dropped [dataCategory] were discarded due to invalid data, rate-limits, quota limits, or spike protection',\n          {dataCategory}\n        ),\n        value: dropped,\n      },\n    ];\n\n    return cardMetadata.map((card, i) => (\n      <StyledScoreCard\n        key={i}\n        title={card.title}\n        score={loading ? undefined : card.value}\n        help={card.help}\n        trend={card.secondaryValue}\n      />\n    ));\n  }\n\n  renderChart() {\n    const {dataCategory} = this.props;\n    const {error, errors, loading} = this.state;\n\n    const {\n      chartStats,\n      dataError,\n      chartDateInterval,\n      chartDateStart,\n      chartDateEnd,\n      chartDateUtc,\n      chartTransform,\n    } = this.chartData;\n\n    const hasError = error || !!dataError;\n    const chartErrors: any = dataError ? {...errors, data: dataError} : errors; // TODO(ts): AsyncComponent\n\n    return (\n      <UsageChart\n        isLoading={loading}\n        isError={hasError}\n        errors={chartErrors}\n        title=\" \" // Force the title to be blank\n        footer={this.renderChartFooter()}\n        dataCategory={dataCategory}\n        dataTransform={chartTransform}\n        usageDateStart={chartDateStart}\n        usageDateEnd={chartDateEnd}\n        usageDateShowUtc={chartDateUtc}\n        usageDateInterval={chartDateInterval}\n        usageStats={chartStats}\n      />\n    );\n  }\n\n  renderChartFooter = () => {\n    const {handleChangeState} = this.props;\n    const {loading, error} = this.state;\n    const {\n      chartDateInterval,\n      chartTransform,\n      chartDateStartDisplay,\n      chartDateEndDisplay,\n      chartDateTimezoneDisplay,\n    } = this.chartData;\n\n    return (\n      <Footer>\n        <InlineContainer>\n          <FooterDate>\n            <SectionHeading>{t('Date Range:')}</SectionHeading>\n            <span>\n              {loading || error ? (\n                <NotAvailable />\n              ) : (\n                tct('[start] — [end] ([timezone] UTC, [interval] interval)', {\n                  start: chartDateStartDisplay,\n                  end: chartDateEndDisplay,\n                  timezone: chartDateTimezoneDisplay,\n                  interval: chartDateInterval,\n                })\n              )}\n            </span>\n          </FooterDate>\n        </InlineContainer>\n        <InlineContainer>\n          <OptionSelector\n            title={t('Type')}\n            selected={chartTransform}\n            options={CHART_OPTIONS_DATA_TRANSFORM}\n            onChange={(val: string) =>\n              handleChangeState({transform: val as ChartDataTransform})\n            }\n          />\n        </InlineContainer>\n      </Footer>\n    );\n  };\n\n  renderComponent() {\n    return (\n      <Fragment>\n        {this.renderCards()}\n        <ChartWrapper>{this.renderChart()}</ChartWrapper>\n      </Fragment>\n    );\n  }\n}\n\nexport default UsageStatsOrganization;\n\nconst StyledScoreCard = styled(ScoreCard)`\n  grid-column: auto / span 1;\n  margin: 0;\n`;\n\nconst ChartWrapper = styled('div')`\n  grid-column: 1 / -1;\n`;\n\nconst Footer = styled('div')`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: ${space(1)} ${space(3)};\n  border-top: 1px solid ${p => p.theme.border};\n`;\nconst FooterDate = styled('div')`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  > ${SectionHeading} {\n    margin-right: ${space(1.5)};\n  }\n\n  > span:last-child {\n    font-weight: 400;\n    font-size: ${p => p.theme.fontSizeMedium};\n  }\n`;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport IdBadge from 'sentry/components/idBadge';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport Link from 'sentry/components/links/link';\nimport {SettingsIconLink} from 'sentry/components/organizations/headerItem';\nimport {Panel} from 'sentry/components/panels';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport {IconSettings, IconWarning} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {DataCategory, Project} from 'sentry/types';\nimport theme from 'sentry/utils/theme';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\nimport {formatUsageWithUnits} from '../utils';\n\nconst DOCS_URL = 'https://docs.sentry.io/product/accounts/membership/#restricting-access';\n\ntype Props = {\n  dataCategory: DataCategory;\n  headers: React.ReactNode[];\n  usageStats: TableStat[];\n  errors?: Record<string, Error>;\n\n  isEmpty?: boolean;\n\n  isError?: boolean;\n  isLoading?: boolean;\n};\n\nexport type TableStat = {\n  accepted: number;\n  dropped: number;\n  filtered: number;\n  project: Project;\n  projectLink: string;\n  projectSettingsLink: string;\n  total: number;\n};\n\nclass UsageTable extends Component<Props> {\n  get formatUsageOptions() {\n    const {dataCategory} = this.props;\n\n    return {\n      isAbbreviated: dataCategory !== DataCategory.ATTACHMENTS,\n      useUnitScaling: dataCategory === DataCategory.ATTACHMENTS,\n    };\n  }\n\n  getErrorMessage = errorMessage => {\n    if (errorMessage.projectStats.responseJSON.detail === 'No projects available') {\n      return (\n        <EmptyMessage\n          icon={<IconWarning color=\"gray300\" size=\"48\" />}\n          title={t(\n            \"You don't have access to any projects, or your organization has no projects.\"\n          )}\n          description={tct('Learn more about [link:Project Access]', {\n            link: <ExternalLink href={DOCS_URL} />,\n          })}\n        />\n      );\n    }\n    return <IconWarning color=\"gray300\" size=\"48\" />;\n  };\n\n  renderTableRow(stat: TableStat & {project: Project}) {\n    const {dataCategory} = this.props;\n    const {project, total, accepted, filtered, dropped} = stat;\n\n    return [\n      <CellProject key={0}>\n        <Link to={stat.projectLink}>\n          <StyledIdBadge\n            avatarSize={16}\n            disableLink\n            hideOverflow\n            project={project}\n            displayName={project.slug}\n          />\n        </Link>\n        <SettingsIconLink to={stat.projectSettingsLink}>\n          <IconSettings size={theme.iconSizes.sm} />\n        </SettingsIconLink>\n      </CellProject>,\n      <CellStat key={1}>\n        {formatUsageWithUnits(total, dataCategory, this.formatUsageOptions)}\n      </CellStat>,\n      <CellStat key={2}>\n        {formatUsageWithUnits(accepted, dataCategory, this.formatUsageOptions)}\n      </CellStat>,\n      <CellStat key={3}>\n        {formatUsageWithUnits(filtered, dataCategory, this.formatUsageOptions)}\n      </CellStat>,\n      <CellStat key={4}>\n        {formatUsageWithUnits(dropped, dataCategory, this.formatUsageOptions)}\n      </CellStat>,\n    ];\n  }\n\n  render() {\n    const {isEmpty, isLoading, isError, errors, headers, usageStats} = this.props;\n\n    if (isError) {\n      return (\n        <Panel>\n          <ErrorPanel height=\"256px\">{this.getErrorMessage(errors)}</ErrorPanel>\n        </Panel>\n      );\n    }\n\n    return (\n      <StyledPanelTable isLoading={isLoading} isEmpty={isEmpty} headers={headers}>\n        {usageStats.map(s => this.renderTableRow(s))}\n      </StyledPanelTable>\n    );\n  }\n}\n\nexport default UsageTable;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: repeat(5, auto);\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: 1fr repeat(4, minmax(0, auto));\n  }\n`;\n\nexport const CellStat = styled('div')`\n  flex-shrink: 1;\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n\nexport const CellProject = styled(CellStat)`\n  display: flex;\n  align-items: center;\n  text-align: left;\n`;\n\nconst StyledIdBadge = styled(IdBadge)`\n  overflow: hidden;\n  white-space: nowrap;\n  flex-shrink: 1;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {LocationDescriptorObject} from 'history';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {DateTimeObject, getSeriesApiInterval} from 'sentry/components/charts/utils';\nimport SortLink, {Alignments, Directions} from 'sentry/components/gridEditable/sortLink';\nimport Pagination from 'sentry/components/pagination';\nimport SearchBar from 'sentry/components/searchBar';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {DataCategory, Organization, Project} from 'sentry/types';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {Outcome, UsageSeries} from './types';\nimport UsageTable, {CellProject, CellStat, TableStat} from './usageTable';\n\ntype Props = {\n  dataCategory: DataCategory;\n  dataCategoryName: string;\n  dataDatetime: DateTimeObject;\n\n  getNextLocations: (project: Project) => Record<string, LocationDescriptorObject>;\n  handleChangeState: (\n    nextState: {\n      cursor?: string;\n      query?: string;\n      sort?: string;\n    },\n    options?: {willUpdateRouter?: boolean}\n  ) => LocationDescriptorObject;\n  loadingProjects: boolean;\n  organization: Organization;\n  projects: Project[];\n  tableCursor?: string;\n  tableQuery?: string;\n  tableSort?: string;\n} & AsyncComponent['props'];\n\ntype State = {\n  projectStats: UsageSeries | undefined;\n} & AsyncComponent['state'];\n\nexport enum SortBy {\n  PROJECT = 'project',\n  TOTAL = 'total',\n  ACCEPTED = 'accepted',\n  FILTERED = 'filtered',\n  DROPPED = 'dropped',\n  INVALID = 'invalid',\n  RATE_LIMITED = 'rate_limited',\n}\n\nclass UsageStatsProjects extends AsyncComponent<Props, State> {\n  static MAX_ROWS_USAGE_TABLE = 25;\n\n  componentDidUpdate(prevProps: Props) {\n    const {dataDatetime: prevDateTime, dataCategory: prevDataCategory} = prevProps;\n    const {dataDatetime: currDateTime, dataCategory: currDataCategory} = this.props;\n\n    if (\n      prevDateTime.start !== currDateTime.start ||\n      prevDateTime.end !== currDateTime.end ||\n      prevDateTime.period !== currDateTime.period ||\n      prevDateTime.utc !== currDateTime.utc ||\n      currDataCategory !== prevDataCategory\n    ) {\n      this.reloadData();\n    }\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['projectStats', this.endpointPath, {query: this.endpointQuery}]];\n  }\n\n  get endpointPath() {\n    const {organization} = this.props;\n    return `/organizations/${organization.slug}/stats_v2/`;\n  }\n\n  get endpointQuery() {\n    const {dataDatetime, dataCategory} = this.props;\n\n    const queryDatetime =\n      dataDatetime.start && dataDatetime.end\n        ? {\n            start: dataDatetime.start,\n            end: dataDatetime.end,\n            utc: dataDatetime.utc,\n          }\n        : {\n            statsPeriod: dataDatetime.period || DEFAULT_STATS_PERIOD,\n          };\n\n    // We do not need more granularity in the data so interval is '1d'\n    return {\n      ...queryDatetime,\n      interval: getSeriesApiInterval(dataDatetime),\n      groupBy: ['outcome', 'project'],\n      field: ['sum(quantity)'],\n      project: '-1', // get all project user has access to\n      category: dataCategory.slice(0, -1), // backend is singular\n    };\n  }\n\n  get tableData() {\n    const {projectStats} = this.state;\n\n    return {\n      headers: this.tableHeader,\n      ...this.mapSeriesToTable(projectStats),\n    };\n  }\n\n  get tableSort(): {\n    direction: number;\n    key: SortBy;\n  } {\n    const {tableSort} = this.props;\n\n    if (!tableSort) {\n      return {\n        key: SortBy.TOTAL,\n        direction: 1,\n      };\n    }\n\n    let key: string = tableSort;\n    let direction: number = -1;\n\n    if (tableSort.charAt(0) === '-') {\n      key = key.slice(1);\n      direction = 1;\n    }\n\n    switch (key) {\n      case SortBy.PROJECT:\n      case SortBy.TOTAL:\n      case SortBy.ACCEPTED:\n      case SortBy.FILTERED:\n      case SortBy.DROPPED:\n        return {key, direction};\n      default:\n        return {key: SortBy.ACCEPTED, direction: -1};\n    }\n  }\n\n  get tableCursor() {\n    const {tableCursor} = this.props;\n    const offset = Number(tableCursor?.split(':')[1]);\n    return isNaN(offset) ? 0 : offset;\n  }\n\n  /**\n   * OrganizationStatsEndpointV2 does not have any performance issues. We use\n   * client-side pagination to limit the number of rows on the table so the\n   * page doesn't scroll too deeply for organizations with a lot of projects\n   */\n  get pageLink() {\n    const numRows = this.filteredProjects.length;\n    const offset = this.tableCursor;\n    const prevOffset = offset - UsageStatsProjects.MAX_ROWS_USAGE_TABLE;\n    const nextOffset = offset + UsageStatsProjects.MAX_ROWS_USAGE_TABLE;\n\n    return `<link>; rel=\"previous\"; results=\"${prevOffset >= 0}\"; cursor=\"0:${Math.max(\n      0,\n      prevOffset\n    )}:1\", <link>; rel=\"next\"; results=\"${\n      nextOffset < numRows\n    }\"; cursor=\"0:${nextOffset}:0\"`;\n  }\n\n  /**\n   * Filter projects if there's a query\n   */\n  get filteredProjects() {\n    const {projects, tableQuery} = this.props;\n    return tableQuery\n      ? projects.filter(p => p.slug.includes(tableQuery) && p.hasAccess)\n      : projects.filter(p => p.hasAccess);\n  }\n\n  get tableHeader() {\n    const {key, direction} = this.tableSort;\n\n    const getArrowDirection = (linkKey: SortBy): Directions => {\n      if (linkKey !== key) {\n        return undefined;\n      }\n\n      return direction > 0 ? 'desc' : 'asc';\n    };\n\n    return [\n      {\n        key: SortBy.PROJECT,\n        title: t('Project'),\n        align: 'left',\n        direction: getArrowDirection(SortBy.PROJECT),\n        onClick: () => this.handleChangeSort(SortBy.PROJECT),\n      },\n      {\n        key: SortBy.TOTAL,\n        title: t('Total'),\n        align: 'right',\n        direction: getArrowDirection(SortBy.TOTAL),\n        onClick: () => this.handleChangeSort(SortBy.TOTAL),\n      },\n      {\n        key: SortBy.ACCEPTED,\n        title: t('Accepted'),\n        align: 'right',\n        direction: getArrowDirection(SortBy.ACCEPTED),\n        onClick: () => this.handleChangeSort(SortBy.ACCEPTED),\n      },\n      {\n        key: SortBy.FILTERED,\n        title: t('Filtered'),\n        align: 'right',\n        direction: getArrowDirection(SortBy.FILTERED),\n        onClick: () => this.handleChangeSort(SortBy.FILTERED),\n      },\n      {\n        key: SortBy.DROPPED,\n        title: t('Dropped'),\n        align: 'right',\n        direction: getArrowDirection(SortBy.DROPPED),\n        onClick: () => this.handleChangeSort(SortBy.DROPPED),\n      },\n    ].map(h => {\n      const Cell = h.key === SortBy.PROJECT ? CellProject : CellStat;\n\n      return (\n        <Cell key={h.key}>\n          <SortLink\n            canSort\n            title={h.title}\n            align={h.align as Alignments}\n            direction={h.direction}\n            generateSortLink={h.onClick}\n          />\n        </Cell>\n      );\n    });\n  }\n\n  getProjectLink(project: Project) {\n    const {dataCategory, getNextLocations, organization} = this.props;\n    const {performance, projectDetail, settings} = getNextLocations(project);\n\n    if (\n      dataCategory === DataCategory.TRANSACTIONS &&\n      organization.features.includes('performance-view')\n    ) {\n      return {\n        projectLink: performance,\n        projectSettingsLink: settings,\n      };\n    }\n\n    return {\n      projectLink: projectDetail,\n      projectSettingsLink: settings,\n    };\n  }\n\n  handleChangeSort = (nextKey: SortBy) => {\n    const {handleChangeState} = this.props;\n    const {key, direction} = this.tableSort;\n\n    let nextDirection = 1; // Default to descending\n\n    if (key === nextKey) {\n      nextDirection = direction * -1; // Toggle if clicking on the same column\n    } else if (nextKey === SortBy.PROJECT) {\n      nextDirection = -1; // Default PROJECT to ascending\n    }\n\n    // The header uses SortLink, which takes a LocationDescriptor and pushes\n    // that to the router. As such, we do not need to update the router in\n    // handleChangeState\n    return handleChangeState(\n      {sort: `${nextDirection > 0 ? '-' : ''}${nextKey}`},\n      {willUpdateRouter: false}\n    );\n  };\n\n  handleSearch = (query: string) => {\n    const {handleChangeState, tableQuery} = this.props;\n\n    if (query === tableQuery) {\n      return;\n    }\n\n    if (!query) {\n      handleChangeState({query: undefined, cursor: undefined});\n      return;\n    }\n\n    handleChangeState({query, cursor: undefined});\n  };\n\n  mapSeriesToTable(projectStats?: UsageSeries): {\n    tableStats: TableStat[];\n    error?: Error;\n  } {\n    if (!projectStats) {\n      return {tableStats: []};\n    }\n\n    const stats: Record<number, object> = {};\n\n    try {\n      const baseStat: Partial<TableStat> = {\n        [SortBy.TOTAL]: 0,\n        [SortBy.ACCEPTED]: 0,\n        [SortBy.FILTERED]: 0,\n        [SortBy.DROPPED]: 0,\n      };\n\n      const projectList = this.filteredProjects;\n      const projectSet = new Set(projectList.map(p => p.id));\n\n      projectStats.groups.forEach(group => {\n        const {outcome, project: projectId} = group.by;\n        // Backend enum is singlar. Frontend enum is plural.\n\n        if (!projectSet.has(projectId.toString())) {\n          return;\n        }\n\n        if (!stats[projectId]) {\n          stats[projectId] = {...baseStat};\n        }\n\n        if (outcome !== Outcome.CLIENT_DISCARD) {\n          stats[projectId].total += group.totals['sum(quantity)'];\n        }\n\n        if (outcome === Outcome.ACCEPTED || outcome === Outcome.FILTERED) {\n          stats[projectId][outcome] += group.totals['sum(quantity)'];\n        } else if (\n          outcome === Outcome.RATE_LIMITED ||\n          outcome === Outcome.INVALID ||\n          outcome === Outcome.DROPPED\n        ) {\n          stats[projectId][SortBy.DROPPED] += group.totals['sum(quantity)'];\n        }\n      });\n\n      // For projects without stats, fill in with zero\n      const tableStats: TableStat[] = projectList.map(proj => {\n        const stat = stats[proj.id] ?? {...baseStat};\n        return {\n          project: {...proj},\n          ...this.getProjectLink(proj),\n          ...stat,\n        };\n      });\n\n      const {key, direction} = this.tableSort;\n      tableStats.sort((a, b) => {\n        if (key === SortBy.PROJECT) {\n          return b.project.slug.localeCompare(a.project.slug) * direction;\n        }\n\n        return a[key] !== b[key]\n          ? (b[key] - a[key]) * direction\n          : a.project.slug.localeCompare(b.project.slug);\n      });\n\n      const offset = this.tableCursor;\n\n      return {\n        tableStats: tableStats.slice(\n          offset,\n          offset + UsageStatsProjects.MAX_ROWS_USAGE_TABLE\n        ),\n      };\n    } catch (err) {\n      Sentry.withScope(scope => {\n        scope.setContext('query', this.endpointQuery);\n        scope.setContext('body', projectStats);\n        Sentry.captureException(err);\n      });\n\n      return {\n        tableStats: [],\n        error: err,\n      };\n    }\n  }\n\n  renderComponent() {\n    const {error, errors, loading} = this.state;\n    const {dataCategory, loadingProjects, tableQuery} = this.props;\n    const {headers, tableStats} = this.tableData;\n\n    return (\n      <Fragment>\n        <Container>\n          <SearchBar\n            defaultQuery=\"\"\n            query={tableQuery}\n            placeholder={t('Filter your projects')}\n            onSearch={this.handleSearch}\n          />\n        </Container>\n\n        <Container>\n          <UsageTable\n            isLoading={loading || loadingProjects}\n            isError={error}\n            errors={errors as any} // TODO(ts)\n            isEmpty={tableStats.length === 0}\n            headers={headers}\n            dataCategory={dataCategory}\n            usageStats={tableStats}\n          />\n          <Pagination pageLinks={this.pageLink} />\n        </Container>\n      </Fragment>\n    );\n  }\n}\n\nexport default withProjects(UsageStatsProjects);\n\nconst Container = styled('div')`\n  margin-bottom: ${space(2)};\n`;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport omit from 'lodash/omit';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {ChangeData} from 'sentry/components/organizations/timeRangeSelector';\nimport PageHeading from 'sentry/components/pageHeading';\nimport PageTimeRangeSelector from 'sentry/components/pageTimeRangeSelector';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {\n  DATA_CATEGORY_NAMES,\n  DEFAULT_RELATIVE_PERIODS,\n  DEFAULT_STATS_PERIOD,\n} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {DataCategory, DateString, Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport HeaderTabs from 'sentry/views/organizationStats/header';\n\nimport {CHART_OPTIONS_DATACATEGORY, ChartDataTransform} from './usageChart';\nimport UsageStatsOrg from './usageStatsOrg';\nimport UsageStatsProjects from './usageStatsProjects';\n\nconst HookHeader = HookOrDefault({hookName: 'component:org-stats-banner'});\n\nconst PAGE_QUERY_PARAMS = [\n  'pageStatsPeriod',\n  'pageStart',\n  'pageEnd',\n  'pageUtc',\n  'dataCategory',\n  'transform',\n  'sort',\n  'query',\n  'cursor',\n];\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\nexport class OrganizationStats extends Component<Props> {\n  get dataCategory(): DataCategory {\n    const dataCategory = this.props.location?.query?.dataCategory;\n\n    switch (dataCategory) {\n      case DataCategory.ERRORS:\n      case DataCategory.TRANSACTIONS:\n      case DataCategory.ATTACHMENTS:\n        return dataCategory as DataCategory;\n      default:\n        return DataCategory.ERRORS;\n    }\n  }\n\n  get dataCategoryName(): string {\n    const dataCategory = this.dataCategory;\n    return DATA_CATEGORY_NAMES[dataCategory] ?? t('Unknown Data Category');\n  }\n\n  get dataDatetime(): DateTimeObject {\n    const query = this.props.location?.query ?? {};\n\n    const {\n      start,\n      end,\n      statsPeriod,\n      utc: utcString,\n    } = normalizeDateTimeParams(query, {\n      allowEmptyPeriod: true,\n      allowAbsoluteDatetime: true,\n      allowAbsolutePageDatetime: true,\n    });\n\n    if (!statsPeriod && !start && !end) {\n      return {period: DEFAULT_STATS_PERIOD};\n    }\n\n    // Following getParams, statsPeriod will take priority over start/end\n    if (statsPeriod) {\n      return {period: statsPeriod};\n    }\n\n    const utc = utcString === 'true';\n    if (start && end) {\n      return utc\n        ? {\n            start: moment.utc(start).format(),\n            end: moment.utc(end).format(),\n            utc,\n          }\n        : {\n            start: moment(start).utc().format(),\n            end: moment(end).utc().format(),\n            utc,\n          };\n    }\n\n    return {period: DEFAULT_STATS_PERIOD};\n  }\n\n  // Validation and type-casting should be handled by chart\n  get chartTransform(): string | undefined {\n    return this.props.location?.query?.transform;\n  }\n\n  // Validation and type-casting should be handled by table\n  get tableSort(): string | undefined {\n    return this.props.location?.query?.sort;\n  }\n\n  get tableQuery(): string | undefined {\n    return this.props.location?.query?.query;\n  }\n\n  get tableCursor(): string | undefined {\n    return this.props.location?.query?.cursor;\n  }\n\n  getNextLocations = (project: Project): Record<string, LocationDescriptorObject> => {\n    const {location, organization} = this.props;\n    const nextLocation: LocationDescriptorObject = {\n      ...location,\n      query: {\n        ...location.query,\n        project: project.id,\n      },\n    };\n\n    // Do not leak out page-specific keys\n    nextLocation.query = omit(nextLocation.query, PAGE_QUERY_PARAMS);\n\n    return {\n      performance: {\n        ...nextLocation,\n        pathname: `/organizations/${organization.slug}/performance/`,\n      },\n      projectDetail: {\n        ...nextLocation,\n        pathname: `/organizations/${organization.slug}/projects/${project.slug}/`,\n      },\n      issueList: {\n        ...nextLocation,\n        pathname: `/organizations/${organization.slug}/issues/`,\n      },\n      settings: {\n        pathname: `/settings/${organization.slug}/projects/${project.slug}/`,\n      },\n    };\n  };\n\n  handleUpdateDatetime = (datetime: ChangeData): LocationDescriptorObject => {\n    const {start, end, relative, utc} = datetime;\n\n    if (start && end) {\n      const parser = utc ? moment.utc : moment;\n\n      return this.setStateOnUrl({\n        pageStatsPeriod: undefined,\n        pageStart: parser(start).format(),\n        pageEnd: parser(end).format(),\n        pageUtc: utc ?? undefined,\n      });\n    }\n\n    return this.setStateOnUrl({\n      pageStatsPeriod: relative || undefined,\n      pageStart: undefined,\n      pageEnd: undefined,\n      pageUtc: undefined,\n    });\n  };\n\n  /**\n   * TODO: Enable user to set dateStart/dateEnd\n   *\n   * See PAGE_QUERY_PARAMS for list of accepted keys on nextState\n   */\n  setStateOnUrl = (\n    nextState: {\n      cursor?: string;\n      dataCategory?: DataCategory;\n      pageEnd?: DateString;\n      pageStart?: DateString;\n      pageStatsPeriod?: string | null;\n      pageUtc?: boolean | null;\n      query?: string;\n      sort?: string;\n      transform?: ChartDataTransform;\n    },\n    options: {\n      willUpdateRouter?: boolean;\n    } = {\n      willUpdateRouter: true,\n    }\n  ): LocationDescriptorObject => {\n    const {location, router} = this.props;\n    const nextQueryParams = pick(nextState, PAGE_QUERY_PARAMS);\n\n    const nextLocation = {\n      ...location,\n      query: {\n        ...location?.query,\n        ...nextQueryParams,\n      },\n    };\n\n    if (options.willUpdateRouter) {\n      router.push(nextLocation);\n    }\n\n    return nextLocation;\n  };\n\n  renderPageControl = () => {\n    const {organization} = this.props;\n\n    const {start, end, period, utc} = this.dataDatetime;\n\n    return (\n      <Fragment>\n        <DropdownDataCategory\n          label={\n            <DropdownLabel>\n              <span>{t('Event Type: ')}</span>\n              <span>{this.dataCategoryName}</span>\n            </DropdownLabel>\n          }\n        >\n          {CHART_OPTIONS_DATACATEGORY.map(option => (\n            <DropdownItem\n              key={option.value}\n              isActive={option.value === this.dataCategory}\n              eventKey={option.value}\n              onSelect={(val: string) =>\n                this.setStateOnUrl({dataCategory: val as DataCategory})\n              }\n            >\n              {option.label}\n            </DropdownItem>\n          ))}\n        </DropdownDataCategory>\n\n        <StyledPageTimeRangeSelector\n          organization={organization}\n          relative={period ?? ''}\n          start={start ?? null}\n          end={end ?? null}\n          utc={utc ?? null}\n          onUpdate={this.handleUpdateDatetime}\n          relativeOptions={omit(DEFAULT_RELATIVE_PERIODS, ['1h'])}\n        />\n      </Fragment>\n    );\n  };\n\n  render() {\n    const {organization} = this.props;\n    const hasTeamInsights = organization.features.includes('team-insights');\n\n    return (\n      <SentryDocumentTitle title=\"Usage Stats\">\n        <Fragment>\n          {hasTeamInsights && (\n            <HeaderTabs organization={organization} activeTab=\"stats\" />\n          )}\n          <Body>\n            <Layout.Main fullWidth>\n              {!hasTeamInsights && (\n                <Fragment>\n                  <PageHeader>\n                    <PageHeading>{t('Organization Usage Stats')}</PageHeading>\n                  </PageHeader>\n                  <p>\n                    {t(\n                      'We collect usage metrics on three types of events: errors, transactions, and attachments. The charts below reflect events that Sentry has received across your entire organization. You can also find them broken down by project in the table.'\n                    )}\n                  </p>\n                </Fragment>\n              )}\n              <HookHeader organization={organization} />\n\n              <PageGrid>\n                {this.renderPageControl()}\n\n                <ErrorBoundary mini>\n                  <UsageStatsOrg\n                    organization={organization}\n                    dataCategory={this.dataCategory}\n                    dataCategoryName={this.dataCategoryName}\n                    dataDatetime={this.dataDatetime}\n                    chartTransform={this.chartTransform}\n                    handleChangeState={this.setStateOnUrl}\n                  />\n                </ErrorBoundary>\n              </PageGrid>\n              <ErrorBoundary mini>\n                <UsageStatsProjects\n                  organization={organization}\n                  dataCategory={this.dataCategory}\n                  dataCategoryName={this.dataCategoryName}\n                  dataDatetime={this.dataDatetime}\n                  tableSort={this.tableSort}\n                  tableQuery={this.tableQuery}\n                  tableCursor={this.tableCursor}\n                  handleChangeState={this.setStateOnUrl}\n                  getNextLocations={this.getNextLocations}\n                />\n              </ErrorBoundary>\n            </Layout.Main>\n          </Body>\n        </Fragment>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(OrganizationStats);\n\nconst PageGrid = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nconst DropdownDataCategory = styled(DropdownControl)`\n  height: 42px;\n  grid-column: auto / span 1;\n  justify-self: stretch;\n  align-self: stretch;\n  z-index: ${p => p.theme.zIndex.orgStats.dataCategory};\n\n  button {\n    width: 100%;\n    height: 100%;\n\n    > span {\n      display: flex;\n      justify-content: space-between;\n    }\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-column: auto / span 2;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-column: auto / span 1;\n  }\n`;\n\nconst StyledPageTimeRangeSelector = styled(PageTimeRangeSelector)`\n  grid-column: auto / span 1;\n  z-index: ${p => p.theme.zIndex.orgStats.timeRange};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-column: auto / span 2;\n  }\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-column: auto / span 3;\n  }\n`;\n\nconst DropdownLabel = styled('span')`\n  text-align: left;\n  font-weight: 600;\n  color: ${p => p.theme.textColor};\n\n  > span:last-child {\n    font-weight: 400;\n  }\n`;\n\nconst Body = styled(Layout.Body)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: block;\n  }\n`;\n"],"names":["p","height","theme","gray300","fontSizeExtraLarge","OptionSelector","options","onChange","selected","title","featureType","multiple","rest","mappedOptions","useMemo","map","opt","label","value","String","maxLength","expandDirection","option","o","isOptionDisabled","disabled","length","includes","triggerProps","size","borderless","prefix","Fragment","defined","StyledFeatureBadge","type","placement","FeatureBadge","SortLink","align","canSort","generateSortLink","onClick","direction","target","StyledNonLink","arrow","StyledIconArrow","StyledLink","to","props","forwardProps","omit","IconArrow","NotAvailable","tooltip","className","skipWrapper","undefined","Wrapper","gray200","PageTimeRangeSelector","DropdownDate","DropdownLabel","t","detached","relative","start","end","utc","defaultPeriod","Panel","background","border","borderRadius","fontSizeMedium","textColor","space","ScoreCard","score","help","trend","trendStatus","ScorePanel","HeaderTitle","Title","position","ScoreWrapper","Score","Trend","getTrendColor","green300","red300","headingColor","overflowEllipsis","StatsHeader","organization","activeTab","StyledLayoutTitle","href","underlined","slug","Layout","MILLION","BILLION","GIGABYTE","formatUsageWithUnits","usageQuantity","dataCategory","isAbbreviated","useUnitScaling","DataCategory","abbreviateUsageNumber","toLocaleString","formatBytesBase10","usageGb","maximumFractionDigits","getFormatUsageOptions","n","toFixed","FORMAT_DATETIME_DAILY","FORMAT_DATETIME_HOURLY","getDateFromMoment","m","interval","useUtc","days","parsePeriodToHours","moment","format","parsedInterval","parseStatsPeriod","datetime","local","add","period","periodLength","getXAxisDates","dateStart","dateEnd","dateUtc","range","startOf","isValid","isAfter","push","getTooltipFormatter","val","COLOR_ERRORS","Color","commonTheme","lighten","string","COLOR_TRANSACTIONS","COLOR_ATTACHMENTS","COLOR_DROPPED","COLOR_FILTERED","CHART_OPTIONS_DATACATEGORY","DATA_CATEGORY_NAMES","ChartDataTransform","CHART_OPTIONS_DATA_TRANSFORM","CUMULATIVE","PERIODIC","SeriesTypes","UsageChart","Component","xAxisDates","nextProps","prevState","usageDateStart","usageDateEnd","usageDateShowUtc","usageDateInterval","chartColors","this","COLOR_PROJECTED","chartOther","chartMetadata","usageStats","dataTransform","handleDataTransformation","state","selectDataCategory","find","Error","chartData","Object","keys","forEach","k","isProjected","PROJECTED","stat","show","itemStyle","opacity","dataPeriod","statsPeriodToDays","barPeriod","xAxisTickInterval","xAxisLabelInterval","numBars","numTicks","numLabels","daysBetweenLabels","daysBetweenTicks","i","getLabelIntervalLongPeriod","getLabelIntervalShortPeriod","getXAxisLabelInterval","chartLabel","xAxisData","yAxisMinInterval","yAxisFormatter","formatAbbreviatedNumber","tooltipValueFormatter","chartSeries","series","barSeries","name","ACCEPTED","data","accepted","barMinHeight","stack","legendHoverLink","FILTERED","filtered","DROPPED","dropped","projected","concat","chartLegend","legend","chartTooltip","trigger","valueFormatter","renderChart","isLoading","isError","errors","mini","ErrorMessages","message","getDynamicText","colors","grid","bottom","left","right","top","xAxis","axisTick","alignWithLabel","axisLabel","formatter","slice","yAxis","min","minInterval","color","onLegendSelectChanged","Legend","fixed","render","footer","id","stats","transform","isCumulative","count","x","y","withTheme","fontSizeSmall","Outcome","UsageStatsPerMin","AsyncComponent","getEndpoints","endpointPath","query","endpointQuery","statsPeriod","groupBy","field","minuteData","loading","error","orgStats","intervals","groups","lastMin","Math","max","reduce","group","outcome","category","by","renderComponent","success","UsageStatsOrganization","handleChangeState","chartDateInterval","chartTransform","chartDateStartDisplay","chartDateEndDisplay","chartDateTimezoneDisplay","Footer","FooterDate","tct","timezone","componentDidUpdate","prevProps","dataDatetime","prevDateTime","currDateTime","reloadData","DEFAULT_STATS_PERIOD","getSeriesApiInterval","mapSeriesToChart","chartDateRange","chartDateStart","chartDateEnd","chartDateUtc","intervalHours","startTime","endTime","isDisplayUtc","FORMAT_DATETIME","xAxisStart","xAxisEnd","displayStart","displayEnd","cardStats","total","chartStats","date","INVALID","RATE_LIMITED","CLIENT_DISCARD","totals","err","Sentry","scope","setContext","dataError","renderCards","dataCategoryName","secondaryValue","card","StyledScoreCard","hasError","chartErrors","renderChartFooter","ChartWrapper","SectionHeading","UsageTable","errorMessage","projectStats","responseJSON","detail","icon","description","link","formatUsageOptions","renderTableRow","project","CellProject","projectLink","StyledIdBadge","avatarSize","disableLink","hideOverflow","displayName","projectSettingsLink","CellStat","isEmpty","headers","getErrorMessage","StyledPanelTable","s","PanelTable","breakpoints","small","IdBadge","SortBy","UsageStatsProjects","nextKey","key","tableSort","nextDirection","PROJECT","sort","willUpdateRouter","tableQuery","cursor","prevDataCategory","currDataCategory","tableData","tableHeader","mapSeriesToTable","TOTAL","charAt","tableCursor","offset","Number","split","isNaN","pageLink","numRows","filteredProjects","prevOffset","MAX_ROWS_USAGE_TABLE","nextOffset","projects","filter","hasAccess","getArrowDirection","linkKey","handleChangeSort","h","Cell","getProjectLink","getNextLocations","performance","projectDetail","settings","features","tableStats","baseStat","projectList","projectSet","Set","projectId","has","toString","proj","a","b","localeCompare","loadingProjects","Container","defaultQuery","placeholder","onSearch","handleSearch","pageLinks","withProjects","HookHeader","HookOrDefault","hookName","PAGE_QUERY_PARAMS","OrganizationStats","location","nextLocation","pathname","issueList","parser","setStateOnUrl","pageStatsPeriod","pageStart","pageEnd","pageUtc","nextState","router","nextQueryParams","pick","DropdownDataCategory","isActive","eventKey","onSelect","StyledPageTimeRangeSelector","onUpdate","handleUpdateDatetime","relativeOptions","DEFAULT_RELATIVE_PERIODS","utcString","normalizeDateTimeParams","allowEmptyPeriod","allowAbsoluteDatetime","allowAbsolutePageDatetime","hasTeamInsights","Body","fullWidth","PageGrid","renderPageControl","withOrganization","large","DropdownControl","zIndex","timeRange","medium"],"sourceRoot":""}