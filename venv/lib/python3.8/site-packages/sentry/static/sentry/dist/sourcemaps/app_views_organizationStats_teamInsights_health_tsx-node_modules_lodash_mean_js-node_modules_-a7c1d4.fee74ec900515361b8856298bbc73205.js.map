{"version":3,"file":"chunks/app_views_organizationStats_teamInsights_health_tsx-node_modules_lodash_mean_js-node_modules_-a7c1d4.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/utils/performance/urls.ts","webpack:///./app/views/organizationStats/teamInsights/teamAlertsTriggered.tsx","webpack:///./app/views/organizationStats/teamInsights/teamMisery.tsx","webpack:///./app/views/organizationStats/teamInsights/teamReleases.tsx","webpack:///./app/views/organizationStats/teamInsights/teamStability.tsx","webpack:///./app/views/organizationStats/teamInsights/health.tsx","webpack:///./app/views/performance/transactionSummary/utils.tsx","webpack:///../node_modules/lodash/_baseMean.js","webpack:///../node_modules/lodash/_baseSum.js","webpack:///../node_modules/lodash/mean.js","webpack:///../node_modules/lodash/negate.js","webpack:///../node_modules/lodash/omitBy.js"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nimport {decodeScalar} from '../queryString';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer, location} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(props.location);\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    if (['events', 'eventsv2'].includes(props.route)) {\n      const queryUserModified = decodeScalar(location.query?.userModified);\n      if (queryUserModified !== undefined) {\n        payload.user_modified = queryUserModified;\n      }\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {api, beforeFetch, afterFetch, didFetch, eventView, orgSlug, route, setError} =\n      this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload);\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams\n): Promise<[T, string | undefined, ResponseMeta | undefined]> {\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import {LocationDescriptor, Query} from 'history';\n\nimport {spanTargetHash} from 'sentry/components/events/interfaces/spans/utils';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nexport function getTransactionDetailsUrl(\n  orgSlug: Organization['slug'],\n  eventSlug: string,\n  transaction?: string,\n  query?: Query,\n  spanId?: string\n): LocationDescriptor {\n  const locationQuery = {\n    ...(query || {}),\n    transaction,\n  };\n  if (!defined(locationQuery.transaction)) {\n    delete locationQuery.transaction;\n  }\n\n  const target = {\n    pathname: `/organizations/${orgSlug}/performance/${eventSlug}/`,\n    query: locationQuery,\n    hash: defined(spanId) ? spanTargetHash(spanId) : undefined,\n  };\n  if (!defined(target.hash)) {\n    delete target.hash;\n  }\n\n  return target;\n}\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport round from 'lodash/round';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {Color} from 'sentry/utils/theme';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {barAxisLabel, convertDayValueObjectToSeries, sortSeriesByDay} from './utils';\n\ntype AlertsTriggered = Record<string, number>;\n\ntype AlertsTriggeredRule = MetricRule & {\n  totalThisWeek: number;\n  weeklyAvg: number;\n};\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  teamSlug: string;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  alertsTriggered: AlertsTriggered | null;\n  alertsTriggeredRules: AlertsTriggeredRule[] | null;\n};\n\nclass TeamAlertsTriggered extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      alertsTriggered: null,\n      alertsTriggeredRules: null,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, start, end, period, utc, teamSlug} = this.props;\n    const datetime = {start, end, period, utc};\n\n    return [\n      [\n        'alertsTriggered',\n        `/teams/${organization.slug}/${teamSlug}/alerts-triggered/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n          },\n        },\n      ],\n      [\n        'alertsTriggeredRules',\n        `/teams/${organization.slug}/${teamSlug}/alerts-triggered-index/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {start, end, period, utc, teamSlug} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      prevProps.teamSlug !== teamSlug\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  renderTrend(rule: AlertsTriggeredRule) {\n    const {weeklyAvg, totalThisWeek} = rule;\n    const diff = totalThisWeek - weeklyAvg;\n\n    // weeklyAvg can only be 0 only if totalThisWeek is also 0\n    // but those should never be returned in alerts-triggered-index request\n    if (weeklyAvg === 0) {\n      return '\\u2014';\n    }\n\n    return (\n      <SubText color={diff <= 0 ? 'green300' : 'red300'}>\n        {formatPercentage(Math.abs(diff / weeklyAvg), 0)}\n        <PaddedIconArrow direction={diff <= 0 ? 'down' : 'up'} size=\"xs\" />\n      </SubText>\n    );\n  }\n\n  renderLoading() {\n    return (\n      <ChartWrapper>\n        <LoadingIndicator />\n      </ChartWrapper>\n    );\n  }\n\n  renderBody() {\n    const {organization, period, projects} = this.props;\n    const {alertsTriggered, alertsTriggeredRules} = this.state;\n    const seriesData = sortSeriesByDay(\n      convertDayValueObjectToSeries(alertsTriggered ?? {})\n    );\n\n    return (\n      <Fragment>\n        <ChartWrapper>\n          <BarChart\n            style={{height: 190}}\n            isGroupedByDate\n            useShortDate\n            period=\"7d\"\n            legend={{right: 0, top: 0}}\n            yAxis={{minInterval: 1}}\n            xAxis={barAxisLabel(seriesData.length)}\n            series={[\n              {\n                seriesName: t('Alerts Triggered'),\n                data: seriesData,\n                silent: true,\n                barCategoryGap: '5%',\n              },\n            ]}\n          />\n        </ChartWrapper>\n        <StyledPanelTable\n          isEmpty={\n            !alertsTriggered || !alertsTriggeredRules || alertsTriggeredRules.length === 0\n          }\n          emptyMessage={t('No alerts triggered for this team’s projects')}\n          emptyAction={\n            <ButtonsContainer>\n              <Button\n                priority=\"primary\"\n                size=\"small\"\n                to={`/organizations/${organization.slug}/alerts/rules/`}\n              >\n                {t('Create Alert')}\n              </Button>\n              <Button\n                size=\"small\"\n                external\n                to=\"https://docs.sentry.io/product/alerts/create-alerts/\"\n              >\n                {t('Learn more')}\n              </Button>\n            </ButtonsContainer>\n          }\n          headers={[\n            t('Alert Rule'),\n            t('Project'),\n            <AlignRight key=\"last\">{tct('Last [period] Average', {period})}</AlignRight>,\n            <AlignRight key=\"curr\">{t('This Week')}</AlignRight>,\n            <AlignRight key=\"diff\">{t('Difference')}</AlignRight>,\n          ]}\n        >\n          {alertsTriggeredRules?.map(rule => {\n            const project = projects.find(p => p.slug === rule.projects[0]);\n\n            return (\n              <Fragment key={rule.id}>\n                <AlertNameContainer>\n                  <Link\n                    to={`/organizations/${organization.slug}/alerts/rules/details/${rule.id}/`}\n                  >\n                    {rule.name}\n                  </Link>\n                </AlertNameContainer>\n                <ProjectBadgeContainer>\n                  {project && <ProjectBadge avatarSize={18} project={project} />}\n                </ProjectBadgeContainer>\n                <AlignRight>{round(rule.weeklyAvg, 2)}</AlignRight>\n                <AlignRight>{rule.totalThisWeek}</AlignRight>\n                <AlignRight>{this.renderTrend(rule)}</AlignRight>\n              </Fragment>\n            );\n          })}\n        </StyledPanelTable>\n      </Fragment>\n    );\n  }\n}\n\nexport default TeamAlertsTriggered;\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: 1fr 0.5fr 0.2fr 0.2fr 0.2fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst AlertNameContainer = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst AlignRight = styled('div')`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: Color}>`\n  color: ${p => p.theme[p.color]};\n`;\n\nconst ButtonsContainer = styled('div')`\n  & > a {\n    margin-right: ${space(0.5)};\n    margin-left: ${space(0.5)};\n  }\n`;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport CollapsePanel, {COLLAPSE_COUNT} from 'sentry/components/collapsePanel';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport {IconStar} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project, SavedQueryVersions} from 'sentry/types';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport type {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport type {Color} from 'sentry/utils/theme';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {groupByTrend} from './utils';\n\ntype TeamMiseryProps = {\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  periodTableData: TableData | null;\n  projects: Project[];\n  weekTableData: TableData | null;\n  error?: QueryError | null;\n  period?: string | null;\n};\n\nfunction TeamMisery({\n  organization,\n  location,\n  projects,\n  periodTableData,\n  weekTableData,\n  isLoading,\n  period,\n  error,\n}: TeamMiseryProps) {\n  const miseryRenderer =\n    periodTableData?.meta &&\n    getFieldRenderer('user_misery()', periodTableData.meta, false);\n\n  // Calculate trend, so we can sort based on it\n  const sortedTableData = (periodTableData?.data ?? [])\n    .map(dataRow => {\n      const weekRow = weekTableData?.data.find(\n        row => row.project === dataRow.project && row.transaction === dataRow.transaction\n      );\n\n      const trend = weekRow\n        ? ((dataRow['user_misery()'] as number) - (weekRow['user_misery()'] as number)) *\n          100\n        : null;\n\n      return {\n        ...dataRow,\n        trend,\n      } as TableDataRow & {trend: number};\n    })\n    .filter(x => x.trend !== null)\n    .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n  const groupedData = groupByTrend(sortedTableData);\n\n  if (error) {\n    return <LoadingError />;\n  }\n\n  return (\n    <CollapsePanel items={groupedData.length}>\n      {({isExpanded, showMoreButton}) => (\n        <Fragment>\n          <StyledPanelTable\n            isEmpty={projects.length === 0 || periodTableData?.data.length === 0}\n            emptyMessage={t('No key transactions starred by this team')}\n            emptyAction={\n              <Button\n                size=\"small\"\n                external\n                href=\"https://docs.sentry.io/product/performance/transaction-summary/#starring-key-transactions\"\n              >\n                {t('Learn More')}\n              </Button>\n            }\n            headers={[\n              <FlexCenter key=\"transaction\">\n                <StyledIconStar isSolid color=\"yellow300\" /> {t('Key transaction')}\n              </FlexCenter>,\n              t('Project'),\n              tct('Last [period]', {period}),\n              t('Last 7 Days'),\n              <RightAligned key=\"change\">{t('Change')}</RightAligned>,\n            ]}\n            isLoading={isLoading}\n          >\n            {groupedData.map((dataRow, idx) => {\n              const project = projects.find(({slug}) => dataRow.project === slug);\n              const {trend, project: projectId, transaction} = dataRow;\n\n              const weekRow = weekTableData?.data.find(\n                row => row.project === projectId && row.transaction === transaction\n              );\n              if (!weekRow || trend === null) {\n                return null;\n              }\n\n              const periodMisery = miseryRenderer?.(dataRow, {organization, location});\n              const weekMisery =\n                weekRow && miseryRenderer?.(weekRow, {organization, location});\n              const trendValue = Math.round(Math.abs(trend));\n\n              if (idx >= COLLAPSE_COUNT && !isExpanded) {\n                return null;\n              }\n\n              return (\n                <Fragment key={idx}>\n                  <KeyTransactionTitleWrapper>\n                    <div>\n                      <StyledIconStar isSolid color=\"yellow300\" />\n                    </div>\n                    <TransactionWrapper>\n                      <Link\n                        to={transactionSummaryRouteWithQuery({\n                          orgSlug: organization.slug,\n                          transaction: dataRow.transaction as string,\n                          projectID: project?.id,\n                          query: {query: 'transaction.duration:<15m'},\n                        })}\n                      >\n                        {dataRow.transaction}\n                      </Link>\n                    </TransactionWrapper>\n                  </KeyTransactionTitleWrapper>\n                  <FlexCenter>\n                    <ProjectBadgeContainer>\n                      {project && <ProjectBadge avatarSize={18} project={project} />}\n                    </ProjectBadgeContainer>\n                  </FlexCenter>\n                  <FlexCenter>{periodMisery}</FlexCenter>\n                  <FlexCenter>{weekMisery ?? '\\u2014'}</FlexCenter>\n                  <ScoreWrapper>\n                    {trendValue === 0 ? (\n                      <SubText>\n                        {`0\\u0025 `}\n                        {t('change')}\n                      </SubText>\n                    ) : (\n                      <TrendText color={trend >= 0 ? 'green300' : 'red300'}>\n                        {`${trendValue}\\u0025 `}\n                        {trend >= 0 ? t('better') : t('worse')}\n                      </TrendText>\n                    )}\n                  </ScoreWrapper>\n                </Fragment>\n              );\n            })}\n          </StyledPanelTable>\n          {!isLoading && showMoreButton}\n        </Fragment>\n      )}\n    </CollapsePanel>\n  );\n}\n\ntype Props = AsyncComponent['props'] & {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  teamId: string;\n  end?: string;\n  period?: string | null;\n  start?: string;\n} & DateTimeObject;\n\nfunction TeamMiseryWrapper({\n  organization,\n  teamId,\n  projects,\n  location,\n  period,\n  start,\n  end,\n}: Props) {\n  if (projects.length === 0) {\n    return (\n      <TeamMisery\n        isLoading={false}\n        organization={organization}\n        location={location}\n        projects={[]}\n        period={period}\n        periodTableData={{data: []}}\n        weekTableData={{data: []}}\n      />\n    );\n  }\n\n  const commonEventView = {\n    id: undefined,\n    query: 'transaction.duration:<15m team_key_transaction:true',\n    projects: [],\n    version: 2 as SavedQueryVersions,\n    orderby: '-tpm',\n    teams: [Number(teamId)],\n    fields: [\n      'transaction',\n      'project',\n      'tpm()',\n      'count_unique(user)',\n      'count_miserable(user)',\n      'user_misery()',\n    ],\n  };\n  const periodEventView = EventView.fromSavedQuery({\n    ...commonEventView,\n    name: 'periodMisery',\n    range: period ?? undefined,\n    start,\n    end,\n  });\n\n  const weekEventView = EventView.fromSavedQuery({\n    ...commonEventView,\n    name: 'weekMisery',\n    range: '7d',\n  });\n\n  return (\n    <DiscoverQuery\n      eventView={periodEventView}\n      orgSlug={organization.slug}\n      location={location}\n      useEvents\n    >\n      {({isLoading, tableData: periodTableData, error}) => (\n        <DiscoverQuery\n          eventView={weekEventView}\n          orgSlug={organization.slug}\n          location={location}\n          useEvents\n        >\n          {({isLoading: isWeekLoading, tableData: weekTableData, error: weekError}) => (\n            <TeamMisery\n              isLoading={isLoading || isWeekLoading}\n              organization={organization}\n              location={location}\n              projects={projects}\n              period={period}\n              periodTableData={periodTableData}\n              weekTableData={weekTableData}\n              error={error ?? weekError}\n            />\n          )}\n        </DiscoverQuery>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nexport default TeamMiseryWrapper;\n\nconst StyledPanelTable = styled(PanelTable)<{isEmpty: boolean}>`\n  grid-template-columns: 1.25fr 0.5fr 112px 112px 0.25fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst KeyTransactionTitleWrapper = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledIconStar = styled(IconStar)`\n  display: block;\n  margin-right: ${space(1)};\n  margin-bottom: ${space(0.5)};\n`;\n\nconst TransactionWrapper = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst SubText = styled('div')`\n  color: ${p => p.theme.subText};\n`;\n\nconst TrendText = styled('div')<{color: Color}>`\n  color: ${p => p.theme[p.color]};\n`;\n","import {ComponentType, Fragment} from 'react';\nimport {css, withTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\nimport round from 'lodash/round';\nimport moment from 'moment';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport Link from 'sentry/components/links/link';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {Color, Theme} from 'sentry/utils/theme';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {barAxisLabel, groupByTrend, sortSeriesByDay} from './utils';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  teamSlug: string;\n  theme: Theme;\n} & DateTimeObject;\n\ntype ProjectReleaseCount = {\n  last_week_totals: Record<string, number>;\n  project_avgs: Record<string, number>;\n  release_counts: Record<string, number>;\n};\n\ntype State = AsyncComponent['state'] & {\n  /** weekly selected date range */\n  periodReleases: ProjectReleaseCount | null;\n  /** Locked to last 7 days */\n  weekReleases: ProjectReleaseCount | null;\n};\n\nclass TeamReleases extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      weekReleases: null,\n      periodReleases: null,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, start, end, period, utc, teamSlug} = this.props;\n\n    const datetime = {start, end, period, utc};\n\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'periodReleases',\n        `/teams/${organization.slug}/${teamSlug}/release-count/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(datetime),\n          },\n        },\n      ],\n      [\n        'weekReleases',\n        `/teams/${organization.slug}/${teamSlug}/release-count/`,\n        {\n          query: {\n            statsPeriod: '7d',\n          },\n        },\n      ],\n    ];\n\n    return endpoints;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {teamSlug, start, end, period, utc} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      !isEqual(prevProps.teamSlug, teamSlug)\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getReleaseCount(projectId: number, dataset: 'week' | 'period'): number | null {\n    const {periodReleases, weekReleases} = this.state;\n\n    const releasesPeriod =\n      dataset === 'week' ? weekReleases?.last_week_totals : periodReleases?.project_avgs;\n\n    const count = releasesPeriod?.[projectId]\n      ? Math.ceil(releasesPeriod?.[projectId])\n      : 0;\n\n    return count;\n  }\n\n  getTrend(projectId: number): number | null {\n    const periodCount = this.getReleaseCount(projectId, 'period');\n    const weekCount = this.getReleaseCount(projectId, 'week');\n\n    if (periodCount === null || weekCount === null) {\n      return null;\n    }\n\n    return weekCount - periodCount;\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderReleaseCount(projectId: string, dataset: 'week' | 'period') {\n    const {loading} = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <Placeholder width=\"80px\" height=\"25px\" />\n        </div>\n      );\n    }\n\n    const count = this.getReleaseCount(Number(projectId), dataset);\n\n    if (count === null) {\n      return '\\u2014';\n    }\n\n    return count;\n  }\n\n  renderTrend(projectId: string) {\n    const {loading} = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <Placeholder width=\"80px\" height=\"25px\" />\n        </div>\n      );\n    }\n\n    const trend = this.getTrend(Number(projectId));\n\n    if (trend === null) {\n      return '\\u2014';\n    }\n\n    return (\n      <SubText color={trend >= 0 ? 'green300' : 'red300'}>\n        {`${round(Math.abs(trend), 3)}`}\n        <PaddedIconArrow direction={trend >= 0 ? 'up' : 'down'} size=\"xs\" />\n      </SubText>\n    );\n  }\n\n  renderBody() {\n    const {projects, period, theme, organization} = this.props;\n    const {periodReleases} = this.state;\n\n    const sortedProjects = projects\n      .map(project => ({project, trend: this.getTrend(Number(project.id)) ?? 0}))\n      .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n    const groupedProjects = groupByTrend(sortedProjects);\n\n    const data = Object.entries(periodReleases?.release_counts ?? {}).map(\n      ([bucket, count]) => ({\n        value: Math.ceil(count),\n        name: new Date(bucket).getTime(),\n      })\n    );\n    const seriesData = sortSeriesByDay(data);\n\n    const averageValues = Object.values(periodReleases?.project_avgs ?? {});\n    const projectAvgSum = averageValues.reduce(\n      (total, currentData) => total + currentData,\n      0\n    );\n    const totalPeriodAverage = Math.ceil(projectAvgSum / averageValues.length);\n\n    return (\n      <div>\n        <ChartWrapper>\n          <BarChart\n            style={{height: 190}}\n            isGroupedByDate\n            useShortDate\n            period=\"7d\"\n            legend={{right: 3, top: 0}}\n            yAxis={{minInterval: 1}}\n            xAxis={barAxisLabel(seriesData.length)}\n            series={[\n              {\n                seriesName: t('This Period'),\n                silent: true,\n                data: seriesData,\n                markLine: MarkLine({\n                  silent: true,\n                  lineStyle: {color: theme.gray200, type: 'dashed', width: 1},\n                  data: [{yAxis: totalPeriodAverage}],\n                  label: {\n                    show: false,\n                  },\n                }),\n                barCategoryGap: '5%',\n              },\n            ]}\n            tooltip={{\n              formatter: seriesParams => {\n                // `seriesParams` can be an array or an object :/\n                const [series] = Array.isArray(seriesParams)\n                  ? seriesParams\n                  : [seriesParams];\n\n                const dateFormat = 'MMM D';\n                const startDate = moment(series.data[0]).format(dateFormat);\n                const endDate = moment(series.data[0]).add(7, 'days').format(dateFormat);\n                return [\n                  '<div class=\"tooltip-series\">',\n                  `<div><span class=\"tooltip-label\">${series.marker} <strong>${series.seriesName}</strong></span> ${series.data[1]}</div>`,\n                  `<div><span class=\"tooltip-label\"><strong>Last ${period} Average</strong></span> ${totalPeriodAverage}</div>`,\n                  '</div>',\n                  `<div class=\"tooltip-date\">${startDate} - ${endDate}</div>`,\n                  '<div class=\"tooltip-arrow\"></div>',\n                ].join('');\n              },\n            }}\n          />\n        </ChartWrapper>\n        <StyledPanelTable\n          isEmpty={projects.length === 0}\n          emptyMessage={t('No releases were setup for this team’s projects')}\n          emptyAction={\n            <Button\n              size=\"small\"\n              external\n              href=\"https://docs.sentry.io/product/releases/setup/\"\n            >\n              {t('Learn More')}\n            </Button>\n          }\n          headers={[\n            t('Releases Per Project'),\n            <RightAligned key=\"last\">\n              {tct('Last [period] Average', {period})}\n            </RightAligned>,\n            <RightAligned key=\"curr\">{t('Last 7 Days')}</RightAligned>,\n            <RightAligned key=\"diff\">{t('Difference')}</RightAligned>,\n          ]}\n        >\n          {groupedProjects.map(({project}) => (\n            <Fragment key={project.id}>\n              <ProjectBadgeContainer>\n                <ProjectBadge\n                  avatarSize={18}\n                  project={project}\n                  to={{\n                    pathname: `/organizations/${organization.slug}/releases/`,\n                    query: {project: project.id},\n                  }}\n                />\n              </ProjectBadgeContainer>\n\n              <ScoreWrapper>{this.renderReleaseCount(project.id, 'period')}</ScoreWrapper>\n              <ScoreWrapper>\n                <Link\n                  to={{\n                    pathname: `/organizations/${organization.slug}/releases/`,\n                    query: {project: project.id, statsPeriod: '7d'},\n                  }}\n                >\n                  {this.renderReleaseCount(project.id, 'week')}\n                </Link>\n              </ScoreWrapper>\n              <ScoreWrapper>{this.renderTrend(project.id)}</ScoreWrapper>\n            </Fragment>\n          ))}\n        </StyledPanelTable>\n      </div>\n    );\n  }\n}\n\nexport default withTheme(TeamReleases as ComponentType<Props>);\n\nconst ChartWrapper = styled('div')`\n  padding: ${space(2)} ${space(2)} 0 ${space(2)};\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{isEmpty: boolean}>`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.2fr;\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  font-size: ${p => p.theme.fontSizeMedium};\n  box-shadow: unset;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: Color}>`\n  color: ${p => p.theme[p.color]};\n`;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport isEqual from 'lodash/isEqual';\nimport round from 'lodash/round';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport MiniBarChart from 'sentry/components/charts/miniBarChart';\nimport SessionsRequest from 'sentry/components/charts/sessionsRequest';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  Organization,\n  Project,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n  SessionStatus,\n} from 'sentry/types';\nimport {formatFloat} from 'sentry/utils/formatters';\nimport {getCountSeries, getCrashFreeRate, getSeriesSum} from 'sentry/utils/sessions';\nimport {Color} from 'sentry/utils/theme';\nimport {displayCrashFreePercent} from 'sentry/views/releases/utils';\n\nimport {ProjectBadge, ProjectBadgeContainer} from './styles';\nimport {groupByTrend} from './utils';\n\ntype Props = AsyncComponent['props'] & {\n  organization: Organization;\n  projects: Project[];\n  period?: string | null;\n} & DateTimeObject;\n\ntype State = AsyncComponent['state'] & {\n  /** weekly selected date range */\n  periodSessions: SessionApiResponse | null;\n  /** Locked to last 7 days */\n  weekSessions: SessionApiResponse | null;\n};\n\nclass TeamStability extends AsyncComponent<Props, State> {\n  shouldRenderBadRequests = true;\n\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      weekSessions: null,\n      periodSessions: null,\n    };\n  }\n\n  getEndpoints() {\n    const {organization, start, end, period, utc, projects} = this.props;\n\n    const projectsWithSessions = projects.filter(project => project.hasSessions);\n\n    if (projectsWithSessions.length === 0) {\n      return [];\n    }\n\n    const datetime = {start, end, period, utc};\n    const commonQuery = {\n      environment: [],\n      project: projectsWithSessions.map(p => p.id),\n      field: 'sum(session)',\n      groupBy: ['session.status', 'project'],\n      interval: '1d',\n    };\n\n    const endpoints: ReturnType<AsyncComponent['getEndpoints']> = [\n      [\n        'periodSessions',\n        `/organizations/${organization.slug}/sessions/`,\n        {\n          query: {\n            ...commonQuery,\n            ...normalizeDateTimeParams(datetime),\n          },\n        },\n      ],\n      [\n        'weekSessions',\n        `/organizations/${organization.slug}/sessions/`,\n        {\n          query: {\n            ...commonQuery,\n            statsPeriod: '7d',\n          },\n        },\n      ],\n    ];\n\n    return endpoints;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {projects, start, end, period, utc} = this.props;\n\n    if (\n      prevProps.start !== start ||\n      prevProps.end !== end ||\n      prevProps.period !== period ||\n      prevProps.utc !== utc ||\n      !isEqual(prevProps.projects, projects)\n    ) {\n      this.remountComponent();\n    }\n  }\n\n  getScore(projectId: number, dataset: 'week' | 'period'): number | null {\n    const {periodSessions, weekSessions} = this.state;\n    const sessions = dataset === 'week' ? weekSessions : periodSessions;\n    const projectGroups = sessions?.groups.filter(\n      group => group.by.project === projectId\n    );\n\n    return getCrashFreeRate(projectGroups, SessionFieldWithOperation.SESSIONS);\n  }\n\n  getTrend(projectId: number): number | null {\n    const periodScore = this.getScore(projectId, 'period');\n    const weekScore = this.getScore(projectId, 'week');\n\n    if (periodScore === null || weekScore === null) {\n      return null;\n    }\n\n    return weekScore - periodScore;\n  }\n\n  getMiniBarChartSeries(project: Project, response: SessionApiResponse) {\n    const sumSessions = getSeriesSum(\n      response.groups.filter(group => group.by.project === Number(project.id)),\n      SessionFieldWithOperation.SESSIONS,\n      response.intervals\n    );\n\n    const countSeries = getCountSeries(\n      SessionFieldWithOperation.SESSIONS,\n      response.groups.find(\n        g =>\n          g.by.project === Number(project.id) &&\n          g.by['session.status'] === SessionStatus.HEALTHY\n      ),\n      response.intervals\n    );\n\n    const countSeriesWeeklyTotals: number[] = Array(sumSessions.length / 7).fill(0);\n    countSeries.forEach(\n      (s, idx) => (countSeriesWeeklyTotals[Math.floor(idx / 7)] += s.value)\n    );\n\n    const sumSessionsWeeklyTotals: number[] = Array(sumSessions.length / 7).fill(0);\n    sumSessions.forEach((s, idx) => (sumSessionsWeeklyTotals[Math.floor(idx / 7)] += s));\n\n    const data = countSeriesWeeklyTotals.map((value, idx) => ({\n      name: countSeries[idx * 7].name,\n      value: sumSessionsWeeklyTotals[idx]\n        ? formatFloat((value / sumSessionsWeeklyTotals[idx]) * 100, 2)\n        : 0,\n    }));\n\n    return [{seriesName: t('Crash Free Sessions'), data}];\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderScore(projectId: string, dataset: 'week' | 'period') {\n    const {loading} = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <Placeholder width=\"80px\" height=\"25px\" />\n        </div>\n      );\n    }\n\n    const score = this.getScore(Number(projectId), dataset);\n\n    if (score === null) {\n      return '\\u2014';\n    }\n\n    return displayCrashFreePercent(score);\n  }\n\n  renderTrend(projectId: string) {\n    const {loading} = this.state;\n\n    if (loading) {\n      return (\n        <div>\n          <Placeholder width=\"80px\" height=\"25px\" />\n        </div>\n      );\n    }\n\n    const trend = this.getTrend(Number(projectId));\n\n    if (trend === null) {\n      return '\\u2014';\n    }\n\n    return (\n      <SubText color={trend >= 0 ? 'green300' : 'red300'}>\n        {`${round(Math.abs(trend), 3)}\\u0025`}\n        <PaddedIconArrow direction={trend >= 0 ? 'up' : 'down'} size=\"xs\" />\n      </SubText>\n    );\n  }\n\n  renderBody() {\n    const {organization, projects, period} = this.props;\n\n    const sortedProjects = projects\n      .map(project => ({project, trend: this.getTrend(Number(project.id)) ?? 0}))\n      .sort((a, b) => Math.abs(b.trend) - Math.abs(a.trend));\n\n    const groupedProjects = groupByTrend(sortedProjects);\n\n    return (\n      <SessionsRequest\n        api={this.api}\n        project={projects.map(({id}) => Number(id))}\n        organization={organization}\n        interval=\"1d\"\n        groupBy={['session.status', 'project']}\n        field={[SessionFieldWithOperation.SESSIONS]}\n        statsPeriod={period}\n      >\n        {({response, loading}) => (\n          <StyledPanelTable\n            isEmpty={projects.length === 0}\n            emptyMessage={t('No projects with release health enabled')}\n            emptyAction={\n              <Button\n                size=\"small\"\n                external\n                href=\"https://docs.sentry.io/platforms/dotnet/guides/nlog/configuration/releases/#release-health\"\n              >\n                {t('Learn More')}\n              </Button>\n            }\n            headers={[\n              t('Project'),\n              <RightAligned key=\"last\">{tct('Last [period]', {period})}</RightAligned>,\n              <RightAligned key=\"avg\">{tct('[period] Avg', {period})}</RightAligned>,\n              <RightAligned key=\"curr\">{t('Last 7 Days')}</RightAligned>,\n              <RightAligned key=\"diff\">{t('Difference')}</RightAligned>,\n            ]}\n          >\n            {groupedProjects.map(({project}) => (\n              <Fragment key={project.id}>\n                <ProjectBadgeContainer>\n                  <ProjectBadge avatarSize={18} project={project} />\n                </ProjectBadgeContainer>\n\n                <div>\n                  {response && !loading && (\n                    <MiniBarChart\n                      isGroupedByDate\n                      showTimeInTooltip\n                      series={this.getMiniBarChartSeries(project, response)}\n                      height={25}\n                      tooltipFormatter={(value: number) => `${value.toLocaleString()}%`}\n                    />\n                  )}\n                </div>\n                <ScoreWrapper>{this.renderScore(project.id, 'period')}</ScoreWrapper>\n                <ScoreWrapper>{this.renderScore(project.id, 'week')}</ScoreWrapper>\n                <ScoreWrapper>{this.renderTrend(project.id)}</ScoreWrapper>\n              </Fragment>\n            ))}\n          </StyledPanelTable>\n        )}\n      </SessionsRequest>\n    );\n  }\n}\n\nexport default TeamStability;\n\nconst StyledPanelTable = styled(PanelTable)<{isEmpty: boolean}>`\n  grid-template-columns: 1fr 0.2fr 0.2fr 0.2fr 0.2fr;\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n  margin-bottom: 0;\n  border: 0;\n  box-shadow: unset;\n  /* overflow when bar chart tooltip gets cutoff for the top row */\n  overflow: visible;\n\n  & > div {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isEmpty &&\n    css`\n      & > div:last-child {\n        padding: 48px ${space(2)};\n      }\n    `}\n`;\n\nconst RightAligned = styled('span')`\n  text-align: right;\n`;\n\nconst ScoreWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  text-align: right;\n`;\n\nconst PaddedIconArrow = styled(IconArrow)`\n  margin: 0 ${space(0.5)};\n`;\n\nconst SubText = styled('div')<{color: Color}>`\n  color: ${p => p.theme[p.color]};\n`;\n","import {Fragment, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {TeamWithProjects} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Header from '../header';\n\nimport TeamStatsControls from './controls';\nimport DescriptionCard from './descriptionCard';\nimport TeamAlertsTriggered from './teamAlertsTriggered';\nimport TeamMisery from './teamMisery';\nimport TeamReleases from './teamReleases';\nimport TeamStability from './teamStability';\nimport {dataDatetime} from './utils';\n\ntype Props = RouteComponentProps<{orgId: string}, {}>;\n\nfunction TeamStatsHealth({location, router}: Props) {\n  const organization = useOrganization();\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  const query = location?.query ?? {};\n  const localStorageKey = `teamInsightsSelectedTeamId:${organization.slug}`;\n\n  let localTeamId: string | null | undefined =\n    query.team ?? localStorage.getItem(localStorageKey);\n  if (localTeamId && !teams.find(team => team.id === localTeamId)) {\n    localTeamId = null;\n  }\n  const currentTeamId = localTeamId ?? teams[0]?.id;\n  const currentTeam = teams.find(team => team.id === currentTeamId) as\n    | TeamWithProjects\n    | undefined;\n  const projects = currentTeam?.projects ?? [];\n\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('team_insights.viewed', {\n      organization,\n    });\n  }, []);\n\n  const {period, start, end, utc} = dataDatetime(query);\n\n  if (teams.length === 0) {\n    return (\n      <NoProjectMessage organization={organization} superuserNeedsToBeProjectMember />\n    );\n  }\n\n  return (\n    <Fragment>\n      <SentryDocumentTitle title={t('Project Health')} orgSlug={organization.slug} />\n      <Header organization={organization} activeTab=\"health\" />\n\n      <Body>\n        <TeamStatsControls\n          location={location}\n          router={router}\n          currentTeam={currentTeam}\n        />\n\n        {!initiallyLoaded && <LoadingIndicator />}\n        {initiallyLoaded && (\n          <Layout.Main fullWidth>\n            <DescriptionCard\n              title={t('Crash Free Sessions')}\n              description={t(\n                'The percentage of healthy, errored, and abnormal sessions that didn’t cause a crash.'\n              )}\n            >\n              <TeamStability\n                projects={projects}\n                organization={organization}\n                period={period}\n                start={start}\n                end={end}\n                utc={utc}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('User Misery')}\n              description={t(\n                'The number of unique users that experienced load times 4x the project’s configured threshold.'\n              )}\n            >\n              <TeamMisery\n                organization={organization}\n                projects={projects}\n                teamId={currentTeam!.id}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Metric Alerts Triggered')}\n              description={t('Alerts triggered from the Alert Rules your team created.')}\n            >\n              <TeamAlertsTriggered\n                organization={organization}\n                projects={projects}\n                teamSlug={currentTeam!.slug}\n                period={period}\n                start={start?.toString()}\n                end={end?.toString()}\n                location={location}\n              />\n            </DescriptionCard>\n\n            <DescriptionCard\n              title={t('Number of Releases')}\n              description={t('The releases that were created in your team’s projects.')}\n            >\n              <TeamReleases\n                projects={projects}\n                organization={organization}\n                teamSlug={currentTeam!.slug}\n                period={period}\n                start={start}\n                end={end}\n                utc={utc}\n              />\n            </DescriptionCard>\n          </Layout.Main>\n        )}\n      </Body>\n    </Fragment>\n  );\n}\n\nexport default TeamStatsHealth;\n\nconst Body = styled(Layout.Body)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    display: block;\n  }\n`;\n","import styled from '@emotion/styled';\nimport {LocationDescriptor, Query} from 'history';\n\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTraceDetailsUrl} from 'sentry/views/performance/traceDetails/utils';\n\nimport {DisplayModes} from './transactionOverview/charts';\n\nexport enum TransactionFilterOptions {\n  FASTEST = 'fastest',\n  SLOW = 'slow',\n  OUTLIER = 'outlier',\n  RECENT = 'recent',\n}\n\nexport function generateTransactionSummaryRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/`;\n}\n\n// normalizes search conditions by removing any redundant search conditions before presenting them in:\n// - query strings\n// - search UI\nexport function normalizeSearchConditions(query: string): MutableSearch {\n  const filterParams = normalizeSearchConditionsWithTransactionName(query);\n\n  // no need to include transaction as its already in the query params\n  filterParams.removeFilter('transaction');\n\n  return filterParams;\n}\n\n// normalizes search conditions by removing any redundant search conditions, but retains any transaction name\nexport function normalizeSearchConditionsWithTransactionName(\n  query: string\n): MutableSearch {\n  const filterParams = new MutableSearch(query);\n\n  // remove any event.type queries since it is implied to apply to only transactions\n  filterParams.removeFilter('event.type');\n\n  return filterParams;\n}\n\nexport function transactionSummaryRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n  unselectedSeries = 'p100()',\n  display,\n  trendFunction,\n  trendColumn,\n  showTransactions,\n  additionalQuery,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  additionalQuery?: Record<string, string>;\n  display?: DisplayModes;\n  projectID?: string | string[];\n  showTransactions?: TransactionFilterOptions;\n  trendColumn?: string;\n  trendFunction?: string;\n  unselectedSeries?: string | string[];\n}) {\n  const pathname = generateTransactionSummaryRoute({\n    orgSlug,\n  });\n\n  let searchFilter: typeof query.query;\n  if (typeof query.query === 'string') {\n    searchFilter = normalizeSearchConditions(query.query).formatString();\n  } else {\n    searchFilter = query.query;\n  }\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: searchFilter,\n      unselectedSeries,\n      showTransactions,\n      display,\n      trendFunction,\n      trendColumn,\n      ...additionalQuery,\n    },\n  };\n}\n\nexport function generateTraceLink(dateSelection) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const traceId = `${tableRow.trace}`;\n    if (!traceId) {\n      return {};\n    }\n\n    return getTraceDetailsUrl(organization, traceId, dateSelection, {});\n  };\n}\n\nexport function generateTransactionLink(transactionName: string) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    query: Query,\n    spanId?: string\n  ): LocationDescriptor => {\n    const eventSlug = generateEventSlug(tableRow);\n    return getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transactionName,\n      query,\n      spanId\n    );\n  };\n}\n\nexport const SidebarSpacer = styled('div')`\n  margin-top: ${space(3)};\n`;\n","var baseSum = require('./_baseSum');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/**\n * The base implementation of `_.mean` and `_.meanBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the mean.\n */\nfunction baseMean(array, iteratee) {\n  var length = array == null ? 0 : array.length;\n  return length ? (baseSum(array, iteratee) / length) : NAN;\n}\n\nmodule.exports = baseMean;\n","/**\n * The base implementation of `_.sum` and `_.sumBy` without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n */\nfunction baseSum(array, iteratee) {\n  var result,\n      index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var current = iteratee(array[index]);\n    if (current !== undefined) {\n      result = result === undefined ? current : (result + current);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseSum;\n","var baseMean = require('./_baseMean'),\n    identity = require('./identity');\n\n/**\n * Computes the mean of the values in `array`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the mean.\n * @example\n *\n * _.mean([4, 2, 8, 6]);\n * // => 5\n */\nfunction mean(array) {\n  return baseMean(array, identity);\n}\n\nmodule.exports = mean;\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nmodule.exports = negate;\n","var baseIteratee = require('./_baseIteratee'),\n    negate = require('./negate'),\n    pickBy = require('./pickBy');\n\n/**\n * The opposite of `_.pickBy`; this method creates an object composed of\n * the own and inherited enumerable string keyed properties of `object` that\n * `predicate` doesn't return truthy for. The predicate is invoked with two\n * arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omitBy(object, _.isNumber);\n * // => { 'b': '2' }\n */\nfunction omitBy(object, predicate) {\n  return pickBy(object, negate(baseIteratee(predicate)));\n}\n\nmodule.exports = omitBy;\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","endpoint","useEvents","afterFetch","data","_","fields","otherMeta","meta","undefined","route","withApi","QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","error","tableData","pageLinks","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","cursor","parseError","detail","responseJSON","t","async","api","beforeFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","noPagination","referrer","location","payload","getRequestPayload","getEventsAPIPayload","per_page","includes","queryUserModified","decodeScalar","query","userModified","user_modified","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","params","requestPromise","method","includeAllArgs","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","options","strict","Context","createContext","displayName","Provider","context","getTransactionDetailsUrl","eventSlug","transaction","spanId","locationQuery","defined","target","pathname","hash","spanTargetHash","TeamAlertsTriggered","AsyncComponent","getDefaultState","super","alertsTriggered","alertsTriggeredRules","getEndpoints","organization","start","end","period","utc","teamSlug","datetime","normalizeDateTimeParams","remountComponent","renderTrend","rule","weeklyAvg","totalThisWeek","diff","SubText","color","formatPercentage","Math","abs","PaddedIconArrow","direction","size","renderLoading","ChartWrapper","renderBody","projects","seriesData","sortSeriesByDay","convertDayValueObjectToSeries","Fragment","style","height","isGroupedByDate","useShortDate","legend","right","top","yAxis","minInterval","xAxis","barAxisLabel","length","series","seriesName","silent","barCategoryGap","StyledPanelTable","isEmpty","emptyMessage","emptyAction","ButtonsContainer","priority","to","external","headers","AlignRight","tct","map","project","find","p","AlertNameContainer","id","avatarSize","round","space","theme","border","PanelTable","fontSizeMedium","css","overflowEllipsis","IconArrow","TeamMisery","periodTableData","weekTableData","miseryRenderer","getFieldRenderer","sortedTableData","dataRow","weekRow","row","trend","filter","x","sort","a","b","groupedData","groupByTrend","items","isExpanded","showMoreButton","href","FlexCenter","StyledIconStar","isSolid","RightAligned","idx","projectId","periodMisery","weekMisery","trendValue","COLLAPSE_COUNT","KeyTransactionTitleWrapper","TransactionWrapper","transactionSummaryRouteWithQuery","projectID","ScoreWrapper","TrendText","TeamMiseryWrapper","teamId","commonEventView","version","orderby","teams","Number","periodEventView","EventView","range","weekEventView","isWeekLoading","weekError","IconStar","subText","TeamReleases","weekReleases","periodReleases","statsPeriod","isEqual","getReleaseCount","dataset","releasesPeriod","last_week_totals","project_avgs","ceil","getTrend","periodCount","weekCount","renderReleaseCount","loading","width","count","sortedProjects","groupedProjects","entries","release_counts","bucket","value","Date","getTime","averageValues","values","projectAvgSum","reduce","total","currentData","totalPeriodAverage","markLine","MarkLine","lineStyle","gray200","type","label","show","tooltip","formatter","seriesParams","Array","isArray","dateFormat","startDate","moment","format","endDate","add","marker","join","withTheme","TeamStability","weekSessions","periodSessions","projectsWithSessions","hasSessions","commonQuery","environment","field","groupBy","interval","getScore","sessions","projectGroups","groups","group","by","getCrashFreeRate","SessionFieldWithOperation","periodScore","weekScore","getMiniBarChartSeries","response","sumSessions","getSeriesSum","intervals","countSeries","getCountSeries","g","SessionStatus","countSeriesWeeklyTotals","fill","forEach","s","floor","sumSessionsWeeklyTotals","formatFloat","renderScore","score","displayCrashFreePercent","showTimeInTooltip","tooltipFormatter","toLocaleString","TeamStatsHealth","router","useOrganization","initiallyLoaded","useTeams","provideUserTeams","localStorageKey","localTeamId","team","localStorage","currentTeamId","currentTeam","useEffect","trackAdvancedAnalyticsEvent","dataDatetime","superuserNeedsToBeProjectMember","title","activeTab","Body","fullWidth","description","toString","Layout","breakpoints","medium","TransactionFilterOptions","normalizeSearchConditions","filterParams","normalizeSearchConditionsWithTransactionName","removeFilter","MutableSearch","unselectedSeries","display","trendFunction","trendColumn","showTransactions","additionalQuery","generateTransactionSummaryRoute","searchFilter","formatString","generateTraceLink","dateSelection","tableRow","_query","traceId","trace","getTraceDetailsUrl","generateTransactionLink","generateEventSlug","SidebarSpacer","baseSum","module","exports","array","iteratee","result","index","current","baseMean","identity","predicate","TypeError","args","arguments","call","apply","baseIteratee","negate","pickBy","object"],"sourceRoot":""}