{"version":3,"file":"chunks/app_views_performance_content_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/dropdownControl.tsx","webpack:///./app/components/searchBar.tsx","webpack:///./app/utils/usePrevious.tsx","webpack:///./app/components/performance/searchBar.tsx","webpack:///./app/utils/performance/contexts/genericQueryBatcher.tsx","webpack:///./app/utils/performance/contexts/pageError.tsx","webpack:///./app/utils/performance/contexts/performanceDisplayContext.tsx","webpack:///./app/views/performance/table.tsx","webpack:///./app/components/performance/layouts/index.tsx","webpack:///./app/views/performance/landing/chart/histogramChart.tsx","webpack:///./app/views/performance/landing/widgets/transforms/transformHistogramQuery.tsx","webpack:///./app/views/performance/landing/widgets/widgets/histogramWidget.tsx","webpack:///./app/views/performance/charts/chart.tsx","webpack:///./app/views/performance/landing/widgets/transforms/transformDiscoverToList.tsx","webpack:///./app/views/performance/landing/widgets/transforms/transformEventsToArea.tsx","webpack:///./app/views/performance/landing/widgets/widgets/lineChartListWidget.tsx","webpack:///./app/views/performance/landing/widgets/widgets/singleFieldAreaWidget.tsx","webpack:///./app/views/performance/landing/widgets/transforms/transformTrendsDiscover.tsx","webpack:///./app/views/performance/landing/widgets/widgets/trendsWidget.tsx","webpack:///./app/views/performance/landing/widgets/transforms/transformEventsToVitals.tsx","webpack:///./app/views/performance/landing/widgets/widgets/vitalWidget.tsx","webpack:///./app/views/performance/landing/widgets/components/widgetContainer.tsx","webpack:///./app/views/performance/landing/widgets/components/widgetChartRow.tsx","webpack:///./app/views/performance/landing/views/allTransactionsView.tsx","webpack:///./app/views/performance/landing/data.tsx","webpack:///./app/views/performance/landing/views/backendView.tsx","webpack:///./app/views/performance/landing/views/frontendOtherView.tsx","webpack:///./app/views/performance/landing/views/frontendPageloadView.tsx","webpack:///./app/views/performance/landing/views/mobileView.tsx","webpack:///./app/views/performance/landing/samplingModal.tsx","webpack:///./app/views/performance/landing/index.tsx","webpack:///./app/views/performance/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/metricEvents/metricsEventsDropdown.tsx","webpack:///./app/views/performance/transactionSummary/transactionThresholdModal.tsx","webpack:///./app/views/performance/vitalDetail/vitalChart.tsx","webpack:///../node_modules/lodash/_baseLt.js","webpack:///../node_modules/lodash/min.js"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownMenu, {\n  GetActorPropsFn,\n  GetMenuPropsFn,\n} from 'sentry/components/dropdownMenu';\nimport MenuItem from 'sentry/components/menuItem';\nimport Tooltip from 'sentry/components/tooltip';\n\ntype ButtonPriority = React.ComponentProps<typeof DropdownButton>['priority'];\n\ntype DefaultProps = {\n  /**\n   * Should the menu contents always be rendered?  Defaults to true.\n   * Set to false to have menu contents removed from the DOM on close.\n   */\n  alwaysRenderMenu: boolean;\n  /**\n   * Width of the menu. Defaults to 100% of the button width.\n   */\n  menuWidth: string;\n};\n\ntype ChildrenArgs = {\n  getMenuProps: GetMenuPropsFn;\n  isOpen: boolean;\n};\n\ntype ButtonArgs = {\n  getActorProps: GetActorPropsFn;\n  isOpen: boolean;\n};\n\ntype Props = DefaultProps & {\n  children:\n    | ((args: ChildrenArgs) => React.ReactElement)\n    | React.ReactElement\n    | Array<React.ReactElement>;\n  /**\n   * Align the dropdown menu to the right. (Default aligns to left)\n   */\n  alignRight?: boolean;\n  /**\n   * This makes the dropdown menu blend (e.g. corners are not rounded) with its\n   * actor (opener) component\n   */\n  blendWithActor?: boolean;\n  /**\n   * A closure that returns a styled button. Function will get {isOpen, getActorProps}\n   * as arguments. Use this if you need to style/replace the dropdown button.\n   */\n  button?: (args: ButtonArgs) => React.ReactNode;\n  /**\n   * Props to pass to DropdownButton\n   */\n  buttonProps?: React.ComponentProps<typeof DropdownButton>;\n  /**\n   * Tooltip to show on button when dropdown isn't open\n   */\n  buttonTooltipTitle?: string | null;\n  className?: string;\n  detached?: boolean;\n  fullWidth?: boolean;\n\n  /**\n   * String or element for the button contents.\n   */\n  label?: NonNullable<React.ReactNode>;\n\n  priority?: ButtonPriority;\n};\n\n/*\n * A higher level dropdown component that helps with building complete dropdowns\n * including the button + menu options. Use the `button` or `label` prop to set\n * the button content and `children` to provide menu options.\n */\nclass DropdownControl extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    alwaysRenderMenu: true,\n    menuWidth: '100%',\n  };\n\n  renderButton(isOpen: boolean, getActorProps: GetActorPropsFn) {\n    const {\n      label,\n      button,\n      buttonProps,\n      buttonTooltipTitle,\n      priority,\n      detached,\n      fullWidth,\n    } = this.props;\n\n    if (button) {\n      return button({isOpen, getActorProps});\n    }\n\n    if (buttonTooltipTitle && !isOpen) {\n      return (\n        <Tooltip skipWrapper position=\"top\" title={buttonTooltipTitle}>\n          <StyledDropdownButton\n            priority={priority}\n            {...getActorProps(buttonProps)}\n            isOpen={isOpen}\n            data-test-id=\"dropdown-control-button\"\n            detached={detached}\n            hideBottomBorder={!detached}\n            rightAlignChevron={fullWidth ?? false}\n          >\n            {label}\n          </StyledDropdownButton>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <StyledDropdownButton\n        priority={priority}\n        {...getActorProps(buttonProps)}\n        isOpen={isOpen}\n        data-test-id=\"dropdown-control-button\"\n        detached={detached}\n        hideBottomBorder={!detached}\n        rightAlignChevron={fullWidth ?? false}\n      >\n        {label}\n      </StyledDropdownButton>\n    );\n  }\n\n  renderChildren(isOpen: boolean, getMenuProps: GetMenuPropsFn) {\n    const {children, alignRight, menuWidth, blendWithActor, priority, detached} =\n      this.props;\n\n    if (typeof children === 'function') {\n      return children({isOpen, getMenuProps});\n    }\n\n    const alignMenu = alignRight ? 'right' : 'left';\n\n    return (\n      <Content\n        {...getMenuProps()}\n        priority={priority}\n        alignMenu={alignMenu}\n        width={menuWidth}\n        isOpen={isOpen}\n        blendWithActor={blendWithActor}\n        detached={detached}\n        blendCorner\n        data-test-id=\"dropdown-control\"\n      >\n        {children}\n      </Content>\n    );\n  }\n\n  render() {\n    const {alwaysRenderMenu, className, fullWidth} = this.props;\n\n    return (\n      <Container className={className} fullWidth={fullWidth ?? false}>\n        <DropdownMenu alwaysRenderMenu={alwaysRenderMenu}>\n          {({isOpen, getMenuProps, getActorProps}) => (\n            <Fragment>\n              {this.renderButton(isOpen, getActorProps)}\n              {this.renderChildren(isOpen, getMenuProps)}\n            </Fragment>\n          )}\n        </DropdownMenu>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')<{fullWidth: boolean}>`\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: ${p => p.fullWidth && '100%'};\n  }\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};\n  white-space: nowrap;\n`;\n\nconst Content = styled(DropdownBubble)<{isOpen: boolean; priority?: ButtonPriority}>`\n  display: ${p => (p.isOpen ? 'block' : 'none')};\n  border-color: ${p => p.theme.button[p.priority || 'form'].border};\n`;\n\nconst DropdownItem = styled(MenuItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default DropdownControl;\nexport {DropdownItem, Content};\n","import {createRef, PureComponent} from 'react';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\n\nimport Button from 'sentry/components/button';\nimport Input, {InputProps} from 'sentry/components/forms/controls/input';\nimport {IconSearch} from 'sentry/icons';\nimport {IconClose} from 'sentry/icons/iconClose';\nimport {t} from 'sentry/locale';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\n\ninterface SearchBarProps extends Omit<InputProps, 'onChange'> {\n  defaultQuery: string;\n  onSearch: (query: string) => void;\n  query: string;\n  onChange?: (query: string) => void;\n  width?: string;\n}\n\ntype State = {\n  dropdownVisible: boolean;\n  query: string;\n};\n\nclass SearchBar extends PureComponent<SearchBarProps, State> {\n  static defaultProps: Pick<SearchBarProps, 'query' | 'defaultQuery' | 'onSearch'> = {\n    query: '',\n    defaultQuery: '',\n    onSearch: function () {},\n  };\n\n  state: State = {\n    query: this.props.query || this.props.defaultQuery,\n    dropdownVisible: false,\n  };\n\n  UNSAFE_componentWillReceiveProps(nextProps: SearchBarProps) {\n    if (nextProps.query !== this.props.query) {\n      this.setState({\n        query: nextProps.query,\n      });\n    }\n  }\n\n  searchInputRef = createRef<HTMLInputElement>();\n\n  blur = () => {\n    if (this.searchInputRef.current) {\n      this.searchInputRef.current.blur();\n    }\n  };\n\n  onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    this.blur();\n    this.props.onSearch(this.state.query);\n  };\n\n  clearSearch = () => {\n    this.setState({query: this.props.defaultQuery}, () => {\n      this.props.onSearch(this.state.query);\n      callIfFunction(this.props.onChange, this.state.query);\n    });\n  };\n\n  onQueryFocus = () => {\n    this.setState({\n      dropdownVisible: true,\n    });\n  };\n\n  onQueryBlur = () => {\n    this.setState({dropdownVisible: false});\n  };\n\n  onQueryChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const {value} = evt.target;\n\n    this.setState({query: value});\n    callIfFunction(this.props.onChange, value);\n  };\n\n  render() {\n    // Remove keys that should not be passed into Input\n    const {\n      className,\n      width,\n      query: _q,\n      defaultQuery,\n      onChange: _oC,\n      onSearch: _oS,\n      ...inputProps\n    } = this.props;\n\n    return (\n      <div className={classNames('search', className)}>\n        <form className=\"form-horizontal\" onSubmit={this.onSubmit}>\n          <div>\n            <StyledInput\n              {...inputProps}\n              type=\"text\"\n              className=\"search-input\"\n              name=\"query\"\n              ref={this.searchInputRef}\n              autoComplete=\"off\"\n              value={this.state.query}\n              onBlur={this.onQueryBlur}\n              onChange={this.onQueryChange}\n              width={width}\n            />\n            <StyledIconSearch className=\"search-input-icon\" size=\"sm\" color=\"gray300\" />\n            {this.state.query !== defaultQuery && (\n              <SearchClearButton\n                type=\"button\"\n                className=\"search-clear-form\"\n                priority=\"link\"\n                onClick={this.clearSearch}\n                size=\"xsmall\"\n                icon={<IconClose />}\n                aria-label={t('Clear')}\n              />\n            )}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst StyledInput = styled(Input)`\n  width: ${p => (p.width ? p.width : undefined)};\n\n  &.focus-visible {\n    box-shadow: 0 0 0 1px ${p => p.theme.focusBorder};\n    border-color: ${p => p.theme.focusBorder};\n    outline: none;\n  }\n`;\n\nconst StyledIconSearch = styled(IconSearch)`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  left: 14px;\n`;\n\nconst SearchClearButton = styled(Button)`\n  position: absolute;\n  top: 50%;\n  height: 16px;\n  transform: translateY(-50%);\n  right: 10px;\n  font-size: ${p => p.theme.fontSizeLarge};\n  color: ${p => p.theme.gray200};\n\n  &:hover {\n    color: ${p => p.theme.gray300};\n  }\n`;\n\nexport default SearchBar;\n","import {useEffect, useRef} from 'react';\n\n/**\n * Provides previous prop or state inside of function components.\n * It’s possible that in the future React will provide a usePrevious Hook out of the box since it’s a relatively common use case.\n * @see {@link https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state}\n *\n * @returns 'ref.current' and therefore should not be used as a dependency of useEffect.\n * Mutable values like 'ref.current' are not valid dependencies of useEffect because changing them does not re-render the component.\n */\nfunction usePrevious<T>(value: T): T {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef<T>(value);\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport default usePrevious;\n","import {useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport debounce from 'lodash/debounce';\n\nimport BaseSearchBar from 'sentry/components/searchBar';\nimport {DEFAULT_DEBOUNCE_DURATION} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport SearchDropdown from '../smartSearchBar/searchDropdown';\nimport {ItemType, SearchGroup} from '../smartSearchBar/types';\n\ntype SearchBarProps = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {organization, eventView} = props;\n  const [searchResults, setSearchResults] = useState<SearchGroup[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const api = useApi();\n\n  const prepareQuery = (query: string) => {\n    const prependedChar = query[0] === '*' ? '' : '*';\n    const appendedhar = query[query.length - 1] === '*' ? '' : '*';\n    return `${prependedChar}${query}${appendedhar}`;\n  };\n\n  const handleSearch = debounce(\n    async query => {\n      if (query.length < 3) {\n        setSearchResults([]);\n        return;\n      }\n\n      const projectIdStrings = (eventView.project as Readonly<number>[])?.map(String);\n      try {\n        setLoading(true);\n        const conditions = new MutableSearch('');\n        conditions.addFilterValues('transaction', [prepareQuery(query)], false);\n        conditions.addFilterValues('event.type', ['transaction']);\n\n        // clear any active requests\n        if (Object.keys(api.activeRequests).length) {\n          api.clear();\n        }\n\n        const useEvents = organization.features.includes(\n          'performance-frontend-use-events-endpoint'\n        );\n        const url = useEvents\n          ? `/organizations/${organization.slug}/events/`\n          : `/organizations/${organization.slug}/eventsv2/`;\n\n        const [results] = await doDiscoverQuery<{\n          data: Array<{'count()': number; project_id: number; transaction: string}>;\n        }>(api, url, {\n          field: ['transaction', 'project_id', 'count()'],\n          project: projectIdStrings,\n          sort: '-transaction',\n          query: conditions.formatString(),\n          statsPeriod: eventView.statsPeriod,\n        });\n\n        const parsedResults = results.data.reduce(\n          (searchGroup: SearchGroup, item) => {\n            searchGroup.children.push({\n              value: `${item.transaction}:${item.project_id}`,\n              title: item.transaction,\n              type: ItemType.DEFAULT,\n              desc: '',\n            });\n            return searchGroup;\n          },\n          {title: '', children: [], icon: null, type: ItemType.DEFAULT}\n        );\n\n        setSearchResults([parsedResults]);\n      } catch (_) {\n        throw new Error('Unable to fetch event field values');\n      } finally {\n        setLoading(false);\n      }\n    },\n    DEFAULT_DEBOUNCE_DURATION,\n    {leading: true}\n  );\n\n  const navigateToTransactionSummary = (name: string) => {\n    const lastIndex = name.lastIndexOf(':');\n    const transactionName = name.slice(0, lastIndex);\n    const projectId = name.slice(lastIndex + 1);\n    const query = eventView.generateQueryStringObject();\n\n    const next = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: String(transactionName),\n      projectID: projectId,\n      query,\n    });\n    browserHistory.push(next);\n  };\n\n  return (\n    <Container data-test-id=\"transaction-search-bar\">\n      <BaseSearchBar placeholder={t('Search Transactions')} onChange={handleSearch} />\n      <SearchDropdown\n        css={{\n          display: searchResults[0]?.children.length ? 'block' : 'none',\n          maxHeight: '300px',\n          overflowY: 'auto',\n        }}\n        loading={loading}\n        items={searchResults}\n        onClick={navigateToTransactionSummary}\n      />\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  position: relative;\n`;\n\nexport default SearchBar;\n","import {createContext, Fragment, Ref, useEffect, useRef} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\ntype QueryObject = {\n  query: {\n    [k: string]: any;\n  };\n}; // TODO(k-fish): Fix to ensure exact types for all requests. Simplified type for now, need to pull this in from events file.\n\ntype BatchQueryDefinition = {\n  api: Client;\n  batchProperty: string;\n\n  path: string;\n  reject: (reason?: string) => void;\n  requestQueryObject: QueryObject;\n  // Intermediate promise functions\n  resolve: (value: any) => void;\n};\n\ntype QueryBatch = {\n  addQuery: (q: BatchQueryDefinition, id: symbol) => void;\n};\n\nconst [GenericQueryBatcherProvider, _useGenericQueryBatcher] =\n  createDefinedContext<QueryBatch>({\n    name: 'GenericQueryBatcherContext',\n  });\n\nfunction mergeKey(query: BatchQueryDefinition) {\n  return `${query.batchProperty}.${query.path}`;\n}\n\ntype MergeMap = Record<string, BatchQueryDefinition[]>;\n\n// Builds a map that will contain an array of query definitions by mergeable key (using batch property and path)\nfunction queriesToMap(collectedQueries: Record<symbol, BatchQueryDefinition>) {\n  const keys = Reflect.ownKeys(collectedQueries);\n  if (!keys.length) {\n    return false;\n  }\n  const mergeMap: MergeMap = {};\n\n  keys.forEach(key => {\n    const query = collectedQueries[key];\n    mergeMap[mergeKey(query)] = mergeMap[mergeKey(query)] || [];\n    mergeMap[mergeKey(query)].push(query);\n    delete collectedQueries[key];\n  });\n\n  return mergeMap;\n}\n\nfunction requestFunction(api: Client, path: string, queryObject: QueryObject) {\n  return api.requestPromise(path, queryObject);\n}\n\nfunction _handleUnmergeableQuery(queryDefinition: BatchQueryDefinition) {\n  const result = requestFunction(\n    queryDefinition.api,\n    queryDefinition.path,\n    queryDefinition.requestQueryObject\n  );\n  queryDefinition.resolve(result);\n}\n\nfunction _handleUnmergeableQueries(mergeMap: MergeMap) {\n  let queriesSent = 0;\n  Object.keys(mergeMap).forEach(k => {\n    // Using async forEach to ensure calls start in parallel.\n    const mergeList = mergeMap[k];\n\n    if (mergeList.length === 1) {\n      const [queryDefinition] = mergeList;\n      queriesSent++;\n      _handleUnmergeableQuery(queryDefinition);\n    }\n  });\n\n  return queriesSent;\n}\n\nfunction _handleMergeableQueries(mergeMap: MergeMap) {\n  let queriesSent = 0;\n  Object.keys(mergeMap).forEach(async k => {\n    const mergeList = mergeMap[k];\n\n    if (mergeList.length <= 1) {\n      return;\n    }\n\n    const [exampleDefinition] = mergeList;\n    const batchProperty = exampleDefinition.batchProperty;\n    const query = {...exampleDefinition.requestQueryObject.query};\n    const requestQueryObject = {...exampleDefinition.requestQueryObject, query};\n\n    const batchValues: string[] = [];\n\n    mergeList.forEach(q => {\n      const batchFieldValue = q.requestQueryObject.query[batchProperty];\n      if (Array.isArray(batchFieldValue)) {\n        if (batchFieldValue.length > 1) {\n          // Omit multiple requests with multi fields (eg. yAxis) for now and run them as single queries\n          queriesSent++;\n          _handleUnmergeableQuery(q);\n          return;\n        }\n        // Unwrap array value if it is a single value\n        batchValues.push(batchFieldValue[0]);\n      } else {\n        batchValues.push(batchFieldValue);\n      }\n    });\n\n    requestQueryObject.query[batchProperty] = batchValues;\n\n    queriesSent++;\n    const requestPromise = requestFunction(\n      exampleDefinition.api,\n      exampleDefinition.path,\n      requestQueryObject\n    );\n\n    try {\n      const result = await requestPromise;\n      // Unmerge back into individual results\n      mergeList.forEach(queryDefinition => {\n        const propertyName = Array.isArray(\n          queryDefinition.requestQueryObject.query[queryDefinition.batchProperty]\n        )\n          ? queryDefinition.requestQueryObject.query[queryDefinition.batchProperty][0]\n          : queryDefinition.requestQueryObject.query[queryDefinition.batchProperty];\n\n        const singleResult = result[propertyName];\n        queryDefinition.resolve(singleResult);\n      });\n    } catch (e) {\n      // On error fail all requests relying on this merged query (for now)\n      mergeList.forEach(q => q.reject(e));\n    }\n  });\n  return queriesSent;\n}\n\nfunction handleBatching(\n  organization: Organization,\n  queries: Record<symbol, BatchQueryDefinition>\n) {\n  const mergeMap = queriesToMap(queries);\n\n  if (!mergeMap) {\n    return;\n  }\n\n  let queriesSent = 0;\n  queriesSent += _handleUnmergeableQueries(mergeMap);\n  queriesSent += _handleMergeableQueries(mergeMap);\n\n  const queriesCollected = Object.values(mergeMap).reduce(\n    (acc, mergeList) => acc + mergeList.length,\n    0\n  );\n\n  const queriesSaved = queriesCollected - queriesSent;\n\n  trackAdvancedAnalyticsEvent('performance_views.landingv3.batch_queries', {\n    organization,\n    num_collected: queriesCollected,\n    num_saved: queriesSaved,\n    num_sent: queriesSent,\n  });\n}\n\nexport const GenericQueryBatcher = ({children}: {children: React.ReactNode}) => {\n  const queries = useRef<Record<symbol, BatchQueryDefinition>>({});\n\n  const timeoutRef = useRef<number | undefined>(undefined);\n  const organization = useOrganization();\n\n  const addQuery = (q: BatchQueryDefinition, id: symbol) => {\n    queries.current[id] = q;\n\n    window.clearTimeout(timeoutRef.current);\n    // Put batch function in the next macro task to aggregate all requests in this frame.\n    timeoutRef.current = window.setTimeout(() => {\n      handleBatching(organization, queries.current);\n      timeoutRef.current = undefined;\n    }, 0);\n  };\n\n  // Cleanup timeout after component unmounts.\n  useEffect(\n    () => () => {\n      timeoutRef.current && window.clearTimeout(timeoutRef.current);\n    },\n    []\n  );\n\n  return (\n    <GenericQueryBatcherProvider\n      value={{\n        addQuery,\n      }}\n    >\n      {children}\n    </GenericQueryBatcherProvider>\n  );\n};\n\ntype NodeContext = {\n  batchProperty: string;\n  id: Ref<Symbol>;\n};\n\nconst BatchNodeContext = createContext<NodeContext | undefined>(undefined);\n\nexport type QueryBatching = {\n  batchRequest: (_: Client, path: string, query: QueryObject) => Promise<any>;\n};\n\n// Wraps api request components to collect at most one request per frame / render pass using symbol as a unique id.\n// Transforms these requests into an intermediate promise and adds a query definition that the batch function will use.\nexport function QueryBatchNode(props: {\n  batchProperty: string;\n  children(_: any): React.ReactNode;\n}) {\n  const api = useApi();\n  const {batchProperty, children} = props;\n  const id = useRef(Symbol());\n\n  let batchContext: QueryBatch;\n  try {\n    batchContext = _useGenericQueryBatcher();\n  } catch (_) {\n    return <Fragment>{children({})}</Fragment>;\n  }\n\n  function batchRequest(\n    _: Client,\n    path: string,\n    requestQueryObject: QueryObject\n  ): Promise<any> {\n    const queryPromise = new Promise((resolve, reject) => {\n      const queryDefinition: BatchQueryDefinition = {\n        resolve,\n        reject,\n        batchProperty,\n        path,\n        requestQueryObject,\n        api,\n      };\n      batchContext?.addQuery(queryDefinition, id.current);\n    });\n    return queryPromise;\n  }\n\n  const queryBatching: QueryBatching = {\n    batchRequest,\n  };\n\n  return (\n    <BatchNodeContext.Provider\n      value={{\n        id,\n        batchProperty,\n      }}\n    >\n      {children({queryBatching})}\n    </BatchNodeContext.Provider>\n  );\n}\n","import {createContext, useContext, useState} from 'react';\n\nimport Alert from 'sentry/components/alert';\n\nconst pageErrorContext = createContext<{\n  setPageError: (error: string | undefined) => void;\n  pageError?: string;\n}>({\n  pageError: undefined,\n  setPageError: (_: string | undefined) => {},\n});\n\nexport const PageErrorProvider = ({children}: {children: React.ReactNode}) => {\n  const [pageError, setPageError] = useState<string | undefined>();\n  return (\n    <pageErrorContext.Provider\n      value={{\n        pageError,\n        setPageError,\n      }}\n    >\n      {children}\n    </pageErrorContext.Provider>\n  );\n};\n\nexport const PageErrorAlert = () => {\n  const {pageError} = useContext(pageErrorContext);\n  if (!pageError) {\n    return null;\n  }\n\n  return (\n    <Alert type=\"error\" data-test-id=\"page-error-alert\" showIcon>\n      {pageError}\n    </Alert>\n  );\n};\n\nexport const usePageError = () => useContext(pageErrorContext);\n","import {PROJECT_PERFORMANCE_TYPE} from 'sentry/views/performance/utils';\n\nimport {createDefinedContext} from './utils';\n\ntype useCurrentPerformanceView = {\n  performanceType: PROJECT_PERFORMANCE_TYPE;\n};\n\nconst [PerformanceDisplayProvider, _usePerformanceDisplayType] =\n  createDefinedContext<useCurrentPerformanceView>({\n    name: 'CurrentPerformanceViewContext',\n  });\n\nexport {PerformanceDisplayProvider};\n\nexport function usePerformanceDisplayType(): PROJECT_PERFORMANCE_TYPE {\n  return _usePerformanceDisplayType().performanceType;\n}\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location, LocationDescriptorObject} from 'history';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumn,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconStar} from 'sentry/icons';\nimport {tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport DiscoverQuery, {\n  TableData,\n  TableDataRow,\n} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {EventData, isFieldSortable} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {fieldAlignment, getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {MEPConsumer} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport CellAction, {Actions, updateQuery} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\n\nimport {getMEPQueryParams} from './landing/widgets/utils';\nimport TransactionThresholdModal, {\n  modalCss,\n  TransactionThresholdMetric,\n} from './transactionSummary/transactionThresholdModal';\nimport {\n  normalizeSearchConditionsWithTransactionName,\n  transactionSummaryRouteWithQuery,\n} from './transactionSummary/utils';\nimport {COLUMN_TITLES} from './data';\n\nexport function getProjectID(\n  eventData: EventData,\n  projects: Project[]\n): string | undefined {\n  const projectSlug = (eventData?.project as string) || undefined;\n\n  if (typeof projectSlug === undefined) {\n    return undefined;\n  }\n\n  const project = projects.find(currentProject => currentProject.slug === projectSlug);\n\n  if (!project) {\n    return undefined;\n  }\n\n  return project.id;\n}\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  setError: (msg: string | undefined) => void;\n  withStaticFilters: boolean;\n  columnTitles?: string[];\n  summaryConditions?: string;\n};\n\ntype State = {\n  transaction: string | undefined;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  widths: number[];\n};\nclass _Table extends Component<Props, State> {\n  state: State = {\n    widths: [],\n    transaction: undefined,\n    transactionThreshold: undefined,\n    transactionThresholdMetric: undefined,\n  };\n\n  handleCellAction = (column: TableColumn<keyof TableDataRow>, dataRow: TableDataRow) => {\n    return (action: Actions, value: React.ReactText) => {\n      const {eventView, location, organization, projects} = this.props;\n\n      trackAdvancedAnalyticsEvent('performance_views.overview.cellaction', {\n        organization,\n        action,\n      });\n\n      if (action === Actions.EDIT_THRESHOLD) {\n        const project_threshold = dataRow.project_threshold_config;\n        const transactionName = dataRow.transaction as string;\n        const projectID = getProjectID(dataRow, projects);\n\n        openModal(\n          modalProps => (\n            <TransactionThresholdModal\n              {...modalProps}\n              organization={organization}\n              transactionName={transactionName}\n              eventView={eventView}\n              project={projectID}\n              transactionThreshold={project_threshold[1]}\n              transactionThresholdMetric={project_threshold[0]}\n              onApply={(threshold, metric) => {\n                if (\n                  threshold !== project_threshold[1] ||\n                  metric !== project_threshold[0]\n                ) {\n                  this.setState({\n                    transaction: transactionName,\n                    transactionThreshold: threshold,\n                    transactionThresholdMetric: metric,\n                  });\n                }\n                addSuccessMessage(\n                  tct('[transactionName] updated successfully', {\n                    transactionName,\n                  })\n                );\n              }}\n            />\n          ),\n          {modalCss, backdrop: 'static'}\n        );\n        return;\n      }\n\n      const searchConditions = normalizeSearchConditionsWithTransactionName(\n        eventView.query\n      );\n\n      updateQuery(searchConditions, action, column, value);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  };\n\n  renderBodyCell(\n    tableData: TableData | null,\n    column: TableColumn<keyof TableDataRow>,\n    dataRow: TableDataRow\n  ): React.ReactNode {\n    const {eventView, organization, projects, location, withStaticFilters} = this.props;\n    const isAlias = !organization.features.includes(\n      'performance-frontend-use-events-endpoint'\n    );\n\n    if (!tableData || !tableData.meta) {\n      return dataRow[column.key];\n    }\n    const tableMeta = tableData.meta;\n\n    const field = String(column.key);\n    const fieldRenderer = getFieldRenderer(field, tableMeta, isAlias);\n    const rendered = fieldRenderer(dataRow, {organization, location});\n\n    const allowActions = [\n      Actions.ADD,\n      Actions.EXCLUDE,\n      Actions.SHOW_GREATER_THAN,\n      Actions.SHOW_LESS_THAN,\n      Actions.EDIT_THRESHOLD,\n    ];\n\n    const cellActions = withStaticFilters ? [] : allowActions;\n\n    if (field === 'transaction') {\n      const projectID = getProjectID(dataRow, projects);\n      const summaryView = eventView.clone();\n      if (dataRow['http.method']) {\n        summaryView.additionalConditions.setFilterValues('http.method', [\n          dataRow['http.method'] as string,\n        ]);\n      }\n      summaryView.query = summaryView.getQueryWithAdditionalConditions();\n      const target = transactionSummaryRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: String(dataRow.transaction) || '',\n        query: summaryView.generateQueryStringObject(),\n        projectID,\n      });\n\n      return (\n        <CellAction\n          column={column}\n          dataRow={dataRow}\n          handleCellAction={this.handleCellAction(column, dataRow)}\n          allowActions={cellActions}\n        >\n          <Link\n            to={target}\n            onClick={this.handleSummaryClick}\n            style={{display: `block`, width: `100%`}}\n          >\n            {rendered}\n          </Link>\n        </CellAction>\n      );\n    }\n\n    if (field.startsWith('team_key_transaction')) {\n      // don't display per cell actions for team_key_transaction\n      return rendered;\n    }\n\n    const fieldName = getAggregateAlias(field);\n    const value = dataRow[fieldName];\n    if (tableMeta[fieldName] === 'integer' && defined(value) && value > 999) {\n      return (\n        <Tooltip\n          title={value.toLocaleString()}\n          containerDisplayMode=\"block\"\n          position=\"right\"\n        >\n          <CellAction\n            column={column}\n            dataRow={dataRow}\n            handleCellAction={this.handleCellAction(column, dataRow)}\n            allowActions={cellActions}\n          >\n            {rendered}\n          </CellAction>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <CellAction\n        column={column}\n        dataRow={dataRow}\n        handleCellAction={this.handleCellAction(column, dataRow)}\n        allowActions={cellActions}\n      >\n        {rendered}\n      </CellAction>\n    );\n  }\n\n  renderBodyCellWithData = (tableData: TableData | null) => {\n    return (\n      column: TableColumn<keyof TableDataRow>,\n      dataRow: TableDataRow\n    ): React.ReactNode => this.renderBodyCell(tableData, column, dataRow);\n  };\n\n  onSortClick(currentSortKind?: string, currentSortField?: string) {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.landingv2.transactions.sort', {\n      organization,\n      field: currentSortField,\n      direction: currentSortKind,\n    });\n  }\n\n  paginationAnalyticsEvent = (direction: string) => {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.landingv3.table_pagination', {\n      organization,\n      direction,\n    });\n  };\n\n  renderHeadCell(\n    tableMeta: TableData['meta'],\n    column: TableColumn<keyof TableDataRow>,\n    title: React.ReactNode\n  ): React.ReactNode {\n    const {eventView, location} = this.props;\n\n    const align = fieldAlignment(column.name, column.type, tableMeta);\n    const field = {field: column.name, width: column.width};\n\n    function generateSortLink(): LocationDescriptorObject | undefined {\n      if (!tableMeta) {\n        return undefined;\n      }\n\n      const nextEventView = eventView.sortOnField(field, tableMeta);\n      const queryStringObject = nextEventView.generateQueryStringObject();\n\n      return {\n        ...location,\n        query: {...location.query, sort: queryStringObject.sort},\n      };\n    }\n    const currentSort = eventView.sortForField(field, tableMeta);\n    const canSort = isFieldSortable(field, tableMeta);\n\n    const currentSortKind = currentSort ? currentSort.kind : undefined;\n    const currentSortField = currentSort ? currentSort.field : undefined;\n\n    const sortLink = (\n      <SortLink\n        align={align}\n        title={title || field.field}\n        direction={currentSortKind}\n        canSort={canSort}\n        generateSortLink={generateSortLink}\n        onClick={() => this.onSortClick(currentSortKind, currentSortField)}\n      />\n    );\n    if (field.field.startsWith('user_misery')) {\n      return (\n        <GuideAnchor target=\"project_transaction_threshold\" position=\"top\">\n          {sortLink}\n        </GuideAnchor>\n      );\n    }\n    return sortLink;\n  }\n\n  renderHeadCellWithMeta = (tableMeta: TableData['meta']) => {\n    const columnTitles = this.props.columnTitles ?? COLUMN_TITLES;\n    return (column: TableColumn<keyof TableDataRow>, index: number): React.ReactNode =>\n      this.renderHeadCell(tableMeta, column, columnTitles[index]);\n  };\n\n  renderPrependCellWithData = (tableData: TableData | null) => {\n    const {eventView} = this.props;\n\n    const teamKeyTransactionColumn = eventView\n      .getColumns()\n      .find((col: TableColumn<React.ReactText>) => col.name === 'team_key_transaction');\n    return (isHeader: boolean, dataRow?: any) => {\n      if (teamKeyTransactionColumn) {\n        if (isHeader) {\n          const star = (\n            <IconStar\n              key=\"keyTransaction\"\n              color=\"yellow300\"\n              isSolid\n              data-test-id=\"team-key-transaction-header\"\n            />\n          );\n          return [this.renderHeadCell(tableData?.meta, teamKeyTransactionColumn, star)];\n        }\n        return [this.renderBodyCell(tableData, teamKeyTransactionColumn, dataRow)];\n      }\n      return [];\n    };\n  };\n\n  handleSummaryClick = () => {\n    const {organization} = this.props;\n    trackAdvancedAnalyticsEvent('performance_views.overview.navigate.summary', {\n      organization,\n    });\n  };\n\n  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {\n    const widths: number[] = [...this.state.widths];\n    widths[columnIndex] = nextColumn.width\n      ? Number(nextColumn.width)\n      : COL_WIDTH_UNDEFINED;\n    this.setState({widths});\n  };\n\n  getSortedEventView() {\n    const {eventView} = this.props;\n\n    return eventView.withSorts([\n      {\n        field: 'team_key_transaction',\n        kind: 'desc',\n      },\n      ...eventView.sorts,\n    ]);\n  }\n\n  render() {\n    const {eventView, organization, location, setError} = this.props;\n    const useEvents = organization.features.includes(\n      'performance-frontend-use-events-endpoint'\n    );\n    const {widths, transaction, transactionThreshold} = this.state;\n    const columnOrder = eventView\n      .getColumns(useEvents)\n      // remove team_key_transactions from the column order as we'll be rendering it\n      // via a prepended column\n      .filter(\n        (col: TableColumn<React.ReactText>) =>\n          col.name !== 'team_key_transaction' &&\n          !col.name.startsWith('count_miserable') &&\n          col.name !== 'project_threshold_config'\n      )\n      .map((col: TableColumn<React.ReactText>, i: number) => {\n        if (typeof widths[i] === 'number') {\n          return {...col, width: widths[i]};\n        }\n        return col;\n      });\n\n    const sortedEventView = this.getSortedEventView();\n    const columnSortBy = sortedEventView.getSorts();\n\n    const prependColumnWidths = ['max-content'];\n\n    return (\n      <div>\n        <MEPConsumer>\n          {value => (\n            <DiscoverQuery\n              eventView={sortedEventView}\n              orgSlug={organization.slug}\n              location={location}\n              setError={error => setError(error?.message)}\n              referrer=\"api.performance.landing-table\"\n              transactionName={transaction}\n              transactionThreshold={transactionThreshold}\n              queryExtras={getMEPQueryParams(value)}\n              useEvents={useEvents}\n            >\n              {({pageLinks, isLoading, tableData}) => (\n                <Fragment>\n                  <GridEditable\n                    isLoading={isLoading}\n                    data={tableData ? tableData.data : []}\n                    columnOrder={columnOrder}\n                    columnSortBy={columnSortBy}\n                    grid={{\n                      onResizeColumn: this.handleResizeColumn,\n                      renderHeadCell: this.renderHeadCellWithMeta(tableData?.meta) as any,\n                      renderBodyCell: this.renderBodyCellWithData(tableData) as any,\n                      renderPrependColumns: this.renderPrependCellWithData(\n                        tableData\n                      ) as any,\n                      prependColumnWidths,\n                    }}\n                    location={location}\n                  />\n                  <Pagination\n                    pageLinks={pageLinks}\n                    paginationAnalyticsEvent={this.paginationAnalyticsEvent}\n                  />\n                </Fragment>\n              )}\n            </DiscoverQuery>\n          )}\n        </MEPConsumer>\n      </div>\n    );\n  }\n}\n\nfunction Table(props: Omit<Props, 'summaryConditions'> & {summaryConditions?: string}) {\n  const summaryConditions =\n    props.summaryConditions ?? props.eventView.getQueryWithAdditionalConditions();\n\n  return <_Table {...props} summaryConditions={summaryConditions} />;\n}\n\nexport default Table;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\n/**\n * Common performance layouts\n */\n\nexport const PerformanceLayoutBodyRow = styled('div')<{\n  minSize: number;\n  columns?: number;\n}>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-column-gap: ${space(2)};\n  grid-row-gap: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    ${p =>\n      p.columns\n        ? `\n    grid-template-columns: repeat(${p.columns}, 1fr);\n    `\n        : `\n    grid-template-columns: repeat(auto-fit, minmax(${p.minSize}px, 1fr));\n    `}\n  }\n`;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {BarChart, BarChartProps} from 'sentry/components/charts/barChart';\nimport BarChartZoom from 'sentry/components/charts/barChartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconWarning} from 'sentry/icons/iconWarning';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {formatAbbreviatedNumber} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport HistogramQuery from 'sentry/utils/performance/histogram/histogramQuery';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {\n  computeBuckets,\n  formatHistogramData,\n} from 'sentry/utils/performance/histogram/utils';\n\nimport {DoubleHeaderContainer} from '../../styles';\nimport {getFieldOrBackup} from '../display/utils';\n\nconst NUM_BUCKETS = 50;\nconst PRECISION = 0;\n\ntype Props = {\n  eventView: EventView;\n  field: string;\n  location: Location;\n  onFilterChange: (minValue: number, maxValue: number) => void;\n  organization: Organization;\n  title: string;\n  titleTooltip: string;\n  usingBackupAxis: boolean;\n  backupField?: string;\n  didReceiveMultiAxis?: (axisCounts: Record<string, number>) => void;\n};\n\nexport function HistogramChart(props: Props) {\n  const {\n    location,\n    onFilterChange,\n    organization,\n    eventView,\n    field,\n    title,\n    titleTooltip,\n    didReceiveMultiAxis,\n    backupField,\n    usingBackupAxis,\n  } = props;\n\n  const _backupField = backupField ? [backupField] : [];\n\n  return (\n    <div>\n      <DoubleHeaderContainer>\n        <HeaderTitleLegend>\n          {title}\n          <QuestionTooltip position=\"top\" size=\"sm\" title={titleTooltip} />\n        </HeaderTitleLegend>\n      </DoubleHeaderContainer>\n      <HistogramQuery\n        location={location}\n        orgSlug={organization.slug}\n        eventView={eventView}\n        numBuckets={NUM_BUCKETS}\n        precision={PRECISION}\n        fields={[field, ..._backupField]}\n        dataFilter=\"exclude_outliers\"\n        didReceiveMultiAxis={didReceiveMultiAxis}\n      >\n        {results => {\n          const _field = usingBackupAxis ? getFieldOrBackup(field, backupField) : field;\n          const isLoading = results.isLoading;\n          const isErrored = results.error !== null;\n          const chartData = results.histograms?.[_field];\n\n          if (isErrored) {\n            return (\n              <ErrorPanel height=\"250px\">\n                <IconWarning color=\"gray300\" size=\"lg\" />\n              </ErrorPanel>\n            );\n          }\n\n          if (!chartData) {\n            return null;\n          }\n\n          return (\n            <Chart\n              isLoading={isLoading}\n              isErrored={isErrored}\n              chartData={chartData}\n              location={location}\n              onFilterChange={onFilterChange}\n              field={_field}\n            />\n          );\n        }}\n      </HistogramQuery>\n    </div>\n  );\n}\n\ntype ChartProps = {\n  field: string;\n  isErrored: boolean;\n  isLoading: boolean;\n  location: Location;\n  onFilterChange: Props['onFilterChange'];\n  chartData?: HistogramData;\n  colors?: string[];\n  disableChartPadding?: boolean;\n  disableXAxis?: boolean;\n  disableZoom?: boolean;\n  grid?: BarChartProps['grid'];\n  height?: number;\n};\n\nexport function Chart(props: ChartProps) {\n  const {\n    isLoading,\n    isErrored,\n    chartData,\n    location,\n    field,\n    onFilterChange,\n    height,\n    grid,\n    disableXAxis,\n    disableZoom,\n    disableChartPadding,\n    colors,\n  } = props;\n  const theme = useTheme();\n\n  if (!chartData) {\n    return null;\n  }\n\n  const series = {\n    seriesName: t('Count'),\n    data: formatHistogramData(chartData, {type: 'duration'}),\n  };\n\n  const xAxis = {\n    type: 'category' as const,\n    truncate: true,\n    axisTick: {\n      alignWithLabel: true,\n    },\n  };\n\n  const allSeries: Series[] = [];\n\n  if (!isLoading && !isErrored) {\n    allSeries.push(series);\n  }\n\n  const yAxis = {\n    type: 'value' as const,\n    axisLabel: {\n      color: theme.chartLabel,\n      formatter: formatAbbreviatedNumber,\n    },\n  };\n\n  return (\n    <Fragment>\n      <BarChartZoom\n        minZoomWidth={10 ** -PRECISION * NUM_BUCKETS}\n        location={location}\n        paramStart={`${field}:>=`}\n        paramEnd={`${field}:<=`}\n        xAxisIndex={[0]}\n        buckets={computeBuckets(chartData)}\n        onHistoryPush={onFilterChange}\n      >\n        {zoomRenderProps => {\n          return (\n            <BarChartContainer hasPadding={!disableChartPadding}>\n              <MaskContainer>\n                <TransparentLoadingMask visible={isLoading} />\n                {getDynamicText({\n                  value: (\n                    <BarChart\n                      height={height ?? 250}\n                      series={allSeries}\n                      xAxis={disableXAxis ? {show: false} : xAxis}\n                      yAxis={yAxis}\n                      colors={colors}\n                      grid={\n                        grid ?? {\n                          left: space(3),\n                          right: space(3),\n                          top: space(3),\n                          bottom: isLoading ? space(4) : space(1.5),\n                        }\n                      }\n                      stacked\n                      {...(disableZoom ? {} : zoomRenderProps)}\n                    />\n                  ),\n                  fixed: <Placeholder height=\"250px\" testId=\"skeleton-ui\" />,\n                })}\n              </MaskContainer>\n            </BarChartContainer>\n          );\n        }}\n      </BarChartZoom>\n    </Fragment>\n  );\n}\n\nconst BarChartContainer = styled('div')<{hasPadding?: boolean}>`\n  padding-top: ${p => (p.hasPadding ? space(1) : 0)};\n  position: relative;\n`;\n\nconst MaskContainer = styled('div')`\n  position: relative;\n`;\n\nexport default HistogramChart;\n","import {HistogramQueryChildrenProps} from 'sentry/utils/performance/histogram/histogramQuery';\n\nexport function transformHistogramQuery(_: any, results: HistogramQueryChildrenProps) {\n  const {histograms} = results;\n  return {\n    ...results,\n    data: histograms,\n    isLoading: results.isLoading,\n    isErrored: results.error !== null,\n    hasData: !!Object.values(histograms || {}).length,\n  };\n}\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport {t} from 'sentry/locale';\nimport {useMEPSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport HistogramQuery from 'sentry/utils/performance/histogram/histogramQuery';\nimport {Chart as HistogramChart} from 'sentry/views/performance/landing/chart/histogramChart';\n\nimport {GenericPerformanceWidget} from '../components/performanceWidget';\nimport {transformHistogramQuery} from '../transforms/transformHistogramQuery';\nimport {PerformanceWidgetProps, WidgetDataResult} from '../types';\nimport {getMEPQueryParams} from '../utils';\n\ntype AreaDataType = {\n  chart: WidgetDataResult & ReturnType<typeof transformHistogramQuery>;\n};\n\nexport function HistogramWidget(props: PerformanceWidgetProps) {\n  const mepSetting = useMEPSettingContext();\n  const {ContainerActions, location} = props;\n  const globalSelection = props.eventView.getPageFilters();\n\n  const Queries = useMemo(() => {\n    return {\n      chart: {\n        fields: props.fields,\n        component: provided => (\n          <HistogramQuery\n            {...provided}\n            eventView={provided.eventView}\n            location={props.location}\n            numBuckets={20}\n            dataFilter=\"exclude_outliers\"\n            queryExtras={getMEPQueryParams(mepSetting)}\n          />\n        ),\n        transform: transformHistogramQuery,\n      },\n    };\n  }, [props.chartSetting, mepSetting.memoizationKey]);\n\n  const onFilterChange = () => {};\n\n  return (\n    <GenericPerformanceWidget<AreaDataType>\n      {...props}\n      Subtitle={() => (\n        <Subtitle>\n          {globalSelection.datetime.period\n            ? t('In the last %s ', globalSelection.datetime.period)\n            : t('In the last period')}\n        </Subtitle>\n      )}\n      HeaderActions={provided => (\n        <Fragment>\n          <ContainerActions {...provided.widgetData.chart} />\n        </Fragment>\n      )}\n      Queries={Queries}\n      Visualizations={[\n        {\n          component: provided => (\n            <HistogramChart\n              {...provided}\n              colors={props.chartColor ? [props.chartColor] : undefined}\n              location={location}\n              isLoading={false}\n              isErrored={false}\n              onFilterChange={onFilterChange}\n              field={props.fields[0]}\n              chartData={provided.widgetData.chart?.data?.[props.fields[0]]}\n              disableXAxis\n              disableZoom\n              disableChartPadding\n            />\n          ),\n          height: props.chartHeight,\n        },\n      ]}\n    />\n  );\n}\n\nconst Subtitle = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","import {InjectedRouter} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport max from 'lodash/max';\nimport min from 'lodash/min';\n\nimport {AreaChart, AreaChartProps} from 'sentry/components/charts/areaChart';\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport {LineChart} from 'sentry/components/charts/lineChart';\nimport {DateString} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\n\ntype Props = {\n  data: Series[];\n  end: DateString;\n  loading: boolean;\n  router: InjectedRouter;\n  start: DateString;\n  statsPeriod: string | null | undefined;\n  utc: boolean;\n  chartColors?: string[];\n  definedAxisTicks?: number;\n  disableMultiAxis?: boolean;\n  disableXAxis?: boolean;\n  grid?: AreaChartProps['grid'];\n  height?: number;\n  isLineChart?: boolean;\n  previousData?: Series[];\n};\n\n// adapted from https://stackoverflow.com/questions/11397239/rounding-up-for-a-graph-maximum\nfunction computeAxisMax(data) {\n  // assumes min is 0\n  const valuesDict = data.map(value => value.data.map(point => point.value));\n  const maxValue = max(valuesDict.map(max)) as number;\n\n  if (maxValue <= 1) {\n    return 1;\n  }\n\n  const power = Math.log10(maxValue);\n  const magnitude = min([max([10 ** (power - Math.floor(power)), 0]), 10]) as number;\n\n  let scale: number;\n  if (magnitude <= 2.5) {\n    scale = 0.2;\n  } else if (magnitude <= 5) {\n    scale = 0.5;\n  } else if (magnitude <= 7.5) {\n    scale = 1.0;\n  } else {\n    scale = 2.0;\n  }\n\n  const step = 10 ** Math.floor(power) * scale;\n  return Math.round(Math.ceil(maxValue / step) * step);\n}\n\nfunction Chart({\n  data,\n  previousData,\n  router,\n  statsPeriod,\n  start,\n  end,\n  utc,\n  loading,\n  height,\n  grid,\n  disableMultiAxis,\n  disableXAxis,\n  definedAxisTicks,\n  chartColors,\n  isLineChart,\n}: Props) {\n  const theme = useTheme();\n\n  if (!data || data.length <= 0) {\n    return null;\n  }\n\n  const colors = chartColors ?? theme.charts.getColorPalette(4);\n\n  const durationOnly = data.every(\n    value => aggregateOutputType(value.seriesName) === 'duration'\n  );\n\n  const dataMax = durationOnly ? computeAxisMax(data) : undefined;\n\n  const xAxes = disableMultiAxis\n    ? undefined\n    : [\n        {\n          gridIndex: 0,\n          type: 'time' as const,\n        },\n        {\n          gridIndex: 1,\n          type: 'time' as const,\n        },\n      ];\n\n  const yAxes = disableMultiAxis\n    ? [\n        {\n          splitNumber: definedAxisTicks,\n          axisLabel: {\n            color: theme.chartLabel,\n            formatter(value: number) {\n              return axisLabelFormatter(value, data[0].seriesName);\n            },\n          },\n        },\n      ]\n    : [\n        {\n          gridIndex: 0,\n          scale: true,\n          max: dataMax,\n          axisLabel: {\n            color: theme.chartLabel,\n            formatter(value: number) {\n              return axisLabelFormatter(value, data[0].seriesName);\n            },\n          },\n        },\n        {\n          gridIndex: 1,\n          scale: true,\n          max: dataMax,\n          axisLabel: {\n            color: theme.chartLabel,\n            formatter(value: number) {\n              return axisLabelFormatter(value, data[1].seriesName);\n            },\n          },\n        },\n      ];\n\n  const axisPointer = disableMultiAxis\n    ? undefined\n    : {\n        // Link the two series x-axis together.\n        link: [{xAxisIndex: [0, 1]}],\n      };\n\n  const areaChartProps = {\n    seriesOptions: {\n      showSymbol: false,\n    },\n    grid: disableMultiAxis\n      ? grid\n      : [\n          {\n            top: '8px',\n            left: '24px',\n            right: '52%',\n            bottom: '16px',\n          },\n          {\n            top: '8px',\n            left: '52%',\n            right: '24px',\n            bottom: '16px',\n          },\n        ],\n    axisPointer,\n    xAxes,\n    yAxes,\n    utc,\n    isGroupedByDate: true,\n    showTimeInTooltip: true,\n    colors: [colors[0], colors[1]] as string[],\n    tooltip: {\n      valueFormatter: (value, seriesName) => {\n        return tooltipFormatter(\n          value,\n          data && data.length ? data[0].seriesName : seriesName\n        );\n      },\n      nameFormatter(value: string) {\n        return value === 'epm()' ? 'tpm()' : value;\n      },\n    },\n  };\n\n  if (loading) {\n    if (isLineChart) {\n      return <LineChart height={height} series={[]} {...areaChartProps} />;\n    }\n    return <AreaChart height={height} series={[]} {...areaChartProps} />;\n  }\n  const series = data.map((values, i: number) => ({\n    ...values,\n    yAxisIndex: i,\n    xAxisIndex: i,\n  }));\n\n  const xAxis = disableXAxis\n    ? {\n        show: false,\n        axisLabel: {show: true, margin: 0},\n        axisLine: {show: false},\n      }\n    : undefined;\n\n  return (\n    <ChartZoom\n      router={router}\n      period={statsPeriod}\n      start={start}\n      end={end}\n      utc={utc}\n      xAxisIndex={disableMultiAxis ? undefined : [0, 1]}\n    >\n      {zoomRenderProps => {\n        if (isLineChart) {\n          return (\n            <LineChart\n              height={height}\n              {...zoomRenderProps}\n              series={series}\n              previousPeriod={previousData}\n              xAxis={xAxis}\n              yAxis={areaChartProps.yAxes[0]}\n              tooltip={areaChartProps.tooltip}\n            />\n          );\n        }\n\n        return (\n          <AreaChart\n            height={height}\n            {...zoomRenderProps}\n            series={series}\n            previousPeriod={previousData}\n            xAxis={xAxis}\n            {...areaChartProps}\n          />\n        );\n      }}\n    </ChartZoom>\n  );\n}\n\nexport default Chart;\n","import {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {defined} from 'sentry/utils';\nimport {TableData} from 'sentry/utils/discover/discoverQuery';\nimport {GenericChildrenProps} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {DEFAULT_STATS_PERIOD} from 'sentry/views/performance/data';\n\nimport {QueryDefinitionWithKey, WidgetDataConstraint, WidgetPropUnion} from '../types';\n\nexport function transformDiscoverToList<T extends WidgetDataConstraint>(\n  widgetProps: WidgetPropUnion<T>,\n  results: GenericChildrenProps<TableData>,\n  _: QueryDefinitionWithKey<T>\n) {\n  const {start, end, utc, interval, statsPeriod} = normalizeDateTimeParams(\n    widgetProps.location.query,\n    {\n      defaultStatsPeriod: DEFAULT_STATS_PERIOD,\n    }\n  );\n\n  const data = results.tableData?.data ?? [];\n\n  const childData = {\n    ...results,\n    isErrored: !!results.error,\n    hasData: defined(data) && !!data.length,\n    data,\n\n    utc: utc === 'true',\n    interval,\n    statsPeriod: statsPeriod ?? undefined,\n    start: start ?? '',\n    end: end ?? '',\n  };\n\n  return childData;\n}\n","import mean from 'lodash/mean';\n\nimport {RenderProps} from 'sentry/components/charts/eventsRequest';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {defined} from 'sentry/utils';\nimport {axisLabelFormatter} from 'sentry/utils/discover/charts';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\n\nimport {QueryDefinitionWithKey, WidgetDataConstraint, WidgetPropUnion} from '../types';\n\nexport function transformEventsRequestToArea<T extends WidgetDataConstraint>(\n  widgetProps: WidgetPropUnion<T>,\n  results: RenderProps,\n  _: QueryDefinitionWithKey<T>\n) {\n  const {start, end, utc, interval, statsPeriod} = normalizeDateTimeParams(\n    widgetProps.location.query\n  );\n\n  const data = results.timeseriesData ?? [];\n\n  const dataMean = data.map(series => {\n    const meanData = mean(series.data.map(({value}) => value));\n\n    return {\n      mean: meanData,\n      outputType: aggregateOutputType(series.seriesName),\n      label: axisLabelFormatter(meanData, series.seriesName),\n    };\n  });\n\n  const childData = {\n    ...results,\n    isLoading: results.loading || results.reloading,\n    isErrored: results.errored,\n    hasData: defined(data) && !!data.length && !!data[0].data.length,\n    data,\n    dataMean,\n    previousData: results.previousTimeseriesData ?? undefined,\n\n    utc: utc === 'true',\n    interval,\n    statsPeriod: statsPeriod ?? undefined,\n    start: start ?? '',\n    end: end ?? '',\n  };\n\n  return childData;\n}\n","import {Fragment, useMemo, useState} from 'react';\nimport {withRouter} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport Count from 'sentry/components/count';\nimport Link from 'sentry/components/links/link';\nimport Tooltip from 'sentry/components/tooltip';\nimport Truncate from 'sentry/components/truncate';\nimport {t, tct} from 'sentry/locale';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport {getAggregateAlias} from 'sentry/utils/discover/fields';\nimport {useMEPSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withApi from 'sentry/utils/withApi';\nimport _DurationChart from 'sentry/views/performance/charts/chart';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\nimport {getPerformanceDuration} from 'sentry/views/performance/utils';\n\nimport {excludeTransaction} from '../../utils';\nimport {GenericPerformanceWidget} from '../components/performanceWidget';\nimport SelectableList, {\n  GrowLink,\n  ListClose,\n  RightAlignedCell,\n  Subtitle,\n  WidgetEmptyStateWarning,\n} from '../components/selectableList';\nimport {transformDiscoverToList} from '../transforms/transformDiscoverToList';\nimport {transformEventsRequestToArea} from '../transforms/transformEventsToArea';\nimport {PerformanceWidgetProps, QueryDefinition, WidgetDataResult} from '../types';\nimport {eventsRequestQueryProps, getMEPParamsIfApplicable} from '../utils';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\ntype DataType = {\n  chart: WidgetDataResult & ReturnType<typeof transformEventsRequestToArea>;\n  list: WidgetDataResult & ReturnType<typeof transformDiscoverToList>;\n};\n\nconst slowList = [\n  PerformanceWidgetSetting.SLOW_HTTP_OPS,\n  PerformanceWidgetSetting.SLOW_DB_OPS,\n  PerformanceWidgetSetting.SLOW_BROWSER_OPS,\n  PerformanceWidgetSetting.SLOW_RESOURCE_OPS,\n];\n\n// Most N Frames, low population, and count vs. duration so treated separately from 'slow' widgets.\nconst framesList = [\n  PerformanceWidgetSetting.MOST_SLOW_FRAMES,\n  PerformanceWidgetSetting.MOST_FROZEN_FRAMES,\n];\n\nexport function LineChartListWidget(props: PerformanceWidgetProps) {\n  const mepSetting = useMEPSettingContext();\n  const [selectedListIndex, setSelectListIndex] = useState<number>(0);\n  const {ContainerActions, organization} = props;\n  const useEvents = organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n  const pageError = usePageError();\n\n  const field = props.fields[0];\n\n  if (props.fields.length !== 1) {\n    throw new Error(\n      `Line chart list widget can only accept a single field (${props.fields})`\n    );\n  }\n\n  const isSlowestType = slowList.includes(props.chartSetting);\n  const isFramesType = framesList.includes(props.chartSetting);\n\n  const listQuery = useMemo<QueryDefinition<DataType, WidgetDataResult>>(\n    () => ({\n      fields: field,\n      component: provided => {\n        const eventView = provided.eventView.clone();\n\n        eventView.sorts = [{kind: 'desc', field}];\n        if (props.chartSetting === PerformanceWidgetSetting.MOST_RELATED_ISSUES) {\n          eventView.fields = [\n            {field: 'issue'},\n            {field: 'transaction'},\n            {field: 'title'},\n            {field: 'project.id'},\n            {field},\n          ];\n          eventView.additionalConditions.setFilterValues('event.type', ['error']);\n          eventView.additionalConditions.setFilterValues('!tags[transaction]', ['']);\n          const mutableSearch = new MutableSearch(eventView.query);\n          mutableSearch.removeFilter('transaction.duration');\n          eventView.additionalConditions.removeFilter('transaction.op'); // Remove transaction op incase it's applied from the performance view.\n          eventView.additionalConditions.removeFilter('!transaction.op'); // Remove transaction op incase it's applied from the performance view.\n          eventView.query = mutableSearch.formatString();\n        } else if (isSlowestType || isFramesType) {\n          eventView.additionalConditions.setFilterValues('epm()', ['>0.01']);\n          eventView.fields = [\n            {field: 'transaction'},\n            {field: 'project.id'},\n            {field: 'epm()'},\n            ...props.fields.map(f => ({field: f})),\n          ];\n        } else {\n          // Most related errors\n          eventView.fields = [{field: 'transaction'}, {field: 'project.id'}, {field}];\n        }\n        // Don't retrieve list items with 0 in the field.\n        eventView.additionalConditions.setFilterValues(field, ['>0']);\n        return (\n          <DiscoverQuery\n            {...provided}\n            eventView={eventView}\n            location={props.location}\n            limit={3}\n            cursor=\"0:0:1\"\n            noPagination\n            queryExtras={getMEPParamsIfApplicable(mepSetting, props.chartSetting)}\n            useEvents={useEvents}\n          />\n        );\n      },\n      transform: transformDiscoverToList,\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [props.chartSetting, mepSetting.memoizationKey]\n  );\n\n  const chartQuery = useMemo<QueryDefinition<DataType, WidgetDataResult>>(\n    () => {\n      return {\n        enabled: widgetData => {\n          return !!widgetData?.list?.data?.length;\n        },\n        fields: field,\n        component: provided => {\n          const eventView = props.eventView.clone();\n          if (!provided.widgetData.list.data[selectedListIndex]?.transaction) {\n            return null;\n          }\n          eventView.additionalConditions.setFilterValues('transaction', [\n            provided.widgetData.list.data[selectedListIndex].transaction as string,\n          ]);\n          if (props.chartSetting === PerformanceWidgetSetting.MOST_RELATED_ISSUES) {\n            if (!provided.widgetData.list.data[selectedListIndex]?.issue) {\n              return null;\n            }\n            eventView.fields = [\n              {field: 'issue'},\n              {field: 'issue.id'},\n              {field: 'transaction'},\n              {field},\n            ];\n            eventView.additionalConditions.setFilterValues('issue', [\n              provided.widgetData.list.data[selectedListIndex].issue as string,\n            ]);\n            eventView.additionalConditions.setFilterValues('event.type', ['error']);\n            eventView.additionalConditions.setFilterValues('!tags[transaction]', ['']);\n            eventView.additionalConditions.removeFilter('transaction.op'); // Remove transaction op incase it's applied from the performance view.\n            eventView.additionalConditions.removeFilter('!transaction.op'); // Remove transaction op incase it's applied from the performance view.\n            const mutableSearch = new MutableSearch(eventView.query);\n            mutableSearch.removeFilter('transaction.duration');\n            eventView.query = mutableSearch.formatString();\n          } else {\n            eventView.fields = [{field: 'transaction'}, {field}];\n          }\n          return (\n            <EventsRequest\n              {...pick(provided, eventsRequestQueryProps)}\n              limit={1}\n              includePrevious\n              includeTransformedData\n              partial\n              currentSeriesNames={[field]}\n              query={eventView.getQueryWithAdditionalConditions()}\n              interval={getInterval(\n                {\n                  start: provided.start,\n                  end: provided.end,\n                  period: provided.period,\n                },\n                'medium'\n              )}\n              hideError\n              onError={pageError.setPageError}\n              queryExtras={getMEPParamsIfApplicable(mepSetting, props.chartSetting)}\n              userModified={decodeScalar(props.location.query.userModified)}\n            />\n          );\n        },\n        transform: transformEventsRequestToArea,\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      props.chartSetting,\n      selectedListIndex,\n      mepSetting.memoizationKey,\n      props.location.query.userModified,\n    ]\n  );\n\n  const Queries = {\n    list: listQuery,\n    chart: chartQuery,\n  };\n\n  return (\n    <GenericPerformanceWidget<DataType>\n      {...props}\n      Subtitle={() => <Subtitle>{t('Suggested transactions')}</Subtitle>}\n      HeaderActions={provided => (\n        <ContainerActions isLoading={provided.widgetData.list?.isLoading} />\n      )}\n      EmptyComponent={WidgetEmptyStateWarning}\n      Queries={Queries}\n      Visualizations={[\n        {\n          component: provided => (\n            <DurationChart\n              {...provided.widgetData.chart}\n              {...provided}\n              disableMultiAxis\n              disableXAxis\n              chartColors={props.chartColor ? [props.chartColor] : undefined}\n              isLineChart\n            />\n          ),\n          height: props.chartHeight,\n        },\n        {\n          component: provided => (\n            <SelectableList\n              selectedIndex={selectedListIndex}\n              setSelectedIndex={setSelectListIndex}\n              items={provided.widgetData.list.data.map(listItem => () => {\n                const transaction = listItem.transaction as string;\n\n                const additionalQuery: Record<string, string> = {};\n\n                if (props.chartSetting === PerformanceWidgetSetting.SLOW_HTTP_OPS) {\n                  additionalQuery.breakdown = 'http';\n                  additionalQuery.display = 'latency';\n                } else if (props.chartSetting === PerformanceWidgetSetting.SLOW_DB_OPS) {\n                  additionalQuery.breakdown = 'db';\n                  additionalQuery.display = 'latency';\n                } else if (\n                  props.chartSetting === PerformanceWidgetSetting.SLOW_BROWSER_OPS\n                ) {\n                  additionalQuery.breakdown = 'browser';\n                  additionalQuery.display = 'latency';\n                } else if (\n                  props.chartSetting === PerformanceWidgetSetting.SLOW_RESOURCE_OPS\n                ) {\n                  additionalQuery.breakdown = 'resource';\n                  additionalQuery.display = 'latency';\n                }\n\n                const transactionTarget = transactionSummaryRouteWithQuery({\n                  orgSlug: props.organization.slug,\n                  projectID: listItem['project.id'] as string,\n                  transaction,\n                  query: props.eventView.getPageFiltersQuery(),\n                  additionalQuery,\n                });\n\n                const fieldString = useEvents ? field : getAggregateAlias(field);\n\n                const valueMap = {\n                  [PerformanceWidgetSetting.MOST_RELATED_ERRORS]: listItem.failure_count,\n                  [PerformanceWidgetSetting.MOST_RELATED_ISSUES]: listItem.issue,\n                  slowest: getPerformanceDuration(listItem[fieldString] as number),\n                };\n                const rightValue =\n                  valueMap[isSlowestType ? 'slowest' : props.chartSetting] ??\n                  listItem[fieldString];\n\n                switch (props.chartSetting) {\n                  case PerformanceWidgetSetting.MOST_RELATED_ISSUES:\n                    return (\n                      <Fragment>\n                        <GrowLink to={transactionTarget}>\n                          <Truncate value={transaction} maxLength={40} />\n                        </GrowLink>\n                        <RightAlignedCell>\n                          <Tooltip title={listItem.title}>\n                            <Link\n                              to={`/organizations/${props.organization.slug}/issues/${listItem['issue.id']}/`}\n                            >\n                              {rightValue}\n                            </Link>\n                          </Tooltip>\n                        </RightAlignedCell>\n                        {!props.withStaticFilters && (\n                          <ListClose\n                            setSelectListIndex={setSelectListIndex}\n                            onClick={() =>\n                              excludeTransaction(listItem.transaction, props)\n                            }\n                          />\n                        )}\n                      </Fragment>\n                    );\n                  case PerformanceWidgetSetting.MOST_RELATED_ERRORS:\n                    return (\n                      <Fragment>\n                        <GrowLink to={transactionTarget}>\n                          <Truncate value={transaction} maxLength={40} />\n                        </GrowLink>\n                        <RightAlignedCell>\n                          {tct('[count] errors', {\n                            count: <Count value={rightValue} />,\n                          })}\n                        </RightAlignedCell>\n                        {!props.withStaticFilters && (\n                          <ListClose\n                            setSelectListIndex={setSelectListIndex}\n                            onClick={() =>\n                              excludeTransaction(listItem.transaction, props)\n                            }\n                          />\n                        )}\n                      </Fragment>\n                    );\n                  default:\n                    if (typeof rightValue === 'number') {\n                      return (\n                        <Fragment>\n                          <GrowLink to={transactionTarget}>\n                            <Truncate value={transaction} maxLength={40} />\n                          </GrowLink>\n                          <RightAlignedCell>\n                            <Count value={rightValue} />\n                          </RightAlignedCell>\n                          {!props.withStaticFilters && (\n                            <ListClose\n                              setSelectListIndex={setSelectListIndex}\n                              onClick={() =>\n                                excludeTransaction(listItem.transaction, props)\n                              }\n                            />\n                          )}\n                        </Fragment>\n                      );\n                    }\n                    return (\n                      <Fragment>\n                        <GrowLink to={transactionTarget}>\n                          <Truncate value={transaction} maxLength={40} />\n                        </GrowLink>\n                        <RightAlignedCell>{rightValue}</RightAlignedCell>\n                        {!props.withStaticFilters && (\n                          <ListClose\n                            setSelectListIndex={setSelectListIndex}\n                            onClick={() =>\n                              excludeTransaction(listItem.transaction, props)\n                            }\n                          />\n                        )}\n                      </Fragment>\n                    );\n                }\n              })}\n            />\n          ),\n          height: 124,\n          noPadding: true,\n        },\n      ]}\n    />\n  );\n}\n\nconst EventsRequest = withApi(_EventsRequest);\nconst DurationChart = withRouter(_DurationChart);\n","import {Fragment, useMemo} from 'react';\nimport {withRouter} from 'react-router';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {getInterval, getPreviousSeriesName} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {QueryBatchNode} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {useMEPSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\nimport _DurationChart from 'sentry/views/performance/charts/chart';\n\nimport {GenericPerformanceWidget} from '../components/performanceWidget';\nimport {transformEventsRequestToArea} from '../transforms/transformEventsToArea';\nimport {PerformanceWidgetProps, QueryDefinition, WidgetDataResult} from '../types';\nimport {eventsRequestQueryProps, getMEPQueryParams} from '../utils';\n\ntype DataType = {\n  chart: WidgetDataResult & ReturnType<typeof transformEventsRequestToArea>;\n};\n\nexport function SingleFieldAreaWidget(props: PerformanceWidgetProps) {\n  const {ContainerActions, location} = props;\n  const globalSelection = props.eventView.getPageFilters();\n  const pageError = usePageError();\n  const mepSetting = useMEPSettingContext();\n\n  if (props.fields.length !== 1) {\n    throw new Error(`Single field area can only accept a single field (${props.fields})`);\n  }\n  const field = props.fields[0];\n\n  const chart = useMemo<QueryDefinition<DataType, WidgetDataResult>>(\n    () => ({\n      fields: props.fields[0],\n      component: provided => (\n        <QueryBatchNode batchProperty=\"yAxis\">\n          {({queryBatching}) => (\n            <EventsRequest\n              {...pick(provided, eventsRequestQueryProps)}\n              limit={1}\n              queryBatching={queryBatching}\n              includePrevious\n              includeTransformedData\n              partial\n              currentSeriesNames={[field]}\n              previousSeriesNames={[getPreviousSeriesName(field)]}\n              query={provided.eventView.getQueryWithAdditionalConditions()}\n              interval={getInterval(\n                {\n                  start: provided.start,\n                  end: provided.end,\n                  period: provided.period,\n                },\n                'medium'\n              )}\n              hideError\n              onError={pageError.setPageError}\n              queryExtras={getMEPQueryParams(mepSetting)}\n              userModified={decodeScalar(location.query.userModified)}\n            />\n          )}\n        </QueryBatchNode>\n      ),\n      transform: transformEventsRequestToArea,\n    }),\n    [props.chartSetting, mepSetting.memoizationKey, location.query.userModified]\n  );\n\n  const Queries = {\n    chart,\n  };\n\n  return (\n    <GenericPerformanceWidget<DataType>\n      {...props}\n      Subtitle={() => (\n        <Subtitle>\n          {globalSelection.datetime.period\n            ? t('Compared to last %s ', globalSelection.datetime.period)\n            : t('Compared to the last period')}\n        </Subtitle>\n      )}\n      HeaderActions={provided => (\n        <Fragment>\n          <HighlightNumber color={props.chartColor}>\n            {provided.widgetData.chart?.hasData\n              ? provided.widgetData.chart?.dataMean?.[0].label\n              : null}\n          </HighlightNumber>\n          <ContainerActions {...provided.widgetData.chart} />\n        </Fragment>\n      )}\n      Queries={Queries}\n      Visualizations={[\n        {\n          component: provided => (\n            <DurationChart\n              {...provided.widgetData.chart}\n              {...provided}\n              disableMultiAxis\n              disableXAxis\n              definedAxisTicks={4}\n              chartColors={props.chartColor ? [props.chartColor] : undefined}\n            />\n          ),\n          height: props.chartHeight,\n        },\n      ]}\n    />\n  );\n}\n\nconst EventsRequest = withApi(_EventsRequest);\nexport const DurationChart = withRouter(_DurationChart);\nexport const Subtitle = styled('span')`\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport const HighlightNumber = styled('div')<{color?: string}>`\n  color: ${p => p.color};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n","import {TrendDiscoveryChildrenProps} from 'sentry/utils/performance/trends/trendsDiscoverQuery';\nimport {normalizeTrends} from 'sentry/views/performance/trends/utils';\n\nexport function transformTrendsDiscover(_: any, props: TrendDiscoveryChildrenProps) {\n  const {trendsData} = props;\n  const events = trendsData\n    ? normalizeTrends((trendsData && trendsData.events && trendsData.events.data) || [])\n    : [];\n  return {\n    ...props,\n    data: trendsData,\n    hasData: !!trendsData?.events?.data.length,\n    loading: props.isLoading,\n    isLoading: props.isLoading,\n    isErrored: !!props.error,\n    errored: props.error,\n    statsData: trendsData ? trendsData.stats : {},\n    transactionsList: events && events.slice ? events.slice(0, 3) : [],\n    events,\n  };\n}\n","import {Fragment, useMemo, useState} from 'react';\nimport {withRouter} from 'react-router';\n\nimport Button from 'sentry/components/button';\nimport Truncate from 'sentry/components/truncate';\nimport {t} from 'sentry/locale';\nimport TrendsDiscoverQuery from 'sentry/utils/performance/trends/trendsDiscoverQuery';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withProjects from 'sentry/utils/withProjects';\nimport {CompareDurations} from 'sentry/views/performance/trends/changedTransactions';\nimport {handleTrendsClick, trendsTargetRoute} from 'sentry/views/performance/utils';\n\nimport {Chart} from '../../../trends/chart';\nimport {TrendChangeType, TrendFunctionField} from '../../../trends/types';\nimport {excludeTransaction} from '../../utils';\nimport {GenericPerformanceWidget} from '../components/performanceWidget';\nimport SelectableList, {\n  GrowLink,\n  ListClose,\n  RightAlignedCell,\n  Subtitle,\n  WidgetEmptyStateWarning,\n} from '../components/selectableList';\nimport {transformTrendsDiscover} from '../transforms/transformTrendsDiscover';\nimport {PerformanceWidgetProps, QueryDefinition, WidgetDataResult} from '../types';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\ntype DataType = {\n  chart: WidgetDataResult & ReturnType<typeof transformTrendsDiscover>;\n};\n\nconst fields = [{field: 'transaction'}, {field: 'project'}];\n\nexport function TrendsWidget(props: PerformanceWidgetProps) {\n  const {\n    eventView: _eventView,\n    ContainerActions,\n    location,\n    organization,\n    withStaticFilters,\n  } = props;\n  const trendChangeType =\n    props.chartSetting === PerformanceWidgetSetting.MOST_IMPROVED\n      ? TrendChangeType.IMPROVED\n      : TrendChangeType.REGRESSION;\n  const trendFunctionField = TrendFunctionField.AVG; // Average is the easiest chart to understand.\n\n  const [selectedListIndex, setSelectListIndex] = useState<number>(0);\n\n  const eventView = _eventView.clone();\n  eventView.fields = fields;\n  eventView.sorts = [\n    {\n      kind: trendChangeType === TrendChangeType.IMPROVED ? 'asc' : 'desc',\n      field: 'trend_percentage()',\n    },\n  ];\n  const rest = {...props, eventView};\n  eventView.additionalConditions.addFilterValues('tpm()', ['>0.01']);\n  eventView.additionalConditions.addFilterValues('count_percentage()', ['>0.25', '<4']);\n  eventView.additionalConditions.addFilterValues('trend_percentage()', ['>0%']);\n  eventView.additionalConditions.addFilterValues('confidence()', ['>6']);\n\n  const chart = useMemo<QueryDefinition<DataType, WidgetDataResult>>(\n    () => ({\n      fields: ['transaction', 'project'],\n      component: provided => (\n        <TrendsDiscoverQuery\n          {...provided}\n          eventView={provided.eventView}\n          location={props.location}\n          trendChangeType={trendChangeType}\n          trendFunctionField={trendFunctionField}\n          limit={3}\n          cursor=\"0:0:1\"\n          noPagination\n        />\n      ),\n      transform: transformTrendsDiscover,\n    }),\n    [props.chartSetting, trendChangeType]\n  );\n\n  const Queries = {\n    chart,\n  };\n\n  return (\n    <GenericPerformanceWidget<DataType>\n      {...rest}\n      Subtitle={() => <Subtitle>{t('Trending Transactions')}</Subtitle>}\n      HeaderActions={provided => {\n        return (\n          <Fragment>\n            <div>\n              <Button\n                onClick={() => handleTrendsClick({location, organization})}\n                size=\"small\"\n                data-test-id=\"view-all-button\"\n              >\n                {t('View All')}\n              </Button>\n            </div>\n            <ContainerActions {...provided.widgetData.chart} />\n          </Fragment>\n        );\n      }}\n      EmptyComponent={WidgetEmptyStateWarning}\n      Queries={Queries}\n      Visualizations={[\n        {\n          component: provided => (\n            <TrendsChart\n              {...provided}\n              {...rest}\n              isLoading={provided.widgetData.chart.isLoading}\n              statsData={provided.widgetData.chart.statsData}\n              query={eventView.query}\n              project={eventView.project}\n              environment={eventView.environment}\n              start={eventView.start}\n              end={eventView.end}\n              statsPeriod={eventView.statsPeriod}\n              transaction={provided.widgetData.chart.transactionsList[selectedListIndex]}\n              trendChangeType={trendChangeType}\n              trendFunctionField={trendFunctionField}\n              disableXAxis\n              disableLegend\n            />\n          ),\n          bottomPadding: false,\n          height: props.chartHeight,\n        },\n        {\n          component: provided => (\n            <SelectableList\n              selectedIndex={selectedListIndex}\n              setSelectedIndex={setSelectListIndex}\n              items={provided.widgetData.chart.transactionsList.map(listItem => () => {\n                const initialConditions = new MutableSearch([]);\n                initialConditions.addFilterValues('transaction', [listItem.transaction]);\n\n                const trendsTarget = trendsTargetRoute({\n                  organization: props.organization,\n                  location: props.location,\n                  initialConditions,\n                  additionalQuery: {\n                    trendFunction: trendFunctionField,\n                  },\n                });\n                return (\n                  <Fragment>\n                    <GrowLink to={trendsTarget}>\n                      <Truncate value={listItem.transaction} maxLength={40} />\n                    </GrowLink>\n                    <RightAlignedCell>\n                      <CompareDurations transaction={listItem} />\n                    </RightAlignedCell>\n                    {!withStaticFilters && (\n                      <ListClose\n                        setSelectListIndex={setSelectListIndex}\n                        onClick={() => excludeTransaction(listItem.transaction, props)}\n                      />\n                    )}\n                  </Fragment>\n                );\n              })}\n            />\n          ),\n          height: 124,\n          noPadding: true,\n        },\n      ]}\n    />\n  );\n}\n\nconst TrendsChart = withRouter(withProjects(Chart));\n","import {RenderProps} from 'sentry/components/charts/eventsRequest';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {defined} from 'sentry/utils';\n\nimport {QueryDefinitionWithKey, WidgetDataConstraint, WidgetPropUnion} from '../types';\n\nexport function transformEventsRequestToVitals<T extends WidgetDataConstraint>(\n  widgetProps: WidgetPropUnion<T>,\n  results: RenderProps,\n  _: QueryDefinitionWithKey<T>\n) {\n  const {start, end, utc, interval, statsPeriod} = normalizeDateTimeParams(\n    widgetProps.location.query\n  );\n\n  const data = results.results ?? [];\n\n  const childData = {\n    ...results,\n    isLoading: results.loading || results.reloading,\n    isErrored: results.errored,\n    hasData: defined(data) && !!data.length && !!data[0].data.length,\n    data,\n\n    utc: utc === 'true',\n    interval,\n    statsPeriod: statsPeriod ?? undefined,\n    start: start ?? '',\n    end: end ?? '',\n  };\n\n  return childData;\n}\n","import {Fragment, useMemo, useState} from 'react';\nimport styled from '@emotion/styled';\nimport pick from 'lodash/pick';\n\nimport Button from 'sentry/components/button';\nimport _EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport Truncate from 'sentry/components/truncate';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {defined} from 'sentry/utils';\nimport DiscoverQuery, {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport {getAggregateAlias, WebVital} from 'sentry/utils/discover/fields';\nimport {useMEPSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {VitalData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withApi from 'sentry/utils/withApi';\nimport {vitalDetailRouteWithQuery} from 'sentry/views/performance/vitalDetail/utils';\nimport {_VitalChart} from 'sentry/views/performance/vitalDetail/vitalChart';\n\nimport {excludeTransaction} from '../../utils';\nimport {VitalBar} from '../../vitalsCards';\nimport {GenericPerformanceWidget} from '../components/performanceWidget';\nimport SelectableList, {\n  GrowLink,\n  ListClose,\n  RightAlignedCell,\n  Subtitle,\n  WidgetEmptyStateWarning,\n} from '../components/selectableList';\nimport {transformDiscoverToList} from '../transforms/transformDiscoverToList';\nimport {transformEventsRequestToVitals} from '../transforms/transformEventsToVitals';\nimport {PerformanceWidgetProps, QueryDefinition, WidgetDataResult} from '../types';\nimport {eventsRequestQueryProps, getMEPQueryParams} from '../utils';\nimport {ChartDefinition, PerformanceWidgetSetting} from '../widgetDefinitions';\n\ntype DataType = {\n  chart: WidgetDataResult & ReturnType<typeof transformEventsRequestToVitals>;\n  list: WidgetDataResult & ReturnType<typeof transformDiscoverToList>;\n};\n\nfunction getVitalFields(baseField: string) {\n  const poorCountField = `count_web_vitals(${baseField}, poor)`;\n  const mehCountField = `count_web_vitals(${baseField}, meh)`;\n  const goodCountField = `count_web_vitals(${baseField}, good)`;\n\n  const vitalFields = {\n    poorCountField,\n    mehCountField,\n    goodCountField,\n  };\n  return vitalFields;\n}\n\nexport function transformFieldsWithStops(props: {\n  field: string;\n  fields: string[];\n  vitalStops: ChartDefinition['vitalStops'];\n}) {\n  const {field, fields, vitalStops} = props;\n  const poorStop = vitalStops?.poor;\n  const mehStop = vitalStops?.meh;\n\n  if (!defined(poorStop) || !defined(mehStop)) {\n    return {\n      sortField: fields[0],\n      fieldsList: fields,\n    };\n  }\n\n  const vitalFields = getVitalFields(field);\n\n  const fieldsList = [\n    vitalFields.poorCountField,\n    vitalFields.mehCountField,\n    vitalFields.goodCountField,\n  ];\n\n  return {\n    sortField: vitalFields.poorCountField,\n    vitalFields,\n    fieldsList,\n  };\n}\n\nexport function VitalWidget(props: PerformanceWidgetProps) {\n  const mepSetting = useMEPSettingContext();\n  const {ContainerActions, eventView, organization, location} = props;\n  const useEvents = organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n  const [selectedListIndex, setSelectListIndex] = useState<number>(0);\n  const field = props.fields[0];\n  const pageError = usePageError();\n\n  const {fieldsList, vitalFields, sortField} = transformFieldsWithStops({\n    field,\n    fields: props.fields,\n    vitalStops: props.chartDefinition.vitalStops,\n  });\n\n  const Queries = {\n    list: useMemo<QueryDefinition<DataType, WidgetDataResult>>(\n      () => ({\n        fields: sortField,\n        component: provided => {\n          const _eventView = provided.eventView.clone();\n\n          const fieldFromProps = fieldsList.map(propField => ({\n            field: propField,\n          }));\n\n          _eventView.sorts = [{kind: 'desc', field: sortField}];\n\n          _eventView.fields = [\n            {field: 'transaction'},\n            {field: 'title'},\n            {field: 'project.id'},\n            ...fieldFromProps,\n          ];\n          const mutableSearch = new MutableSearch(_eventView.query);\n          _eventView.query = mutableSearch.formatString();\n          return (\n            <DiscoverQuery\n              {...provided}\n              eventView={_eventView}\n              location={props.location}\n              limit={3}\n              cursor=\"0:0:1\"\n              noPagination\n              queryExtras={getMEPQueryParams(mepSetting)}\n              useEvents={useEvents}\n            />\n          );\n        },\n        transform: transformDiscoverToList,\n      }),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [props.eventView, fieldsList, props.organization.slug, mepSetting.memoizationKey]\n    ),\n    chart: useMemo<QueryDefinition<DataType, WidgetDataResult>>(\n      () => ({\n        enabled: widgetData => {\n          return !!widgetData?.list?.data?.length;\n        },\n        fields: fieldsList,\n        component: provided => {\n          const _eventView = provided.eventView.clone();\n\n          _eventView.additionalConditions.setFilterValues('transaction', [\n            provided.widgetData.list.data[selectedListIndex]?.transaction as string,\n          ]);\n\n          return (\n            <EventsRequest\n              {...pick(provided, eventsRequestQueryProps)}\n              limit={1}\n              currentSeriesNames={[sortField]}\n              includePrevious={false}\n              partial={false}\n              includeTransformedData\n              query={_eventView.getQueryWithAdditionalConditions()}\n              interval={getInterval(\n                {\n                  start: provided.start,\n                  end: provided.end,\n                  period: provided.period,\n                },\n                'medium'\n              )}\n              hideError\n              onError={pageError.setPageError}\n              queryExtras={getMEPQueryParams(mepSetting)}\n              userModified={decodeScalar(props.location.query.userModified)}\n            />\n          );\n        },\n        transform: transformEventsRequestToVitals,\n      }),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [\n        props.chartSetting,\n        selectedListIndex,\n        mepSetting.memoizationKey,\n        props.location.query.userModified,\n      ]\n    ),\n  };\n\n  const settingToVital: {[x: string]: WebVital} = {\n    [PerformanceWidgetSetting.WORST_LCP_VITALS]: WebVital.LCP,\n    [PerformanceWidgetSetting.WORST_FCP_VITALS]: WebVital.FCP,\n    [PerformanceWidgetSetting.WORST_FID_VITALS]: WebVital.FID,\n    [PerformanceWidgetSetting.WORST_CLS_VITALS]: WebVital.CLS,\n  };\n\n  const handleViewAllClick = () => {\n    // TODO(k-fish): Add analytics.\n  };\n\n  return (\n    <GenericPerformanceWidget<DataType>\n      {...props}\n      Subtitle={provided => {\n        const listItem = provided.widgetData.list?.data[selectedListIndex];\n\n        if (!listItem) {\n          return <Subtitle />;\n        }\n\n        const vital = settingToVital[props.chartSetting];\n\n        const data = {\n          [settingToVital[props.chartSetting]]: getVitalDataForListItem(\n            listItem,\n            vital,\n            !useEvents\n          ),\n        };\n\n        return (\n          <Subtitle>\n            <VitalBar\n              isLoading={provided.widgetData.list?.isLoading}\n              vital={settingToVital[props.chartSetting]}\n              data={data}\n              showBar={false}\n              showDurationDetail={false}\n              showDetail\n            />\n          </Subtitle>\n        );\n      }}\n      EmptyComponent={WidgetEmptyStateWarning}\n      HeaderActions={provided => {\n        const vital = settingToVital[props.chartSetting];\n        const target = vitalDetailRouteWithQuery({\n          orgSlug: organization.slug,\n          query: eventView.generateQueryStringObject(),\n          vitalName: vital,\n          projectID: decodeList(location.query.project),\n        });\n\n        return (\n          <Fragment>\n            <div>\n              <Button\n                onClick={handleViewAllClick}\n                to={target}\n                size=\"small\"\n                data-test-id=\"view-all-button\"\n              >\n                {t('View All')}\n              </Button>\n            </div>\n            <ContainerActions {...provided.widgetData.chart} />\n          </Fragment>\n        );\n      }}\n      Queries={Queries}\n      Visualizations={[\n        {\n          component: provided => (\n            <_VitalChart\n              {...provided.widgetData.chart}\n              {...provided}\n              field={field}\n              vitalFields={vitalFields}\n              grid={provided.grid}\n            />\n          ),\n          height: props.chartHeight,\n        },\n        {\n          component: provided => (\n            <SelectableList\n              selectedIndex={selectedListIndex}\n              setSelectedIndex={setSelectListIndex}\n              items={provided.widgetData.list.data.map(listItem => () => {\n                const transaction = listItem?.transaction as string;\n                const _eventView = eventView.clone();\n\n                const initialConditions = new MutableSearch(_eventView.query);\n                initialConditions.addFilterValues('transaction', [transaction]);\n\n                const vital = settingToVital[props.chartSetting];\n\n                _eventView.query = initialConditions.formatString();\n\n                const target = vitalDetailRouteWithQuery({\n                  orgSlug: organization.slug,\n                  query: _eventView.generateQueryStringObject(),\n                  vitalName: vital,\n                  projectID: decodeList(location.query.project),\n                });\n\n                const data = {\n                  [settingToVital[props.chartSetting]]: getVitalDataForListItem(\n                    listItem,\n                    vital,\n                    !useEvents\n                  ),\n                };\n\n                return (\n                  <Fragment>\n                    <GrowLink to={target}>\n                      <Truncate value={transaction} maxLength={40} />\n                    </GrowLink>\n                    <VitalBarCell>\n                      <VitalBar\n                        isLoading={provided.widgetData.list?.isLoading}\n                        vital={settingToVital[props.chartSetting]}\n                        data={data}\n                        showBar\n                        showDurationDetail={false}\n                        showDetail={false}\n                        showTooltip\n                        barHeight={20}\n                      />\n                    </VitalBarCell>\n                    {!props.withStaticFilters && (\n                      <ListClose\n                        setSelectListIndex={setSelectListIndex}\n                        onClick={() => excludeTransaction(listItem.transaction, props)}\n                      />\n                    )}\n                  </Fragment>\n                );\n              })}\n            />\n          ),\n          height: 124,\n          noPadding: true,\n        },\n      ]}\n    />\n  );\n}\n\nfunction getVitalDataForListItem(\n  listItem: TableDataRow,\n  vital: WebVital,\n  useAggregateAlias: boolean = true\n) {\n  const vitalFields = getVitalFields(vital);\n  const transformFieldName = (fieldName: string) =>\n    useAggregateAlias ? getAggregateAlias(fieldName) : fieldName;\n  const poorData: number =\n    (listItem[transformFieldName(vitalFields.poorCountField)] as number) || 0;\n  const mehData: number =\n    (listItem[transformFieldName(vitalFields.mehCountField)] as number) || 0;\n  const goodData: number =\n    (listItem[transformFieldName(vitalFields.goodCountField)] as number) || 0;\n  const _vitalData = {\n    poor: poorData,\n    meh: mehData,\n    good: goodData,\n    p75: 0,\n  };\n  const vitalData: VitalData = {\n    ..._vitalData,\n    total: _vitalData.poor + _vitalData.meh + _vitalData.good,\n  };\n\n  return vitalData;\n}\n\nexport const VitalBarCell = styled(RightAlignedCell)`\n  width: 120px;\n  margin-left: ${space(1)};\n  margin-right: ${space(1)};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nconst EventsRequest = withApi(_EventsRequest);\n","import {useEffect, useState} from 'react';\nimport pick from 'lodash/pick';\n\nimport DropdownButtonV2 from 'sentry/components/dropdownButtonV2';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport {IconEllipsis} from 'sentry/icons/iconEllipsis';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {usePerformanceDisplayType} from 'sentry/utils/performance/contexts/performanceDisplayContext';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {GenericPerformanceWidgetDataType} from '../types';\nimport {_setChartSetting, getChartSetting} from '../utils';\nimport {PerformanceWidgetSetting, WIDGET_DEFINITIONS} from '../widgetDefinitions';\nimport {HistogramWidget} from '../widgets/histogramWidget';\nimport {LineChartListWidget} from '../widgets/lineChartListWidget';\nimport {SingleFieldAreaWidget} from '../widgets/singleFieldAreaWidget';\nimport {TrendsWidget} from '../widgets/trendsWidget';\nimport {VitalWidget} from '../widgets/vitalWidget';\n\nimport {ChartRowProps} from './widgetChartRow';\n\ntype Props = {\n  allowedCharts: PerformanceWidgetSetting[];\n  chartHeight: number;\n  defaultChartSetting: PerformanceWidgetSetting;\n  eventView: EventView;\n  index: number;\n  organization: Organization;\n  rowChartSettings: PerformanceWidgetSetting[];\n  setRowChartSettings: (settings: PerformanceWidgetSetting[]) => void;\n  withStaticFilters: boolean;\n  chartColor?: string;\n  forceDefaultChartSetting?: boolean;\n} & ChartRowProps;\n\nfunction trackChartSettingChange(\n  previousChartSetting: PerformanceWidgetSetting,\n  chartSetting: PerformanceWidgetSetting,\n  fromDefault: boolean,\n  organization: Organization\n) {\n  trackAdvancedAnalyticsEvent('performance_views.landingv3.widget.switch', {\n    organization,\n    from_widget: previousChartSetting,\n    to_widget: chartSetting,\n    from_default: fromDefault,\n  });\n}\n\nconst _WidgetContainer = (props: Props) => {\n  const {\n    organization,\n    index,\n    chartHeight,\n    allowedCharts,\n    rowChartSettings,\n    setRowChartSettings,\n    ...rest\n  } = props;\n  const performanceType = usePerformanceDisplayType();\n  let _chartSetting = getChartSetting(\n    index,\n    chartHeight,\n    performanceType,\n    rest.defaultChartSetting,\n    rest.forceDefaultChartSetting\n  );\n\n  if (!allowedCharts.includes(_chartSetting)) {\n    _chartSetting = rest.defaultChartSetting;\n  }\n\n  const [chartSetting, setChartSettingState] = useState(_chartSetting);\n\n  const setChartSetting = (setting: PerformanceWidgetSetting) => {\n    if (!props.forceDefaultChartSetting) {\n      _setChartSetting(index, chartHeight, performanceType, setting);\n    }\n    setChartSettingState(setting);\n    const newSettings = [...rowChartSettings];\n    newSettings[index] = setting;\n    setRowChartSettings(newSettings);\n    trackChartSettingChange(\n      chartSetting,\n      setting,\n      rest.defaultChartSetting === chartSetting,\n      organization\n    );\n  };\n\n  useEffect(() => {\n    setChartSettingState(_chartSetting);\n  }, [rest.defaultChartSetting]);\n\n  const chartDefinition = WIDGET_DEFINITIONS({organization})[chartSetting];\n  const widgetProps = {\n    ...chartDefinition,\n    chartSetting,\n    chartDefinition,\n    ContainerActions: containerProps => (\n      <WidgetContainerActions\n        {...containerProps}\n        allowedCharts={props.allowedCharts}\n        chartSetting={chartSetting}\n        setChartSetting={setChartSetting}\n        rowChartSettings={rowChartSettings}\n      />\n    ),\n  };\n\n  const passedProps = pick(props, [\n    'eventView',\n    'location',\n    'organization',\n    'chartHeight',\n    'withStaticFilters',\n  ]);\n\n  switch (widgetProps.dataType) {\n    case GenericPerformanceWidgetDataType.trends:\n      return <TrendsWidget {...passedProps} {...widgetProps} />;\n    case GenericPerformanceWidgetDataType.area:\n      return <SingleFieldAreaWidget {...passedProps} {...widgetProps} />;\n    case GenericPerformanceWidgetDataType.vitals:\n      return <VitalWidget {...passedProps} {...widgetProps} />;\n    case GenericPerformanceWidgetDataType.line_list:\n      return <LineChartListWidget {...passedProps} {...widgetProps} />;\n    case GenericPerformanceWidgetDataType.histogram:\n      return <HistogramWidget {...passedProps} {...widgetProps} />;\n    default:\n      throw new Error(`Widget type \"${widgetProps.dataType}\" has no implementation.`);\n  }\n};\n\nexport const WidgetContainerActions = ({\n  chartSetting,\n  setChartSetting,\n  allowedCharts,\n  rowChartSettings,\n}: {\n  allowedCharts: PerformanceWidgetSetting[];\n  chartSetting: PerformanceWidgetSetting;\n  rowChartSettings: PerformanceWidgetSetting[];\n  setChartSetting: (setting: PerformanceWidgetSetting) => void;\n}) => {\n  const organization = useOrganization();\n  const menuOptions: React.ComponentProps<typeof CompactSelect>['options'] = [];\n\n  const settingsMap = WIDGET_DEFINITIONS({organization});\n  for (const setting of allowedCharts) {\n    const options = settingsMap[setting];\n    menuOptions.push({\n      value: setting,\n      label: options.title,\n      disabled: setting !== chartSetting && rowChartSettings.includes(setting),\n    });\n  }\n\n  function trigger({props, ref}) {\n    return (\n      <DropdownButtonV2\n        ref={ref}\n        {...props}\n        size=\"xsmall\"\n        borderless\n        showChevron={false}\n        icon={<IconEllipsis aria-label={t('More')} />}\n      />\n    );\n  }\n\n  return (\n    <CompactSelect\n      onChange={opt => setChartSetting(opt.value)}\n      options={menuOptions}\n      isOptionDisabled={opt => opt.disabled}\n      value={chartSetting}\n      trigger={trigger}\n      placement=\"bottom right\"\n    />\n  );\n};\n\nconst WidgetContainer = withOrganization(_WidgetContainer);\n\nexport default WidgetContainer;\n","import {useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {PerformanceLayoutBodyRow} from 'sentry/components/performance/layouts';\nimport space from 'sentry/styles/space';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {usePerformanceDisplayType} from 'sentry/utils/performance/contexts/performanceDisplayContext';\nimport {PROJECT_PERFORMANCE_TYPE} from 'sentry/views/performance/utils';\n\nimport {getChartSetting} from '../utils';\nimport {PerformanceWidgetSetting} from '../widgetDefinitions';\n\nimport WidgetContainer from './widgetContainer';\n\nexport type ChartRowProps = {\n  allowedCharts: PerformanceWidgetSetting[];\n  chartCount: number;\n  chartHeight: number;\n  eventView: EventView;\n  location: Location;\n  withStaticFilters: boolean;\n};\n\nfunction getInitialChartSettings(\n  chartCount: number,\n  chartHeight: number,\n  performanceType: PROJECT_PERFORMANCE_TYPE,\n  allowedCharts: PerformanceWidgetSetting[]\n) {\n  return new Array(chartCount)\n    .fill(0)\n    .map((_, index) =>\n      getChartSetting(index, chartHeight, performanceType, allowedCharts[index])\n    );\n}\n\nconst ChartRow = (props: ChartRowProps) => {\n  const {chartCount, chartHeight, allowedCharts} = props;\n  const theme = useTheme();\n  const performanceType = usePerformanceDisplayType();\n  const palette = theme.charts.getColorPalette(chartCount);\n\n  const [chartSettings, setChartSettings] = useState(\n    getInitialChartSettings(chartCount, chartHeight, performanceType, allowedCharts)\n  );\n\n  if (props.allowedCharts.length < chartCount) {\n    throw new Error('Not enough allowed chart types to show row.');\n  }\n\n  return (\n    <StyledRow minSize={200}>\n      {new Array(chartCount).fill(0).map((_, index) => (\n        <WidgetContainer\n          {...props}\n          key={index}\n          index={index}\n          chartHeight={chartHeight}\n          chartColor={palette[index]}\n          defaultChartSetting={allowedCharts[index]}\n          rowChartSettings={chartSettings}\n          setRowChartSettings={setChartSettings}\n        />\n      ))}\n    </StyledRow>\n  );\n};\n\nexport const TripleChartRow = (props: ChartRowProps) => <ChartRow {...props} />;\n\nTripleChartRow.defaultProps = {\n  chartCount: 3,\n  chartHeight: 100,\n};\n\nexport const DoubleChartRow = (props: ChartRowProps) => <ChartRow {...props} />;\n\nDoubleChartRow.defaultProps = {\n  chartCount: 2,\n  chartHeight: 180,\n};\n\nconst StyledRow = styled(PerformanceLayoutBodyRow)`\n  margin-bottom: ${space(2)};\n`;\n","import {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {PerformanceDisplayProvider} from 'sentry/utils/performance/contexts/performanceDisplayContext';\n\nimport Table from '../../table';\nimport {PROJECT_PERFORMANCE_TYPE} from '../../utils';\nimport {DoubleChartRow, TripleChartRow} from '../widgets/components/widgetChartRow';\nimport {PerformanceWidgetSetting} from '../widgets/widgetDefinitions';\n\nimport {BasePerformanceViewProps} from './types';\n\nexport function AllTransactionsView(props: BasePerformanceViewProps) {\n  return (\n    <PerformanceDisplayProvider value={{performanceType: PROJECT_PERFORMANCE_TYPE.ANY}}>\n      <div data-test-id=\"all-transactions-view\">\n        <TripleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.USER_MISERY_AREA,\n            PerformanceWidgetSetting.TPM_AREA,\n            PerformanceWidgetSetting.FAILURE_RATE_AREA,\n            PerformanceWidgetSetting.APDEX_AREA,\n            PerformanceWidgetSetting.P50_DURATION_AREA,\n            PerformanceWidgetSetting.P75_DURATION_AREA,\n            PerformanceWidgetSetting.P95_DURATION_AREA,\n            PerformanceWidgetSetting.P99_DURATION_AREA,\n          ]}\n        />\n        <DoubleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.MOST_RELATED_ISSUES,\n            PerformanceWidgetSetting.MOST_IMPROVED,\n            PerformanceWidgetSetting.MOST_REGRESSED,\n          ]}\n        />\n        <Table {...props} setError={usePageError().setPageError} />\n      </div>\n    </PerformanceDisplayProvider>\n  );\n}\n","export const FRONTEND_PAGELOAD_COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'tpm',\n  'FCP',\n  'LCP',\n  'FID',\n  'CLS',\n  'users',\n  'user misery',\n];\n\nexport const FRONTEND_OTHER_COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'operation',\n  'tpm',\n  'p50()',\n  'p75()',\n  'p95()',\n  'users',\n  'user misery',\n];\n\nexport const BACKEND_COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'operation',\n  'http method',\n  'tpm',\n  'p50',\n  'p95',\n  'failure rate',\n  'apdex',\n  'users',\n  'user misery',\n];\n\nexport const MOBILE_COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'operation',\n  'tpm',\n  'slow frame %',\n  'frozen frame %',\n  'users',\n  'user misery',\n];\n\nexport const REACT_NATIVE_COLUMN_TITLES = [\n  'transaction',\n  'project',\n  'operation',\n  'tpm',\n  'slow frame %',\n  'frozen frame %',\n  'stall %',\n  'users',\n  'user misery',\n];\n","import {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {PerformanceDisplayProvider} from 'sentry/utils/performance/contexts/performanceDisplayContext';\n\nimport Table from '../../table';\nimport {PROJECT_PERFORMANCE_TYPE} from '../../utils';\nimport {BACKEND_COLUMN_TITLES} from '../data';\nimport {DoubleChartRow, TripleChartRow} from '../widgets/components/widgetChartRow';\nimport {PerformanceWidgetSetting} from '../widgets/widgetDefinitions';\n\nimport {BasePerformanceViewProps} from './types';\n\nexport function BackendView(props: BasePerformanceViewProps) {\n  return (\n    <PerformanceDisplayProvider value={{performanceType: PROJECT_PERFORMANCE_TYPE.ANY}}>\n      <div>\n        <TripleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.APDEX_AREA,\n            PerformanceWidgetSetting.TPM_AREA,\n            PerformanceWidgetSetting.FAILURE_RATE_AREA,\n            PerformanceWidgetSetting.USER_MISERY_AREA,\n            PerformanceWidgetSetting.P50_DURATION_AREA,\n            PerformanceWidgetSetting.P75_DURATION_AREA,\n            PerformanceWidgetSetting.P95_DURATION_AREA,\n            PerformanceWidgetSetting.P99_DURATION_AREA,\n            PerformanceWidgetSetting.DURATION_HISTOGRAM,\n          ]}\n        />\n        <DoubleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.SLOW_HTTP_OPS,\n            PerformanceWidgetSetting.SLOW_DB_OPS,\n            PerformanceWidgetSetting.MOST_IMPROVED,\n            PerformanceWidgetSetting.MOST_REGRESSED,\n          ]}\n        />\n        <Table\n          {...props}\n          columnTitles={BACKEND_COLUMN_TITLES}\n          setError={usePageError().setPageError}\n        />\n      </div>\n    </PerformanceDisplayProvider>\n  );\n}\n","import {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {PerformanceDisplayProvider} from 'sentry/utils/performance/contexts/performanceDisplayContext';\n\nimport Table from '../../table';\nimport {PROJECT_PERFORMANCE_TYPE} from '../../utils';\nimport {FRONTEND_OTHER_COLUMN_TITLES} from '../data';\nimport {DoubleChartRow, TripleChartRow} from '../widgets/components/widgetChartRow';\nimport {PerformanceWidgetSetting} from '../widgets/widgetDefinitions';\n\nimport {BasePerformanceViewProps} from './types';\n\nexport function FrontendOtherView(props: BasePerformanceViewProps) {\n  return (\n    <PerformanceDisplayProvider\n      value={{performanceType: PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER}}\n    >\n      <div>\n        <TripleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.TPM_AREA,\n            PerformanceWidgetSetting.DURATION_HISTOGRAM,\n            PerformanceWidgetSetting.P50_DURATION_AREA,\n            PerformanceWidgetSetting.P75_DURATION_AREA,\n            PerformanceWidgetSetting.P95_DURATION_AREA,\n            PerformanceWidgetSetting.P99_DURATION_AREA,\n          ]}\n        />\n        <DoubleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.MOST_RELATED_ISSUES,\n            PerformanceWidgetSetting.SLOW_HTTP_OPS,\n            PerformanceWidgetSetting.SLOW_RESOURCE_OPS,\n          ]}\n        />\n        <Table\n          {...props}\n          columnTitles={FRONTEND_OTHER_COLUMN_TITLES}\n          setError={usePageError().setPageError}\n        />\n      </div>\n    </PerformanceDisplayProvider>\n  );\n}\n","import {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {PerformanceDisplayProvider} from 'sentry/utils/performance/contexts/performanceDisplayContext';\n\nimport Table from '../../table';\nimport {PROJECT_PERFORMANCE_TYPE} from '../../utils';\nimport {FRONTEND_PAGELOAD_COLUMN_TITLES} from '../data';\nimport {DoubleChartRow, TripleChartRow} from '../widgets/components/widgetChartRow';\nimport {PerformanceWidgetSetting} from '../widgets/widgetDefinitions';\n\nimport {BasePerformanceViewProps} from './types';\n\nexport function FrontendPageloadView(props: BasePerformanceViewProps) {\n  return (\n    <PerformanceDisplayProvider\n      value={{performanceType: PROJECT_PERFORMANCE_TYPE.FRONTEND}}\n    >\n      <div data-test-id=\"frontend-pageload-view\">\n        <TripleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.P75_LCP_AREA,\n            PerformanceWidgetSetting.LCP_HISTOGRAM,\n            PerformanceWidgetSetting.FCP_HISTOGRAM,\n            PerformanceWidgetSetting.USER_MISERY_AREA,\n            PerformanceWidgetSetting.TPM_AREA,\n          ]}\n        />\n        <DoubleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.WORST_LCP_VITALS,\n            PerformanceWidgetSetting.WORST_FCP_VITALS,\n            PerformanceWidgetSetting.WORST_FID_VITALS,\n            PerformanceWidgetSetting.MOST_RELATED_ISSUES,\n            PerformanceWidgetSetting.SLOW_HTTP_OPS,\n            PerformanceWidgetSetting.SLOW_BROWSER_OPS,\n            PerformanceWidgetSetting.SLOW_RESOURCE_OPS,\n          ]}\n        />\n        <Table\n          {...props}\n          columnTitles={FRONTEND_PAGELOAD_COLUMN_TITLES}\n          setError={usePageError().setPageError}\n        />\n      </div>\n    </PerformanceDisplayProvider>\n  );\n}\n","import {usePageError} from 'sentry/utils/performance/contexts/pageError';\nimport {PerformanceDisplayProvider} from 'sentry/utils/performance/contexts/performanceDisplayContext';\n\nimport Table from '../../table';\nimport {PROJECT_PERFORMANCE_TYPE} from '../../utils';\nimport {MOBILE_COLUMN_TITLES, REACT_NATIVE_COLUMN_TITLES} from '../data';\nimport {checkIsReactNative} from '../utils';\nimport {DoubleChartRow, TripleChartRow} from '../widgets/components/widgetChartRow';\nimport {PerformanceWidgetSetting} from '../widgets/widgetDefinitions';\n\nimport {BasePerformanceViewProps} from './types';\n\nexport function MobileView(props: BasePerformanceViewProps) {\n  const columnTitles = checkIsReactNative(props.eventView)\n    ? REACT_NATIVE_COLUMN_TITLES\n    : MOBILE_COLUMN_TITLES;\n  return (\n    <PerformanceDisplayProvider value={{performanceType: PROJECT_PERFORMANCE_TYPE.ANY}}>\n      <div>\n        <TripleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.TPM_AREA,\n            PerformanceWidgetSetting.COLD_STARTUP_AREA,\n            PerformanceWidgetSetting.WARM_STARTUP_AREA,\n            PerformanceWidgetSetting.SLOW_FRAMES_AREA,\n            PerformanceWidgetSetting.FROZEN_FRAMES_AREA,\n          ]}\n        />\n        <DoubleChartRow\n          {...props}\n          allowedCharts={[\n            PerformanceWidgetSetting.MOST_SLOW_FRAMES,\n            PerformanceWidgetSetting.MOST_FROZEN_FRAMES,\n            PerformanceWidgetSetting.MOST_IMPROVED,\n            PerformanceWidgetSetting.MOST_REGRESSED,\n          ]}\n        />\n        <Table\n          {...props}\n          columnTitles={columnTitles}\n          setError={usePageError().setPageError}\n        />\n      </div>\n    </PerformanceDisplayProvider>\n  );\n}\n","import {Fragment, ReactNode, useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\n\ntype Props = {\n  eventView: EventView;\n  isMEPEnabled: boolean;\n  onApply: (isMEPEnabled: boolean) => void;\n  organization: Organization;\n  projects: Project[];\n} & ModalRenderProps;\n\nconst SamplingModal = (props: Props) => {\n  const {Header, Body, Footer, organization, eventView, isMEPEnabled, projects} = props;\n\n  const project = projects.find(p => `${eventView.project[0]}` === p.id);\n\n  const choices: [string, ReactNode][] = [\n    ['true', t('Automatically switch to sampled data when required')],\n    ['false', t('Always show sampled data')],\n  ];\n\n  const [choice, setChoice] = useState(choices[isMEPEnabled ? 0 : 1][0]);\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Sampling Settings')}</h4>\n      </Header>\n      <Body>\n        <Instruction>\n          {tct(\n            \"The visualizations shown are based on your data without any filters or sampling. This does not contribute to your quota usage but transaction details are limited. If you'd like to improve accuracy, we recommend adding more transactions to your quota. or modifying your dataset through [projectSettings: Sampling in settings].\",\n            {\n              projectSettings: (\n                <Link\n                  to={`/settings/${organization.slug}/projects/${project?.slug}/filters-and-sampling/`}\n                />\n              ),\n            }\n          )}\n        </Instruction>\n        <Instruction>\n          <RadioGroup\n            style={{flex: 1}}\n            choices={choices}\n            value={choice}\n            label=\"\"\n            onChange={(id: string) => setChoice(id)}\n          />\n        </Instruction>\n      </Body>\n      <Footer>\n        <ButtonBar gap={1}>\n          <Button priority=\"default\" onClick={() => {}} data-test-id=\"reset-all\">\n            {t('Read the docs')}\n          </Button>\n          <Button\n            aria-label={t('Apply')}\n            priority=\"primary\"\n            onClick={event => {\n              event.preventDefault();\n              props.closeModal();\n              // Use onApply since modal might be outside of the provider due to portal/wormholing.\n              props.onApply(choice === 'true');\n            }}\n            data-test-id=\"apply-threshold\"\n          >\n            {t('Apply')}\n          </Button>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n};\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport default SamplingModal;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n","import {FC, Fragment, useEffect, useRef} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Feature from 'sentry/components/acl/feature';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport {GlobalSdkUpdateAlert} from 'sentry/components/globalSdkUpdateAlert';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageHeading from 'sentry/components/pageHeading';\nimport TransactionNameSearchBar from 'sentry/components/performance/searchBar';\nimport * as TeamKeyTransactionManager from 'sentry/components/performance/teamKeyTransactionsManager';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {IconSettings} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {generateAggregateFields} from 'sentry/utils/discover/fields';\nimport {GenericQueryBatcher} from 'sentry/utils/performance/contexts/genericQueryBatcher';\nimport {\n  PageErrorAlert,\n  PageErrorProvider,\n} from 'sentry/utils/performance/contexts/pageError';\nimport useTeams from 'sentry/utils/useTeams';\n\nimport Onboarding from '../onboarding';\nimport {MetricsEventsDropdown} from '../transactionSummary/transactionOverview/metricEvents/metricsEventsDropdown';\nimport {getTransactionSearchQuery} from '../utils';\n\nimport {AllTransactionsView} from './views/allTransactionsView';\nimport {BackendView} from './views/backendView';\nimport {FrontendOtherView} from './views/frontendOtherView';\nimport {FrontendPageloadView} from './views/frontendPageloadView';\nimport {MobileView} from './views/mobileView';\nimport SamplingModal, {modalCss} from './samplingModal';\nimport {\n  getDefaultDisplayForPlatform,\n  getLandingDisplayFromParam,\n  handleLandingDisplayChange,\n  LANDING_DISPLAYS,\n  LandingDisplayField,\n} from './utils';\n\ntype Props = {\n  eventView: EventView;\n  handleSearch: (searchQuery: string) => void;\n  handleTrendsClick: () => void;\n  location: Location;\n  onboardingProject: Project | undefined;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n  setError: (msg: string | undefined) => void;\n  withStaticFilters: boolean;\n};\n\nconst fieldToViewMap: Record<LandingDisplayField, FC<Props>> = {\n  [LandingDisplayField.ALL]: AllTransactionsView,\n  [LandingDisplayField.BACKEND]: BackendView,\n  [LandingDisplayField.FRONTEND_OTHER]: FrontendOtherView,\n  [LandingDisplayField.FRONTEND_PAGELOAD]: FrontendPageloadView,\n  [LandingDisplayField.MOBILE]: MobileView,\n};\n\nexport function PerformanceLanding(props: Props) {\n  const {\n    organization,\n    location,\n    eventView,\n    projects,\n    handleSearch,\n    handleTrendsClick,\n    onboardingProject,\n    withStaticFilters,\n  } = props;\n\n  const {teams, initiallyLoaded} = useTeams({provideUserTeams: true});\n\n  const hasMounted = useRef(false);\n  const paramLandingDisplay = getLandingDisplayFromParam(location);\n  const defaultLandingDisplayForProjects = getDefaultDisplayForPlatform(\n    projects,\n    eventView\n  );\n  const landingDisplay = paramLandingDisplay ?? defaultLandingDisplayForProjects;\n  const showOnboarding = onboardingProject !== undefined;\n\n  useEffect(() => {\n    if (hasMounted.current) {\n      browserHistory.replace({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          landingDisplay: undefined,\n        },\n      });\n    }\n  }, [eventView.project.join('.')]);\n\n  useEffect(() => {\n    hasMounted.current = true;\n  }, []);\n\n  const filterString = withStaticFilters\n    ? 'transaction.duration:<15m'\n    : getTransactionSearchQuery(location, eventView.query);\n\n  const ViewComponent = fieldToViewMap[landingDisplay.field];\n\n  const fnOpenModal = () => {\n    openModal(\n      modalProps => (\n        <SamplingModal\n          {...modalProps}\n          organization={organization}\n          eventView={eventView}\n          projects={projects}\n          onApply={() => {}}\n          isMEPEnabled\n        />\n      ),\n      {modalCss, backdrop: 'static'}\n    );\n  };\n\n  let pageFilters: React.ReactNode = (\n    <PageFilterBar condensed>\n      <ProjectPageFilter />\n      <EnvironmentPageFilter />\n      <DatePageFilter alignDropdown=\"left\" />\n    </PageFilterBar>\n  );\n\n  if (showOnboarding) {\n    pageFilters = <SearchContainerWithFilter>{pageFilters}</SearchContainerWithFilter>;\n  }\n\n  const SearchFilterContainer = organization.features.includes('performance-use-metrics')\n    ? SearchContainerWithFilterAndMetrics\n    : SearchContainerWithFilter;\n\n  return (\n    <StyledPageContent data-test-id=\"performance-landing-v3\">\n      <PageErrorProvider>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <StyledHeading>{t('Performance')}</StyledHeading>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            {!showOnboarding && (\n              <ButtonBar gap={3}>\n                <Button\n                  priority=\"primary\"\n                  data-test-id=\"landing-header-trends\"\n                  onClick={() => handleTrendsClick()}\n                >\n                  {t('View Trends')}\n                </Button>\n                <Feature features={['organizations:performance-use-metrics']}>\n                  <Button\n                    onClick={() => fnOpenModal()}\n                    icon={<IconSettings />}\n                    aria-label={t('Settings')}\n                    data-test-id=\"open-meps-settings\"\n                  />\n                </Feature>\n              </ButtonBar>\n            )}\n          </Layout.HeaderActions>\n\n          <Layout.HeaderNavTabs>\n            {LANDING_DISPLAYS.map(({label, field}) => (\n              <li key={label} className={landingDisplay.field === field ? 'active' : ''}>\n                <a\n                  href=\"#\"\n                  data-test-id={`landing-tab-${field}`}\n                  onClick={() =>\n                    handleLandingDisplayChange(\n                      field,\n                      location,\n                      projects,\n                      organization,\n                      eventView\n                    )\n                  }\n                >\n                  {t(label)}\n                </a>\n              </li>\n            ))}\n          </Layout.HeaderNavTabs>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>\n            <GlobalSdkUpdateAlert />\n            <PageErrorAlert />\n            {showOnboarding ? (\n              <Fragment>\n                {pageFilters}\n                <Onboarding organization={organization} project={onboardingProject} />\n              </Fragment>\n            ) : (\n              <Fragment>\n                <SearchFilterContainer>\n                  {pageFilters}\n                  <Feature\n                    features={['organizations:performance-transaction-name-only-search']}\n                  >\n                    {({hasFeature}) =>\n                      hasFeature ? (\n                        // TODO replace `handleSearch prop` with transaction name search once\n                        // transaction name search becomes the default search bar\n                        <TransactionNameSearchBar\n                          organization={organization}\n                          location={location}\n                          eventView={eventView}\n                        />\n                      ) : (\n                        <SearchBar\n                          searchSource=\"performance_landing\"\n                          organization={organization}\n                          projectIds={eventView.project}\n                          query={filterString}\n                          fields={generateAggregateFields(\n                            organization,\n                            [...eventView.fields, {field: 'tps()'}],\n                            ['epm()', 'eps()']\n                          )}\n                          onSearch={handleSearch}\n                          maxQueryLength={MAX_QUERY_LENGTH}\n                        />\n                      )\n                    }\n                  </Feature>\n                  <Feature\n                    features={['organizations:performance-transaction-name-only-search']}\n                  >\n                    {({hasFeature}) => hasFeature && <MetricsEventsDropdown />}\n                  </Feature>\n                </SearchFilterContainer>\n                {initiallyLoaded ? (\n                  <TeamKeyTransactionManager.Provider\n                    organization={organization}\n                    teams={teams}\n                    selectedTeams={['myteams']}\n                    selectedProjects={eventView.project.map(String)}\n                  >\n                    <GenericQueryBatcher>\n                      <ViewComponent {...props} />\n                    </GenericQueryBatcher>\n                  </TeamKeyTransactionManager.Provider>\n                ) : (\n                  <LoadingIndicator />\n                )}\n              </Fragment>\n            )}\n          </Layout.Main>\n        </Layout.Body>\n      </PageErrorProvider>\n    </StyledPageContent>\n  );\n}\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n\nconst StyledHeading = styled(PageHeading)`\n  line-height: 40px;\n`;\n\nconst SearchContainerWithFilter = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr;\n  }\n`;\n\nconst SearchContainerWithFilterAndMetrics = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto auto;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-rows: auto;\n    grid-template-columns: auto 1fr auto;\n  }\n`;\n","import {useEffect, useRef, useState} from 'react';\nimport {browserHistory, InjectedRouter} from 'react-router';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {PageFilters, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {PerformanceEventViewProvider} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePrevious from 'sentry/utils/usePrevious';\nimport useProjects from 'sentry/utils/useProjects';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {DEFAULT_STATS_PERIOD, generatePerformanceEventView} from './data';\nimport {PerformanceLanding} from './landing';\nimport {addRoutePerformanceContext, handleTrendsClick} from './utils';\n\ntype Props = {\n  location: Location;\n  router: InjectedRouter;\n  selection: PageFilters;\n  demoMode?: boolean;\n};\n\ntype State = {\n  error?: string;\n};\n\nfunction PerformanceContent({selection, location, demoMode}: Props) {\n  const api = useApi();\n  const organization = useOrganization();\n  const {projects} = useProjects();\n  const mounted = useRef(false);\n  const previousDateTime = usePrevious(selection.datetime);\n\n  const [state, setState] = useState<State>({error: undefined});\n  const withStaticFilters = organization.features.includes(\n    'performance-transaction-name-only-search'\n  );\n\n  const eventView = generatePerformanceEventView(location, projects, {\n    withStaticFilters,\n  });\n\n  function getOnboardingProject(): Project | undefined {\n    // XXX used by getsentry to bypass onboarding for the upsell demo state.\n    if (demoMode) {\n      return undefined;\n    }\n\n    if (projects.length === 0) {\n      return undefined;\n    }\n\n    // Current selection is 'my projects' or 'all projects'\n    if (eventView.project.length === 0 || eventView.project === [ALL_ACCESS_PROJECTS]) {\n      const filtered = projects.filter(p => p.firstTransactionEvent === false);\n      if (filtered.length === projects.length) {\n        return filtered[0];\n      }\n    }\n\n    // Any other subset of projects.\n    const filtered = projects.filter(\n      p =>\n        eventView.project.includes(parseInt(p.id, 10)) &&\n        p.firstTransactionEvent === false\n    );\n    if (filtered.length === eventView.project.length) {\n      return filtered[0];\n    }\n\n    return undefined;\n  }\n\n  const onboardingProject = getOnboardingProject();\n\n  useEffect(() => {\n    if (!mounted.current) {\n      trackAdvancedAnalyticsEvent('performance_views.overview.view', {\n        organization,\n        show_onboarding: onboardingProject !== undefined,\n      });\n      loadOrganizationTags(api, organization.slug, selection);\n      addRoutePerformanceContext(selection);\n      mounted.current = true;\n      return;\n    }\n    if (!isEqual(previousDateTime, selection.datetime)) {\n      loadOrganizationTags(api, organization.slug, selection);\n      addRoutePerformanceContext(selection);\n    }\n  }, [\n    selection.datetime,\n    previousDateTime,\n    selection,\n    api,\n    organization,\n    onboardingProject,\n  ]);\n\n  function setError(newError?: string) {\n    if (\n      typeof newError === 'object' ||\n      (Array.isArray(newError) && typeof newError[0] === 'object')\n    ) {\n      Sentry.withScope(scope => {\n        scope.setExtra('error', newError);\n        Sentry.captureException(new Error('setError failed with error type.'));\n      });\n      return;\n    }\n    setState({...state, error: newError});\n  }\n\n  function handleSearch(searchQuery: string) {\n    trackAdvancedAnalyticsEvent('performance_views.overview.search', {organization});\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(searchQuery).trim() || undefined,\n        isDefaultQuery: false,\n        userModified: true,\n      },\n    });\n  }\n\n  return (\n    <SentryDocumentTitle title={t('Performance')} orgSlug={organization.slug}>\n      <PerformanceEventViewProvider value={{eventView}}>\n        <MEPSettingProvider>\n          <PageFiltersContainer\n            defaultSelection={{\n              datetime: {\n                start: null,\n                end: null,\n                utc: false,\n                period: DEFAULT_STATS_PERIOD,\n              },\n            }}\n            hideGlobalHeader\n          >\n            <PerformanceLanding\n              eventView={eventView}\n              setError={setError}\n              handleSearch={handleSearch}\n              handleTrendsClick={() => handleTrendsClick({location, organization})}\n              onboardingProject={onboardingProject}\n              organization={organization}\n              location={location}\n              projects={projects}\n              selection={selection}\n              withStaticFilters={withStaticFilters}\n            />\n          </PageFiltersContainer>\n        </MEPSettingProvider>\n      </PerformanceEventViewProvider>\n    </SentryDocumentTitle>\n  );\n}\n\nexport default withPageFilters(PerformanceContent);\n","import Feature from 'sentry/components/acl/feature';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport {t} from 'sentry/locale';\nimport {\n  AutoSampleState,\n  MEPState,\n  MetricsEnhancedSettingContext,\n  useMEPSettingContext,\n} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\n\ninterface MetricsEventsOption {\n  field: MEPState;\n  label: string;\n  prefix: string;\n}\n\nconst autoTextMap: Record<AutoSampleState, string> = {\n  [AutoSampleState.unset]: t('Auto'),\n  [AutoSampleState.metrics]: t('Auto (ingested)'),\n  [AutoSampleState.transactions]: t('Auto (stored)'),\n};\n\nfunction getOptions(mepContext: MetricsEnhancedSettingContext): MetricsEventsOption[] {\n  const autoText = autoTextMap[mepContext.autoSampleState];\n  const prefix = t('Sample');\n\n  return [\n    {\n      field: MEPState.auto,\n      prefix,\n      label: autoText,\n    },\n    {\n      field: MEPState.metricsOnly,\n      prefix,\n      label: t('Ingested only'),\n    },\n    {\n      field: MEPState.transactionsOnly,\n      prefix,\n      label: t('Stored only'),\n    },\n  ];\n}\n\nexport function MetricsEventsDropdown() {\n  return (\n    <Feature features={['performance-use-metrics']}>\n      <InnerDropdown />\n    </Feature>\n  );\n}\n\nfunction InnerDropdown() {\n  const mepSetting = useMEPSettingContext();\n\n  const options = getOptions(mepSetting);\n\n  const currentOption =\n    options.find(({field}) => field === mepSetting.metricSettingState) || options[0];\n\n  return (\n    <DropdownControl\n      buttonProps={{prefix: currentOption.prefix}}\n      label={currentOption.label}\n    >\n      {options.map(option => (\n        <DropdownItem\n          key={option.field}\n          eventKey={option.field}\n          isActive={option.field === currentOption.field}\n          onSelect={key => mepSetting.setMetricSettingState(key)}\n        >\n          {option.label}\n        </DropdownItem>\n      ))}\n    </DropdownControl>\n  );\n}\n","import {Component, Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport cloneDeep from 'lodash/cloneDeep';\nimport set from 'lodash/set';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Link from 'sentry/components/links/link';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {transactionSummaryRouteWithQuery} from './utils';\n\nexport enum TransactionThresholdMetric {\n  TRANSACTION_DURATION = 'duration',\n  LARGEST_CONTENTFUL_PAINT = 'lcp',\n}\n\nexport const METRIC_CHOICES = [\n  {label: t('Transaction Duration'), value: 'duration'},\n  {label: t('Largest Contentful Paint'), value: 'lcp'},\n];\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  organization: Organization;\n  projects: Project[];\n  transactionName: string;\n  transactionThreshold: number | undefined;\n  transactionThresholdMetric: TransactionThresholdMetric | undefined;\n  onApply?: (threshold, metric) => void;\n  project?: string;\n} & ModalRenderProps;\n\ntype State = {\n  error: string | null;\n  metric: TransactionThresholdMetric | undefined;\n  threshold: number | undefined;\n};\n\nclass TransactionThresholdModal extends Component<Props, State> {\n  state: State = {\n    threshold: this.props.transactionThreshold,\n    metric: this.props.transactionThresholdMetric,\n    error: null,\n  };\n\n  getProject() {\n    const {projects, eventView, project} = this.props;\n\n    if (defined(project)) {\n      return projects.find(proj => proj.id === project);\n    }\n    const projectId = String(eventView.project[0]);\n    return projects.find(proj => proj.id === projectId);\n  }\n\n  handleApply = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'POST',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n          threshold: this.state.threshold,\n          metric: this.state.metric,\n        },\n      })\n      .then(() => {\n        closeModal();\n        if (onApply) {\n          onApply(this.state.threshold, this.state.metric);\n        }\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n        const errorMessage =\n          err.responseJSON?.threshold ?? err.responseJSON?.non_field_errors ?? null;\n        addErrorMessage(errorMessage);\n      });\n  };\n\n  handleFieldChange = (field: string) => (value: string) => {\n    this.setState(prevState => {\n      const newState = cloneDeep(prevState);\n      set(newState, field, value);\n\n      return {...newState, errors: undefined};\n    });\n  };\n\n  handleReset = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const {api, closeModal, organization, transactionName, onApply} = this.props;\n\n    const project = this.getProject();\n    if (!defined(project)) {\n      return;\n    }\n\n    const transactionThresholdUrl = `/organizations/${organization.slug}/project-transaction-threshold-override/`;\n\n    api\n      .requestPromise(transactionThresholdUrl, {\n        method: 'DELETE',\n        includeAllArgs: true,\n        query: {\n          project: project.id,\n        },\n        data: {\n          transaction: transactionName,\n        },\n      })\n      .then(() => {\n        const projectThresholdUrl = `/projects/${organization.slug}/${project.slug}/transaction-threshold/configure/`;\n        this.props.api\n          .requestPromise(projectThresholdUrl, {\n            method: 'GET',\n            includeAllArgs: true,\n            query: {\n              project: project.id,\n            },\n          })\n          .then(([data]) => {\n            this.setState({\n              threshold: data.threshold,\n              metric: data.metric,\n            });\n            closeModal();\n            if (onApply) {\n              onApply(this.state.threshold, this.state.metric);\n            }\n          })\n          .catch(err => {\n            const errorMessage = err.responseJSON?.threshold ?? null;\n            addErrorMessage(errorMessage);\n          });\n      })\n      .catch(err => {\n        this.setState({\n          error: err,\n        });\n      });\n  };\n\n  renderModalFields() {\n    return (\n      <Fragment>\n        <Field\n          data-test-id=\"response-metric\"\n          label={t('Calculation Method')}\n          inline={false}\n          help={t(\n            'This determines which duration metric is used for the Response Time Threshold.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <SelectControl\n            required\n            options={METRIC_CHOICES.slice()}\n            name=\"responseMetric\"\n            label={t('Calculation Method')}\n            value={this.state.metric}\n            onChange={(option: {label: string; value: string}) => {\n              this.handleFieldChange('metric')(option.value);\n            }}\n          />\n        </Field>\n        <Field\n          data-test-id=\"response-time-threshold\"\n          label={t('Response Time Threshold (ms)')}\n          inline={false}\n          help={t(\n            'The satisfactory response time for the calculation method defined above. This is used to calculate Apdex and User Misery scores.'\n          )}\n          showHelpInTooltip\n          flexibleControlStateSize\n          stacked\n          required\n        >\n          <Input\n            type=\"number\"\n            name=\"threshold\"\n            required\n            pattern=\"[0-9]*(\\.[0-9]*)?\"\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              this.handleFieldChange('threshold')(event.target.value);\n            }}\n            value={this.state.threshold}\n            step={100}\n            min={100}\n          />\n        </Field>\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {Header, Body, Footer, organization, transactionName, eventView} = this.props;\n\n    const project = this.getProject();\n\n    const summaryView = eventView.clone();\n    summaryView.query = summaryView.getQueryWithAdditionalConditions();\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transactionName,\n      query: summaryView.generateQueryStringObject(),\n      projectID: project?.id,\n    });\n\n    return (\n      <Fragment>\n        <Header closeButton>\n          <h4>{t('Transaction Settings')}</h4>\n        </Header>\n        <Body>\n          <Instruction>\n            {tct(\n              'The changes below will only be applied to [transaction]. To set it at a more global level, go to [projectSettings: Project Settings].',\n              {\n                transaction: <Link to={target}>{transactionName}</Link>,\n                projectSettings: (\n                  <Link\n                    to={`/settings/${organization.slug}/projects/${project?.slug}/performance/`}\n                  />\n                ),\n              }\n            )}\n          </Instruction>\n          {this.renderModalFields()}\n        </Body>\n        <Footer>\n          <ButtonBar gap={1}>\n            <Button\n              priority=\"default\"\n              onClick={this.handleReset}\n              data-test-id=\"reset-all\"\n            >\n              {t('Reset All')}\n            </Button>\n            <Button\n              aria-label={t('Apply')}\n              priority=\"primary\"\n              onClick={this.handleApply}\n              data-test-id=\"apply-threshold\"\n            >\n              {t('Apply')}\n            </Button>\n          </ButtonBar>\n        </Footer>\n      </Fragment>\n    );\n  }\n}\n\nconst Instruction = styled('div')`\n  margin-bottom: ${space(4)};\n`;\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 650px;\n  margin: 70px auto;\n`;\n\nexport default withApi(withProjects(TransactionThresholdModal));\n","import {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport {ChartContainer, HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {Panel} from 'sentry/components/panels';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\n\nimport {replaceSeriesName, transformEventStatsSmoothed} from '../trends/utils';\nimport {ViewProps} from '../types';\n\nimport {\n  getMaxOfSeries,\n  getVitalChartDefinitions,\n  getVitalChartTitle,\n  vitalNameFromLocation,\n  VitalState,\n  vitalStateColors,\n} from './utils';\n\ntype Props = WithRouterProps &\n  Omit<ViewProps, 'start' | 'end'> & {\n    end: DateString | null;\n    interval: string;\n    organization: OrganizationSummary;\n    start: DateString | null;\n  };\n\nfunction VitalChart({\n  project,\n  environment,\n  location,\n  organization,\n  query,\n  statsPeriod,\n  router,\n  start,\n  end,\n  interval,\n}: Props) {\n  const api = useApi();\n  const theme = useTheme();\n\n  const vitalName = vitalNameFromLocation(location);\n  const yAxis = `p75(${vitalName})`;\n\n  const {utc, legend, vitalPoor, markLines, chartOptions} = getVitalChartDefinitions({\n    theme,\n    location,\n    yAxis,\n    vital: vitalName,\n  });\n\n  function handleLegendSelectChanged(legendChange: {\n    name: string;\n    selected: Record<string, boolean>;\n    type: string;\n  }) {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        unselectedSeries: unselected,\n      },\n    };\n    browserHistory.push(to);\n  }\n\n  return (\n    <Panel>\n      <ChartContainer>\n        <HeaderTitleLegend>\n          {getVitalChartTitle(vitalName)}\n          <QuestionTooltip\n            size=\"sm\"\n            position=\"top\"\n            title={t(`The durations shown should fall under the vital threshold.`)}\n          />\n        </HeaderTitleLegend>\n        <ChartZoom router={router} period={statsPeriod} start={start} end={end} utc={utc}>\n          {zoomRenderProps => (\n            <EventsRequest\n              api={api}\n              organization={organization}\n              period={statsPeriod}\n              project={project}\n              environment={environment}\n              start={start}\n              end={end}\n              interval={interval}\n              showLoading={false}\n              query={query}\n              includePrevious={false}\n              yAxis={[yAxis]}\n              partial\n              userModified={decodeScalar(location.query.userModified)}\n            >\n              {({timeseriesData: results, errored, loading, reloading}) => {\n                if (errored) {\n                  return (\n                    <ErrorPanel>\n                      <IconWarning color=\"gray500\" size=\"lg\" />\n                    </ErrorPanel>\n                  );\n                }\n\n                const colors =\n                  (results && theme.charts.getColorPalette(results.length - 2)) || [];\n\n                const {smoothedResults} = transformEventStatsSmoothed(results);\n\n                const smoothedSeries = smoothedResults\n                  ? smoothedResults.map(({seriesName, ...rest}, i: number) => {\n                      return {\n                        seriesName: replaceSeriesName(seriesName) || 'p75',\n                        ...rest,\n                        color: colors[i],\n                        lineStyle: {\n                          opacity: 1,\n                          width: 2,\n                        },\n                      };\n                    })\n                  : [];\n\n                const seriesMax = getMaxOfSeries(smoothedSeries);\n                const yAxisMax = Math.max(seriesMax, vitalPoor);\n                chartOptions.yAxis!.max = yAxisMax * 1.1;\n\n                return (\n                  <ReleaseSeries\n                    start={start}\n                    end={end}\n                    period={statsPeriod}\n                    utc={utc}\n                    projects={project}\n                    environments={environment}\n                  >\n                    {({releaseSeries}) => (\n                      <TransitionChart loading={loading} reloading={reloading}>\n                        <TransparentLoadingMask visible={reloading} />\n                        {getDynamicText({\n                          value: (\n                            <LineChart\n                              {...zoomRenderProps}\n                              {...chartOptions}\n                              legend={legend}\n                              onLegendSelectChanged={handleLegendSelectChanged}\n                              series={[...markLines, ...releaseSeries, ...smoothedSeries]}\n                            />\n                          ),\n                          fixed: 'Web Vitals Chart',\n                        })}\n                      </TransitionChart>\n                    )}\n                  </ReleaseSeries>\n                );\n              }}\n            </EventsRequest>\n          )}\n        </ChartZoom>\n      </ChartContainer>\n    </Panel>\n  );\n}\n\nexport default withRouter(VitalChart);\n\nexport type _VitalChartProps = {\n  field: string;\n  grid: LineChartProps['grid'];\n  loading: boolean;\n  reloading: boolean;\n  data?: Series[];\n  height?: number;\n  utc?: boolean;\n  vitalFields?: {\n    goodCountField: string;\n    mehCountField: string;\n    poorCountField: string;\n  };\n};\n\nfunction fieldToVitalType(\n  seriesName: string,\n  vitalFields: _VitalChartProps['vitalFields']\n): VitalState | undefined {\n  if (seriesName === vitalFields?.poorCountField.replace('equation|', '')) {\n    return VitalState.POOR;\n  }\n  if (seriesName === vitalFields?.mehCountField.replace('equation|', '')) {\n    return VitalState.MEH;\n  }\n  if (seriesName === vitalFields?.goodCountField.replace('equation|', '')) {\n    return VitalState.GOOD;\n  }\n\n  return undefined;\n}\n\nexport function _VitalChart(props: _VitalChartProps) {\n  const {\n    field: yAxis,\n    data: _results,\n    loading,\n    reloading,\n    height,\n    grid,\n    utc,\n    vitalFields,\n  } = props;\n  const theme = useTheme();\n\n  if (!_results || !vitalFields) {\n    return null;\n  }\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    grid,\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis',\n      valueFormatter: (value: number, seriesName?: string) => {\n        return tooltipFormatter(\n          value,\n          vitalFields[0] === WebVital.CLS ? seriesName : yAxis\n        );\n      },\n    },\n    xAxis: {\n      show: false,\n    },\n    xAxes: undefined,\n    yAxis: {\n      axisLabel: {\n        color: theme.chartLabel,\n        showMaxLabel: false,\n        formatter: (value: number) => axisLabelFormatter(value, yAxis),\n      },\n    },\n    utc,\n    isGroupedByDate: true,\n    showTimeInTooltip: true,\n  };\n\n  const results = _results.filter(s => !!fieldToVitalType(s.seriesName, vitalFields));\n\n  const smoothedSeries = results?.length\n    ? results.map(({seriesName, ...rest}) => {\n        const adjustedSeries = fieldToVitalType(seriesName, vitalFields) || 'count';\n        return {\n          seriesName: adjustedSeries,\n          ...rest,\n          color: theme[vitalStateColors[adjustedSeries]],\n          lineStyle: {\n            opacity: 1,\n            width: 2,\n          },\n        };\n      })\n    : [];\n\n  return (\n    <div>\n      <TransitionChart loading={loading} reloading={reloading}>\n        <TransparentLoadingMask visible={reloading} />\n        {getDynamicText({\n          value: (\n            <LineChart\n              height={height}\n              {...chartOptions}\n              onLegendSelectChanged={() => {}}\n              series={[...smoothedSeries]}\n              isGroupedByDate\n            />\n          ),\n          fixed: 'Web Vitals Chart',\n        })}\n      </TransitionChart>\n    </div>\n  );\n}\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nmodule.exports = baseLt;\n","var baseExtremum = require('./_baseExtremum'),\n    baseLt = require('./_baseLt'),\n    identity = require('./identity');\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nmodule.exports = min;\n"],"names":["DropdownControl","Component","renderButton","isOpen","getActorProps","label","button","buttonProps","buttonTooltipTitle","priority","detached","fullWidth","this","props","skipWrapper","position","title","StyledDropdownButton","hideBottomBorder","rightAlignChevron","renderChildren","getMenuProps","children","alignRight","menuWidth","blendWithActor","alignMenu","Content","width","blendCorner","render","alwaysRenderMenu","className","Container","Fragment","p","theme","breakpoints","small","DropdownButton","zIndex","dropdownAutocomplete","actor","DropdownBubble","border","DropdownItem","MenuItem","fontSizeMedium","SearchBar","PureComponent","query","defaultQuery","dropdownVisible","createRef","searchInputRef","current","blur","evt","preventDefault","onSearch","state","setState","callIfFunction","onChange","value","target","UNSAFE_componentWillReceiveProps","nextProps","_q","_oC","_oS","inputProps","classNames","onSubmit","StyledInput","type","name","ref","autoComplete","onBlur","onQueryBlur","onQueryChange","StyledIconSearch","size","color","SearchClearButton","onClick","clearSearch","icon","t","Input","undefined","focusBorder","IconSearch","Button","fontSizeLarge","gray200","gray300","useRef","useEffect","organization","eventView","searchResults","setSearchResults","useState","loading","setLoading","api","useApi","prepareQuery","length","handleSearch","debounce","async","projectIdStrings","project","map","String","conditions","MutableSearch","addFilterValues","Object","keys","activeRequests","clear","url","features","includes","slug","results","doDiscoverQuery","field","sort","formatString","statsPeriod","parsedResults","data","reduce","searchGroup","item","push","transaction","project_id","ItemType","desc","_","Error","DEFAULT_DEBOUNCE_DURATION","leading","placeholder","css","display","maxHeight","overflowY","items","lastIndex","lastIndexOf","transactionName","slice","projectId","generateQueryStringObject","next","transactionSummaryRouteWithQuery","orgSlug","projectID","browserHistory","GenericQueryBatcherProvider","_useGenericQueryBatcher","createDefinedContext","mergeKey","batchProperty","path","requestFunction","queryObject","requestPromise","_handleUnmergeableQuery","queryDefinition","result","requestQueryObject","resolve","GenericQueryBatcher","queries","timeoutRef","useOrganization","window","clearTimeout","addQuery","q","id","setTimeout","mergeMap","collectedQueries","Reflect","ownKeys","forEach","key","queriesToMap","queriesSent","k","mergeList","_handleUnmergeableQueries","exampleDefinition","batchValues","batchFieldValue","Array","isArray","propertyName","singleResult","e","reject","_handleMergeableQueries","queriesCollected","values","acc","queriesSaved","trackAdvancedAnalyticsEvent","num_collected","num_saved","num_sent","handleBatching","BatchNodeContext","createContext","QueryBatchNode","Symbol","batchContext","queryBatching","batchRequest","Promise","Provider","pageErrorContext","pageError","setPageError","PageErrorProvider","PageErrorAlert","useContext","showIcon","usePageError","PerformanceDisplayProvider","_usePerformanceDisplayType","usePerformanceDisplayType","performanceType","getProjectID","eventData","projects","projectSlug","find","currentProject","_Table","widths","transactionThreshold","transactionThresholdMetric","column","dataRow","action","location","Actions","project_threshold","project_threshold_config","openModal","modalProps","onApply","threshold","metric","addSuccessMessage","tct","modalCss","backdrop","searchConditions","normalizeSearchConditionsWithTransactionName","updateQuery","pathname","cursor","tableData","renderBodyCell","direction","tableMeta","columnTitles","COLUMN_TITLES","index","renderHeadCell","teamKeyTransactionColumn","getColumns","col","isHeader","star","isSolid","meta","columnIndex","nextColumn","Number","COL_WIDTH_UNDEFINED","withStaticFilters","isAlias","rendered","getFieldRenderer","fieldRenderer","allowActions","cellActions","summaryView","clone","additionalConditions","setFilterValues","getQueryWithAdditionalConditions","handleCellAction","to","handleSummaryClick","style","startsWith","fieldName","getAggregateAlias","defined","toLocaleString","containerDisplayMode","onSortClick","currentSortKind","currentSortField","align","fieldAlignment","currentSort","sortForField","canSort","isFieldSortable","kind","sortLink","generateSortLink","queryStringObject","sortOnField","getSortedEventView","withSorts","sorts","setError","useEvents","columnOrder","filter","i","sortedEventView","columnSortBy","getSorts","prependColumnWidths","error","message","referrer","queryExtras","getMEPQueryParams","pageLinks","isLoading","grid","onResizeColumn","handleResizeColumn","renderHeadCellWithMeta","renderBodyCellWithData","renderPrependColumns","renderPrependCellWithData","paginationAnalyticsEvent","Table","summaryConditions","PerformanceLayoutBodyRow","space","large","columns","minSize","Chart","isErrored","chartData","onFilterChange","height","disableXAxis","disableZoom","disableChartPadding","colors","useTheme","series","seriesName","formatHistogramData","xAxis","truncate","axisTick","alignWithLabel","allSeries","yAxis","axisLabel","chartLabel","formatter","formatAbbreviatedNumber","minZoomWidth","paramStart","paramEnd","xAxisIndex","buckets","computeBuckets","onHistoryPush","zoomRenderProps","BarChartContainer","hasPadding","MaskContainer","visible","getDynamicText","show","left","right","top","bottom","stacked","fixed","testId","transformHistogramQuery","histograms","hasData","HistogramWidget","mepSetting","useMEPSettingContext","ContainerActions","globalSelection","getPageFilters","Queries","useMemo","chart","fields","component","provided","numBuckets","dataFilter","transform","chartSetting","memoizationKey","Subtitle","datetime","period","HeaderActions","widgetData","Visualizations","chartColor","chartHeight","previousData","router","start","end","utc","disableMultiAxis","definedAxisTicks","chartColors","isLineChart","charts","getColorPalette","dataMax","every","aggregateOutputType","valuesDict","point","maxValue","max","power","Math","log10","magnitude","min","floor","scale","step","round","ceil","computeAxisMax","areaChartProps","seriesOptions","showSymbol","axisPointer","link","xAxes","gridIndex","yAxes","splitNumber","axisLabelFormatter","isGroupedByDate","showTimeInTooltip","tooltip","valueFormatter","tooltipFormatter","nameFormatter","yAxisIndex","margin","axisLine","previousPeriod","transformDiscoverToList","widgetProps","interval","normalizeDateTimeParams","defaultStatsPeriod","DEFAULT_STATS_PERIOD","transformEventsRequestToArea","timeseriesData","dataMean","meanData","mean","outputType","reloading","errored","previousTimeseriesData","slowList","PerformanceWidgetSetting","framesList","LineChartListWidget","selectedListIndex","setSelectListIndex","isSlowestType","isFramesType","list","mutableSearch","removeFilter","f","limit","noPagination","getMEPParamsIfApplicable","enabled","issue","EventsRequest","pick","eventsRequestQueryProps","includePrevious","includeTransformedData","partial","currentSeriesNames","getInterval","hideError","onError","userModified","decodeScalar","EmptyComponent","WidgetEmptyStateWarning","DurationChart","selectedIndex","setSelectedIndex","listItem","additionalQuery","breakdown","transactionTarget","getPageFiltersQuery","fieldString","rightValue","failure_count","slowest","getPerformanceDuration","maxLength","excludeTransaction","count","noPadding","withApi","_EventsRequest","withRouter","_DurationChart","SingleFieldAreaWidget","previousSeriesNames","getPreviousSeriesName","HighlightNumber","fontSizeExtraLarge","transformTrendsDiscover","trendsData","events","normalizeTrends","statsData","stats","transactionsList","TrendsWidget","_eventView","trendChangeType","TrendChangeType","trendFunctionField","TrendFunctionField","rest","handleTrendsClick","TrendsChart","environment","disableLegend","bottomPadding","initialConditions","trendsTarget","trendsTargetRoute","trendFunction","withProjects","transformEventsRequestToVitals","getVitalFields","baseField","poorCountField","mehCountField","goodCountField","VitalWidget","fieldsList","vitalFields","sortField","vitalStops","poorStop","poor","mehStop","meh","transformFieldsWithStops","chartDefinition","fieldFromProps","propField","settingToVital","WebVital","handleViewAllClick","vital","getVitalDataForListItem","showBar","showDurationDetail","showDetail","vitalDetailRouteWithQuery","vitalName","decodeList","VitalBarCell","showTooltip","barHeight","useAggregateAlias","transformFieldName","poorData","mehData","goodData","_vitalData","good","p75","vitalData","total","RightAlignedCell","WidgetContainerActions","setChartSetting","allowedCharts","rowChartSettings","menuOptions","settingsMap","WIDGET_DEFINITIONS","setting","options","disabled","opt","isOptionDisabled","trigger","borderless","showChevron","placement","WidgetContainer","withOrganization","setRowChartSettings","_chartSetting","getChartSetting","defaultChartSetting","forceDefaultChartSetting","setChartSettingState","_setChartSetting","newSettings","previousChartSetting","fromDefault","from_widget","to_widget","from_default","trackChartSettingChange","containerProps","passedProps","dataType","GenericPerformanceWidgetDataType","ChartRow","chartCount","palette","chartSettings","setChartSettings","fill","getInitialChartSettings","StyledRow","TripleChartRow","defaultProps","DoubleChartRow","AllTransactionsView","PROJECT_PERFORMANCE_TYPE","FRONTEND_PAGELOAD_COLUMN_TITLES","FRONTEND_OTHER_COLUMN_TITLES","BACKEND_COLUMN_TITLES","MOBILE_COLUMN_TITLES","REACT_NATIVE_COLUMN_TITLES","BackendView","FrontendOtherView","FrontendPageloadView","MobileView","checkIsReactNative","SamplingModal","Header","Body","Footer","isMEPEnabled","choices","choice","setChoice","closeButton","Instruction","projectSettings","flex","gap","event","closeModal","fieldToViewMap","LandingDisplayField","PerformanceLanding","onboardingProject","teams","initiallyLoaded","useTeams","provideUserTeams","hasMounted","paramLandingDisplay","getLandingDisplayFromParam","defaultLandingDisplayForProjects","getDefaultDisplayForPlatform","landingDisplay","showOnboarding","join","filterString","getTransactionSearchQuery","ViewComponent","pageFilters","condensed","alignDropdown","SearchContainerWithFilter","SearchFilterContainer","SearchContainerWithFilterAndMetrics","StyledPageContent","StyledHeading","LANDING_DISPLAYS","href","handleLandingDisplayChange","hasFeature","searchSource","projectIds","generateAggregateFields","maxQueryLength","MAX_QUERY_LENGTH","selectedTeams","selectedProjects","PageContent","PageHeading","PerformanceContent","selection","demoMode","useProjects","mounted","previousDateTime","usePrevious","generatePerformanceEventView","ALL_ACCESS_PROJECTS","filtered","firstTransactionEvent","parseInt","getOnboardingProject","show_onboarding","loadOrganizationTags","addRoutePerformanceContext","isEqual","defaultSelection","hideGlobalHeader","newError","Sentry","scope","setExtra","searchQuery","trim","isDefaultQuery","withPageFilters","autoTextMap","AutoSampleState","MetricsEventsDropdown","InnerDropdown","mepContext","autoText","autoSampleState","prefix","MEPState","getOptions","currentOption","metricSettingState","option","eventKey","isActive","onSelect","setMetricSettingState","TransactionThresholdMetric","METRIC_CHOICES","TransactionThresholdModal","getProject","transactionThresholdUrl","method","includeAllArgs","then","catch","err","errorMessage","responseJSON","non_field_errors","addErrorMessage","prevState","newState","cloneDeep","set","errors","projectThresholdUrl","proj","renderModalFields","inline","help","showHelpInTooltip","flexibleControlStateSize","required","handleFieldChange","pattern","handleReset","handleApply","VitalChart","vitalNameFromLocation","legend","vitalPoor","markLines","chartOptions","getVitalChartDefinitions","handleLegendSelectChanged","legendChange","selected","unselected","unselectedSeries","getVitalChartTitle","showLoading","smoothedResults","transformEventStatsSmoothed","smoothedSeries","replaceSeriesName","lineStyle","opacity","seriesMax","getMaxOfSeries","yAxisMax","environments","releaseSeries","onLegendSelectChanged","fieldToVitalType","replace","VitalState","_VitalChart","_results","showMaxLabel","s","adjustedSeries","vitalStateColors","module","exports","other","baseExtremum","baseLt","identity","array"],"sourceRoot":""}