{"version":3,"file":"chunks/app_views_performance_traceDetails_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/utils/performance/quickTrace/traceFullQuery.tsx","webpack:///./app/utils/performance/quickTrace/traceMetaQuery.tsx","webpack:///./app/views/performance/breadcrumb.tsx","webpack:///./app/views/performance/traceDetails/content.tsx","webpack:///./app/views/performance/traceDetails/index.tsx","webpack:///./app/views/performance/transactionDetails/styles.tsx","webpack:///./app/views/performance/transactionSummary/tabs.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/types.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionTags/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/utils.tsx","webpack:///./app/views/performance/trends/types.tsx","webpack:///./app/views/performance/trends/utils.tsx","webpack:///./app/views/performance/utils.tsx","webpack:///./app/views/performance/vitalDetail/utils.tsx","webpack:///../node_modules/downsample/methods/ASAP.js"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  FullQuickTrace,\n  TraceFull,\n  TraceFullDetailed,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\nimport withApi from 'sentry/utils/withApi';\n\ntype AdditionalQueryProps = {\n  detailed?: boolean;\n  eventId?: string;\n};\n\ntype TraceFullQueryChildrenProps<T> = BaseTraceChildrenProps &\n  Omit<FullQuickTrace, 'trace'> & {\n    /**\n     * The `event-trace` endpoint returns a full trace with the parent-child\n     * relationships. It can be flattened into a `QuickTraceEvent` if necessary.\n     */\n    traces: T | null;\n  };\n\ntype QueryProps<T> = Omit<TraceRequestProps, 'eventView'> &\n  AdditionalQueryProps & {\n    children: (props: TraceFullQueryChildrenProps<T>) => React.ReactNode;\n  };\n\nfunction getTraceFullRequestPayload({\n  detailed,\n  eventId,\n  ...props\n}: DiscoverQueryProps & AdditionalQueryProps) {\n  const additionalApiPayload: any = getTraceRequestPayload(props);\n  additionalApiPayload.detailed = detailed ? '1' : '0';\n  if (eventId) {\n    additionalApiPayload.event_id = eventId;\n  }\n  return additionalApiPayload;\n}\n\nfunction EmptyTrace<T>({children}: Pick<QueryProps<T>, 'children'>) {\n  return (\n    <Fragment>\n      {children({\n        isLoading: false,\n        error: null,\n        traces: null,\n        type: 'full',\n      })}\n    </Fragment>\n  );\n}\n\nfunction GenericTraceFullQuery<T>({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps<T>) {\n  if (!traceId) {\n    return <EmptyTrace<T>>{children}</EmptyTrace>;\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<T, AdditionalQueryProps>\n      route={`events-trace/${traceId}`}\n      getRequestPayload={getTraceFullRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) =>\n        children({\n          // This is using '||` instead of '??` here because\n          // the client returns a empty string when the response\n          // is 204. And we want the empty string, undefined and\n          // null to be converted to null.\n          traces: tableData || null,\n          type: 'full',\n          ...rest,\n        })\n      }\n    </GenericDiscoverQuery>\n  );\n}\n\nexport const TraceFullQuery = withApi(\n  (props: Omit<QueryProps<TraceFull[]>, 'detailed'>) => (\n    <GenericTraceFullQuery<TraceFull[]> {...props} detailed={false} />\n  )\n);\n\nexport const TraceFullDetailedQuery = withApi(\n  (props: Omit<QueryProps<TraceFullDetailed[]>, 'detailed'>) => (\n    <GenericTraceFullQuery<TraceFullDetailed[]> {...props} detailed />\n  )\n);\n","import {Fragment} from 'react';\n\nimport GenericDiscoverQuery from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  BaseTraceChildrenProps,\n  TraceMeta,\n  TraceRequestProps,\n} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  getTraceRequestPayload,\n  makeEventView,\n} from 'sentry/utils/performance/quickTrace/utils';\nimport withApi from 'sentry/utils/withApi';\n\nexport type TraceMetaQueryChildrenProps = BaseTraceChildrenProps & {\n  meta: TraceMeta | null;\n};\n\ntype QueryProps = Omit<TraceRequestProps, 'eventView'> & {\n  children: (props: TraceMetaQueryChildrenProps) => React.ReactNode;\n};\n\nfunction TraceMetaQuery({\n  traceId,\n  start,\n  end,\n  statsPeriod,\n  children,\n  ...props\n}: QueryProps) {\n  if (!traceId) {\n    return (\n      <Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          meta: null,\n        })}\n      </Fragment>\n    );\n  }\n\n  const eventView = makeEventView({start, end, statsPeriod});\n\n  return (\n    <GenericDiscoverQuery<TraceMeta, {}>\n      route={`events-trace-meta/${traceId}`}\n      getRequestPayload={getTraceRequestPayload}\n      eventView={eventView}\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return children({\n          meta: tableData,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(TraceMetaQuery);\n","import {Component} from 'react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport Tab from './transactionSummary/tabs';\nimport {eventsRouteWithQuery} from './transactionSummary/transactionEvents/utils';\nimport {spansRouteWithQuery} from './transactionSummary/transactionSpans/utils';\nimport {tagsRouteWithQuery} from './transactionSummary/transactionTags/utils';\nimport {vitalsRouteWithQuery} from './transactionSummary/transactionVitals/utils';\nimport {transactionSummaryRouteWithQuery} from './transactionSummary/utils';\nimport {vitalDetailRouteWithQuery} from './vitalDetail/utils';\nimport {getPerformanceLandingUrl} from './utils';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  eventSlug?: string;\n  spanSlug?: SpanSlug;\n  tab?: Tab;\n  traceSlug?: string;\n  transaction?: {\n    name: string;\n    project: string;\n  };\n  vitalName?: string;\n};\n\nclass Breadcrumb extends Component<Props> {\n  getCrumbs() {\n    const crumbs: Crumb[] = [];\n    const {\n      organization,\n      location,\n      transaction,\n      vitalName,\n      spanSlug,\n      eventSlug,\n      traceSlug,\n      tab,\n    } = this.props;\n\n    const performanceTarget: LocationDescriptor = {\n      pathname: getPerformanceLandingUrl(organization),\n      query: {\n        ...location.query,\n        // clear out the transaction name\n        transaction: undefined,\n      },\n    };\n\n    crumbs.push({\n      to: performanceTarget,\n      label: t('Performance'),\n      preservePageFilters: true,\n    });\n\n    if (vitalName) {\n      const webVitalsTarget = vitalDetailRouteWithQuery({\n        orgSlug: organization.slug,\n        vitalName: 'fcp',\n        projectID: decodeScalar(location.query.project),\n        query: location.query,\n      });\n      crumbs.push({\n        to: webVitalsTarget,\n        label: t('Vital Detail'),\n        preservePageFilters: true,\n      });\n    } else if (transaction) {\n      const routeQuery = {\n        orgSlug: organization.slug,\n        transaction: transaction.name,\n        projectID: transaction.project,\n        query: location.query,\n      };\n\n      switch (tab) {\n        case Tab.Tags: {\n          const tagsTarget = tagsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: tagsTarget,\n            label: t('Tags'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.Events: {\n          const eventsTarget = eventsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: eventsTarget,\n            label: t('All Events'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.WebVitals: {\n          const webVitalsTarget = vitalsRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: webVitalsTarget,\n            label: t('Web Vitals'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.Spans: {\n          const spansTarget = spansRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: spansTarget,\n            label: t('Spans'),\n            preservePageFilters: true,\n          });\n          break;\n        }\n        case Tab.TransactionSummary:\n        default: {\n          const summaryTarget = transactionSummaryRouteWithQuery(routeQuery);\n          crumbs.push({\n            to: summaryTarget,\n            label: t('Transaction Summary'),\n            preservePageFilters: true,\n          });\n        }\n      }\n    }\n\n    if (transaction && spanSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Span Summary'),\n      });\n    } else if (transaction && eventSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Event Details'),\n      });\n    } else if (traceSlug) {\n      crumbs.push({\n        to: '',\n        label: t('Trace View'),\n      });\n    }\n\n    return crumbs;\n  }\n\n  render() {\n    return <Breadcrumbs crumbs={this.getCrumbs()} />;\n  }\n}\n\nexport default Breadcrumb;\n","import {Component, createRef, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\n\nimport Alert from 'sentry/components/alert';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport DiscoverButton from 'sentry/components/discoverButton';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t, tct, tn} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {getDuration} from 'sentry/utils/formatters';\nimport {createFuzzySearch, Fuse} from 'sentry/utils/fuzzySearch';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {TraceFullDetailed, TraceMeta} from 'sentry/utils/performance/quickTrace/types';\nimport {filterTrace, reduceTrace} from 'sentry/utils/performance/quickTrace/utils';\nimport Breadcrumb from 'sentry/views/performance/breadcrumb';\nimport {MetaData} from 'sentry/views/performance/transactionDetails/styles';\n\nimport {TraceDetailHeader, TraceSearchBar, TraceSearchContainer} from './styles';\nimport TraceNotFound from './traceNotFound';\nimport TraceView from './traceView';\nimport {TraceInfo} from './types';\nimport {getTraceInfo, isRootTransaction} from './utils';\n\ntype IndexedFusedTransaction = {\n  indexed: string[];\n  transaction: TraceFullDetailed;\n};\n\ntype Props = Pick<RouteComponentProps<{traceSlug: string}, {}>, 'params' | 'location'> & {\n  dateSelected: boolean;\n  error: QueryError | null;\n  isLoading: boolean;\n  meta: TraceMeta | null;\n  organization: Organization;\n  traceEventView: EventView;\n  traceSlug: string;\n  traces: TraceFullDetailed[] | null;\n};\n\ntype State = {\n  filteredTransactionIds: Set<string> | undefined;\n  searchQuery: string | undefined;\n};\n\nclass TraceDetailsContent extends Component<Props, State> {\n  state: State = {\n    searchQuery: undefined,\n    filteredTransactionIds: undefined,\n  };\n\n  componentDidMount() {\n    this.initFuse();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.traces !== prevProps.traces) {\n      this.initFuse();\n    }\n  }\n\n  fuse: Fuse<IndexedFusedTransaction> | null = null;\n  traceViewRef = createRef<HTMLDivElement>();\n  virtualScrollbarContainerRef = createRef<HTMLDivElement>();\n\n  async initFuse() {\n    if (defined(this.props.traces) && this.props.traces.length > 0) {\n      const transformed: IndexedFusedTransaction[] = this.props.traces.flatMap(trace =>\n        reduceTrace<IndexedFusedTransaction[]>(\n          trace,\n          (acc, transaction) => {\n            const indexed: string[] = [\n              transaction['transaction.op'],\n              transaction.transaction,\n              transaction.project_slug,\n            ];\n\n            acc.push({\n              transaction,\n              indexed,\n            });\n\n            return acc;\n          },\n          []\n        )\n      );\n\n      this.fuse = await createFuzzySearch(transformed, {\n        keys: ['indexed'],\n        includeMatches: true,\n        threshold: 0.6,\n        location: 0,\n        distance: 100,\n        maxPatternLength: 32,\n      });\n    }\n  }\n\n  renderTraceLoading() {\n    return <LoadingIndicator />;\n  }\n\n  renderTraceRequiresDateRangeSelection() {\n    return <LoadingError message={t('Trace view requires a date range selection.')} />;\n  }\n\n  handleTransactionFilter = (searchQuery: string) => {\n    this.setState({searchQuery: searchQuery || undefined}, this.filterTransactions);\n  };\n\n  filterTransactions = () => {\n    const {traces} = this.props;\n    const {filteredTransactionIds, searchQuery} = this.state;\n\n    if (!searchQuery || traces === null || traces.length <= 0 || !defined(this.fuse)) {\n      if (filteredTransactionIds !== undefined) {\n        this.setState({\n          filteredTransactionIds: undefined,\n        });\n      }\n      return;\n    }\n\n    const fuseMatches = this.fuse\n      .search<IndexedFusedTransaction>(searchQuery)\n      /**\n       * Sometimes, there can be matches that don't include any\n       * indices. These matches are often noise, so exclude them.\n       */\n      .filter(({matches}) => matches?.length)\n      .map(({item}) => item.transaction.event_id);\n\n    /**\n     * Fuzzy search on ids result in seemingly random results. So switch to\n     * doing substring matches on ids to provide more meaningful results.\n     */\n    const idMatches = traces\n      .flatMap(trace =>\n        filterTrace(\n          trace,\n          ({event_id, span_id}) =>\n            event_id.includes(searchQuery) || span_id.includes(searchQuery)\n        )\n      )\n      .map(transaction => transaction.event_id);\n\n    this.setState({\n      filteredTransactionIds: new Set([...fuseMatches, ...idMatches]),\n    });\n  };\n\n  renderSearchBar() {\n    return (\n      <TraceSearchContainer>\n        <TraceSearchBar\n          defaultQuery=\"\"\n          query={this.state.searchQuery || ''}\n          placeholder={t('Search for transactions')}\n          onSearch={this.handleTransactionFilter}\n        />\n      </TraceSearchContainer>\n    );\n  }\n\n  renderTraceHeader(traceInfo: TraceInfo) {\n    const {meta} = this.props;\n    return (\n      <TraceDetailHeader>\n        <GuideAnchor target=\"trace_view_guide_breakdown\">\n          <MetaData\n            headingText={t('Event Breakdown')}\n            tooltipText={t(\n              'The number of transactions and errors there are in this trace.'\n            )}\n            bodyText={tct('[transactions]  |  [errors]', {\n              transactions: tn(\n                '%s Transaction',\n                '%s Transactions',\n                meta?.transactions ?? traceInfo.transactions.size\n              ),\n              errors: tn('%s Error', '%s Errors', meta?.errors ?? traceInfo.errors.size),\n            })}\n            subtext={tn(\n              'Across %s project',\n              'Across %s projects',\n              meta?.projects ?? traceInfo.projects.size\n            )}\n          />\n        </GuideAnchor>\n        <MetaData\n          headingText={t('Total Duration')}\n          tooltipText={t('The time elapsed between the start and end of this trace.')}\n          bodyText={getDuration(\n            traceInfo.endTimestamp - traceInfo.startTimestamp,\n            2,\n            true\n          )}\n          subtext={getDynamicText({\n            value: <TimeSince date={(traceInfo.endTimestamp || 0) * 1000} />,\n            fixed: '5 days ago',\n          })}\n        />\n      </TraceDetailHeader>\n    );\n  }\n\n  renderTraceWarnings() {\n    const {traces} = this.props;\n\n    const {roots, orphans} = (traces ?? []).reduce(\n      (counts, trace) => {\n        if (isRootTransaction(trace)) {\n          counts.roots++;\n        } else {\n          counts.orphans++;\n        }\n        return counts;\n      },\n      {roots: 0, orphans: 0}\n    );\n\n    let warning: React.ReactNode = null;\n\n    if (roots === 0 && orphans > 0) {\n      warning = (\n        <Alert type=\"info\" showIcon>\n          <ExternalLink href=\"https://docs.sentry.io/product/performance/trace-view/#orphan-traces-and-broken-subtraces\">\n            {t(\n              'A root transaction is missing. Transactions linked by a dashed line have been orphaned and cannot be directly linked to the root.'\n            )}\n          </ExternalLink>\n        </Alert>\n      );\n    } else if (roots === 1 && orphans > 0) {\n      warning = (\n        <Alert type=\"info\" showIcon>\n          <ExternalLink href=\"https://docs.sentry.io/product/performance/trace-view/#orphan-traces-and-broken-subtraces\">\n            {t(\n              'This trace has broken subtraces. Transactions linked by a dashed line have been orphaned and cannot be directly linked to the root.'\n            )}\n          </ExternalLink>\n        </Alert>\n      );\n    } else if (roots > 1) {\n      warning = (\n        <Alert type=\"info\" showIcon>\n          <ExternalLink href=\"https://docs.sentry.io/product/performance/trace-view/#multiple-roots\">\n            {t('Multiple root transactions have been found with this trace ID.')}\n          </ExternalLink>\n        </Alert>\n      );\n    }\n\n    return warning;\n  }\n\n  renderContent() {\n    const {\n      dateSelected,\n      isLoading,\n      error,\n      organization,\n      location,\n      traceEventView,\n      traceSlug,\n      traces,\n      meta,\n    } = this.props;\n\n    if (!dateSelected) {\n      return this.renderTraceRequiresDateRangeSelection();\n    }\n    if (isLoading) {\n      return this.renderTraceLoading();\n    }\n    if (error !== null || traces === null || traces.length <= 0) {\n      return (\n        <TraceNotFound\n          meta={meta}\n          traceEventView={traceEventView}\n          traceSlug={traceSlug}\n          location={location}\n          organization={organization}\n        />\n      );\n    }\n    const traceInfo = getTraceInfo(traces);\n\n    return (\n      <Fragment>\n        {this.renderTraceWarnings()}\n        {this.renderTraceHeader(traceInfo)}\n        {this.renderSearchBar()}\n        <TraceView\n          filteredTransactionIds={this.state.filteredTransactionIds}\n          traceInfo={traceInfo}\n          location={location}\n          organization={organization}\n          traceEventView={traceEventView}\n          traceSlug={traceSlug}\n          traces={traces}\n          meta={meta}\n        />\n      </Fragment>\n    );\n  }\n\n  render() {\n    const {organization, location, traceEventView, traceSlug} = this.props;\n\n    return (\n      <Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumb\n              organization={organization}\n              location={location}\n              traceSlug={traceSlug}\n            />\n            <Layout.Title data-test-id=\"trace-header\">\n              {t('Trace ID: %s', traceSlug)}\n            </Layout.Title>\n          </Layout.HeaderContent>\n          <Layout.HeaderActions>\n            <ButtonBar gap={1}>\n              <DiscoverButton\n                to={traceEventView.getResultsViewUrlTarget(organization.slug)}\n              >\n                {t('Open in Discover')}\n              </DiscoverButton>\n            </ButtonBar>\n          </Layout.HeaderActions>\n        </Layout.Header>\n        <Layout.Body>\n          <Layout.Main fullWidth>{this.renderContent()}</Layout.Main>\n        </Layout.Body>\n      </Fragment>\n    );\n  }\n}\n\nexport default TraceDetailsContent;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {TraceFullDetailedQuery} from 'sentry/utils/performance/quickTrace/traceFullQuery';\nimport TraceMetaQuery from 'sentry/utils/performance/quickTrace/traceMetaQuery';\nimport {TraceFullDetailed, TraceMeta} from 'sentry/utils/performance/quickTrace/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport TraceDetailsContent from './content';\n\ntype Props = RouteComponentProps<{traceSlug: string}, {}> & {\n  api: Client;\n  organization: Organization;\n};\n\nclass TraceSummary extends Component<Props> {\n  getDocumentTitle(): string {\n    return [t('Trace Details'), t('Performance')].join(' - ');\n  }\n\n  getTraceSlug(): string {\n    const {traceSlug} = this.props.params;\n    return typeof traceSlug === 'string' ? traceSlug.trim() : '';\n  }\n\n  getDateSelection() {\n    const {location} = this.props;\n    const queryParams = normalizeDateTimeParams(location.query, {\n      allowAbsolutePageDatetime: true,\n    });\n    const start = decodeScalar(queryParams.start);\n    const end = decodeScalar(queryParams.end);\n    const statsPeriod = decodeScalar(queryParams.statsPeriod);\n    return {start, end, statsPeriod};\n  }\n\n  getTraceEventView() {\n    const traceSlug = this.getTraceSlug();\n    const {start, end, statsPeriod} = this.getDateSelection();\n\n    return EventView.fromSavedQuery({\n      id: undefined,\n      name: `Events with Trace ID ${traceSlug}`,\n      fields: ['title', 'event.type', 'project', 'timestamp'],\n      orderby: '-timestamp',\n      query: `trace:${traceSlug}`,\n      projects: [ALL_ACCESS_PROJECTS],\n      version: 2,\n      start,\n      end,\n      range: statsPeriod,\n    });\n  }\n\n  renderContent() {\n    const {location, organization, params} = this.props;\n    const traceSlug = this.getTraceSlug();\n    const {start, end, statsPeriod} = this.getDateSelection();\n    const dateSelected = Boolean(statsPeriod || (start && end));\n\n    const content = ({\n      isLoading,\n      error,\n      traces,\n      meta,\n    }: {\n      error: QueryError | null;\n      isLoading: boolean;\n      meta: TraceMeta | null;\n      traces: TraceFullDetailed[] | null;\n    }) => (\n      <TraceDetailsContent\n        location={location}\n        organization={organization}\n        params={params}\n        traceSlug={traceSlug}\n        traceEventView={this.getTraceEventView()}\n        dateSelected={dateSelected}\n        isLoading={isLoading}\n        error={error}\n        traces={traces}\n        meta={meta}\n      />\n    );\n\n    if (!dateSelected) {\n      return content({\n        isLoading: false,\n        error: new QueryError('date selection not specified'),\n        traces: null,\n        meta: null,\n      });\n    }\n\n    return (\n      <TraceFullDetailedQuery\n        location={location}\n        orgSlug={organization.slug}\n        traceId={traceSlug}\n        start={start}\n        end={end}\n        statsPeriod={statsPeriod}\n      >\n        {traceResults => (\n          <TraceMetaQuery\n            location={location}\n            orgSlug={organization.slug}\n            traceId={traceSlug}\n            start={start}\n            end={end}\n            statsPeriod={statsPeriod}\n          >\n            {metaResults =>\n              content({\n                isLoading: traceResults.isLoading || metaResults.isLoading,\n                error: traceResults.error || metaResults.error,\n                traces: traceResults.traces,\n                meta: metaResults.meta,\n              })\n            }\n          </TraceMetaQuery>\n        )}\n      </TraceFullDetailedQuery>\n    );\n  }\n\n  render() {\n    const {organization} = this.props;\n\n    return (\n      <SentryDocumentTitle title={this.getDocumentTitle()} orgSlug={organization.slug}>\n        <StyledPageContent>\n          <NoProjectMessage organization={organization}>\n            {this.renderContent()}\n          </NoProjectMessage>\n        </StyledPageContent>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nexport default withOrganization(withApi(TraceSummary));\n\nconst StyledPageContent = styled(PageContent)`\n  padding: 0;\n`;\n","import styled from '@emotion/styled';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport space from 'sentry/styles/space';\n\ntype MetaDataProps = {\n  bodyText: React.ReactNode;\n  headingText: string;\n  subtext: React.ReactNode;\n  tooltipText: string;\n  badge?: 'alpha' | 'beta' | 'new';\n};\n\nexport function MetaData({\n  headingText,\n  tooltipText,\n  bodyText,\n  subtext,\n  badge,\n}: MetaDataProps) {\n  return (\n    <HeaderInfo>\n      <StyledSectionHeading>\n        {headingText}\n        <QuestionTooltip\n          position=\"top\"\n          size=\"sm\"\n          containerDisplayMode=\"block\"\n          title={tooltipText}\n        />\n        {badge && <StyledFeatureBadge type={badge} />}\n      </StyledSectionHeading>\n      <SectionBody>{bodyText}</SectionBody>\n      <SectionSubtext>{subtext}</SectionSubtext>\n    </HeaderInfo>\n  );\n}\n\nconst HeaderInfo = styled('div')`\n  height: 78px;\n`;\n\nconst StyledSectionHeading = styled(SectionHeading)`\n  margin: 0;\n`;\n\nconst SectionBody = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  padding: ${space(0.5)} 0;\n  max-height: 32px;\n`;\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin: 0;\n`;\n\nexport const SectionSubtext = styled('div')<{type?: 'error' | 'default'}>`\n  color: ${p => (p.type === 'error' ? p.theme.error : p.theme.subText)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n","enum Tab {\n  TransactionSummary,\n  WebVitals,\n  Tags,\n  Events,\n  Spans,\n  Anomalies,\n}\n\nexport default Tab;\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","export enum SpanSortPercentiles {\n  P50_EXCLUSIVE_TIME = 'p50ExclusiveTime',\n  P75_EXCLUSIVE_TIME = 'p75ExclusiveTime',\n  P95_EXCLUSIVE_TIME = 'p95ExclusiveTime',\n  P99_EXCLUSIVE_TIME = 'p99ExclusiveTime',\n}\n\nexport enum SpanSortOthers {\n  COUNT = 'count',\n  AVG_OCCURRENCE = 'avgOccurrence',\n  SUM_EXCLUSIVE_TIME = 'sumExclusiveTime',\n}\n\nexport type SpanSort = SpanSortPercentiles | SpanSortOthers;\n\nexport type SpanSortOption = {\n  field: SpanSort;\n  label: string;\n  prefix: string;\n};\n\nexport type SpansTotalValues = {\n  'count()': number;\n};\n","import {Location, Query} from 'history';\nimport pick from 'lodash/pick';\n\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {isAggregateField} from 'sentry/utils/discover/fields';\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {SpanSort, SpanSortOption, SpanSortOthers, SpanSortPercentiles} from './types';\n\nexport function generateSpansRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/spans/`;\n}\n\nexport function spansRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpansRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport const SPAN_RETENTION_DAYS = 30;\n\nexport const SPAN_RELATIVE_PERIODS = pick(DEFAULT_RELATIVE_PERIODS, [\n  '1h',\n  '24h',\n  '7d',\n  '14d',\n  '30d',\n]);\n\nexport const SPAN_SORT_OPTIONS: SpanSortOption[] = [\n  {\n    prefix: t('Sort By'),\n    label: t('Total Self Time'),\n    field: SpanSortOthers.SUM_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Average Count'),\n    field: SpanSortOthers.AVG_OCCURRENCE,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('Total Count'),\n    field: SpanSortOthers.COUNT,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p50 Self Time'),\n    field: SpanSortPercentiles.P50_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p75 Self Time'),\n    field: SpanSortPercentiles.P75_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p95 Self Time'),\n    field: SpanSortPercentiles.P95_EXCLUSIVE_TIME,\n  },\n  {\n    prefix: t('Sort By'),\n    label: t('p99 Self Time'),\n    field: SpanSortPercentiles.P99_EXCLUSIVE_TIME,\n  },\n];\n\nconst DEFAULT_SORT = SpanSortOthers.SUM_EXCLUSIVE_TIME;\n\nfunction getSuspectSpanSort(sort: string): SpanSortOption {\n  const selected = SPAN_SORT_OPTIONS.find(option => option.field === sort);\n  if (selected) {\n    return selected;\n  }\n  return SPAN_SORT_OPTIONS.find(option => option.field === DEFAULT_SORT)!;\n}\n\nexport function getSuspectSpanSortFromLocation(\n  location: Location,\n  sortKey: string = 'sort'\n): SpanSortOption {\n  const sort = decodeScalar(location?.query?.[sortKey]) ?? DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function getSuspectSpanSortFromEventView(eventView: EventView): SpanSortOption {\n  const sort = eventView.sorts.length ? eventView.sorts[0].field : DEFAULT_SORT;\n  return getSuspectSpanSort(sort);\n}\n\nexport function parseSpanSlug(spanSlug: string | undefined): SpanSlug | undefined {\n  if (!defined(spanSlug)) {\n    return undefined;\n  }\n\n  const delimiterPos = spanSlug.lastIndexOf(':');\n  if (delimiterPos < 0) {\n    return undefined;\n  }\n\n  const op = spanSlug.slice(0, delimiterPos);\n  const group = spanSlug.slice(delimiterPos + 1);\n\n  return {op, group};\n}\n\nexport function generateSpansEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  const eventView = EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields: [...Object.values(SpanSortOthers), ...Object.values(SpanSortPercentiles)],\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n\n  const sort = getSuspectSpanSortFromLocation(location);\n  return eventView.withSorts([{field: sort.field, kind: 'desc'}]);\n}\n\n/**\n * For the totals view, we want to get some transaction level stats like\n * the number of transactions and the sum of the transaction duration.\n * This requires the removal of any aggregate conditions as they can result\n * in unexpected empty responses.\n */\nexport function getTotalsView(eventView: EventView): EventView {\n  const totalsView = eventView.withColumns([\n    {kind: 'function', function: ['count', '', undefined, undefined]},\n  ]);\n\n  const conditions = new MutableSearch(eventView.query);\n\n  // filter out any aggregate conditions\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  totalsView.query = conditions.formatString();\n  return totalsView;\n}\n\nexport const SPAN_SORT_TO_FIELDS: Record<SpanSort, string[]> = {\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'equation|count() / count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortOthers.COUNT]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.5)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.75)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.95)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'percentileArray(spans_exclusive_time, 0.99)',\n    'count()',\n    'count_unique(id)',\n    'sumArray(spans_exclusive_time)',\n  ],\n};\n\nexport function getExclusiveTimeDisplayedValue(value: string): string {\n  return value.replace('exclusive', 'self');\n}\n","import {Location, Query} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nexport function generateTagsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/tags/`;\n}\n\nexport function decodeSelectedTagKey(location: Location): string | undefined {\n  return decodeScalar(location.query.tagKey);\n}\n\nexport function trackTagPageInteraction(organization: Organization) {\n  trackAnalyticsEvent({\n    eventKey: 'performance_views.tags.interaction',\n    eventName: 'Performance Views: Tag Page - Interaction',\n    organization_id: parseInt(organization.id, 10),\n  });\n}\n\nexport function tagsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateTagsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n      tagKey: query.tagKey,\n    },\n  };\n}\n\nexport function getTagSortForTagsPage(location: Location) {\n  // Retrieves the tag from the same query param segment explorer uses, but removes columns that aren't supported.\n  let tagSort = decodeScalar(location.query?.tagSort) ?? '-frequency';\n\n  if (['sumdelta'].find(denied => tagSort?.includes(denied))) {\n    tagSort = '-frequency';\n  }\n\n  return tagSort;\n}\n\n// TODO(k-fish): Improve meta of backend response to return these directly\nexport function parseHistogramBucketInfo(row: {[key: string]: React.ReactText}) {\n  const field = Object.keys(row).find(f => f.includes('histogram'));\n  if (!field) {\n    return undefined;\n  }\n  const parts = field.split('_');\n  return {\n    histogramField: field,\n    bucketSize: parseInt(parts[parts.length - 3], 10),\n    offset: parseInt(parts[parts.length - 2], 10),\n    multiplier: parseInt(parts[parts.length - 1], 10),\n  };\n}\n","import type {ECharts} from 'echarts';\nimport {Query} from 'history';\n\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {getBucketWidth} from 'sentry/utils/performance/histogram/utils';\nimport {VitalsData} from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\n\nimport {Point, Rectangle} from './types';\n\nexport function generateVitalsRoute({orgSlug}: {orgSlug: String}): string {\n  return `/organizations/${orgSlug}/performance/summary/vitals/`;\n}\n\nexport function vitalsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalsRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\n/**\n * Given a value on the x-axis, return the index of the nearest bucket or null\n * if it cannot be found.\n *\n * A bucket contains a range of values, and nearest is defined as the bucket the\n * value will fall in.\n */\nexport function findNearestBucketIndex(\n  chartData: HistogramData,\n  xAxis: number\n): number | null {\n  const width = getBucketWidth(chartData);\n  // it's possible that the data is not available yet or the x axis is out of range\n  if (!chartData.length || xAxis >= chartData[chartData.length - 1].bin + width) {\n    return null;\n  }\n  if (xAxis < chartData[0].bin) {\n    return -1;\n  }\n\n  return Math.floor((xAxis - chartData[0].bin) / width);\n}\n\n/**\n * To compute pixel coordinates, we need at least 2 unique points on the chart.\n * The two points must have different x axis and y axis values for it to work.\n *\n * If all bars have the same y value, pick the most naive reference rect. This\n * may result in floating point errors, but should be okay for our purposes.\n */\nexport function getRefRect(chartData: HistogramData): Rectangle | null {\n  // not enough points to construct 2 reference points\n  if (chartData.length < 2) {\n    return null;\n  }\n\n  for (let i = 0; i < chartData.length; i++) {\n    const data1 = chartData[i];\n    for (let j = i + 1; j < chartData.length; j++) {\n      const data2 = chartData[j];\n\n      if (data1.bin !== data2.bin && data1.count !== data2.count) {\n        return {\n          point1: {x: i, y: Math.min(data1.count, data2.count)},\n          point2: {x: j, y: Math.max(data1.count, data2.count)},\n        };\n      }\n    }\n  }\n\n  // all data points have the same count, just pick any 2 histogram bins\n  // and use 0 and 1 as the count as we can rely on them being on the graph\n  return {\n    point1: {x: 0, y: 0},\n    point2: {x: 1, y: 1},\n  };\n}\n\n/**\n * Given an ECharts instance and a rectangle defined in terms of the x and y axis,\n * compute the corresponding pixel coordinates. If it cannot be done, return null.\n */\nexport function asPixelRect(chartRef: ECharts, dataRect: Rectangle): Rectangle | null {\n  const point1 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point1.x,\n    dataRect.point1.y,\n  ]);\n\n  if (isNaN(point1?.[0]) || isNaN(point1?.[1])) {\n    return null;\n  }\n\n  const point2 = chartRef.convertToPixel({xAxisIndex: 0, yAxisIndex: 0}, [\n    dataRect.point2.x,\n    dataRect.point2.y,\n  ]);\n\n  if (isNaN(point2?.[0]) || isNaN(point2?.[1])) {\n    return null;\n  }\n\n  return {\n    point1: {x: point1[0], y: point1[1]},\n    point2: {x: point2[0], y: point2[1]},\n  };\n}\n\n/**\n * Given a point on a source rectangle, map it to the corresponding point on the\n * destination rectangle. Assumes that the two rectangles are related by a simple\n * transformation containing only translations and scaling.\n */\nexport function mapPoint(\n  point: Point,\n  srcRect: Rectangle,\n  destRect: Rectangle\n): Point | null {\n  if (\n    srcRect.point1.x === srcRect.point2.x ||\n    srcRect.point1.y === srcRect.point2.y ||\n    destRect.point1.x === destRect.point2.x ||\n    destRect.point1.y === destRect.point2.y\n  ) {\n    return null;\n  }\n\n  const xPercentage =\n    (point.x - srcRect.point1.x) / (srcRect.point2.x - srcRect.point1.x);\n  const yPercentage =\n    (point.y - srcRect.point1.y) / (srcRect.point2.y - srcRect.point1.y);\n\n  return {\n    x: destRect.point1.x + (destRect.point2.x - destRect.point1.x) * xPercentage,\n    y: destRect.point1.y + (destRect.point2.y - destRect.point1.y) * yPercentage,\n  };\n}\n\nexport function isMissingVitalsData(\n  vitalsData: VitalsData | null,\n  allVitals: WebVital[]\n): boolean {\n  if (!vitalsData || allVitals.some(vital => !vitalsData[vital])) {\n    return true;\n  }\n\n  const measurementsWithoutCounts = Object.values(vitalsData).filter(\n    vitalObj => vitalObj.total === 0\n  );\n  return measurementsWithoutCounts.length > 0;\n}\n","import moment from 'moment';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {EventsStatsData, Project} from 'sentry/types';\nimport EventView, {LocationQuery} from 'sentry/utils/discover/eventView';\n\nexport type TrendView = EventView & {\n  middle?: string;\n  orderby?: string;\n  trendFunction?: string;\n  trendType?: TrendChangeType;\n};\n\nexport type TrendsQuery = EventQuery &\n  LocationQuery & {\n    interval?: string;\n    middle?: string;\n    trendFunction?: string;\n    trendType?: TrendChangeType;\n  };\n\nexport type TrendFunction = {\n  alias: string;\n  field: TrendFunctionField;\n  label: string;\n  legendLabel: string;\n};\n\nexport type TrendParameter = {\n  column: string;\n  label: string;\n};\n\nexport enum TrendChangeType {\n  IMPROVED = 'improved',\n  REGRESSION = 'regression',\n}\n\nexport enum TrendFunctionField {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  AVG = 'avg',\n}\n\nexport enum TrendColumnField {\n  DURATION = 'transaction.duration',\n  LCP = 'measurements.lcp',\n  FCP = 'measurements.fcp',\n  FID = 'measurements.fid',\n  CLS = 'measurements.cls',\n  SPANS_DB = 'spans.db',\n  SPANS_HTTP = 'spans.http',\n  SPANS_BROWSER = 'spans.browser',\n  SPANS_RESOURCE = 'spans.resource',\n}\n\nexport type TrendStat = {\n  data: EventsStatsData;\n  order: number;\n};\n\nexport type TrendsStats = {\n  [transaction: string]: TrendStat;\n};\n\nexport type TrendsTransaction = {\n  aggregate_range_1: number;\n  aggregate_range_2: number;\n  count: number;\n\n  count_percentage: number;\n  count_range_1: number;\n  count_range_2: number;\n  project: string;\n  transaction: string;\n  trend_difference: number;\n  trend_percentage: number;\n};\n\nexport type TrendsDataEvents = {\n  data: TrendsTransaction[];\n  meta: any;\n};\n\nexport type TrendsData = {\n  events: TrendsDataEvents;\n  projects: Project[];\n  stats: TrendsStats;\n};\n\nexport type NormalizedTrendsTransaction = TrendsTransaction & {\n  received_at: Readonly<moment.Moment>;\n};\n","import {ASAP} from 'downsample/methods/ASAP';\nimport {Location} from 'history';\nimport moment from 'moment';\n\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {Project} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  AggregationKey,\n  Field,\n  generateFieldAsString,\n  Sort,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport theme from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {platformToPerformanceType, PROJECT_PERFORMANCE_TYPE} from '../utils';\n\nimport {\n  NormalizedTrendsTransaction,\n  TrendChangeType,\n  TrendColumnField,\n  TrendFunction,\n  TrendFunctionField,\n  TrendParameter,\n  TrendsTransaction,\n  TrendView,\n} from './types';\n\nexport const DEFAULT_TRENDS_STATS_PERIOD = '14d';\nexport const DEFAULT_MAX_DURATION = '15min';\n\nexport const TRENDS_FUNCTIONS: TrendFunction[] = [\n  {\n    label: 'p50',\n    field: TrendFunctionField.P50,\n    alias: 'percentile_range',\n    legendLabel: 'p50',\n  },\n  {\n    label: 'p75',\n    field: TrendFunctionField.P75,\n    alias: 'percentile_range',\n    legendLabel: 'p75',\n  },\n  {\n    label: 'p95',\n    field: TrendFunctionField.P95,\n    alias: 'percentile_range',\n    legendLabel: 'p95',\n  },\n  {\n    label: 'p99',\n    field: TrendFunctionField.P99,\n    alias: 'percentile_range',\n    legendLabel: 'p99',\n  },\n  {\n    label: 'average',\n    field: TrendFunctionField.AVG,\n    alias: 'avg_range',\n    legendLabel: 'average',\n  },\n];\n\nexport const TRENDS_PARAMETERS: TrendParameter[] = [\n  {\n    label: 'Duration',\n    column: TrendColumnField.DURATION,\n  },\n  {\n    label: 'LCP',\n    column: TrendColumnField.LCP,\n  },\n  {\n    label: 'FCP',\n    column: TrendColumnField.FCP,\n  },\n  {\n    label: 'FID',\n    column: TrendColumnField.FID,\n  },\n  {\n    label: 'CLS',\n    column: TrendColumnField.CLS,\n  },\n  {\n    label: 'Spans (http)',\n    column: TrendColumnField.SPANS_HTTP,\n  },\n  {\n    label: 'Spans (db)',\n    column: TrendColumnField.SPANS_DB,\n  },\n  {\n    label: 'Spans (browser)',\n    column: TrendColumnField.SPANS_BROWSER,\n  },\n  {\n    label: 'Spans (resource)',\n    column: TrendColumnField.SPANS_RESOURCE,\n  },\n];\n\nexport const trendToColor = {\n  [TrendChangeType.IMPROVED]: {\n    lighter: theme.green200,\n    default: theme.green300,\n  },\n  [TrendChangeType.REGRESSION]: {\n    lighter: theme.red200,\n    default: theme.red300,\n  },\n};\n\nexport const trendSelectedQueryKeys = {\n  [TrendChangeType.IMPROVED]: 'improvedSelected',\n  [TrendChangeType.REGRESSION]: 'regressionSelected',\n};\n\nexport const trendUnselectedSeries = {\n  [TrendChangeType.IMPROVED]: 'improvedUnselectedSeries',\n  [TrendChangeType.REGRESSION]: 'regressionUnselectedSeries',\n};\n\nexport const trendCursorNames = {\n  [TrendChangeType.IMPROVED]: 'improvedCursor',\n  [TrendChangeType.REGRESSION]: 'regressionCursor',\n};\n\nexport function resetCursors() {\n  const cursors = {};\n  Object.values(trendCursorNames).forEach(cursor => (cursors[cursor] = undefined)); // Resets both cursors\n  return cursors;\n}\n\nexport function getCurrentTrendFunction(\n  location: Location,\n  _trendFunctionField?: TrendFunctionField\n): TrendFunction {\n  const trendFunctionField =\n    _trendFunctionField ?? decodeScalar(location?.query?.trendFunction);\n  const trendFunction = TRENDS_FUNCTIONS.find(({field}) => field === trendFunctionField);\n  return trendFunction || TRENDS_FUNCTIONS[0];\n}\n\nfunction getDefaultTrendParameter(\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const performanceType = platformToPerformanceType(projects, projectIds);\n  const trendParameter = performanceTypeToTrendParameterLabel(performanceType);\n\n  return trendParameter;\n}\n\nexport function getCurrentTrendParameter(\n  location: Location,\n  projects: Project[],\n  projectIds: Readonly<number[]>\n): TrendParameter {\n  const trendParameterLabel = decodeScalar(location?.query?.trendParameter);\n  const trendParameter = TRENDS_PARAMETERS.find(\n    ({label}) => label === trendParameterLabel\n  );\n\n  if (trendParameter) {\n    return trendParameter;\n  }\n\n  const defaultTrendParameter = getDefaultTrendParameter(projects, projectIds);\n  return defaultTrendParameter;\n}\n\nexport function performanceTypeToTrendParameterLabel(\n  performanceType: PROJECT_PERFORMANCE_TYPE\n): TrendParameter {\n  switch (performanceType) {\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND:\n      return {\n        label: 'LCP',\n        column: TrendColumnField.LCP,\n      };\n    case PROJECT_PERFORMANCE_TYPE.ANY:\n    case PROJECT_PERFORMANCE_TYPE.BACKEND:\n    case PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER:\n    default:\n      return {\n        label: 'Duration',\n        column: TrendColumnField.DURATION,\n      };\n  }\n}\n\nexport function generateTrendFunctionAsString(\n  trendFunction: TrendFunctionField,\n  trendParameter: string\n): string {\n  return generateFieldAsString({\n    kind: 'function',\n    function: [trendFunction as AggregationKey, trendParameter, undefined, undefined],\n  });\n}\n\nexport function transformDeltaSpread(from: number, to: number) {\n  const fromSeconds = from / 1000;\n  const toSeconds = to / 1000;\n\n  const showDigits = from > 1000 || to > 1000 || from < 10 || to < 10; // Show digits consistently if either has them\n\n  return {fromSeconds, toSeconds, showDigits};\n}\n\nexport function getTrendProjectId(\n  trend: NormalizedTrendsTransaction,\n  projects?: Project[]\n): string | undefined {\n  if (!trend.project || !projects) {\n    return undefined;\n  }\n  const transactionProject = projects.find(project => project.slug === trend.project);\n  return transactionProject?.id;\n}\n\nexport function modifyTrendView(\n  trendView: TrendView,\n  location: Location,\n  trendsType: TrendChangeType,\n  projects: Project[],\n  isProjectOnly?: boolean\n) {\n  const trendFunction = getCurrentTrendFunction(location);\n  const trendParameter = getCurrentTrendParameter(location, projects, trendView.project);\n\n  const transactionField = isProjectOnly ? [] : ['transaction'];\n  const fields = [...transactionField, 'project'].map(field => ({\n    field,\n  })) as Field[];\n\n  const trendSort = {\n    field: 'trend_percentage()',\n    kind: 'asc',\n  } as Sort;\n\n  trendView.trendType = trendsType;\n  if (trendsType === TrendChangeType.REGRESSION) {\n    trendSort.kind = 'desc';\n  }\n\n  if (trendFunction && trendParameter) {\n    trendView.trendFunction = generateTrendFunctionAsString(\n      trendFunction.field,\n      trendParameter.column\n    );\n  }\n  trendView.query = getLimitTransactionItems(trendView.query);\n\n  trendView.interval = getQueryInterval(location, trendView);\n\n  trendView.sorts = [trendSort];\n  trendView.fields = fields;\n}\n\nexport function modifyTrendsViewDefaultPeriod(eventView: EventView, location: Location) {\n  const {query} = location;\n\n  const hasStartAndEnd = query.start && query.end;\n\n  if (!query.statsPeriod && !hasStartAndEnd) {\n    eventView.statsPeriod = DEFAULT_TRENDS_STATS_PERIOD;\n  }\n  return eventView;\n}\n\nfunction getQueryInterval(location: Location, eventView: TrendView) {\n  const intervalFromQueryParam = decodeScalar(location?.query?.interval);\n  const {start, end, statsPeriod} = eventView;\n\n  const datetimeSelection = {\n    start: start || null,\n    end: end || null,\n    period: statsPeriod,\n  };\n\n  const intervalFromSmoothing = getInterval(datetimeSelection, 'high');\n\n  return intervalFromQueryParam || intervalFromSmoothing;\n}\n\nexport function transformValueDelta(value: number, trendType: TrendChangeType) {\n  const absoluteValue = Math.abs(value);\n\n  const changeLabel =\n    trendType === TrendChangeType.REGRESSION ? t('slower') : t('faster');\n\n  const seconds = absoluteValue / 1000;\n\n  const fixedDigits = absoluteValue > 1000 || absoluteValue < 10 ? 1 : 0;\n\n  return {seconds, fixedDigits, changeLabel};\n}\n\n/**\n * This will normalize the trends transactions while the current trend function and current data are out of sync\n * To minimize extra renders with missing results.\n */\nexport function normalizeTrends(\n  data: Array<TrendsTransaction>\n): Array<NormalizedTrendsTransaction> {\n  const received_at = moment(); // Adding the received time for the transaction so calls to get baseline always line up with the transaction\n  return data.map(row => {\n    return {\n      ...row,\n      received_at,\n      transaction: row.transaction,\n    } as NormalizedTrendsTransaction;\n  });\n}\n\nexport function getSelectedQueryKey(trendChangeType: TrendChangeType) {\n  return trendSelectedQueryKeys[trendChangeType];\n}\n\nexport function getUnselectedSeries(trendChangeType: TrendChangeType) {\n  return trendUnselectedSeries[trendChangeType];\n}\n\nexport function movingAverage(data, index, size) {\n  return (\n    data\n      .slice(index - size, index)\n      .map(a => a.value)\n      .reduce((a, b) => a + b, 0) / size\n  );\n}\n\n/**\n * This function applies defaults for trend and count percentage, and adds the confidence limit to the query\n */\nfunction getLimitTransactionItems(query: string) {\n  const limitQuery = new MutableSearch(query);\n  if (!limitQuery.hasFilter('count_percentage()')) {\n    limitQuery.addFilterValues('count_percentage()', ['>0.25', '<4']);\n  }\n  if (!limitQuery.hasFilter('trend_percentage()')) {\n    limitQuery.addFilterValues('trend_percentage()', ['>0%']);\n  }\n  if (!limitQuery.hasFilter('confidence()')) {\n    limitQuery.addFilterValues('confidence()', ['>6']);\n  }\n  return limitQuery.formatString();\n}\n\nexport const smoothTrend = (data: [number, number][], resolution = 100) => {\n  return ASAP(data, resolution);\n};\n\nexport const replaceSeriesName = (seriesName: string) => {\n  return ['p50', 'p75'].find(aggregate => seriesName.includes(aggregate));\n};\n\nexport const replaceSmoothedSeriesName = (seriesName: string) => {\n  return `Smoothed ${['p50', 'p75'].find(aggregate => seriesName.includes(aggregate))}`;\n};\n\nexport function transformEventStatsSmoothed(data?: Series[], seriesName?: string) {\n  let minValue = Number.MAX_SAFE_INTEGER;\n  let maxValue = 0;\n  if (!data) {\n    return {\n      maxValue,\n      minValue,\n      smoothedResults: undefined,\n    };\n  }\n\n  const smoothedResults: Series[] = [];\n\n  for (const current of data) {\n    const currentData = current.data;\n    const resultData: SeriesDataUnit[] = [];\n\n    const smoothed = smoothTrend(\n      currentData.map(({name, value}) => [Number(name), value])\n    );\n\n    for (let i = 0; i < smoothed.length; i++) {\n      const point = smoothed[i] as any;\n      const value = point.y;\n      resultData.push({\n        name: point.x,\n        value,\n      });\n      if (!isNaN(value)) {\n        const rounded = Math.round(value);\n        minValue = Math.min(rounded, minValue);\n        maxValue = Math.max(rounded, maxValue);\n      }\n    }\n    smoothedResults.push({\n      seriesName: seriesName || current.seriesName || 'Current',\n      data: resultData,\n      lineStyle: current.lineStyle,\n      color: current.color,\n    });\n  }\n\n  return {\n    minValue,\n    maxValue,\n    smoothedResults,\n  };\n}\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {ALL_ACCESS_PROJECTS} from 'sentry/constants/pageFilters';\nimport {backend, frontend, mobile} from 'sentry/data/platformCategories';\nimport {\n  Organization,\n  OrganizationSummary,\n  PageFilters,\n  Project,\n  ReleaseProject,\n} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {statsPeriodToDays} from 'sentry/utils/dates';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TRACING_FIELDS} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\nimport getCurrentSentryReactTransaction from 'sentry/utils/getCurrentSentryReactTransaction';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {DEFAULT_MAX_DURATION} from './trends/utils';\n\nexport const QUERY_KEYS = [\n  'environment',\n  'project',\n  'query',\n  'start',\n  'end',\n  'statsPeriod',\n] as const;\n\n/**\n * Performance type can used to determine a default view or which specific field should be used by default on pages\n * where we don't want to wait for transaction data to return to determine how to display aspects of a page.\n */\nexport enum PROJECT_PERFORMANCE_TYPE {\n  ANY = 'any', // Fallback to transaction duration\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  FRONTEND_OTHER = 'frontend_other',\n  MOBILE = 'mobile',\n}\n\n// The native SDK is equally used on clients and end-devices as on\n// backend, the default view should be \"All Transactions\".\nconst FRONTEND_PLATFORMS: string[] = [...frontend];\nconst BACKEND_PLATFORMS: string[] = backend.filter(platform => platform !== 'native');\nconst MOBILE_PLATFORMS: string[] = [...mobile];\n\nexport function platformToPerformanceType(\n  projects: (Project | ReleaseProject)[],\n  projectIds: readonly number[]\n) {\n  if (projectIds.length === 0 || projectIds[0] === ALL_ACCESS_PROJECTS) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  const selectedProjects = projects.filter(p =>\n    projectIds.includes(parseInt(`${p.id}`, 10))\n  );\n\n  if (selectedProjects.length === 0 || selectedProjects.some(p => !p.platform)) {\n    return PROJECT_PERFORMANCE_TYPE.ANY;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      FRONTEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.FRONTEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      BACKEND_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.BACKEND;\n  }\n\n  if (\n    selectedProjects.every(project =>\n      MOBILE_PLATFORMS.includes(project.platform as string)\n    )\n  ) {\n    return PROJECT_PERFORMANCE_TYPE.MOBILE;\n  }\n\n  return PROJECT_PERFORMANCE_TYPE.ANY;\n}\n\n/**\n * Used for transaction summary to determine appropriate columns on a page, since there is no display field set for the page.\n */\nexport function platformAndConditionsToPerformanceType(\n  projects: Project[],\n  eventView: EventView\n) {\n  const performanceType = platformToPerformanceType(projects, eventView.project);\n  if (performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND) {\n    const conditions = new MutableSearch(eventView.query);\n    const ops = conditions.getFilterValues('!transaction.op');\n    if (ops.some(op => op === 'pageload')) {\n      return PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER;\n    }\n  }\n\n  return performanceType;\n}\n\n/**\n * Used for transaction summary to check the view itself, since it can have conditions which would exclude it from having vitals aside from platform.\n */\nexport function isSummaryViewFrontendPageLoad(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n    PROJECT_PERFORMANCE_TYPE.FRONTEND\n  );\n}\n\nexport function isSummaryViewFrontend(eventView: EventView, projects: Project[]) {\n  return (\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND ||\n    platformAndConditionsToPerformanceType(projects, eventView) ===\n      PROJECT_PERFORMANCE_TYPE.FRONTEND_OTHER\n  );\n}\n\nexport function getPerformanceLandingUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/`;\n}\n\nexport function getPerformanceTrendsUrl(organization: OrganizationSummary): string {\n  return `/organizations/${organization.slug}/performance/trends/`;\n}\n\nexport function getTransactionSearchQuery(location: Location, query: string = '') {\n  return decodeScalar(location.query.query, query).trim();\n}\n\nexport function handleTrendsClick({\n  location,\n  organization,\n}: {\n  location: Location;\n  organization: Organization;\n}) {\n  trackAnalyticsEvent({\n    eventKey: 'performance_views.change_view',\n    eventName: 'Performance Views: Change View',\n    organization_id: parseInt(organization.id, 10),\n    view_name: 'TRENDS',\n  });\n\n  const target = trendsTargetRoute({location, organization});\n\n  browserHistory.push(target);\n}\n\nexport function trendsTargetRoute({\n  location,\n  organization,\n  initialConditions,\n  additionalQuery,\n}: {\n  location: Location;\n  organization: Organization;\n  additionalQuery?: {[x: string]: string};\n  initialConditions?: MutableSearch;\n}) {\n  const newQuery = {\n    ...location.query,\n    ...additionalQuery,\n  };\n\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  const modifiedConditions = initialConditions ?? new MutableSearch([]);\n\n  if (conditions.hasFilter('tpm()')) {\n    modifiedConditions.setFilterValues('tpm()', conditions.getFilterValues('tpm()'));\n  } else {\n    modifiedConditions.setFilterValues('tpm()', ['>0.01']);\n  }\n  if (conditions.hasFilter('transaction.duration')) {\n    modifiedConditions.setFilterValues(\n      'transaction.duration',\n      conditions.getFilterValues('transaction.duration')\n    );\n  } else {\n    modifiedConditions.setFilterValues('transaction.duration', [\n      '>0',\n      `<${DEFAULT_MAX_DURATION}`,\n    ]);\n  }\n  newQuery.query = modifiedConditions.formatString();\n\n  return {pathname: getPerformanceTrendsUrl(organization), query: {...newQuery}};\n}\n\nexport function removeTracingKeysFromSearch(\n  currentFilter: MutableSearch,\n  options: {excludeTagKeys: Set<string>} = {\n    excludeTagKeys: new Set([\n      // event type can be \"transaction\" but we're searching for issues\n      'event.type',\n      // the project is already determined by the transaction,\n      // and issue search does not support the project filter\n      'project',\n    ]),\n  }\n) {\n  currentFilter.getFilterKeys().forEach(tagKey => {\n    const searchKey = tagKey.startsWith('!') ? tagKey.substr(1) : tagKey;\n    // Remove aggregates and transaction event fields\n    if (\n      // aggregates\n      searchKey.match(/\\w+\\(.*\\)/) ||\n      // transaction event fields\n      TRACING_FIELDS.includes(searchKey) ||\n      // tags that we don't want to pass to pass to issue search\n      options.excludeTagKeys.has(searchKey)\n    ) {\n      currentFilter.removeFilter(tagKey);\n    }\n  });\n\n  return currentFilter;\n}\n\nexport function addRoutePerformanceContext(selection: PageFilters) {\n  const transaction = getCurrentSentryReactTransaction();\n  const days = statsPeriodToDays(\n    selection.datetime.period,\n    selection.datetime.start,\n    selection.datetime.end\n  );\n  const oneDay = 86400;\n  const seconds = Math.floor(days * oneDay);\n\n  transaction?.setTag('query.period', seconds.toString());\n  let groupedPeriod = '>30d';\n  if (seconds <= oneDay) {\n    groupedPeriod = '<=1d';\n  } else if (seconds <= oneDay * 7) {\n    groupedPeriod = '<=7d';\n  } else if (seconds <= oneDay * 14) {\n    groupedPeriod = '<=14d';\n  } else if (seconds <= oneDay * 30) {\n    groupedPeriod = '<=30d';\n  }\n  transaction?.setTag('query.period.grouped', groupedPeriod);\n}\n\nexport function getTransactionName(location: Location): string | undefined {\n  const {transaction} = location.query;\n\n  return decodeScalar(transaction);\n}\n\nexport function getPerformanceDuration(milliseconds: number) {\n  return getDuration(milliseconds / 1000, milliseconds > 1000 ? 2 : 0, true);\n}\n","import {Location, Query} from 'history';\n\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {LineChartProps} from 'sentry/components/charts/lineChart';\nimport {getSeriesSelection} from 'sentry/components/charts/utils';\nimport {IconHappy, IconMeh, IconSad} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {getAggregateAlias, WebVital} from 'sentry/utils/discover/fields';\nimport {Browser} from 'sentry/utils/performance/vitals/constants';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {Color, Theme} from 'sentry/utils/theme';\nimport {AlertType} from 'sentry/views/alerts/wizard/options';\n\nexport function generateVitalDetailRoute({orgSlug}: {orgSlug: string}): string {\n  return `/organizations/${orgSlug}/performance/vitaldetail/`;\n}\n\nexport const webVitalPoor = {\n  [WebVital.FP]: 3000,\n  [WebVital.FCP]: 3000,\n  [WebVital.LCP]: 4000,\n  [WebVital.FID]: 300,\n  [WebVital.CLS]: 0.25,\n};\n\nexport const webVitalMeh = {\n  [WebVital.FP]: 1000,\n  [WebVital.FCP]: 1000,\n  [WebVital.LCP]: 2500,\n  [WebVital.FID]: 100,\n  [WebVital.CLS]: 0.1,\n};\n\nexport enum VitalState {\n  POOR = 'Poor',\n  MEH = 'Meh',\n  GOOD = 'Good',\n}\n\nexport const vitalStateColors: Record<VitalState, Color> = {\n  [VitalState.POOR]: 'red300',\n  [VitalState.MEH]: 'yellow300',\n  [VitalState.GOOD]: 'green300',\n};\n\nexport const vitalStateIcons: Record<VitalState, React.ReactNode> = {\n  [VitalState.POOR]: <IconSad color={vitalStateColors[VitalState.POOR]} />,\n  [VitalState.MEH]: <IconMeh color={vitalStateColors[VitalState.MEH]} />,\n  [VitalState.GOOD]: <IconHappy color={vitalStateColors[VitalState.GOOD]} />,\n};\n\nexport function vitalDetailRouteWithQuery({\n  orgSlug,\n  vitalName,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  vitalName: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateVitalDetailRoute({\n    orgSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      vitalName,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport function vitalNameFromLocation(location: Location): WebVital {\n  const _vitalName = decodeScalar(location.query.vitalName);\n\n  const vitalName = Object.values(WebVital).find(v => v === _vitalName);\n\n  if (vitalName) {\n    return vitalName;\n  }\n  return WebVital.LCP;\n}\n\nexport function getVitalChartTitle(webVital: WebVital): string {\n  if (webVital === WebVital.CLS) {\n    return t('CLS p75');\n  }\n  return t('Duration p75');\n}\n\nexport function getVitalDetailTablePoorStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalPoor[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport function getVitalDetailTableMehStatusFunction(vitalName: WebVital): string {\n  const vitalThreshold = webVitalMeh[vitalName];\n  const statusFunction = `compare_numeric_aggregate(${getAggregateAlias(\n    `p75(${vitalName})`\n  )},greater,${vitalThreshold})`;\n  return statusFunction;\n}\n\nexport const vitalMap: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'First Contentful Paint',\n  [WebVital.CLS]: 'Cumulative Layout Shift',\n  [WebVital.FID]: 'First Input Delay',\n  [WebVital.LCP]: 'Largest Contentful Paint',\n};\n\nexport const vitalChartTitleMap = vitalMap;\n\nexport const vitalDescription: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]:\n    'First Contentful Paint (FCP) measures the amount of time the first content takes to render in the viewport. Like FP, this could also show up in any form from the document object model (DOM), such as images, SVGs, or text blocks. At the moment, there is support for FCP in the following browsers:',\n  [WebVital.CLS]:\n    'Cumulative Layout Shift (CLS) is the sum of individual layout shift scores for every unexpected element shift during the rendering process. Imagine navigating to an article and trying to click a link before the page finishes loading. Before your cursor even gets there, the link may have shifted down due to an image rendering. Rather than using duration for this Web Vital, the CLS score represents the degree of disruptive and visually unstable shifts. At the moment, there is support for CLS in the following browsers:',\n  [WebVital.FID]:\n    'First Input Delay (FID) measures the response time when the user tries to interact with the viewport. Actions maybe include clicking a button, link or other custom Javascript controller. It is key in helping the user determine if a page is usable or not. At the moment, there is support for FID in the following browsers:',\n  [WebVital.LCP]:\n    'Largest Contentful Paint (LCP) measures the render time for the largest content to appear in the viewport. This may be in any form from the document object model (DOM), such as images, SVGs, or text blocks. It’s the largest pixel area in the viewport, thus most visually defining. LCP helps developers understand how long it takes to see the main content on the page. At the moment, there is support for LCP in the following browsers:',\n};\n\nexport const vitalAbbreviations: Partial<Record<WebVital, string>> = {\n  [WebVital.FCP]: 'FCP',\n  [WebVital.CLS]: 'CLS',\n  [WebVital.FID]: 'FID',\n  [WebVital.LCP]: 'LCP',\n};\n\nexport const vitalAlertTypes: Partial<Record<WebVital, AlertType>> = {\n  [WebVital.FCP]: 'custom',\n  [WebVital.CLS]: 'cls',\n  [WebVital.FID]: 'fid',\n  [WebVital.LCP]: 'lcp',\n};\n\nexport function getMaxOfSeries(series: Series[]) {\n  let max = -Infinity;\n  for (const {data} of series) {\n    for (const point of data) {\n      max = Math.max(max, point.value);\n    }\n  }\n  return max;\n}\n\nexport const vitalSupportedBrowsers: Partial<Record<WebVital, Browser[]>> = {\n  [WebVital.LCP]: [Browser.CHROME, Browser.EDGE, Browser.OPERA],\n  [WebVital.FID]: [\n    Browser.CHROME,\n    Browser.EDGE,\n    Browser.OPERA,\n    Browser.FIREFOX,\n    Browser.SAFARI,\n    Browser.IE,\n  ],\n  [WebVital.CLS]: [Browser.CHROME, Browser.EDGE, Browser.OPERA],\n  [WebVital.FP]: [Browser.CHROME, Browser.EDGE, Browser.OPERA],\n  [WebVital.FCP]: [\n    Browser.CHROME,\n    Browser.EDGE,\n    Browser.OPERA,\n    Browser.FIREFOX,\n    Browser.SAFARI,\n  ],\n  [WebVital.TTFB]: [\n    Browser.CHROME,\n    Browser.EDGE,\n    Browser.OPERA,\n    Browser.FIREFOX,\n    Browser.SAFARI,\n    Browser.IE,\n  ],\n};\n\nexport function getVitalChartDefinitions({\n  theme,\n  location,\n  vital,\n  yAxis,\n}: {\n  location: Location;\n  theme: Theme;\n  vital: string;\n  yAxis: string;\n}) {\n  const utc = decodeScalar(location.query.utc) !== 'false';\n\n  const vitalPoor = webVitalPoor[vital];\n  const vitalMeh = webVitalMeh[vital];\n\n  const legend = {\n    right: 10,\n    top: 0,\n    selected: getSeriesSelection(location),\n  };\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    grid: {\n      left: '5px',\n      right: '10px',\n      top: '35px',\n      bottom: '0px',\n    },\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis',\n      valueFormatter: (value: number, seriesName?: string) =>\n        tooltipFormatter(value, vital === WebVital.CLS ? seriesName : yAxis),\n    },\n    yAxis: {\n      min: 0,\n      max: vitalPoor,\n      axisLabel: {\n        color: theme.chartLabel,\n        showMaxLabel: false,\n        // coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, yAxis),\n      },\n    },\n  };\n\n  const markLines = [\n    {\n      seriesName: 'Thresholds',\n      type: 'line' as const,\n      data: [],\n      markLine: MarkLine({\n        silent: true,\n        lineStyle: {\n          color: theme.red300,\n          type: 'dashed',\n          width: 1.5,\n        },\n        label: {\n          show: true,\n          position: 'insideEndTop',\n          formatter: t('Poor'),\n        },\n        data: [\n          {\n            yAxis: vitalPoor,\n          } as any, // TODO(ts): date on this type is likely incomplete (needs @types/echarts@4.6.2)\n        ],\n      }),\n    },\n    {\n      seriesName: 'Thresholds',\n      type: 'line' as const,\n      data: [],\n      markLine: MarkLine({\n        silent: true,\n        lineStyle: {\n          color: theme.yellow300,\n          type: 'dashed',\n          width: 1.5,\n        },\n        label: {\n          show: true,\n          position: 'insideEndTop',\n          formatter: t('Meh'),\n        },\n        data: [\n          {\n            yAxis: vitalMeh,\n          } as any, // TODO(ts): date on this type is likely incomplete (needs @types/echarts@4.6.2)\n        ],\n      }),\n    },\n  ];\n\n  return {\n    vitalPoor,\n    vitalMeh,\n    legend,\n    chartOptions,\n    markLines,\n    utc,\n  };\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar __isA = {\n  \"PointValueExtractor<unknown>\": value => typeof value === \"function\",\n  \"XYDataPoint\": value => value !== undefined && value !== null && __isA[\"X\"](value[\"x\"]) && typeof value[\"y\"] === \"number\",\n  \"X\": value => typeof value === \"number\" || value instanceof Date\n};\nvar calculateMean = values => {\n  var m = 0;\n\n  for (var i = 0; i < values.length; i += 1) {\n    m += values[i];\n  }\n\n  return m / values.length;\n};\nvar calculateSTD = values => {\n  var mean = calculateMean(values);\n  var std = 0;\n\n  for (var i = 0; i < values.length; i += 1) {\n    std += (values[i] - mean) * (values[i] - mean);\n  }\n\n  return Math.sqrt(std / values.length);\n};\nvar mapToArray = (input, callback) => {\n  var length = input.length;\n  var result = new Array(length);\n\n  for (var i = 0; i < length; i++) {\n    result[i] = callback(input[i], i);\n  }\n\n  return result;\n};\nvar getPointValueExtractor = accessor => {\n  if (__isA[\"PointValueExtractor<unknown>\"](accessor)) return accessor;\n  return point => point[accessor];\n};\nvar createXYDataPoint = (time, value) => ({\n  x: time,\n  y: value\n});\nvar createLegacyDataPointConfig = () => ({\n  x: point => {\n    var t = __isA[\"XYDataPoint\"](point) ? point.x : point[0];\n    return t instanceof Date ? t.getTime() : t;\n  },\n  y: point => 'y' in point ? point.y : point[1],\n  toPoint: createXYDataPoint\n});\nvar iterableBasedOn = (input, length) => new input.constructor(length);\n\nvar SMANumeric = function SMANumeric(data, windowSize) {\n  var slide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var output = [];\n  var sum = 0;\n\n  for (var i = 0; i < windowSize; i++) {\n    sum += data[i];\n  }\n\n  for (var _i = windowSize; _i <= data.length; _i++) {\n    if ((_i - windowSize) % slide === 0) {\n      output.push(sum / windowSize);\n    }\n\n    sum += data[_i] - data[_i - windowSize];\n  }\n\n  return output;\n};\n/**\n * Simple Moving Average (SMA)\n *\n * @param data {Number[]}\n * @param windowSize {Number}\n * @param slide {Number}\n */\n\nvar createSMA = config => {\n  var timeExtractor = getPointValueExtractor(config.x);\n  var valueExtractor = getPointValueExtractor(config.y);\n  var pointFactory = config.toPoint;\n  return function (values, windowSize) {\n    var slide = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    if (values.length === 0) return values;\n    var data = mapToArray(values, valueExtractor);\n    var times = mapToArray(values, timeExtractor);\n    var output = iterableBasedOn(values, 0);\n    var sum = 0;\n    var value;\n\n    for (var i = 0; i < windowSize; i++) {\n      sum += data[i];\n    }\n\n    for (var _i2 = windowSize; _i2 <= data.length; _i2++) {\n      if ((_i2 - windowSize) % slide === 0) {\n        value = pointFactory((times[_i2 - windowSize] + times[_i2 - 1]) / 2, sum / windowSize, _i2 - windowSize);\n        output[output.length] = value;\n      }\n\n      sum += data[_i2] - data[_i2 - windowSize];\n    }\n\n    return output;\n  };\n};\nvar SMA = createSMA(createLegacyDataPointConfig());\n\n/*\n * Free FFT and convolution (JavaScript)\n *\n * Copyright (c) 2014 Project Nayuki\n * https://www.nayuki.io/page/free-small-fft-in-multiple-languages\n *\n * (MIT License)\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n * - The above copyright notice and this permission notice shall be included in\n *   all copies or substantial portions of the Software.\n * - The Software is provided \"as is\", without warranty of any kind, express or\n *   implied, including but not limited to the warranties of merchantability,\n *   fitness for a particular purpose and noninfringement. In no event shall the\n *   authors or copyright holders be liable for any claim, damages or other\n *   liability, whether in an action of contract, tort or otherwise, arising from,\n *   out of or in connection with the Software or the use or other dealings in the\n *   Software.\n */\n\n/*\n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector can have any length. This is a wrapper function.\n */\n\nfunction fft(real, imag) {\n  if (real.length != imag.length) throw 'Mismatched lengths';\n  var n = real.length;\n  if (n == 0) return;else if ((n & n - 1) == 0) // Is power of 2\n    transformRadix2(real, imag); // More complicated algorithm for arbitrary sizes\n  else transformBluestein(real, imag);\n}\n/*\n * Computes the inverse discrete Fourier transform (IDFT) of the given complex vector, storing the result back into the vector.\n * The vector can have any length. This is a wrapper function. This transform does not perform scaling, so the inverse is not a true inverse.\n */\n\nfunction inverseFFT(real, imag) {\n  fft(imag, real);\n}\n/*\n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.\n */\n\nfunction transformRadix2(real, imag) {\n  // Initialization\n  if (real.length != imag.length) throw 'Mismatched lengths';\n  var n = real.length;\n  if (n == 1) // Trivial transform\n    return;\n  var levels = -1;\n\n  for (var i = 0; i < 32; i++) {\n    if (1 << i == n) levels = i; // Equal to log2(n)\n  }\n\n  if (levels == -1) throw 'Length is not a power of 2';\n  var cosTable = new Array(n / 2);\n  var sinTable = new Array(n / 2);\n\n  for (var _i = 0; _i < n / 2; _i++) {\n    cosTable[_i] = Math.cos(2 * Math.PI * _i / n);\n    sinTable[_i] = Math.sin(2 * Math.PI * _i / n);\n  } // Bit-reversed addressing permutation\n\n\n  for (var _i2 = 0; _i2 < n; _i2++) {\n    var j = reverseBits(_i2, levels);\n\n    if (j > _i2) {\n      var temp = real[_i2];\n      real[_i2] = real[j];\n      real[j] = temp;\n      temp = imag[_i2];\n      imag[_i2] = imag[j];\n      imag[j] = temp;\n    }\n  } // Cooley-Tukey decimation-in-time radix-2 FFT\n\n\n  for (var size = 2; size <= n; size *= 2) {\n    var halfsize = size / 2;\n    var tablestep = n / size;\n\n    for (var _i3 = 0; _i3 < n; _i3 += size) {\n      for (var _j = _i3, k = 0; _j < _i3 + halfsize; _j++, k += tablestep) {\n        var tpre = real[_j + halfsize] * cosTable[k] + imag[_j + halfsize] * sinTable[k];\n        var tpim = -real[_j + halfsize] * sinTable[k] + imag[_j + halfsize] * cosTable[k];\n        real[_j + halfsize] = real[_j] - tpre;\n        imag[_j + halfsize] = imag[_j] - tpim;\n        real[_j] += tpre;\n        imag[_j] += tpim;\n      }\n    }\n  }\n} // Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.\n\n\nfunction reverseBits(x, bits) {\n  var y = 0;\n\n  for (var i = 0; i < bits; i++) {\n    y = y << 1 | x & 1;\n    x >>>= 1;\n  }\n\n  return y;\n}\n/*\n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector can have any length. This requires the convolution function, which in turn requires the radix-2 FFT function.\n * Uses Bluestein's chirp z-transform algorithm.\n */\n\n\nfunction transformBluestein(real, imag) {\n  // Find a power-of-2 convolution length m such that m >= n * 2 + 1\n  if (real.length != imag.length) throw 'Mismatched lengths';\n  var n = real.length;\n  var m = 1;\n\n  while (m < n * 2 + 1) {\n    m *= 2;\n  } // Trignometric tables\n\n\n  var cosTable = new Array(n);\n  var sinTable = new Array(n);\n\n  for (var i = 0; i < n; i++) {\n    var j = i * i % (n * 2); // This is more accurate than j = i * i\n\n    cosTable[i] = Math.cos(Math.PI * j / n);\n    sinTable[i] = Math.sin(Math.PI * j / n);\n  } // Temporary vectors and preprocessing\n\n\n  var areal = new Array(m);\n  var aimag = new Array(m);\n\n  for (var _i4 = 0; _i4 < n; _i4++) {\n    areal[_i4] = real[_i4] * cosTable[_i4] + imag[_i4] * sinTable[_i4];\n    aimag[_i4] = -real[_i4] * sinTable[_i4] + imag[_i4] * cosTable[_i4];\n  }\n\n  for (var _i5 = n; _i5 < m; _i5++) {\n    areal[_i5] = aimag[_i5] = 0;\n  }\n\n  var breal = new Array(m);\n  var bimag = new Array(m);\n  breal[0] = cosTable[0];\n  bimag[0] = sinTable[0];\n\n  for (var _i6 = 1; _i6 < n; _i6++) {\n    breal[_i6] = breal[m - _i6] = cosTable[_i6];\n    bimag[_i6] = bimag[m - _i6] = sinTable[_i6];\n  }\n\n  for (var _i7 = n; _i7 <= m - n; _i7++) {\n    breal[_i7] = bimag[_i7] = 0;\n  } // Convolution\n\n\n  var creal = new Array(m);\n  var cimag = new Array(m);\n  convolveComplex(areal, aimag, breal, bimag, creal, cimag); // Postprocessing\n\n  for (var _i8 = 0; _i8 < n; _i8++) {\n    real[_i8] = creal[_i8] * cosTable[_i8] + cimag[_i8] * sinTable[_i8];\n    imag[_i8] = -creal[_i8] * sinTable[_i8] + cimag[_i8] * cosTable[_i8];\n  }\n}\n/*\n * Computes the circular convolution of the given complex vectors. Each vector's length must be the same.\n */\n\n\nfunction convolveComplex(xreal, ximag, yreal, yimag, outreal, outimag) {\n  if (xreal.length != ximag.length || xreal.length != yreal.length || yreal.length != yimag.length || xreal.length != outreal.length || outreal.length != outimag.length) throw 'Mismatched lengths';\n  var n = xreal.length;\n  xreal = xreal.slice();\n  ximag = ximag.slice();\n  yreal = yreal.slice();\n  yimag = yimag.slice();\n  fft(xreal, ximag);\n  fft(yreal, yimag);\n\n  for (var i = 0; i < n; i++) {\n    var temp = xreal[i] * yreal[i] - ximag[i] * yimag[i];\n    ximag[i] = ximag[i] * yreal[i] + xreal[i] * yimag[i];\n    xreal[i] = temp;\n  }\n\n  inverseFFT(xreal, ximag);\n\n  for (var _i9 = 0; _i9 < n; _i9++) {\n    // Scaling (because this FFT implementation omits it)\n    outreal[_i9] = xreal[_i9] / n;\n    outimag[_i9] = ximag[_i9] / n;\n  }\n}\n\nvar calculateDiffs = values => {\n  var length = values.length - 1;\n  if (length < 1) return [];\n  var diffs = new Array(length);\n\n  for (var i = 0; i < length; i++) {\n    diffs[i] = values[i + 1] - values[i];\n  }\n\n  return diffs;\n};\n\nvar calculateRoughness = values => calculateSTD(calculateDiffs(values));\n\nvar calculateKurtosis = values => {\n  var length = values.length;\n  var mean = calculateMean(values);\n  var u4 = 0;\n  var variance = 0;\n  var diff;\n  var diffSqr;\n\n  for (var i = 0; i < length; i++) {\n    diff = values[i] - mean;\n    diffSqr = diff * diff;\n    u4 += diffSqr * diffSqr;\n    variance += diffSqr;\n  }\n\n  return length * u4 / (variance * variance);\n};\n\nvar findWindowSize = (head, tail, data, minRoughness, originalKurt, windowSize) => {\n  while (head <= tail) {\n    var w = Math.round((head + tail) / 2);\n    var smoothed = SMANumeric(data, w, 1);\n    var kurtosis = calculateKurtosis(smoothed);\n\n    if (kurtosis >= originalKurt) {\n      /* Search second half if feasible */\n      var roughness = calculateRoughness(smoothed);\n\n      if (roughness < minRoughness) {\n        windowSize = w;\n        minRoughness = roughness;\n      }\n\n      head = w + 1;\n    } else {\n      /* Search first half */\n      tail = w - 1;\n    }\n  }\n\n  return windowSize;\n};\n\nvar calculatePeaks = function calculatePeaks(correlations) {\n  var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.2;\n  var length = correlations.length;\n  if (length <= 1) return [[], 0];\n  var maxCorrelation = 0;\n  var peaks = [];\n\n  if (correlations.length > 1) {\n    var positive = correlations[1] > correlations[0];\n    var max = 1;\n\n    for (var i = 2; i < correlations.length; i += 1) {\n      if (!positive && correlations[i] > correlations[i - 1]) {\n        max = i;\n        positive = !positive;\n      } else if (positive && correlations[i] > correlations[max]) {\n        max = i;\n      } else if (positive && correlations[i] < correlations[i - 1]) {\n        if (max > 1 && correlations[max] > threshold) {\n          peaks.push(max);\n\n          if (correlations[max] > maxCorrelation) {\n            maxCorrelation = correlations[max];\n          }\n        }\n\n        positive = !positive;\n      }\n    }\n  }\n  /* If there is no autocorrelation peak within the MAX_WINDOW boundary try windows from the largest to the smallest */\n\n\n  if (peaks.length <= 1) {\n    for (var _i = 2; _i < length; _i += 1) {\n      peaks.push(_i);\n    }\n  }\n\n  return [peaks, maxCorrelation];\n};\n\nvar calculateAutocorrelation = (values, maxLag) => {\n  var length = values.length;\n  var mean = calculateMean(values);\n  /* Padding to the closest power of 2 */\n\n  var len = Math.pow(2, Math.trunc(Math.log2(length)) + 1);\n  var fftreal = new Array(len).fill(0);\n  var fftimg = new Array(len).fill(0);\n\n  for (var i = 0; i < length; i += 1) {\n    fftreal[i] = values[i] - mean;\n  }\n  /* F_R(f) = FFT(X) */\n\n\n  fft(fftreal, fftimg);\n  /* S(f) = F_R(f)F_R*(f) */\n\n  for (var _i2 = 0; _i2 < fftreal.length; _i2 += 1) {\n    fftreal[_i2] = Math.pow(fftreal[_i2], 2) + Math.pow(fftimg[_i2], 2);\n    fftimg[_i2] = 0;\n  }\n  /*  R(t) = IFFT(S(f)) */\n\n\n  inverseFFT(fftreal, fftimg); // Calculate correlations\n\n  var correlations = [];\n\n  for (var _i3 = 1; _i3 < maxLag; _i3++) {\n    correlations[_i3] = fftreal[_i3] / fftreal[0];\n  }\n\n  var _calculatePeaks = calculatePeaks(correlations),\n      _calculatePeaks2 = _slicedToArray(_calculatePeaks, 2),\n      peaks = _calculatePeaks2[0],\n      maxCorrelation = _calculatePeaks2[1];\n\n  return {\n    correlations,\n    peaks,\n    maxCorrelation\n  };\n};\n\nvar createASAP = config => {\n  var valueExtractor = getPointValueExtractor(config.y);\n  var SMA = createSMA(config);\n  return function ASAP(values, resolution) {\n    if (values.length === 0) return values;\n\n    if (resolution <= 0) {\n      throw new Error(\"Supplied non-positive resolution parameter to ASAP: \".concat(resolution));\n    } // If the resolution is at least twice as big as the number of data points\n    // then the values get downsampled to desired resolution first by SMA\n\n\n    if (values.length >= 2 * resolution) {\n      var scale = Math.trunc(values.length / resolution);\n      return ASAP(SMA(values, scale, scale), resolution);\n    } // First turn data points into a sequence of values\n\n\n    var data = mapToArray(values, valueExtractor);\n\n    var _calculateAutocorrela = calculateAutocorrelation(data, Math.round(data.length / 10)),\n        correlations = _calculateAutocorrela.correlations,\n        peaks = _calculateAutocorrela.peaks,\n        maxCorrelation = _calculateAutocorrela.maxCorrelation;\n\n    var originalKurtosis = calculateKurtosis(data);\n    var minRoughness = calculateRoughness(data);\n    var windowSize = 1;\n    var lb = 1;\n    var largestFeasible = -1;\n    var tail = data.length / 10;\n\n    for (var i = peaks.length - 1; i >= 0; i -= 1) {\n      var w = peaks[i];\n\n      if (w < lb || w === 1) {\n        break;\n      } else if (Math.sqrt(1 - correlations[w]) * windowSize > Math.sqrt(1 - correlations[windowSize]) * w) {\n        continue;\n      }\n\n      var smoothed = SMANumeric(data, w, 1);\n      var kurtosis = calculateKurtosis(smoothed);\n      var roughness = calculateRoughness(smoothed);\n\n      if (kurtosis >= originalKurtosis) {\n        if (roughness < minRoughness) {\n          minRoughness = roughness;\n          windowSize = w;\n        }\n\n        lb = Math.round(Math.max(w * Math.sqrt((maxCorrelation - 1) / (correlations[w] - 1)), lb));\n\n        if (largestFeasible < 0) {\n          largestFeasible = i;\n        }\n      }\n    }\n\n    if (largestFeasible > 0) {\n      if (largestFeasible < peaks.length - 2) {\n        tail = peaks[largestFeasible + 1];\n      }\n\n      lb = Math.max(lb, peaks[largestFeasible] + 1);\n    }\n\n    windowSize = findWindowSize(lb, tail, data, minRoughness, originalKurtosis, windowSize);\n    return SMA(values, windowSize, 1);\n  };\n};\nvar ASAP = createASAP(createLegacyDataPointConfig());\n\nexports.ASAP = ASAP;\nexports.createASAP = createASAP;\n//# sourceMappingURL=ASAP.js.map\n"],"names":["tooltipFormatter","value","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","getBucketWidth","data","length","bin","computeBuckets","width","map","item","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","decimalPlaces","factor","Math","round","Number","EPSILON","Error","count","name","getTraceFullRequestPayload","detailed","eventId","props","additionalApiPayload","getTraceRequestPayload","event_id","EmptyTrace","children","Fragment","isLoading","error","traces","GenericTraceFullQuery","traceId","statsPeriod","eventView","makeEventView","route","getRequestPayload","tableData","rest","TraceFullQuery","withApi","TraceFullDetailedQuery","TraceMetaQuery","meta","Breadcrumb","Component","getCrumbs","crumbs","organization","location","transaction","vitalName","spanSlug","eventSlug","traceSlug","tab","this","performanceTarget","pathname","getPerformanceLandingUrl","query","undefined","push","to","preservePageFilters","webVitalsTarget","vitalDetailRouteWithQuery","orgSlug","slug","projectID","decodeScalar","project","routeQuery","Tab","tagsTarget","tagsRouteWithQuery","eventsTarget","eventsRouteWithQuery","vitalsRouteWithQuery","spansTarget","spansRouteWithQuery","summaryTarget","transactionSummaryRouteWithQuery","render","TraceDetailsContent","searchQuery","filteredTransactionIds","createRef","setState","filterTransactions","state","fuse","fuseMatches","search","filter","matches","idMatches","flatMap","trace","filterTrace","span_id","includes","Set","componentDidMount","initFuse","componentDidUpdate","prevProps","transformed","reduceTrace","acc","indexed","project_slug","createFuzzySearch","keys","includeMatches","threshold","distance","maxPatternLength","renderTraceLoading","renderTraceRequiresDateRangeSelection","message","renderSearchBar","defaultQuery","placeholder","onSearch","handleTransactionFilter","renderTraceHeader","traceInfo","target","headingText","tooltipText","bodyText","tct","transactions","tn","size","errors","subtext","projects","endTimestamp","startTimestamp","getDynamicText","date","fixed","renderTraceWarnings","roots","orphans","reduce","counts","isRootTransaction","warning","showIcon","href","renderContent","dateSelected","traceEventView","getTraceInfo","gap","getResultsViewUrlTarget","fullWidth","TraceSummary","getDocumentTitle","join","getTraceSlug","params","trim","getDateSelection","queryParams","normalizeDateTimeParams","allowAbsolutePageDatetime","getTraceEventView","EventView","id","fields","orderby","ALL_ACCESS_PROJECTS","version","range","Boolean","content","traceResults","metaResults","QueryError","title","StyledPageContent","withOrganization","PageContent","MetaData","badge","HeaderInfo","StyledSectionHeading","position","containerDisplayMode","StyledFeatureBadge","SectionBody","SectionSubtext","SectionHeading","p","theme","fontSizeExtraLarge","space","FeatureBadge","subText","fontSizeMedium","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","sort","kind","field","filterToField","p100","environment","decodeEventsDisplayFilterFromLocation","option","showTransactions","Object","values","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","SpanSortPercentiles","SpanSortOthers","generateSpansRoute","SPAN_RETENTION_DAYS","SPAN_RELATIVE_PERIODS","pick","DEFAULT_RELATIVE_PERIODS","SPAN_SORT_OPTIONS","prefix","DEFAULT_SORT","getSuspectSpanSort","find","getSuspectSpanSortFromLocation","sortKey","getSuspectSpanSortFromEventView","sorts","parseSpanSlug","delimiterPos","lastIndexOf","op","slice","group","generateSpansEventView","transactionName","conditions","MutableSearch","setFilterValues","filters","forEach","isAggregateField","removeFilter","formatString","withSorts","getTotalsView","totalsView","withColumns","function","SPAN_SORT_TO_FIELDS","getExclusiveTimeDisplayedValue","replace","decodeSelectedTagKey","tagKey","trackTagPageInteraction","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","generateTagsRoute","getTagSortForTagsPage","tagSort","denied","parseHistogramBucketInfo","row","f","parts","split","histogramField","bucketSize","offset","multiplier","generateVitalsRoute","findNearestBucketIndex","chartData","xAxis","floor","getRefRect","i","data1","j","data2","point1","x","y","min","point2","max","asPixelRect","chartRef","dataRect","convertToPixel","xAxisIndex","yAxisIndex","isNaN","mapPoint","point","srcRect","destRect","xPercentage","yPercentage","isMissingVitalsData","vitalsData","allVitals","some","vital","vitalObj","total","TrendChangeType","TrendFunctionField","TrendColumnField","DEFAULT_TRENDS_STATS_PERIOD","DEFAULT_MAX_DURATION","TRENDS_FUNCTIONS","alias","legendLabel","TRENDS_PARAMETERS","column","trendToColor","lighter","default","trendSelectedQueryKeys","trendUnselectedSeries","trendCursorNames","resetCursors","cursors","cursor","getCurrentTrendFunction","_trendFunctionField","trendFunctionField","trendFunction","getCurrentTrendParameter","projectIds","trendParameterLabel","trendParameter","performanceType","PROJECT_PERFORMANCE_TYPE","performanceTypeToTrendParameterLabel","platformToPerformanceType","getDefaultTrendParameter","generateTrendFunctionAsString","generateFieldAsString","transformDeltaSpread","from","fromSeconds","toSeconds","showDigits","getTrendProjectId","trend","transactionProject","modifyTrendView","trendView","trendsType","isProjectOnly","trendSort","trendType","limitQuery","hasFilter","addFilterValues","getLimitTransactionItems","interval","intervalFromQueryParam","datetimeSelection","period","intervalFromSmoothing","getInterval","getQueryInterval","modifyTrendsViewDefaultPeriod","hasStartAndEnd","transformValueDelta","absoluteValue","abs","seconds","fixedDigits","changeLabel","normalizeTrends","received_at","moment","getSelectedQueryKey","trendChangeType","getUnselectedSeries","smoothTrend","resolution","ASAP","replaceSeriesName","aggregate","transformEventStatsSmoothed","minValue","MAX_SAFE_INTEGER","maxValue","smoothedResults","current","currentData","resultData","smoothed","rounded","lineStyle","color","QUERY_KEYS","FRONTEND_PLATFORMS","frontend","BACKEND_PLATFORMS","backend","platform","MOBILE_PLATFORMS","mobile","ANY","selectedProjects","every","FRONTEND","BACKEND","MOBILE","platformAndConditionsToPerformanceType","getFilterValues","FRONTEND_OTHER","isSummaryViewFrontendPageLoad","isSummaryViewFrontend","getPerformanceTrendsUrl","getTransactionSearchQuery","handleTrendsClick","view_name","trendsTargetRoute","browserHistory","initialConditions","additionalQuery","newQuery","modifiedConditions","removeTracingKeysFromSearch","currentFilter","options","excludeTagKeys","getFilterKeys","searchKey","startsWith","substr","match","TRACING_FIELDS","has","addRoutePerformanceContext","selection","getCurrentSentryReactTransaction","days","statsPeriodToDays","datetime","setTag","groupedPeriod","oneDay","getTransactionName","getPerformanceDuration","milliseconds","webVitalPoor","WebVital","webVitalMeh","VitalState","vitalStateColors","POOR","MEH","GOOD","vitalStateIcons","generateVitalDetailRoute","vitalNameFromLocation","_vitalName","v","getVitalChartTitle","webVital","getVitalDetailTablePoorStatusFunction","vitalThreshold","getAggregateAlias","getVitalDetailTableMehStatusFunction","vitalMap","vitalDescription","vitalAbbreviations","vitalAlertTypes","getMaxOfSeries","series","vitalSupportedBrowsers","Browser","getVitalChartDefinitions","yAxis","utc","vitalPoor","vitalMeh","legend","right","top","selected","getSeriesSelection","chartOptions","grid","left","bottom","seriesOptions","showSymbol","tooltip","trigger","valueFormatter","axisLabel","chartLabel","showMaxLabel","markLines","markLine","MarkLine","silent","red300","show","yellow300","_arrayLikeToArray","arr","len","arr2","Array","__isA","Date","calculateMean","m","mapToArray","input","callback","result","getPointValueExtractor","accessor","createXYDataPoint","time","createLegacyDataPointConfig","getTime","toPoint","iterableBasedOn","constructor","SMANumeric","windowSize","slide","arguments","output","sum","_i","createSMA","config","timeExtractor","valueExtractor","pointFactory","times","_i2","fft","real","imag","n","levels","cosTable","sinTable","cos","PI","sin","reverseBits","temp","halfsize","tablestep","_i3","_j","k","tpre","tpim","transformRadix2","areal","aimag","_i4","_i5","breal","bimag","_i6","_i7","creal","cimag","xreal","ximag","yreal","yimag","outreal","outimag","inverseFFT","_i9","convolveComplex","_i8","transformBluestein","bits","SMA","calculateRoughness","mean","std","sqrt","calculateSTD","diffs","calculateDiffs","calculateKurtosis","diff","diffSqr","u4","variance","concat","scale","trunc","_calculateAutocorrela","maxLag","pow","log2","fftreal","fill","fftimg","correlations","_calculatePeaks","maxCorrelation","peaks","positive","calculatePeaks","_calculatePeaks2","isArray","_arrayWithHoles","Symbol","iterator","_arr","_n","_d","_e","_s","next","done","err","_iterableToArrayLimit","o","minLen","prototype","call","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","_slicedToArray","calculateAutocorrelation","originalKurtosis","minRoughness","lb","largestFeasible","tail","w","kurtosis","roughness","head","originalKurt","findWindowSize","exports"],"sourceRoot":""}