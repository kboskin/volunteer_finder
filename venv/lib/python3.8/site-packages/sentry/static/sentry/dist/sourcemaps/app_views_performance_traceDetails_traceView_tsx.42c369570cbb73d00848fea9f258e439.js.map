{"version":3,"file":"chunks/app_views_performance_traceDetails_traceView_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/performance/traceDetails/styles.tsx","webpack:///./app/views/performance/traceDetails/traceNotFound.tsx","webpack:///./app/views/performance/traceDetails/transactionDetail.tsx","webpack:///./app/views/performance/traceDetails/transactionBar.tsx","webpack:///./app/views/performance/traceDetails/transactionGroup.tsx","webpack:///./app/views/performance/traceDetails/limitExceededMessage.tsx","webpack:///./app/views/performance/traceDetails/traceView.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nimport {decodeScalar} from '../queryString';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer, location} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(props.location);\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    if (['events', 'eventsv2'].includes(props.route)) {\n      const queryUserModified = decodeScalar(location.query?.userModified);\n      if (queryUserModified !== undefined) {\n        payload.user_modified = queryUserModified;\n      }\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {api, beforeFetch, afterFetch, didFetch, eventView, orgSlug, route, setError} =\n      this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload);\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams\n): Promise<[T, string | undefined, ResponseMeta | undefined]> {\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport EventTagsPill from 'sentry/components/events/eventTags/eventTagsPill';\nimport {SecondaryHeader} from 'sentry/components/events/interfaces/spans/header';\nimport {Panel} from 'sentry/components/panels';\nimport Pills from 'sentry/components/pills';\nimport SearchBar from 'sentry/components/searchBar';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {TraceFullDetailed} from 'sentry/utils/performance/quickTrace/types';\nimport {appendTagCondition} from 'sentry/utils/queryString';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nexport {\n  Row,\n  SpanDetails as TransactionDetails,\n  SpanDetailContainer as TransactionDetailsContainer,\n} from 'sentry/components/events/interfaces/spans/spanDetail';\n\nexport const TraceSearchContainer = styled('div')`\n  display: flex;\n  width: 100%;\n`;\n\nexport const TraceSearchBar = styled(SearchBar)`\n  flex-grow: 1;\n`;\n\nexport const TraceViewHeaderContainer = styled(SecondaryHeader)`\n  position: static;\n  top: auto;\n  border-top: none;\n  border-bottom: 1px solid ${p => p.theme.border};\n`;\n\nexport const TraceDetailHeader = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: ${space(3)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    grid-template-columns: max-content max-content;\n    grid-row-gap: 0;\n  }\n`;\n\nexport const TraceDetailBody = styled('div')`\n  margin-top: ${space(2)};\n`;\n\nexport const TraceViewContainer = styled('div')`\n  overflow-x: hidden;\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n`;\n\nexport const TracePanel = styled(Panel)`\n  overflow: hidden;\n`;\n\nexport const ProjectBadgeContainer = styled('span')`\n  margin-right: ${space(0.75)};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst StyledPills = styled(Pills)`\n  padding-top: ${space(1.5)};\n`;\n\nexport function Tags({\n  location,\n  organization,\n  transaction,\n}: {\n  location: Location;\n  organization: Organization;\n  transaction: TraceFullDetailed;\n}) {\n  const {tags} = transaction;\n\n  if (!tags || tags.length <= 0) {\n    return null;\n  }\n\n  const orgSlug = organization.slug;\n\n  return (\n    <tr>\n      <td className=\"key\">Tags</td>\n      <td className=\"value\">\n        <StyledPills>\n          {tags.map((tag, index) => {\n            const {pathname: streamPath, query} = transactionSummaryRouteWithQuery({\n              orgSlug,\n              transaction: transaction.transaction,\n              projectID: String(transaction.project_id),\n              query: {\n                ...location.query,\n                query: appendTagCondition(location.query.query, tag.key, tag.value),\n              },\n            });\n\n            return (\n              <EventTagsPill\n                key={!defined(tag.key) ? `tag-pill-${index}` : tag.key}\n                tag={tag}\n                projectId={transaction.project_slug}\n                organization={organization}\n                query={query}\n                streamPath={streamPath}\n              />\n            );\n          })}\n        </StyledPills>\n      </td>\n    </tr>\n  );\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {\n  ErrorDot,\n  ErrorLevel,\n  ErrorMessageContent,\n  ErrorTitle,\n} from 'sentry/components/performance/waterfall/rowDetails';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TraceMeta} from 'sentry/utils/performance/quickTrace/types';\n\ninterface TraceNotFoundProps {\n  location: any;\n  meta: TraceMeta | null;\n  organization: Organization;\n  traceEventView: EventView;\n  traceSlug: string;\n}\n\nfunction TraceNotFound({\n  meta,\n  traceEventView,\n  traceSlug,\n  organization,\n  location,\n}: TraceNotFoundProps) {\n  const transactions = meta?.transactions ?? 0;\n  const errors = meta?.errors ?? 0;\n\n  if (transactions === 0 && errors > 0) {\n    const errorsEventView = traceEventView.withColumns([\n      {kind: 'field', field: 'project'},\n      {kind: 'field', field: 'title'},\n      {kind: 'field', field: 'issue.id'},\n      {kind: 'field', field: 'level'},\n    ]);\n    errorsEventView.query = `trace:${traceSlug} !event.type:transaction `;\n\n    return (\n      <DiscoverQuery\n        eventView={errorsEventView}\n        orgSlug={organization.slug}\n        location={location}\n        referrer=\"api.trace-view.errors-view\"\n        useEvents\n      >\n        {({isLoading, tableData, error}) => {\n          if (isLoading) {\n            return <LoadingIndicator />;\n          }\n\n          if (error) {\n            return (\n              <Alert type=\"error\" showIcon>\n                <ErrorLabel>\n                  {tct(\n                    'The trace cannot be shown when all events are errors. An error occurred when attempting to fetch these error events: [error]',\n                    {error: error.message}\n                  )}\n                </ErrorLabel>\n              </Alert>\n            );\n          }\n\n          return (\n            <Alert type=\"error\" showIcon>\n              <ErrorLabel>\n                {t('The trace cannot be shown when all events are errors.')}\n              </ErrorLabel>\n\n              <ErrorMessageContent data-test-id=\"trace-view-errors\">\n                {tableData?.data.map(data => (\n                  <Fragment key={data.id}>\n                    <ErrorDot level={data.level as any} />\n                    <ErrorLevel>{data.level}</ErrorLevel>\n                    <ErrorTitle>\n                      <Link\n                        to={`/organizations/${organization.slug}/issues/${data['issue.id']}/events/${data.id}`}\n                      >\n                        {data.title}\n                      </Link>\n                    </ErrorTitle>\n                  </Fragment>\n                ))}\n              </ErrorMessageContent>\n            </Alert>\n          );\n        }}\n      </DiscoverQuery>\n    );\n  }\n\n  return <LoadingError message={t('The trace you are looking for was not found.')} />;\n}\n\nconst ErrorLabel = styled('div')`\n  margin-bottom: ${space(1)};\n`;\n\nexport default TraceNotFound;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport DateTime from 'sentry/components/dateTime';\nimport Link from 'sentry/components/links/link';\nimport {\n  ErrorDot,\n  ErrorLevel,\n  ErrorMessageContent,\n  ErrorMessageTitle,\n  ErrorTitle,\n} from 'sentry/components/performance/waterfall/rowDetails';\nimport {generateIssueEventTarget} from 'sentry/components/quickTrace/utils';\nimport {PAGE_URL_PARAM} from 'sentry/constants/pageFilters';\nimport {IconAnchor} from 'sentry/icons';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {TraceFullDetailed} from 'sentry/utils/performance/quickTrace/types';\nimport {getTransactionDetailsUrl} from 'sentry/utils/performance/urls';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {CustomerProfiler} from 'sentry/utils/performanceForSentry';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\n\nimport {Row, Tags, TransactionDetails, TransactionDetailsContainer} from './styles';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  scrollToHash: (hash: string) => void;\n  transaction: TraceFullDetailed;\n};\n\nclass TransactionDetail extends Component<Props> {\n  renderTransactionErrors() {\n    const {organization, transaction} = this.props;\n    const {errors} = transaction;\n\n    if (errors.length === 0) {\n      return null;\n    }\n\n    return (\n      <Alert\n        system\n        showIcon\n        type=\"error\"\n        expand={errors.map(error => (\n          <ErrorMessageContent key={error.event_id}>\n            <ErrorDot level={error.level} />\n            <ErrorLevel>{error.level}</ErrorLevel>\n            <ErrorTitle>\n              <Link to={generateIssueEventTarget(error, organization)}>\n                {error.title}\n              </Link>\n            </ErrorTitle>\n          </ErrorMessageContent>\n        ))}\n      >\n        <ErrorMessageTitle>\n          {tn(\n            'An error event occurred in this transaction.',\n            '%s error events occurred in this transaction.',\n            errors.length\n          )}\n        </ErrorMessageTitle>\n      </Alert>\n    );\n  }\n\n  renderGoToTransactionButton() {\n    const {location, organization, transaction} = this.props;\n\n    const eventSlug = generateEventSlug({\n      id: transaction.event_id,\n      project: transaction.project_slug,\n    });\n\n    const target = getTransactionDetailsUrl(\n      organization.slug,\n      eventSlug,\n      transaction.transaction,\n      omit(location.query, Object.values(PAGE_URL_PARAM))\n    );\n\n    return (\n      <StyledButton size=\"xsmall\" to={target}>\n        {t('View Event')}\n      </StyledButton>\n    );\n  }\n\n  renderGoToSummaryButton() {\n    const {location, organization, transaction} = this.props;\n\n    const target = transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transaction.transaction,\n      query: omit(location.query, Object.values(PAGE_URL_PARAM)),\n      projectID: String(transaction.project_id),\n    });\n\n    return (\n      <StyledButton size=\"xsmall\" to={target}>\n        {t('View Summary')}\n      </StyledButton>\n    );\n  }\n\n  renderMeasurements() {\n    const {transaction} = this.props;\n    const {measurements = {}} = transaction;\n\n    const measurementKeys = Object.keys(measurements)\n      .filter(name => Boolean(WEB_VITAL_DETAILS[`measurements.${name}`]))\n      .sort();\n\n    if (measurementKeys.length <= 0) {\n      return null;\n    }\n\n    return (\n      <Fragment>\n        {measurementKeys.map(measurement => (\n          <Row\n            key={measurement}\n            title={WEB_VITAL_DETAILS[`measurements.${measurement}`]?.name}\n          >\n            {`${Number(measurements[measurement].value.toFixed(3)).toLocaleString()}ms`}\n          </Row>\n        ))}\n      </Fragment>\n    );\n  }\n\n  scrollBarIntoView =\n    (transactionId: string) => (e: React.MouseEvent<HTMLAnchorElement>) => {\n      // do not use the default anchor behaviour\n      // because it will be hidden behind the minimap\n      e.preventDefault();\n\n      const hash = `#txn-${transactionId}`;\n\n      this.props.scrollToHash(hash);\n\n      // TODO(txiao): This is causing a rerender of the whole page,\n      // which can be slow.\n      //\n      // make sure to update the location\n      browserHistory.push({\n        ...this.props.location,\n        hash,\n      });\n    };\n\n  renderTransactionDetail() {\n    const {location, organization, transaction} = this.props;\n    const startTimestamp = Math.min(transaction.start_timestamp, transaction.timestamp);\n    const endTimestamp = Math.max(transaction.start_timestamp, transaction.timestamp);\n    const duration = (endTimestamp - startTimestamp) * 1000;\n    const durationString = `${Number(duration.toFixed(3)).toLocaleString()}ms`;\n\n    return (\n      <TransactionDetails>\n        <table className=\"table key-value\">\n          <tbody>\n            <Row\n              title={\n                <TransactionIdTitle\n                  onClick={this.scrollBarIntoView(transaction.event_id)}\n                >\n                  {t('Event ID')}\n                  <StyledIconAnchor />\n                </TransactionIdTitle>\n              }\n              extra={this.renderGoToTransactionButton()}\n            >\n              {transaction.event_id}\n            </Row>\n            <Row title=\"Transaction\" extra={this.renderGoToSummaryButton()}>\n              {transaction.transaction}\n            </Row>\n            <Row title=\"Transaction Status\">{transaction['transaction.status']}</Row>\n            <Row title=\"Span ID\">{transaction.span_id}</Row>\n            <Row title=\"Project\">{transaction.project_slug}</Row>\n            <Row title=\"Start Date\">\n              {getDynamicText({\n                fixed: 'Mar 19, 2021 11:06:27 AM UTC',\n                value: (\n                  <Fragment>\n                    <DateTime date={startTimestamp * 1000} />\n                    {` (${startTimestamp})`}\n                  </Fragment>\n                ),\n              })}\n            </Row>\n            <Row title=\"End Date\">\n              {getDynamicText({\n                fixed: 'Mar 19, 2021 11:06:28 AM UTC',\n                value: (\n                  <Fragment>\n                    <DateTime date={endTimestamp * 1000} />\n                    {` (${endTimestamp})`}\n                  </Fragment>\n                ),\n              })}\n            </Row>\n            <Row title=\"Duration\">{durationString}</Row>\n            <Row title=\"Operation\">{transaction['transaction.op'] || ''}</Row>\n            {this.renderMeasurements()}\n            <Tags\n              location={location}\n              organization={organization}\n              transaction={transaction}\n            />\n          </tbody>\n        </table>\n      </TransactionDetails>\n    );\n  }\n\n  render() {\n    return (\n      <CustomerProfiler id=\"TransactionDetail\">\n        <TransactionDetailsContainer\n          onClick={event => {\n            // prevent toggling the transaction detail\n            event.stopPropagation();\n          }}\n        >\n          {this.renderTransactionErrors()}\n          {this.renderTransactionDetail()}\n        </TransactionDetailsContainer>\n      </CustomerProfiler>\n    );\n  }\n}\n\nconst TransactionIdTitle = styled('a')`\n  display: flex;\n  color: ${p => p.theme.textColor};\n  :hover {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nconst StyledIconAnchor = styled(IconAnchor)`\n  display: block;\n  color: ${p => p.theme.gray300};\n  margin-left: ${space(1)};\n`;\n\nconst StyledButton = styled(Button)`\n  position: absolute;\n  top: ${space(0.75)};\n  right: ${space(0.5)};\n`;\n\nexport default TransactionDetail;\n","import {Component, createRef, Fragment} from 'react';\nimport {Location} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Count from 'sentry/components/count';\nimport * as AnchorLinkManager from 'sentry/components/events/interfaces/spans/anchorLinkManager';\nimport * as DividerHandlerManager from 'sentry/components/events/interfaces/spans/dividerHandlerManager';\nimport * as ScrollbarManager from 'sentry/components/events/interfaces/spans/scrollbarManager';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport {ROW_HEIGHT} from 'sentry/components/performance/waterfall/constants';\nimport {\n  Row,\n  RowCell,\n  RowCellContainer,\n} from 'sentry/components/performance/waterfall/row';\nimport {DurationPill, RowRectangle} from 'sentry/components/performance/waterfall/rowBar';\nimport {\n  DividerContainer,\n  DividerLine,\n  DividerLineGhostContainer,\n  ErrorBadge,\n} from 'sentry/components/performance/waterfall/rowDivider';\nimport {\n  RowTitle,\n  RowTitleContainer,\n  RowTitleContent,\n} from 'sentry/components/performance/waterfall/rowTitle';\nimport {\n  ConnectorBar,\n  TOGGLE_BORDER_BOX,\n  TreeConnector,\n  TreeToggle,\n  TreeToggleContainer,\n  TreeToggleIcon,\n} from 'sentry/components/performance/waterfall/treeConnector';\nimport {\n  getDurationDisplay,\n  getHumanDuration,\n  toPercent,\n} from 'sentry/components/performance/waterfall/utils';\nimport Tooltip from 'sentry/components/tooltip';\nimport {Organization} from 'sentry/types';\nimport {TraceFullDetailed} from 'sentry/utils/performance/quickTrace/types';\nimport {isTraceFullDetailed} from 'sentry/utils/performance/quickTrace/utils';\nimport Projects from 'sentry/utils/projects';\n\nimport {ProjectBadgeContainer} from './styles';\nimport TransactionDetail from './transactionDetail';\nimport {TraceInfo, TraceRoot, TreeDepth} from './types';\n\nconst MARGIN_LEFT = 0;\n\ntype Props = {\n  continuingDepths: TreeDepth[];\n  hasGuideAnchor: boolean;\n  index: number;\n  isExpanded: boolean;\n  isLast: boolean;\n  isOrphan: boolean;\n  isVisible: boolean;\n  location: Location;\n  organization: Organization;\n  toggleExpandedState: () => void;\n  traceInfo: TraceInfo;\n  transaction: TraceRoot | TraceFullDetailed;\n  barColor?: string;\n};\n\ntype State = {\n  showDetail: boolean;\n};\n\nclass TransactionBar extends Component<Props, State> {\n  state: State = {\n    showDetail: false,\n  };\n\n  transactionRowDOMRef = createRef<HTMLDivElement>();\n\n  toggleDisplayDetail = () => {\n    const {transaction} = this.props;\n    if (isTraceFullDetailed(transaction)) {\n      this.setState(state => ({\n        showDetail: !state.showDetail,\n      }));\n    }\n  };\n\n  getCurrentOffset() {\n    const {transaction} = this.props;\n    const {generation} = transaction;\n\n    return getOffset(generation);\n  }\n\n  renderConnector(hasToggle: boolean) {\n    const {continuingDepths, isExpanded, isOrphan, isLast, transaction} = this.props;\n\n    const {generation} = transaction;\n    const eventId = isTraceFullDetailed(transaction)\n      ? transaction.event_id\n      : transaction.traceSlug;\n\n    if (generation === 0) {\n      if (hasToggle) {\n        return (\n          <ConnectorBar\n            style={{right: '15px', height: '10px', bottom: '-5px', top: 'auto'}}\n            orphanBranch={false}\n          />\n        );\n      }\n      return null;\n    }\n\n    const connectorBars: Array<React.ReactNode> = continuingDepths.map(\n      ({depth, isOrphanDepth}) => {\n        if (generation - depth <= 1) {\n          // If the difference is less than or equal to 1, then it means that the continued\n          // bar is from its direct parent. In this case, do not render a connector bar\n          // because the tree connector below will suffice.\n          return null;\n        }\n\n        const left = -1 * getOffset(generation - depth - 1) - 2;\n\n        return (\n          <ConnectorBar\n            style={{left}}\n            key={`${eventId}-${depth}`}\n            orphanBranch={isOrphanDepth}\n          />\n        );\n      }\n    );\n\n    if (hasToggle && isExpanded) {\n      connectorBars.push(\n        <ConnectorBar\n          style={{\n            right: '15px',\n            height: '10px',\n            bottom: isLast ? `-${ROW_HEIGHT / 2 + 1}px` : '0',\n            top: 'auto',\n          }}\n          key={`${eventId}-last`}\n          orphanBranch={false}\n        />\n      );\n    }\n\n    return (\n      <TreeConnector isLast={isLast} hasToggler={hasToggle} orphanBranch={isOrphan}>\n        {connectorBars}\n      </TreeConnector>\n    );\n  }\n\n  renderToggle(errored: boolean) {\n    const {isExpanded, transaction, toggleExpandedState} = this.props;\n    const {children, generation} = transaction;\n    const left = this.getCurrentOffset();\n\n    if (children.length <= 0) {\n      return (\n        <TreeToggleContainer style={{left: `${left}px`}}>\n          {this.renderConnector(false)}\n        </TreeToggleContainer>\n      );\n    }\n\n    const isRoot = generation === 0;\n\n    return (\n      <TreeToggleContainer style={{left: `${left}px`}} hasToggler>\n        {this.renderConnector(true)}\n        <TreeToggle\n          disabled={isRoot}\n          isExpanded={isExpanded}\n          errored={errored}\n          onClick={event => {\n            event.stopPropagation();\n\n            if (isRoot) {\n              return;\n            }\n\n            toggleExpandedState();\n          }}\n        >\n          <Count value={children.length} />\n          {!isRoot && (\n            <div>\n              <TreeToggleIcon direction={isExpanded ? 'up' : 'down'} />\n            </div>\n          )}\n        </TreeToggle>\n      </TreeToggleContainer>\n    );\n  }\n\n  renderTitle(\n    scrollbarManagerChildrenProps: ScrollbarManager.ScrollbarManagerChildrenProps\n  ) {\n    const {generateContentSpanBarRef} = scrollbarManagerChildrenProps;\n    const {organization, transaction} = this.props;\n    const left = this.getCurrentOffset();\n    const errored = isTraceFullDetailed(transaction)\n      ? transaction.errors.length > 0\n      : false;\n\n    const content = isTraceFullDetailed(transaction) ? (\n      <Fragment>\n        <Projects orgId={organization.slug} slugs={[transaction.project_slug]}>\n          {({projects}) => {\n            const project = projects.find(p => p.slug === transaction.project_slug);\n            return (\n              <ProjectBadgeContainer>\n                <Tooltip title={transaction.project_slug}>\n                  <ProjectBadge\n                    project={project ? project : {slug: transaction.project_slug}}\n                    avatarSize={16}\n                    hideName\n                  />\n                </Tooltip>\n              </ProjectBadgeContainer>\n            );\n          }}\n        </Projects>\n        <RowTitleContent errored={errored}>\n          <strong>\n            {transaction['transaction.op']}\n            {' \\u2014 '}\n          </strong>\n          {transaction.transaction}\n        </RowTitleContent>\n      </Fragment>\n    ) : (\n      <RowTitleContent errored={false}>\n        <strong>{'Trace \\u2014 '}</strong>\n        {transaction.traceSlug}\n      </RowTitleContent>\n    );\n\n    return (\n      <RowTitleContainer ref={generateContentSpanBarRef()}>\n        {this.renderToggle(errored)}\n        <RowTitle\n          style={{\n            left: `${left}px`,\n            width: '100%',\n          }}\n        >\n          {content}\n        </RowTitle>\n      </RowTitleContainer>\n    );\n  }\n\n  renderDivider(\n    dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps\n  ) {\n    if (this.state.showDetail) {\n      // Mock component to preserve layout spacing\n      return (\n        <DividerLine\n          showDetail\n          style={{\n            position: 'absolute',\n          }}\n        />\n      );\n    }\n\n    const {addDividerLineRef} = dividerHandlerChildrenProps;\n\n    return (\n      <DividerLine\n        ref={addDividerLineRef()}\n        style={{\n          position: 'absolute',\n        }}\n        onMouseEnter={() => {\n          dividerHandlerChildrenProps.setHover(true);\n        }}\n        onMouseLeave={() => {\n          dividerHandlerChildrenProps.setHover(false);\n        }}\n        onMouseOver={() => {\n          dividerHandlerChildrenProps.setHover(true);\n        }}\n        onMouseDown={dividerHandlerChildrenProps.onDragStart}\n        onClick={event => {\n          // we prevent the propagation of the clicks from this component to prevent\n          // the span detail from being opened.\n          event.stopPropagation();\n        }}\n      />\n    );\n  }\n\n  renderGhostDivider(\n    dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps\n  ) {\n    const {dividerPosition, addGhostDividerLineRef} = dividerHandlerChildrenProps;\n\n    return (\n      <DividerLineGhostContainer\n        style={{\n          width: `calc(${toPercent(dividerPosition)} + 0.5px)`,\n          display: 'none',\n        }}\n      >\n        <DividerLine\n          ref={addGhostDividerLineRef()}\n          style={{\n            right: 0,\n          }}\n          className=\"hovering\"\n          onClick={event => {\n            // the ghost divider line should not be interactive.\n            // we prevent the propagation of the clicks from this component to prevent\n            // the span detail from being opened.\n            event.stopPropagation();\n          }}\n        />\n      </DividerLineGhostContainer>\n    );\n  }\n\n  renderErrorBadge() {\n    const {transaction} = this.props;\n\n    if (!isTraceFullDetailed(transaction) || !transaction.errors.length) {\n      return null;\n    }\n\n    return <ErrorBadge />;\n  }\n\n  renderRectangle() {\n    const {transaction, traceInfo, barColor} = this.props;\n    const {showDetail} = this.state;\n\n    // Use 1 as the difference in the event that startTimestamp === endTimestamp\n    const delta = Math.abs(traceInfo.endTimestamp - traceInfo.startTimestamp) || 1;\n    const startPosition = Math.abs(\n      transaction.start_timestamp - traceInfo.startTimestamp\n    );\n    const startPercentage = startPosition / delta;\n    const duration = Math.abs(transaction.timestamp - transaction.start_timestamp);\n    const widthPercentage = duration / delta;\n\n    return (\n      <RowRectangle\n        spanBarHatch={false}\n        style={{\n          backgroundColor: barColor,\n          left: `min(${toPercent(startPercentage || 0)}, calc(100% - 1px))`,\n          width: toPercent(widthPercentage || 0),\n        }}\n      >\n        <DurationPill\n          durationDisplay={getDurationDisplay({\n            left: startPercentage,\n            width: widthPercentage,\n          })}\n          showDetail={showDetail}\n          spanBarHatch={false}\n        >\n          {getHumanDuration(duration)}\n        </DurationPill>\n      </RowRectangle>\n    );\n  }\n\n  renderHeader({\n    dividerHandlerChildrenProps,\n    scrollbarManagerChildrenProps,\n  }: {\n    dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps;\n    scrollbarManagerChildrenProps: ScrollbarManager.ScrollbarManagerChildrenProps;\n  }) {\n    const {hasGuideAnchor, index} = this.props;\n    const {showDetail} = this.state;\n    const {dividerPosition} = dividerHandlerChildrenProps;\n\n    return (\n      <RowCellContainer showDetail={showDetail}>\n        <RowCell\n          data-test-id=\"transaction-row-title\"\n          data-type=\"span-row-cell\"\n          style={{\n            width: `calc(${toPercent(dividerPosition)} - 0.5px)`,\n            paddingTop: 0,\n          }}\n          showDetail={showDetail}\n          onClick={this.toggleDisplayDetail}\n        >\n          <GuideAnchor target=\"trace_view_guide_row\" disabled={!hasGuideAnchor}>\n            {this.renderTitle(scrollbarManagerChildrenProps)}\n          </GuideAnchor>\n        </RowCell>\n        <DividerContainer>\n          {this.renderDivider(dividerHandlerChildrenProps)}\n          {this.renderErrorBadge()}\n        </DividerContainer>\n        <RowCell\n          data-test-id=\"transaction-row-duration\"\n          data-type=\"span-row-cell\"\n          showStriping={index % 2 !== 0}\n          style={{\n            width: `calc(${toPercent(1 - dividerPosition)} - 0.5px)`,\n            paddingTop: 0,\n          }}\n          showDetail={showDetail}\n          onClick={this.toggleDisplayDetail}\n        >\n          <GuideAnchor target=\"trace_view_guide_row_details\" disabled={!hasGuideAnchor}>\n            {this.renderRectangle()}\n          </GuideAnchor>\n        </RowCell>\n        {!showDetail && this.renderGhostDivider(dividerHandlerChildrenProps)}\n      </RowCellContainer>\n    );\n  }\n\n  scrollIntoView = () => {\n    const element = this.transactionRowDOMRef.current;\n    if (!element) {\n      return;\n    }\n    const boundingRect = element.getBoundingClientRect();\n    const offset = boundingRect.top + window.scrollY;\n    this.setState({showDetail: true}, () => window.scrollTo(0, offset));\n  };\n\n  renderDetail() {\n    const {location, organization, isVisible, transaction} = this.props;\n    const {showDetail} = this.state;\n\n    return (\n      <AnchorLinkManager.Consumer>\n        {({registerScrollFn, scrollToHash}) => {\n          if (!isTraceFullDetailed(transaction)) {\n            return null;\n          }\n\n          registerScrollFn(`#txn-${transaction.event_id}`, this.scrollIntoView, false);\n\n          if (!isVisible || !showDetail) {\n            return null;\n          }\n\n          return (\n            <TransactionDetail\n              location={location}\n              organization={organization}\n              transaction={transaction}\n              scrollToHash={scrollToHash}\n            />\n          );\n        }}\n      </AnchorLinkManager.Consumer>\n    );\n  }\n\n  render() {\n    const {isVisible, transaction} = this.props;\n    const {showDetail} = this.state;\n\n    return (\n      <Row\n        ref={this.transactionRowDOMRef}\n        visible={isVisible}\n        showBorder={showDetail}\n        cursor={isTraceFullDetailed(transaction) ? 'pointer' : 'default'}\n      >\n        <ScrollbarManager.Consumer>\n          {scrollbarManagerChildrenProps => (\n            <DividerHandlerManager.Consumer>\n              {dividerHandlerChildrenProps =>\n                this.renderHeader({\n                  dividerHandlerChildrenProps,\n                  scrollbarManagerChildrenProps,\n                })\n              }\n            </DividerHandlerManager.Consumer>\n          )}\n        </ScrollbarManager.Consumer>\n        {this.renderDetail()}\n      </Row>\n    );\n  }\n}\n\nfunction getOffset(generation) {\n  return generation * (TOGGLE_BORDER_BOX / 2) + MARGIN_LEFT;\n}\n\nexport default TransactionBar;\n","import {Component, Fragment} from 'react';\nimport {Location} from 'history';\n\nimport {\n  ScrollbarManagerChildrenProps,\n  withScrollbarManager,\n} from 'sentry/components/events/interfaces/spans/scrollbarManager';\nimport {Organization} from 'sentry/types';\nimport {TraceFullDetailed} from 'sentry/utils/performance/quickTrace/types';\n\nimport TransactionBar from './transactionBar';\nimport {TraceInfo, TraceRoot, TreeDepth} from './types';\n\ntype Props = ScrollbarManagerChildrenProps & {\n  continuingDepths: TreeDepth[];\n  hasGuideAnchor: boolean;\n  index: number;\n  isLast: boolean;\n  isOrphan: boolean;\n  isVisible: boolean;\n  location: Location;\n  organization: Organization;\n  renderedChildren: React.ReactNode[];\n  traceInfo: TraceInfo;\n  transaction: TraceRoot | TraceFullDetailed;\n  barColor?: string;\n};\n\ntype State = {\n  isExpanded: boolean;\n};\n\nclass TransactionGroup extends Component<Props, State> {\n  state: State = {\n    isExpanded: true,\n  };\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (prevState.isExpanded !== this.state.isExpanded) {\n      this.props.updateScrollState();\n    }\n  }\n\n  toggleExpandedState = () => {\n    this.setState(({isExpanded}) => ({isExpanded: !isExpanded}));\n  };\n\n  render() {\n    const {\n      location,\n      organization,\n      transaction,\n      traceInfo,\n      continuingDepths,\n      isOrphan,\n      isLast,\n      index,\n      isVisible,\n      hasGuideAnchor,\n      renderedChildren,\n      barColor,\n    } = this.props;\n    const {isExpanded} = this.state;\n\n    return (\n      <Fragment>\n        <TransactionBar\n          location={location}\n          organization={organization}\n          index={index}\n          transaction={transaction}\n          traceInfo={traceInfo}\n          continuingDepths={continuingDepths}\n          isOrphan={isOrphan}\n          isLast={isLast}\n          isExpanded={isExpanded}\n          toggleExpandedState={this.toggleExpandedState}\n          isVisible={isVisible}\n          hasGuideAnchor={hasGuideAnchor}\n          barColor={barColor}\n        />\n        {isExpanded && renderedChildren}\n      </Fragment>\n    );\n  }\n}\n\nexport default withScrollbarManager(TransactionGroup);\n","import DiscoverFeature from 'sentry/components/discover/discoverFeature';\nimport Link from 'sentry/components/links/link';\nimport {MessageRow} from 'sentry/components/performance/waterfall/messageRow';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TraceMeta} from 'sentry/utils/performance/quickTrace/types';\nimport {TraceInfo} from 'sentry/views/performance/traceDetails/types';\n\ninterface LimitExceededMessageProps {\n  meta: TraceMeta | null;\n  organization: Organization;\n  traceEventView: EventView;\n  traceInfo: TraceInfo;\n}\nfunction LimitExceededMessage({\n  traceInfo,\n  traceEventView,\n  organization,\n  meta,\n}: LimitExceededMessageProps) {\n  const count = traceInfo.transactions.size;\n  const totalTransactions = meta?.transactions ?? count;\n\n  if (totalTransactions === null || count >= totalTransactions) {\n    return null;\n  }\n\n  const target = traceEventView.getResultsViewUrlTarget(organization.slug);\n\n  return (\n    <MessageRow>\n      {tct(\n        'Limited to a view of [count] transactions. To view the full list, [discover].',\n        {\n          count,\n          discover: (\n            <DiscoverFeature>\n              {({hasFeature}) => (\n                <Link disabled={!hasFeature} to={target}>\n                  {t('Open in Discover')}\n                </Link>\n              )}\n            </DiscoverFeature>\n          ),\n        }\n      )}\n    </MessageRow>\n  );\n}\n\nexport default LimitExceededMessage;\n","import React, {createRef, useEffect} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport * as Sentry from '@sentry/react';\n\nimport * as AnchorLinkManager from 'sentry/components/events/interfaces/spans/anchorLinkManager';\nimport * as DividerHandlerManager from 'sentry/components/events/interfaces/spans/dividerHandlerManager';\nimport * as ScrollbarManager from 'sentry/components/events/interfaces/spans/scrollbarManager';\nimport {MessageRow} from 'sentry/components/performance/waterfall/messageRow';\nimport {\n  DividerSpacer,\n  ScrollbarContainer,\n  VirtualScrollbar,\n  VirtualScrollbarGrip,\n} from 'sentry/components/performance/waterfall/miniHeader';\nimport {pickBarColor, toPercent} from 'sentry/components/performance/waterfall/utils';\nimport {tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {TraceFullDetailed, TraceMeta} from 'sentry/utils/performance/quickTrace/types';\nimport {\n  TraceDetailBody,\n  TracePanel,\n  TraceViewContainer,\n  TraceViewHeaderContainer,\n} from 'sentry/views/performance/traceDetails/styles';\nimport TransactionGroup from 'sentry/views/performance/traceDetails/transactionGroup';\nimport {TraceInfo, TreeDepth} from 'sentry/views/performance/traceDetails/types';\nimport {\n  getTraceInfo,\n  isRootTransaction,\n} from 'sentry/views/performance/traceDetails/utils';\n\nimport LimitExceededMessage from './limitExceededMessage';\nimport TraceNotFound from './traceNotFound';\n\ntype AccType = {\n  lastIndex: number;\n  numberOfHiddenTransactionsAbove: number;\n  renderedChildren: React.ReactNode[];\n};\n\ntype Props = Pick<RouteComponentProps<{}, {}>, 'location'> & {\n  meta: TraceMeta | null;\n  organization: Organization;\n  traceEventView: EventView;\n  traceSlug: string;\n  traces: TraceFullDetailed[] | null;\n  filteredTransactionIds?: Set<string>;\n  traceInfo?: TraceInfo;\n};\n\nfunction TraceHiddenMessage({\n  isVisible,\n  numberOfHiddenTransactionsAbove,\n}: {\n  isVisible: boolean;\n  numberOfHiddenTransactionsAbove: number;\n}) {\n  if (!isVisible || numberOfHiddenTransactionsAbove < 1) {\n    return null;\n  }\n\n  return (\n    <MessageRow>\n      <span key=\"trace-info-message\">\n        {numberOfHiddenTransactionsAbove === 1\n          ? tct('[numOfTransaction] hidden transaction', {\n              numOfTransaction: <strong>{numberOfHiddenTransactionsAbove}</strong>,\n            })\n          : tct('[numOfTransaction] hidden transactions', {\n              numOfTransaction: <strong>{numberOfHiddenTransactionsAbove}</strong>,\n            })}\n      </span>\n    </MessageRow>\n  );\n}\n\nfunction isTransactionVisible(\n  transaction: TraceFullDetailed,\n  filteredTransactionIds?: Set<string>\n): boolean {\n  return filteredTransactionIds ? filteredTransactionIds.has(transaction.event_id) : true;\n}\n\nexport default function TraceView({\n  location,\n  meta,\n  organization,\n  traces,\n  traceSlug,\n  traceEventView,\n  filteredTransactionIds,\n  ...props\n}: Props) {\n  const sentryTransaction = Sentry.getCurrentHub().getScope()?.getTransaction();\n  const sentrySpan = sentryTransaction?.startChild({\n    op: 'trace.render',\n    description: 'trace-view-content',\n  });\n  useEffect(() => {\n    trackAdvancedAnalyticsEvent('performance_views.trace_view.view', {\n      organization,\n    });\n  }, [organization]);\n\n  function renderTransaction(\n    transaction: TraceFullDetailed,\n    {\n      continuingDepths,\n      isOrphan,\n      isLast,\n      index,\n      numberOfHiddenTransactionsAbove,\n      traceInfo,\n      hasGuideAnchor,\n    }: {\n      continuingDepths: TreeDepth[];\n      hasGuideAnchor: boolean;\n      index: number;\n      isLast: boolean;\n      isOrphan: boolean;\n      numberOfHiddenTransactionsAbove: number;\n      traceInfo: TraceInfo;\n    }\n  ) {\n    const {children, event_id: eventId} = transaction;\n    // Add 1 to the generation to make room for the \"root trace\"\n    const generation = transaction.generation + 1;\n\n    const isVisible = isTransactionVisible(transaction, filteredTransactionIds);\n\n    const accumulated: AccType = children.reduce(\n      (acc: AccType, child: TraceFullDetailed, idx: number) => {\n        const isLastChild = idx === children.length - 1;\n        const hasChildren = child.children.length > 0;\n\n        const result = renderTransaction(child, {\n          continuingDepths:\n            !isLastChild && hasChildren\n              ? [...continuingDepths, {depth: generation, isOrphanDepth: isOrphan}]\n              : continuingDepths,\n          isOrphan,\n          isLast: isLastChild,\n          index: acc.lastIndex + 1,\n          numberOfHiddenTransactionsAbove: acc.numberOfHiddenTransactionsAbove,\n          traceInfo,\n          hasGuideAnchor: false,\n        });\n\n        acc.lastIndex = result.lastIndex;\n        acc.numberOfHiddenTransactionsAbove = result.numberOfHiddenTransactionsAbove;\n        acc.renderedChildren.push(result.transactionGroup);\n\n        return acc;\n      },\n      {\n        renderedChildren: [],\n        lastIndex: index,\n        numberOfHiddenTransactionsAbove: isVisible\n          ? 0\n          : numberOfHiddenTransactionsAbove + 1,\n      }\n    );\n\n    return {\n      transactionGroup: (\n        <React.Fragment key={eventId}>\n          <TraceHiddenMessage\n            isVisible={isVisible}\n            numberOfHiddenTransactionsAbove={numberOfHiddenTransactionsAbove}\n          />\n          <TransactionGroup\n            location={location}\n            organization={organization}\n            traceInfo={traceInfo}\n            transaction={{\n              ...transaction,\n              generation,\n            }}\n            continuingDepths={continuingDepths}\n            isOrphan={isOrphan}\n            isLast={isLast}\n            index={index}\n            isVisible={isVisible}\n            hasGuideAnchor={hasGuideAnchor}\n            renderedChildren={accumulated.renderedChildren}\n            barColor={pickBarColor(transaction['transaction.op'])}\n          />\n        </React.Fragment>\n      ),\n      lastIndex: accumulated.lastIndex,\n      numberOfHiddenTransactionsAbove: accumulated.numberOfHiddenTransactionsAbove,\n    };\n  }\n\n  const traceViewRef = createRef<HTMLDivElement>();\n  const virtualScrollbarContainerRef = createRef<HTMLDivElement>();\n\n  if (traces === null || traces.length <= 0) {\n    return (\n      <TraceNotFound\n        meta={meta}\n        traceEventView={traceEventView}\n        traceSlug={traceSlug}\n        location={location}\n        organization={organization}\n      />\n    );\n  }\n\n  const traceInfo = props.traceInfo || getTraceInfo(traces);\n\n  const accumulator: {\n    index: number;\n    numberOfHiddenTransactionsAbove: number;\n    traceInfo: TraceInfo;\n    transactionGroups: React.ReactNode[];\n  } = {\n    index: 1,\n    numberOfHiddenTransactionsAbove: 0,\n    traceInfo,\n    transactionGroups: [],\n  };\n\n  const {transactionGroups, numberOfHiddenTransactionsAbove} = traces.reduce(\n    (acc, trace, index) => {\n      const isLastTransaction = index === traces.length - 1;\n      const hasChildren = trace.children.length > 0;\n      const isNextChildOrphaned =\n        !isLastTransaction && traces[index + 1].parent_span_id !== null;\n\n      const result = renderTransaction(trace, {\n        ...acc,\n        // if the root of a subtrace has a parent_span_id, then it must be an orphan\n        isOrphan: !isRootTransaction(trace),\n        isLast: isLastTransaction,\n        continuingDepths:\n          !isLastTransaction && hasChildren\n            ? [{depth: 0, isOrphanDepth: isNextChildOrphaned}]\n            : [],\n        hasGuideAnchor: index === 0,\n      });\n\n      acc.index = result.lastIndex + 1;\n      acc.numberOfHiddenTransactionsAbove = result.numberOfHiddenTransactionsAbove;\n      acc.transactionGroups.push(result.transactionGroup);\n      return acc;\n    },\n    accumulator\n  );\n\n  const traceView = (\n    <TraceDetailBody>\n      <DividerHandlerManager.Provider interactiveLayerRef={traceViewRef}>\n        <DividerHandlerManager.Consumer>\n          {({dividerPosition}) => (\n            <ScrollbarManager.Provider\n              dividerPosition={dividerPosition}\n              interactiveLayerRef={virtualScrollbarContainerRef}\n            >\n              <TracePanel>\n                <TraceViewHeaderContainer>\n                  <ScrollbarManager.Consumer>\n                    {({virtualScrollbarRef, scrollBarAreaRef, onDragStart, onScroll}) => {\n                      return (\n                        <ScrollbarContainer\n                          ref={virtualScrollbarContainerRef}\n                          style={{\n                            // the width of this component is shrunk to compensate for half of the width of the divider line\n                            width: `calc(${toPercent(dividerPosition)} - 0.5px)`,\n                          }}\n                          onScroll={onScroll}\n                        >\n                          <div\n                            style={{\n                              width: 0,\n                              height: '1px',\n                            }}\n                            ref={scrollBarAreaRef}\n                          />\n                          <VirtualScrollbar\n                            data-type=\"virtual-scrollbar\"\n                            ref={virtualScrollbarRef}\n                            onMouseDown={onDragStart}\n                          >\n                            <VirtualScrollbarGrip />\n                          </VirtualScrollbar>\n                        </ScrollbarContainer>\n                      );\n                    }}\n                  </ScrollbarManager.Consumer>\n                  <DividerSpacer />\n                </TraceViewHeaderContainer>\n                <TraceViewContainer ref={traceViewRef}>\n                  <AnchorLinkManager.Provider>\n                    <TransactionGroup\n                      location={location}\n                      organization={organization}\n                      traceInfo={traceInfo}\n                      transaction={{\n                        traceSlug,\n                        generation: 0,\n                        'transaction.duration':\n                          traceInfo.endTimestamp - traceInfo.startTimestamp,\n                        children: traces,\n                        start_timestamp: traceInfo.startTimestamp,\n                        timestamp: traceInfo.endTimestamp,\n                      }}\n                      continuingDepths={[]}\n                      isOrphan={false}\n                      isLast={false}\n                      index={0}\n                      isVisible\n                      hasGuideAnchor={false}\n                      renderedChildren={transactionGroups}\n                      barColor={pickBarColor('')}\n                    />\n                  </AnchorLinkManager.Provider>\n                  <TraceHiddenMessage\n                    isVisible\n                    numberOfHiddenTransactionsAbove={numberOfHiddenTransactionsAbove}\n                  />\n                  <LimitExceededMessage\n                    traceInfo={traceInfo}\n                    organization={organization}\n                    traceEventView={traceEventView}\n                    meta={meta}\n                  />\n                </TraceViewContainer>\n              </TracePanel>\n            </ScrollbarManager.Provider>\n          )}\n        </DividerHandlerManager.Consumer>\n      </DividerHandlerManager.Provider>\n    </TraceDetailBody>\n  );\n\n  sentrySpan?.finish();\n\n  return traceView;\n}\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","endpoint","useEvents","afterFetch","data","_","fields","otherMeta","meta","undefined","route","withApi","QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","error","tableData","pageLinks","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","cursor","parseError","detail","responseJSON","t","async","api","beforeFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","noPagination","referrer","location","payload","getRequestPayload","getEventsAPIPayload","per_page","includes","queryUserModified","decodeScalar","query","userModified","user_modified","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","params","requestPromise","method","includeAllArgs","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","options","strict","Context","createContext","displayName","Provider","context","TraceSearchContainer","TraceSearchBar","SearchBar","TraceViewHeaderContainer","SecondaryHeader","p","theme","border","TraceDetailHeader","space","breakpoints","medium","TraceDetailBody","TraceViewContainer","TracePanel","Panel","ProjectBadgeContainer","StyledPills","Pills","Tags","organization","transaction","tags","length","className","map","tag","index","pathname","streamPath","transactionSummaryRouteWithQuery","projectID","String","project_id","appendTagCondition","key","value","projectId","project_slug","defined","TraceNotFound","traceEventView","traceSlug","transactions","errors","errorsEventView","withColumns","kind","field","type","showIcon","ErrorLabel","tct","Fragment","level","to","id","title","TransactionDetail","transactionId","e","preventDefault","hash","scrollToHash","browserHistory","renderTransactionErrors","system","expand","generateIssueEventTarget","event_id","tn","renderGoToTransactionButton","eventSlug","generateEventSlug","project","target","getTransactionDetailsUrl","omit","values","PAGE_URL_PARAM","StyledButton","size","renderGoToSummaryButton","renderMeasurements","measurements","measurementKeys","keys","filter","Boolean","WEB_VITAL_DETAILS","sort","measurement","Number","toFixed","toLocaleString","renderTransactionDetail","startTimestamp","Math","min","start_timestamp","timestamp","endTimestamp","max","durationString","TransactionIdTitle","onClick","scrollBarIntoView","StyledIconAnchor","extra","span_id","getDynamicText","fixed","date","event","stopPropagation","textColor","IconAnchor","gray300","Button","TransactionBar","showDetail","createRef","isTraceFullDetailed","element","transactionRowDOMRef","current","offset","getBoundingClientRect","top","window","scrollY","scrollTo","getCurrentOffset","generation","getOffset","renderConnector","hasToggle","continuingDepths","isExpanded","isOrphan","isLast","eventId","style","right","height","bottom","orphanBranch","connectorBars","depth","isOrphanDepth","left","push","ROW_HEIGHT","hasToggler","renderToggle","errored","toggleExpandedState","isRoot","disabled","direction","renderTitle","scrollbarManagerChildrenProps","generateContentSpanBarRef","content","orgId","slugs","projects","find","avatarSize","hideName","ref","width","renderDivider","dividerHandlerChildrenProps","position","addDividerLineRef","onMouseEnter","setHover","onMouseLeave","onMouseOver","onMouseDown","onDragStart","renderGhostDivider","dividerPosition","addGhostDividerLineRef","toPercent","display","renderErrorBadge","renderRectangle","traceInfo","barColor","delta","abs","startPercentage","duration","widthPercentage","spanBarHatch","backgroundColor","durationDisplay","getDurationDisplay","getHumanDuration","renderHeader","hasGuideAnchor","paddingTop","toggleDisplayDetail","showStriping","renderDetail","isVisible","registerScrollFn","scrollIntoView","visible","showBorder","TOGGLE_BORDER_BOX","TransactionGroup","_prevProps","updateScrollState","renderedChildren","withScrollbarManager","LimitExceededMessage","count","totalTransactions","getResultsViewUrlTarget","discover","hasFeature","TraceHiddenMessage","numberOfHiddenTransactionsAbove","numOfTransaction","TraceView","traces","filteredTransactionIds","sentryTransaction","Sentry","getScope","getTransaction","sentrySpan","startChild","op","description","renderTransaction","has","isTransactionVisible","accumulated","reduce","acc","child","idx","isLastChild","hasChildren","result","lastIndex","transactionGroup","pickBarColor","useEffect","trackAdvancedAnalyticsEvent","traceViewRef","virtualScrollbarContainerRef","getTraceInfo","accumulator","transactionGroups","trace","isLastTransaction","isNextChildOrphaned","parent_span_id","isRootTransaction","traceView","interactiveLayerRef","virtualScrollbarRef","scrollBarAreaRef","onScroll","finish"],"sourceRoot":""}