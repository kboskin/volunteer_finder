{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionOverview_charts_tsx-app_views_releases_de-8283aa.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/charts/barChartZoom.tsx","webpack:///./app/components/charts/components/visualMap.tsx","webpack:///./app/components/charts/errorPanel.tsx","webpack:///./app/components/charts/eventsChart.tsx","webpack:///./app/components/charts/eventsGeoRequest.tsx","webpack:///./app/components/charts/lineChart.tsx","webpack:///./app/components/charts/optionSelector.tsx","webpack:///./app/components/charts/releaseSeries.tsx","webpack:///./app/components/charts/sessionsRequest.tsx","webpack:///./app/components/charts/stackedAreaChart.tsx","webpack:///./app/components/charts/transitionChart.tsx","webpack:///./app/components/charts/transparentLoadingMask.tsx","webpack:///./app/components/charts/worldMapChart.tsx","webpack:///./app/components/charts/series/mapSeries.tsx","webpack:///./app/components/discover/discoverFeature.tsx","webpack:///./app/components/discover/transactionsTable.tsx","webpack:///./app/components/discover/transactionsList.tsx","webpack:///./app/components/discoverButton.tsx","webpack:///./app/components/keyValueTable.tsx","webpack:///./app/components/notAvailable.tsx","webpack:///./app/components/pageTimeRangeSelector.tsx","webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/utils/performance/histogram/constants.tsx","webpack:///./app/utils/performance/histogram/histogramQuery.tsx","webpack:///./app/utils/performance/histogram/index.tsx","webpack:///./app/utils/performance/trends/trendsDiscoverQuery.tsx","webpack:///./app/views/performance/landing/widgets/types.tsx","webpack:///./app/views/performance/landing/widgets/utils.tsx","webpack:///./app/views/performance/landing/widgets/widgetDefinitions.tsx","webpack:///./app/views/performance/styles.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/latencyChart/chartControls.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/durationChart/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/durationChart/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/durationPercentileChart/chart.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/durationPercentileChart/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/durationPercentileChart/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/durationPercentileChart/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/latencyChart/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/latencyChart/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/trendChart/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/trendChart/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/vitalsChart/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/vitalsChart/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/charts.tsx","webpack:///./app/views/releases/detail/commitsAndFiles/emptyState.tsx","webpack:///./app/components/discover/performanceCardTable.tsx","webpack:///./app/views/releases/detail/overview/sidebar/commitAuthorBreakdown.tsx","webpack:///./app/components/deployBadge.tsx","webpack:///./app/views/releases/detail/overview/sidebar/deploys.tsx","webpack:///./app/views/releases/detail/overview/sidebar/otherProjects.tsx","webpack:///./app/views/releases/detail/overview/sidebar/projectReleaseDetails.tsx","webpack:///./app/views/releases/detail/overview/sidebar/releaseAdoption.tsx","webpack:///./app/views/releases/detail/overview/sidebar/releaseStats.tsx","webpack:///./app/views/releases/detail/overview/sidebar/totalCrashFreeUsers.tsx","webpack:///./app/views/releases/detail/overview/releaseComparisonChart/releaseComparisonChartRow.tsx","webpack:///./app/views/releases/detail/overview/releaseComparisonChart/releaseEventsChart.tsx","webpack:///./app/views/releases/detail/overview/releaseComparisonChart/releaseSessionsChart.tsx","webpack:///./app/views/releases/detail/overview/releaseComparisonChart/index.tsx","webpack:///./app/views/releases/detail/overview/releaseIssues.tsx","webpack:///./app/views/releases/detail/overview/index.tsx","webpack:///./app/views/releases/detail/overview/releaseArchivedNotice.tsx","webpack:///./app/views/releases/detail/utils.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport DataZoomInside from 'sentry/components/charts/components/dataZoomInside';\nimport ToolBox from 'sentry/components/charts/components/toolBox';\nimport {EChartChartReadyHandler, EChartDataZoomHandler} from 'sentry/types/echarts';\nimport {callIfFunction} from 'sentry/utils/callIfFunction';\n\ntype RenderProps = {\n  dataZoom: ReturnType<typeof DataZoomInside>;\n  onChartReady: EChartChartReadyHandler;\n  onDataZoom: EChartDataZoomHandler;\n  toolBox: ReturnType<typeof ToolBox>;\n};\n\nexport type BarChartBucket = {\n  end: number;\n  start: number;\n};\n\ntype Props = {\n  /**\n   * This is the list of bucket start and end ranges. This is used by the\n   * component to determine the start and end of the zoom.\n   */\n  buckets: BarChartBucket[];\n  /**\n   * The children function that will receive the render props and return\n   * a rendered chart.\n   */\n  children: (props: RenderProps) => React.ReactNode;\n  location: Location;\n  /**\n   * This is the query parameter the end of the zoom will be propagated to.\n   */\n  paramEnd: string;\n  /**\n   * This is the query parameter the start of the zoom will be propagated to.\n   */\n  paramStart: string;\n  /**\n   * If you need the dataZoom control to control more than one chart.\n   * you can provide a list of the axis indexes.\n   */\n  xAxisIndex: number[];\n  /**\n   * This is the minimum width of the zoom. If the targeted zoom area is\n   * smaller than is specified by this parameter, the zoom will be cancelled\n   * and the `onDataZoomCancelled` callback will be called.\n   */\n  minZoomWidth?: number;\n  onChartReady?: EChartChartReadyHandler;\n  onDataZoom?: EChartDataZoomHandler;\n  /**\n   * This callback is called when the zoom action was cancelled. It can happen\n   * when `minZoomWidth` is specified and the user tries to zoom on an area\n   * smaller than that.\n   */\n  onDataZoomCancelled?: () => void;\n  /**\n   *\n   */\n  onHistoryPush?: (start: number, end: number) => void;\n};\n\nclass BarChartZoom extends Component<Props> {\n  zooming: (() => void) | null = null;\n\n  /**\n   * Enable zoom immediately instead of having to toggle to zoom\n   */\n  handleChartReady = chart => {\n    callIfFunction(this.props.onChartReady, chart);\n  };\n\n  /**\n   * Chart event when *any* rendering+animation finishes\n   *\n   * `this.zooming` acts as a callback function so that\n   * we can let the native zoom animation on the chart complete\n   * before we update URL state and re-render\n   */\n  handleChartFinished = (_props, chart) => {\n    if (typeof this.zooming === 'function') {\n      this.zooming();\n      this.zooming = null;\n    }\n\n    // This attempts to activate the area zoom toolbox feature\n    const zoom = chart._componentsViews?.find(c => c._features && c._features.dataZoom);\n    if (zoom && !zoom._features.dataZoom._isZoomActive) {\n      // Calling dispatchAction will re-trigger handleChartFinished\n      chart.dispatchAction({\n        type: 'takeGlobalCursor',\n        key: 'dataZoomSelect',\n        dataZoomSelectActive: true,\n      });\n    }\n  };\n\n  handleDataZoom = (evt, chart) => {\n    const model = chart.getModel();\n    const {startValue, endValue} = model._payload.batch[0];\n\n    // Both of these values should not be null, but we include it just in case.\n    // These values are null when the user uses the toolbox included in ECharts\n    // to navigate back through zoom history, but we hide it below.\n    if (startValue !== null && endValue !== null) {\n      const {buckets, location, paramStart, paramEnd, minZoomWidth, onHistoryPush} =\n        this.props;\n      const {start} = buckets[startValue];\n      const {end} = buckets[endValue];\n\n      if (minZoomWidth === undefined || end - start > minZoomWidth) {\n        const target = {\n          pathname: location.pathname,\n          query: {\n            ...location.query,\n            [paramStart]: start,\n            [paramEnd]: end,\n          },\n        };\n        if (onHistoryPush) {\n          onHistoryPush(start, end);\n        } else {\n          browserHistory.push(target);\n        }\n      } else {\n        // Dispatch the restore action here to stop ECharts from zooming\n        chart.dispatchAction({type: 'restore'});\n        callIfFunction(this.props.onDataZoomCancelled);\n      }\n    } else {\n      // Dispatch the restore action here to stop ECharts from zooming\n      chart.dispatchAction({type: 'restore'});\n      callIfFunction(this.props.onDataZoomCancelled);\n    }\n\n    callIfFunction(this.props.onDataZoom, evt, chart);\n  };\n\n  render() {\n    const {children, xAxisIndex} = this.props;\n\n    const renderProps = {\n      onChartReady: this.handleChartReady,\n      onFinished: this.handleChartFinished,\n      dataZoom: DataZoomInside({xAxisIndex}),\n      // We must include data zoom in the toolbox for the zoom to work,\n      // but we do not want to show the toolbox components.\n      toolBox: ToolBox(\n        {},\n        {\n          dataZoom: {\n            title: {\n              zoom: '',\n              back: '',\n            },\n            iconStyle: {\n              borderWidth: 0,\n              color: 'transparent',\n              opacity: 0,\n            },\n          },\n        }\n      ),\n      onDataZoom: this.handleDataZoom,\n    };\n\n    return children(renderProps);\n  }\n}\n\nexport default BarChartZoom;\n","import 'echarts/lib/component/visualMap';\n\nimport type {VisualMapComponentOption} from 'echarts';\n\nexport default function VisualMap(\n  visualMap: VisualMapComponentOption\n): VisualMapComponentOption {\n  return visualMap;\n}\n","import styled from '@emotion/styled';\n\nconst ErrorPanel = styled('div')<{height?: string}>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: ${p => p.height || '200px'};\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nexport default ErrorPanel;\n","import * as React from 'react';\nimport {InjectedRouter} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport type {\n  EChartsOption,\n  LegendComponentOption,\n  XAXisComponentOption,\n  YAXisComponentOption,\n} from 'echarts';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\n\nimport {Client} from 'sentry/api';\nimport {AreaChart, AreaChartProps} from 'sentry/components/charts/areaChart';\nimport {BarChart, BarChartProps} from 'sentry/components/charts/barChart';\nimport ChartZoom, {ZoomRenderProps} from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {\n  getInterval,\n  processTableResults,\n  RELEASE_LINES_THRESHOLD,\n} from 'sentry/components/charts/utils';\nimport {WorldMapChart, WorldMapChartProps} from 'sentry/components/charts/worldMapChart';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport {\n  aggregateMultiPlotType,\n  getEquation,\n  isEquation,\n} from 'sentry/utils/discover/fields';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\n\nimport EventsGeoRequest from './eventsGeoRequest';\nimport EventsRequest from './eventsRequest';\n\ntype ChartComponent =\n  | React.ComponentType<BarChartProps>\n  | React.ComponentType<AreaChartProps>\n  | React.ComponentType<LineChartProps>\n  | React.ComponentType<WorldMapChartProps>;\n\ntype ChartProps = {\n  currentSeriesNames: string[];\n  loading: boolean;\n  previousSeriesNames: string[];\n  reloading: boolean;\n  stacked: boolean;\n  tableData: TableDataWithTitle[];\n  theme: Theme;\n  timeseriesData: Series[];\n  yAxis: string;\n  zoomRenderProps: ZoomRenderProps;\n  chartComponent?: ChartComponent;\n  chartOptions?: Omit<EChartsOption, 'xAxis' | 'yAxis'> & {\n    xAxis?: XAXisComponentOption;\n    yAxis?: YAXisComponentOption;\n  };\n  colors?: string[];\n  /**\n   * By default, only the release series is disableable. This adds\n   * a list of series names that are also disableable.\n   */\n  disableableSeries?: string[];\n  fromDiscover?: boolean;\n  height?: number;\n  interval?: string;\n  legendOptions?: LegendComponentOption;\n  minutesThresholdToDisplaySeconds?: number;\n  previousSeriesTransformer?: (series?: Series | null) => Series | null | undefined;\n  previousTimeseriesData?: Series[] | null;\n  referrer?: string;\n  releaseSeries?: Series[];\n  /**\n   * A callback to allow for post-processing of the series data.\n   * Can be used to rename series or even insert a new series.\n   */\n  seriesTransformer?: (series: Series[]) => Series[];\n  showDaily?: boolean;\n  showLegend?: boolean;\n  timeframe?: {end: number; start: number};\n  topEvents?: number;\n};\n\ntype State = {\n  forceUpdate: boolean;\n  seriesSelection: Record<string, boolean>;\n};\n\nclass Chart extends React.Component<ChartProps, State> {\n  state: State = {\n    seriesSelection: {},\n    forceUpdate: false,\n  };\n\n  shouldComponentUpdate(nextProps: ChartProps, nextState: State) {\n    if (nextState.forceUpdate) {\n      return true;\n    }\n\n    if (!isEqual(this.state.seriesSelection, nextState.seriesSelection)) {\n      return true;\n    }\n\n    if (nextProps.reloading || !nextProps.timeseriesData) {\n      return false;\n    }\n\n    if (\n      isEqual(this.props.timeseriesData, nextProps.timeseriesData) &&\n      isEqual(this.props.releaseSeries, nextProps.releaseSeries) &&\n      isEqual(this.props.previousTimeseriesData, nextProps.previousTimeseriesData) &&\n      isEqual(this.props.tableData, nextProps.tableData)\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getChartComponent(): ChartComponent {\n    const {showDaily, timeseriesData, yAxis, chartComponent} = this.props;\n\n    if (defined(chartComponent)) {\n      return chartComponent;\n    }\n\n    if (showDaily) {\n      return BarChart;\n    }\n\n    if (timeseriesData.length > 1) {\n      switch (aggregateMultiPlotType(yAxis)) {\n        case 'line':\n          return LineChart;\n        case 'area':\n          return AreaChart;\n        default:\n          throw new Error(`Unknown multi plot type for ${yAxis}`);\n      }\n    }\n\n    return AreaChart;\n  }\n\n  handleLegendSelectChanged = legendChange => {\n    const {disableableSeries = []} = this.props;\n    const {selected} = legendChange;\n    const seriesSelection = Object.keys(selected).reduce((state, key) => {\n      // we only want them to be able to disable the Releases&Other series,\n      // and not any of the other possible series here\n      const disableable =\n        ['Releases', 'Other'].includes(key) || disableableSeries.includes(key);\n      state[key] = disableable ? selected[key] : true;\n      return state;\n    }, {});\n\n    // we have to force an update here otherwise ECharts will\n    // update its internal state and disable the series\n    this.setState({seriesSelection, forceUpdate: true}, () =>\n      this.setState({forceUpdate: false})\n    );\n  };\n\n  render() {\n    const {\n      theme,\n      loading: _loading,\n      reloading: _reloading,\n      yAxis,\n      releaseSeries,\n      zoomRenderProps,\n      timeseriesData,\n      previousTimeseriesData,\n      showLegend,\n      legendOptions,\n      chartOptions: chartOptionsProp,\n      currentSeriesNames,\n      previousSeriesNames,\n      seriesTransformer,\n      previousSeriesTransformer,\n      colors,\n      height,\n      timeframe,\n      topEvents,\n      tableData,\n      fromDiscover,\n      ...props\n    } = this.props;\n    const {seriesSelection} = this.state;\n\n    let Component = this.getChartComponent();\n\n    if (Component === WorldMapChart) {\n      const {data, title} = processTableResults(tableData);\n      const tableSeries = [\n        {\n          seriesName: title,\n          data,\n        },\n      ];\n      return <WorldMapChart series={tableSeries} fromDiscover={fromDiscover} />;\n    }\n\n    Component = Component as Exclude<\n      ChartComponent,\n      React.ComponentType<WorldMapChartProps>\n    >;\n\n    const data = [\n      ...(currentSeriesNames.length > 0 ? currentSeriesNames : [t('Current')]),\n      ...(previousSeriesNames.length > 0 ? previousSeriesNames : [t('Previous')]),\n    ];\n\n    const releasesLegend = t('Releases');\n\n    const hasOther = topEvents && topEvents + 1 === timeseriesData.length;\n    if (hasOther) {\n      data.push('Other');\n    }\n\n    if (Array.isArray(releaseSeries)) {\n      data.push(releasesLegend);\n    }\n\n    // Temporary fix to improve performance on pages with a high number of releases.\n    const releases = releaseSeries && releaseSeries[0];\n    const hideReleasesByDefault =\n      Array.isArray(releaseSeries) &&\n      (releases as any)?.markLine?.data &&\n      (releases as any).markLine.data.length >= RELEASE_LINES_THRESHOLD;\n\n    const selected = !Array.isArray(releaseSeries)\n      ? seriesSelection\n      : Object.keys(seriesSelection).length === 0 && hideReleasesByDefault\n      ? {[releasesLegend]: false}\n      : seriesSelection;\n\n    const legend = showLegend\n      ? {\n          right: 16,\n          top: 12,\n          data,\n          selected,\n          ...(legendOptions ?? {}),\n        }\n      : undefined;\n\n    let series = Array.isArray(releaseSeries)\n      ? [...timeseriesData, ...releaseSeries]\n      : timeseriesData;\n    let previousSeries = previousTimeseriesData;\n\n    if (seriesTransformer) {\n      series = seriesTransformer(series);\n    }\n\n    if (previousSeriesTransformer) {\n      previousSeries = previousSeries?.map(\n        prev => previousSeriesTransformer(prev) as Series\n      );\n    }\n    const chartColors = timeseriesData.length\n      ? colors?.slice(0, series.length) ?? [\n          ...theme.charts.getColorPalette(timeseriesData.length - 2 - (hasOther ? 1 : 0)),\n        ]\n      : undefined;\n    if (chartColors && chartColors.length && hasOther) {\n      chartColors.push(theme.chartOther);\n    }\n    const chartOptions = {\n      colors: chartColors,\n      grid: {\n        left: '24px',\n        right: '24px',\n        top: '32px',\n        bottom: '12px',\n      },\n      seriesOptions: {\n        showSymbol: false,\n      },\n      tooltip: {\n        trigger: 'axis' as const,\n        truncate: 80,\n        valueFormatter: (value: number) => tooltipFormatter(value, yAxis),\n      },\n      xAxis: timeframe\n        ? {\n            min: timeframe.start,\n            max: timeframe.end,\n          }\n        : undefined,\n      yAxis: {\n        axisLabel: {\n          color: theme.chartLabel,\n          formatter: (value: number) => axisLabelFormatter(value, yAxis),\n        },\n      },\n      ...(chartOptionsProp ?? {}),\n      animation: typeof Component === typeof BarChart ? false : undefined,\n    };\n\n    return (\n      <Component\n        {...props}\n        {...zoomRenderProps}\n        {...chartOptions}\n        legend={legend}\n        onLegendSelectChanged={this.handleLegendSelectChanged}\n        series={series}\n        previousPeriod={previousSeries ? previousSeries : undefined}\n        height={height}\n      />\n    );\n  }\n}\n\nconst ThemedChart = withTheme(Chart);\n\nexport type EventsChartProps = {\n  api: Client;\n  /**\n   * Absolute end date.\n   */\n  end: DateString;\n  /**\n   * Environment condition.\n   */\n  environments: string[];\n  organization: OrganizationSummary;\n  /**\n   * Project ids\n   */\n  projects: number[];\n  /**\n   * The discover query string to find events with.\n   */\n  query: string;\n  router: InjectedRouter;\n  /**\n   * Absolute start date.\n   */\n  start: DateString;\n  /**\n   * The aggregate/metric to plot.\n   */\n  yAxis: string | string[];\n  /**\n   * Markup for optional chart header\n   */\n  chartHeader?: React.ReactNode;\n  /**\n   * Override the default color palette.\n   */\n  colors?: string[];\n  confirmedQuery?: boolean;\n  /**\n   * Name of the series\n   */\n  currentSeriesName?: string;\n  /**\n   * Don't show the previous period's data. Will automatically disable\n   * when start/end are used.\n   */\n  disablePrevious?: boolean;\n  /**\n   * Don't show the release marklines.\n   */\n  disableReleases?: boolean;\n  /**\n   * A list of release names to visually emphasize. Can only be used when `disableReleases` is false.\n   */\n  emphasizeReleases?: string[];\n  /**\n   * The fields that act as grouping conditions when generating a topEvents chart.\n   */\n  field?: string[];\n  /**\n   * The interval resolution for a chart e.g. 1m, 5m, 1d\n   */\n  interval?: string;\n  /**\n   * Order condition when showing topEvents\n   */\n  orderby?: string;\n  /**\n   * Relative datetime expression. eg. 14d\n   */\n  period?: string | null;\n  preserveReleaseQueryParams?: boolean;\n  /**\n   * Name of the previous series\n   */\n  previousSeriesName?: string;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  releaseQueryExtra?: Query;\n  /**\n   * Override the interval calculation and show daily results.\n   */\n  showDaily?: boolean;\n  /**\n   * Fetch n top events as dictated by the field and orderby props.\n   */\n  topEvents?: number;\n  /**\n   * Chart zoom will change 'pageStart' instead of 'start'\n   */\n  usePageZoom?: boolean;\n  /**\n   * Should datetimes be formatted in UTC?\n   */\n  utc?: boolean | null;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n} & Pick<\n  ChartProps,\n  | 'seriesTransformer'\n  | 'previousSeriesTransformer'\n  | 'showLegend'\n  | 'minutesThresholdToDisplaySeconds'\n  | 'disableableSeries'\n  | 'legendOptions'\n  | 'chartOptions'\n  | 'chartComponent'\n  | 'height'\n  | 'fromDiscover'\n>;\n\ntype ChartDataProps = {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  zoomRenderProps: ZoomRenderProps;\n  previousTimeseriesData?: Series[] | null;\n  releaseSeries?: Series[];\n  results?: Series[];\n  tableData?: TableDataWithTitle[];\n  timeframe?: {end: number; start: number};\n  timeseriesData?: Series[];\n  topEvents?: number;\n};\n\nclass EventsChart extends React.Component<EventsChartProps> {\n  isStacked() {\n    const {topEvents, yAxis} = this.props;\n    return (\n      (typeof topEvents === 'number' && topEvents > 0) ||\n      (Array.isArray(yAxis) && yAxis.length > 1)\n    );\n  }\n\n  render() {\n    const {\n      api,\n      organization,\n      period,\n      utc,\n      query,\n      router,\n      start,\n      end,\n      projects,\n      environments,\n      showLegend,\n      minutesThresholdToDisplaySeconds,\n      yAxis,\n      disablePrevious,\n      disableReleases,\n      emphasizeReleases,\n      currentSeriesName: currentName,\n      previousSeriesName: previousName,\n      seriesTransformer,\n      previousSeriesTransformer,\n      field,\n      interval,\n      showDaily,\n      topEvents,\n      orderby,\n      confirmedQuery,\n      colors,\n      chartHeader,\n      legendOptions,\n      chartOptions,\n      preserveReleaseQueryParams,\n      releaseQueryExtra,\n      disableableSeries,\n      chartComponent,\n      usePageZoom,\n      height,\n      withoutZerofill,\n      fromDiscover,\n      ...props\n    } = this.props;\n\n    // Include previous only on relative dates (defaults to relative if no start and end)\n    const includePrevious = !disablePrevious && !start && !end;\n\n    const yAxisArray = decodeList(yAxis);\n    const yAxisSeriesNames = yAxisArray.map(name => {\n      let yAxisLabel = name && isEquation(name) ? getEquation(name) : name;\n      if (yAxisLabel && yAxisLabel.length > 60) {\n        yAxisLabel = yAxisLabel.substr(0, 60) + '...';\n      }\n      return yAxisLabel;\n    });\n\n    const previousSeriesNames = previousName\n      ? [previousName]\n      : yAxisSeriesNames.map(name => t('previous %s', name));\n    const currentSeriesNames = currentName ? [currentName] : yAxisSeriesNames;\n\n    const intervalVal = showDaily ? '1d' : interval || getInterval(this.props, 'high');\n\n    let chartImplementation = ({\n      zoomRenderProps,\n      releaseSeries,\n      errored,\n      loading,\n      reloading,\n      results,\n      timeseriesData,\n      previousTimeseriesData,\n      timeframe,\n      tableData,\n    }: ChartDataProps) => {\n      if (errored) {\n        return (\n          <ErrorPanel>\n            <IconWarning color=\"gray300\" size=\"lg\" />\n          </ErrorPanel>\n        );\n      }\n      const seriesData = results ? results : timeseriesData;\n\n      return (\n        <TransitionChart\n          loading={loading}\n          reloading={reloading}\n          height={height ? `${height}px` : undefined}\n        >\n          <TransparentLoadingMask visible={reloading} />\n\n          {React.isValidElement(chartHeader) && chartHeader}\n\n          <ThemedChart\n            zoomRenderProps={zoomRenderProps}\n            loading={loading}\n            reloading={reloading}\n            showLegend={showLegend}\n            minutesThresholdToDisplaySeconds={minutesThresholdToDisplaySeconds}\n            releaseSeries={releaseSeries || []}\n            timeseriesData={seriesData ?? []}\n            previousTimeseriesData={previousTimeseriesData}\n            currentSeriesNames={currentSeriesNames}\n            previousSeriesNames={previousSeriesNames}\n            seriesTransformer={seriesTransformer}\n            previousSeriesTransformer={previousSeriesTransformer}\n            stacked={this.isStacked()}\n            yAxis={yAxisArray[0]}\n            showDaily={showDaily}\n            colors={colors}\n            legendOptions={legendOptions}\n            chartOptions={chartOptions}\n            disableableSeries={disableableSeries}\n            chartComponent={chartComponent}\n            height={height}\n            timeframe={timeframe}\n            topEvents={topEvents}\n            tableData={tableData ?? []}\n            fromDiscover={fromDiscover}\n          />\n        </TransitionChart>\n      );\n    };\n\n    if (!disableReleases) {\n      const previousChart = chartImplementation;\n      chartImplementation = chartProps => (\n        <ReleaseSeries\n          utc={utc}\n          period={period}\n          start={start}\n          end={end}\n          projects={projects}\n          environments={environments}\n          emphasizeReleases={emphasizeReleases}\n          preserveQueryParams={preserveReleaseQueryParams}\n          queryExtra={releaseQueryExtra}\n        >\n          {({releaseSeries}) => previousChart({...chartProps, releaseSeries})}\n        </ReleaseSeries>\n      );\n    }\n\n    return (\n      <ChartZoom\n        router={router}\n        period={period}\n        start={start}\n        end={end}\n        utc={utc}\n        usePageDate={usePageZoom}\n        {...props}\n      >\n        {zoomRenderProps => {\n          if (chartComponent === WorldMapChart) {\n            return (\n              <EventsGeoRequest\n                api={api}\n                organization={organization}\n                yAxis={yAxis}\n                query={query}\n                orderby={orderby}\n                projects={projects}\n                period={period}\n                start={start}\n                end={end}\n                environments={environments}\n                referrer={props.referrer}\n              >\n                {({errored, loading, reloading, tableData}) =>\n                  chartImplementation({\n                    errored,\n                    loading,\n                    reloading,\n                    zoomRenderProps,\n                    tableData,\n                  })\n                }\n              </EventsGeoRequest>\n            );\n          }\n          return (\n            <EventsRequest\n              {...props}\n              api={api}\n              organization={organization}\n              period={period}\n              project={projects}\n              environment={environments}\n              start={start}\n              end={end}\n              interval={intervalVal}\n              query={query}\n              includePrevious={includePrevious}\n              currentSeriesNames={currentSeriesNames}\n              previousSeriesNames={previousSeriesNames}\n              yAxis={yAxis}\n              field={field}\n              orderby={orderby}\n              topEvents={topEvents}\n              confirmedQuery={confirmedQuery}\n              partial\n              // Cannot do interpolation when stacking series\n              withoutZerofill={withoutZerofill && !this.isStacked()}\n              userModified={decodeScalar(router.location.query.userModified)}\n            >\n              {eventData => {\n                return chartImplementation({\n                  ...eventData,\n                  zoomRenderProps,\n                });\n              }}\n            </EventsRequest>\n          );\n        }}\n      </ChartZoom>\n    );\n  }\n}\n\nexport default EventsChart;\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableData, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\n\ninterface ChildrenRenderProps {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  tableData?: TableDataWithTitle[];\n}\n\nexport interface EventsGeoRequestProps {\n  api: Client;\n  children: (props: ChildrenRenderProps) => React.ReactElement;\n  end: DateString;\n  environments: string[];\n  organization: OrganizationSummary;\n  projects: number[];\n  query: string;\n  start: DateString;\n  yAxis: string | string[];\n  orderby?: string;\n  period?: string | null;\n  referrer?: string;\n}\n\nconst EventsGeoRequest = ({\n  api,\n  organization,\n  yAxis,\n  query,\n  orderby,\n  projects,\n  period,\n  start,\n  end,\n  environments,\n  referrer,\n  children,\n}: EventsGeoRequestProps) => {\n  const eventView = EventView.fromSavedQuery({\n    id: undefined,\n    name: '',\n    version: 2,\n    fields: Array.isArray(yAxis) ? yAxis : [yAxis],\n    query,\n    orderby: orderby ?? '',\n    projects,\n    range: period ?? '',\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n  const [results, setResults] = useState(undefined as ChildrenRenderProps['tableData']);\n  const [reloading, setReloading] = useState(false);\n  const [errored, setErrored] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    setErrored(false);\n\n    if (results) {\n      setReloading(true);\n    }\n\n    doDiscoverQuery<TableData>(api, `/organizations/${organization.slug}/events-geo/`, {\n      ...eventView.generateQueryStringObject(),\n      referrer,\n    })\n      .then(discoverQueryResults => {\n        if (mounted) {\n          setResults([discoverQueryResults[0]] as TableDataWithTitle[]);\n          setReloading(false);\n        }\n      })\n      .catch(() => {\n        if (mounted) {\n          setErrored(true);\n          setReloading(false);\n        }\n      });\n\n    return () => {\n      // Prevent setState leaking on unmounted component\n      mounted = false;\n    };\n  }, [query, yAxis, start, end, period, environments, projects]);\n\n  return children({\n    errored,\n    loading: !results && !errored,\n    reloading,\n    tableData: results,\n  });\n};\n\nexport default EventsGeoRequest;\n","import type {LineSeriesOption} from 'echarts';\n\nimport {Series} from 'sentry/types/echarts';\n\nimport LineSeries from './series/lineSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\nexport type LineChartSeries = Series &\n  Omit<LineSeriesOption, 'data' | 'name'> & {\n    dataArray?: LineSeriesOption['data'];\n  };\n\nexport interface LineChartProps extends Omit<ChartProps, 'series'> {\n  series: LineChartSeries[];\n  seriesOptions?: LineSeriesOption;\n}\n\nexport function LineChart({series, seriesOptions, ...props}: LineChartProps) {\n  return (\n    <BaseChart\n      {...props}\n      series={series.map(({seriesName, data, dataArray, ...options}) =>\n        LineSeries({\n          ...seriesOptions,\n          ...options,\n          name: seriesName,\n          data: dataArray || data?.map(({value, name}) => [name, value]),\n          animation: false,\n          animationThreshold: 1,\n          animationDuration: 0,\n        })\n      )}\n    />\n  );\n}\n","import {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport CompactSelect from 'sentry/components/forms/compactSelect';\nimport Truncate from 'sentry/components/truncate';\nimport {SelectValue} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\ntype BaseProps = React.ComponentProps<typeof CompactSelect> & {\n  options: SelectValue<string>[];\n  title: string;\n  featureType?: 'alpha' | 'beta' | 'new';\n};\n\ntype SingleProps = BaseProps & {\n  onChange: (value: string) => void;\n  selected: string;\n  multiple?: false;\n};\ntype MultipleProps = BaseProps & {\n  multiple: true;\n  onChange: (value: string[]) => void;\n  selected: string[];\n};\n\nfunction OptionSelector({\n  options,\n  onChange,\n  selected,\n  title,\n  featureType,\n  multiple,\n  ...rest\n}: SingleProps | MultipleProps) {\n  const mappedOptions = useMemo(() => {\n    return options.map(opt => ({\n      ...opt,\n      label: <Truncate value={String(opt.label)} maxLength={60} expandDirection=\"left\" />,\n    }));\n  }, [options]);\n\n  function onValueChange(option) {\n    onChange(multiple ? option.map(o => o.value) : option.value);\n  }\n\n  function isOptionDisabled(option) {\n    return (\n      // Option is explicitly marked as disabled\n      option.disabled ||\n      // The user has reached the maximum number of selections (3), and the option hasn't\n      // yet been selected. These options should be disabled to visually indicate that the\n      // user has reached the max.\n      (multiple && selected.length === 3 && !selected.includes(option.value))\n    );\n  }\n\n  return (\n    <CompactSelect\n      options={mappedOptions}\n      value={selected}\n      onChange={onValueChange}\n      isOptionDisabled={isOptionDisabled}\n      multiple={multiple}\n      triggerProps={{\n        size: 'small',\n        borderless: true,\n        prefix: (\n          <Fragment>\n            {title}\n            {defined(featureType) ? <StyledFeatureBadge type={featureType} /> : null}\n          </Fragment>\n        ),\n      }}\n      placement=\"bottom right\"\n      {...rest}\n    />\n  );\n}\n\nconst StyledFeatureBadge = styled(FeatureBadge)`\n  margin-left: 0px;\n`;\n\nexport default OptionSelector;\n","import {Component} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport {Query} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport memoize from 'lodash/memoize';\nimport partition from 'lodash/partition';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {t} from 'sentry/locale';\nimport {DateString, Organization} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {escape} from 'sentry/utils';\nimport {getFormattedDate, getUtcDateString} from 'sentry/utils/dates';\nimport {formatVersion} from 'sentry/utils/formatters';\nimport parseLinkHeader from 'sentry/utils/parseLinkHeader';\nimport {Theme} from 'sentry/utils/theme';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype ReleaseMetaBasic = {\n  date: string;\n  version: string;\n};\n\ntype ReleaseConditions = {\n  end: DateString;\n  environment: Readonly<string[]>;\n  project: Readonly<number[]>;\n  start: DateString;\n  cursor?: string;\n  query?: string;\n  statsPeriod?: string | null;\n};\n\n// This is not an exported action/function because releases list uses AsyncComponent\n// and this is not re-used anywhere else afaict\nfunction getOrganizationReleases(\n  api: Client,\n  organization: Organization,\n  conditions: ReleaseConditions\n) {\n  const query = {};\n  Object.keys(conditions).forEach(key => {\n    let value = conditions[key];\n    if (value && (key === 'start' || key === 'end')) {\n      value = getUtcDateString(value);\n    }\n    if (value) {\n      query[key] = value;\n    }\n  });\n  api.clear();\n  return api.requestPromise(`/organizations/${organization.slug}/releases/stats/`, {\n    includeAllArgs: true,\n    method: 'GET',\n    query,\n  }) as Promise<[ReleaseMetaBasic[], any, ResponseMeta]>;\n}\n\ntype Props = WithRouterProps & {\n  api: Client;\n  children: (s: State) => React.ReactNode;\n  end: DateString;\n  environments: Readonly<string[]>;\n  organization: Organization;\n  projects: Readonly<number[]>;\n  start: DateString;\n  theme: Theme;\n  emphasizeReleases?: string[];\n  memoized?: boolean;\n  period?: string | null;\n  preserveQueryParams?: boolean;\n  query?: string;\n  queryExtra?: Query;\n  releases?: ReleaseMetaBasic[] | null;\n  tooltip?: Exclude<Parameters<typeof MarkLine>[0], undefined>['tooltip'];\n  utc?: boolean | null;\n};\n\ntype State = {\n  releaseSeries: Series[];\n  releases: ReleaseMetaBasic[] | null;\n};\n\nclass ReleaseSeries extends Component<Props, State> {\n  state: State = {\n    releases: null,\n    releaseSeries: [],\n  };\n\n  componentDidMount() {\n    this._isMounted = true;\n    const {releases} = this.props;\n\n    if (releases) {\n      // No need to fetch releases if passed in from props\n      this.setReleasesWithSeries(releases);\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !isEqual(prevProps.projects, this.props.projects) ||\n      !isEqual(prevProps.environments, this.props.environments) ||\n      !isEqual(prevProps.start, this.props.start) ||\n      !isEqual(prevProps.end, this.props.end) ||\n      !isEqual(prevProps.period, this.props.period) ||\n      !isEqual(prevProps.query, this.props.query)\n    ) {\n      this.fetchData();\n    } else if (!isEqual(prevProps.emphasizeReleases, this.props.emphasizeReleases)) {\n      this.setReleasesWithSeries(this.state.releases);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n    this.props.api.clear();\n  }\n\n  _isMounted: boolean = false;\n\n  getOrganizationReleasesMemoized = memoize(\n    (api: Client, organization: Organization, conditions: ReleaseConditions) =>\n      getOrganizationReleases(api, organization, conditions),\n    (_, __, conditions) =>\n      Object.values(conditions)\n        .map(val => JSON.stringify(val))\n        .join('-')\n  );\n\n  async fetchData() {\n    const {\n      api,\n      organization,\n      projects,\n      environments,\n      period,\n      start,\n      end,\n      memoized,\n      query,\n    } = this.props;\n    const conditions: ReleaseConditions = {\n      start,\n      end,\n      project: projects,\n      environment: environments,\n      statsPeriod: period,\n      query,\n    };\n    let hasMore = true;\n    const releases: ReleaseMetaBasic[] = [];\n    while (hasMore) {\n      try {\n        const getReleases = memoized\n          ? this.getOrganizationReleasesMemoized\n          : getOrganizationReleases;\n        const [newReleases, , resp] = await getReleases(api, organization, conditions);\n        releases.push(...newReleases);\n        if (this._isMounted) {\n          this.setReleasesWithSeries(releases);\n        }\n\n        const pageLinks = resp?.getResponseHeader('Link');\n        if (pageLinks) {\n          const paginationObject = parseLinkHeader(pageLinks);\n          hasMore = paginationObject?.next?.results ?? false;\n          conditions.cursor = paginationObject.next.cursor;\n        } else {\n          hasMore = false;\n        }\n      } catch {\n        addErrorMessage(t('Error fetching releases'));\n        hasMore = false;\n      }\n    }\n  }\n\n  setReleasesWithSeries(releases) {\n    const {emphasizeReleases = []} = this.props;\n    const releaseSeries: Series[] = [];\n\n    if (emphasizeReleases.length) {\n      const [unemphasizedReleases, emphasizedReleases] = partition(\n        releases,\n        release => !emphasizeReleases.includes(release.version)\n      );\n      if (unemphasizedReleases.length) {\n        releaseSeries.push(this.getReleaseSeries(unemphasizedReleases, {type: 'dotted'}));\n      }\n      if (emphasizedReleases.length) {\n        releaseSeries.push(\n          this.getReleaseSeries(emphasizedReleases, {\n            opacity: 0.8,\n          })\n        );\n      }\n    } else {\n      releaseSeries.push(this.getReleaseSeries(releases));\n    }\n\n    this.setState({\n      releases,\n      releaseSeries,\n    });\n  }\n\n  getReleaseSeries = (releases, lineStyle = {}) => {\n    const {\n      organization,\n      router,\n      tooltip,\n      environments,\n      start,\n      end,\n      period,\n      preserveQueryParams,\n      queryExtra,\n      theme,\n    } = this.props;\n\n    const query = {...queryExtra};\n    if (organization.features.includes('global-views')) {\n      query.project = router.location.query.project;\n    }\n    if (preserveQueryParams) {\n      query.environment = [...environments];\n      query.start = start ? getUtcDateString(start) : undefined;\n      query.end = end ? getUtcDateString(end) : undefined;\n      query.statsPeriod = period || undefined;\n    }\n\n    const markLine = MarkLine({\n      animation: false,\n      lineStyle: {\n        color: theme.purple300,\n        opacity: 0.3,\n        type: 'solid',\n        ...lineStyle,\n      },\n      label: {\n        show: false,\n      },\n      data: releases.map(release => ({\n        xAxis: +new Date(release.date),\n        name: formatVersion(release.version, true),\n        value: formatVersion(release.version, true),\n        onClick: () => {\n          router.push({\n            pathname: `/organizations/${organization.slug}/releases/${release.version}/`,\n            query,\n          });\n        },\n        label: {\n          formatter: () => formatVersion(release.version, true),\n        },\n      })),\n      tooltip: tooltip || {\n        trigger: 'item',\n        formatter: ({data}: any) => {\n          // XXX using this.props here as this function does not get re-run\n          // unless projects are changed. Using a closure variable would result\n          // in stale values.\n          const time = getFormattedDate(data.value, 'MMM D, YYYY LT', {\n            local: !this.props.utc,\n          });\n          const version = escape(formatVersion(data.name, true));\n          return [\n            '<div class=\"tooltip-series\">',\n            `<div><span class=\"tooltip-label\"><strong>${t(\n              'Release'\n            )}</strong></span> ${version}</div>`,\n            '</div>',\n            '<div class=\"tooltip-date\">',\n            time,\n            '</div>',\n            '</div>',\n            '<div class=\"tooltip-arrow\"></div>',\n          ].join('');\n        },\n      },\n    });\n\n    return {\n      seriesName: 'Releases',\n      color: theme.purple200,\n      data: [],\n      markLine,\n    };\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children({\n      releases: this.state.releases,\n      releaseSeries: this.state.releaseSeries,\n    });\n  }\n}\n\nexport default withRouter(withOrganization(withApi(withTheme(ReleaseSeries))));\n","import {Component} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Organization, SessionApiResponse, SessionFieldWithOperation} from 'sentry/types';\nimport {filterSessionsInTimeWindow, getSessionsInterval} from 'sentry/utils/sessions';\n\nconst propNamesToIgnore = ['api', 'children', 'organization'];\nconst omitIgnoredProps = (props: Props) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nexport type SessionsRequestRenderProps = {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  response: SessionApiResponse | null;\n};\n\ntype Props = {\n  api: Client;\n  children: (renderProps: SessionsRequestRenderProps) => React.ReactNode;\n  field: SessionFieldWithOperation[];\n  organization: Organization;\n  end?: string;\n  environment?: string[];\n  groupBy?: string[];\n  interval?: string;\n  isDisabled?: boolean;\n  project?: number[];\n  query?: string;\n  shouldFilterSessionsInTimeWindow?: boolean;\n  start?: string;\n  statsPeriod?: string | null;\n};\n\ntype State = {\n  errored: boolean;\n  reloading: boolean;\n  response: SessionApiResponse | null;\n};\n\nclass SessionsRequest extends Component<Props, State> {\n  state: State = {\n    reloading: false,\n    errored: false,\n    response: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n\n    this.fetchData();\n  }\n\n  get path() {\n    const {organization} = this.props;\n\n    return `/organizations/${organization.slug}/sessions/`;\n  }\n\n  get baseQueryParams() {\n    const {\n      project,\n      environment,\n      field,\n      statsPeriod,\n      start,\n      end,\n      query,\n      groupBy,\n      interval,\n      organization,\n    } = this.props;\n\n    return {\n      project,\n      environment,\n      field,\n      statsPeriod,\n      query,\n      groupBy,\n      start,\n      end,\n      interval: interval\n        ? interval\n        : getSessionsInterval(\n            {start, end, period: statsPeriod},\n            {highFidelity: organization.features.includes('minute-resolution-sessions')}\n          ),\n    };\n  }\n\n  fetchData = async () => {\n    const {api, isDisabled, shouldFilterSessionsInTimeWindow} = this.props;\n\n    if (isDisabled) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.response !== null,\n      errored: false,\n    }));\n\n    try {\n      const response: SessionApiResponse = await api.requestPromise(this.path, {\n        query: this.baseQueryParams,\n      });\n\n      this.setState({\n        reloading: false,\n        response: shouldFilterSessionsInTimeWindow\n          ? filterSessionsInTimeWindow(\n              response,\n              this.baseQueryParams.start,\n              this.baseQueryParams.end\n            )\n          : response,\n      });\n    } catch (error) {\n      addErrorMessage(error.responseJSON?.detail ?? t('Error loading health data'));\n      this.setState({\n        reloading: false,\n        errored: true,\n      });\n    }\n  };\n\n  render() {\n    const {reloading, errored, response} = this.state;\n    const {children} = this.props;\n\n    const loading = response === null;\n\n    return children({\n      loading,\n      reloading,\n      errored,\n      response,\n    });\n  }\n}\n\nexport default SessionsRequest;\n","import {Component} from 'react';\n\nimport {AreaChart} from 'sentry/components/charts/areaChart';\n\ntype AreaChartProps = React.ComponentProps<typeof AreaChart>;\n\ntype Props = Omit<AreaChartProps, 'stacked' | 'ref'>;\n\nclass StackedAreaChart extends Component<Props> {\n  render() {\n    return <AreaChart tooltip={{filter: val => val > 0}} {...this.props} stacked />;\n  }\n}\n\nexport default StackedAreaChart;\n","import {Component, Fragment} from 'react';\n\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\n\nconst defaultProps = {\n  height: '200px',\n};\n\ntype Props = {\n  loading: boolean;\n  reloading: boolean;\n} & typeof defaultProps;\n\ntype State = {\n  key: number;\n  prevLoading: boolean;\n  prevReloading: boolean;\n};\n\nclass TransitionChart extends Component<Props, State> {\n  static defaultProps = defaultProps;\n\n  state: State = {\n    prevReloading: this.props.reloading,\n    prevLoading: this.props.loading,\n    key: 1,\n  };\n\n  static getDerivedStateFromProps(props: Readonly<Props>, state: State) {\n    // Transitions are controlled using variables called:\n    // - loading and,\n    // - reloading (also called pending in other apps)\n    //\n    // This component remounts the chart to ensure the stable transition\n    // from one dataset to the next.\n\n    const prevReloading = state.prevReloading;\n    const nextReloading = props.reloading;\n\n    const prevLoading = state.prevLoading;\n    const nextLoading = props.loading;\n\n    // whenever loading changes, we explicitly remount the children by updating\n    // the key prop; regardless of what state reloading is in\n    if (prevLoading !== nextLoading) {\n      return {\n        prevReloading: nextReloading,\n        prevLoading: nextLoading,\n        key: state.key + 1,\n      };\n    }\n\n    // invariant: prevLoading === nextLoading\n\n    // if loading is true, and hasn't changed from the previous re-render,\n    // do not remount the children.\n    if (nextLoading) {\n      return {\n        prevReloading: nextReloading,\n        prevLoading: nextLoading,\n        key: state.key,\n      };\n    }\n\n    // invariant: loading is false\n\n    // whenever the chart is transitioning from the reloading (pending) state to a non-loading state,\n    // remount the children\n    if (prevReloading && !nextReloading) {\n      return {\n        prevReloading: nextReloading,\n        prevLoading: nextLoading,\n        key: state.key + 1,\n      };\n    }\n\n    // do not remount the children in these remaining cases:\n    // !prevReloading && !nextReloading (re-render with no prop change)\n    // prevReloading && nextReloading (re-render with no prop change)\n    // !prevReloading && nextReloading (from loaded to pending state)\n\n    return {\n      prevReloading: nextReloading,\n      prevLoading: nextLoading,\n      key: state.key,\n    };\n  }\n\n  render() {\n    const {height, loading, reloading} = this.props;\n\n    if (loading && !reloading) {\n      return <LoadingPanel height={height} data-test-id=\"events-request-loading\" />;\n    }\n\n    // We make use of the key prop to explicitly remount the children\n    // https://reactjs.org/docs/lists-and-keys.html#keys\n    return <Fragment key={String(this.state.key)}>{this.props.children}</Fragment>;\n  }\n}\n\nexport default TransitionChart;\n","import styled from '@emotion/styled';\n\nimport LoadingMask, {LoadingMaskProps} from 'sentry/components/loadingMask';\n\ninterface TransparentLoadingMaskProps extends LoadingMaskProps {\n  visible: boolean;\n  children?: React.ReactNode;\n  className?: string;\n}\n\nconst TransparentLoadingMask = styled(\n  ({className, visible, children, ...props}: TransparentLoadingMaskProps) => {\n    const other = visible ? {...props, 'data-test-id': 'loading-placeholder'} : props;\n    return (\n      <LoadingMask className={className} {...other}>\n        {children}\n      </LoadingMask>\n    );\n  }\n)<TransparentLoadingMaskProps>`\n  ${p => !p.visible && 'display: none;'};\n  opacity: 0.4;\n  z-index: 1;\n`;\n\nexport default TransparentLoadingMask;\n","import {useEffect, useState} from 'react';\nimport {useTheme} from '@emotion/react';\nimport type {MapSeriesOption, TooltipComponentOption} from 'echarts';\nimport * as echarts from 'echarts/core';\nimport max from 'lodash/max';\n\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\n\nimport VisualMap from './components/visualMap';\nimport MapSeries from './series/mapSeries';\nimport BaseChart from './baseChart';\n\ntype ChartProps = Omit<React.ComponentProps<typeof BaseChart>, 'css'>;\n\ntype MapChartSeriesDataUnit = Omit<SeriesDataUnit, 'name' | 'itemStyle'> & {\n  // Docs for map itemStyle differ from Series data unit. See https://echarts.apache.org/en/option.html#series-map.data.itemStyle\n  itemStyle?: MapSeriesOption['itemStyle'];\n  name?: string;\n};\n\ntype MapChartSeries = Omit<Series, 'data'> & {\n  data: MapChartSeriesDataUnit[];\n};\n\nexport interface WorldMapChartProps extends Omit<ChartProps, 'series'> {\n  series: MapChartSeries[];\n  fromDiscover?: boolean;\n  fromDiscoverQueryList?: boolean;\n  seriesOptions?: MapSeriesOption;\n}\n\ntype JSONResult = Record<string, any>;\n\ntype State = {\n  codeToCountryMap: JSONResult | null;\n  countryToCodeMap: JSONResult | null;\n  map: JSONResult | null;\n};\n\nconst DEFAULT_ZOOM = 1.3;\nconst DISCOVER_ZOOM = 1.1;\nconst DISCOVER_QUERY_LIST_ZOOM = 0.9;\nconst DEFAULT_CENTER_X = 10.97;\nconst DISCOVER_QUERY_LIST_CENTER_Y = -12;\nconst DEFAULT_CENTER_Y = 9.71;\n\nexport function WorldMapChart({\n  series,\n  seriesOptions,\n  fromDiscover,\n  fromDiscoverQueryList,\n  ...props\n}: WorldMapChartProps) {\n  const theme = useTheme();\n  const [state, setState] = useState<State>(() => ({\n    countryToCodeMap: null,\n    map: null,\n    codeToCountryMap: null,\n  }));\n\n  useEffect(() => {\n    let unmounted = false;\n\n    if (!unmounted) {\n      loadWorldMap();\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, []);\n\n  async function loadWorldMap() {\n    try {\n      const [countryCodesMap, world] = await Promise.all([\n        import('sentry/data/countryCodesMap'),\n        import('sentry/data/world.json'),\n      ]);\n\n      const countryToCodeMap = countryCodesMap.default;\n      const worldMap = world.default;\n\n      // Echarts not available in tests\n      echarts.registerMap?.('sentryWorld', worldMap as any);\n\n      const codeToCountryMap: Record<string, string> = {};\n\n      for (const country in worldMap) {\n        codeToCountryMap[countryToCodeMap[country]] = country;\n      }\n\n      setState({\n        countryToCodeMap,\n        map: worldMap,\n        codeToCountryMap,\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  if (state.countryToCodeMap === null || state.map === null) {\n    return null;\n  }\n\n  const processedSeries = series.map(({seriesName, data, ...options}) =>\n    MapSeries({\n      ...seriesOptions,\n      ...options,\n      map: 'sentryWorld',\n      name: seriesName,\n      nameMap: state.countryToCodeMap ?? undefined,\n      aspectScale: 0.85,\n      zoom: fromDiscover\n        ? DISCOVER_ZOOM\n        : fromDiscoverQueryList\n        ? DISCOVER_QUERY_LIST_ZOOM\n        : DEFAULT_ZOOM,\n      center: [\n        DEFAULT_CENTER_X,\n        fromDiscoverQueryList ? DISCOVER_QUERY_LIST_CENTER_Y : DEFAULT_CENTER_Y,\n      ],\n      itemStyle: {\n        areaColor: theme.gray200,\n        borderColor: theme.backgroundSecondary,\n      },\n      emphasis: {\n        itemStyle: {\n          areaColor: theme.pink300,\n        },\n        label: {\n          show: false,\n        },\n      },\n      data,\n      silent: fromDiscoverQueryList,\n      roam: !fromDiscoverQueryList,\n    })\n  );\n\n  // TODO(billy):\n  // For absolute values, we want min/max to based on min/max of series\n  // Otherwise it should be 0-100\n  const maxValue = max(series.map(({data}) => max(data.map(({value}) => value)))) || 1;\n\n  const tooltipFormatter: TooltipComponentOption['formatter'] = (format: any) => {\n    const {marker, name, value} = Array.isArray(format) ? format[0] : format;\n    // If value is NaN, don't show anything because we won't have a country code either\n    if (isNaN(value as number)) {\n      return '';\n    }\n\n    // `value` should be a number\n    const formattedValue = typeof value === 'number' ? value.toLocaleString() : '';\n    const countryOrCode = state.codeToCountryMap?.[name as string] || name;\n\n    return [\n      `<div class=\"tooltip-series tooltip-series-solo\">\n               <div><span class=\"tooltip-label\">${marker} <strong>${countryOrCode}</strong></span> ${formattedValue}</div>\n            </div>`,\n      '<div class=\"tooltip-arrow\"></div>',\n    ].join('');\n  };\n\n  return (\n    <BaseChart\n      options={{\n        backgroundColor: fromDiscoverQueryList ? undefined : theme.background,\n        visualMap: [\n          VisualMap({\n            show: !fromDiscoverQueryList,\n            left: fromDiscover ? undefined : 'right',\n            right: fromDiscover ? 5 : undefined,\n            min: 0,\n            max: maxValue,\n            inRange: {\n              color: [theme.purple200, theme.purple300],\n            },\n            text: ['High', 'Low'],\n            textStyle: {\n              color: theme.textColor,\n            },\n\n            // Whether show handles, which can be dragged to adjust \"selected range\".\n            // False because the handles are pretty ugly\n            calculable: false,\n          }),\n        ],\n      }}\n      {...props}\n      yAxis={null}\n      xAxis={null}\n      series={processedSeries}\n      tooltip={{\n        formatter: tooltipFormatter,\n      }}\n      height={fromDiscover ? 400 : undefined}\n    />\n  );\n}\n","import 'echarts/lib/chart/map';\n\nimport type {MapSeriesOption} from 'echarts';\n\nexport default function MapSeries(props: MapSeriesOption = {map: ''}): MapSeriesOption {\n  return {\n    roam: true,\n    ...props,\n    emphasis: {\n      label: {show: false},\n      ...props.emphasis,\n    },\n    type: 'map',\n  };\n}\n","import Feature from 'sentry/components/acl/feature';\nimport FeatureDisabled from 'sentry/components/acl/featureDisabled';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  children: ({hasFeature: boolean}) => React.ReactNode;\n};\n\n/**\n * Provide a component that passes a prop to indicate if the current\n * organization doesn't have access to discover results.\n */\nfunction DiscoverFeature({children}: Props) {\n  const noFeatureMessage = t('Requires discover feature.');\n\n  const renderDisabled = p => (\n    <Hovercard\n      body={\n        <FeatureDisabled\n          features={p.features}\n          hideHelpToggle\n          message={noFeatureMessage}\n          featureName={noFeatureMessage}\n        />\n      }\n    >\n      {p.children(p)}\n    </Hovercard>\n  );\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:open-discover\"\n      features={['organizations:discover-basic']}\n      renderDisabled={renderDisabled}\n    >\n      {({hasFeature}) => children({hasFeature})}\n    </Feature>\n  );\n}\n\nexport default DiscoverFeature;\n","import {Fragment, PureComponent} from 'react';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor, Query} from 'history';\n\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {TableData, TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView, {MetaType} from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {\n  Alignments,\n  fieldAlignment,\n  getAggregateAlias,\n} from 'sentry/utils/discover/fields';\nimport CellAction, {Actions} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\nimport {GridCell, GridCellNumber} from 'sentry/views/performance/styles';\nimport {TrendsDataEvents} from 'sentry/views/performance/trends/types';\n\ntype Props = {\n  columnOrder: TableColumn<React.ReactText>[];\n  eventView: EventView;\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  tableData: TableData | TrendsDataEvents | null;\n  useAggregateAlias: boolean;\n  generateLink?: Record<\n    string,\n    (\n      organization: Organization,\n      tableRow: TableDataRow,\n      query: Query\n    ) => LocationDescriptor\n  >;\n  handleCellAction?: (\n    c: TableColumn<React.ReactText>\n  ) => (a: Actions, v: React.ReactText) => void;\n  titles?: string[];\n};\n\nclass TransactionsTable extends PureComponent<Props> {\n  getTitles() {\n    const {eventView, titles} = this.props;\n    return titles ?? eventView.getFields();\n  }\n\n  renderHeader() {\n    const {tableData, columnOrder} = this.props;\n\n    const tableMeta = tableData?.meta;\n    const generateSortLink = () => undefined;\n    const tableTitles = this.getTitles();\n\n    const headers = tableTitles.map((title, index) => {\n      const column = columnOrder[index];\n      const align: Alignments = fieldAlignment(column.name, column.type, tableMeta);\n\n      if (column.key === 'span_ops_breakdown.relative') {\n        return (\n          <HeadCellContainer key={index}>\n            <SortLink\n              align={align}\n              title={\n                title === t('operation duration') ? (\n                  <Fragment>\n                    {title}\n                    <StyledIconQuestion\n                      size=\"xs\"\n                      position=\"top\"\n                      title={t(\n                        `Span durations are summed over the course of an entire transaction. Any overlapping spans are only counted once.`\n                      )}\n                    />\n                  </Fragment>\n                ) : (\n                  title\n                )\n              }\n              direction={undefined}\n              canSort={false}\n              generateSortLink={generateSortLink}\n            />\n          </HeadCellContainer>\n        );\n      }\n\n      return (\n        <HeadCellContainer key={index}>\n          <SortLink\n            align={align}\n            title={title}\n            direction={undefined}\n            canSort={false}\n            generateSortLink={generateSortLink}\n          />\n        </HeadCellContainer>\n      );\n    });\n\n    return headers;\n  }\n\n  renderRow(\n    row: TableDataRow,\n    rowIndex: number,\n    columnOrder: TableColumn<React.ReactText>[],\n    tableMeta: MetaType\n  ): React.ReactNode[] {\n    const {\n      eventView,\n      organization,\n      location,\n      generateLink,\n      handleCellAction,\n      titles,\n      useAggregateAlias,\n    } = this.props;\n    const fields = eventView.getFields();\n\n    if (titles && titles.length) {\n      // Slice to match length of given titles\n      columnOrder = columnOrder.slice(0, titles.length);\n    }\n\n    const resultsRow = columnOrder.map((column, index) => {\n      const field = String(column.key);\n      // TODO add a better abstraction for this in fieldRenderers.\n      const fieldName = useAggregateAlias ? getAggregateAlias(field) : field;\n      const fieldType = tableMeta[fieldName];\n\n      const fieldRenderer = getFieldRenderer(field, tableMeta, useAggregateAlias);\n      let rendered = fieldRenderer(row, {organization, location});\n\n      const target = generateLink?.[field]?.(organization, row, location.query);\n\n      if (target) {\n        rendered = (\n          <Link data-test-id={`view-${fields[index]}`} to={target}>\n            {rendered}\n          </Link>\n        );\n      }\n\n      const isNumeric = ['integer', 'number', 'duration'].includes(fieldType);\n      const key = `${rowIndex}:${column.key}:${index}`;\n      rendered = isNumeric ? (\n        <GridCellNumber>{rendered}</GridCellNumber>\n      ) : (\n        <GridCell>{rendered}</GridCell>\n      );\n\n      if (handleCellAction) {\n        rendered = (\n          <CellAction\n            column={column}\n            dataRow={row}\n            handleCellAction={handleCellAction(column)}\n          >\n            {rendered}\n          </CellAction>\n        );\n      }\n\n      return <BodyCellContainer key={key}>{rendered}</BodyCellContainer>;\n    });\n\n    return resultsRow;\n  }\n\n  renderResults() {\n    const {isLoading, tableData, columnOrder} = this.props;\n    let cells: React.ReactNode[] = [];\n\n    if (isLoading) {\n      return cells;\n    }\n    if (!tableData || !tableData.meta || !tableData.data) {\n      return cells;\n    }\n\n    tableData.data.forEach((row, i: number) => {\n      // Another check to appease tsc\n      if (!tableData.meta) {\n        return;\n      }\n      cells = cells.concat(this.renderRow(row, i, columnOrder, tableData.meta));\n    });\n    return cells;\n  }\n\n  render() {\n    const {isLoading, tableData} = this.props;\n\n    const hasResults =\n      tableData && tableData.data && tableData.meta && tableData.data.length > 0;\n\n    // Custom set the height so we don't have layout shift when results are loaded.\n    const loader = <LoadingIndicator style={{margin: '70px auto'}} />;\n\n    return (\n      <PanelTable\n        data-test-id=\"transactions-table\"\n        isEmpty={!hasResults}\n        emptyMessage={t('No transactions found')}\n        headers={this.renderHeader()}\n        isLoading={isLoading}\n        disablePadding\n        loader={loader}\n      >\n        {this.renderResults()}\n      </PanelTable>\n    );\n  }\n}\n\nconst HeadCellContainer = styled('div')`\n  padding: ${space(2)};\n`;\n\nconst BodyCellContainer = styled('div')`\n  padding: ${space(1)} ${space(2)};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledIconQuestion = styled(QuestionTooltip)`\n  position: relative;\n  top: 1px;\n  left: 4px;\n`;\n\nexport default TransactionsTable;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor, Query} from 'history';\n\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button from 'sentry/components/button';\nimport DiscoverButton from 'sentry/components/discoverButton';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport DiscoverQuery, {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {Sort} from 'sentry/utils/discover/fields';\nimport {TrendsEventsDiscoverQuery} from 'sentry/utils/performance/trends/trendsDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {Actions} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\nimport {decodeColumnOrder} from 'sentry/views/eventsV2/utils';\nimport {SpanOperationBreakdownFilter} from 'sentry/views/performance/transactionSummary/filter';\nimport {mapShowTransactionToPercentile} from 'sentry/views/performance/transactionSummary/transactionEvents/utils';\nimport {TransactionFilterOptions} from 'sentry/views/performance/transactionSummary/utils';\nimport {TrendChangeType, TrendView} from 'sentry/views/performance/trends/types';\n\nimport TransactionsTable from './transactionsTable';\n\nconst DEFAULT_TRANSACTION_LIMIT = 5;\n\nexport type DropdownOption = {\n  /**\n   * The label to display in the dropdown\n   */\n  label: string;\n  /**\n   * The sort to apply to the eventView when this is selected.\n   */\n  sort: Sort;\n  /**\n   * The unique name to use for this option.\n   */\n  value: string;\n  /**\n   * override the eventView query\n   */\n  query?: [string, string][];\n  /**\n   * Included if the option is for a trend\n   */\n  trendType?: TrendChangeType;\n};\n\ntype Props = {\n  /**\n   * The name of the url parameter that contains the cursor info.\n   */\n  cursorName: string;\n  eventView: EventView;\n  /**\n   * The callback for when the dropdown option changes.\n   */\n  handleDropdownChange: (k: string) => void;\n  /**\n   * The limit to the number of results to fetch.\n   */\n  limit: number;\n  location: Location;\n  /**\n   * The available options for the dropdown.\n   */\n  options: DropdownOption[];\n  organization: Organization;\n  /**\n   * The currently selected option on the dropdown.\n   */\n  selected: DropdownOption;\n  breakdown?: SpanOperationBreakdownFilter;\n  /**\n   * Show a loading indicator instead of the table, used for transaction summary p95.\n   */\n  forceLoading?: boolean;\n  /**\n   * Optional callback function to generate an alternative EventView object to be used\n   * for generating the Discover query.\n   */\n  generateDiscoverEventView?: () => EventView;\n  /**\n   * A map of callbacks to generate a link for a column based on the title.\n   */\n  generateLink?: Record<\n    string,\n    (\n      organization: Organization,\n      tableRow: TableDataRow,\n      query: Query\n    ) => LocationDescriptor\n  >;\n  generatePerformanceTransactionEventsView?: () => EventView;\n  /**\n   * The callback to generate a cell action handler for a column\n   */\n  handleCellAction?: (\n    c: TableColumn<React.ReactText>\n  ) => (a: Actions, v: React.ReactText) => void;\n  /**\n   * The callback for when View All Events is clicked.\n   */\n  handleOpenAllEventsClick?: (e: React.MouseEvent<Element>) => void;\n  /**\n   * The callback for when Open in Discover is clicked.\n   */\n  handleOpenInDiscoverClick?: (e: React.MouseEvent<Element>) => void;\n  showTransactions?: TransactionFilterOptions;\n  /**\n   * A list of preferred table headers to use over the field names.\n   */\n  titles?: string[];\n  trendView?: TrendView;\n};\n\nclass _TransactionsList extends Component<Props> {\n  static defaultProps = {\n    cursorName: 'transactionCursor',\n    limit: DEFAULT_TRANSACTION_LIMIT,\n  };\n\n  handleCursor: CursorHandler = (cursor, pathname, query) => {\n    const {cursorName} = this.props;\n    browserHistory.push({\n      pathname,\n      query: {...query, [cursorName]: cursor},\n    });\n  };\n\n  getEventView() {\n    const {eventView, selected} = this.props;\n\n    const sortedEventView = eventView.withSorts([selected.sort]);\n    if (selected.query) {\n      const query = new MutableSearch(sortedEventView.query);\n      selected.query.forEach(item => query.setFilterValues(item[0], [item[1]]));\n      sortedEventView.query = query.formatString();\n    }\n\n    return sortedEventView;\n  }\n\n  generateDiscoverEventView(): EventView {\n    const {generateDiscoverEventView} = this.props;\n    if (typeof generateDiscoverEventView === 'function') {\n      return generateDiscoverEventView();\n    }\n    return this.getEventView();\n  }\n\n  generatePerformanceTransactionEventsView(): EventView {\n    const {generatePerformanceTransactionEventsView} = this.props;\n    return generatePerformanceTransactionEventsView?.() ?? this.getEventView();\n  }\n\n  renderHeader(): React.ReactNode {\n    const {\n      organization,\n      selected,\n      options,\n      handleDropdownChange,\n      handleOpenAllEventsClick,\n      handleOpenInDiscoverClick,\n      showTransactions,\n      breakdown,\n    } = this.props;\n\n    return (\n      <Fragment>\n        <div>\n          <DropdownControl\n            button={({isOpen, getActorProps}) => (\n              <StyledDropdownButton\n                {...getActorProps()}\n                isOpen={isOpen}\n                prefix={t('Filter')}\n                size=\"xsmall\"\n              >\n                {selected.label}\n              </StyledDropdownButton>\n            )}\n          >\n            {options.map(({value, label}) => (\n              <DropdownItem\n                data-test-id={`option-${value}`}\n                key={value}\n                onSelect={handleDropdownChange}\n                eventKey={value}\n                isActive={value === selected.value}\n              >\n                {label}\n              </DropdownItem>\n            ))}\n          </DropdownControl>\n        </div>\n        {!this.isTrend() &&\n          (handleOpenAllEventsClick ? (\n            <GuideAnchor target=\"release_transactions_open_in_transaction_events\">\n              <Button\n                onClick={handleOpenAllEventsClick}\n                to={this.generatePerformanceTransactionEventsView().getPerformanceTransactionEventsViewUrlTarget(\n                  organization.slug,\n                  {\n                    showTransactions: mapShowTransactionToPercentile(showTransactions),\n                    breakdown,\n                  }\n                )}\n                size=\"xsmall\"\n                data-test-id=\"transaction-events-open\"\n              >\n                {t('View All Events')}\n              </Button>\n            </GuideAnchor>\n          ) : (\n            <GuideAnchor target=\"release_transactions_open_in_discover\">\n              <DiscoverButton\n                onClick={handleOpenInDiscoverClick}\n                to={this.generateDiscoverEventView().getResultsViewUrlTarget(\n                  organization.slug\n                )}\n                size=\"xsmall\"\n                data-test-id=\"discover-open\"\n              >\n                {t('Open in Discover')}\n              </DiscoverButton>\n            </GuideAnchor>\n          ))}\n      </Fragment>\n    );\n  }\n\n  renderTransactionTable(): React.ReactNode {\n    const {\n      location,\n      organization,\n      handleCellAction,\n      cursorName,\n      limit,\n      titles,\n      generateLink,\n      forceLoading,\n    } = this.props;\n    const useEvents = organization.features.includes(\n      'performance-frontend-use-events-endpoint'\n    );\n\n    const eventView = this.getEventView();\n    const columnOrder = eventView.getColumns();\n    const cursor = decodeScalar(location.query?.[cursorName]);\n\n    const tableRenderer = ({isLoading, pageLinks, tableData}) => (\n      <Fragment>\n        <Header>\n          {this.renderHeader()}\n          <StyledPagination\n            pageLinks={pageLinks}\n            onCursor={this.handleCursor}\n            size=\"xsmall\"\n          />\n        </Header>\n        <TransactionsTable\n          eventView={eventView}\n          organization={organization}\n          location={location}\n          isLoading={isLoading}\n          tableData={tableData}\n          columnOrder={columnOrder}\n          titles={titles}\n          generateLink={generateLink}\n          handleCellAction={handleCellAction}\n          useAggregateAlias={!useEvents}\n        />\n      </Fragment>\n    );\n\n    if (forceLoading) {\n      return tableRenderer({\n        isLoading: true,\n        pageLinks: null,\n        tableData: null,\n      });\n    }\n\n    return (\n      <DiscoverQuery\n        location={location}\n        eventView={eventView}\n        orgSlug={organization.slug}\n        limit={limit}\n        cursor={cursor}\n        referrer=\"api.discover.transactions-list\"\n        useEvents={useEvents}\n      >\n        {tableRenderer}\n      </DiscoverQuery>\n    );\n  }\n\n  renderTrendsTable(): React.ReactNode {\n    const {trendView, location, selected, organization, cursorName, generateLink} =\n      this.props;\n\n    const sortedEventView: TrendView = trendView!.clone();\n    sortedEventView.sorts = [selected.sort];\n    sortedEventView.trendType = selected.trendType;\n    if (selected.query) {\n      const query = new MutableSearch(sortedEventView.query);\n      selected.query.forEach(item => query.setFilterValues(item[0], [item[1]]));\n      sortedEventView.query = query.formatString();\n    }\n    const cursor = decodeScalar(location.query?.[cursorName]);\n\n    return (\n      <TrendsEventsDiscoverQuery\n        eventView={sortedEventView}\n        orgSlug={organization.slug}\n        location={location}\n        cursor={cursor}\n        limit={5}\n      >\n        {({isLoading, trendsData, pageLinks}) => (\n          <Fragment>\n            <Header>\n              {this.renderHeader()}\n              <StyledPagination\n                pageLinks={pageLinks}\n                onCursor={this.handleCursor}\n                size=\"small\"\n              />\n            </Header>\n            <TransactionsTable\n              eventView={sortedEventView}\n              organization={organization}\n              location={location}\n              isLoading={isLoading}\n              tableData={trendsData}\n              titles={['transaction', 'percentage', 'difference']}\n              columnOrder={decodeColumnOrder([\n                {field: 'transaction'},\n                {field: 'trend_percentage()'},\n                {field: 'trend_difference()'},\n              ])}\n              generateLink={generateLink}\n              useAggregateAlias\n            />\n          </Fragment>\n        )}\n      </TrendsEventsDiscoverQuery>\n    );\n  }\n\n  isTrend(): boolean {\n    const {selected} = this.props;\n    return selected.trendType !== undefined;\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.isTrend() ? this.renderTrendsTable() : this.renderTransactionTable()}\n      </Fragment>\n    );\n  }\n}\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  min-width: 145px;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n\nconst TransactionsList = (\n  props: Omit<Props, 'cursorName' | 'limit'> & {\n    cursorName?: Props['cursorName'];\n    limit?: Props['limit'];\n  }\n) => {\n  return <_TransactionsList {...props} />;\n};\n\nexport default TransactionsList;\n","import Button, {ButtonProps} from 'sentry/components/button';\nimport DiscoverFeature from 'sentry/components/discover/discoverFeature';\nimport {t} from 'sentry/locale';\n\ntype DiscoverButtonProps = Omit<ButtonProps, 'aria-label'>;\n\n/**\n * Provide a button that turns itself off if the current organization\n * doesn't have access to discover results.\n */\nfunction DiscoverButton({children, ...buttonProps}: DiscoverButtonProps) {\n  return (\n    <DiscoverFeature>\n      {({hasFeature}) => (\n        <Button\n          disabled={!hasFeature}\n          aria-label={t('Open in Discover')}\n          {...buttonProps}\n        >\n          {children}\n        </Button>\n      )}\n    </DiscoverFeature>\n  );\n}\n\nexport default DiscoverButton;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyValueTable = styled('dl')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n`;\n\nexport const KeyValueTableRow = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst commonStyles = ({theme}: {theme: Theme}) => `\nfont-size: ${theme.fontSizeMedium};\npadding: ${space(0.5)} ${space(1)};\nfont-weight: normal;\nline-height: inherit;\n${p => p.theme.overflowEllipsis};\n&:nth-of-type(2n-1) {\n  background-color: ${theme.backgroundSecondary};\n}\n`;\n\nconst Key = styled('dt')`\n  ${commonStyles};\n  color: ${p => p.theme.textColor};\n`;\n\nconst Value = styled('dd')`\n  ${commonStyles};\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n","import styled from '@emotion/styled';\n\nimport Tooltip from 'sentry/components/tooltip';\n\ntype Props = {\n  className?: string;\n  tooltip?: React.ReactNode;\n};\n\nfunction NotAvailable({tooltip, className}: Props) {\n  return (\n    <Tooltip title={tooltip} skipWrapper disabled={tooltip === undefined}>\n      <Wrapper className={className}>{'\\u2014'}</Wrapper>\n    </Tooltip>\n  );\n}\n\nconst Wrapper = styled('div')`\n  color: ${p => p.theme.gray200};\n`;\n\nexport default NotAvailable;\n","import styled from '@emotion/styled';\n\nimport TimeRangeSelector from 'sentry/components/organizations/timeRangeSelector';\nimport {Panel} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Props = React.ComponentProps<typeof TimeRangeSelector> & {className?: string};\n\nfunction PageTimeRangeSelector({className, ...props}: Props) {\n  return (\n    <DropdownDate className={className}>\n      <TimeRangeSelector\n        key={`period:${props.relative}-start:${props.start}-end:${props.end}-utc:${props.utc}-defaultPeriod:${props.defaultPeriod}`}\n        label={<DropdownLabel>{t('Date Range:')}</DropdownLabel>}\n        detached\n        {...props}\n      />\n    </DropdownDate>\n  );\n}\n\nconst DropdownDate = styled(Panel)`\n  padding: 0;\n  margin: 0;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 42px;\n  background: ${p => p.theme.background};\n  border: 1px solid ${p => p.theme.border};\n  border-radius: ${p => p.theme.borderRadius};\n\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.textColor};\n\n  > div {\n    width: 100%;\n    align-self: stretch;\n  }\n  /* StyledItemHeader used to show selected value of TimeRangeSelector */\n  > div > div:first-child > div {\n    padding: 0 ${space(2)};\n  }\n  /* Menu that dropdowns from TimeRangeSelector */\n  > div > div:last-child:not(:first-child) {\n    /* Remove awkward 1px width difference on dropdown due to border */\n    min-width: calc(100% + 2px);\n    transform: translateX(-1px);\n    right: auto;\n  }\n`;\n\nconst DropdownLabel = styled('span')`\n  text-align: left;\n  font-weight: 600;\n  color: ${p => p.theme.textColor};\n\n  > span:last-child {\n    font-weight: 400;\n  }\n`;\n\nexport default PageTimeRangeSelector;\n","import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import {Dispatch, ReactNode, useReducer} from 'react';\n\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  hideSinceMetricsOnly: boolean;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  unset = 'unset',\n  metrics = 'metrics',\n  transactions = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  auto = 'auto',\n  metricsOnly = 'metricsOnly',\n  transactionsOnly = 'transactionsOnly',\n}\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport const MEPSettingProvider = ({\n  children,\n  _hasMEPState,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n}) => {\n  const organization = useOrganization();\n  const canUseMEP = organization.features.includes('performance-use-metrics');\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    MEPState.auto\n  );\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.unset\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const hideSinceMetricsOnly =\n    canUseMEP &&\n    (metricSettingState === MEPState.metricsOnly || metricSettingState === MEPState.auto); // TODO(k-fish): Change this so auto includes data state.\n  const shouldQueryProvideMEPParams = canUseMEP && metricSettingState === MEPState.auto;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.metricsOnly;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.transactionsOnly;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        hideSinceMetricsOnly,\n        shouldQueryProvideMEPParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      {children}\n    </_MEPSettingProvider>\n  );\n};\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import {t} from 'sentry/locale';\nimport {SelectValue} from 'sentry/types';\n\nimport {DataFilter} from './types';\n\nexport const FILTER_OPTIONS: SelectValue<DataFilter>[] = [\n  {label: t('Exclude'), value: 'exclude_outliers'},\n  {label: t('Include'), value: 'all'},\n];\n","import {Fragment} from 'react';\nimport omit from 'lodash/omit';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {DataFilter, HistogramData} from 'sentry/utils/performance/histogram/types';\nimport withApi from 'sentry/utils/withApi';\n\ntype Histograms = Record<string, HistogramData>;\n\ntype HistogramProps = {\n  fields: string[];\n  numBuckets: number;\n  dataFilter?: DataFilter;\n  didReceiveMultiAxis?: (axisCounts: Record<string, number>) => void;\n  max?: number;\n  min?: number;\n  precision?: number;\n};\n\ntype RequestProps = DiscoverQueryProps & HistogramProps;\n\nexport type HistogramQueryChildrenProps = Omit<\n  GenericChildrenProps<HistogramProps>,\n  'tableData'\n> & {\n  histograms: Histograms | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: HistogramQueryChildrenProps) => React.ReactNode;\n};\n\nfunction getHistogramRequestPayload(props: RequestProps) {\n  const {fields, numBuckets, min, max, precision, dataFilter, eventView, location} =\n    props;\n  const baseApiPayload = {\n    field: fields,\n    numBuckets,\n    min,\n    max,\n    precision,\n    dataFilter,\n  };\n  const additionalApiPayload = omit(eventView.getEventsAPIPayload(location), [\n    'field',\n    'sort',\n    'per_page',\n  ]);\n  const apiPayload = Object.assign(baseApiPayload, additionalApiPayload);\n  return apiPayload;\n}\n\nfunction HistogramQuery(props: Props) {\n  const {children, fields, didReceiveMultiAxis} = props;\n\n  function didFetch(data: Histograms) {\n    if (didReceiveMultiAxis) {\n      const counts: Record<string, number> = {};\n      Object.entries(data).forEach(\n        ([key, values]) =>\n          (counts[key] = values.length\n            ? values.reduce((prev, curr) => prev + curr.count, 0)\n            : 0)\n      );\n      didReceiveMultiAxis(counts);\n    }\n  }\n\n  if (fields.length === 0) {\n    return (\n      <Fragment>\n        {children({\n          isLoading: false,\n          error: null,\n          pageLinks: null,\n          histograms: {},\n        })}\n      </Fragment>\n    );\n  }\n\n  return (\n    <GenericDiscoverQuery<Histograms, HistogramProps>\n      route=\"events-histogram\"\n      getRequestPayload={getHistogramRequestPayload}\n      didFetch={didFetch}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({histograms: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(HistogramQuery);\n","import {Component} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {SelectValue} from 'sentry/types';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {FILTER_OPTIONS} from './constants';\nimport {DataFilter} from './types';\n\ntype HistogramChildrenProps = {\n  activeFilter: SelectValue<DataFilter>;\n  filterOptions: typeof FILTER_OPTIONS;\n  handleFilterChange: (option: string) => void;\n  handleResetView: () => void;\n  isZoomed: boolean;\n};\n\ntype Props = {\n  children: (props: HistogramChildrenProps) => React.ReactNode;\n  location: Location;\n  zoomKeys: string[];\n};\n\nclass Histogram extends Component<Props> {\n  isZoomed() {\n    const {location, zoomKeys} = this.props;\n    return zoomKeys.map(key => location.query[key]).some(value => value !== undefined);\n  }\n\n  handleResetView = () => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: removeHistogramQueryStrings(location, zoomKeys),\n    });\n  };\n\n  getActiveFilter() {\n    const {location} = this.props;\n\n    const dataFilter = location.query.dataFilter\n      ? decodeScalar(location.query.dataFilter)\n      : FILTER_OPTIONS[0].value;\n    return FILTER_OPTIONS.find(item => item.value === dataFilter) || FILTER_OPTIONS[0];\n  }\n\n  handleFilterChange = (value: string) => {\n    const {location, zoomKeys} = this.props;\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...removeHistogramQueryStrings(location, zoomKeys),\n        dataFilter: value,\n      },\n    });\n  };\n\n  render() {\n    const childrenProps = {\n      isZoomed: this.isZoomed(),\n      handleResetView: this.handleResetView,\n      activeFilter: this.getActiveFilter(),\n      handleFilterChange: this.handleFilterChange,\n      filterOptions: FILTER_OPTIONS,\n    };\n    return this.props.children(childrenProps);\n  }\n}\n\nexport function removeHistogramQueryStrings(location: Location, zoomKeys: string[]) {\n  const query: Location['query'] = {...location.query, cursor: undefined};\n\n  delete query.dataFilter;\n  // reset all zoom parameters\n  zoomKeys.forEach(key => delete query[key]);\n\n  return query;\n}\n\nexport default Histogram;\n","import {Project} from 'sentry/types';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\nimport withProjects from 'sentry/utils/withProjects';\nimport {\n  TrendChangeType,\n  TrendFunctionField,\n  TrendsData,\n  TrendsDataEvents,\n  TrendsQuery,\n  TrendView,\n} from 'sentry/views/performance/trends/types';\nimport {\n  generateTrendFunctionAsString,\n  getCurrentTrendFunction,\n  getCurrentTrendParameter,\n} from 'sentry/views/performance/trends/utils';\n\nexport type TrendsRequest = {\n  eventView: Partial<TrendView>;\n  projects: Project[];\n  trendChangeType?: TrendChangeType;\n  trendFunctionField?: TrendFunctionField;\n};\n\ntype RequestProps = DiscoverQueryProps & TrendsRequest;\n\nexport type TrendDiscoveryChildrenProps = Omit<\n  GenericChildrenProps<TrendsData>,\n  'tableData'\n> & {\n  trendsData: TrendsData | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: TrendDiscoveryChildrenProps) => React.ReactNode;\n};\n\ntype EventChildrenProps = Omit<GenericChildrenProps<TrendsDataEvents>, 'tableData'> & {\n  trendsData: TrendsDataEvents | null;\n};\n\ntype EventProps = RequestProps & {\n  children: (props: EventChildrenProps) => React.ReactNode;\n};\n\nexport function getTrendsRequestPayload(props: RequestProps) {\n  const {eventView, projects} = props;\n  const apiPayload: TrendsQuery = eventView?.getEventsAPIPayload(props.location);\n  const trendFunction = getCurrentTrendFunction(props.location, props.trendFunctionField);\n  const trendParameter = getCurrentTrendParameter(\n    props.location,\n    projects,\n    eventView.project\n  );\n  apiPayload.trendFunction = generateTrendFunctionAsString(\n    trendFunction.field,\n    trendParameter.column\n  );\n  apiPayload.trendType = eventView?.trendType || props.trendChangeType;\n  apiPayload.interval = eventView?.interval;\n  apiPayload.middle = eventView?.middle;\n  return apiPayload;\n}\n\nfunction TrendsDiscoverQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<TrendsData, TrendsRequest>\n      {...props}\n      route=\"events-trends-stats\"\n      getRequestPayload={getTrendsRequestPayload}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({trendsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nfunction EventsDiscoverQuery(props: EventProps) {\n  return (\n    <GenericDiscoverQuery<TrendsDataEvents, TrendsRequest>\n      {...props}\n      route=\"events-trends\"\n      getRequestPayload={getTrendsRequestPayload}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({trendsData: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport const TrendsEventsDiscoverQuery = withApi(withProjects(EventsDiscoverQuery));\n\nexport default withApi(withProjects(TrendsDiscoverQuery));\n","import {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport BaseChart from 'sentry/components/charts/baseChart';\nimport {RenderProps} from 'sentry/components/charts/eventsRequest';\nimport {DateString, Organization, OrganizationSummary} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\n\nimport {PerformanceWidgetContainerTypes} from './components/performanceWidgetContainer';\nimport {ChartDefinition, PerformanceWidgetSetting} from './widgetDefinitions';\n\nexport enum VisualizationDataState {\n  ERROR = 'error',\n  LOADING = 'loading',\n  EMPTY = 'empty',\n  DATA = 'data',\n}\n\nexport enum GenericPerformanceWidgetDataType {\n  histogram = 'histogram',\n  area = 'area',\n  vitals = 'vitals',\n  line_list = 'line_list',\n  trends = 'trends',\n}\n\nexport type PerformanceWidgetProps = {\n  ContainerActions: React.FC<{isLoading: boolean}>;\n  chartDefinition: ChartDefinition;\n  chartHeight: number;\n\n  chartSetting: PerformanceWidgetSetting;\n  eventView: EventView;\n  fields: string[];\n  location: Location;\n\n  organization: Organization;\n  title: string;\n  titleTooltip: string;\n\n  chartColor?: string;\n\n  withStaticFilters?: boolean;\n};\n\nexport interface WidgetDataResult {\n  hasData: boolean;\n  isErrored: boolean;\n  isLoading: boolean;\n}\nexport interface WidgetDataConstraint {\n  [dataKey: string]: WidgetDataResult | undefined;\n}\n\nexport type QueryChildren = {\n  children: (props: any) => React.ReactNode; // TODO(k-fish): Fix any type.\n};\nexport type QueryFC<T extends WidgetDataConstraint> = React.FC<\n  QueryChildren & {\n    eventView: EventView;\n    orgSlug: string;\n    organization: OrganizationSummary;\n    widgetData: T;\n    end?: DateString;\n    environment?: Readonly<string[]>;\n    fields?: string | string[];\n    period?: string | null;\n    project?: Readonly<number[]>;\n    query?: string;\n    referrer?: string;\n    start?: DateString;\n    team?: Readonly<string | string[]>;\n    yAxis?: string | string[];\n  }\n>;\n\nexport type QueryDefinition<\n  T extends WidgetDataConstraint,\n  S extends WidgetDataResult | undefined\n> = {\n  component: QueryFC<T>;\n  fields: string | string[];\n  transform: (\n    props: GenericPerformanceWidgetProps<T>,\n    results: any,\n    queryDefinition: QueryDefinitionWithKey<T>\n  ) => S; // TODO(k-fish): Fix any type.\n  enabled?: (data: T) => boolean;\n};\nexport type Queries<T extends WidgetDataConstraint> = Record<\n  string,\n  QueryDefinition<T, T[string]>\n>;\n\ntype Visualization<T> = {\n  component: React.FC<{\n    widgetData: T;\n    grid?: React.ComponentProps<typeof BaseChart>['grid'];\n    height?: number;\n    queryFields?: string;\n  }>;\n  height: number;\n  bottomPadding?: boolean;\n  dataState?: (data: T) => VisualizationDataState;\n  fields?: string;\n  noPadding?: boolean;\n  queryFields?: string[]; // Used to determine placeholder and loading sizes. Will also be passed to the component.\n};\n\ntype Visualizations<T extends WidgetDataConstraint> = Readonly<Visualization<T>[]>; // Readonly because of index being used for React key.\n\ntype HeaderActions<T> = React.FC<{\n  widgetData: T;\n}>;\n\ntype Subtitle<T> = React.FC<{\n  widgetData: T;\n}>;\n\nexport type GenericPerformanceWidgetProps<T extends WidgetDataConstraint> = {\n  Queries: Queries<T>;\n  Visualizations: Visualizations<T>;\n\n  chartDefinition: ChartDefinition;\n  chartHeight: number;\n\n  chartSetting: PerformanceWidgetSetting;\n  containerType: PerformanceWidgetContainerTypes;\n  eventView: EventView;\n\n  fields: string[];\n  location: Location;\n  organization: Organization;\n\n  // Header;\n  title: string;\n  titleTooltip: string;\n  EmptyComponent?: React.FC<{height?: number}>;\n\n  HeaderActions?: HeaderActions<T>;\n  // Components\n  Subtitle?: Subtitle<T>;\n};\n\nexport type GenericPerformanceWithData<T extends WidgetDataConstraint> =\n  GenericPerformanceWidgetProps<T> & WidgetDataProps<T>;\n\nexport type WidgetDataProps<T> = {\n  removeWidgetDataForKey: (dataKey: string) => void;\n  setWidgetDataForKey: (dataKey: string, result?: WidgetDataResult) => void;\n  widgetData: T;\n};\n\nexport type EventsRequestChildrenProps = RenderProps;\n\nexport type QueryDefinitionWithKey<T extends WidgetDataConstraint> = QueryDefinition<\n  T,\n  T[string]\n> & {queryKey: string};\n\nexport type QueryHandlerProps<T extends WidgetDataConstraint> = {\n  api: Client;\n  eventView: EventView;\n  queries: QueryDefinitionWithKey<T>[];\n  queryProps: WidgetPropUnion<T>;\n  children?: React.ReactNode;\n} & WidgetDataProps<T>;\n\nexport type WidgetPropUnion<T extends WidgetDataConstraint> =\n  GenericPerformanceWidgetProps<T>;\n","import {objectIsEmpty} from 'sentry/utils';\nimport localStorage from 'sentry/utils/localStorage';\nimport {MetricsEnhancedSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\n\nimport {PROJECT_PERFORMANCE_TYPE} from '../../utils';\n\nimport {PerformanceWidgetSetting} from './widgetDefinitions';\n\nexport const eventsRequestQueryProps = [\n  'children',\n  'organization',\n  'yAxis',\n  'period',\n  'start',\n  'end',\n  'environment',\n  'project',\n  'referrer',\n] as const;\n\nfunction setWidgetStorageObject(localObject: Record<string, string>) {\n  localStorage.setItem(getContainerLocalStorageObjectKey, JSON.stringify(localObject));\n}\n\nexport function getMEPQueryParams(mepContext: MetricsEnhancedSettingContext) {\n  let queryParams = {};\n  const base = {preventMetricAggregates: '1'};\n  if (mepContext.shouldQueryProvideMEPParams) {\n    queryParams = {\n      ...queryParams,\n      ...base,\n      metricsEnhanced: '1',\n      dataset: 'metricsEnhanced',\n    };\n  }\n  if (mepContext.shouldQueryProvideMEPTransactionParams) {\n    queryParams = {...queryParams, ...base, dataset: 'discover'};\n  }\n  if (mepContext.shouldQueryProvideMEPMetricParams) {\n    queryParams = {...queryParams, ...base, dataset: 'metrics'};\n  }\n\n  // Disallow any performance request from using aggregates since they aren't currently possible in all visualizations and we don't want to mix modes.\n  return objectIsEmpty(queryParams) ? undefined : queryParams;\n}\n\nexport const WIDGET_MAP_DENY_LIST = [\n  PerformanceWidgetSetting.MOST_RELATED_ERRORS,\n  PerformanceWidgetSetting.MOST_RELATED_ISSUES,\n];\n\n/**\n * Some widgets, such as Related Issues, are inherently not possible w/ metrics at the moment since they use event.type:error under the hood.\n */\nexport function getMEPParamsIfApplicable(\n  mepContext: MetricsEnhancedSettingContext,\n  widget: PerformanceWidgetSetting\n) {\n  if (WIDGET_MAP_DENY_LIST.includes(widget)) {\n    return undefined;\n  }\n  return getMEPQueryParams(mepContext);\n}\n\nconst getContainerLocalStorageObjectKey = 'landing-chart-container';\nconst getContainerKey = (\n  index: number,\n  performanceType: PROJECT_PERFORMANCE_TYPE,\n  height: number\n) => `landing-chart-container#${performanceType}#${height}#${index}`;\n\nfunction getWidgetStorageObject() {\n  const localObject = JSON.parse(\n    localStorage.getItem(getContainerLocalStorageObjectKey) || '{}'\n  );\n  return localObject;\n}\n\nexport const getChartSetting = (\n  index: number,\n  height: number,\n  performanceType: PROJECT_PERFORMANCE_TYPE,\n  defaultType: PerformanceWidgetSetting,\n  forceDefaultChartSetting?: boolean // Used for testing.\n): PerformanceWidgetSetting => {\n  if (forceDefaultChartSetting) {\n    return defaultType;\n  }\n  const key = getContainerKey(index, performanceType, height);\n  const localObject = getWidgetStorageObject();\n  const value = localObject?.[key];\n\n  if (\n    value &&\n    Object.values(PerformanceWidgetSetting).includes(value as PerformanceWidgetSetting)\n  ) {\n    const _value: PerformanceWidgetSetting = value as PerformanceWidgetSetting;\n    return _value;\n  }\n  return defaultType;\n};\nexport const _setChartSetting = (\n  index: number,\n  height: number,\n  performanceType: PROJECT_PERFORMANCE_TYPE,\n  setting: PerformanceWidgetSetting\n) => {\n  const key = getContainerKey(index, performanceType, height);\n  const localObject = getWidgetStorageObject();\n  localObject[key] = setting;\n\n  setWidgetStorageObject(localObject);\n};\n","import CHART_PALETTE from 'sentry/constants/chartPalette';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\n\nimport {getTermHelp, PERFORMANCE_TERM} from '../../data';\n\nimport {GenericPerformanceWidgetDataType} from './types';\n\nexport interface ChartDefinition {\n  dataType: GenericPerformanceWidgetDataType;\n  fields: string[];\n\n  title: string;\n  titleTooltip: string; // The first field in the list will be treated as the primary field in most widgets (except for special casing).\n\n  chartColor?: string; // Optional. Will default to colors depending on placement in list or colors from the chart itself.\n\n  vitalStops?: {\n    meh: number;\n    poor: number;\n  };\n}\n\nexport enum PerformanceWidgetSetting {\n  DURATION_HISTOGRAM = 'duration_histogram',\n  LCP_HISTOGRAM = 'lcp_histogram',\n  FCP_HISTOGRAM = 'fcp_histogram',\n  FID_HISTOGRAM = 'fid_histogram',\n  APDEX_AREA = 'apdex_area',\n  P50_DURATION_AREA = 'p50_duration_area',\n  P75_DURATION_AREA = 'p75_duration_area',\n  P95_DURATION_AREA = 'p95_duration_area',\n  P99_DURATION_AREA = 'p99_duration_area',\n  P75_LCP_AREA = 'p75_lcp_area',\n  TPM_AREA = 'tpm_area',\n  FAILURE_RATE_AREA = 'failure_rate_area',\n  USER_MISERY_AREA = 'user_misery_area',\n  WORST_LCP_VITALS = 'worst_lcp_vitals',\n  WORST_FCP_VITALS = 'worst_fcp_vitals',\n  WORST_CLS_VITALS = 'worst_cls_vitals',\n  WORST_FID_VITALS = 'worst_fid_vitals',\n  MOST_IMPROVED = 'most_improved',\n  MOST_REGRESSED = 'most_regressed',\n  MOST_RELATED_ERRORS = 'most_related_errors',\n  MOST_RELATED_ISSUES = 'most_related_issues',\n  SLOW_HTTP_OPS = 'slow_http_ops',\n  SLOW_DB_OPS = 'slow_db_ops',\n  SLOW_RESOURCE_OPS = 'slow_resource_ops',\n  SLOW_BROWSER_OPS = 'slow_browser_ops',\n  COLD_STARTUP_AREA = 'cold_startup_area',\n  WARM_STARTUP_AREA = 'warm_startup_area',\n  SLOW_FRAMES_AREA = 'slow_frames_area',\n  FROZEN_FRAMES_AREA = 'frozen_frames_area',\n  MOST_SLOW_FRAMES = 'most_slow_frames',\n  MOST_FROZEN_FRAMES = 'most_frozen_frames',\n}\n\nconst WIDGET_PALETTE = CHART_PALETTE[5];\nexport const WIDGET_DEFINITIONS: ({\n  organization,\n}: {\n  organization: Organization;\n}) => Record<PerformanceWidgetSetting, ChartDefinition> = ({\n  organization,\n}: {\n  organization: Organization;\n}) => ({\n  [PerformanceWidgetSetting.DURATION_HISTOGRAM]: {\n    title: t('Duration Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['transaction.duration'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.LCP_HISTOGRAM]: {\n    title: t('LCP Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['measurements.lcp'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.FCP_HISTOGRAM]: {\n    title: t('FCP Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['measurements.fcp'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.FID_HISTOGRAM]: {\n    title: t('FID Distribution'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.DURATION_DISTRIBUTION),\n    fields: ['measurements.fid'],\n    dataType: GenericPerformanceWidgetDataType.histogram,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.WORST_LCP_VITALS]: {\n    title: t('Worst LCP Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.LCP),\n    fields: ['measurements.lcp'],\n    vitalStops: {\n      poor: 4000,\n      meh: 2500,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.WORST_FCP_VITALS]: {\n    title: t('Worst FCP Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FCP),\n    fields: ['measurements.fcp'],\n    vitalStops: {\n      poor: 3000,\n      meh: 1000,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.WORST_FID_VITALS]: {\n    title: t('Worst FID Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FID),\n    fields: ['measurements.fid'],\n    vitalStops: {\n      poor: 300,\n      meh: 100,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.WORST_CLS_VITALS]: {\n    title: t('Worst CLS Web Vitals'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.CLS),\n    fields: ['measurements.cls'],\n    vitalStops: {\n      poor: 0.25,\n      meh: 0.1,\n    },\n    dataType: GenericPerformanceWidgetDataType.vitals,\n  },\n  [PerformanceWidgetSetting.TPM_AREA]: {\n    title: t('Transactions Per Minute'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.TPM),\n    fields: ['tpm()'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[1],\n  },\n  [PerformanceWidgetSetting.APDEX_AREA]: {\n    title: t('Apdex'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.APDEX),\n    fields: ['apdex()'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[4],\n  },\n  [PerformanceWidgetSetting.P50_DURATION_AREA]: {\n    title: t('p50 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P50),\n    fields: ['p50(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P75_DURATION_AREA]: {\n    title: t('p75 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n    fields: ['p75(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P95_DURATION_AREA]: {\n    title: t('p95 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P95),\n    fields: ['p95(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P99_DURATION_AREA]: {\n    title: t('p99 Duration'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P99),\n    fields: ['p99(transaction.duration)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.P75_LCP_AREA]: {\n    title: t('p75 LCP'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.P75),\n    fields: ['p75(measurements.lcp)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[1],\n  },\n  [PerformanceWidgetSetting.FAILURE_RATE_AREA]: {\n    title: t('Failure Rate'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE),\n    fields: ['failure_rate()'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[2],\n  },\n  [PerformanceWidgetSetting.USER_MISERY_AREA]: {\n    title: t('User Misery'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.USER_MISERY),\n    fields: [`user_misery()`],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.COLD_STARTUP_AREA]: {\n    title: t('Cold Startup Time'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_COLD),\n    fields: ['p75(measurements.app_start_cold)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[4],\n  },\n  [PerformanceWidgetSetting.WARM_STARTUP_AREA]: {\n    title: t('Warm Startup Time'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.APP_START_WARM),\n    fields: ['p75(measurements.app_start_warm)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[3],\n  },\n  [PerformanceWidgetSetting.SLOW_FRAMES_AREA]: {\n    title: t('Slow Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_FRAMES),\n    fields: ['p75(measurements.frames_slow_rate)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.FROZEN_FRAMES_AREA]: {\n    title: t('Frozen Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FROZEN_FRAMES),\n    fields: ['p75(measurements.frames_frozen_rate)'],\n    dataType: GenericPerformanceWidgetDataType.area,\n    chartColor: WIDGET_PALETTE[5],\n  },\n  [PerformanceWidgetSetting.MOST_RELATED_ERRORS]: {\n    title: t('Most Related Errors'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.MOST_ERRORS),\n    fields: [`failure_count()`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_RELATED_ISSUES]: {\n    title: t('Most Related Issues'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.MOST_ISSUES),\n    fields: [`count()`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_HTTP_OPS]: {\n    title: t('Slow HTTP Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.http)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_BROWSER_OPS]: {\n    title: t('Slow Browser Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.browser)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_RESOURCE_OPS]: {\n    title: t('Slow Resource Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.resource)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.SLOW_DB_OPS]: {\n    title: t('Slow DB Ops'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_HTTP_SPANS),\n    fields: [`p75(spans.db)`],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_SLOW_FRAMES]: {\n    title: t('Most Slow Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.SLOW_FRAMES),\n    fields: ['avg(measurements.frames_slow)'],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_FROZEN_FRAMES]: {\n    title: t('Most Frozen Frames'),\n    titleTooltip: getTermHelp(organization, PERFORMANCE_TERM.FROZEN_FRAMES),\n    fields: ['avg(measurements.frames_frozen)'],\n    dataType: GenericPerformanceWidgetDataType.line_list,\n    chartColor: WIDGET_PALETTE[0],\n  },\n  [PerformanceWidgetSetting.MOST_IMPROVED]: {\n    title: t('Most Improved'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'improved'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.trends,\n  },\n  [PerformanceWidgetSetting.MOST_REGRESSED]: {\n    title: t('Most Regressed'),\n    titleTooltip: t(\n      'This compares the baseline (%s) of the past with the present.',\n      'regressed'\n    ),\n    fields: [],\n    dataType: GenericPerformanceWidgetDataType.trends,\n  },\n});\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nexport const GridCell = styled('div')`\n  font-size: 14px;\n`;\n\nexport const GridCellNumber = styled(GridCell)`\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n  flex-grow: 1;\n`;\n\nexport const DoubleHeaderContainer = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  padding: ${space(2)} ${space(3)} ${space(1)} ${space(3)};\n  gap: ${space(3)};\n`;\n\nexport const ErrorPanel = styled('div')`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  flex: 1;\n  flex-shrink: 0;\n  overflow: hidden;\n  height: 200px;\n  position: relative;\n  border-color: transparent;\n  margin-bottom: 0;\n`;\n","import {Location} from 'history';\n\nimport OptionSelector from 'sentry/components/charts/optionSelector';\nimport {t} from 'sentry/locale';\nimport Histogram from 'sentry/utils/performance/histogram';\n\nimport {ZOOM_END, ZOOM_START} from './utils';\n\ntype Props = {\n  location: Location;\n};\n\nfunction ChartControls({location}: Props) {\n  return (\n    <Histogram location={location} zoomKeys={[ZOOM_START, ZOOM_END]}>\n      {({filterOptions, handleFilterChange, activeFilter}) => {\n        return (\n          <OptionSelector\n            title={t('Outliers')}\n            selected={activeFilter.value}\n            options={filterOptions}\n            onChange={handleFilterChange}\n          />\n        );\n      }}\n    </Histogram>\n  );\n}\n\nexport default ChartControls;\n","import {InjectedRouter} from 'react-router';\nimport {Query} from 'history';\n\nimport {AreaChart} from 'sentry/components/charts/areaChart';\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = {\n  errored: boolean;\n  loading: boolean;\n  queryExtra: Query;\n  reloading: boolean;\n  router: InjectedRouter;\n  theme: Theme;\n  series?: Series[];\n  timeFrame?: {\n    end: number;\n    start: number;\n  };\n} & Omit<React.ComponentProps<typeof ReleaseSeries>, 'children' | 'queryExtra'> &\n  Pick<LineChartProps, 'onLegendSelectChanged' | 'legend'>;\n\nfunction Content({\n  errored,\n  theme,\n  series: data,\n  timeFrame,\n  start,\n  end,\n  period,\n  projects,\n  environments,\n  loading,\n  reloading,\n  legend,\n  utc,\n  queryExtra,\n  router,\n  onLegendSelectChanged,\n}: Props) {\n  if (errored) {\n    return (\n      <ErrorPanel>\n        <IconWarning color=\"gray500\" size=\"lg\" />\n      </ErrorPanel>\n    );\n  }\n\n  const chartOptions = {\n    grid: {\n      left: '10px',\n      right: '10px',\n      top: '40px',\n      bottom: '0px',\n    },\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis' as const,\n      valueFormatter: tooltipFormatter,\n    },\n    xAxis: timeFrame\n      ? {\n          min: timeFrame.start,\n          max: timeFrame.end,\n        }\n      : undefined,\n    yAxis: {\n      axisLabel: {\n        color: theme.chartLabel,\n        // p50() coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, 'p50()'),\n      },\n    },\n  };\n\n  const colors = (data && theme.charts.getColorPalette(data.length - 2)) || [];\n\n  // Create a list of series based on the order of the fields,\n  // We need to flip it at the end to ensure the series stack right.\n  const series = data\n    ? data\n        .map((values, i: number) => {\n          return {\n            ...values,\n            color: colors[i],\n            lineStyle: {\n              opacity: 0,\n            },\n          };\n        })\n        .reverse()\n    : [];\n\n  return (\n    <ChartZoom router={router} period={period} start={start} end={end} utc={utc}>\n      {zoomRenderProps => (\n        <ReleaseSeries\n          start={start}\n          end={end}\n          queryExtra={queryExtra}\n          period={period}\n          utc={utc}\n          projects={projects}\n          environments={environments}\n        >\n          {({releaseSeries}) => (\n            <TransitionChart loading={loading} reloading={reloading}>\n              <TransparentLoadingMask visible={reloading} />\n              {getDynamicText({\n                value: (\n                  <AreaChart\n                    {...zoomRenderProps}\n                    {...chartOptions}\n                    legend={legend}\n                    onLegendSelectChanged={onLegendSelectChanged}\n                    series={[...series, ...releaseSeries]}\n                  />\n                ),\n                fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n              })}\n            </TransitionChart>\n          )}\n        </ReleaseSeries>\n      )}\n    </ChartZoom>\n  );\n}\n\nexport default Content;\n","import {Fragment} from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport {Location, Query} from 'history';\n\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport {getInterval, getSeriesSelection} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t, tct} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {useMEPSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport {getMEPQueryParams} from 'sentry/views/performance/landing/widgets/utils';\n\nimport {ViewProps} from '../../../types';\nimport {\n  SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD,\n  SpanOperationBreakdownFilter,\n} from '../../filter';\n\nimport Content from './content';\n\ntype Props = WithRouterProps &\n  ViewProps & {\n    currentFilter: SpanOperationBreakdownFilter;\n    location: Location;\n    organization: OrganizationSummary;\n    queryExtra: Query;\n    withoutZerofill: boolean;\n  };\n\nenum DurationFunctionField {\n  P50 = 'p50',\n  P75 = 'p75',\n  P95 = 'p95',\n  P99 = 'p99',\n  p100 = 'p100',\n}\n\n/**\n * Fetch and render a stacked area chart that shows duration percentiles over\n * the past 7 days\n */\nfunction DurationChart({\n  project,\n  environment,\n  location,\n  organization,\n  query,\n  statsPeriod,\n  router,\n  queryExtra,\n  currentFilter,\n  withoutZerofill,\n  start: propsStart,\n  end: propsEnd,\n}: Props) {\n  const api = useApi();\n  const theme = useTheme();\n  const mepContext = useMEPSettingContext();\n\n  function handleLegendSelectChanged(legendChange: {\n    name: string;\n    selected: Record<string, boolean>;\n    type: string;\n  }) {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        unselectedSeries: unselected,\n      },\n    };\n\n    browserHistory.push(to);\n  }\n\n  const start = propsStart ? getUtcToLocalDateObject(propsStart) : null;\n  const end = propsEnd ? getUtcToLocalDateObject(propsEnd) : null;\n  const utc = normalizeDateTimeParams(location.query).utc === 'true';\n  const period = statsPeriod;\n\n  const legend = {right: 10, top: 5, selected: getSeriesSelection(location)};\n  const datetimeSelection = {start, end, period};\n\n  const contentCommonProps = {\n    theme,\n    router,\n    start,\n    end,\n    utc,\n    legend,\n    queryExtra,\n    period,\n    projects: project,\n    environments: environment,\n    onLegendSelectChanged: handleLegendSelectChanged,\n  };\n\n  const requestCommonProps = {\n    api,\n    start,\n    end,\n    project,\n    environment,\n    query,\n    period,\n    interval: getInterval(datetimeSelection, 'high'),\n  };\n\n  const parameter = SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD[currentFilter] ?? '';\n\n  const header = (\n    <HeaderTitleLegend>\n      {currentFilter === SpanOperationBreakdownFilter.None\n        ? t('Duration Breakdown')\n        : tct('Span Operation Breakdown - [operationName]', {\n            operationName: currentFilter,\n          })}\n      <QuestionTooltip\n        size=\"sm\"\n        position=\"top\"\n        title={t(\n          `Duration Breakdown reflects transaction durations by percentile over time.`\n        )}\n      />\n    </HeaderTitleLegend>\n  );\n\n  const yAxis = Object.values(DurationFunctionField).map(v => `${v}(${parameter})`);\n\n  return (\n    <Fragment>\n      {header}\n      <EventsRequest\n        {...requestCommonProps}\n        organization={organization}\n        showLoading={false}\n        includePrevious={false}\n        yAxis={yAxis}\n        partial\n        withoutZerofill={withoutZerofill}\n        referrer=\"api.performance.transaction-summary.duration-chart\"\n        queryExtras={getMEPQueryParams(mepContext)}\n        userModified={decodeScalar(location.query.userModified)}\n      >\n        {({results, errored, loading, reloading, timeframe: timeFrame}) => (\n          <Content\n            series={results}\n            errored={errored}\n            loading={loading}\n            reloading={reloading}\n            timeFrame={timeFrame}\n            {...contentCommonProps}\n          />\n        )}\n      </EventsRequest>\n    </Fragment>\n  );\n}\n\nexport default withRouter(DurationChart);\n","import {useTheme} from '@emotion/react';\n\nimport {AreaChart} from 'sentry/components/charts/areaChart';\nimport {axisLabelFormatter} from 'sentry/utils/discover/charts';\nimport {getDuration} from 'sentry/utils/formatters';\n\ntype Props = React.ComponentPropsWithoutRef<typeof AreaChart>;\n\nfunction Chart(props: Props) {\n  const theme = useTheme();\n\n  return (\n    <AreaChart\n      grid={{left: '10px', right: '10px', top: '40px', bottom: '0px'}}\n      xAxis={{\n        type: 'category' as const,\n        truncate: true,\n        axisLabel: {\n          showMinLabel: true,\n          showMaxLabel: true,\n        },\n        axisTick: {\n          interval: 0,\n          alignWithLabel: true,\n        },\n      }}\n      yAxis={{\n        type: 'value' as const,\n        axisLabel: {\n          color: theme.chartLabel,\n          // Use p50() to force time formatting.\n          formatter: (value: number) => axisLabelFormatter(value, 'p50()'),\n        },\n      }}\n      tooltip={{valueFormatter: value => getDuration(value / 1000, 2)}}\n      {...props}\n    />\n  );\n}\n\nexport default Chart;\n","import {t} from 'sentry/locale';\n\nconst AGGREGATE_ALIAS_VALUE_EXTRACT_PATTERN = /(\\d+)$/;\nconst FUNCTION_FIELD_VALUE_EXTRACT_PATTERN = /(\\d+)\\)$/;\n\n/**\n * Convert a discover response into a barchart compatible series\n */\nexport function transformData(\n  data: Record<string, number>[],\n  useAggregateAlias: boolean = true\n) {\n  const extractedData = Object.keys(data[0])\n    .map((key: string) => {\n      const nameMatch = (\n        useAggregateAlias\n          ? AGGREGATE_ALIAS_VALUE_EXTRACT_PATTERN\n          : FUNCTION_FIELD_VALUE_EXTRACT_PATTERN\n      ).exec(key);\n      if (!nameMatch) {\n        return [-1, -1];\n      }\n      let nameValue = Number(nameMatch[1]);\n      if (nameValue > 100) {\n        nameValue /= 10;\n      }\n      return [nameValue, data[0][key]];\n    })\n    .filter(i => i[0] > 0);\n\n  extractedData.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    }\n    if (a[0] < b[0]) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return [\n    {\n      seriesName: t('Duration'),\n      data: extractedData.map(i => ({value: i[1], name: `${i[0].toLocaleString()}%`})),\n    },\n  ];\n}\n","import {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {IconWarning} from 'sentry/icons';\nimport {OrganizationSummary} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {Theme} from 'sentry/utils/theme';\n\nimport {ViewProps} from '../../../types';\nimport {QUERY_KEYS} from '../../../utils';\nimport {filterToColor, SpanOperationBreakdownFilter} from '../../filter';\n\nimport Chart from './chart';\nimport {transformData} from './utils';\n\ntype ApiResult = Record<string, number>;\n\ntype Props = AsyncComponent['props'] &\n  ViewProps & {\n    currentFilter: SpanOperationBreakdownFilter;\n    fields: string[];\n    location: Location;\n    organization: OrganizationSummary;\n  };\n\ntype State = AsyncComponent['state'] & {\n  chartData: {data: ApiResult[]} | null;\n};\n\n/**\n * Fetch and render a bar chart that shows event volume\n * for each duration bucket. We always render 15 buckets of\n * equal widths based on the endpoints min + max durations.\n *\n * This graph visualizes how many transactions were recorded\n * at each duration bucket, showing the modality of the transaction.\n */\nclass Content extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {\n      organization,\n      query,\n      start,\n      end,\n      statsPeriod,\n      environment,\n      project,\n      fields,\n      location,\n    } = this.props;\n\n    const eventView = EventView.fromSavedQuery({\n      id: '',\n      name: '',\n      version: 2,\n      fields,\n      orderby: '',\n      projects: project,\n      range: statsPeriod,\n      query,\n      environment,\n      start,\n      end,\n    });\n    const apiPayload = eventView.getEventsAPIPayload(location);\n    apiPayload.referrer = 'api.performance.durationpercentilechart';\n    const endpoint = organization.features.includes(\n      'performance-frontend-use-events-endpoint'\n    )\n      ? `/organizations/${organization.slug}/events/`\n      : `/organizations/${organization.slug}/eventsv2/`;\n\n    return [['chartData', endpoint, {query: apiPayload}]];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.shouldRefetchData(prevProps)) {\n      this.fetchData();\n    }\n  }\n\n  shouldRefetchData(prevProps: Props) {\n    if (this.state.loading) {\n      return false;\n    }\n    return !isEqual(pick(prevProps, QUERY_KEYS), pick(this.props, QUERY_KEYS));\n  }\n\n  renderLoading() {\n    return <LoadingPanel data-test-id=\"histogram-loading\" />;\n  }\n\n  renderError() {\n    // Don't call super as we don't really need issues for this.\n    return (\n      <ErrorPanel>\n        <IconWarning color=\"gray300\" size=\"lg\" />\n      </ErrorPanel>\n    );\n  }\n\n  renderBody() {\n    const {currentFilter, organization} = this.props;\n    const {chartData} = this.state;\n\n    if (!defined(chartData)) {\n      return null;\n    }\n\n    const colors = (theme: Theme) =>\n      currentFilter === SpanOperationBreakdownFilter.None\n        ? theme.charts.getColorPalette(1)\n        : [filterToColor(currentFilter)];\n\n    return (\n      <Chart\n        series={transformData(\n          chartData.data,\n          !organization.features.includes('performance-frontend-use-events-endpoint')\n        )}\n        colors={colors}\n      />\n    );\n  }\n}\n\nexport default Content;\n","import {Fragment} from 'react';\nimport {Location} from 'history';\n\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t, tct} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\n\nimport {ViewProps} from '../../../types';\nimport {filterToField, SpanOperationBreakdownFilter} from '../../filter';\n\nimport Content from './content';\n\ntype Props = ViewProps & {\n  currentFilter: SpanOperationBreakdownFilter;\n  location: Location;\n  organization: OrganizationSummary;\n};\n\nfunction DurationPercentileChart({currentFilter, ...props}: Props) {\n  const header = (\n    <HeaderTitleLegend>\n      {currentFilter === SpanOperationBreakdownFilter.None\n        ? t('Duration Percentiles')\n        : tct('Span Operation Percentiles - [operationName]', {\n            operationName: currentFilter,\n          })}\n      <QuestionTooltip\n        position=\"top\"\n        size=\"sm\"\n        title={t(\n          `Compare the duration at each percentile. Compare with Latency Histogram to see transaction volume at duration intervals.`\n        )}\n      />\n    </HeaderTitleLegend>\n  );\n\n  function generateFields() {\n    if (currentFilter === SpanOperationBreakdownFilter.None) {\n      return [\n        'percentile(transaction.duration, 0.10)',\n        'percentile(transaction.duration, 0.25)',\n        'percentile(transaction.duration, 0.50)',\n        'percentile(transaction.duration, 0.75)',\n        'percentile(transaction.duration, 0.90)',\n        'percentile(transaction.duration, 0.95)',\n        'percentile(transaction.duration, 0.99)',\n        'percentile(transaction.duration, 0.995)',\n        'percentile(transaction.duration, 0.999)',\n        'p100()',\n      ];\n    }\n\n    const field = filterToField(currentFilter);\n\n    return [\n      `percentile(${field}, 0.10)`,\n      `percentile(${field}, 0.25)`,\n      `percentile(${field}, 0.50)`,\n      `percentile(${field}, 0.75)`,\n      `percentile(${field}, 0.90)`,\n      `percentile(${field}, 0.95)`,\n      `percentile(${field}, 0.99)`,\n      `percentile(${field}, 0.995)`,\n      `percentile(${field}, 0.999)`,\n      `p100(${field})`,\n    ];\n  }\n\n  const fields = generateFields();\n\n  return (\n    <Fragment>\n      {header}\n      <Content {...props} currentFilter={currentFilter} fields={fields} />\n    </Fragment>\n  );\n}\n\nexport default DurationPercentileChart;\n","import {useState} from 'react';\nimport {Location} from 'history';\n\nimport {BarChart} from 'sentry/components/charts/barChart';\nimport BarChartZoom from 'sentry/components/charts/barChartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport Histogram from 'sentry/utils/performance/histogram';\nimport HistogramQuery from 'sentry/utils/performance/histogram/histogramQuery';\nimport {HistogramData} from 'sentry/utils/performance/histogram/types';\nimport {\n  computeBuckets,\n  formatHistogramData,\n} from 'sentry/utils/performance/histogram/utils';\nimport theme from 'sentry/utils/theme';\n\nimport {ViewProps} from '../../../types';\nimport {filterToColor, filterToField, SpanOperationBreakdownFilter} from '../../filter';\n\nimport {decodeHistogramZoom, ZOOM_END, ZOOM_START} from './utils';\n\nconst NUM_BUCKETS = 50;\n\ntype Props = ViewProps & {\n  currentFilter: SpanOperationBreakdownFilter;\n  location: Location;\n  organization: OrganizationSummary;\n};\n\n/**\n * Fetch and render a bar chart that shows event volume\n * for each duration bucket. We always render 50 buckets of\n * equal widths based on the endpoints min + max durations.\n *\n * This graph visualizes how many transactions were recorded\n * at each duration bucket, showing the modality of the transaction.\n */\nfunction Content({\n  organization,\n  query,\n  start,\n  end,\n  statsPeriod,\n  environment,\n  project,\n  location,\n  currentFilter,\n}: Props) {\n  const [zoomError, setZoomError] = useState(false);\n\n  function handleMouseOver() {\n    // Hide the zoom error tooltip on the next hover.\n    if (zoomError) {\n      setZoomError(false);\n    }\n  }\n\n  function renderChart(data: HistogramData) {\n    const xAxis = {\n      type: 'category' as const,\n      truncate: true,\n      axisTick: {\n        interval: 0,\n        alignWithLabel: true,\n      },\n    };\n\n    const colors =\n      currentFilter === SpanOperationBreakdownFilter.None\n        ? [...theme.charts.getColorPalette(1)]\n        : [filterToColor(currentFilter)];\n\n    // Use a custom tooltip formatter as we need to replace\n    // the tooltip content entirely when zooming is no longer available.\n    const tooltip = {\n      formatter(series) {\n        const seriesData = Array.isArray(series) ? series : [series];\n        let contents: string[] = [];\n        if (!zoomError) {\n          // Replicate the necessary logic from sentry/components/charts/components/tooltip.jsx\n          contents = seriesData.map(item => {\n            const label = item.seriesName;\n            const value = item.value[1].toLocaleString();\n            return [\n              '<div class=\"tooltip-series\">',\n              `<div><span class=\"tooltip-label\">${item.marker} <strong>${label}</strong></span> ${value}</div>`,\n              '</div>',\n            ].join('');\n          });\n          const seriesLabel = seriesData[0].value[0];\n          contents.push(`<div class=\"tooltip-date\">${seriesLabel}</div>`);\n        } else {\n          contents = [\n            '<div class=\"tooltip-series tooltip-series-solo\">',\n            t('Target zoom region too small'),\n            '</div>',\n          ];\n        }\n        contents.push('<div class=\"tooltip-arrow\"></div>');\n        return contents.join('');\n      },\n    };\n\n    const series = {\n      seriesName: t('Count'),\n      data: formatHistogramData(data, {type: 'duration'}),\n    };\n\n    return (\n      <BarChartZoom\n        minZoomWidth={NUM_BUCKETS}\n        location={location}\n        paramStart={ZOOM_START}\n        paramEnd={ZOOM_END}\n        xAxisIndex={[0]}\n        buckets={computeBuckets(data)}\n        onDataZoomCancelled={() => setZoomError(true)}\n      >\n        {zoomRenderProps => (\n          <BarChart\n            grid={{left: '10px', right: '10px', top: '40px', bottom: '0px'}}\n            xAxis={xAxis}\n            yAxis={{type: 'value'}}\n            series={[series]}\n            tooltip={tooltip}\n            colors={colors}\n            onMouseOver={handleMouseOver}\n            {...zoomRenderProps}\n          />\n        )}\n      </BarChartZoom>\n    );\n  }\n\n  const eventView = EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: '',\n      fields: ['transaction.duration'],\n      projects: project,\n      range: statsPeriod,\n      query,\n      environment,\n      start,\n      end,\n    },\n    location\n  );\n\n  const {min, max} = decodeHistogramZoom(location);\n\n  const field = filterToField(currentFilter) ?? 'transaction.duration';\n\n  return (\n    <Histogram location={location} zoomKeys={[ZOOM_START, ZOOM_END]}>\n      {({activeFilter}) => (\n        <HistogramQuery\n          location={location}\n          orgSlug={organization.slug}\n          eventView={eventView}\n          numBuckets={NUM_BUCKETS}\n          fields={[field]}\n          min={min}\n          max={max}\n          dataFilter={activeFilter.value}\n        >\n          {({histograms, isLoading, error}) => {\n            if (isLoading) {\n              return <LoadingPanel data-test-id=\"histogram-loading\" />;\n            }\n\n            if (error) {\n              return (\n                <ErrorPanel>\n                  <IconWarning color=\"gray300\" size=\"lg\" />\n                </ErrorPanel>\n              );\n            }\n\n            return renderChart(histograms?.[field] ?? []);\n          }}\n        </HistogramQuery>\n      )}\n    </Histogram>\n  );\n}\n\nexport default Content;\n","import {Fragment} from 'react';\nimport {Location} from 'history';\n\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t, tct} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\n\nimport {ViewProps} from '../../../types';\nimport {SpanOperationBreakdownFilter} from '../../filter';\n\nimport Content from './content';\n\ntype Props = ViewProps & {\n  currentFilter: SpanOperationBreakdownFilter;\n  location: Location;\n  organization: OrganizationSummary;\n};\n\nfunction LatencyChart({currentFilter, ...props}: Props) {\n  const header = (\n    <HeaderTitleLegend>\n      {currentFilter === SpanOperationBreakdownFilter.None\n        ? t('Duration Distribution')\n        : tct('Span Operation Distribution - [operationName]', {\n            operationName: currentFilter,\n          })}\n      <QuestionTooltip\n        position=\"top\"\n        size=\"sm\"\n        title={t(\n          `Duration Distribution reflects the volume of transactions per median duration.`\n        )}\n      />\n    </HeaderTitleLegend>\n  );\n\n  return (\n    <Fragment>\n      {header}\n      <Content {...props} currentFilter={currentFilter} />\n    </Fragment>\n  );\n}\n\nexport default LatencyChart;\n","import {InjectedRouter} from 'react-router';\nimport {Query} from 'history';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Theme} from 'sentry/utils/theme';\n\nimport {transformEventStatsSmoothed} from '../../../trends/utils';\n\ntype Props = {\n  errored: boolean;\n  loading: boolean;\n  queryExtra: Query;\n  reloading: boolean;\n  router: InjectedRouter;\n  theme: Theme;\n  series?: Series[];\n  timeFrame?: {\n    end: number;\n    start: number;\n  };\n} & Omit<React.ComponentProps<typeof ReleaseSeries>, 'children' | 'queryExtra'> &\n  Pick<LineChartProps, 'onLegendSelectChanged' | 'legend'>;\n\nfunction Content({\n  errored,\n  theme,\n  series: data,\n  timeFrame,\n  start,\n  end,\n  period,\n  projects,\n  environments,\n  loading,\n  reloading,\n  legend,\n  utc,\n  queryExtra,\n  router,\n  onLegendSelectChanged,\n}: Props) {\n  if (errored) {\n    return (\n      <ErrorPanel>\n        <IconWarning color=\"gray500\" size=\"lg\" />\n      </ErrorPanel>\n    );\n  }\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    grid: {\n      left: '10px',\n      right: '10px',\n      top: '40px',\n      bottom: '0px',\n    },\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis',\n      valueFormatter: (value: number | null) => tooltipFormatter(value, 'p50()'),\n    },\n    xAxis: timeFrame\n      ? {\n          min: timeFrame.start,\n          max: timeFrame.end,\n        }\n      : undefined,\n    yAxis: {\n      min: 0,\n      axisLabel: {\n        color: theme.chartLabel,\n        // p50() coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, 'p50()'),\n      },\n    },\n  };\n\n  const series = data\n    ? data\n        .map(values => {\n          return {\n            ...values,\n            color: theme.purple300,\n            lineStyle: {\n              opacity: 0.75,\n              width: 1,\n            },\n          };\n        })\n        .reverse()\n    : [];\n\n  const {smoothedResults} = transformEventStatsSmoothed(data, t('Smoothed'));\n\n  const smoothedSeries = smoothedResults\n    ? smoothedResults.map(values => {\n        return {\n          ...values,\n          color: theme.purple300,\n          lineStyle: {\n            opacity: 1,\n          },\n        };\n      })\n    : [];\n\n  return (\n    <ChartZoom router={router} period={period} start={start} end={end} utc={utc}>\n      {zoomRenderProps => (\n        <ReleaseSeries\n          start={start}\n          end={end}\n          queryExtra={queryExtra}\n          period={period}\n          utc={utc}\n          projects={projects}\n          environments={environments}\n        >\n          {({releaseSeries}) => (\n            <TransitionChart loading={loading} reloading={reloading}>\n              <TransparentLoadingMask visible={reloading} />\n              {getDynamicText({\n                value: (\n                  <LineChart\n                    {...zoomRenderProps}\n                    {...chartOptions}\n                    legend={legend}\n                    onLegendSelectChanged={onLegendSelectChanged}\n                    series={[...series, ...smoothedSeries, ...releaseSeries]}\n                  />\n                ),\n                fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n              })}\n            </TransitionChart>\n          )}\n        </ReleaseSeries>\n      )}\n    </ChartZoom>\n  );\n}\n\nexport default Content;\n","import {Fragment} from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport {Location, Query} from 'history';\n\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport {getInterval, getSeriesSelection} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\n\nimport {TrendFunctionField} from '../../../trends/types';\nimport {generateTrendFunctionAsString} from '../../../trends/utils';\nimport {ViewProps} from '../../../types';\n\nimport Content from './content';\n\ntype Props = WithRouterProps &\n  ViewProps & {\n    location: Location;\n    organization: OrganizationSummary;\n    queryExtra: Query;\n    trendFunction: TrendFunctionField;\n    trendParameter: string;\n    withoutZerofill: boolean;\n  };\n\nfunction TrendChart({\n  project,\n  environment,\n  location,\n  organization,\n  query,\n  statsPeriod,\n  router,\n  trendFunction,\n  trendParameter,\n  queryExtra,\n  withoutZerofill,\n  start: propsStart,\n  end: propsEnd,\n}: Props) {\n  const api = useApi();\n  const theme = useTheme();\n\n  function handleLegendSelectChanged(legendChange: {\n    name: string;\n    selected: Record<string, boolean>;\n    type: string;\n  }) {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        unselectedSeries: unselected,\n      },\n    };\n    browserHistory.push(to);\n  }\n\n  const start = propsStart ? getUtcToLocalDateObject(propsStart) : null;\n  const end = propsEnd ? getUtcToLocalDateObject(propsEnd) : null;\n  const utc = normalizeDateTimeParams(location.query)?.utc === 'true';\n  const period = statsPeriod;\n\n  const legend = {\n    right: 10,\n    top: 0,\n    selected: getSeriesSelection(location),\n  };\n\n  const datetimeSelection = {start, end, period};\n\n  const contentCommonProps = {\n    theme,\n    router,\n    start,\n    end,\n    utc,\n    legend,\n    queryExtra,\n    period,\n    projects: project,\n    environments: environment,\n    onLegendSelectChanged: handleLegendSelectChanged,\n  };\n\n  const requestCommonProps = {\n    api,\n    start,\n    end,\n    project,\n    environment,\n    query,\n    period,\n    interval: getInterval(datetimeSelection, 'high'),\n  };\n\n  const header = (\n    <HeaderTitleLegend>\n      {t('Trend')}\n      <QuestionTooltip\n        size=\"sm\"\n        position=\"top\"\n        title={t(`Trends shows the smoothed value of an aggregate over time.`)}\n      />\n    </HeaderTitleLegend>\n  );\n\n  const trendDisplay = generateTrendFunctionAsString(trendFunction, trendParameter);\n\n  return (\n    <Fragment>\n      {header}\n      <EventsRequest\n        {...requestCommonProps}\n        organization={organization}\n        showLoading={false}\n        includePrevious={false}\n        yAxis={trendDisplay}\n        currentSeriesNames={[trendDisplay]}\n        partial\n        withoutZerofill={withoutZerofill}\n        referrer=\"api.performance.transaction-summary.trends-chart\"\n        userModified={decodeScalar(location.query.userModified)}\n      >\n        {({errored, loading, reloading, timeseriesData, timeframe: timeFrame}) => (\n          <Content\n            series={timeseriesData}\n            errored={errored}\n            loading={loading}\n            reloading={reloading}\n            timeFrame={timeFrame}\n            {...contentCommonProps}\n          />\n        )}\n      </EventsRequest>\n    </Fragment>\n  );\n}\n\nexport default withRouter(TrendChart);\n","import {InjectedRouter} from 'react-router';\nimport {Query} from 'history';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport ReleaseSeries from 'sentry/components/charts/releaseSeries';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconWarning} from 'sentry/icons';\nimport {Series} from 'sentry/types/echarts';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {Theme} from 'sentry/utils/theme';\nimport {TransactionsListOption} from 'sentry/views/releases/detail/overview';\n\ntype Props = {\n  errored: boolean;\n  loading: boolean;\n  queryExtra: Query;\n  reloading: boolean;\n  router: InjectedRouter;\n  theme: Theme;\n  series?: Series[];\n  timeFrame?: {\n    end: number;\n    start: number;\n  };\n} & Omit<React.ComponentProps<typeof ReleaseSeries>, 'children' | 'queryExtra'> &\n  Pick<LineChartProps, 'onLegendSelectChanged' | 'legend'>;\n\nfunction Content({\n  errored,\n  theme,\n  series: data,\n  timeFrame,\n  start,\n  end,\n  period,\n  projects,\n  environments,\n  loading,\n  reloading,\n  legend,\n  utc,\n  queryExtra,\n  router,\n  onLegendSelectChanged,\n}: Props) {\n  if (errored) {\n    return (\n      <ErrorPanel>\n        <IconWarning color=\"gray500\" size=\"lg\" />\n      </ErrorPanel>\n    );\n  }\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    grid: {\n      left: '10px',\n      right: '10px',\n      top: '40px',\n      bottom: '0px',\n    },\n    seriesOptions: {\n      showSymbol: false,\n    },\n    tooltip: {\n      trigger: 'axis',\n      valueFormatter: tooltipFormatter,\n    },\n    xAxis: timeFrame\n      ? {\n          min: timeFrame.start,\n          max: timeFrame.end,\n        }\n      : undefined,\n    yAxis: {\n      axisLabel: {\n        color: theme.chartLabel,\n        // p75(measurements.fcp) coerces the axis to be time based\n        formatter: (value: number) => axisLabelFormatter(value, 'p75(measurements.fcp)'),\n      },\n    },\n  };\n\n  const colors = (data && theme.charts.getColorPalette(data.length - 2)) || [];\n\n  // Create a list of series based on the order of the fields,\n  const series = data\n    ? data.map((values, i: number) => ({\n        ...values,\n        color: colors[i],\n      }))\n    : [];\n\n  return (\n    <ChartZoom router={router} period={period} start={start} end={end} utc={utc}>\n      {zoomRenderProps => (\n        <ReleaseSeries\n          start={start}\n          end={end}\n          queryExtra={{\n            ...queryExtra,\n            showTransactions: TransactionsListOption.SLOW_LCP,\n          }}\n          period={period}\n          utc={utc}\n          projects={projects}\n          environments={environments}\n        >\n          {({releaseSeries}) => (\n            <TransitionChart loading={loading} reloading={reloading}>\n              <TransparentLoadingMask visible={reloading} />\n              {getDynamicText({\n                value: (\n                  <LineChart\n                    {...zoomRenderProps}\n                    {...chartOptions}\n                    legend={legend}\n                    onLegendSelectChanged={onLegendSelectChanged}\n                    series={[...series, ...releaseSeries]}\n                  />\n                ),\n                fixed: <Placeholder height=\"200px\" testId=\"skeleton-ui\" />,\n              })}\n            </TransitionChart>\n          )}\n        </ReleaseSeries>\n      )}\n    </ChartZoom>\n  );\n}\n\nexport default Content;\n","import {Fragment} from 'react';\nimport {browserHistory, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport {Location, Query} from 'history';\n\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitleLegend} from 'sentry/components/charts/styles';\nimport {getInterval, getSeriesSelection} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t} from 'sentry/locale';\nimport {OrganizationSummary} from 'sentry/types';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {\n  getAggregateArg,\n  getMeasurementSlug,\n  WebVital,\n} from 'sentry/utils/discover/fields';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\n\nimport {ViewProps} from '../../../types';\n\nimport Content from './content';\n\ntype Props = WithRouterProps &\n  ViewProps & {\n    location: Location;\n    organization: OrganizationSummary;\n    queryExtra: Query;\n    withoutZerofill: boolean;\n  };\n\nfunction VitalsChart({\n  project,\n  environment,\n  location,\n  organization,\n  query,\n  statsPeriod,\n  router,\n  queryExtra,\n  withoutZerofill,\n  start: propsStart,\n  end: propsEnd,\n}: Props) {\n  const api = useApi();\n  const theme = useTheme();\n\n  const handleLegendSelectChanged = (legendChange: {\n    name: string;\n    selected: Record<string, boolean>;\n    type: string;\n  }) => {\n    const {selected} = legendChange;\n    const unselected = Object.keys(selected).filter(key => !selected[key]);\n\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        unselectedSeries: unselected,\n      },\n    };\n    browserHistory.push(to);\n  };\n\n  const vitals = [WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS];\n  const start = propsStart ? getUtcToLocalDateObject(propsStart) : null;\n  const end = propsEnd ? getUtcToLocalDateObject(propsEnd) : null;\n  const utc = normalizeDateTimeParams(location.query).utc === 'true';\n  const period = statsPeriod;\n\n  const legend = {\n    right: 10,\n    top: 0,\n    selected: getSeriesSelection(location),\n    formatter: (seriesName: string) => {\n      const arg = getAggregateArg(seriesName);\n      if (arg !== null) {\n        const slug = getMeasurementSlug(arg);\n        if (slug !== null) {\n          seriesName = slug.toUpperCase();\n        }\n      }\n      return seriesName;\n    },\n  };\n\n  const datetimeSelection = {start, end, period};\n\n  const contentCommonProps = {\n    theme,\n    router,\n    start,\n    end,\n    utc,\n    legend,\n    queryExtra,\n    period,\n    projects: project,\n    environments: environment,\n    onLegendSelectChanged: handleLegendSelectChanged,\n  };\n\n  const requestCommonProps = {\n    api,\n    start,\n    end,\n    project,\n    environment,\n    query,\n    period,\n    interval: getInterval(datetimeSelection, 'high'),\n  };\n\n  const header = (\n    <HeaderTitleLegend>\n      {t('Web Vitals Breakdown')}\n      <QuestionTooltip\n        size=\"sm\"\n        position=\"top\"\n        title={t(\n          `Web Vitals Breakdown reflects the 75th percentile of web vitals over time.`\n        )}\n      />\n    </HeaderTitleLegend>\n  );\n\n  const yAxis = vitals.map(v => `p75(${v})`);\n\n  return (\n    <Fragment>\n      {header}\n      <EventsRequest\n        {...requestCommonProps}\n        organization={organization}\n        showLoading={false}\n        includePrevious={false}\n        yAxis={yAxis}\n        partial\n        withoutZerofill={withoutZerofill}\n        referrer=\"api.performance.transaction-summary.vitals-chart\"\n        userModified={decodeScalar(location.query.userModified)}\n      >\n        {({results, errored, loading, reloading, timeframe: timeFrame}) => (\n          <Content\n            series={results}\n            errored={errored}\n            loading={loading}\n            reloading={reloading}\n            timeFrame={timeFrame}\n            {...contentCommonProps}\n          />\n        )}\n      </EventsRequest>\n    </Fragment>\n  );\n}\n\nexport default withRouter(VitalsChart);\n","import {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport OptionSelector from 'sentry/components/charts/optionSelector';\nimport {\n  ChartContainer,\n  ChartControls,\n  InlineContainer,\n  SectionHeading,\n  SectionValue,\n} from 'sentry/components/charts/styles';\nimport {Panel} from 'sentry/components/panels';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport {Organization, SelectValue} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {removeHistogramQueryStrings} from 'sentry/utils/performance/histogram';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {TransactionsListOption} from 'sentry/views/releases/detail/overview';\n\nimport {TrendColumnField, TrendFunctionField} from '../../trends/types';\nimport {TRENDS_FUNCTIONS, TRENDS_PARAMETERS} from '../../trends/utils';\nimport {SpanOperationBreakdownFilter} from '../filter';\n\nimport LatencyChartControls from './latencyChart/chartControls';\nimport {ZOOM_END, ZOOM_START} from './latencyChart/utils';\nimport DurationChart from './durationChart';\nimport DurationPercentileChart from './durationPercentileChart';\nimport LatencyChart from './latencyChart';\nimport TrendChart from './trendChart';\nimport VitalsChart from './vitalsChart';\n\nexport enum DisplayModes {\n  DURATION_PERCENTILE = 'durationpercentile',\n  DURATION = 'duration',\n  LATENCY = 'latency',\n  TREND = 'trend',\n  VITALS = 'vitals',\n}\n\nfunction generateDisplayOptions(\n  currentFilter: SpanOperationBreakdownFilter\n): SelectValue<string>[] {\n  if (currentFilter === SpanOperationBreakdownFilter.None) {\n    return [\n      {value: DisplayModes.DURATION, label: t('Duration Breakdown')},\n      {value: DisplayModes.DURATION_PERCENTILE, label: t('Duration Percentiles')},\n      {value: DisplayModes.LATENCY, label: t('Duration Distribution')},\n      {value: DisplayModes.TREND, label: t('Trends')},\n      {value: DisplayModes.VITALS, label: t('Web Vitals')},\n    ];\n  }\n\n  // A span operation name breakdown has been chosen.\n\n  return [\n    {value: DisplayModes.DURATION, label: t('Span Operation Breakdown')},\n    {value: DisplayModes.DURATION_PERCENTILE, label: t('Span Operation Percentiles')},\n    {value: DisplayModes.LATENCY, label: t('Span Operation Distribution')},\n    {value: DisplayModes.TREND, label: t('Trends')},\n    {value: DisplayModes.VITALS, label: t('Web Vitals')},\n  ];\n}\n\nconst TREND_FUNCTIONS_OPTIONS: SelectValue<string>[] = TRENDS_FUNCTIONS.map(\n  ({field, label}) => ({\n    value: field,\n    label,\n  })\n);\n\ntype Props = {\n  currentFilter: SpanOperationBreakdownFilter;\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  totalValues: number | null;\n  withoutZerofill: boolean;\n};\n\nfunction TransactionSummaryCharts({\n  totalValues,\n  eventView,\n  organization,\n  location,\n  currentFilter,\n  withoutZerofill,\n}: Props) {\n  function handleDisplayChange(value: string) {\n    const display = decodeScalar(location.query.display, DisplayModes.DURATION);\n    trackAdvancedAnalyticsEvent(\n      'performance_views.transaction_summary.change_chart_display',\n      {\n        organization,\n        from_chart: display,\n        to_chart: value,\n      }\n    );\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...removeHistogramQueryStrings(location, [ZOOM_START, ZOOM_END]),\n        display: value,\n      },\n    });\n  }\n\n  function handleTrendDisplayChange(value: string) {\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {...location.query, trendFunction: value},\n    });\n  }\n\n  function handleTrendColumnChange(value: string) {\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {...location.query, trendColumn: value},\n    });\n  }\n\n  const TREND_PARAMETERS_OPTIONS: SelectValue<string>[] = TRENDS_PARAMETERS.map(\n    ({column, label}) => ({\n      value: column,\n      label,\n    })\n  );\n\n  let display = decodeScalar(location.query.display, DisplayModes.DURATION);\n  let trendFunction = decodeScalar(\n    location.query.trendFunction,\n    TREND_FUNCTIONS_OPTIONS[0].value\n  ) as TrendFunctionField;\n  let trendColumn = decodeScalar(\n    location.query.trendColumn,\n    TREND_PARAMETERS_OPTIONS[0].value\n  );\n\n  if (!Object.values(DisplayModes).includes(display as DisplayModes)) {\n    display = DisplayModes.DURATION;\n  }\n  if (!Object.values(TrendFunctionField).includes(trendFunction)) {\n    trendFunction = TrendFunctionField.P50;\n  }\n  if (!Object.values(TrendColumnField).includes(trendColumn as TrendColumnField)) {\n    trendColumn = TrendColumnField.DURATION;\n  }\n\n  const releaseQueryExtra = {\n    yAxis: display === DisplayModes.VITALS ? 'countVital' : 'countDuration',\n    showTransactions:\n      display === DisplayModes.VITALS\n        ? TransactionsListOption.SLOW_LCP\n        : display === DisplayModes.DURATION\n        ? TransactionsListOption.SLOW\n        : undefined,\n  };\n\n  return (\n    <Panel>\n      <ChartContainer>\n        {display === DisplayModes.LATENCY && (\n          <LatencyChart\n            organization={organization}\n            location={location}\n            query={eventView.query}\n            project={eventView.project}\n            environment={eventView.environment}\n            start={eventView.start}\n            end={eventView.end}\n            statsPeriod={eventView.statsPeriod}\n            currentFilter={currentFilter}\n          />\n        )}\n        {display === DisplayModes.DURATION && (\n          <DurationChart\n            organization={organization}\n            query={eventView.query}\n            queryExtra={releaseQueryExtra}\n            project={eventView.project}\n            environment={eventView.environment}\n            start={eventView.start}\n            end={eventView.end}\n            statsPeriod={eventView.statsPeriod}\n            currentFilter={currentFilter}\n            withoutZerofill={withoutZerofill}\n          />\n        )}\n        {display === DisplayModes.DURATION_PERCENTILE && (\n          <DurationPercentileChart\n            organization={organization}\n            location={location}\n            query={eventView.query}\n            project={eventView.project}\n            environment={eventView.environment}\n            start={eventView.start}\n            end={eventView.end}\n            statsPeriod={eventView.statsPeriod}\n            currentFilter={currentFilter}\n          />\n        )}\n        {display === DisplayModes.TREND && (\n          <TrendChart\n            trendFunction={trendFunction}\n            trendParameter={trendColumn}\n            organization={organization}\n            query={eventView.query}\n            queryExtra={releaseQueryExtra}\n            project={eventView.project}\n            environment={eventView.environment}\n            start={eventView.start}\n            end={eventView.end}\n            statsPeriod={eventView.statsPeriod}\n            withoutZerofill={withoutZerofill}\n          />\n        )}\n        {display === DisplayModes.VITALS && (\n          <VitalsChart\n            organization={organization}\n            query={eventView.query}\n            queryExtra={releaseQueryExtra}\n            project={eventView.project}\n            environment={eventView.environment}\n            start={eventView.start}\n            end={eventView.end}\n            statsPeriod={eventView.statsPeriod}\n            withoutZerofill={withoutZerofill}\n          />\n        )}\n      </ChartContainer>\n\n      <ChartControls>\n        <InlineContainer>\n          <SectionHeading key=\"total-heading\">{t('Total Transactions')}</SectionHeading>\n          <SectionValue key=\"total-value\">\n            {totalValues === null ? (\n              <Placeholder height=\"24px\" />\n            ) : (\n              totalValues.toLocaleString()\n            )}\n          </SectionValue>\n        </InlineContainer>\n        <InlineContainer>\n          {display === DisplayModes.TREND && (\n            <OptionSelector\n              title={t('Percentile')}\n              selected={trendFunction}\n              options={TREND_FUNCTIONS_OPTIONS}\n              onChange={handleTrendDisplayChange}\n            />\n          )}\n          {display === DisplayModes.TREND && (\n            <OptionSelector\n              title={t('Parameter')}\n              selected={trendColumn}\n              options={TREND_PARAMETERS_OPTIONS}\n              onChange={handleTrendColumnChange}\n            />\n          )}\n          {display === DisplayModes.LATENCY && (\n            <LatencyChartControls location={location} />\n          )}\n          <OptionSelector\n            title={t('Display')}\n            selected={display}\n            options={generateDisplayOptions(currentFilter)}\n            onChange={handleDisplayChange}\n          />\n        </InlineContainer>\n      </ChartControls>\n    </Panel>\n  );\n}\n\nexport default TransactionSummaryCharts;\n","import EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport {Panel, PanelBody} from 'sentry/components/panels';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst EmptyState = ({children}: Props) => (\n  <Panel>\n    <PanelBody>\n      <EmptyStateWarning>\n        <p>{children}</p>\n      </EmptyStateWarning>\n    </PanelBody>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {Fragment} from 'react';\nimport {Link} from 'react-router';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Alert from 'sentry/components/alert';\nimport {AsyncComponentProps} from 'sentry/components/asyncComponent';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport NotAvailable from 'sentry/components/notAvailable';\nimport {PanelItem} from 'sentry/components/panels';\nimport PanelTable from 'sentry/components/panels/panelTable';\nimport {IconArrow} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, ReleaseProject} from 'sentry/types';\nimport DiscoverQuery, {TableData} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {PROJECT_PERFORMANCE_TYPE} from 'sentry/views/performance/utils';\n\ntype PerformanceCardTableProps = {\n  allReleasesEventView: EventView;\n  allReleasesTableData: TableData | null;\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  performanceType: string;\n  project: ReleaseProject;\n  releaseEventView: EventView;\n  thisReleaseTableData: TableData | null;\n};\n\nfunction PerformanceCardTable({\n  organization,\n  location,\n  project,\n  releaseEventView,\n  allReleasesTableData,\n  thisReleaseTableData,\n  performanceType,\n  isLoading,\n}: PerformanceCardTableProps) {\n  const miseryRenderer =\n    allReleasesTableData?.meta &&\n    getFieldRenderer('user_misery()', allReleasesTableData.meta, false);\n\n  function renderChange(\n    allReleasesScore: number,\n    thisReleaseScore: number,\n    meta: string\n  ) {\n    if (allReleasesScore === undefined || thisReleaseScore === undefined) {\n      return <StyledNotAvailable />;\n    }\n\n    const trend = allReleasesScore - thisReleaseScore;\n    const trendSeconds = trend >= 1000 ? trend / 1000 : trend;\n    const trendPercentage = (allReleasesScore - thisReleaseScore) * 100;\n    const valPercentage = Math.round(Math.abs(trendPercentage));\n    const val = Math.abs(trendSeconds).toFixed(2);\n\n    if (trend === 0) {\n      return <SubText>{`0${meta === 'duration' ? 'ms' : '%'}`}</SubText>;\n    }\n\n    return (\n      <TrendText color={trend >= 0 ? 'success' : 'error'}>\n        {`${meta === 'duration' ? val : valPercentage}${\n          meta === 'duration' ? (trend >= 1000 ? 's' : 'ms') : '%'\n        }`}\n        <StyledIconArrow\n          color={trend >= 0 ? 'success' : 'error'}\n          direction={trend >= 0 ? 'down' : 'up'}\n          size=\"xs\"\n        />\n      </TrendText>\n    );\n  }\n\n  function userMiseryTrend() {\n    const allReleasesUserMisery = allReleasesTableData?.data?.[0]?.['user_misery()'];\n    const thisReleaseUserMisery = thisReleaseTableData?.data?.[0]?.['user_misery()'];\n    return (\n      <StyledPanelItem>\n        {renderChange(\n          allReleasesUserMisery as number,\n          thisReleaseUserMisery as number,\n          'number' as string\n        )}\n      </StyledPanelItem>\n    );\n  }\n\n  function renderFrontendPerformance() {\n    const webVitals = [\n      {title: WebVital.FCP, field: 'p75(measurements.fcp)'},\n      {title: WebVital.FID, field: 'p75(measurements.fid)'},\n      {title: WebVital.LCP, field: 'p75(measurements.lcp)'},\n      {title: WebVital.CLS, field: 'p75(measurements.cls)'},\n    ];\n\n    const spans = [\n      {title: 'HTTP', column: 'p75(spans.http)', field: 'p75(spans.http)'},\n      {title: 'Browser', column: 'p75(spans.browser)', field: 'p75(spans.browser)'},\n      {title: 'Resource', column: 'p75(spans.resource)', field: 'p75(spans.resource)'},\n    ];\n\n    const webVitalTitles = webVitals.map((vital, idx) => {\n      const newView = releaseEventView.withColumns([\n        {kind: 'field', field: `p75(${vital.title})`},\n      ]);\n      return (\n        <SubTitle key={idx}>\n          <Link to={newView.getResultsViewUrlTarget(organization.slug)}>\n            {WEB_VITAL_DETAILS[vital.title].name} (\n            {WEB_VITAL_DETAILS[vital.title].acronym})\n          </Link>\n        </SubTitle>\n      );\n    });\n\n    const spanTitles = spans.map((span, idx) => {\n      const newView = releaseEventView.withColumns([\n        {kind: 'field', field: `${span.column}`},\n      ]);\n      return (\n        <SubTitle key={idx}>\n          <Link to={newView.getResultsViewUrlTarget(organization.slug)}>\n            {t(span.title)}\n          </Link>\n        </SubTitle>\n      );\n    });\n\n    const webVitalsRenderer = webVitals.map(\n      vital =>\n        allReleasesTableData?.meta &&\n        getFieldRenderer(vital.field, allReleasesTableData?.meta, false)\n    );\n\n    const spansRenderer = spans.map(\n      span =>\n        allReleasesTableData?.meta &&\n        getFieldRenderer(span.field, allReleasesTableData?.meta, false)\n    );\n\n    const webReleaseTrend = webVitals.map(vital => {\n      return {\n        allReleasesRow: {\n          data: allReleasesTableData?.data?.[0]?.[vital.field],\n          meta: allReleasesTableData?.meta?.[vital.field],\n        },\n        thisReleaseRow: {\n          data: thisReleaseTableData?.data?.[0]?.[vital.field],\n          meta: thisReleaseTableData?.meta?.[vital.field],\n        },\n      };\n    });\n    const spansReleaseTrend = spans.map(span => {\n      return {\n        allReleasesRow: {\n          data: allReleasesTableData?.data?.[0]?.[span.field],\n          meta: allReleasesTableData?.meta?.[span.field],\n        },\n        thisReleaseRow: {\n          data: thisReleaseTableData?.data?.[0]?.[span.field],\n          meta: thisReleaseTableData?.meta?.[span.field],\n        },\n      };\n    });\n\n    const emptyColumn = (\n      <div>\n        <SingleEmptySubText>\n          <StyledNotAvailable tooltip={t('No results found')} />\n        </SingleEmptySubText>\n        <StyledPanelItem>\n          <TitleSpace />\n          {webVitals.map((vital, index) => (\n            <MultipleEmptySubText key={vital[index]}>\n              {<StyledNotAvailable tooltip={t('No results found')} />}\n            </MultipleEmptySubText>\n          ))}\n        </StyledPanelItem>\n        <StyledPanelItem>\n          <TitleSpace />\n          {spans.map((span, index) => (\n            <MultipleEmptySubText key={span[index]}>\n              {<StyledNotAvailable tooltip={t('No results found')} />}\n            </MultipleEmptySubText>\n          ))}\n        </StyledPanelItem>\n      </div>\n    );\n\n    return (\n      <Fragment>\n        <div>\n          <PanelItem>{t('User Misery')}</PanelItem>\n          <StyledPanelItem>\n            <div>{t('Web Vitals')}</div>\n            {webVitalTitles}\n          </StyledPanelItem>\n          <StyledPanelItem>\n            <div>{t('Span Operations')}</div>\n            {spanTitles}\n          </StyledPanelItem>\n        </div>\n        {allReleasesTableData?.data.length === 0\n          ? emptyColumn\n          : allReleasesTableData?.data.map((dataRow, idx) => {\n              const allReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const allReleasesWebVitals = webVitalsRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n              const allReleasesSpans = spansRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{allReleasesMisery}</UserMiseryPanelItem>\n                  <StyledPanelItem>\n                    <TitleSpace />\n                    {allReleasesWebVitals.map(webVital => webVital)}\n                  </StyledPanelItem>\n                  <StyledPanelItem>\n                    <TitleSpace />\n                    {allReleasesSpans.map(span => span)}\n                  </StyledPanelItem>\n                </div>\n              );\n            })}\n        {thisReleaseTableData?.data.length === 0\n          ? emptyColumn\n          : thisReleaseTableData?.data.map((dataRow, idx) => {\n              const thisReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const thisReleasesWebVitals = webVitalsRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n              const thisReleasesSpans = spansRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n\n              return (\n                <div key={idx}>\n                  <div>\n                    <UserMiseryPanelItem>{thisReleasesMisery}</UserMiseryPanelItem>\n                    <StyledPanelItem>\n                      <TitleSpace />\n                      {thisReleasesWebVitals.map(webVital => webVital)}\n                    </StyledPanelItem>\n                    <StyledPanelItem>\n                      <TitleSpace />\n                      {thisReleasesSpans.map(span => span)}\n                    </StyledPanelItem>\n                  </div>\n                </div>\n              );\n            })}\n        <div>\n          {userMiseryTrend()}\n          <StyledPanelItem>\n            <TitleSpace />\n            {webReleaseTrend?.map(row =>\n              renderChange(\n                row.allReleasesRow?.data as number,\n                row.thisReleaseRow?.data as number,\n                row.allReleasesRow?.meta as string\n              )\n            )}\n          </StyledPanelItem>\n          <StyledPanelItem>\n            <TitleSpace />\n            {spansReleaseTrend?.map(row =>\n              renderChange(\n                row.allReleasesRow?.data as number,\n                row.thisReleaseRow?.data as number,\n                row.allReleasesRow?.meta as string\n              )\n            )}\n          </StyledPanelItem>\n        </div>\n      </Fragment>\n    );\n  }\n\n  function renderBackendPerformance() {\n    const spans = [\n      {title: 'HTTP', column: 'p75(spans.http)', field: 'p75_spans_http'},\n      {title: 'DB', column: 'p75(spans.db)', field: 'p75_spans_db'},\n    ];\n\n    const spanTitles = spans.map((span, idx) => {\n      const newView = releaseEventView.withColumns([\n        {kind: 'field', field: `${span.column}`},\n      ]);\n      return (\n        <SubTitle key={idx}>\n          <Link to={newView.getResultsViewUrlTarget(organization.slug)}>\n            {t(span.title)}\n          </Link>\n        </SubTitle>\n      );\n    });\n\n    const apdexRenderer =\n      allReleasesTableData?.meta &&\n      getFieldRenderer('apdex', allReleasesTableData.meta, false);\n\n    const spansRenderer = spans.map(\n      span =>\n        allReleasesTableData?.meta &&\n        getFieldRenderer(span.field, allReleasesTableData?.meta, false)\n    );\n\n    const spansReleaseTrend = spans.map(span => {\n      return {\n        allReleasesRow: {\n          data: allReleasesTableData?.data?.[0]?.[span.field],\n          meta: allReleasesTableData?.meta?.[span.field],\n        },\n        thisReleaseRow: {\n          data: thisReleaseTableData?.data?.[0]?.[span.field],\n          meta: thisReleaseTableData?.meta?.[span.field],\n        },\n      };\n    });\n\n    function apdexTrend() {\n      const allReleasesApdex = allReleasesTableData?.data?.[0]?.apdex;\n      const thisReleaseApdex = thisReleaseTableData?.data?.[0]?.apdex;\n      return (\n        <StyledPanelItem>\n          {renderChange(\n            allReleasesApdex as number,\n            thisReleaseApdex as number,\n            'string' as string\n          )}\n        </StyledPanelItem>\n      );\n    }\n\n    const emptyColumn = (\n      <div>\n        <SingleEmptySubText>\n          <StyledNotAvailable tooltip={t('No results found')} />\n        </SingleEmptySubText>\n        <SingleEmptySubText>\n          <StyledNotAvailable tooltip={t('No results found')} />\n        </SingleEmptySubText>\n        <StyledPanelItem>\n          <TitleSpace />\n          {spans.map((span, index) => (\n            <MultipleEmptySubText key={span[index]}>\n              {<StyledNotAvailable tooltip={t('No results found')} />}\n            </MultipleEmptySubText>\n          ))}\n        </StyledPanelItem>\n      </div>\n    );\n    return (\n      <Fragment>\n        <div>\n          <PanelItem>{t('User Misery')}</PanelItem>\n          <StyledPanelItem>\n            <div>{t('Apdex')}</div>\n          </StyledPanelItem>\n          <StyledPanelItem>\n            <div>{t('Span Operations')}</div>\n            {spanTitles}\n          </StyledPanelItem>\n        </div>\n        {allReleasesTableData?.data.length === 0\n          ? emptyColumn\n          : allReleasesTableData?.data.map((dataRow, idx) => {\n              const allReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const allReleasesApdex = apdexRenderer?.(dataRow, {organization, location});\n              const allReleasesSpans = spansRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{allReleasesMisery}</UserMiseryPanelItem>\n                  <ApdexPanelItem>{allReleasesApdex}</ApdexPanelItem>\n                  <StyledPanelItem>\n                    <TitleSpace />\n                    {allReleasesSpans.map(span => span)}\n                  </StyledPanelItem>\n                </div>\n              );\n            })}\n        {thisReleaseTableData?.data.length === 0\n          ? emptyColumn\n          : thisReleaseTableData?.data.map((dataRow, idx) => {\n              const thisReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const thisReleasesApdex = apdexRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const thisReleasesSpans = spansRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{thisReleasesMisery}</UserMiseryPanelItem>\n                  <ApdexPanelItem>{thisReleasesApdex}</ApdexPanelItem>\n                  <StyledPanelItem>\n                    <TitleSpace />\n                    {thisReleasesSpans.map(span => span)}\n                  </StyledPanelItem>\n                </div>\n              );\n            })}\n        <div>\n          {userMiseryTrend()}\n          {apdexTrend()}\n          <StyledPanelItem>\n            <TitleSpace />\n            {spansReleaseTrend?.map(row =>\n              renderChange(\n                row.allReleasesRow?.data as number,\n                row.thisReleaseRow?.data as number,\n                row.allReleasesRow?.meta as string\n              )\n            )}\n          </StyledPanelItem>\n        </div>\n      </Fragment>\n    );\n  }\n\n  function renderMobilePerformance() {\n    const mobileVitals = [\n      MobileVital.AppStartCold,\n      MobileVital.AppStartWarm,\n      MobileVital.FramesSlow,\n      MobileVital.FramesFrozen,\n    ];\n    const mobileVitalTitles = mobileVitals.map(mobileVital => {\n      return (\n        <PanelItem key={mobileVital}>{MOBILE_VITAL_DETAILS[mobileVital].name}</PanelItem>\n      );\n    });\n\n    const mobileVitalFields = [\n      'p75(measurements.app_start_cold)',\n      'p75(measurements.app_start_warm)',\n      'p75(measurements.frames_slow)',\n      'p75(measurements.frames_frozen)',\n    ];\n    const mobileVitalsRenderer = mobileVitalFields.map(\n      field =>\n        allReleasesTableData?.meta &&\n        getFieldRenderer(field, allReleasesTableData?.meta, false)\n    );\n\n    const mobileReleaseTrend = mobileVitalFields.map(field => {\n      return {\n        allReleasesRow: {\n          data: allReleasesTableData?.data?.[0]?.[field],\n          meta: allReleasesTableData?.meta?.[field],\n        },\n        thisReleaseRow: {\n          data: thisReleaseTableData?.data?.[0]?.[field],\n          meta: thisReleaseTableData?.meta?.[field],\n        },\n      };\n    });\n\n    const emptyColumn = (\n      <div>\n        <SingleEmptySubText>\n          <StyledNotAvailable tooltip={t('No results found')} />\n        </SingleEmptySubText>\n        {mobileVitalFields.map((vital, index) => (\n          <SingleEmptySubText key={vital[index]}>\n            <StyledNotAvailable tooltip={t('No results found')} />\n          </SingleEmptySubText>\n        ))}\n      </div>\n    );\n\n    return (\n      <Fragment>\n        <div>\n          <PanelItem>{t('User Misery')}</PanelItem>\n          {mobileVitalTitles}\n        </div>\n        {allReleasesTableData?.data.length === 0\n          ? emptyColumn\n          : allReleasesTableData?.data.map((dataRow, idx) => {\n              const allReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const allReleasesMobile = mobileVitalsRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{allReleasesMisery}</UserMiseryPanelItem>\n                  {allReleasesMobile.map((mobileVital, i) => (\n                    <StyledPanelItem key={i}>{mobileVital}</StyledPanelItem>\n                  ))}\n                </div>\n              );\n            })}\n        {thisReleaseTableData?.data.length === 0\n          ? emptyColumn\n          : thisReleaseTableData?.data.map((dataRow, idx) => {\n              const thisReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n              const thisReleasesMobile = mobileVitalsRenderer?.map(renderer =>\n                renderer?.(dataRow, {organization, location})\n              );\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{thisReleasesMisery}</UserMiseryPanelItem>\n                  {thisReleasesMobile.map((mobileVital, i) => (\n                    <StyledPanelItem key={i}>{mobileVital}</StyledPanelItem>\n                  ))}\n                </div>\n              );\n            })}\n        <div>\n          {userMiseryTrend()}\n          {mobileReleaseTrend?.map((row, idx) => (\n            <StyledPanelItem key={idx}>\n              {renderChange(\n                row.allReleasesRow?.data as number,\n                row.thisReleaseRow?.data as number,\n                row.allReleasesRow?.meta as string\n              )}\n            </StyledPanelItem>\n          ))}\n        </div>\n      </Fragment>\n    );\n  }\n\n  function renderUnknownPerformance() {\n    const emptyColumn = (\n      <div>\n        <SingleEmptySubText>\n          <StyledNotAvailable tooltip={t('No results found')} />\n        </SingleEmptySubText>\n      </div>\n    );\n\n    return (\n      <Fragment>\n        <div>\n          <PanelItem>{t('User Misery')}</PanelItem>\n        </div>\n        {allReleasesTableData?.data.length === 0\n          ? emptyColumn\n          : allReleasesTableData?.data.map((dataRow, idx) => {\n              const allReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{allReleasesMisery}</UserMiseryPanelItem>\n                </div>\n              );\n            })}\n        {thisReleaseTableData?.data.length === 0\n          ? emptyColumn\n          : thisReleaseTableData?.data.map((dataRow, idx) => {\n              const thisReleasesMisery = miseryRenderer?.(dataRow, {\n                organization,\n                location,\n              });\n\n              return (\n                <div key={idx}>\n                  <UserMiseryPanelItem>{thisReleasesMisery}</UserMiseryPanelItem>\n                </div>\n              );\n            })}\n        <div>{userMiseryTrend()}</div>\n      </Fragment>\n    );\n  }\n\n  const loader = <StyledLoadingIndicator />;\n\n  const platformPerformanceRender = {\n    [PROJECT_PERFORMANCE_TYPE.FRONTEND]: {\n      title: t('Frontend Performance'),\n      section: renderFrontendPerformance(),\n    },\n    [PROJECT_PERFORMANCE_TYPE.BACKEND]: {\n      title: t('Backend Performance'),\n      section: renderBackendPerformance(),\n    },\n    [PROJECT_PERFORMANCE_TYPE.MOBILE]: {\n      title: t('Mobile Performance'),\n      section: renderMobilePerformance(),\n    },\n    [PROJECT_PERFORMANCE_TYPE.ANY]: {\n      title: t('[Unknown] Performance'),\n      section: renderUnknownPerformance(),\n    },\n  };\n\n  const isUnknownPlatform = performanceType === PROJECT_PERFORMANCE_TYPE.ANY;\n\n  return (\n    <Fragment>\n      <HeadCellContainer>\n        {platformPerformanceRender[performanceType].title}\n      </HeadCellContainer>\n      {isUnknownPlatform && (\n        <StyledAlert type=\"warning\" showIcon system>\n          {tct(\n            'For more performance metrics, specify which platform this project is using in [link]',\n            {\n              link: (\n                <Link to={`/settings/${organization.slug}/projects/${project.slug}/`}>\n                  {t('project settings.')}\n                </Link>\n              ),\n            }\n          )}\n        </StyledAlert>\n      )}\n      <StyledPanelTable\n        isLoading={isLoading}\n        headers={[\n          <Cell key=\"description\" align=\"left\">\n            {t('Description')}\n          </Cell>,\n          <Cell key=\"releases\" align=\"right\">\n            {t('All Releases')}\n          </Cell>,\n          <Cell key=\"release\" align=\"right\">\n            {t('This Release')}\n          </Cell>,\n          <Cell key=\"change\" align=\"right\">\n            {t('Change')}\n          </Cell>,\n        ]}\n        disablePadding\n        loader={loader}\n        disableTopBorder={isUnknownPlatform}\n      >\n        {platformPerformanceRender[performanceType].section}\n      </StyledPanelTable>\n    </Fragment>\n  );\n}\n\ninterface Props extends AsyncComponentProps {\n  allReleasesEventView: EventView;\n  location: Location;\n  organization: Organization;\n  performanceType: string;\n  project: ReleaseProject;\n  releaseEventView: EventView;\n}\n\nfunction PerformanceCardTableWrapper({\n  organization,\n  project,\n  allReleasesEventView,\n  releaseEventView,\n  performanceType,\n  location,\n}: Props) {\n  return (\n    <DiscoverQuery\n      eventView={allReleasesEventView}\n      orgSlug={organization.slug}\n      location={location}\n      useEvents\n    >\n      {({isLoading, tableData: allReleasesTableData}) => (\n        <DiscoverQuery\n          eventView={releaseEventView}\n          orgSlug={organization.slug}\n          location={location}\n          useEvents\n        >\n          {({isLoading: isReleaseLoading, tableData: thisReleaseTableData}) => (\n            <PerformanceCardTable\n              isLoading={isLoading || isReleaseLoading}\n              organization={organization}\n              location={location}\n              project={project}\n              allReleasesEventView={allReleasesEventView}\n              releaseEventView={releaseEventView}\n              allReleasesTableData={allReleasesTableData}\n              thisReleaseTableData={thisReleaseTableData}\n              performanceType={performanceType}\n            />\n          )}\n        </DiscoverQuery>\n      )}\n    </DiscoverQuery>\n  );\n}\n\nexport default PerformanceCardTableWrapper;\n\nconst emptyFieldCss = p => css`\n  color: ${p.theme.chartOther};\n  text-align: right;\n`;\n\nconst StyledLoadingIndicator = styled(LoadingIndicator)`\n  margin: 70px auto;\n`;\n\nconst HeadCellContainer = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  padding: ${space(2)};\n  border-top: 1px solid ${p => p.theme.border};\n  border-left: 1px solid ${p => p.theme.border};\n  border-right: 1px solid ${p => p.theme.border};\n  border-top-left-radius: ${p => p.theme.borderRadius};\n  border-top-right-radius: ${p => p.theme.borderRadius};\n`;\n\nconst StyledPanelTable = styled(PanelTable)<{disableTopBorder: boolean}>`\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-top: ${p => (p.disableTopBorder ? 'none' : `1px solid ${p.theme.border}`)};\n  @media (max-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: min-content 1fr 1fr 1fr;\n  }\n`;\n\nconst StyledPanelItem = styled(PanelItem)`\n  display: block;\n  white-space: nowrap;\n  width: 100%;\n`;\n\nconst SubTitle = styled('div')`\n  margin-left: ${space(3)};\n`;\n\nconst TitleSpace = styled('div')`\n  height: 24px;\n`;\n\nconst UserMiseryPanelItem = styled(PanelItem)`\n  justify-content: flex-end;\n`;\n\nconst ApdexPanelItem = styled(PanelItem)`\n  text-align: right;\n`;\n\nconst SingleEmptySubText = styled(PanelItem)`\n  display: block;\n  ${emptyFieldCss}\n`;\n\nconst MultipleEmptySubText = styled('div')`\n  ${emptyFieldCss}\n`;\n\nconst Cell = styled('div')<{align: 'left' | 'right'}>`\n  text-align: ${p => p.align};\n  margin-left: ${p => p.align === 'left' && space(2)};\n  padding-right: ${p => p.align === 'right' && space(2)};\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst StyledAlert = styled(Alert)`\n  border-top: 1px solid ${p => p.theme.border};\n  border-right: 1px solid ${p => p.theme.border};\n  border-left: 1px solid ${p => p.theme.border};\n  margin-bottom: 0;\n`;\n\nconst StyledNotAvailable = styled(NotAvailable)`\n  text-align: right;\n`;\n\nconst SubText = styled('div')`\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n\nconst TrendText = styled('div')<{color: string}>`\n  color: ${p => p.theme[p.color]};\n  text-align: right;\n`;\n\nconst StyledIconArrow = styled(IconArrow)<{color: string}>`\n  color: ${p => p.theme[p.color]};\n  margin-left: ${space(0.5)};\n`;\n","import styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Button from 'sentry/components/button';\nimport Collapsible from 'sentry/components/collapsible';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Commit, User} from 'sentry/types';\nimport {percent} from 'sentry/utils';\nimport {userDisplayName} from 'sentry/utils/formatters';\n\ntype GroupedAuthorCommits = {\n  [key: string]: {author: User | undefined; commitCount: number};\n};\n\ntype Props = {\n  orgId: string;\n  projectSlug: string;\n  version: string;\n} & AsyncComponent['props'];\n\ntype State = {\n  commits: Commit[];\n} & AsyncComponent['state'];\n\nclass CommitAuthorBreakdown extends AsyncComponent<Props, State> {\n  shouldReload = true;\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {orgId, projectSlug, version} = this.props;\n\n    const commitsEndpoint = `/projects/${orgId}/${projectSlug}/releases/${encodeURIComponent(\n      version\n    )}/commits/`;\n\n    return [['commits', commitsEndpoint]];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.version !== this.props.version) {\n      this.remountComponent();\n    }\n  }\n\n  getDisplayPercent(authorCommitCount: number): string {\n    const {commits} = this.state;\n\n    const calculatedPercent = Math.round(percent(authorCommitCount, commits.length));\n\n    return `${calculatedPercent < 1 ? '<1' : calculatedPercent}%`;\n  }\n\n  renderBody() {\n    // group commits by author\n    const groupedAuthorCommits = this.state.commits?.reduce(\n      (authorCommitsAccumulator, commit) => {\n        const email = commit.author?.email ?? 'unknown';\n\n        if (authorCommitsAccumulator.hasOwnProperty(email)) {\n          authorCommitsAccumulator[email].commitCount += 1;\n        } else {\n          authorCommitsAccumulator[email] = {\n            commitCount: 1,\n            author: commit.author,\n          };\n        }\n\n        return authorCommitsAccumulator;\n      },\n      {} as GroupedAuthorCommits\n    );\n\n    // sort authors by number of commits\n    const sortedAuthorsByNumberOfCommits = Object.values(groupedAuthorCommits).sort(\n      (a, b) => b.commitCount - a.commitCount\n    );\n\n    if (!sortedAuthorsByNumberOfCommits.length) {\n      return null;\n    }\n\n    return (\n      <SidebarSection title={t('Commit Author Breakdown')}>\n        <Collapsible\n          expandButton={({onExpand, numberOfHiddenItems}) => (\n            <Button priority=\"link\" onClick={onExpand}>\n              {tn(\n                'Show %s collapsed author',\n                'Show %s collapsed authors',\n                numberOfHiddenItems\n              )}\n            </Button>\n          )}\n        >\n          {sortedAuthorsByNumberOfCommits.map(({commitCount, author}, index) => (\n            <AuthorLine key={author?.email ?? index}>\n              <UserAvatar user={author} size={20} hasTooltip />\n              <AuthorName>{userDisplayName(author || {}, false)}</AuthorName>\n              <Commits>{tn('%s commit', '%s commits', commitCount)}</Commits>\n              <Percent>{this.getDisplayPercent(commitCount)}</Percent>\n            </AuthorLine>\n          ))}\n        </Collapsible>\n      </SidebarSection>\n    );\n  }\n}\n\nconst AuthorLine = styled('div')`\n  display: inline-grid;\n  grid-template-columns: 30px 2fr 1fr 40px;\n  width: 100%;\n  margin-bottom: ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst AuthorName = styled('div')`\n  color: ${p => p.theme.textColor};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst Commits = styled('div')`\n  color: ${p => p.theme.subText};\n  text-align: right;\n`;\n\nconst Percent = styled('div')`\n  min-width: 40px;\n  text-align: right;\n`;\n\nexport default CommitAuthorBreakdown;\n","import Link from 'sentry/components/links/link';\nimport Tag from 'sentry/components/tag';\nimport {IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Deploy} from 'sentry/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\ntype Props = {\n  deploy: Deploy;\n  className?: string;\n  orgSlug?: string;\n  projectId?: number;\n  version?: string;\n};\n\nconst DeployBadge = ({deploy, orgSlug, projectId, version, className}: Props) => {\n  const shouldLinkToIssues = !!orgSlug && !!version;\n\n  const badge = (\n    <Tag\n      className={className}\n      type=\"highlight\"\n      icon={shouldLinkToIssues && <IconOpen />}\n      textMaxWidth={80}\n      tooltipText={shouldLinkToIssues ? t('Open In Issues') : undefined}\n    >\n      {deploy.environment}\n    </Tag>\n  );\n\n  if (!shouldLinkToIssues) {\n    return badge;\n  }\n\n  return (\n    <Link\n      to={{\n        pathname: `/organizations/${orgSlug}/issues/`,\n        query: {\n          project: projectId ?? null,\n          environment: deploy.environment,\n          query: new MutableSearch([`release:${version!}`]).formatString(),\n        },\n      }}\n    >\n      {badge}\n    </Link>\n  );\n};\n\nexport default DeployBadge;\n","import styled from '@emotion/styled';\n\nimport DeployBadge from 'sentry/components/deployBadge';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Deploy} from 'sentry/types';\n\ntype Props = {\n  deploys: Deploy[];\n  orgSlug: string;\n  projectId: number;\n  version: string;\n};\n\nconst Deploys = ({version, orgSlug, projectId, deploys}: Props) => {\n  return (\n    <SidebarSection title={t('Deploys')}>\n      {deploys.map(deploy => (\n        <Row key={deploy.id}>\n          <StyledDeployBadge\n            deploy={deploy}\n            orgSlug={orgSlug}\n            version={version}\n            projectId={projectId}\n          />\n          <TextOverflow>\n            <TimeSince date={deploy.dateFinished} />\n          </TextOverflow>\n        </Row>\n      ))}\n    </SidebarSection>\n  );\n};\n\nconst Row = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n  color: ${p => p.theme.subText};\n`;\n\nconst StyledDeployBadge = styled(DeployBadge)`\n  margin-right: ${space(1)};\n`;\n\nexport default Deploys;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Button from 'sentry/components/button';\nimport Collapsible from 'sentry/components/collapsible';\nimport IdBadge from 'sentry/components/idBadge';\nimport {extractSelectionParameters} from 'sentry/components/organizations/pageFilters/utils';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, ReleaseProject} from 'sentry/types';\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: ReleaseProject[];\n  version: string;\n};\n\nfunction OtherProjects({projects, location, version, organization}: Props) {\n  return (\n    <SidebarSection\n      title={tn(\n        'Other Project for This Release',\n        'Other Projects for This Release',\n        projects.length\n      )}\n    >\n      <Collapsible\n        expandButton={({onExpand, numberOfHiddenItems}) => (\n          <Button priority=\"link\" onClick={onExpand}>\n            {tn(\n              'Show %s collapsed project',\n              'Show %s collapsed projects',\n              numberOfHiddenItems\n            )}\n          </Button>\n        )}\n      >\n        {projects.map(project => (\n          <Row key={project.id}>\n            <IdBadge project={project} avatarSize={16} />\n            <Button\n              size=\"xsmall\"\n              to={{\n                pathname: `/organizations/${\n                  organization.slug\n                }/releases/${encodeURIComponent(version)}/`,\n                query: {\n                  ...extractSelectionParameters(location.query),\n                  project: project.id,\n                  yAxis: undefined,\n                },\n              }}\n            >\n              {t('View')}\n            </Button>\n          </Row>\n        ))}\n      </Collapsible>\n    </SidebarSection>\n  );\n}\n\nconst Row = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(0.75)};\n  font-size: ${p => p.theme.fontSizeMedium};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) and (max-width: ${p =>\n      p.theme.breakpoints.large}) {\n    grid-template-columns: 200px max-content;\n  }\n`;\n\nexport default OtherProjects;\n","import styled from '@emotion/styled';\n\nimport Count from 'sentry/components/count';\nimport DateTime from 'sentry/components/dateTime';\nimport {KeyValueTable, KeyValueTableRow} from 'sentry/components/keyValueTable';\nimport Link from 'sentry/components/links/link';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport TimeSince from 'sentry/components/timeSince';\nimport Version from 'sentry/components/version';\nimport {t, tn} from 'sentry/locale';\nimport {ReleaseMeta, ReleaseWithHealth} from 'sentry/types';\n\ntype Props = {\n  orgSlug: string;\n  projectSlug: string;\n  release: ReleaseWithHealth;\n  releaseMeta: ReleaseMeta;\n};\n\nconst ProjectReleaseDetails = ({release, releaseMeta, orgSlug, projectSlug}: Props) => {\n  const {version, versionInfo, dateCreated, firstEvent, lastEvent} = release;\n\n  return (\n    <SidebarSection title={t('Project Release Details')}>\n      <KeyValueTable>\n        <KeyValueTableRow\n          keyName={t('Created')}\n          value={<DateTime date={dateCreated} seconds={false} />}\n        />\n        <KeyValueTableRow\n          keyName={t('Version')}\n          value={<Version version={version} anchor={false} />}\n        />\n        <KeyValueTableRow\n          keyName={t('Package')}\n          value={\n            <StyledTextOverflow ellipsisDirection=\"left\">\n              {versionInfo.package ?? '\\u2014'}\n            </StyledTextOverflow>\n          }\n        />\n        <KeyValueTableRow\n          keyName={t('First Event')}\n          value={firstEvent ? <TimeSince date={firstEvent} /> : '\\u2014'}\n        />\n        <KeyValueTableRow\n          keyName={t('Last Event')}\n          value={lastEvent ? <TimeSince date={lastEvent} /> : '\\u2014'}\n        />\n        <KeyValueTableRow\n          keyName={t('Source Maps')}\n          value={\n            <Link\n              to={`/settings/${orgSlug}/projects/${projectSlug}/source-maps/${encodeURIComponent(\n                version\n              )}/`}\n            >\n              <Count value={releaseMeta.releaseFileCount} />{' '}\n              {tn('artifact', 'artifacts', releaseMeta.releaseFileCount)}\n            </Link>\n          }\n        />\n      </KeyValueTable>\n    </SidebarSection>\n  );\n};\n\nconst StyledTextOverflow = styled(TextOverflow)`\n  line-height: inherit;\n  text-align: right;\n`;\n\nexport default ProjectReleaseDetails;\n","import {withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport NotAvailable from 'sentry/components/notAvailable';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport Tag from 'sentry/components/tag';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  ReleaseProject,\n  ReleaseWithHealth,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n} from 'sentry/types';\nimport {formatAbbreviatedNumber} from 'sentry/utils/formatters';\nimport {getAdoptionSeries, getCount, getCountAtIndex} from 'sentry/utils/sessions';\n\nimport {\n  ADOPTION_STAGE_LABELS,\n  getReleaseBounds,\n  getReleaseParams,\n  isMobileRelease,\n} from '../../../utils';\nimport {generateReleaseMarkLines, releaseMarkLinesLabels} from '../../utils';\n\nconst sessionsAxisIndex = 0;\nconst usersAxisIndex = 1;\nconst axisIndexToSessionsField = {\n  [sessionsAxisIndex]: SessionFieldWithOperation.SESSIONS,\n  [usersAxisIndex]: SessionFieldWithOperation.USERS,\n};\n\ntype Props = {\n  allSessions: SessionApiResponse | null;\n  environment: string[];\n  errored: boolean;\n  loading: boolean;\n  project: ReleaseProject;\n  release: ReleaseWithHealth;\n  releaseSessions: SessionApiResponse | null;\n  reloading: boolean;\n} & WithRouterProps;\n\nfunction ReleaseAdoption({\n  release,\n  project,\n  environment,\n  releaseSessions,\n  allSessions,\n  loading,\n  reloading,\n  errored,\n  router,\n  location,\n}: Props) {\n  const theme = useTheme();\n\n  const hasUsers = !!getCount(releaseSessions?.groups, SessionFieldWithOperation.USERS);\n\n  function getSeries() {\n    if (!releaseSessions) {\n      return [];\n    }\n\n    const sessionsMarkLines = generateReleaseMarkLines(\n      release,\n      project,\n      theme,\n      location,\n      {\n        hideLabel: true,\n        axisIndex: sessionsAxisIndex,\n      }\n    );\n\n    const series = [\n      ...sessionsMarkLines,\n      {\n        seriesName: t('Sessions'),\n        connectNulls: true,\n        yAxisIndex: sessionsAxisIndex,\n        xAxisIndex: sessionsAxisIndex,\n        data: getAdoptionSeries(\n          releaseSessions.groups,\n          allSessions?.groups,\n          releaseSessions.intervals,\n          SessionFieldWithOperation.SESSIONS\n        ),\n      },\n    ];\n\n    if (hasUsers) {\n      const usersMarkLines = generateReleaseMarkLines(release, project, theme, location, {\n        hideLabel: true,\n        axisIndex: usersAxisIndex,\n      });\n\n      series.push(...usersMarkLines);\n      series.push({\n        seriesName: t('Users'),\n        connectNulls: true,\n        yAxisIndex: usersAxisIndex,\n        xAxisIndex: usersAxisIndex,\n        data: getAdoptionSeries(\n          releaseSessions.groups,\n          allSessions?.groups,\n          releaseSessions.intervals,\n          SessionFieldWithOperation.USERS\n        ),\n      });\n    }\n\n    return series;\n  }\n\n  const colors = theme.charts.getColorPalette(2);\n\n  const axisLineConfig = {\n    scale: true,\n    axisLine: {\n      show: false,\n    },\n    axisTick: {\n      show: false,\n    },\n    splitLine: {\n      show: false,\n    },\n    max: 100,\n    axisLabel: {\n      formatter: (value: number) => `${value}%`,\n      color: theme.chartLabel,\n    },\n  };\n\n  const chartOptions: Omit<LineChartProps, 'series' | 'ref'> = {\n    height: hasUsers ? 280 : 140,\n    grid: [\n      {\n        top: '40px',\n        left: '10px',\n        right: '10px',\n        height: '100px',\n      },\n      {\n        top: '180px',\n        left: '10px',\n        right: '10px',\n        height: '100px',\n      },\n    ],\n    axisPointer: {\n      // Link each x-axis together.\n      link: [{xAxisIndex: [sessionsAxisIndex, usersAxisIndex]}],\n    },\n    xAxes: Array.from(new Array(2)).map((_i, index) => ({\n      gridIndex: index,\n      type: 'time' as const,\n      show: false,\n    })),\n    yAxes: [\n      {\n        gridIndex: sessionsAxisIndex,\n        ...axisLineConfig,\n      },\n      {\n        gridIndex: usersAxisIndex,\n        ...axisLineConfig,\n      },\n    ],\n    // utc: utc === 'true', //TODO(release-comparison)\n    isGroupedByDate: true,\n    showTimeInTooltip: true,\n    colors: [colors[0], colors[1]] as string[],\n    tooltip: {\n      trigger: 'axis' as const,\n      truncate: 80,\n      valueFormatter: (value, label, seriesParams: any) => {\n        const {axisIndex, dataIndex} = seriesParams || {};\n        const absoluteCount = getCountAtIndex(\n          releaseSessions?.groups,\n          axisIndexToSessionsField[axisIndex ?? 0],\n          dataIndex ?? 0\n        );\n\n        return label && Object.values(releaseMarkLinesLabels).includes(label)\n          ? ''\n          : `<span>${formatAbbreviatedNumber(absoluteCount)} <span style=\"color: ${\n              theme.textColor\n            };margin-left: ${space(0.5)}\">${value}%</span></span>`;\n      },\n      filter: (_, seriesParam: any) => {\n        const {seriesName, axisIndex} = seriesParam;\n        // do not display tooltips for \"Users Adopted\" marklines\n        if (\n          axisIndex === usersAxisIndex &&\n          Object.values(releaseMarkLinesLabels).includes(seriesName)\n        ) {\n          return false;\n        }\n        return true;\n      },\n    },\n  };\n\n  const {\n    statsPeriod: period,\n    start,\n    end,\n    utc,\n  } = getReleaseParams({\n    location,\n    releaseBounds: getReleaseBounds(release),\n  });\n\n  const adoptionStage = release.adoptionStages?.[project.slug]?.stage;\n  const adoptionStageLabel = ADOPTION_STAGE_LABELS[adoptionStage];\n  const multipleEnvironments = environment.length === 0 || environment.length > 1;\n\n  return (\n    <div>\n      {isMobileRelease(project.platform) && (\n        <SidebarSection\n          title={t('Adoption Stage')}\n          icon={\n            multipleEnvironments && (\n              <QuestionTooltip\n                position=\"top\"\n                title={t(\n                  'See if a release has low adoption, been adopted by users, or replaced by another release. Select an environment above to view the stage this release is in.'\n                )}\n                size=\"sm\"\n              />\n            )\n          }\n        >\n          {adoptionStageLabel && !multipleEnvironments ? (\n            <div>\n              <Tooltip title={adoptionStageLabel.tooltipTitle} isHoverable>\n                <Tag type={adoptionStageLabel.type}>{adoptionStageLabel.name}</Tag>\n              </Tooltip>\n              <AdoptionEnvironment>\n                {tct(`in [environment]`, {environment})}\n              </AdoptionEnvironment>\n            </div>\n          ) : (\n            <NotAvailableWrapper>\n              <NotAvailable />\n            </NotAvailableWrapper>\n          )}\n        </SidebarSection>\n      )}\n      <RelativeBox>\n        {!loading && (\n          <ChartLabel top=\"0px\">\n            <ChartTitle\n              title={t('Sessions Adopted')}\n              icon={\n                <QuestionTooltip\n                  position=\"top\"\n                  title={t(\n                    'Adoption compares the sessions of a release with the total sessions for this project.'\n                  )}\n                  size=\"sm\"\n                />\n              }\n            />\n          </ChartLabel>\n        )}\n\n        {!loading && hasUsers && (\n          <ChartLabel top=\"140px\">\n            <ChartTitle\n              title={t('Users Adopted')}\n              icon={\n                <QuestionTooltip\n                  position=\"top\"\n                  title={t(\n                    'Adoption compares the users of a release with the total users for this project.'\n                  )}\n                  size=\"sm\"\n                />\n              }\n            />\n          </ChartLabel>\n        )}\n\n        {errored ? (\n          <ErrorPanel height=\"280px\">\n            <IconWarning color=\"gray300\" size=\"lg\" />\n          </ErrorPanel>\n        ) : (\n          <TransitionChart loading={loading} reloading={reloading} height=\"280px\">\n            <TransparentLoadingMask visible={reloading} />\n            <ChartZoom\n              router={router}\n              period={period ?? undefined}\n              utc={utc === 'true'}\n              start={start}\n              end={end}\n              usePageDate\n              xAxisIndex={[sessionsAxisIndex, usersAxisIndex]}\n            >\n              {zoomRenderProps => (\n                <LineChart\n                  {...chartOptions}\n                  {...zoomRenderProps}\n                  series={getSeries()}\n                  transformSinglePointToLine\n                />\n              )}\n            </ChartZoom>\n          </TransitionChart>\n        )}\n      </RelativeBox>\n    </div>\n  );\n}\n\nconst NotAvailableWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AdoptionEnvironment = styled('span')`\n  color: ${p => p.theme.textColor};\n  margin-left: ${space(0.5)};\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst RelativeBox = styled('div')`\n  position: relative;\n`;\n\nconst ChartTitle = styled(SidebarSection)`\n  margin: 0;\n`;\n\nconst ChartLabel = styled('div')<{top: string}>`\n  position: absolute;\n  top: ${p => p.top};\n  z-index: 1;\n  left: 0;\n  right: 0;\n`;\n\nexport default withRouter(ReleaseAdoption);\n","import styled from '@emotion/styled';\n\nimport DeployBadge from 'sentry/components/deployBadge';\nimport NotAvailable from 'sentry/components/notAvailable';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Release, ReleaseProject} from 'sentry/types';\n\ntype Props = {\n  organization: Organization;\n  project: Required<ReleaseProject>;\n  release: Release;\n};\n\nfunction ReleaseStats({organization, release, project}: Props) {\n  const {lastDeploy, dateCreated, version} = release;\n\n  return (\n    <Container>\n      <SidebarSection\n        title={lastDeploy?.dateFinished ? t('Date Deployed') : t('Date Created')}\n      >\n        <TimeSince date={lastDeploy?.dateFinished ?? dateCreated} />\n      </SidebarSection>\n\n      <SidebarSection title={t('Last Deploy')}>\n        {lastDeploy?.dateFinished ? (\n          <DeployBadge\n            deploy={lastDeploy}\n            orgSlug={organization.slug}\n            version={version}\n            projectId={project.id}\n          />\n        ) : (\n          <NotAvailable />\n        )}\n      </SidebarSection>\n    </Container>\n  );\n}\n\nconst Container = styled('div')`\n  display: grid;\n  grid-template-columns: 50% 50%;\n  grid-row-gap: ${space(2)};\n`;\n\nexport default ReleaseStats;\n","import styled from '@emotion/styled';\nimport {Location} from 'history';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Count from 'sentry/components/count';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport SidebarSection from 'sentry/components/sidebarSection';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {t, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {CrashFreeTimeBreakdown, Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nimport {displayCrashFreePercent} from '../../../utils';\n\ntype Props = AsyncComponent['props'] & {\n  location: Location;\n  organization: Organization;\n  projectSlug: string;\n  version: string;\n};\n\ntype State = AsyncComponent['state'] & {\n  releaseStats?: {usersBreakdown: CrashFreeTimeBreakdown} | null;\n};\n\nclass TotalCrashFreeUsers extends AsyncComponent<Props, State> {\n  shouldReload = true;\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {location, organization, projectSlug, version} = this.props;\n\n    return [\n      [\n        'releaseStats',\n        `/projects/${organization.slug}/${projectSlug}/releases/${encodeURIComponent(\n          version\n        )}/stats/`,\n        {\n          query: {\n            ...normalizeDateTimeParams(\n              pick(location.query, [URL_PARAM.PROJECT, URL_PARAM.ENVIRONMENT])\n            ),\n            type: 'sessions',\n          },\n        },\n      ],\n    ];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.version !== this.props.version) {\n      this.remountComponent();\n    }\n  }\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderBody() {\n    const crashFreeTimeBreakdown = this.state.releaseStats?.usersBreakdown;\n\n    if (!crashFreeTimeBreakdown?.length) {\n      return null;\n    }\n\n    const timeline = crashFreeTimeBreakdown\n      .map(({date, crashFreeUsers, totalUsers}, index, data) => {\n        // count number of crash free users from knowing percent and total\n        const crashFreeUserCount = Math.round(((crashFreeUsers ?? 0) * totalUsers) / 100);\n        // first item of timeline is release creation date, then we want to have relative date label\n        const dateLabel =\n          index === 0\n            ? t('Release created')\n            : `${moment(data[0].date).from(date, true)} ${t('later')}`;\n\n        return {date: moment(date), dateLabel, crashFreeUsers, crashFreeUserCount};\n      })\n      // remove those timeframes that are in the future\n      .filter(item => item.date.isBefore())\n      // we want timeline to go from bottom to up\n      .reverse();\n\n    if (!timeline.length) {\n      return null;\n    }\n\n    return (\n      <SidebarSection title={t('Total Crash Free Users')}>\n        <Timeline>\n          {timeline.map(row => (\n            <Row key={row.date.toString()}>\n              <InnerRow>\n                <Text bold>{row.date.format('MMMM D')}</Text>\n                <Text bold right>\n                  <Count value={row.crashFreeUserCount} />{' '}\n                  {tn('user', 'users', row.crashFreeUserCount)}\n                </Text>\n              </InnerRow>\n              <InnerRow>\n                <Text>{row.dateLabel}</Text>\n                <Percent right>\n                  {defined(row.crashFreeUsers)\n                    ? displayCrashFreePercent(row.crashFreeUsers)\n                    : '-'}\n                </Percent>\n              </InnerRow>\n            </Row>\n          ))}\n        </Timeline>\n      </SidebarSection>\n    );\n  }\n}\n\nconst Timeline = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  line-height: 1.2;\n`;\n\nconst DOT_SIZE = 10;\nconst Row = styled('div')`\n  border-left: 1px solid ${p => p.theme.border};\n  padding-left: ${space(2)};\n  padding-bottom: ${space(1)};\n  margin-left: ${space(1)};\n  position: relative;\n\n  &:before {\n    content: '';\n    width: ${DOT_SIZE}px;\n    height: ${DOT_SIZE}px;\n    border-radius: 100%;\n    background-color: ${p => p.theme.purple300};\n    position: absolute;\n    top: 0;\n    left: -${Math.floor(DOT_SIZE / 2)}px;\n  }\n\n  &:last-child {\n    border-left: 0;\n  }\n`;\nconst InnerRow = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(2)};\n  grid-auto-flow: column;\n  grid-auto-columns: 1fr;\n\n  padding-bottom: ${space(0.5)};\n`;\n\nconst Text = styled('div')<{bold?: boolean; right?: boolean}>`\n  text-align: ${p => (p.right ? 'right' : 'left')};\n  color: ${p => (p.bold ? p.theme.textColor : p.theme.gray300)};\n  padding-bottom: ${space(0.25)};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst Percent = styled(Text)`\n  font-variant-numeric: tabular-nums;\n`;\n\nexport default TotalCrashFreeUsers;\n","import {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport NotAvailable from 'sentry/components/notAvailable';\nimport Placeholder from 'sentry/components/placeholder';\nimport Radio from 'sentry/components/radio';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {ReleaseComparisonChartType} from 'sentry/types';\nimport {defined} from 'sentry/utils';\n\nimport {releaseComparisonChartLabels} from '../../utils';\n\nimport {ReleaseComparisonRow} from '.';\n\ntype Props = Omit<ReleaseComparisonRow, 'diffDirection' | 'diffColor'> & {\n  activeChart: ReleaseComparisonChartType;\n  chartDiff: React.ReactNode;\n  expanded: boolean;\n  onChartChange: (type: ReleaseComparisonChartType) => void;\n  onExpanderToggle: (type: ReleaseComparisonChartType) => void;\n  showPlaceholders: boolean;\n  withExpanders: boolean;\n};\n\nfunction ReleaseComparisonChartRow({\n  type,\n  role,\n  drilldown,\n  thisRelease,\n  allReleases,\n  diff,\n  showPlaceholders,\n  activeChart,\n  chartDiff,\n  onChartChange,\n  onExpanderToggle,\n  expanded,\n  withExpanders,\n}: Props) {\n  return (\n    <ChartTableRow\n      htmlFor={type}\n      isActive={type === activeChart}\n      isLoading={showPlaceholders}\n      role={role}\n      expanded={expanded}\n    >\n      <DescriptionCell>\n        <TitleWrapper>\n          <Radio\n            id={type}\n            disabled={false}\n            checked={type === activeChart}\n            onChange={() => onChartChange(type)}\n          />\n          {releaseComparisonChartLabels[type]}&nbsp;{drilldown}\n        </TitleWrapper>\n      </DescriptionCell>\n      <NumericCell>\n        {showPlaceholders ? (\n          <Placeholder height=\"20px\" />\n        ) : defined(allReleases) ? (\n          allReleases\n        ) : (\n          <NotAvailable />\n        )}\n      </NumericCell>\n      <NumericCell>\n        {showPlaceholders ? (\n          <Placeholder height=\"20px\" />\n        ) : defined(thisRelease) ? (\n          thisRelease\n        ) : (\n          <NotAvailable />\n        )}\n      </NumericCell>\n      <NumericCell>\n        {showPlaceholders ? (\n          <Placeholder height=\"20px\" />\n        ) : defined(diff) ? (\n          chartDiff\n        ) : (\n          <NotAvailable />\n        )}\n      </NumericCell>\n      {withExpanders && (\n        <ExpanderCell>\n          {role === 'parent' && (\n            <ToggleButton\n              onClick={() => onExpanderToggle(type)}\n              borderless\n              size=\"zero\"\n              icon={<IconChevron direction={expanded ? 'up' : 'down'} />}\n              aria-label={t('Toggle chart group')}\n            />\n          )}\n        </ExpanderCell>\n      )}\n    </ChartTableRow>\n  );\n}\n\nconst Cell = styled('div')`\n  text-align: right;\n  color: ${p => p.theme.subText};\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst NumericCell = styled(Cell)`\n  font-variant-numeric: tabular-nums;\n`;\n\nconst DescriptionCell = styled(Cell)`\n  text-align: left;\n  overflow: visible;\n  color: ${p => p.theme.textColor};\n`;\n\nconst ExpanderCell = styled(Cell)`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nconst TitleWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  position: relative;\n  z-index: 1;\n  background: ${p => p.theme.background};\n\n  input {\n    width: ${space(2)};\n    height: ${space(2)};\n    flex-shrink: 0;\n    background-color: ${p => p.theme.background};\n    margin-right: ${space(1)} !important;\n\n    &:checked:after {\n      width: ${space(1)};\n      height: ${space(1)};\n    }\n\n    &:hover {\n      cursor: pointer;\n    }\n  }\n`;\n\nconst ChartTableRow = styled('label')<{\n  expanded: boolean;\n  isActive: boolean;\n  isLoading: boolean;\n  role: ReleaseComparisonRow['role'];\n}>`\n  display: contents;\n  font-weight: 400;\n  margin-bottom: 0;\n\n  > * {\n    padding: ${space(1)} ${space(2)};\n  }\n\n  ${p =>\n    p.isActive &&\n    !p.isLoading &&\n    css`\n      ${Cell}, ${NumericCell}, ${DescriptionCell}, ${TitleWrapper}, ${ExpanderCell} {\n        background-color: ${p.theme.bodyBackground};\n      }\n    `}\n\n  &:hover {\n    cursor: pointer;\n    ${/* sc-selector */ Cell}, ${/* sc-selector */ NumericCell}, ${\n      /* sc-selector */ DescriptionCell\n    },${/* sc-selector */ ExpanderCell}, ${/* sc-selector */ TitleWrapper} {\n      ${p => !p.isLoading && `background-color: ${p.theme.bodyBackground}`}\n    }\n  }\n\n  ${p =>\n    (p.role === 'default' || (p.role === 'parent' && !p.expanded)) &&\n    css`\n      &:not(:last-child) {\n        ${Cell}, ${NumericCell}, ${DescriptionCell}, ${ExpanderCell} {\n          border-bottom: 1px solid ${p.theme.border};\n        }\n      }\n    `}\n\n  ${p =>\n    p.role === 'children' &&\n    css`\n      ${DescriptionCell} {\n        padding-left: 44px;\n        position: relative;\n        &:before {\n          content: '';\n          width: 15px;\n          height: 36px;\n          position: absolute;\n          top: -17px;\n          left: 24px;\n          border-bottom: 1px solid ${p.theme.border};\n          border-left: 1px solid ${p.theme.border};\n        }\n      }\n    `}\n\n    ${p =>\n    p.role === 'children' &&\n    css`\n      ${Cell}, ${NumericCell}, ${DescriptionCell}, ${ExpanderCell} {\n        padding-bottom: ${space(0.75)};\n        padding-top: ${space(0.75)};\n        border-bottom: 0;\n      }\n    `}\n`;\n\nconst ToggleButton = styled(Button)`\n  &,\n  &:hover,\n  &:focus,\n  &:active {\n    background: transparent;\n  }\n`;\n\nexport default ReleaseComparisonChartRow;\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport type {ToolboxComponentOption} from 'echarts';\n\nimport {Client} from 'sentry/api';\nimport EventsChart from 'sentry/components/charts/eventsChart';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {HeaderTitleLegend, HeaderValue} from 'sentry/components/charts/styles';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {t} from 'sentry/locale';\nimport {\n  Organization,\n  ReleaseComparisonChartType,\n  ReleaseProject,\n  ReleaseWithHealth,\n} from 'sentry/types';\nimport {tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {getTermHelp, PERFORMANCE_TERM} from 'sentry/views/performance/data';\n\nimport {\n  generateReleaseMarkLines,\n  releaseComparisonChartTitles,\n  releaseMarkLinesLabels,\n} from '../../utils';\n\ntype Props = WithRouterProps & {\n  chartType: ReleaseComparisonChartType;\n  diff: React.ReactNode;\n  organization: Organization;\n  project: ReleaseProject;\n  release: ReleaseWithHealth;\n  value: React.ReactNode;\n  end?: string;\n  period?: string | null;\n  start?: string;\n  utc?: boolean;\n};\n\nfunction ReleaseEventsChart({\n  release,\n  project,\n  chartType,\n  value,\n  diff,\n  organization,\n  router,\n  period,\n  start,\n  end,\n  utc,\n  location,\n}: Props) {\n  const api = useApi();\n  const theme = useTheme();\n\n  function getColors() {\n    const colors = theme.charts.getColorPalette(14);\n    switch (chartType) {\n      case ReleaseComparisonChartType.ERROR_COUNT:\n        return [colors[12]];\n      case ReleaseComparisonChartType.TRANSACTION_COUNT:\n        return [colors[0]];\n      case ReleaseComparisonChartType.FAILURE_RATE:\n        return [colors[9]];\n      default:\n        return undefined;\n    }\n  }\n\n  function getQuery() {\n    const releaseFilter = `release:${release.version}`;\n\n    switch (chartType) {\n      case ReleaseComparisonChartType.ERROR_COUNT:\n        return new MutableSearch([\n          '!event.type:transaction',\n          releaseFilter,\n        ]).formatString();\n      case ReleaseComparisonChartType.TRANSACTION_COUNT:\n        return new MutableSearch([\n          'event.type:transaction',\n          releaseFilter,\n        ]).formatString();\n      case ReleaseComparisonChartType.FAILURE_RATE:\n        return new MutableSearch([\n          'event.type:transaction',\n          releaseFilter,\n        ]).formatString();\n      default:\n        return '';\n    }\n  }\n\n  function getField() {\n    switch (chartType) {\n      case ReleaseComparisonChartType.ERROR_COUNT:\n        return ['count()'];\n      case ReleaseComparisonChartType.TRANSACTION_COUNT:\n        return ['count()'];\n      case ReleaseComparisonChartType.FAILURE_RATE:\n        return ['failure_rate()'];\n      default:\n        return undefined;\n    }\n  }\n\n  function getYAxis() {\n    switch (chartType) {\n      case ReleaseComparisonChartType.ERROR_COUNT:\n        return 'count()';\n      case ReleaseComparisonChartType.TRANSACTION_COUNT:\n        return 'count()';\n      case ReleaseComparisonChartType.FAILURE_RATE:\n        return 'failure_rate()';\n      default:\n        return '';\n    }\n  }\n\n  function getHelp() {\n    switch (chartType) {\n      case ReleaseComparisonChartType.FAILURE_RATE:\n        return getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE);\n      default:\n        return null;\n    }\n  }\n\n  const projects = location.query.project;\n  const environments = location.query.environment;\n  const markLines = generateReleaseMarkLines(release, project, theme, location);\n\n  return (\n    /**\n     * EventsRequest is used to fetch the second series of Failure Rate chart.\n     * First one is \"This Release\" - fetched as usual inside EventsChart\n     * component and this one is \"All Releases\" that's shoehorned in place\n     * of Previous Period via previousSeriesTransformer\n     */\n    <EventsRequest\n      organization={organization}\n      api={new Client()}\n      period={period}\n      project={projects}\n      environment={environments}\n      start={start}\n      end={end}\n      interval={getInterval({start, end, period, utc}, 'high')}\n      query=\"event.type:transaction\"\n      includePrevious={false}\n      currentSeriesNames={[t('All Releases')]}\n      yAxis={getYAxis()}\n      field={getField()}\n      confirmedQuery={chartType === ReleaseComparisonChartType.FAILURE_RATE}\n      partial\n      referrer=\"api.releases.release-details-chart\"\n    >\n      {({timeseriesData, loading, reloading}) => (\n        <EventsChart\n          query={getQuery()}\n          yAxis={getYAxis()}\n          field={getField()}\n          colors={getColors()}\n          api={api}\n          router={router}\n          organization={organization}\n          disableReleases\n          disablePrevious\n          showLegend\n          projects={projects}\n          environments={environments}\n          start={start ?? null}\n          end={end ?? null}\n          period={period}\n          utc={utc}\n          currentSeriesName={t('This Release') + (loading || reloading ? ' ' : '')} // HACK: trigger echarts rerender without remounting\n          previousSeriesName={t('All Releases')}\n          disableableSeries={[t('This Release'), t('All Releases')]}\n          chartHeader={\n            <Fragment>\n              <HeaderTitleLegend>\n                {releaseComparisonChartTitles[chartType]}\n                {getHelp() && (\n                  <QuestionTooltip size=\"sm\" position=\"top\" title={getHelp()} />\n                )}\n              </HeaderTitleLegend>\n\n              <HeaderValue>\n                {value} {diff}\n              </HeaderValue>\n            </Fragment>\n          }\n          legendOptions={{\n            right: 10,\n            top: 0,\n            textStyle: {\n              padding: [2, 0, 0, 0],\n            },\n          }}\n          chartOptions={{\n            grid: {left: '10px', right: '10px', top: '70px', bottom: '0px'},\n            tooltip: {\n              trigger: 'axis',\n              truncate: 80,\n              valueFormatter: (val: number, label?: string) => {\n                if (label && Object.values(releaseMarkLinesLabels).includes(label)) {\n                  return '';\n                }\n\n                return tooltipFormatter(val, getYAxis());\n              },\n            } as ToolboxComponentOption,\n          }}\n          usePageZoom\n          height={240}\n          seriesTransformer={series => [...series, ...markLines]}\n          previousSeriesTransformer={series => {\n            if (chartType === ReleaseComparisonChartType.FAILURE_RATE) {\n              return timeseriesData?.[0];\n            }\n            return series;\n          }}\n          referrer=\"api.releases.release-details-chart\"\n        />\n      )}\n    </EventsRequest>\n  );\n}\n\nexport default withOrganization(withRouter(ReleaseEventsChart));\n","import {Component} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport {withTheme} from '@emotion/react';\nimport round from 'lodash/round';\n\nimport {AreaChart, AreaChartProps} from 'sentry/components/charts/areaChart';\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport StackedAreaChart from 'sentry/components/charts/stackedAreaChart';\nimport {HeaderTitleLegend, HeaderValue} from 'sentry/components/charts/styles';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {t} from 'sentry/locale';\nimport {\n  ReleaseComparisonChartType,\n  ReleaseProject,\n  ReleaseWithHealth,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n  SessionStatus,\n} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getDuration, getExactDuration} from 'sentry/utils/formatters';\nimport {\n  getCountSeries,\n  getCrashFreeRateSeries,\n  getSessionP50Series,\n  getSessionStatusRateSeries,\n  initSessionsChart,\n  MINUTES_THRESHOLD_TO_DISPLAY_SECONDS,\n} from 'sentry/utils/sessions';\nimport {Theme} from 'sentry/utils/theme';\nimport {displayCrashFreePercent, roundDuration} from 'sentry/views/releases/utils';\n\nimport {\n  generateReleaseMarkLines,\n  releaseComparisonChartHelp,\n  releaseComparisonChartTitles,\n  releaseMarkLinesLabels,\n} from '../../utils';\n\ntype Props = {\n  allSessions: SessionApiResponse | null;\n  chartType: ReleaseComparisonChartType;\n  diff: React.ReactNode;\n  loading: boolean;\n  platform: PlatformKey;\n  project: ReleaseProject;\n  release: ReleaseWithHealth;\n  releaseSessions: SessionApiResponse | null;\n  reloading: boolean;\n  theme: Theme;\n  value: React.ReactNode;\n  end?: string;\n  period?: string | null;\n  start?: string;\n  utc?: boolean;\n} & WithRouterProps;\n\nclass ReleaseSessionsChart extends Component<Props> {\n  formatTooltipValue = (value: string | number | null, label?: string) => {\n    if (label && Object.values(releaseMarkLinesLabels).includes(label)) {\n      return '';\n    }\n\n    const {chartType} = this.props;\n    if (value === null) {\n      return '\\u2015';\n    }\n\n    switch (chartType) {\n      case ReleaseComparisonChartType.CRASH_FREE_SESSIONS:\n      case ReleaseComparisonChartType.HEALTHY_SESSIONS:\n      case ReleaseComparisonChartType.ABNORMAL_SESSIONS:\n      case ReleaseComparisonChartType.ERRORED_SESSIONS:\n      case ReleaseComparisonChartType.CRASHED_SESSIONS:\n      case ReleaseComparisonChartType.CRASH_FREE_USERS:\n      case ReleaseComparisonChartType.HEALTHY_USERS:\n      case ReleaseComparisonChartType.ABNORMAL_USERS:\n      case ReleaseComparisonChartType.ERRORED_USERS:\n      case ReleaseComparisonChartType.CRASHED_USERS:\n        return defined(value) ? `${value}%` : '\\u2015';\n      case ReleaseComparisonChartType.SESSION_DURATION:\n        return defined(value) && typeof value === 'number'\n          ? getExactDuration(value, true)\n          : '\\u2015';\n      case ReleaseComparisonChartType.SESSION_COUNT:\n      case ReleaseComparisonChartType.USER_COUNT:\n      default:\n        return typeof value === 'number' ? value.toLocaleString() : value;\n    }\n  };\n\n  getYAxis() {\n    const {theme, chartType} = this.props;\n    switch (chartType) {\n      case ReleaseComparisonChartType.CRASH_FREE_SESSIONS:\n      case ReleaseComparisonChartType.CRASH_FREE_USERS:\n        return {\n          max: 100,\n          scale: true,\n          axisLabel: {\n            formatter: (value: number) => displayCrashFreePercent(value),\n            color: theme.chartLabel,\n          },\n        };\n      case ReleaseComparisonChartType.HEALTHY_SESSIONS:\n      case ReleaseComparisonChartType.ABNORMAL_SESSIONS:\n      case ReleaseComparisonChartType.ERRORED_SESSIONS:\n      case ReleaseComparisonChartType.CRASHED_SESSIONS:\n      case ReleaseComparisonChartType.HEALTHY_USERS:\n      case ReleaseComparisonChartType.ABNORMAL_USERS:\n      case ReleaseComparisonChartType.ERRORED_USERS:\n      case ReleaseComparisonChartType.CRASHED_USERS:\n        return {\n          scale: true,\n          axisLabel: {\n            formatter: (value: number) => `${round(value, 2)}%`,\n            color: theme.chartLabel,\n          },\n        };\n      case ReleaseComparisonChartType.SESSION_DURATION:\n        return {\n          scale: true,\n          axisLabel: {\n            formatter: (value: number) => getDuration(value, undefined, true),\n            color: theme.chartLabel,\n          },\n        };\n      case ReleaseComparisonChartType.SESSION_COUNT:\n      case ReleaseComparisonChartType.USER_COUNT:\n      default:\n        return undefined;\n    }\n  }\n\n  getChart():\n    | React.ComponentType<StackedAreaChart['props']>\n    | React.ComponentType<AreaChartProps> {\n    const {chartType} = this.props;\n    switch (chartType) {\n      case ReleaseComparisonChartType.CRASH_FREE_SESSIONS:\n      case ReleaseComparisonChartType.HEALTHY_SESSIONS:\n      case ReleaseComparisonChartType.ABNORMAL_SESSIONS:\n      case ReleaseComparisonChartType.ERRORED_SESSIONS:\n      case ReleaseComparisonChartType.CRASHED_SESSIONS:\n      case ReleaseComparisonChartType.CRASH_FREE_USERS:\n      case ReleaseComparisonChartType.HEALTHY_USERS:\n      case ReleaseComparisonChartType.ABNORMAL_USERS:\n      case ReleaseComparisonChartType.ERRORED_USERS:\n      case ReleaseComparisonChartType.CRASHED_USERS:\n      default:\n        return AreaChart;\n      case ReleaseComparisonChartType.SESSION_COUNT:\n      case ReleaseComparisonChartType.SESSION_DURATION:\n      case ReleaseComparisonChartType.USER_COUNT:\n        return StackedAreaChart;\n    }\n  }\n\n  getColors() {\n    const {theme, chartType} = this.props;\n    const colors = theme.charts.getColorPalette(14);\n    switch (chartType) {\n      case ReleaseComparisonChartType.CRASH_FREE_SESSIONS:\n        return [colors[0]];\n      case ReleaseComparisonChartType.HEALTHY_SESSIONS:\n        return [theme.green300];\n      case ReleaseComparisonChartType.ABNORMAL_SESSIONS:\n        return [colors[15]];\n      case ReleaseComparisonChartType.ERRORED_SESSIONS:\n        return [colors[12]];\n      case ReleaseComparisonChartType.CRASHED_SESSIONS:\n        return [theme.red300];\n      case ReleaseComparisonChartType.CRASH_FREE_USERS:\n        return [colors[6]];\n      case ReleaseComparisonChartType.HEALTHY_USERS:\n        return [theme.green300];\n      case ReleaseComparisonChartType.ABNORMAL_USERS:\n        return [colors[15]];\n      case ReleaseComparisonChartType.ERRORED_USERS:\n        return [colors[12]];\n      case ReleaseComparisonChartType.CRASHED_USERS:\n        return [theme.red300];\n      case ReleaseComparisonChartType.SESSION_COUNT:\n      case ReleaseComparisonChartType.SESSION_DURATION:\n      case ReleaseComparisonChartType.USER_COUNT:\n      default:\n        return undefined;\n    }\n  }\n\n  getSeries(chartType: ReleaseComparisonChartType) {\n    const {releaseSessions, allSessions, release, location, project, theme} = this.props;\n    const countCharts = initSessionsChart(theme);\n\n    if (!releaseSessions) {\n      return {};\n    }\n\n    const markLines = generateReleaseMarkLines(release, project, theme, location);\n\n    switch (chartType) {\n      case ReleaseComparisonChartType.CRASH_FREE_SESSIONS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getCrashFreeRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getCrashFreeRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.HEALTHY_SESSIONS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.HEALTHY\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.HEALTHY\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.ABNORMAL_SESSIONS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.ABNORMAL\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.ABNORMAL\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.ERRORED_SESSIONS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.ERRORED\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.ERRORED\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.CRASHED_SESSIONS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.CRASHED\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.SESSIONS,\n                SessionStatus.CRASHED\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.CRASH_FREE_USERS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getCrashFreeRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.USERS\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getCrashFreeRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.USERS\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.HEALTHY_USERS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.HEALTHY\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.HEALTHY\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.ABNORMAL_USERS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.ABNORMAL\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.ABNORMAL\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.ERRORED_USERS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.ERRORED\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.ERRORED\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.CRASHED_USERS:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionStatusRateSeries(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.CRASHED\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionStatusRateSeries(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.USERS,\n                SessionStatus.CRASHED\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.SESSION_COUNT:\n        return {\n          series: [\n            {\n              ...countCharts[SessionStatus.HEALTHY],\n              data: getCountSeries(\n                SessionFieldWithOperation.SESSIONS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.HEALTHY\n                ),\n                releaseSessions.intervals\n              ),\n            },\n            {\n              ...countCharts[SessionStatus.ERRORED],\n              data: getCountSeries(\n                SessionFieldWithOperation.SESSIONS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.ERRORED\n                ),\n                releaseSessions.intervals\n              ),\n            },\n            {\n              ...countCharts[SessionStatus.ABNORMAL],\n              data: getCountSeries(\n                SessionFieldWithOperation.SESSIONS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.ABNORMAL\n                ),\n                releaseSessions.intervals\n              ),\n            },\n            {\n              ...countCharts[SessionStatus.CRASHED],\n              data: getCountSeries(\n                SessionFieldWithOperation.SESSIONS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.CRASHED\n                ),\n                releaseSessions.intervals\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.SESSION_DURATION:\n        return {\n          series: [\n            {\n              seriesName: t('This Release'),\n              connectNulls: true,\n              data: getSessionP50Series(\n                releaseSessions?.groups,\n                releaseSessions?.intervals,\n                SessionFieldWithOperation.DURATION,\n                duration => roundDuration(duration / 1000)\n              ),\n            },\n          ],\n          previousSeries: [\n            {\n              seriesName: t('All Releases'),\n              data: getSessionP50Series(\n                allSessions?.groups,\n                allSessions?.intervals,\n                SessionFieldWithOperation.DURATION,\n                duration => roundDuration(duration / 1000)\n              ),\n            },\n          ],\n          markLines,\n        };\n      case ReleaseComparisonChartType.USER_COUNT:\n        return {\n          series: [\n            {\n              ...countCharts[SessionStatus.HEALTHY],\n              data: getCountSeries(\n                SessionFieldWithOperation.USERS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.HEALTHY\n                ),\n                releaseSessions.intervals\n              ),\n            },\n            {\n              ...countCharts[SessionStatus.ERRORED],\n              data: getCountSeries(\n                SessionFieldWithOperation.USERS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.ERRORED\n                ),\n                releaseSessions.intervals\n              ),\n            },\n            {\n              ...countCharts[SessionStatus.ABNORMAL],\n              data: getCountSeries(\n                SessionFieldWithOperation.USERS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.ABNORMAL\n                ),\n                releaseSessions.intervals\n              ),\n            },\n            {\n              ...countCharts[SessionStatus.CRASHED],\n              data: getCountSeries(\n                SessionFieldWithOperation.USERS,\n                releaseSessions.groups.find(\n                  g => g.by['session.status'] === SessionStatus.CRASHED\n                ),\n                releaseSessions.intervals\n              ),\n            },\n          ],\n          markLines,\n        };\n      default:\n        return {};\n    }\n  }\n\n  render() {\n    const {chartType, router, period, start, end, utc, value, diff, loading, reloading} =\n      this.props;\n\n    const Chart = this.getChart();\n    const {series, previousSeries, markLines} = this.getSeries(chartType);\n\n    const legend = {\n      right: 10,\n      top: 0,\n      textStyle: {\n        padding: [2, 0, 0, 0],\n      },\n      data: [...(series ?? []), ...(previousSeries ?? [])].map(s => s.seriesName),\n    };\n\n    return (\n      <TransitionChart loading={loading} reloading={reloading} height=\"240px\">\n        <TransparentLoadingMask visible={reloading} />\n        <HeaderTitleLegend aria-label={t('Chart Title')}>\n          {releaseComparisonChartTitles[chartType]}\n          {releaseComparisonChartHelp[chartType] && (\n            <QuestionTooltip\n              size=\"sm\"\n              position=\"top\"\n              title={releaseComparisonChartHelp[chartType]}\n            />\n          )}\n        </HeaderTitleLegend>\n\n        <HeaderValue aria-label={t('Chart Value')}>\n          {value} {diff}\n        </HeaderValue>\n\n        <ChartZoom\n          router={router}\n          period={period}\n          utc={utc}\n          start={start}\n          end={end}\n          usePageDate\n        >\n          {zoomRenderProps => (\n            <Chart\n              legend={legend}\n              series={[...(series ?? []), ...(markLines ?? [])]}\n              previousPeriod={previousSeries ?? []}\n              {...zoomRenderProps}\n              grid={{\n                left: '10px',\n                right: '10px',\n                top: '70px',\n                bottom: '0px',\n              }}\n              minutesThresholdToDisplaySeconds={MINUTES_THRESHOLD_TO_DISPLAY_SECONDS}\n              yAxis={this.getYAxis()}\n              tooltip={{valueFormatter: this.formatTooltipValue}}\n              colors={this.getColors()}\n              transformSinglePointToBar\n              height={240}\n            />\n          )}\n        </ChartZoom>\n      </TransitionChart>\n    );\n  }\n}\n\nexport default withTheme(withRouter(ReleaseSessionsChart));\n","import {Fragment, useCallback, useEffect, useMemo, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location} from 'history';\n\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {ChartContainer} from 'sentry/components/charts/styles';\nimport Count from 'sentry/components/count';\nimport Duration from 'sentry/components/duration';\nimport GlobalSelectionLink from 'sentry/components/globalSelectionLink';\nimport NotAvailable from 'sentry/components/notAvailable';\nimport {Panel, PanelTable} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {PlatformKey} from 'sentry/data/platformCategories';\nimport {IconArrow, IconChevron, IconList, IconWarning} from 'sentry/icons';\nimport {t, tct, tn} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  Organization,\n  ReleaseComparisonChartType,\n  ReleaseProject,\n  ReleaseWithHealth,\n  SessionApiResponse,\n  SessionFieldWithOperation,\n  SessionStatus,\n} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport {decodeList, decodeScalar} from 'sentry/utils/queryString';\nimport {\n  getCount,\n  getCrashFreeRate,\n  getSeriesAverage,\n  getSessionStatusRate,\n} from 'sentry/utils/sessions';\nimport {Color} from 'sentry/utils/theme';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {\n  displaySessionStatusPercent,\n  getReleaseBounds,\n  getReleaseHandledIssuesUrl,\n  getReleaseParams,\n  getReleaseUnhandledIssuesUrl,\n  roundDuration,\n} from 'sentry/views/releases/utils';\n\nimport ReleaseComparisonChartRow from './releaseComparisonChartRow';\nimport ReleaseEventsChart from './releaseEventsChart';\nimport ReleaseSessionsChart from './releaseSessionsChart';\n\nexport type ReleaseComparisonRow = {\n  allReleases: React.ReactNode;\n  diff: React.ReactNode;\n  diffColor: Color | null;\n  diffDirection: 'up' | 'down' | null;\n  drilldown: React.ReactNode;\n  role: 'parent' | 'children' | 'default';\n  thisRelease: React.ReactNode;\n  type: ReleaseComparisonChartType;\n};\n\ntype Props = {\n  allSessions: SessionApiResponse | null;\n  api: Client;\n  errored: boolean;\n  hasHealthData: boolean;\n  loading: boolean;\n  location: Location;\n  organization: Organization;\n  platform: PlatformKey;\n  project: ReleaseProject;\n  release: ReleaseWithHealth;\n  releaseSessions: SessionApiResponse | null;\n  reloading: boolean;\n};\n\ntype EventsTotals = {\n  allErrorCount: number;\n  allFailureRate: number;\n  allTransactionCount: number;\n  releaseErrorCount: number;\n  releaseFailureRate: number;\n  releaseTransactionCount: number;\n} | null;\n\ntype IssuesTotals = {\n  handled: number;\n  unhandled: number;\n} | null;\n\nfunction ReleaseComparisonChart({\n  release,\n  project,\n  releaseSessions,\n  allSessions,\n  platform,\n  location,\n  loading,\n  reloading,\n  errored,\n  api,\n  organization,\n  hasHealthData,\n}: Props) {\n  const [issuesTotals, setIssuesTotals] = useState<IssuesTotals>(null);\n  const [eventsTotals, setEventsTotals] = useState<EventsTotals>(null);\n  const [eventsLoading, setEventsLoading] = useState(false);\n  const [expanded, setExpanded] = useState(new Set());\n  const [isOtherExpanded, setIsOtherExpanded] = useState(false);\n  const charts: ReleaseComparisonRow[] = [];\n  const additionalCharts: ReleaseComparisonRow[] = [];\n  const hasDiscover =\n    organization.features.includes('discover-basic') ||\n    organization.features.includes('performance-view');\n  const hasPerformance = organization.features.includes('performance-view');\n  const {\n    statsPeriod: period,\n    start,\n    end,\n    utc,\n  } = useMemo(\n    () =>\n      // Memoizing this so that it does not calculate different `end` for releases without events+sessions each rerender\n      getReleaseParams({\n        location,\n        releaseBounds: getReleaseBounds(release),\n      }),\n    [release, location]\n  );\n\n  useEffect(() => {\n    const chartInUrl = decodeScalar(location.query.chart) as ReleaseComparisonChartType;\n    if (\n      [\n        ReleaseComparisonChartType.HEALTHY_SESSIONS,\n        ReleaseComparisonChartType.ABNORMAL_SESSIONS,\n        ReleaseComparisonChartType.ERRORED_SESSIONS,\n        ReleaseComparisonChartType.CRASHED_SESSIONS,\n      ].includes(chartInUrl)\n    ) {\n      setExpanded(e => new Set(e.add(ReleaseComparisonChartType.CRASH_FREE_SESSIONS)));\n    }\n\n    if (\n      [\n        ReleaseComparisonChartType.HEALTHY_USERS,\n        ReleaseComparisonChartType.ABNORMAL_USERS,\n        ReleaseComparisonChartType.ERRORED_USERS,\n        ReleaseComparisonChartType.CRASHED_USERS,\n      ].includes(chartInUrl)\n    ) {\n      setExpanded(e => new Set(e.add(ReleaseComparisonChartType.CRASH_FREE_USERS)));\n    }\n\n    if (\n      [\n        ReleaseComparisonChartType.SESSION_COUNT,\n        ReleaseComparisonChartType.USER_COUNT,\n        ReleaseComparisonChartType.ERROR_COUNT,\n        ReleaseComparisonChartType.TRANSACTION_COUNT,\n      ].includes(chartInUrl)\n    ) {\n      setIsOtherExpanded(true);\n    }\n  }, [location.query.chart]);\n\n  const fetchEventsTotals = useCallback(async () => {\n    const url = `/organizations/${organization.slug}/events/`;\n    const commonQuery = {\n      environment: decodeList(location.query.environment),\n      project: decodeList(location.query.project),\n      start,\n      end,\n      ...(period ? {statsPeriod: period} : {}),\n    };\n\n    setEventsLoading(true);\n\n    try {\n      const [\n        releaseTransactionTotals,\n        allTransactionTotals,\n        releaseErrorTotals,\n        allErrorTotals,\n      ] = await Promise.all([\n        api.requestPromise(url, {\n          query: {\n            field: ['failure_rate()', 'count()'],\n            query: new MutableSearch([\n              'event.type:transaction',\n              `release:${release.version}`,\n            ]).formatString(),\n            ...commonQuery,\n          },\n        }),\n        api.requestPromise(url, {\n          query: {\n            field: ['failure_rate()', 'count()'],\n            query: new MutableSearch(['event.type:transaction']).formatString(),\n            ...commonQuery,\n          },\n        }),\n        api.requestPromise(url, {\n          query: {\n            field: ['count()'],\n            query: new MutableSearch([\n              'event.type:error',\n              `release:${release.version}`,\n            ]).formatString(),\n            ...commonQuery,\n          },\n        }),\n        api.requestPromise(url, {\n          query: {\n            field: ['count()'],\n            query: new MutableSearch(['event.type:error']).formatString(),\n            ...commonQuery,\n          },\n        }),\n      ]);\n\n      setEventsTotals({\n        allErrorCount: allErrorTotals.data[0]['count()'],\n        releaseErrorCount: releaseErrorTotals.data[0]['count()'],\n        allTransactionCount: allTransactionTotals.data[0]['count()'],\n        releaseTransactionCount: releaseTransactionTotals.data[0]['count()'],\n        releaseFailureRate: releaseTransactionTotals.data[0]['failure_rate()'],\n        allFailureRate: allTransactionTotals.data[0]['failure_rate()'],\n      });\n      setEventsLoading(false);\n    } catch (err) {\n      setEventsTotals(null);\n      setEventsLoading(false);\n      Sentry.captureException(err);\n    }\n  }, [\n    api,\n    end,\n    location.query.environment,\n    location.query.project,\n    organization.slug,\n    period,\n    release.version,\n    start,\n  ]);\n\n  const fetchIssuesTotals = useCallback(async () => {\n    const UNHANDLED_QUERY = `release:\"${release.version}\" error.handled:0`;\n    const HANDLED_QUERY = `release:\"${release.version}\" error.handled:1`;\n\n    try {\n      const response = await api.requestPromise(\n        `/organizations/${organization.slug}/issues-count/`,\n        {\n          query: {\n            project: project.id,\n            environment: decodeList(location.query.environment),\n            start,\n            end,\n            ...(period ? {statsPeriod: period} : {}),\n            query: [UNHANDLED_QUERY, HANDLED_QUERY],\n          },\n        }\n      );\n\n      setIssuesTotals({\n        handled: response[HANDLED_QUERY] ?? 0,\n        unhandled: response[UNHANDLED_QUERY] ?? 0,\n      });\n    } catch (err) {\n      setIssuesTotals(null);\n      Sentry.captureException(err);\n    }\n  }, [\n    api,\n    end,\n    location.query.environment,\n    organization.slug,\n    period,\n    project.id,\n    release.version,\n    start,\n  ]);\n\n  useEffect(() => {\n    if (hasDiscover || hasPerformance) {\n      fetchEventsTotals();\n      fetchIssuesTotals();\n    }\n  }, [fetchEventsTotals, fetchIssuesTotals, hasDiscover, hasPerformance]);\n\n  const releaseCrashFreeSessions = getCrashFreeRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.SESSIONS\n  );\n  const allCrashFreeSessions = getCrashFreeRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.SESSIONS\n  );\n  const diffCrashFreeSessions =\n    defined(releaseCrashFreeSessions) && defined(allCrashFreeSessions)\n      ? releaseCrashFreeSessions - allCrashFreeSessions\n      : null;\n\n  const releaseHealthySessions = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.HEALTHY\n  );\n  const allHealthySessions = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.HEALTHY\n  );\n  const diffHealthySessions =\n    defined(releaseHealthySessions) && defined(allHealthySessions)\n      ? releaseHealthySessions - allHealthySessions\n      : null;\n\n  const releaseAbnormalSessions = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.ABNORMAL\n  );\n  const allAbnormalSessions = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.ABNORMAL\n  );\n  const diffAbnormalSessions =\n    defined(releaseAbnormalSessions) && defined(allAbnormalSessions)\n      ? releaseAbnormalSessions - allAbnormalSessions\n      : null;\n\n  const releaseErroredSessions = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.ERRORED\n  );\n  const allErroredSessions = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.ERRORED\n  );\n  const diffErroredSessions =\n    defined(releaseErroredSessions) && defined(allErroredSessions)\n      ? releaseErroredSessions - allErroredSessions\n      : null;\n\n  const releaseCrashedSessions = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.CRASHED\n  );\n  const allCrashedSessions = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.SESSIONS,\n    SessionStatus.CRASHED\n  );\n  const diffCrashedSessions =\n    defined(releaseCrashedSessions) && defined(allCrashedSessions)\n      ? releaseCrashedSessions - allCrashedSessions\n      : null;\n\n  const releaseCrashFreeUsers = getCrashFreeRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.USERS\n  );\n  const allCrashFreeUsers = getCrashFreeRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.USERS\n  );\n  const diffCrashFreeUsers =\n    defined(releaseCrashFreeUsers) && defined(allCrashFreeUsers)\n      ? releaseCrashFreeUsers - allCrashFreeUsers\n      : null;\n\n  const releaseHealthyUsers = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.HEALTHY\n  );\n  const allHealthyUsers = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.HEALTHY\n  );\n  const diffHealthyUsers =\n    defined(releaseHealthyUsers) && defined(allHealthyUsers)\n      ? releaseHealthyUsers - allHealthyUsers\n      : null;\n\n  const releaseAbnormalUsers = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.ABNORMAL\n  );\n  const allAbnormalUsers = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.ABNORMAL\n  );\n  const diffAbnormalUsers =\n    defined(releaseAbnormalUsers) && defined(allAbnormalUsers)\n      ? releaseAbnormalUsers - allAbnormalUsers\n      : null;\n\n  const releaseErroredUsers = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.ERRORED\n  );\n  const allErroredUsers = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.ERRORED\n  );\n  const diffErroredUsers =\n    defined(releaseErroredUsers) && defined(allErroredUsers)\n      ? releaseErroredUsers - allErroredUsers\n      : null;\n\n  const releaseCrashedUsers = getSessionStatusRate(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.CRASHED\n  );\n  const allCrashedUsers = getSessionStatusRate(\n    allSessions?.groups,\n    SessionFieldWithOperation.USERS,\n    SessionStatus.CRASHED\n  );\n  const diffCrashedUsers =\n    defined(releaseCrashedUsers) && defined(allCrashedUsers)\n      ? releaseCrashedUsers - allCrashedUsers\n      : null;\n\n  const releaseSessionsCount = getCount(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.SESSIONS\n  );\n  const allSessionsCount = getCount(\n    allSessions?.groups,\n    SessionFieldWithOperation.SESSIONS\n  );\n\n  const releaseUsersCount = getCount(\n    releaseSessions?.groups,\n    SessionFieldWithOperation.USERS\n  );\n  const allUsersCount = getCount(allSessions?.groups, SessionFieldWithOperation.USERS);\n\n  const sessionDurationTotal = roundDuration(\n    (getSeriesAverage(releaseSessions?.groups, SessionFieldWithOperation.DURATION) ?? 0) /\n      1000\n  );\n  const allSessionDurationTotal = roundDuration(\n    (getSeriesAverage(allSessions?.groups, SessionFieldWithOperation.DURATION) ?? 0) /\n      1000\n  );\n\n  const diffFailure =\n    eventsTotals?.releaseFailureRate && eventsTotals?.allFailureRate\n      ? eventsTotals.releaseFailureRate - eventsTotals.allFailureRate\n      : null;\n\n  if (hasHealthData) {\n    charts.push({\n      type: ReleaseComparisonChartType.CRASH_FREE_SESSIONS,\n      role: 'parent',\n      drilldown: null,\n      thisRelease: defined(releaseCrashFreeSessions)\n        ? displaySessionStatusPercent(releaseCrashFreeSessions)\n        : null,\n      allReleases: defined(allCrashFreeSessions)\n        ? displaySessionStatusPercent(allCrashFreeSessions)\n        : null,\n      diff: defined(diffCrashFreeSessions)\n        ? displaySessionStatusPercent(diffCrashFreeSessions)\n        : null,\n      diffDirection: diffCrashFreeSessions\n        ? diffCrashFreeSessions > 0\n          ? 'up'\n          : 'down'\n        : null,\n      diffColor: diffCrashFreeSessions\n        ? diffCrashFreeSessions > 0\n          ? 'green300'\n          : 'red300'\n        : null,\n    });\n    if (expanded.has(ReleaseComparisonChartType.CRASH_FREE_SESSIONS)) {\n      charts.push(\n        {\n          type: ReleaseComparisonChartType.HEALTHY_SESSIONS,\n          role: 'children',\n          drilldown: null,\n          thisRelease: defined(releaseHealthySessions)\n            ? displaySessionStatusPercent(releaseHealthySessions)\n            : null,\n          allReleases: defined(allHealthySessions)\n            ? displaySessionStatusPercent(allHealthySessions)\n            : null,\n          diff: defined(diffHealthySessions)\n            ? displaySessionStatusPercent(diffHealthySessions)\n            : null,\n          diffDirection: diffHealthySessions\n            ? diffHealthySessions > 0\n              ? 'up'\n              : 'down'\n            : null,\n          diffColor: diffHealthySessions\n            ? diffHealthySessions > 0\n              ? 'green300'\n              : 'red300'\n            : null,\n        },\n        {\n          type: ReleaseComparisonChartType.ABNORMAL_SESSIONS,\n          role: 'children',\n          drilldown: null,\n          thisRelease: defined(releaseAbnormalSessions)\n            ? displaySessionStatusPercent(releaseAbnormalSessions)\n            : null,\n          allReleases: defined(allAbnormalSessions)\n            ? displaySessionStatusPercent(allAbnormalSessions)\n            : null,\n          diff: defined(diffAbnormalSessions)\n            ? displaySessionStatusPercent(diffAbnormalSessions)\n            : null,\n          diffDirection: diffAbnormalSessions\n            ? diffAbnormalSessions > 0\n              ? 'up'\n              : 'down'\n            : null,\n          diffColor: diffAbnormalSessions\n            ? diffAbnormalSessions > 0\n              ? 'red300'\n              : 'green300'\n            : null,\n        },\n        {\n          type: ReleaseComparisonChartType.ERRORED_SESSIONS,\n          role: 'children',\n          drilldown: defined(issuesTotals?.handled) ? (\n            <Tooltip title={t('Open in Issues')}>\n              <GlobalSelectionLink\n                to={getReleaseHandledIssuesUrl(\n                  organization.slug,\n                  project.id,\n                  release.version,\n                  {start, end, period: period ?? undefined}\n                )}\n              >\n                {tct('([count] handled [issues])', {\n                  count: issuesTotals?.handled\n                    ? issuesTotals.handled >= 100\n                      ? '99+'\n                      : issuesTotals.handled\n                    : 0,\n                  issues: tn('issue', 'issues', issuesTotals?.handled),\n                })}\n              </GlobalSelectionLink>\n            </Tooltip>\n          ) : null,\n          thisRelease: defined(releaseErroredSessions)\n            ? displaySessionStatusPercent(releaseErroredSessions)\n            : null,\n          allReleases: defined(allErroredSessions)\n            ? displaySessionStatusPercent(allErroredSessions)\n            : null,\n          diff: defined(diffErroredSessions)\n            ? displaySessionStatusPercent(diffErroredSessions)\n            : null,\n          diffDirection: diffErroredSessions\n            ? diffErroredSessions > 0\n              ? 'up'\n              : 'down'\n            : null,\n          diffColor: diffErroredSessions\n            ? diffErroredSessions > 0\n              ? 'red300'\n              : 'green300'\n            : null,\n        },\n        {\n          type: ReleaseComparisonChartType.CRASHED_SESSIONS,\n          role: 'default',\n          drilldown: defined(issuesTotals?.unhandled) ? (\n            <Tooltip title={t('Open in Issues')}>\n              <GlobalSelectionLink\n                to={getReleaseUnhandledIssuesUrl(\n                  organization.slug,\n                  project.id,\n                  release.version,\n                  {start, end, period: period ?? undefined}\n                )}\n              >\n                {tct('([count] unhandled [issues])', {\n                  count: issuesTotals?.unhandled\n                    ? issuesTotals.unhandled >= 100\n                      ? '99+'\n                      : issuesTotals.unhandled\n                    : 0,\n                  issues: tn('issue', 'issues', issuesTotals?.unhandled),\n                })}\n              </GlobalSelectionLink>\n            </Tooltip>\n          ) : null,\n          thisRelease: defined(releaseCrashedSessions)\n            ? displaySessionStatusPercent(releaseCrashedSessions)\n            : null,\n          allReleases: defined(allCrashedSessions)\n            ? displaySessionStatusPercent(allCrashedSessions)\n            : null,\n          diff: defined(diffCrashedSessions)\n            ? displaySessionStatusPercent(diffCrashedSessions)\n            : null,\n          diffDirection: diffCrashedSessions\n            ? diffCrashedSessions > 0\n              ? 'up'\n              : 'down'\n            : null,\n          diffColor: diffCrashedSessions\n            ? diffCrashedSessions > 0\n              ? 'red300'\n              : 'green300'\n            : null,\n        }\n      );\n    }\n  }\n\n  const hasUsers = !!getCount(releaseSessions?.groups, SessionFieldWithOperation.USERS);\n  if (hasHealthData && (hasUsers || loading)) {\n    charts.push({\n      type: ReleaseComparisonChartType.CRASH_FREE_USERS,\n      role: 'parent',\n      drilldown: null,\n      thisRelease: defined(releaseCrashFreeUsers)\n        ? displaySessionStatusPercent(releaseCrashFreeUsers)\n        : null,\n      allReleases: defined(allCrashFreeUsers)\n        ? displaySessionStatusPercent(allCrashFreeUsers)\n        : null,\n      diff: defined(diffCrashFreeUsers)\n        ? displaySessionStatusPercent(diffCrashFreeUsers)\n        : null,\n      diffDirection: diffCrashFreeUsers ? (diffCrashFreeUsers > 0 ? 'up' : 'down') : null,\n      diffColor: diffCrashFreeUsers\n        ? diffCrashFreeUsers > 0\n          ? 'green300'\n          : 'red300'\n        : null,\n    });\n    if (expanded.has(ReleaseComparisonChartType.CRASH_FREE_USERS)) {\n      charts.push(\n        {\n          type: ReleaseComparisonChartType.HEALTHY_USERS,\n          role: 'children',\n          drilldown: null,\n          thisRelease: defined(releaseHealthyUsers)\n            ? displaySessionStatusPercent(releaseHealthyUsers)\n            : null,\n          allReleases: defined(allHealthyUsers)\n            ? displaySessionStatusPercent(allHealthyUsers)\n            : null,\n          diff: defined(diffHealthyUsers)\n            ? displaySessionStatusPercent(diffHealthyUsers)\n            : null,\n          diffDirection: diffHealthyUsers ? (diffHealthyUsers > 0 ? 'up' : 'down') : null,\n          diffColor: diffHealthyUsers\n            ? diffHealthyUsers > 0\n              ? 'green300'\n              : 'red300'\n            : null,\n        },\n        {\n          type: ReleaseComparisonChartType.ABNORMAL_USERS,\n          role: 'children',\n          drilldown: null,\n          thisRelease: defined(releaseAbnormalUsers)\n            ? displaySessionStatusPercent(releaseAbnormalUsers)\n            : null,\n          allReleases: defined(allAbnormalUsers)\n            ? displaySessionStatusPercent(allAbnormalUsers)\n            : null,\n          diff: defined(diffAbnormalUsers)\n            ? displaySessionStatusPercent(diffAbnormalUsers)\n            : null,\n          diffDirection: diffAbnormalUsers\n            ? diffAbnormalUsers > 0\n              ? 'up'\n              : 'down'\n            : null,\n          diffColor: diffAbnormalUsers\n            ? diffAbnormalUsers > 0\n              ? 'red300'\n              : 'green300'\n            : null,\n        },\n        {\n          type: ReleaseComparisonChartType.ERRORED_USERS,\n          role: 'children',\n          drilldown: null,\n          thisRelease: defined(releaseErroredUsers)\n            ? displaySessionStatusPercent(releaseErroredUsers)\n            : null,\n          allReleases: defined(allErroredUsers)\n            ? displaySessionStatusPercent(allErroredUsers)\n            : null,\n          diff: defined(diffErroredUsers)\n            ? displaySessionStatusPercent(diffErroredUsers)\n            : null,\n          diffDirection: diffErroredUsers ? (diffErroredUsers > 0 ? 'up' : 'down') : null,\n          diffColor: diffErroredUsers\n            ? diffErroredUsers > 0\n              ? 'red300'\n              : 'green300'\n            : null,\n        },\n        {\n          type: ReleaseComparisonChartType.CRASHED_USERS,\n          role: 'default',\n          drilldown: null,\n          thisRelease: defined(releaseCrashedUsers)\n            ? displaySessionStatusPercent(releaseCrashedUsers)\n            : null,\n          allReleases: defined(allCrashedUsers)\n            ? displaySessionStatusPercent(allCrashedUsers)\n            : null,\n          diff: defined(diffCrashedUsers)\n            ? displaySessionStatusPercent(diffCrashedUsers)\n            : null,\n          diffDirection: diffCrashedUsers ? (diffCrashedUsers > 0 ? 'up' : 'down') : null,\n          diffColor: diffCrashedUsers\n            ? diffCrashedUsers > 0\n              ? 'red300'\n              : 'green300'\n            : null,\n        }\n      );\n    }\n  }\n\n  if (hasPerformance) {\n    charts.push({\n      type: ReleaseComparisonChartType.FAILURE_RATE,\n      role: 'default',\n      drilldown: null,\n      thisRelease: eventsTotals?.releaseFailureRate\n        ? formatPercentage(eventsTotals?.releaseFailureRate)\n        : null,\n      allReleases: eventsTotals?.allFailureRate\n        ? formatPercentage(eventsTotals?.allFailureRate)\n        : null,\n      diff: diffFailure ? formatPercentage(Math.abs(diffFailure)) : null,\n      diffDirection: diffFailure ? (diffFailure > 0 ? 'up' : 'down') : null,\n      diffColor: diffFailure ? (diffFailure > 0 ? 'red300' : 'green300') : null,\n    });\n  }\n\n  if (hasHealthData) {\n    charts.push({\n      type: ReleaseComparisonChartType.SESSION_DURATION,\n      role: 'default',\n      drilldown: null,\n      thisRelease: defined(sessionDurationTotal) ? (\n        <Duration seconds={sessionDurationTotal} abbreviation />\n      ) : null,\n      allReleases: defined(allSessionDurationTotal) ? (\n        <Duration seconds={allSessionDurationTotal} abbreviation />\n      ) : null,\n      diff: null,\n      diffDirection: null,\n      diffColor: null,\n    });\n    additionalCharts.push({\n      type: ReleaseComparisonChartType.SESSION_COUNT,\n      role: 'default',\n      drilldown: null,\n      thisRelease: defined(releaseSessionsCount) ? (\n        <Count value={releaseSessionsCount} />\n      ) : null,\n      allReleases: defined(allSessionsCount) ? <Count value={allSessionsCount} /> : null,\n      diff: null,\n      diffDirection: null,\n      diffColor: null,\n    });\n    if (hasUsers || loading) {\n      additionalCharts.push({\n        type: ReleaseComparisonChartType.USER_COUNT,\n        role: 'default',\n        drilldown: null,\n        thisRelease: defined(releaseUsersCount) ? (\n          <Count value={releaseUsersCount} />\n        ) : null,\n        allReleases: defined(allUsersCount) ? <Count value={allUsersCount} /> : null,\n        diff: null,\n        diffDirection: null,\n        diffColor: null,\n      });\n    }\n  }\n\n  if (hasDiscover) {\n    additionalCharts.push({\n      type: ReleaseComparisonChartType.ERROR_COUNT,\n      role: 'default',\n      drilldown: null,\n      thisRelease: defined(eventsTotals?.releaseErrorCount) ? (\n        <Count value={eventsTotals?.releaseErrorCount!} />\n      ) : null,\n      allReleases: defined(eventsTotals?.allErrorCount) ? (\n        <Count value={eventsTotals?.allErrorCount!} />\n      ) : null,\n      diff: null,\n      diffDirection: null,\n      diffColor: null,\n    });\n  }\n\n  if (hasPerformance) {\n    additionalCharts.push({\n      type: ReleaseComparisonChartType.TRANSACTION_COUNT,\n      role: 'default',\n      drilldown: null,\n      thisRelease: defined(eventsTotals?.releaseTransactionCount) ? (\n        <Count value={eventsTotals?.releaseTransactionCount!} />\n      ) : null,\n      allReleases: defined(eventsTotals?.allTransactionCount) ? (\n        <Count value={eventsTotals?.allTransactionCount!} />\n      ) : null,\n      diff: null,\n      diffDirection: null,\n      diffColor: null,\n    });\n  }\n\n  function handleChartChange(chartType: ReleaseComparisonChartType) {\n    browserHistory.push({\n      ...location,\n      query: {\n        ...location.query,\n        chart: chartType,\n      },\n    });\n  }\n\n  function handleExpanderToggle(chartType: ReleaseComparisonChartType) {\n    if (expanded.has(chartType)) {\n      expanded.delete(chartType);\n      setExpanded(new Set(expanded));\n    } else {\n      setExpanded(new Set(expanded.add(chartType)));\n    }\n  }\n\n  function getTableHeaders(withExpanders: boolean) {\n    const headers = [\n      <DescriptionCell key=\"description\">{t('Description')}</DescriptionCell>,\n      <Cell key=\"releases\">{t('All Releases')}</Cell>,\n      <Cell key=\"release\">{t('This Release')}</Cell>,\n      <Cell key=\"change\">{t('Change')}</Cell>,\n    ];\n    if (withExpanders) {\n      headers.push(<Cell key=\"expanders\" />);\n    }\n    return headers;\n  }\n\n  function getChartDiff(\n    diff: ReleaseComparisonRow['diff'],\n    diffColor: ReleaseComparisonRow['diffColor'],\n    diffDirection: ReleaseComparisonRow['diffDirection']\n  ) {\n    return diff ? (\n      <Change color={defined(diffColor) ? diffColor : undefined}>\n        {diff}{' '}\n        {defined(diffDirection) ? (\n          <IconArrow direction={diffDirection} size=\"xs\" />\n        ) : diff === '0%' ? null : (\n          <StyledNotAvailable />\n        )}\n      </Change>\n    ) : null;\n  }\n\n  // if there are no sessions, we do not need to do row toggling because there won't be as many rows\n  if (!hasHealthData) {\n    charts.push(...additionalCharts);\n    additionalCharts.splice(0, additionalCharts.length);\n  }\n\n  let activeChart = decodeScalar(\n    location.query.chart,\n    hasHealthData\n      ? ReleaseComparisonChartType.CRASH_FREE_SESSIONS\n      : hasPerformance\n      ? ReleaseComparisonChartType.FAILURE_RATE\n      : ReleaseComparisonChartType.ERROR_COUNT\n  ) as ReleaseComparisonChartType;\n\n  let chart = [...charts, ...additionalCharts].find(ch => ch.type === activeChart);\n\n  if (!chart) {\n    chart = charts[0];\n    activeChart = charts[0].type;\n  }\n\n  const showPlaceholders = loading || eventsLoading;\n  const withExpanders = hasHealthData || additionalCharts.length > 0;\n\n  if (errored || !chart) {\n    return (\n      <Panel>\n        <ErrorPanel>\n          <IconWarning color=\"gray300\" size=\"lg\" />\n        </ErrorPanel>\n      </Panel>\n    );\n  }\n\n  const titleChartDiff =\n    chart.diff !== '0%' && chart.thisRelease !== '0%'\n      ? getChartDiff(chart.diff, chart.diffColor, chart.diffDirection)\n      : null;\n\n  function renderChartRow({\n    diff,\n    diffColor,\n    diffDirection,\n    ...rest\n  }: ReleaseComparisonRow) {\n    return (\n      <ReleaseComparisonChartRow\n        {...rest}\n        key={rest.type}\n        diff={diff}\n        showPlaceholders={showPlaceholders}\n        activeChart={activeChart}\n        onChartChange={handleChartChange}\n        chartDiff={getChartDiff(diff, diffColor, diffDirection)}\n        onExpanderToggle={handleExpanderToggle}\n        expanded={expanded.has(rest.type)}\n        withExpanders={withExpanders}\n      />\n    );\n  }\n\n  return (\n    <Fragment>\n      <ChartPanel>\n        <ChartContainer>\n          {[\n            ReleaseComparisonChartType.ERROR_COUNT,\n            ReleaseComparisonChartType.TRANSACTION_COUNT,\n            ReleaseComparisonChartType.FAILURE_RATE,\n          ].includes(activeChart)\n            ? getDynamicText({\n                value: (\n                  <ReleaseEventsChart\n                    release={release}\n                    project={project}\n                    chartType={activeChart}\n                    period={period ?? undefined}\n                    start={start}\n                    end={end}\n                    utc={utc === 'true'}\n                    value={chart.thisRelease}\n                    diff={titleChartDiff}\n                  />\n                ),\n                fixed: 'Events Chart',\n              })\n            : getDynamicText({\n                value: (\n                  <ReleaseSessionsChart\n                    releaseSessions={releaseSessions}\n                    allSessions={allSessions}\n                    release={release}\n                    project={project}\n                    chartType={activeChart}\n                    platform={platform}\n                    period={period ?? undefined}\n                    start={start}\n                    end={end}\n                    utc={utc === 'true'}\n                    value={chart.thisRelease}\n                    diff={titleChartDiff}\n                    loading={loading}\n                    reloading={reloading}\n                  />\n                ),\n                fixed: 'Sessions Chart',\n              })}\n        </ChartContainer>\n      </ChartPanel>\n      <ChartTable\n        headers={getTableHeaders(withExpanders)}\n        data-test-id=\"release-comparison-table\"\n        withExpanders={withExpanders}\n      >\n        {charts.map(chartRow => renderChartRow(chartRow))}\n        {isOtherExpanded && additionalCharts.map(chartRow => renderChartRow(chartRow))}\n        {additionalCharts.length > 0 && (\n          <ShowMoreWrapper onClick={() => setIsOtherExpanded(!isOtherExpanded)}>\n            <ShowMoreTitle>\n              <IconList size=\"xs\" />\n              {isOtherExpanded\n                ? tn('Hide %s Other', 'Hide %s Others', additionalCharts.length)\n                : tn('Show %s Other', 'Show %s Others', additionalCharts.length)}\n            </ShowMoreTitle>\n            <ShowMoreButton>\n              <Button\n                borderless\n                size=\"zero\"\n                icon={<IconChevron direction={isOtherExpanded ? 'up' : 'down'} />}\n                aria-label={t('Toggle additional charts')}\n              />\n            </ShowMoreButton>\n          </ShowMoreWrapper>\n        )}\n      </ChartTable>\n    </Fragment>\n  );\n}\n\nconst ChartPanel = styled(Panel)`\n  margin-bottom: 0;\n  border-bottom-left-radius: 0;\n  border-bottom: none;\n  border-bottom-right-radius: 0;\n`;\n\nconst Cell = styled('div')`\n  text-align: right;\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst DescriptionCell = styled(Cell)`\n  text-align: left;\n  overflow: visible;\n`;\n\nconst Change = styled('div')<{color?: Color}>`\n  font-size: ${p => p.theme.fontSizeLarge};\n  ${p => p.color && `color: ${p.theme[p.color]}`}\n`;\n\nconst ChartTable = styled(PanelTable)<{withExpanders: boolean}>`\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  grid-template-columns: minmax(400px, auto) repeat(3, minmax(min-content, 1fr)) ${p =>\n      p.withExpanders ? '75px' : ''};\n\n  > * {\n    border-bottom: 1px solid ${p => p.theme.border};\n  }\n\n  @media (max-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: repeat(4, minmax(min-content, 1fr)) ${p =>\n        p.withExpanders ? '75px' : ''};\n  }\n`;\n\nconst StyledNotAvailable = styled(NotAvailable)`\n  display: inline-block;\n`;\n\nconst ShowMoreWrapper = styled('div')`\n  display: contents;\n  &:hover {\n    cursor: pointer;\n  }\n  > * {\n    padding: ${space(1)} ${space(2)};\n  }\n`;\n\nconst ShowMoreTitle = styled('div')`\n  color: ${p => p.theme.gray300};\n  display: inline-grid;\n  grid-template-columns: auto auto;\n  gap: 10px;\n  align-items: center;\n  justify-content: flex-start;\n  svg {\n    margin-left: ${space(0.25)};\n  }\n`;\n\nconst ShowMoreButton = styled('div')`\n  grid-column: 2 / -1;\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nexport default ReleaseComparisonChart;\n","import {Component, Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport isEqual from 'lodash/isEqual';\nimport * as qs from 'query-string';\n\nimport {Client} from 'sentry/api';\nimport Button, {ButtonLabel} from 'sentry/components/button';\nimport ButtonBar, {ButtonGrid} from 'sentry/components/buttonBar';\nimport GroupList from 'sentry/components/issues/groupList';\nimport Pagination from 'sentry/components/pagination';\nimport QueryCount from 'sentry/components/queryCount';\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, PageFilters} from 'sentry/types';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {IssueSortOptions} from 'sentry/views/issueList/utils';\n\nimport {getReleaseParams, ReleaseBounds} from '../../utils';\nimport EmptyState from '../commitsAndFiles/emptyState';\n\nenum IssuesType {\n  NEW = 'new',\n  UNHANDLED = 'unhandled',\n  REGRESSED = 'regressed',\n  RESOLVED = 'resolved',\n  ALL = 'all',\n}\n\nenum IssuesQuery {\n  NEW = 'first-release',\n  UNHANDLED = 'error.handled:0',\n  REGRESSED = 'regressed_in_release',\n  RESOLVED = 'is:resolved',\n  ALL = 'release',\n}\n\ntype IssuesQueryParams = {\n  limit: number;\n  query: string;\n  sort: string;\n};\n\nconst defaultProps = {\n  withChart: false,\n};\n\ntype Props = {\n  api: Client;\n  location: Location;\n  organization: Organization;\n  releaseBounds: ReleaseBounds;\n  selection: PageFilters;\n  version: string;\n  queryFilterDescription?: string;\n} & Partial<typeof defaultProps>;\n\ntype State = {\n  count: {\n    all: number | null;\n    new: number | null;\n    regressed: number | null;\n    resolved: number | null;\n    unhandled: number | null;\n  };\n  issuesType: IssuesType;\n  onCursor?: () => void;\n  pageLinks?: string;\n};\n\nclass ReleaseIssues extends Component<Props, State> {\n  static defaultProps = defaultProps;\n  state: State = this.getInitialState();\n\n  getInitialState() {\n    const {location} = this.props;\n    const query = location.query ? location.query.issuesType : null;\n    const issuesTypeState = !query\n      ? IssuesType.NEW\n      : query.includes(IssuesType.NEW)\n      ? IssuesType.NEW\n      : query.includes(IssuesType.UNHANDLED)\n      ? IssuesType.REGRESSED\n      : query.includes(IssuesType.REGRESSED)\n      ? IssuesType.UNHANDLED\n      : query.includes(IssuesType.RESOLVED)\n      ? IssuesType.RESOLVED\n      : query.includes(IssuesType.ALL)\n      ? IssuesType.ALL\n      : IssuesType.ALL;\n\n    return {\n      issuesType: issuesTypeState,\n      count: {\n        new: null,\n        all: null,\n        resolved: null,\n        unhandled: null,\n        regressed: null,\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.fetchIssuesCount();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      !isEqual(\n        getReleaseParams({\n          location: this.props.location,\n          releaseBounds: this.props.releaseBounds,\n        }),\n        getReleaseParams({\n          location: prevProps.location,\n          releaseBounds: prevProps.releaseBounds,\n        })\n      )\n    ) {\n      this.fetchIssuesCount();\n    }\n  }\n\n  getIssuesUrl() {\n    const {version, organization} = this.props;\n    const {issuesType} = this.state;\n    const {queryParams} = this.getIssuesEndpoint();\n    const query = new MutableSearch([]);\n\n    switch (issuesType) {\n      case IssuesType.NEW:\n        query.setFilterValues('firstRelease', [version]);\n        break;\n      case IssuesType.UNHANDLED:\n        query.setFilterValues('release', [version]);\n        query.setFilterValues('error.handled', ['0']);\n        break;\n      case IssuesType.REGRESSED:\n        query.setFilterValues('regressed_in_release', [version]);\n        break;\n      case IssuesType.RESOLVED:\n      case IssuesType.ALL:\n      default:\n        query.setFilterValues('release', [version]);\n    }\n\n    return {\n      pathname: `/organizations/${organization.slug}/issues/`,\n      query: {\n        ...queryParams,\n        limit: undefined,\n        cursor: undefined,\n        query: query.formatString(),\n      },\n    };\n  }\n\n  getIssuesEndpoint(): {path: string; queryParams: IssuesQueryParams} {\n    const {version, organization, location, releaseBounds} = this.props;\n    const {issuesType} = this.state;\n\n    const queryParams = {\n      ...getReleaseParams({\n        location,\n        releaseBounds,\n      }),\n      limit: 10,\n      sort: IssueSortOptions.FREQ,\n      groupStatsPeriod: 'auto',\n    };\n\n    switch (issuesType) {\n      case IssuesType.ALL:\n        return {\n          path: `/organizations/${organization.slug}/issues/`,\n          queryParams: {\n            ...queryParams,\n            query: new MutableSearch([`${IssuesQuery.ALL}:${version}`]).formatString(),\n          },\n        };\n      case IssuesType.RESOLVED:\n        return {\n          path: `/organizations/${organization.slug}/releases/${encodeURIComponent(\n            version\n          )}/resolved/`,\n          queryParams: {...queryParams, query: ''},\n        };\n      case IssuesType.UNHANDLED:\n        return {\n          path: `/organizations/${organization.slug}/issues/`,\n          queryParams: {\n            ...queryParams,\n            query: new MutableSearch([\n              `${IssuesQuery.ALL}:${version}`,\n              IssuesQuery.UNHANDLED,\n            ]).formatString(),\n          },\n        };\n      case IssuesType.REGRESSED:\n        return {\n          path: `/organizations/${organization.slug}/issues/`,\n          queryParams: {\n            ...queryParams,\n            query: new MutableSearch([\n              `${IssuesQuery.REGRESSED}:${version}`,\n            ]).formatString(),\n          },\n        };\n      case IssuesType.NEW:\n      default:\n        return {\n          path: `/organizations/${organization.slug}/issues/`,\n          queryParams: {\n            ...queryParams,\n            query: new MutableSearch([`${IssuesQuery.NEW}:${version}`]).formatString(),\n          },\n        };\n    }\n  }\n\n  async fetchIssuesCount() {\n    const {api, organization, version} = this.props;\n    const issueCountEndpoint = this.getIssueCountEndpoint();\n    const resolvedEndpoint = `/organizations/${\n      organization.slug\n    }/releases/${encodeURIComponent(version)}/resolved/`;\n\n    try {\n      await Promise.all([\n        api.requestPromise(issueCountEndpoint),\n        api.requestPromise(resolvedEndpoint),\n      ]).then(([issueResponse, resolvedResponse]) => {\n        this.setState({\n          count: {\n            all: issueResponse[`${IssuesQuery.ALL}:\"${version}\"`] || 0,\n            new: issueResponse[`${IssuesQuery.NEW}:\"${version}\"`] || 0,\n            resolved: resolvedResponse.length,\n            unhandled:\n              issueResponse[`${IssuesQuery.UNHANDLED} ${IssuesQuery.ALL}:\"${version}\"`] ||\n              0,\n            regressed: issueResponse[`${IssuesQuery.REGRESSED}:\"${version}\"`] || 0,\n          },\n        });\n      });\n    } catch {\n      // do nothing\n    }\n  }\n\n  getIssueCountEndpoint() {\n    const {organization, version, location, releaseBounds} = this.props;\n    const issuesCountPath = `/organizations/${organization.slug}/issues-count/`;\n\n    const params = [\n      `${IssuesQuery.NEW}:\"${version}\"`,\n      `${IssuesQuery.ALL}:\"${version}\"`,\n      `${IssuesQuery.UNHANDLED} ${IssuesQuery.ALL}:\"${version}\"`,\n      `${IssuesQuery.REGRESSED}:\"${version}\"`,\n    ];\n    const queryParams = params.map(param => param);\n    const queryParameters = {\n      ...getReleaseParams({\n        location,\n        releaseBounds,\n      }),\n      query: queryParams,\n    };\n\n    return `${issuesCountPath}?${qs.stringify(queryParameters)}`;\n  }\n\n  handleIssuesTypeSelection = (issuesType: IssuesType) => {\n    const {location} = this.props;\n    const issuesTypeQuery =\n      issuesType === IssuesType.ALL\n        ? IssuesType.ALL\n        : issuesType === IssuesType.NEW\n        ? IssuesType.NEW\n        : issuesType === IssuesType.RESOLVED\n        ? IssuesType.RESOLVED\n        : issuesType === IssuesType.UNHANDLED\n        ? IssuesType.UNHANDLED\n        : issuesType === IssuesType.REGRESSED\n        ? IssuesType.REGRESSED\n        : '';\n\n    const to = {\n      ...location,\n      query: {\n        ...location.query,\n        issuesType: issuesTypeQuery,\n      },\n    };\n\n    browserHistory.replace(to);\n    this.setState({issuesType});\n  };\n\n  handleFetchSuccess = (groupListState, onCursor) => {\n    this.setState({pageLinks: groupListState.pageLinks, onCursor});\n  };\n\n  renderEmptyMessage = () => {\n    const {location, releaseBounds} = this.props;\n    const {issuesType} = this.state;\n    const isEntireReleasePeriod =\n      !location.query.pageStatsPeriod && !location.query.pageStart;\n\n    const {statsPeriod} = getReleaseParams({\n      location,\n      releaseBounds,\n    });\n\n    const selectedTimePeriod = statsPeriod ? DEFAULT_RELATIVE_PERIODS[statsPeriod] : null;\n    const displayedPeriod = selectedTimePeriod\n      ? selectedTimePeriod.toLowerCase()\n      : t('given timeframe');\n\n    return (\n      <EmptyState>\n        {issuesType === IssuesType.NEW\n          ? isEntireReleasePeriod\n            ? t('No new issues in this release.')\n            : tct('No new issues for the [timePeriod].', {\n                timePeriod: displayedPeriod,\n              })\n          : null}\n        {issuesType === IssuesType.UNHANDLED\n          ? isEntireReleasePeriod\n            ? t('No unhandled issues in this release.')\n            : tct('No unhandled issues for the [timePeriod].', {\n                timePeriod: displayedPeriod,\n              })\n          : null}\n        {issuesType === IssuesType.REGRESSED\n          ? isEntireReleasePeriod\n            ? t('No regressed issues in this release.')\n            : tct('No regressed issues for the [timePeriod].', {\n                timePeriod: displayedPeriod,\n              })\n          : null}\n        {issuesType === IssuesType.RESOLVED && t('No resolved issues in this release.')}\n        {issuesType === IssuesType.ALL\n          ? isEntireReleasePeriod\n            ? t('No issues in this release')\n            : tct('No issues for the [timePeriod].', {\n                timePeriod: displayedPeriod,\n              })\n          : null}\n      </EmptyState>\n    );\n  };\n\n  render() {\n    const {issuesType, count, pageLinks, onCursor} = this.state;\n    const {organization, queryFilterDescription, withChart} = this.props;\n    const {path, queryParams} = this.getIssuesEndpoint();\n    const issuesTypes = [\n      {value: IssuesType.ALL, label: t('All Issues'), issueCount: count.all},\n      {value: IssuesType.NEW, label: t('New Issues'), issueCount: count.new},\n      {\n        value: IssuesType.UNHANDLED,\n        label: t('Unhandled'),\n        issueCount: count.unhandled,\n      },\n      {\n        value: IssuesType.REGRESSED,\n        label: t('Regressed'),\n        issueCount: count.regressed,\n      },\n      {\n        value: IssuesType.RESOLVED,\n        label: t('Resolved'),\n        issueCount: count.resolved,\n      },\n    ];\n\n    return (\n      <Fragment>\n        <ControlsWrapper>\n          <StyledButtonBar active={issuesType} merged>\n            {issuesTypes.map(({value, label, issueCount}) => (\n              <Button\n                key={value}\n                barId={value}\n                size=\"xsmall\"\n                onClick={() => this.handleIssuesTypeSelection(value)}\n                data-test-id={`filter-${value}`}\n              >\n                {label}\n                <QueryCount count={issueCount} max={99} hideParens hideIfEmpty={false} />\n              </Button>\n            ))}\n          </StyledButtonBar>\n\n          <OpenInButtonBar gap={1}>\n            <Button to={this.getIssuesUrl()} size=\"xsmall\" data-test-id=\"issues-button\">\n              {t('Open in Issues')}\n            </Button>\n\n            <StyledPagination pageLinks={pageLinks} onCursor={onCursor} size=\"xsmall\" />\n          </OpenInButtonBar>\n        </ControlsWrapper>\n        <div data-test-id=\"release-wrapper\">\n          <GroupList\n            orgId={organization.slug}\n            endpointPath={path}\n            queryParams={queryParams}\n            query=\"\"\n            canSelectGroups={false}\n            queryFilterDescription={queryFilterDescription}\n            withChart={withChart}\n            narrowGroups\n            renderEmptyMessage={this.renderEmptyMessage}\n            withPagination={false}\n            onFetchSuccess={this.handleFetchSuccess}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst ControlsWrapper = styled('div')`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    display: block;\n    ${ButtonGrid} {\n      overflow: auto;\n    }\n  }\n`;\n\nconst OpenInButtonBar = styled(ButtonBar)`\n  margin: ${space(1)} 0;\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  grid-template-columns: repeat(4, 1fr);\n  ${ButtonLabel} {\n    white-space: nowrap;\n    gap: ${space(0.5)};\n    span:last-child {\n      color: ${p => p.theme.buttonCount};\n    }\n  }\n  .active {\n    ${ButtonLabel} {\n      span:last-child {\n        color: ${p => p.theme.buttonCountActive};\n      }\n    }\n  }\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0;\n`;\n\nexport default withApi(withOrganization(ReleaseIssues));\n","import {Fragment} from 'react';\nimport {browserHistory, RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location, LocationDescriptor, Query} from 'history';\nimport moment from 'moment';\n\nimport {restoreRelease} from 'sentry/actionCreators/release';\nimport {Client} from 'sentry/api';\nimport Feature from 'sentry/components/acl/feature';\nimport SessionsRequest from 'sentry/components/charts/sessionsRequest';\nimport {DateTimeObject} from 'sentry/components/charts/utils';\nimport DateTime from 'sentry/components/dateTime';\nimport PerformanceCardTable from 'sentry/components/discover/performanceCardTable';\nimport TransactionsList, {\n  DropdownOption,\n} from 'sentry/components/discover/transactionsList';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport {Body, Main, Side} from 'sentry/components/layouts/thirds';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {ChangeData} from 'sentry/components/organizations/timeRangeSelector';\nimport PageTimeRangeSelector from 'sentry/components/pageTimeRangeSelector';\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  NewQuery,\n  Organization,\n  PageFilters,\n  ReleaseProject,\n  SessionFieldWithOperation,\n} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableDataRow} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {formatVersion} from 'sentry/utils/formatters';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport routeTitleGen from 'sentry/utils/routeTitle';\nimport withApi from 'sentry/utils/withApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport AsyncView from 'sentry/views/asyncView';\nimport {DisplayModes} from 'sentry/views/performance/transactionSummary/transactionOverview/charts';\nimport {transactionSummaryRouteWithQuery} from 'sentry/views/performance/transactionSummary/utils';\nimport {TrendChangeType, TrendView} from 'sentry/views/performance/trends/types';\nimport {\n  platformToPerformanceType,\n  PROJECT_PERFORMANCE_TYPE,\n} from 'sentry/views/performance/utils';\n\nimport {getReleaseParams, isReleaseArchived, ReleaseBounds} from '../../utils';\nimport {ReleaseContext} from '..';\n\nimport CommitAuthorBreakdown from './sidebar/commitAuthorBreakdown';\nimport Deploys from './sidebar/deploys';\nimport OtherProjects from './sidebar/otherProjects';\nimport ProjectReleaseDetails from './sidebar/projectReleaseDetails';\nimport ReleaseAdoption from './sidebar/releaseAdoption';\nimport ReleaseStats from './sidebar/releaseStats';\nimport TotalCrashFreeUsers from './sidebar/totalCrashFreeUsers';\nimport ReleaseArchivedNotice from './releaseArchivedNotice';\nimport ReleaseComparisonChart from './releaseComparisonChart';\nimport ReleaseIssues from './releaseIssues';\n\nconst RELEASE_PERIOD_KEY = 'release';\n\nexport enum TransactionsListOption {\n  FAILURE_COUNT = 'failure_count',\n  TPM = 'tpm',\n  SLOW = 'slow',\n  SLOW_LCP = 'slow_lcp',\n  REGRESSION = 'regression',\n  IMPROVEMENT = 'improved',\n}\n\ntype RouteParams = {\n  orgId: string;\n  release: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  api: Client;\n  organization: Organization;\n  selection: PageFilters;\n};\n\nclass ReleaseOverview extends AsyncView<Props> {\n  getTitle() {\n    const {params, organization} = this.props;\n    return routeTitleGen(\n      t('Release %s', formatVersion(params.release)),\n      organization.slug,\n      false\n    );\n  }\n\n  handleRestore = async (project: ReleaseProject, successCallback: () => void) => {\n    const {params, organization} = this.props;\n\n    try {\n      await restoreRelease(new Client(), {\n        orgSlug: organization.slug,\n        projectSlug: project.slug,\n        releaseVersion: params.release,\n      });\n      successCallback();\n    } catch {\n      // do nothing, action creator is already displaying error message\n    }\n  };\n\n  getReleaseEventView(\n    version: string,\n    projectId: number,\n    selectedSort: DropdownOption,\n    releaseBounds: ReleaseBounds\n  ): EventView {\n    const {selection, location} = this.props;\n    const {environments} = selection;\n\n    const {start, end, statsPeriod} = getReleaseParams({\n      location,\n      releaseBounds,\n    });\n\n    const baseQuery: NewQuery = {\n      id: undefined,\n      version: 2,\n      name: `Release ${formatVersion(version)}`,\n      query: `event.type:transaction release:${version}`,\n      fields: ['transaction', 'failure_count()', 'epm()', 'p50()'],\n      orderby: '-failure_count',\n      range: statsPeriod || undefined,\n      environment: environments,\n      projects: [projectId],\n      start: start ? getUtcDateString(start) : undefined,\n      end: end ? getUtcDateString(end) : undefined,\n    };\n\n    switch (selectedSort.value) {\n      case TransactionsListOption.SLOW_LCP:\n        return EventView.fromSavedQuery({\n          ...baseQuery,\n          query: `event.type:transaction release:${version} epm():>0.01 has:measurements.lcp`,\n          fields: ['transaction', 'failure_count()', 'epm()', 'p75(measurements.lcp)'],\n          orderby: 'p75_measurements_lcp',\n        });\n      case TransactionsListOption.SLOW:\n        return EventView.fromSavedQuery({\n          ...baseQuery,\n          query: `event.type:transaction release:${version} epm():>0.01`,\n        });\n      case TransactionsListOption.FAILURE_COUNT:\n        return EventView.fromSavedQuery({\n          ...baseQuery,\n          query: `event.type:transaction release:${version} failure_count():>0`,\n        });\n      default:\n        return EventView.fromSavedQuery(baseQuery);\n    }\n  }\n\n  getReleaseTrendView(\n    version: string,\n    projectId: number,\n    versionDate: string,\n    releaseBounds: ReleaseBounds\n  ): EventView {\n    const {selection, location} = this.props;\n    const {environments} = selection;\n\n    const {start, end, statsPeriod} = getReleaseParams({\n      location,\n      releaseBounds,\n    });\n\n    const trendView = EventView.fromSavedQuery({\n      id: undefined,\n      version: 2,\n      name: `Release ${formatVersion(version)}`,\n      fields: ['transaction'],\n      query: 'tpm():>0.01 trend_percentage():>0%',\n      range: statsPeriod || undefined,\n      environment: environments,\n      projects: [projectId],\n      start: start ? getUtcDateString(start) : undefined,\n      end: end ? getUtcDateString(end) : undefined,\n    }) as TrendView;\n    trendView.middle = versionDate;\n    return trendView;\n  }\n\n  getReleasePerformanceEventView(\n    performanceType: string,\n    baseQuery: NewQuery\n  ): EventView {\n    const eventView =\n      performanceType === PROJECT_PERFORMANCE_TYPE.FRONTEND\n        ? (EventView.fromSavedQuery({\n            ...baseQuery,\n            fields: [\n              ...baseQuery.fields,\n              `p75(${WebVital.FCP})`,\n              `p75(${WebVital.FID})`,\n              `p75(${WebVital.LCP})`,\n              `p75(${WebVital.CLS})`,\n              'p75(spans.http)',\n              'p75(spans.browser)',\n              'p75(spans.resource)',\n            ],\n          }) as EventView)\n        : performanceType === PROJECT_PERFORMANCE_TYPE.BACKEND\n        ? (EventView.fromSavedQuery({\n            ...baseQuery,\n            fields: [...baseQuery.fields, 'apdex()', 'p75(spans.http)', 'p75(spans.db)'],\n          }) as EventView)\n        : performanceType === PROJECT_PERFORMANCE_TYPE.MOBILE\n        ? (EventView.fromSavedQuery({\n            ...baseQuery,\n            fields: [\n              ...baseQuery.fields,\n              `p75(${MobileVital.AppStartCold})`,\n              `p75(${MobileVital.AppStartWarm})`,\n              `p75(${MobileVital.FramesSlow})`,\n              `p75(${MobileVital.FramesFrozen})`,\n            ],\n          }) as EventView)\n        : (EventView.fromSavedQuery({\n            ...baseQuery,\n          }) as EventView);\n\n    return eventView;\n  }\n\n  getAllReleasesPerformanceView(\n    projectId: number,\n    performanceType: string,\n    releaseBounds: ReleaseBounds\n  ) {\n    const {selection, location} = this.props;\n    const {environments} = selection;\n\n    const {start, end, statsPeriod} = getReleaseParams({\n      location,\n      releaseBounds,\n    });\n\n    const baseQuery: NewQuery = {\n      id: undefined,\n      version: 2,\n      name: 'All Releases',\n      query: 'event.type:transaction',\n      fields: ['user_misery()'],\n      range: statsPeriod || undefined,\n      environment: environments,\n      projects: [projectId],\n      start: start ? getUtcDateString(start) : undefined,\n      end: end ? getUtcDateString(end) : undefined,\n    };\n\n    return this.getReleasePerformanceEventView(performanceType, baseQuery);\n  }\n\n  getReleasePerformanceView(\n    version: string,\n    projectId: number,\n    performanceType: string,\n    releaseBounds: ReleaseBounds\n  ) {\n    const {selection, location} = this.props;\n    const {environments} = selection;\n\n    const {start, end, statsPeriod} = getReleaseParams({\n      location,\n      releaseBounds,\n    });\n\n    const baseQuery: NewQuery = {\n      id: undefined,\n      version: 2,\n      name: `Release:${version}`,\n      query: `event.type:transaction release:${version}`,\n      fields: ['user_misery()'],\n      range: statsPeriod || undefined,\n      environment: environments,\n      projects: [projectId],\n      start: start ? getUtcDateString(start) : undefined,\n      end: end ? getUtcDateString(end) : undefined,\n    };\n\n    return this.getReleasePerformanceEventView(performanceType, baseQuery);\n  }\n\n  get pageDateTime(): DateTimeObject {\n    const query = this.props.location.query;\n\n    const {start, end, statsPeriod} = normalizeDateTimeParams(query, {\n      allowEmptyPeriod: true,\n      allowAbsoluteDatetime: true,\n      allowAbsolutePageDatetime: true,\n    });\n\n    if (statsPeriod) {\n      return {period: statsPeriod};\n    }\n\n    if (start && end) {\n      return {\n        start: moment.utc(start).format(),\n        end: moment.utc(end).format(),\n      };\n    }\n\n    return {};\n  }\n\n  handleTransactionsListSortChange = (value: string) => {\n    const {location} = this.props;\n\n    const target = {\n      pathname: location.pathname,\n      query: {...location.query, showTransactions: value, transactionCursor: undefined},\n    };\n    browserHistory.push(target);\n  };\n\n  handleDateChange = (datetime: ChangeData) => {\n    const {router, location} = this.props;\n    const {start, end, relative, utc} = datetime;\n\n    if (start && end) {\n      const parser = utc ? moment.utc : moment;\n\n      router.push({\n        ...location,\n        query: {\n          ...location.query,\n          pageStatsPeriod: undefined,\n          pageStart: parser(start).format(),\n          pageEnd: parser(end).format(),\n          pageUtc: utc ?? undefined,\n        },\n      });\n      return;\n    }\n\n    router.push({\n      ...location,\n      query: {\n        ...location.query,\n        pageStatsPeriod: relative === RELEASE_PERIOD_KEY ? undefined : relative,\n        pageStart: undefined,\n        pageEnd: undefined,\n        pageUtc: undefined,\n      },\n    });\n  };\n\n  render() {\n    const {organization, selection, location, api} = this.props;\n    const {start, end, period, utc} = this.pageDateTime;\n\n    return (\n      <ReleaseContext.Consumer>\n        {({\n          release,\n          project,\n          deploys,\n          releaseMeta,\n          refetchData,\n          hasHealthData,\n          releaseBounds,\n        }) => {\n          const {commitCount, version} = release;\n          const hasDiscover = organization.features.includes('discover-basic');\n          const hasPerformance = organization.features.includes('performance-view');\n          const hasReleaseComparisonPerformance = organization.features.includes(\n            'release-comparison-performance'\n          );\n          const {environments} = selection;\n          const performanceType = platformToPerformanceType([project], [project.id]);\n          const {selectedSort, sortOptions} = getTransactionsListSort(location);\n          const releaseEventView = this.getReleaseEventView(\n            version,\n            project.id,\n            selectedSort,\n            releaseBounds\n          );\n          const titles =\n            selectedSort.value !== TransactionsListOption.SLOW_LCP\n              ? [t('transaction'), t('failure_count()'), t('tpm()'), t('p50()')]\n              : [t('transaction'), t('failure_count()'), t('tpm()'), t('p75(lcp)')];\n          const releaseTrendView = this.getReleaseTrendView(\n            version,\n            project.id,\n            releaseMeta.released,\n            releaseBounds\n          );\n          const allReleasesPerformanceView = this.getAllReleasesPerformanceView(\n            project.id,\n            performanceType,\n            releaseBounds\n          );\n          const releasePerformanceView = this.getReleasePerformanceView(\n            version,\n            project.id,\n            performanceType,\n            releaseBounds\n          );\n\n          const generateLink = {\n            transaction: generateTransactionLink(\n              version,\n              project.id,\n              selection,\n              location.query.showTransactions\n            ),\n          };\n\n          const sessionsRequestProps: Omit<SessionsRequest['props'], 'children'> = {\n            api,\n            organization,\n            field: [\n              SessionFieldWithOperation.USERS,\n              SessionFieldWithOperation.SESSIONS,\n              SessionFieldWithOperation.DURATION,\n            ],\n            groupBy: ['session.status'],\n            ...getReleaseParams({location, releaseBounds}),\n            shouldFilterSessionsInTimeWindow: true,\n          };\n\n          return (\n            <SessionsRequest {...sessionsRequestProps}>\n              {({\n                loading: allReleasesLoading,\n                reloading: allReleasesReloading,\n                errored: allReleasesErrored,\n                response: allReleases,\n              }) => (\n                <SessionsRequest {...sessionsRequestProps} query={`release:\"${version}\"`}>\n                  {({\n                    loading: thisReleaseLoading,\n                    reloading: thisReleaseReloading,\n                    errored: thisReleaseErrored,\n                    response: thisRelease,\n                  }) => {\n                    const loading = allReleasesLoading || thisReleaseLoading;\n                    const reloading = allReleasesReloading || thisReleaseReloading;\n                    const errored = allReleasesErrored || thisReleaseErrored;\n                    return (\n                      <Body>\n                        <Main>\n                          {isReleaseArchived(release) && (\n                            <ReleaseArchivedNotice\n                              onRestore={() => this.handleRestore(project, refetchData)}\n                            />\n                          )}\n                          <ReleaseDetailsPageFilters>\n                            <EnvironmentPageFilter />\n                            <StyledPageTimeRangeSelector\n                              organization={organization}\n                              relative={period ?? ''}\n                              start={start ?? null}\n                              end={end ?? null}\n                              utc={utc ?? null}\n                              onUpdate={this.handleDateChange}\n                              relativeOptions={\n                                releaseBounds.type !== 'ancient'\n                                  ? {\n                                      [RELEASE_PERIOD_KEY]: (\n                                        <Fragment>\n                                          {releaseBounds.type === 'clamped'\n                                            ? t('Clamped Release Period')\n                                            : t('Entire Release Period')}{' '}\n                                          (\n                                          <DateTime\n                                            date={releaseBounds.releaseStart}\n                                            timeAndDate\n                                          />{' '}\n                                          -{' '}\n                                          <DateTime\n                                            date={releaseBounds.releaseEnd}\n                                            timeAndDate\n                                          />\n                                          )\n                                        </Fragment>\n                                      ),\n                                      ...DEFAULT_RELATIVE_PERIODS,\n                                    }\n                                  : DEFAULT_RELATIVE_PERIODS\n                              }\n                              defaultPeriod={\n                                releaseBounds.type !== 'ancient'\n                                  ? RELEASE_PERIOD_KEY\n                                  : '90d'\n                              }\n                              defaultAbsolute={{\n                                start: moment(releaseBounds.releaseStart)\n                                  .subtract(1, 'hour')\n                                  .toDate(),\n                                end: releaseBounds.releaseEnd\n                                  ? moment(releaseBounds.releaseEnd)\n                                      .add(1, 'hour')\n                                      .toDate()\n                                  : undefined,\n                              }}\n                            />\n                          </ReleaseDetailsPageFilters>\n\n                          {(hasDiscover || hasPerformance || hasHealthData) && (\n                            <ReleaseComparisonChart\n                              release={release}\n                              releaseSessions={thisRelease}\n                              allSessions={allReleases}\n                              platform={project.platform}\n                              location={location}\n                              loading={loading}\n                              reloading={reloading}\n                              errored={errored}\n                              project={project}\n                              organization={organization}\n                              api={api}\n                              hasHealthData={hasHealthData}\n                            />\n                          )}\n\n                          <ReleaseIssues\n                            organization={organization}\n                            selection={selection}\n                            version={version}\n                            location={location}\n                            releaseBounds={releaseBounds}\n                            queryFilterDescription={t('In this release')}\n                            withChart\n                          />\n\n                          <Feature features={['performance-view']}>\n                            {hasReleaseComparisonPerformance ? (\n                              <PerformanceCardTable\n                                organization={organization}\n                                project={project}\n                                location={location}\n                                allReleasesEventView={allReleasesPerformanceView}\n                                releaseEventView={releasePerformanceView}\n                                performanceType={performanceType}\n                              />\n                            ) : (\n                              <TransactionsList\n                                location={location}\n                                organization={organization}\n                                eventView={releaseEventView}\n                                trendView={releaseTrendView}\n                                selected={selectedSort}\n                                options={sortOptions}\n                                handleDropdownChange={\n                                  this.handleTransactionsListSortChange\n                                }\n                                titles={titles}\n                                generateLink={generateLink}\n                              />\n                            )}\n                          </Feature>\n                        </Main>\n                        <Side>\n                          <ReleaseStats\n                            organization={organization}\n                            release={release}\n                            project={project}\n                          />\n                          {hasHealthData && (\n                            <ReleaseAdoption\n                              releaseSessions={thisRelease}\n                              allSessions={allReleases}\n                              loading={loading}\n                              reloading={reloading}\n                              errored={errored}\n                              release={release}\n                              project={project}\n                              environment={environments}\n                            />\n                          )}\n                          <ProjectReleaseDetails\n                            release={release}\n                            releaseMeta={releaseMeta}\n                            orgSlug={organization.slug}\n                            projectSlug={project.slug}\n                          />\n                          {commitCount > 0 && (\n                            <CommitAuthorBreakdown\n                              version={version}\n                              orgId={organization.slug}\n                              projectSlug={project.slug}\n                            />\n                          )}\n                          {releaseMeta.projects.length > 1 && (\n                            <OtherProjects\n                              projects={releaseMeta.projects.filter(\n                                p => p.slug !== project.slug\n                              )}\n                              location={location}\n                              version={version}\n                              organization={organization}\n                            />\n                          )}\n                          {hasHealthData && (\n                            <TotalCrashFreeUsers\n                              organization={organization}\n                              version={version}\n                              projectSlug={project.slug}\n                              location={location}\n                            />\n                          )}\n                          {deploys.length > 0 && (\n                            <Deploys\n                              version={version}\n                              orgSlug={organization.slug}\n                              deploys={deploys}\n                              projectId={project.id}\n                            />\n                          )}\n                        </Side>\n                      </Body>\n                    );\n                  }}\n                </SessionsRequest>\n              )}\n            </SessionsRequest>\n          );\n        }}\n      </ReleaseContext.Consumer>\n    );\n  }\n}\n\nfunction generateTransactionLink(\n  version: string,\n  projectId: number,\n  selection: PageFilters,\n  value: string\n) {\n  return (\n    organization: Organization,\n    tableRow: TableDataRow,\n    _query: Query\n  ): LocationDescriptor => {\n    const {transaction} = tableRow;\n    const trendTransaction = ['regression', 'improved'].includes(value);\n    const {environments, datetime} = selection;\n    const {start, end, period} = datetime;\n\n    return transactionSummaryRouteWithQuery({\n      orgSlug: organization.slug,\n      transaction: transaction! as string,\n      query: {\n        query: trendTransaction ? '' : `release:${version}`,\n        environment: environments,\n        start: start ? getUtcDateString(start) : undefined,\n        end: end ? getUtcDateString(end) : undefined,\n        statsPeriod: period,\n      },\n      projectID: projectId.toString(),\n      display: trendTransaction ? DisplayModes.TREND : DisplayModes.DURATION,\n    });\n  };\n}\n\nfunction getDropdownOptions(): DropdownOption[] {\n  return [\n    {\n      sort: {kind: 'desc', field: 'failure_count'},\n      value: TransactionsListOption.FAILURE_COUNT,\n      label: t('Failing Transactions'),\n    },\n    {\n      sort: {kind: 'desc', field: 'epm'},\n      value: TransactionsListOption.TPM,\n      label: t('Frequent Transactions'),\n    },\n    {\n      sort: {kind: 'desc', field: 'p50'},\n      value: TransactionsListOption.SLOW,\n      label: t('Slow Transactions'),\n    },\n    {\n      sort: {kind: 'desc', field: 'p75_measurements_lcp'},\n      value: TransactionsListOption.SLOW_LCP,\n      label: t('Slow LCP'),\n    },\n    {\n      sort: {kind: 'desc', field: 'trend_percentage()'},\n      query: [['confidence()', '>6']],\n      trendType: TrendChangeType.REGRESSION,\n      value: TransactionsListOption.REGRESSION,\n      label: t('Trending Regressions'),\n    },\n    {\n      sort: {kind: 'asc', field: 'trend_percentage()'},\n      query: [['confidence()', '>6']],\n      trendType: TrendChangeType.IMPROVED,\n      value: TransactionsListOption.IMPROVEMENT,\n      label: t('Trending Improvements'),\n    },\n  ];\n}\n\nfunction getTransactionsListSort(location: Location): {\n  selectedSort: DropdownOption;\n  sortOptions: DropdownOption[];\n} {\n  const sortOptions = getDropdownOptions();\n  const urlParam = decodeScalar(\n    location.query.showTransactions,\n    TransactionsListOption.FAILURE_COUNT\n  );\n  const selectedSort = sortOptions.find(opt => opt.value === urlParam) || sortOptions[0];\n  return {selectedSort, sortOptions};\n}\n\nconst ReleaseDetailsPageFilters = styled('div')`\n  display: grid;\n  grid-template-columns: minmax(0, max-content) 1fr;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n`;\n\nconst StyledPageTimeRangeSelector = styled(PageTimeRangeSelector)`\n  height: 40px;\n`;\n\nexport default withApi(withPageFilters(withOrganization(ReleaseOverview)));\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  multi?: boolean;\n  onRestore?: () => void;\n};\n\nfunction ReleaseArchivedNotice({onRestore, multi}: Props) {\n  return (\n    <Alert type=\"warning\">\n      {multi\n        ? t('These releases have been archived.')\n        : t('This release has been archived.')}\n\n      {!multi && onRestore && (\n        <Fragment>\n          {' '}\n          <UnarchiveButton size=\"zero\" priority=\"link\" onClick={onRestore}>\n            {t('Restore this release')}\n          </UnarchiveButton>\n        </Fragment>\n      )}\n    </Alert>\n  );\n}\n\nconst UnarchiveButton = styled(Button)`\n  font-size: inherit;\n  text-decoration: underline;\n  &,\n  &:hover,\n  &:focus,\n  &:active {\n    color: ${p => p.theme.textColor};\n  }\n`;\n\nexport default ReleaseArchivedNotice;\n","import {Location} from 'history';\nimport pick from 'lodash/pick';\nimport moment from 'moment';\n\nimport MarkLine from 'sentry/components/charts/components/markLine';\nimport {parseStatsPeriod} from 'sentry/components/organizations/timeRangeSelector/utils';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {t} from 'sentry/locale';\nimport {\n  Commit,\n  CommitFile,\n  FilesByRepository,\n  ReleaseComparisonChartType,\n  ReleaseProject,\n  ReleaseWithHealth,\n  Repository,\n} from 'sentry/types';\nimport {Series} from 'sentry/types/echarts';\nimport {decodeList} from 'sentry/utils/queryString';\nimport {Theme} from 'sentry/utils/theme';\n\nimport {getReleaseBounds, getReleaseParams, isMobileRelease} from '../utils';\nimport {commonTermsDescription, SessionTerm} from '../utils/sessionTerm';\n\nexport type CommitsByRepository = {\n  [key: string]: Commit[];\n};\n\n/**\n * Convert list of individual file changes into a per-file summary grouped by repository\n */\nexport function getFilesByRepository(fileList: CommitFile[]) {\n  return fileList.reduce<FilesByRepository>((filesByRepository, file) => {\n    const {filename, repoName, author, type} = file;\n\n    if (!filesByRepository.hasOwnProperty(repoName)) {\n      filesByRepository[repoName] = {};\n    }\n\n    if (!filesByRepository[repoName].hasOwnProperty(filename)) {\n      filesByRepository[repoName][filename] = {\n        authors: {},\n        types: new Set(),\n      };\n    }\n\n    if (author.email) {\n      filesByRepository[repoName][filename].authors[author.email] = author;\n    }\n\n    filesByRepository[repoName][filename].types.add(type);\n\n    return filesByRepository;\n  }, {});\n}\n\n/**\n * Convert list of individual commits into a summary grouped by repository\n */\nexport function getCommitsByRepository(commitList: Commit[]): CommitsByRepository {\n  return commitList.reduce((commitsByRepository, commit) => {\n    const repositoryName = commit.repository?.name ?? t('unknown');\n\n    if (!commitsByRepository.hasOwnProperty(repositoryName)) {\n      commitsByRepository[repositoryName] = [];\n    }\n\n    commitsByRepository[repositoryName].push(commit);\n\n    return commitsByRepository;\n  }, {});\n}\n\n/**\n * Get request query according to the url params and active repository\n */\n\ntype GetQueryProps = {\n  location: Location;\n  activeRepository?: Repository;\n  perPage?: number;\n};\n\nexport function getQuery({location, perPage = 40, activeRepository}: GetQueryProps) {\n  const query = {\n    ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    per_page: perPage,\n  };\n\n  if (!activeRepository) {\n    return query;\n  }\n\n  return {...query, repo_name: activeRepository.name};\n}\n\n/**\n * Get repositories to render according to the activeRepository\n */\nexport function getReposToRender(repos: Array<string>, activeRepository?: Repository) {\n  if (!activeRepository) {\n    return repos;\n  }\n  return [activeRepository.name];\n}\n\nexport const releaseComparisonChartLabels = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Session Rate'),\n  [ReleaseComparisonChartType.HEALTHY_SESSIONS]: t('Healthy'),\n  [ReleaseComparisonChartType.ABNORMAL_SESSIONS]: t('Abnormal'),\n  [ReleaseComparisonChartType.ERRORED_SESSIONS]: t('Errored'),\n  [ReleaseComparisonChartType.CRASHED_SESSIONS]: t('Crashed Session Rate'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free User Rate'),\n  [ReleaseComparisonChartType.HEALTHY_USERS]: t('Healthy'),\n  [ReleaseComparisonChartType.ABNORMAL_USERS]: t('Abnormal'),\n  [ReleaseComparisonChartType.ERRORED_USERS]: t('Errored'),\n  [ReleaseComparisonChartType.CRASHED_USERS]: t('Crashed User Rate'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.SESSION_DURATION]: t('Session Duration p50'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n  [ReleaseComparisonChartType.ERROR_COUNT]: t('Error Count'),\n  [ReleaseComparisonChartType.TRANSACTION_COUNT]: t('Transaction Count'),\n  [ReleaseComparisonChartType.FAILURE_RATE]: t('Failure Rate'),\n};\n\nexport const releaseComparisonChartTitles = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]: t('Crash Free Session Rate'),\n  [ReleaseComparisonChartType.HEALTHY_SESSIONS]: t('Healthy Session Rate'),\n  [ReleaseComparisonChartType.ABNORMAL_SESSIONS]: t('Abnormal Session Rate'),\n  [ReleaseComparisonChartType.ERRORED_SESSIONS]: t('Errored Session Rate'),\n  [ReleaseComparisonChartType.CRASHED_SESSIONS]: t('Crashed Session Rate'),\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]: t('Crash Free User Rate'),\n  [ReleaseComparisonChartType.HEALTHY_USERS]: t('Healthy User Rate'),\n  [ReleaseComparisonChartType.ABNORMAL_USERS]: t('Abnormal User Rate'),\n  [ReleaseComparisonChartType.ERRORED_USERS]: t('Errored User Rate'),\n  [ReleaseComparisonChartType.CRASHED_USERS]: t('Crashed User Rate'),\n  [ReleaseComparisonChartType.SESSION_COUNT]: t('Session Count'),\n  [ReleaseComparisonChartType.SESSION_DURATION]: t('Session Duration'),\n  [ReleaseComparisonChartType.USER_COUNT]: t('User Count'),\n  [ReleaseComparisonChartType.ERROR_COUNT]: t('Error Count'),\n  [ReleaseComparisonChartType.TRANSACTION_COUNT]: t('Transaction Count'),\n  [ReleaseComparisonChartType.FAILURE_RATE]: t('Failure Rate'),\n};\n\nexport const releaseComparisonChartHelp = {\n  [ReleaseComparisonChartType.CRASH_FREE_SESSIONS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_SESSIONS],\n  [ReleaseComparisonChartType.CRASH_FREE_USERS]:\n    commonTermsDescription[SessionTerm.CRASH_FREE_USERS],\n  [ReleaseComparisonChartType.SESSION_COUNT]: t(\n    'The number of sessions in a given period.'\n  ),\n  [ReleaseComparisonChartType.USER_COUNT]: t('The number of users in a given period.'),\n};\n\ntype GenerateReleaseMarklineOptions = {\n  axisIndex?: number;\n  hideLabel?: boolean;\n};\n\nfunction generateReleaseMarkLine(\n  title: string,\n  position: number,\n  theme: Theme,\n  options?: GenerateReleaseMarklineOptions\n) {\n  const {hideLabel, axisIndex} = options || {};\n\n  return {\n    seriesName: title,\n    type: 'line',\n    data: [{name: position, value: null as any}], // TODO(ts): echart types\n    yAxisIndex: axisIndex ?? undefined,\n    xAxisIndex: axisIndex ?? undefined,\n    color: theme.gray300,\n    markLine: MarkLine({\n      silent: true,\n      lineStyle: {color: theme.gray300, type: 'solid'},\n      label: {\n        position: 'insideEndBottom',\n        formatter: hideLabel ? '' : title,\n        // @ts-expect-error weird echart types\n        font: 'Rubik',\n        fontSize: 11,\n      },\n      data: [\n        {\n          xAxis: position,\n        },\n      ],\n    }),\n  };\n}\n\nexport const releaseMarkLinesLabels = {\n  created: t('Release Created'),\n  adopted: t('Adopted'),\n  unadopted: t('Replaced'),\n};\n\nexport function generateReleaseMarkLines(\n  release: ReleaseWithHealth,\n  project: ReleaseProject,\n  theme: Theme,\n  location: Location,\n  options?: GenerateReleaseMarklineOptions\n) {\n  const markLines: Series[] = [];\n  const adoptionStages = release.adoptionStages?.[project.slug];\n  const isSingleEnv = decodeList(location.query.environment).length === 1;\n  const releaseBounds = getReleaseBounds(release);\n  const {statsPeriod, ...releaseParamsRest} = getReleaseParams({\n    location,\n    releaseBounds,\n  });\n  let {start, end} = releaseParamsRest;\n  const isDefaultPeriod = !(\n    location.query.pageStart ||\n    location.query.pageEnd ||\n    location.query.pageStatsPeriod\n  );\n\n  if (statsPeriod) {\n    const parsedStatsPeriod = parseStatsPeriod(statsPeriod, null);\n    start = parsedStatsPeriod.start;\n    end = parsedStatsPeriod.end;\n  }\n\n  const releaseCreated = moment(release.dateCreated).startOf('minute');\n  if (\n    releaseCreated.isBetween(start, end) ||\n    (isDefaultPeriod && releaseBounds.type === 'normal')\n  ) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.created,\n        releaseCreated.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  if (!isSingleEnv || !isMobileRelease(project.platform)) {\n    // for now want to show marklines only on mobile platforms with single environment selected\n    return markLines;\n  }\n\n  const releaseAdopted = adoptionStages?.adopted && moment(adoptionStages.adopted);\n  if (releaseAdopted && releaseAdopted.isBetween(start, end)) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.adopted,\n        releaseAdopted.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  const releaseReplaced = adoptionStages?.unadopted && moment(adoptionStages.unadopted);\n  if (releaseReplaced && releaseReplaced.isBetween(start, end)) {\n    markLines.push(\n      generateReleaseMarkLine(\n        releaseMarkLinesLabels.unadopted,\n        releaseReplaced.valueOf(),\n        theme,\n        options\n      )\n    );\n  }\n\n  return markLines;\n}\n"],"names":["BarChartZoom","Component","chart","callIfFunction","this","props","onChartReady","_props","zooming","zoom","_componentsViews","find","c","_features","dataZoom","_isZoomActive","dispatchAction","type","key","dataZoomSelectActive","evt","model","getModel","startValue","endValue","_payload","batch","buckets","location","paramStart","paramEnd","minZoomWidth","onHistoryPush","start","end","undefined","target","pathname","query","browserHistory","onDataZoomCancelled","onDataZoom","render","children","xAxisIndex","handleChartReady","onFinished","handleChartFinished","DataZoomInside","toolBox","ToolBox","title","back","iconStyle","borderWidth","color","opacity","handleDataZoom","VisualMap","visualMap","p","height","theme","gray300","fontSizeExtraLarge","Chart","React","seriesSelection","forceUpdate","legendChange","disableableSeries","selected","Object","keys","reduce","state","disableable","includes","setState","shouldComponentUpdate","nextProps","nextState","isEqual","reloading","timeseriesData","releaseSeries","previousTimeseriesData","tableData","getChartComponent","showDaily","yAxis","chartComponent","defined","BarChart","length","aggregateMultiPlotType","LineChart","AreaChart","Error","loading","_loading","_reloading","zoomRenderProps","showLegend","legendOptions","chartOptions","chartOptionsProp","currentSeriesNames","previousSeriesNames","seriesTransformer","previousSeriesTransformer","colors","timeframe","topEvents","fromDiscover","WorldMapChart","data","processTableResults","tableSeries","seriesName","series","t","releasesLegend","hasOther","push","Array","isArray","releases","hideReleasesByDefault","markLine","RELEASE_LINES_THRESHOLD","legend","right","top","previousSeries","map","prev","chartColors","slice","charts","getColorPalette","chartOther","grid","left","bottom","seriesOptions","showSymbol","tooltip","trigger","truncate","valueFormatter","value","tooltipFormatter","xAxis","min","max","axisLabel","chartLabel","formatter","axisLabelFormatter","animation","onLegendSelectChanged","handleLegendSelectChanged","previousPeriod","ThemedChart","withTheme","EventsChart","isStacked","api","organization","period","utc","router","projects","environments","minutesThresholdToDisplaySeconds","disablePrevious","disableReleases","emphasizeReleases","currentSeriesName","currentName","previousSeriesName","previousName","field","interval","orderby","confirmedQuery","chartHeader","preserveReleaseQueryParams","releaseQueryExtra","usePageZoom","withoutZerofill","includePrevious","yAxisArray","decodeList","yAxisSeriesNames","name","yAxisLabel","isEquation","getEquation","substr","intervalVal","getInterval","chartImplementation","errored","results","size","seriesData","visible","stacked","previousChart","chartProps","preserveQueryParams","queryExtra","usePageDate","referrer","project","environment","partial","userModified","decodeScalar","eventData","eventView","EventView","id","version","fields","range","getUtcDateString","setResults","useState","setReloading","setErrored","useEffect","mounted","doDiscoverQuery","slug","generateQueryStringObject","then","discoverQueryResults","catch","dataArray","options","LineSeries","animationThreshold","animationDuration","OptionSelector","onChange","featureType","multiple","rest","mappedOptions","useMemo","opt","label","String","maxLength","expandDirection","option","o","isOptionDisabled","disabled","triggerProps","borderless","prefix","Fragment","StyledFeatureBadge","placement","FeatureBadge","getOrganizationReleases","conditions","forEach","clear","requestPromise","includeAllArgs","method","ReleaseSeries","memoize","_","__","values","val","JSON","stringify","join","lineStyle","features","statsPeriod","MarkLine","purple300","show","release","Date","date","formatVersion","onClick","time","getFormattedDate","local","escape","purple200","componentDidMount","_isMounted","setReleasesWithSeries","fetchData","componentDidUpdate","prevProps","componentWillUnmount","memoized","hasMore","getReleases","getOrganizationReleasesMemoized","newReleases","resp","pageLinks","getResponseHeader","paginationObject","parseLinkHeader","next","cursor","addErrorMessage","unemphasizedReleases","emphasizedReleases","partition","getReleaseSeries","withRouter","withOrganization","withApi","propNamesToIgnore","omitIgnoredProps","omitBy","_value","SessionsRequest","response","async","isDisabled","shouldFilterSessionsInTimeWindow","path","baseQueryParams","filterSessionsInTimeWindow","error","responseJSON","detail","groupBy","getSessionsInterval","highFidelity","StackedAreaChart","filter","TransitionChart","prevReloading","prevLoading","nextReloading","nextLoading","className","other","fromDiscoverQueryList","useTheme","countryToCodeMap","codeToCountryMap","unmounted","countryCodesMap","world","Promise","all","default","worldMap","echarts","country","loadWorldMap","processedSeries","roam","emphasis","MapSeries","nameMap","aspectScale","center","itemStyle","areaColor","gray200","borderColor","backgroundSecondary","pink300","silent","maxValue","backgroundColor","background","inRange","text","textStyle","textColor","calculable","format","marker","isNaN","formattedValue","toLocaleString","DiscoverFeature","noFeatureMessage","hookName","renderDisabled","body","hideHelpToggle","message","featureName","hasFeature","TransactionsTable","PureComponent","getTitles","titles","getFields","renderHeader","columnOrder","tableMeta","meta","generateSortLink","index","column","align","fieldAlignment","HeadCellContainer","StyledIconQuestion","position","direction","canSort","renderRow","row","rowIndex","generateLink","handleCellAction","useAggregateAlias","fieldName","getAggregateAlias","fieldType","rendered","getFieldRenderer","fieldRenderer","to","isNumeric","dataRow","BodyCellContainer","renderResults","isLoading","cells","i","concat","hasResults","loader","style","margin","isEmpty","emptyMessage","headers","disablePadding","space","overflowEllipsis","QuestionTooltip","_TransactionsList","cursorName","getEventView","sortedEventView","withSorts","sort","MutableSearch","item","setFilterValues","formatString","generateDiscoverEventView","generatePerformanceTransactionEventsView","handleDropdownChange","handleOpenAllEventsClick","handleOpenInDiscoverClick","showTransactions","breakdown","button","isOpen","getActorProps","StyledDropdownButton","onSelect","eventKey","isActive","isTrend","getPerformanceTransactionEventsViewUrlTarget","mapShowTransactionToPercentile","getResultsViewUrlTarget","renderTransactionTable","limit","forceLoading","useEvents","getColumns","tableRenderer","Header","StyledPagination","onCursor","handleCursor","orgSlug","renderTrendsTable","trendView","clone","sorts","trendType","trendsData","decodeColumnOrder","DropdownButton","Pagination","TransactionsList","DiscoverButton","buttonProps","KeyValueTable","KeyValueTableRow","keyName","Key","Value","commonStyles","fontSizeMedium","subText","NotAvailable","skipWrapper","Wrapper","PageTimeRangeSelector","DropdownDate","DropdownLabel","detached","relative","defaultPeriod","Panel","border","borderRadius","shouldRefetchData","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","endpoint","afterFetch","otherMeta","route","_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","createDefinedContext","MEPConsumer","Consumer","AutoSampleState","MEPState","MEPSettingProvider","_hasMEPState","canUseMEP","useOrganization","isControlledMEP","_metricSettingState","setMetricSettingState","useReducer","auto","autoSampleState","setAutoSampleState","unset","metricSettingState","hideSinceMetricsOnly","metricsOnly","shouldQueryProvideMEPParams","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","transactionsOnly","memoizationKey","useMEPSettingContext","FILTER_OPTIONS","getHistogramRequestPayload","numBuckets","precision","dataFilter","baseApiPayload","additionalApiPayload","omit","getEventsAPIPayload","assign","HistogramQuery","didReceiveMultiAxis","histograms","getRequestPayload","didFetch","counts","entries","curr","count","Histogram","zoomKeys","removeHistogramQueryStrings","isZoomed","some","getActiveFilter","childrenProps","handleResetView","activeFilter","handleFilterChange","filterOptions","getTrendsRequestPayload","apiPayload","trendFunction","getCurrentTrendFunction","trendFunctionField","trendParameter","getCurrentTrendParameter","generateTrendFunctionAsString","trendChangeType","middle","TrendsDiscoverQuery","EventsDiscoverQuery","TrendsEventsDiscoverQuery","withProjects","VisualizationDataState","GenericPerformanceWidgetDataType","eventsRequestQueryProps","getMEPQueryParams","mepContext","queryParams","base","preventMetricAggregates","metricsEnhanced","dataset","objectIsEmpty","WIDGET_MAP_DENY_LIST","PerformanceWidgetSetting","getMEPParamsIfApplicable","widget","getContainerLocalStorageObjectKey","getContainerKey","performanceType","getWidgetStorageObject","parse","localStorage","getChartSetting","defaultType","forceDefaultChartSetting","localObject","_setChartSetting","setting","setWidgetStorageObject","WIDGET_PALETTE","CHART_PALETTE","WIDGET_DEFINITIONS","DURATION_HISTOGRAM","titleTooltip","getTermHelp","PERFORMANCE_TERM","dataType","chartColor","LCP_HISTOGRAM","FCP_HISTOGRAM","FID_HISTOGRAM","WORST_LCP_VITALS","vitalStops","poor","meh","WORST_FCP_VITALS","WORST_FID_VITALS","WORST_CLS_VITALS","TPM_AREA","APDEX_AREA","P50_DURATION_AREA","P75_DURATION_AREA","P95_DURATION_AREA","P99_DURATION_AREA","P75_LCP_AREA","FAILURE_RATE_AREA","USER_MISERY_AREA","COLD_STARTUP_AREA","WARM_STARTUP_AREA","SLOW_FRAMES_AREA","FROZEN_FRAMES_AREA","MOST_RELATED_ERRORS","MOST_RELATED_ISSUES","SLOW_HTTP_OPS","SLOW_BROWSER_OPS","SLOW_RESOURCE_OPS","SLOW_DB_OPS","MOST_SLOW_FRAMES","MOST_FROZEN_FRAMES","MOST_IMPROVED","MOST_REGRESSED","GridCell","GridCellNumber","DoubleHeaderContainer","ChartControls","ZOOM_START","ZOOM_END","Content","timeFrame","reverse","getDynamicText","fixed","testId","DurationFunctionField","DurationChart","currentFilter","propsStart","propsEnd","useApi","getUtcToLocalDateObject","datetimeSelection","contentCommonProps","normalizeDateTimeParams","getSeriesSelection","unselected","unselectedSeries","requestCommonProps","parameter","SPAN_OPERATION_BREAKDOWN_FILTER_TO_FIELD","header","SpanOperationBreakdownFilter","tct","operationName","v","showLoading","queryExtras","showMinLabel","showMaxLabel","axisTick","alignWithLabel","getDuration","AGGREGATE_ALIAS_VALUE_EXTRACT_PATTERN","FUNCTION_FIELD_VALUE_EXTRACT_PATTERN","transformData","extractedData","nameMatch","exec","nameValue","Number","a","b","AsyncComponent","getEndpoints","pick","QUERY_KEYS","renderLoading","renderError","renderBody","chartData","filterToColor","DurationPercentileChart","filterToField","generateFields","zoomError","setZoomError","handleMouseOver","decodeHistogramZoom","contents","seriesLabel","formatHistogramData","computeBuckets","onMouseOver","renderChart","LatencyChart","width","smoothedResults","transformEventStatsSmoothed","smoothedSeries","TrendChart","trendDisplay","TransactionsListOption","VitalsChart","vitals","WebVital","arg","getAggregateArg","getMeasurementSlug","toUpperCase","DisplayModes","generateDisplayOptions","DURATION","DURATION_PERCENTILE","LATENCY","TREND","VITALS","TREND_FUNCTIONS_OPTIONS","TRENDS_FUNCTIONS","TransactionSummaryCharts","totalValues","TREND_PARAMETERS_OPTIONS","TRENDS_PARAMETERS","display","trendColumn","TrendFunctionField","TrendColumnField","trackAdvancedAnalyticsEvent","from_chart","to_chart","EmptyState","PerformanceCardTable","releaseEventView","allReleasesTableData","thisReleaseTableData","miseryRenderer","renderChange","allReleasesScore","thisReleaseScore","StyledNotAvailable","trend","trendSeconds","trendPercentage","valPercentage","Math","round","abs","toFixed","SubText","TrendText","StyledIconArrow","userMiseryTrend","allReleasesUserMisery","thisReleaseUserMisery","StyledPanelItem","StyledLoadingIndicator","platformPerformanceRender","PROJECT_PERFORMANCE_TYPE","section","webVitals","spans","webVitalTitles","vital","idx","newView","withColumns","kind","SubTitle","Link","WEB_VITAL_DETAILS","acronym","spanTitles","span","webVitalsRenderer","spansRenderer","webReleaseTrend","allReleasesRow","thisReleaseRow","spansReleaseTrend","emptyColumn","SingleEmptySubText","TitleSpace","MultipleEmptySubText","allReleasesMisery","allReleasesWebVitals","renderer","allReleasesSpans","UserMiseryPanelItem","webVital","thisReleasesMisery","thisReleasesWebVitals","thisReleasesSpans","renderFrontendPerformance","apdexRenderer","allReleasesApdex","ApdexPanelItem","thisReleasesApdex","apdex","thisReleaseApdex","apdexTrend","renderBackendPerformance","mobileVitalTitles","MobileVital","mobileVital","MOBILE_VITAL_DETAILS","mobileVitalFields","mobileVitalsRenderer","mobileReleaseTrend","allReleasesMobile","thisReleasesMobile","renderMobilePerformance","renderUnknownPerformance","isUnknownPlatform","StyledAlert","showIcon","system","link","StyledPanelTable","Cell","disableTopBorder","PerformanceCardTableWrapper","allReleasesEventView","isReleaseLoading","emptyFieldCss","css","LoadingIndicator","PanelTable","breakpoints","large","PanelItem","Alert","IconArrow","CommitAuthorBreakdown","orgId","projectSlug","encodeURIComponent","remountComponent","getDisplayPercent","authorCommitCount","commits","calculatedPercent","percent","groupedAuthorCommits","authorCommitsAccumulator","commit","email","author","hasOwnProperty","commitCount","sortedAuthorsByNumberOfCommits","expandButton","onExpand","numberOfHiddenItems","priority","tn","AuthorLine","user","hasTooltip","AuthorName","userDisplayName","Commits","Percent","DeployBadge","deploy","projectId","shouldLinkToIssues","badge","icon","textMaxWidth","tooltipText","Deploys","deploys","Row","StyledDeployBadge","dateFinished","OtherProjects","avatarSize","extractSelectionParameters","medium","ProjectReleaseDetails","releaseMeta","versionInfo","dateCreated","firstEvent","lastEvent","seconds","anchor","StyledTextOverflow","ellipsisDirection","package","releaseFileCount","TextOverflow","axisIndexToSessionsField","SessionFieldWithOperation","ReleaseAdoption","releaseSessions","allSessions","hasUsers","getCount","groups","getSeries","generateReleaseMarkLines","hideLabel","axisIndex","connectNulls","yAxisIndex","getAdoptionSeries","intervals","usersMarkLines","axisLineConfig","scale","axisLine","splitLine","axisPointer","xAxes","from","_i","gridIndex","yAxes","isGroupedByDate","showTimeInTooltip","seriesParams","dataIndex","absoluteCount","getCountAtIndex","releaseMarkLinesLabels","formatAbbreviatedNumber","seriesParam","getReleaseParams","releaseBounds","getReleaseBounds","adoptionStage","adoptionStages","stage","adoptionStageLabel","ADOPTION_STAGE_LABELS","multipleEnvironments","isMobileRelease","platform","tooltipTitle","isHoverable","AdoptionEnvironment","NotAvailableWrapper","RelativeBox","ChartLabel","ChartTitle","transformSinglePointToLine","fontSizeSmall","SidebarSection","ReleaseStats","lastDeploy","Container","TotalCrashFreeUsers","URL_PARAM","crashFreeTimeBreakdown","releaseStats","usersBreakdown","timeline","crashFreeUsers","totalUsers","crashFreeUserCount","dateLabel","moment","isBefore","Timeline","InnerRow","Text","bold","displayCrashFreePercent","toString","floor","DOT_SIZE","ReleaseComparisonChartRow","role","drilldown","thisRelease","allReleases","diff","showPlaceholders","activeChart","chartDiff","onChartChange","onExpanderToggle","expanded","withExpanders","ChartTableRow","htmlFor","DescriptionCell","TitleWrapper","checked","releaseComparisonChartLabels","NumericCell","ExpanderCell","ToggleButton","bodyBackground","Button","ReleaseEventsChart","chartType","getColors","ReleaseComparisonChartType","getQuery","releaseFilter","getField","getYAxis","getHelp","markLines","Client","releaseComparisonChartTitles","padding","ReleaseSessionsChart","getExactDuration","getChart","green300","red300","countCharts","initSessionsChart","getCrashFreeRateSeries","getSessionStatusRateSeries","SessionStatus","getCountSeries","g","by","getSessionP50Series","duration","roundDuration","s","releaseComparisonChartHelp","MINUTES_THRESHOLD_TO_DISPLAY_SECONDS","formatTooltipValue","transformSinglePointToBar","ReleaseComparisonChart","hasHealthData","issuesTotals","setIssuesTotals","eventsTotals","setEventsTotals","eventsLoading","setEventsLoading","setExpanded","Set","isOtherExpanded","setIsOtherExpanded","additionalCharts","hasDiscover","hasPerformance","chartInUrl","e","add","fetchEventsTotals","useCallback","url","commonQuery","releaseTransactionTotals","allTransactionTotals","releaseErrorTotals","allErrorTotals","allErrorCount","releaseErrorCount","allTransactionCount","releaseTransactionCount","releaseFailureRate","allFailureRate","err","Sentry","fetchIssuesTotals","UNHANDLED_QUERY","HANDLED_QUERY","handled","unhandled","releaseCrashFreeSessions","getCrashFreeRate","allCrashFreeSessions","diffCrashFreeSessions","releaseHealthySessions","getSessionStatusRate","allHealthySessions","diffHealthySessions","releaseAbnormalSessions","allAbnormalSessions","diffAbnormalSessions","releaseErroredSessions","allErroredSessions","diffErroredSessions","releaseCrashedSessions","allCrashedSessions","diffCrashedSessions","releaseCrashFreeUsers","allCrashFreeUsers","diffCrashFreeUsers","releaseHealthyUsers","allHealthyUsers","diffHealthyUsers","releaseAbnormalUsers","allAbnormalUsers","diffAbnormalUsers","releaseErroredUsers","allErroredUsers","diffErroredUsers","releaseCrashedUsers","allCrashedUsers","diffCrashedUsers","releaseSessionsCount","allSessionsCount","releaseUsersCount","allUsersCount","sessionDurationTotal","getSeriesAverage","allSessionDurationTotal","diffFailure","displaySessionStatusPercent","diffDirection","diffColor","has","getReleaseHandledIssuesUrl","issues","getReleaseUnhandledIssuesUrl","handleChartChange","handleExpanderToggle","delete","getChartDiff","Change","formatPercentage","abbreviation","splice","ch","titleChartDiff","renderChartRow","ChartPanel","ChartTable","getTableHeaders","chartRow","ShowMoreWrapper","ShowMoreTitle","ShowMoreButton","fontSizeLarge","IssuesType","IssuesQuery","ReleaseIssues","getInitialState","issuesType","issuesTypeQuery","ALL","NEW","RESOLVED","UNHANDLED","REGRESSED","groupListState","isEntireReleasePeriod","pageStatsPeriod","pageStart","selectedTimePeriod","DEFAULT_RELATIVE_PERIODS","displayedPeriod","toLowerCase","timePeriod","new","resolved","regressed","fetchIssuesCount","getIssuesUrl","getIssuesEndpoint","IssueSortOptions","groupStatsPeriod","issueCountEndpoint","getIssueCountEndpoint","resolvedEndpoint","issueResponse","resolvedResponse","issuesCountPath","param","queryParameters","qs","queryFilterDescription","withChart","issuesTypes","issueCount","ControlsWrapper","StyledButtonBar","active","merged","barId","handleIssuesTypeSelection","hideParens","hideIfEmpty","OpenInButtonBar","gap","endpointPath","canSelectGroups","narrowGroups","renderEmptyMessage","withPagination","onFetchSuccess","handleFetchSuccess","small","ButtonGrid","ButtonBar","ButtonLabel","buttonCount","buttonCountActive","RELEASE_PERIOD_KEY","ReleaseOverview","AsyncView","successCallback","params","restoreRelease","releaseVersion","transactionCursor","datetime","parser","pageEnd","pageUtc","getTitle","routeTitleGen","getReleaseEventView","selectedSort","selection","baseQuery","SLOW_LCP","SLOW","FAILURE_COUNT","getReleaseTrendView","versionDate","getReleasePerformanceEventView","getAllReleasesPerformanceView","getReleasePerformanceView","pageDateTime","allowEmptyPeriod","allowAbsoluteDatetime","allowAbsolutePageDatetime","ReleaseContext","refetchData","hasReleaseComparisonPerformance","platformToPerformanceType","sortOptions","TPM","TrendChangeType","REGRESSION","IMPROVEMENT","urlParam","getTransactionsListSort","releaseTrendView","released","allReleasesPerformanceView","releasePerformanceView","transaction","generateTransactionLink","sessionsRequestProps","allReleasesLoading","allReleasesReloading","allReleasesErrored","thisReleaseLoading","thisReleaseReloading","thisReleaseErrored","isReleaseArchived","onRestore","handleRestore","ReleaseDetailsPageFilters","StyledPageTimeRangeSelector","onUpdate","handleDateChange","relativeOptions","releaseStart","timeAndDate","releaseEnd","defaultAbsolute","subtract","toDate","handleTransactionsListSortChange","tableRow","_query","trendTransaction","transactionSummaryRouteWithQuery","projectID","withPageFilters","ReleaseArchivedNotice","multi","UnarchiveButton","getFilesByRepository","fileList","filesByRepository","file","filename","repoName","authors","types","getCommitsByRepository","commitList","commitsByRepository","repositoryName","repository","perPage","activeRepository","per_page","repo_name","getReposToRender","repos","commonTermsDescription","SessionTerm","generateReleaseMarkLine","font","fontSize","created","adopted","unadopted","isSingleEnv","releaseParamsRest","isDefaultPeriod","parsedStatsPeriod","parseStatsPeriod","releaseCreated","startOf","isBetween","valueOf","releaseAdopted","releaseReplaced"],"sourceRoot":""}