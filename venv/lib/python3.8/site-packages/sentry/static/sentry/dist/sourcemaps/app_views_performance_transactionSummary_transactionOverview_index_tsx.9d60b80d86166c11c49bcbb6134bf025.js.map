{"version":3,"file":"chunks/app_views_performance_transactionSummary_transactionOverview_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"yvBAgFA,MAAMA,UAAwBC,EAAAA,UAM5BC,aAAaC,EAAiBC,GAC5B,MAAM,MACJC,EADI,OAEJC,EAFI,YAGJC,EAHI,mBAIJC,EAJI,SAKJC,EALI,SAMJC,EANI,UAOJC,GACEC,KAAKC,MAET,OAAIP,EACKA,EAAO,CAACH,OAAAA,EAAQC,cAAAA,IAGrBI,IAAuBL,GAEvB,QAAC,IAAD,CAASW,aAAW,EAACC,SAAS,MAAMC,MAAOR,EAA3C,UACE,QAACS,EAAD,CACER,SAAUA,KACNL,EAAcG,GAClBJ,OAAQA,EACR,eAAa,0BACbO,SAAUA,EACVQ,kBAAmBR,EACnBS,kBAAmBR,MAAAA,GAAAA,EAPrB,SASGN,OAOP,QAACY,EAAD,CACER,SAAUA,KACNL,EAAcG,GAClBJ,OAAQA,EACR,eAAa,0BACbO,SAAUA,EACVQ,kBAAmBR,EACnBS,kBAAmBR,MAAAA,GAAAA,EAPrB,SASGN,IAKPe,eAAejB,EAAiBkB,GAC9B,MAAM,SAACC,EAAD,WAAWC,EAAX,UAAuBC,EAAvB,eAAkCC,EAAlC,SAAkDhB,EAAlD,SAA4DC,GAChEE,KAAKC,MAEP,GAAwB,mBAAbS,EACT,OAAOA,EAAS,CAACnB,OAAAA,EAAQkB,aAAAA,IAG3B,MAAMK,EAAYH,EAAa,QAAU,OAEzC,OACE,QAACI,EAAD,IACMN,IACJZ,SAAUA,EACViB,UAAWA,EACXE,MAAOJ,EACPrB,OAAQA,EACRsB,eAAgBA,EAChBf,SAAUA,EACVmB,aAAW,EACX,eAAa,mBATf,SAWGP,IAKPQ,SACE,MAAM,iBAACC,EAAD,UAAmBC,EAAnB,UAA8BrB,GAAaC,KAAKC,MAEtD,OACE,QAACoB,EAAD,CAAWD,UAAWA,EAAWrB,UAAWA,MAAAA,GAAAA,EAA5C,UACE,QAAC,IAAD,CAAcoB,iBAAkBA,EAAhC,SACG,QAAC,OAAC5B,EAAD,aAASkB,EAAT,cAAuBjB,GAAxB,SACC,QAAC,EAAA8B,SAAD,WACGtB,KAAKV,aAAaC,EAAQC,GAC1BQ,KAAKQ,eAAejB,EAAQkB,YA1FrCrB,EAAAA,YAAAA,mB,OAAAA,EAAAA,eACgC,CAClC+B,kBAAkB,EAClBP,UAAW,SAgGf,MAAMS,GAAY,OAAO,MAAP,qBAAH,8DAIQE,GAAKA,EAAEC,MAAMC,YAAYC,OAJjC,YAKFH,GAAKA,EAAExB,WAAa,QALlB,MASTM,GAAuB,OAAOsB,EAAAA,EAAP,qBAAH,YACbJ,GAAKA,EAAEC,MAAMI,OAAOC,qBAAqBC,OAD5B,wBAKpBf,GAAU,OAAOgB,EAAAA,EAAP,qBAAH,YACAR,GAAMA,EAAEhC,OAAS,QAAU,QAD3B,kBAEKgC,GAAKA,EAAEC,MAAM9B,OAAO6B,EAAE1B,UAAY,QAAQmC,QAF/C,KAKPC,GAAe,OAAOC,EAAAA,EAAP,qBAAH,cACHX,GAAKA,EAAEC,MAAMW,gBADV,KAIlB,K,qZC5JA,SAASC,EAAoBC,GAE3B,OADAA,EAAMC,KAAKC,SAAQC,GAAMA,EAAE,GAAY,IAAPA,EAAE,KAC3BH,EAUT,SAASI,EAAiBC,GACxB,MAAMC,EAAa,IAAID,GACvB,OAAKA,EAAQE,GAAMF,EAAQG,YAAeH,EAAQI,YAAeJ,EAAQK,WAIzEJ,EAAWC,EAAIR,EAAoBM,EAAQE,GAC3CD,EAAWG,WAAaV,EAAoBM,EAAQI,YACpDH,EAAWE,WAAaT,EAAoBM,EAAQG,YACpDF,EAAWI,YAjBoBC,EAiBgBN,EAAQK,WAhBjDR,SAAQU,IACZA,EAAEC,MAAkB,IAAVD,EAAEC,MACZD,EAAEE,IAAc,IAARF,EAAEE,OAELH,GAaAL,GAPEA,EAXX,IAAiCK,EAqBjC,SAASI,EAAqBnD,GAC5B,OAAKA,EAAMoD,aAAaC,SAASC,SAASC,EAAAA,KASxC,QAAC,KAAD,CACEC,MAAM,mCACFxD,EAFN,SAIG,IAA0B,IAAzB,UAACyD,KAAcC,GAAU,EACzB,OAAO1D,EAAMS,SAAS,CACpB4B,KAAMoB,GAAaA,EAAUd,EAAIH,EAAiBiB,GAAa,QAC5DC,QAdP,wBACG1D,EAAMS,SAAS,CAAC4B,KAAM,KAAMsB,WAAW,EAAOC,MAAO,KAAMC,UAAW,SAJtEV,EAAAA,YAAAA,uBAwBT,SAAeW,EAAAA,EAAAA,GAAQX,I,sVClEvB,SAASY,EAAsB/D,GAC7B,MAAM,WAACgE,EAAD,QAAaC,EAAb,WAAsBC,EAAtB,iBAAkCC,EAAlC,iBAAoDC,GAAoBpE,EACxEyC,EAAU,CACduB,WAAAA,EACAK,OAAQJ,EACRK,UAAWJ,EACXK,mBAAoBJ,EACpBK,mBAAoBJ,IAEjBK,EAAAA,EAAAA,IAAQhC,EAAQuB,oBACZvB,EAAQuB,YAEZS,EAAAA,EAAAA,IAAQhC,EAAQ4B,gBACZ5B,EAAQ4B,QAEZI,EAAAA,EAAAA,IAAQhC,EAAQ6B,mBACZ7B,EAAQ6B,UAEjB,MAAMI,EAAoB1E,EAAM2E,UAAUC,oBAAoB5E,EAAM6E,UACpE,MAAO,IACFpC,KACAiC,GAIP,SAASI,EAAkB9E,GACzB,OACE,QAAC,KAAD,CACEwD,MAAM,2BACNuB,kBAAmBhB,KACfiB,GAAAA,CAAKhF,EAAO,YAHlB,SAKG,IAA0B,IAAzB,UAACyD,KAAcC,GAAU,EACzB,OAAO1D,EAAMS,SAAS,CAACwE,aAAcxB,KAAcC,OARlDoB,EAAAA,YAAAA,oBAcT,SAAehB,EAAAA,EAAAA,GAAQgB,I,y5BC/BvB,MAAMI,UAAa9F,EAAAA,UAAwB,oEAC1B,CACb+F,SAAS,EACTC,KAAM,GACNC,YAAa,KACbzB,MAAO,MALgC,iCAqBpB0B,IACnB,MAAMC,EAAiBxF,KAAKC,MAAM2E,UAAUa,oBAAoBzF,KAAKC,MAAM6E,UACrEY,EAAkBH,EAAUX,UAAUa,oBAAoBF,EAAUT,UAE1E,QAAQa,EAAAA,EAAAA,IAAoBH,EAAgBE,OAzBL,yBA4B7BE,iBAAkC,IAA3BC,EAA2B,wDAC5C,MAAM,IAACC,EAAD,aAAMzC,EAAN,UAAoBuB,EAApB,SAA+BE,EAA/B,eAAyCiB,GAAkB,EAAK9F,MAMtE,GALA,EAAK+F,SAAS,CAACZ,SAAS,EAAMvB,MAAO,GAAIwB,KAAM,KAK1CQ,IAAqC,IAAnBE,EAIvB,IACE,MAAMV,QAAaY,EAAAA,EAAAA,IACjBH,EACAzC,EAAa6C,KACbtB,EAAUa,oBAAoBX,IAEhC,EAAKkB,SAAS,CAACZ,SAAS,EAAOC,KAAAA,IAC/B,MAAOc,GACPC,EAAAA,GAAwBD,GACxB,EAAKH,SAAS,CAACZ,SAAS,EAAOvB,MAAOsC,SAhDD,8BAoDvBE,IAChB,MAAM,aAAChD,GAAgBrD,KAAKC,OAE5BqG,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,gCACVC,UAAW,gDACXH,IAAAA,EACAI,gBAAiBC,SAASrD,EAAasD,GAAI,UA3DN,0BAuG5B,KACX,MAAM,QAACvB,EAAD,MAAUvB,EAAV,KAAiBwB,GAAQrF,KAAK4G,MACpC,OAAIxB,EACKpF,KAAK6G,qBAEVhD,GAEA,QAAC,IAAD,CAAYiD,OAAO,QAAnB,UACE,QAAC,KAAD,CAAaC,MAAM,UAAUC,KAAK,SAIpC3B,EAAK4B,OAAS,EACT5B,EAAK6B,KAAIb,GAAOrG,KAAKmH,UAAUd,MAEjC,QAACe,EAAD,CAAyB1F,OAAK,EAA9B,UAAgC2F,EAAAA,EAAAA,GAAE,sBA9G3CC,oBACEtH,KAAKuH,WAAU,GAGjBC,mBAAmBjC,IAEfvF,KAAKyH,kBAAkBlC,IACvBA,EAAUQ,iBAAmB/F,KAAKC,MAAM8F,iBAExC/F,KAAKuH,YA8CTJ,UAAUd,GACR,MAAM,YAACqB,EAAD,YAAcpC,GAAetF,KAAKC,MAElC0H,EAAyBtB,EAAIuB,UAAUV,KAAIW,IAC/CA,EAAQC,IAAMJ,EAAYrB,EAAI0B,IAAKF,EAAQG,OAEpCH,KAIHI,EACJN,EAASV,OAAS,EACdiB,KAAKC,IAAIC,OAAO9C,GAAcqC,EAAS,GAAGU,OAC1C/C,EACN,OACE,QAAC,IAAD,CAEElF,MAAOiG,EAAI0B,IACXJ,SAAUA,EACVrC,YAAa8C,OAAOH,GACpBK,cAAe,KAAM,QAACC,EAAD,CAAmBzB,OAAO,SAC/C0B,WAAYxI,KAAKyI,eACjBC,oBAAkB,GANbrC,EAAI0B,KAWflB,qBACE,OACE,QAAC,EAAAvF,SAAD,YACE,QAACqH,EAAD,GAA4B,YAC5B,QAACJ,EAAD,GAAuB,UACvB,QAACI,EAAD,GAA4B,YAC5B,QAACJ,EAAD,GAAuB,UACvB,QAACI,EAAD,GAA4B,YAC5B,QAACJ,EAAD,GAAuB,YAuB7BrH,SACE,OACE,QAAC,EAAAI,SAAD,YACE,QAAC,KAAD,WAAiB+F,EAAAA,EAAAA,GAAE,iBAClBrH,KAAK4I,iBA7HRzD,EAAAA,YAAAA,OAmIN,MAAMiC,GAA0B,OAAOyB,EAAAA,EAAP,sBAAH,wDAKvBN,GAAoB,OAAOO,EAAAA,EAAP,sBAAH,kBACJvH,GAAKA,EAAEC,MAAMuH,cADT,+BAGJC,EAAAA,EAAAA,GAAM,KAHF,KAMjBL,GAAyB,OAAOG,EAAAA,EAAP,sBAAH,0CAGTE,EAAAA,EAAAA,GAAM,IAHG,KAO5B,GAAejF,EAAAA,EAAAA,GAAQoB,I,soFC5JvB,MAAM8D,WAAsB5J,EAAAA,UAAiB,kEA2BzB,KAChB,MAAM,aAACgE,GAAgBrD,KAAKC,OAC5BqG,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,wCACVC,UAAW,0DACXC,gBAAiBC,SAASrD,EAAasD,GAAI,UAhCJ,kCAoCtB,KACnB,MAAM,YAACuC,GAAelJ,KAAKC,MAErBkJ,EAAqBD,GAAeE,EAAAA,GAAyBF,GAC7DG,EAAkBF,EACpBA,EAAmBG,eACnBjC,EAAAA,EAAAA,GAAE,mBAEN,OACE,QAAC,KAAD,WACE,QAAC,IAAD,WACE,QAAC,IAAD,WACE,uBACGkC,EAAAA,EAAAA,IAAI,2DAA4D,CAC/DC,WAAYH,eAjD1BI,oBACE,MAAM,YAACC,EAAD,aAAcrG,EAAd,MAA4BH,EAA5B,IAAmCC,EAAnC,YAAwC+F,EAAxC,SAAqDpE,GAAY9E,KAAKC,MAEtE0J,EAAc,CAClBzG,MAAAA,EACAC,IAAAA,EACA+F,YAAAA,EACAU,MAAO,EACPC,KAAM,SACHC,GAAAA,CAAKhF,EAASiF,MAAO,IAAIC,OAAOC,OAAOC,EAAAA,IAAY,YAElDC,EAAgB,IAAIC,EAAAA,IAAcC,EAAAA,EAAAA,IAAavF,EAASiF,MAAMA,MAAO,KAM3E,OALAO,EAAAA,EAAAA,IAA4BH,GAC5BA,EACGI,YAAY,iBACZC,gBAAgB,cAAe,CAACd,IAE5B,CACLe,KAAO,kBAAiBpH,EAAa6C,eACrCyD,YAAa,IACRA,EACHI,MAAOI,EAAcO,iBAqC3BxJ,SACE,MAAM,aAACmC,GAAgBrD,KAAKC,OACtB,KAACwK,EAAD,YAAOd,GAAe3J,KAAKyJ,oBAC3BkB,EAAc,CAClBC,SAAW,kBAAiBvH,EAAa6C,eACzC6D,MAAOJ,GAGT,OACE,QAAC,EAAArI,SAAD,YACE,QAACuJ,GAAD,YACE,QAAC,KAAD,WAAiBxD,EAAAA,EAAAA,GAAE,qBACnB,QAAC,KAAD,CACE,eAAa,cACbL,KAAK,SACL8D,GAAIH,EACJI,QAAS/K,KAAKgL,gBAJhB,UAMG3D,EAAAA,EAAAA,GAAE,wBAIP,QAAC4D,GAAD,WACE,QAAC,IAAD,CACEC,MAAO7H,EAAa6C,KACpBiF,aAAcV,EACdd,YAAaA,EACbI,MAAM,GACNqB,iBAAiB,EACjBC,mBAAoBrL,KAAKqL,mBACzBC,WAAW,EACXC,gBAAgB,UA1FtBtC,GAAAA,YAAAA,gBAkGN,MAAM4B,IAAkB,OAAO,MAAP,qBAAH,gFAIF7B,EAAAA,EAAAA,GAAM,GAJJ,KAOfiC,IAAe,OAAO,MAAP,qBAAH,kBACCjC,EAAAA,EAAAA,GAAM,GADP,IAEdwC,EAAAA,GAFc,oBAIIxC,EAAAA,EAAAA,GAAM,GAJV,MAQlB,M,+gCCvEA,SAASyC,GAAT,GAcU,IAda,aACrBpI,EADqB,UAErBO,EAFqB,MAGrBC,EAHqB,OAIrB6H,EAJqB,MAKrBxI,EALqB,IAMrBC,EANqB,IAOrBwI,EAPqB,OAQrBC,EARqB,YASrB1C,EATqB,UAUrB2C,EAVqB,UAWrBjH,EAXqB,SAYrBE,EAZqB,gBAarBgH,GACQ,EACR,MAAMC,GAAqB1I,EAAaC,SAASC,SAC/C,4CAEI/B,GAAQwK,EAAAA,GAAAA,KACd,OACE,QAACC,GAAD,YACE,QAACC,GAAD,CAAYC,IAAI,MAAhB,WACE,QAACC,GAAD,YACG/E,EAAAA,EAAAA,GAAE,UACH,QAAC,KAAD,CACElH,SAAS,MACTC,OAAOiM,EAAAA,GAAAA,IAAYhJ,EAAciJ,GAAAA,GAAAA,OACjCtF,KAAK,WAGT,QAACuF,GAAD,CACE,eAAa,sBACb3I,UAAWA,EACXC,MAAOA,EACPmE,MACE0D,GACIc,EAAAA,GAAAA,IAAYT,EAAoBL,EAAOe,MAAQf,EAAO,WAAY,GAClE,WAKV,QAACQ,GAAD,CAAYC,IAAI,QAAhB,WACE,QAACC,GAAD,YACG/E,EAAAA,EAAAA,GAAE,iBACH,QAAC,KAAD,CACElH,SAAS,MACTC,OAAOiM,EAAAA,GAAAA,IAAYhJ,EAAciJ,GAAAA,GAAAA,cACjCtF,KAAK,WAGT,QAACuF,GAAD,CACE,eAAa,6BACb3I,UAAWA,EACXC,MAAOA,EACPmE,MACE0D,GACIgB,EAAAA,GAAAA,IACEX,EAAoBL,EAAOiB,aAAejB,EAAO,mBAEnD,WAKV,QAACQ,GAAD,CAAYC,IAAI,QAAhB,WACE,QAACC,GAAD,YACG/E,EAAAA,EAAAA,GAAE,QACH,QAAC,KAAD,CACElH,SAAS,MACTC,OAAOiM,EAAAA,GAAAA,IAAYhJ,EAAciJ,GAAAA,GAAAA,KACjCtF,KAAK,WAGT,QAACuF,GAAD,CACE,eAAa,oBACb3I,UAAWA,EACXC,MAAOA,EACPmE,MACE0D,GACInC,EAAAA,EAAAA,IAAI,YAAa,CACfqD,KAAKJ,EAAAA,GAAAA,IAAYT,EAAoBL,EAAOkB,IAAMlB,EAAO,SAAU,KAErE,WAKV,QAAC,KAAD,CACE5G,SAAUA,EACVzB,aAAcA,EACduB,UAAWA,EAHb,SAKGiI,IACC,QAAC,KAAD,CACEjB,OAAQA,EACRkB,OAAQ5D,EACRhG,MAAOA,EACPC,IAAKA,EACLwI,IAAKA,EACLoB,WAAY,CAAC,EAAG,EAAG,GANrB,SAQGC,IACC,MAAM,QAACC,EAAD,QAAU7H,EAAV,UAAmB8H,EAAnB,aAA8BC,EAA9B,OAA4CC,GAAUvB,EAE5D,GAAIoB,EACF,OACE,QAAC,KAAD,CAAYnG,OAAO,QAAnB,UACE,QAAC,MAAD,CAAaC,MAAM,UAAUC,KAAK,SAKxC,GAAI3D,EAAaC,SAASC,SAASC,GAAAA,IAAe,CAChD,MAAM6J,EAAYD,EAAOE,MACvBC,GAAKA,EAAEC,WAAWjK,SAAS,QAAUgK,EAAEC,WAAWjK,SAAS,SAEzD8J,GAAaR,EAAQvK,OACvB+K,EAAUI,WAAYC,EAAAA,GAAAA,GAAU,CAC9BpL,KAAMuK,EAAQvK,KAAKS,UAAUmE,KAAIjE,IAAC,YAAK,CACrC0K,KAAM1K,EAAE0D,GACRiH,MAAK,UAAEP,EAAU/K,KAAKgL,MAAK,QAAC,KAACK,GAAF,SAAYA,GAAQ1K,EAAEE,IAAMF,EAAEC,OAAS,YAA7D,aAAE,EACH8E,MAEJ6F,MAAO5K,EAAEC,MACT4K,UAAW,CACTC,YAAahH,IAAAA,EAAMiH,EAAAA,GAAAA,IAAe/K,EAAEgL,WAAYzM,IAAQ0M,SACxDnH,MAAOA,IAAAA,EAAMiH,EAAAA,GAAAA,IAAe/K,EAAEgL,WAAYzM,IACvC2M,MAAM,IACNC,MACAF,UAELnD,QAAS,KACP,MAAMsD,GAASC,EAAAA,GAAAA,IAAwB,CACrCC,QAASlL,EAAa6C,KACtB6D,MAAOjF,EAASiF,MAChByE,WAAWnE,EAAAA,EAAAA,IAAavF,EAASiF,MAAM0E,SACvC/E,YAAaoC,IAEf4C,EAAAA,eAAAA,KAAoBL,QAGxBM,OAAQ,SACRC,WAAY,MAKlB,OACE,QAAC,KAAD,CAAiBxJ,QAASA,EAAS8H,UAAWA,EAAWpG,OAAO,QAAhE,WACE,QAAC,KAAD,CAAwB+H,QAAS3B,KAChC4B,EAAAA,GAAAA,GAAe,CACd9G,OACE,QAAC,KAAD,IAAegF,KAAqBG,EAAcC,OAAQA,IAE5D2B,OAAO,QAAC,KAAD,CAAajI,OAAO,QAAQkI,OAAO,6BAY9D,SAASC,GAAT,GASmB,IATa,SAC9BnK,EAD8B,UAE9BF,EAF8B,aAG9BvB,EAH8B,OAI9BuI,EAJ8B,UAK9BhI,EAL8B,MAM9BC,EAN8B,OAO9B6H,EAP8B,gBAQ9BI,GACiB,EACjB,MAAMhG,GAAMoJ,EAAAA,EAAAA,KACN1N,GAAQwK,EAAAA,GAAAA,KACRmD,GAAaC,EAAAA,EAAAA,MAEbC,EAAS7N,EAAM8N,OAAOC,gBAAgB,GACtCrG,EAActE,EAAUsE,YACxBhG,EAAQ0B,EAAU1B,OAAQsM,EAAAA,GAAAA,IAAwB5K,EAAU1B,YAASuM,EACrEtM,EAAMyB,EAAUzB,KAAMqM,EAAAA,GAAAA,IAAwB5K,EAAUzB,UAAOsM,EAC/DhB,EAAU7J,EAAU6J,QACpBiB,EAAc9K,EAAU8K,YACxB3F,EAAQnF,EAAUmF,MAClB4B,EAAsD,UAAhDgE,EAAAA,EAAAA,IAAwB7K,EAASiF,OAAO4B,IAE9CiE,EAAiB,CACrBC,OAAO,EACPC,SAAU,CACRC,MAAM,GAERC,SAAU,CACRD,MAAM,GAERE,UAAW,CACTF,MAAM,IAIJ5C,EAA+C,CACnDrG,OAAQ,IACRoJ,KAAM,CACJ,CACE/D,IAAK,OACLgE,KAAM,OACNC,MAAO,OACPtJ,OAAQ,SAEV,CACEqF,IAAK,QACLgE,KAAM,OACNC,MAAO,OACPtJ,OAAQ,SAEV,CACEqF,IAAK,QACLgE,KAAM,OACNC,MAAO,OACPtJ,OAAQ,UAGZuJ,YAAa,CAEXC,KAAM,CAAC,CAACvD,WAAY,CAAC,EAAG,EAAG,MAE7BwD,MAAOC,MAAMC,KAAK,IAAID,MAAM,IAAItJ,KAAI,CAACwJ,EAAIC,KAAL,CAClCC,UAAWD,EACXE,KAAM,OACNd,MAAM,MAERe,MAAO,CACL,CAEEF,UAAW,EACXG,SAAU,GACVC,UAAW,CACTC,UAAYjJ,GAAmB,IAAEwE,EAAAA,GAAAA,IAAYxE,EAAO,KACpDjB,MAAOvF,EAAM0P,eAEZtB,GAEL,CAEEgB,UAAW,EACXO,YAAa,EACbJ,SAAU,GACV5I,IAAK,EACL6I,UAAW,CACTC,UAAYjJ,IAAkB0E,EAAAA,GAAAA,IAAiB1E,EAAO,GACtDjB,MAAOvF,EAAM0P,eAEZtB,GAEL,CAEEgB,UAAW,EACXO,YAAa,EACbH,UAAW,CACTC,UAAWG,GAAAA,GACXrK,MAAOvF,EAAM0P,eAEZtB,IAGPjE,IAAAA,EACA0F,iBAAiB,EACjBC,mBAAmB,EACnBjC,OAAQ,CAACA,EAAO,GAAIA,EAAO,GAAIA,EAAO,IACtCkC,QAAS,CACPC,QAAS,OACTC,SAAU,GACVC,eAAgBC,GAAAA,GAChBC,cAAc5J,GACK,UAAVA,EAAoB,QAAUA,IAKrC6J,EAAqB,CACzB/L,IAAAA,EACA5C,MAAAA,EACAC,IAAAA,EACA+F,YAAAA,EACAuF,QAAAA,EACAiB,YAAAA,EACA3F,MAAAA,GAGI+H,EAAqB,CACzBzO,aAAAA,EACAuI,OAAAA,EACA/H,MAAAA,EACAD,UAAAA,EACAV,MAAAA,EACAC,IAAAA,EACAwI,IAAAA,EACAD,OAAAA,GAGIqG,EAAoB,CACxB7O,MAAOA,GAAS,KAChBC,IAAKA,GAAO,KACZ2J,OAAQ5D,GAGV,OACE,QAAC,KAAD,IACM2I,EACJxO,aAAcA,EACd0N,UAAUiB,EAAAA,GAAAA,IAAYD,GACtBE,aAAa,EACbC,iBAAiB,EACjBtE,MAAO,CAAC,UAAW,iBAAkB,SACrCuE,SAAO,EACPC,SAAS,oDACTC,aAAaC,EAAAA,GAAAA,IAAkBnD,GATjC,SAWG,IAA4C,IAA3C,QAACtC,EAAD,QAAUI,EAAV,QAAmB7H,EAAnB,UAA4B8H,GAAe,EAC3C,MAAME,EAASP,EACXA,EAAQ3F,KAAI,CAAC+C,EAAQsI,KAAT,IACPtI,EACHuI,WAAYD,EACZxF,WAAYwF,MAEd,GAEJ,OACE,QAAC9G,GAAD,IACMqG,EACJhG,gBAAiBA,EACjBhH,SAAUA,EACVF,UAAWA,EACXiH,UAAW,CAACuB,OAAAA,EAAQH,QAAAA,EAAS7H,QAAAA,EAAS8H,UAAAA,EAAWC,aAAAA,QAe7D,SAASZ,GAAT,GAAiF,IAAtD,MAAC1I,EAAD,UAAQD,EAAR,MAAmBoE,KAAU/H,GAAyB,EAC/E,OAAI4D,GACK,kBAAS5D,EAAT,SAAiB,MAGtB2D,GACK,QAAC,KAAD,CAAakD,OAAO,UAAW7G,KAGjC,QAACwS,GAAD,IAAgBxS,EAAhB,SAAwB+H,IAxWxByD,GAAAA,YAAAA,gBAuKAwD,GAAAA,YAAAA,yBAwLA1C,GAAAA,YAAAA,oBAYT,MAAMN,IAAc,OAAO,MAAP,qBAAH,4CAIXG,IAAa,OAAOsG,EAAAA,GAAP,qBAAH,mCAIVxG,IAAa,OAAO,MAAP,qBAAH,0BAEP3K,GAAKA,EAAE4K,KAFA,eAMVsG,IAAa,OAAO,MAAP,qBAAH,cACDlR,GAAKA,EAAEC,MAAMmR,oBADZ,KAIhB,IAAeC,EAAAA,EAAAA,YAAW3D,ICjb1B,SAAS4D,GAAT,GAAsC,IAAf,KAACvQ,GAAc,EACpC,MAAMwQ,EAAQxQ,EAAKyQ,QAAO,CAACC,EAAKC,IAAUA,EAAMjL,MAAQgL,GAAK,GAC7D,OACE,QAACE,GAAD,UACG5Q,EAAK4E,KAAI,CAAC+L,EAAOV,KAChB,QAAC,EAAAjR,SAAD,YACE,QAAC6R,GAAD,WAAazG,EAAAA,GAAAA,IAAiBuG,EAAMjL,MAAQ8K,EAAO,MACnD,QAACM,GAAD,CACE,eAAe,UAASH,EAAMxT,QAC9B4T,OAAQJ,EAAMlI,QAAU,UAAY,UACpCA,QAASkI,EAAMlI,QAHjB,WAKE,QAACuI,GAAD,CAAKC,MAAO,CAACvS,MAAQ,IAAIiS,EAAMjL,MAAQ8K,EAAS,KAAKU,QAAQ,UAC7D,QAACC,GAAD,UAAQR,EAAMxT,aARF,GAAE8S,KAAKU,EAAMxT,aAL5BoT,GAAAA,YAAAA,gBAqBT,YAEMK,IAAgB,OAAO,MAAP,sBAAH,mEAGHlK,EAAAA,EAAAA,GAAM,GAHH,aAINA,EAAAA,EAAAA,GAAM,GAJA,KAObmK,IAAa,OAAO,MAAP,sBAAH,cACD5R,GAAKA,EAAEC,MAAMmR,oBADZ,sBAKVS,IAAe,OAAO,MAAP,sBAAH,iBACApK,EAAAA,EAAAA,GAAM,GADN,mBAECA,EAAAA,EAAAA,GAAM,GAFP,8BAINzH,GAAKA,EAAE8R,QAJD,KAOZI,IAAQ,OAAO,OAAP,sBAAH,4BAEAlS,GAAKA,EAAEC,MAAMkS,WAFb,yBAIInS,GAAKA,EAAEC,MAAMmS,eAJjB,KAOLL,IAAM,OAAO,MAAP,sBAAH,uCAEa/R,GAAKA,EAAEC,MAAMQ,QAF1B,mE,kEC3CT,SAAS4R,GAAT,GAAqE,IAA5C,UAAChP,EAAD,SAAYE,EAAZ,aAAsBzB,GAAsB,EACnE,MAAMwQ,EAAYxQ,EAAaC,SAASC,SACtC,4CAEIuQ,EAAgBlP,EACnBmP,YAAY,CACX,CAACC,KAAM,WAAYC,SAAU,CAAC,QAAS,GAAI,QAAIxE,IAC/C,CAACuE,KAAM,QAASE,MAAO,wBAExBC,UAAU,CAAC,CAACH,KAAM,OAAQE,MAAO,WAEpC,OACE,QAAC,EAAA5S,SAAD,YACE,QAAC,KAAD,YACG+F,EAAAA,EAAAA,GAAE,qBACH,QAAC,KAAD,CACElH,SAAS,MACTC,OAAOiM,EAAAA,GAAAA,IAAYhJ,EAAciJ,GAAAA,GAAAA,kBACjCtF,KAAK,WAGT,QAAC,IAAD,CACEpC,UAAWkP,EACXhP,SAAUA,EACVyJ,QAASlL,EAAa6C,KACtBkM,SAAS,mCACTyB,UAAWA,EALb,SAOG,IAAmC,IAAlC,UAACjQ,EAAD,MAAYC,EAAZ,UAAmBH,GAAe,EAClC,GAAIE,EACF,OAAO,QAAC,KAAD,CAAakD,OAAO,UAE7B,GAAIjD,EACF,OACE,QAAC,KAAD,CAAYiD,OAAO,QAAnB,UACE,QAAC,MAAD,CAAaC,MAAM,UAAUC,KAAK,SAIxC,IAAKtD,GAAuC,IAA1BA,EAAUpB,KAAK2E,OAC/B,OACE,QAACmN,GAAD,CAAsB1S,OAAK,EAA3B,UAA6B2F,EAAAA,EAAAA,GAAE,uBAGnC,MAAMgN,EAAS3Q,EAAUpB,KAAK4E,KAAIoN,IAAO,CACvC7U,MAAO8U,OAAOD,EAAI,uBAClBtM,MAAOtB,SAAS6N,OAAOD,EAAIT,EAAY,UAAY,UAAW,IAC9D9I,QAAS,KACP,MAAMhB,EAAQ,IAAIK,EAAAA,GAAcxF,EAAUmF,OAC1CA,EACGyK,aAAa,uBACbhK,gBAAgB,qBAAsB,CACrC8J,EAAI,wBAER5F,EAAAA,eAAAA,KAAoB,CAClB9D,SAAU9F,EAAS8F,SACnBb,MAAO,IACFjF,EAASiF,MACZsJ,YAAQ5D,EACR1F,MAAOA,EAAMW,mBAIjB+J,EAAAA,GAAAA,GACE,+DACA,CACEpR,aAAAA,EACAqR,OAAQJ,EAAI,6BAKpB,OAAO,QAAC,GAAD,CAAehS,KAAM+R,UAxE7BT,GAAAA,YAAAA,kBA+ET,MAAMQ,IAAuB,OAAOvL,EAAAA,EAAP,sBAAH,wDAK1B,M,mbCtEe,SAAS8L,GAAa1U,GAAc,MACjD,MAAM,SAAC6E,EAAD,aAAWzB,EAAX,UAAyBuB,EAAzB,OAAoC8G,EAApC,UAA4CkJ,EAA5C,gBAAuD9I,GAAmB7L,EAC1E4J,GAAOgL,EAAAA,GAAAA,IAA+B/P,EAAU,YAChDuO,GAAShJ,EAAAA,EAAAA,IAAY,UAACvF,EAASiF,aAAV,aAAC,eAEtB+K,EAAkBlQ,EACrBmP,YACC,IAAI/J,OAAOC,OAAO8K,GAAAA,MAAoB/K,OAAOC,OAAO+K,GAAAA,IAAsB9N,KACxEgN,IAAS,CAAEF,KAAM,QAASE,MAAAA,OAG7BC,UAAU,CAAC,CAACH,KAAM,OAAQE,MAAOrK,EAAKqK,SACnCe,EAASC,GAAAA,GAAoBrL,EAAKqK,OACxCY,EAAgBG,OAASA,EAASA,EAAO/N,KAAIgN,IAAS,CAAEA,MAAAA,MAAW,GAEnE,MAAM,SAACiB,IAAYC,EAAAA,GAAAA,KAEnB,OACE,QAAC,KAAD,CACEtQ,SAAUA,EACVyJ,QAASlL,EAAa6C,KACtBtB,UAAWkQ,EACXlL,MAAO,EACP3F,WAAY,EACZoP,OAAQA,EANV,SAQG,QAAC,aAACnO,EAAD,UAAetB,EAAf,UAA0BE,GAA3B,SACC,QAAC,EAAAxC,SAAD,YACE,QAAC+T,GAAD,CACEvQ,SAAUA,EACVzB,aAAcA,EACduR,UAAWA,EACX9I,gBAAiBA,EACjBhI,UAAWA,KAEb,QAAC,KAAD,CACEgB,SAAUA,EACVzB,aAAcA,EACdyI,gBAAiBA,EACjB2C,QAAS0G,EAAS7H,MAAK/L,GAAKA,EAAEoF,KAAOiO,IACrChR,UAAWA,EACXsB,aAAcA,MAAAA,EAAAA,EAAgB,GAC9BwG,OAAQA,EACR7B,KAAMkL,GAAAA,EAAAA,2BAgBlB,SAASM,GAAmBpV,GAC1B,MAAM,SAAC6E,EAAD,aAAWzB,EAAX,UAAyBuR,EAAzB,gBAAoC9I,EAApC,UAAqDhI,GAAa7D,EAElEqV,GAAgBC,EAAAA,GAAAA,IAAoB,CACxChH,QAASlL,EAAa6C,KACtBwD,YAAaoC,EACb0C,UAAWoG,EACX7K,MAAOjF,EAASiF,QAUlB,OACE,QAACyL,GAAD,YACE,0BACE,QAAC,KAAD,WAAiBnO,EAAAA,EAAAA,GAAE,oBACnB,QAAC,KAAD,CAAcwJ,KAAK,YAErB,QAAC,KAAD,CAAQ/F,GAAIwK,EAAetO,KAAK,SAAS,eAAa,yBAAtD,UACGK,EAAAA,EAAAA,GAAE,qBAEL,QAACoO,GAAD,CAAkB3R,UAAWA,EAAW4R,SAhBR,CAACrC,EAAQzI,EAAUb,KACrD2E,EAAAA,eAAAA,KAAoB,CAClB9D,SAAAA,EACAb,MAAO,IAAIA,EAAO,YAAqBsJ,MAayBrM,KAAK,cArFnD2N,GAAAA,YAAAA,eA2DfU,GAAAA,YAAAA,qBA+BT,MAAMG,IAAS,OAAO,MAAP,qBAAH,mEAGOxM,EAAAA,EAAAA,GAAM,GAHb,wBAONyM,IAAmB,OAAOE,GAAAA,EAAP,qBAAH,iBACJ3M,EAAAA,EAAAA,GAAM,GADF,K,oTCzGtB,SAAS4M,GAAT,GASU,IATS,UACjBhS,EADiB,aAEjBiS,EAFiB,MAGjBhS,EAHiB,OAIjB6H,EAJiB,SAKjB5G,EALiB,aAMjBzB,EANiB,gBAOjByI,EAPiB,UAQjBlH,GACQ,EACR,MAAMmH,GAAqB1I,EAAaC,SAASC,SAC/C,4CAEF,IAAIuS,EAAuB,OAAVjS,GAAiB,wBAAM,OAAkB,QAAC,KAAD,CAAaiD,OAAO,SAE9E,IAAKlD,GAAuB,OAAVC,GAAkB6H,EAAQ,CAC1C,MAAMqK,EAAgCrK,EAAOsK,yBAAyB,GAChEC,EAAqClK,EACvCL,EAAOwK,qBACPxK,EAAO,0BACLyK,EAA0BpK,EAC5BL,EAAO0K,YACP1K,EAAO,iBACL2K,EAAatK,EACfL,EAAO4K,kBACP5K,EAAO,uBACXoK,GACE,QAAC,KAAD,CACES,KAAM,GACNC,UAAW,GACXV,WAAYK,EACZM,YAAaV,EACbM,WAAYA,EACZJ,eAAgBA,IAKtB,MAAM1H,EAAUlL,EAAa6C,KAEvBwQ,GAAkBC,EAAAA,GAAAA,IAAqB,CAC3CpI,QAAAA,EACA7E,YAAaoC,EACb0C,WAAWnE,EAAAA,EAAAA,IAAavF,EAASiF,MAAM0E,SACvC1E,MAAOjF,EAASiF,QAGlB,OACE,QAAC,EAAAzI,SAAD,WACGuU,IACC,QAAC,EAAAvU,SAAD,YACE,QAACsV,GAAD,YACE,QAAC,KAAD,YACGvP,EAAAA,EAAAA,GAAE,eACH,QAAC,KAAD,CACElH,SAAS,MACTC,OAAOiH,EAAAA,EAAAA,GACL,0FAEFL,KAAK,WAGT,QAAC,KAAD,CAAM8D,GAAI4L,EAAV,UACE,QAAC,MAAD,UAGJ,QAAC,KAAD,CACE5R,SAAUA,EACV+R,MAAO,CAACC,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,KAClDvI,QAASA,EACTmB,YAAa9K,EAAU8K,YACvBxM,MAAO0B,EAAU1B,MACjBC,IAAKyB,EAAUzB,IACf+F,YAAatE,EAAUsE,YACvBuF,QAAS7J,EAAU6J,QACnBsI,qBAAmB,EACnBC,oBAAkB,KAEpB,QAAC,KAAD,QAGJ,QAAC,KAAD,YACG3P,EAAAA,EAAAA,GAAE,gBACH,QAAC,KAAD,CACElH,SAAS,MACTC,OAAOiM,EAAAA,GAAAA,IAAYhJ,EAAciJ,GAAAA,GAAAA,aACjCtF,KAAK,UAGR8O,GACD,QAAC,KAAD,OA1FGF,GAAAA,YAAAA,YA+FT,MAAMgB,IAAgB,OAAO,MAAP,sBAAH,yFAMnB,MCtDA,SAASK,GAAT,GAYU,UAZc,UACtBrS,EADsB,SAEtBE,EAFsB,YAGtBQ,EAHsB,6BAItB4R,EAJsB,aAKtB7T,EALsB,SAMtB8R,EANsB,UAOtBvR,EAPsB,MAQtBC,EARsB,UAStB+Q,EATsB,gBAUtB9I,EAVsB,eAWtBqL,GACQ,EACR,MAAMpL,GAAqB1I,EAAaC,SAASC,SAC/C,4CAuFI6T,EAAmC/T,EAAaC,SAASC,SAC7D,mCAGIwG,GAAQM,EAAAA,EAAAA,IAAavF,EAASiF,MAAMA,MAAO,IAC3CsN,EACY,OAAhB/R,EACI,KACAyG,EACAzG,EAAY+C,MACZ/C,EAAY,WAIZuQ,GACJyB,EAAAA,EAAAA,IAA8B1S,EAAWuQ,IACxB,OAAhB7P,GACCiS,EAAAA,GAAAA,MAAkBC,GAChBA,EAAMC,OAAOC,MAAKb,IAChB,MAAMc,EAAgB,cAAad,KAASe,EAAAA,MACtC1D,EAAQnI,GACV8L,EAAAA,EAAAA,IAAkBF,GAClBA,EACJ,OAAOvP,OAAO0P,SAASxS,EAAY4O,SAIrC6D,GAAiBC,EAAAA,EAAAA,IAAsBpT,EAAWuQ,GAElD8C,EAAyB,EAC7B5Q,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,SACFA,EAAAA,EAAAA,GAAE,mBACFA,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,cAGJ,IAAI6Q,EAA4BtT,EAAUuT,QAE1C,GAAI9U,EAAaC,SAASC,SAAS,6BAA8B,CAG/D,MAAM6U,GAAmCC,EAAAA,EAAAA,IACvCnB,EACApS,GAGEsT,IACFxT,EAAYA,EAAUuT,QACtBvT,EAAUmF,MAAS,GAAEnF,EAAUmF,SAASqO,IAAmCE,OAC3EJ,EAA4BtT,EAAUuT,SAKxC,MAAMI,EACJrB,IAAiCsB,EAAAA,GAAAA,MAC7BnR,EAAAA,EAAAA,GAAE,sBACD,GAAE6P,aAGTe,EAAuBQ,OAAO,EAAG,EAAGF,GAIpC,IAAIG,EAAgBC,EAAAA,GAEhBzB,IAAiCsB,EAAAA,GAAAA,OACnCE,GAAgBE,EAAAA,EAAAA,IAAc1B,IAGhC,MAAMjC,EAAS,IAAIiD,EAA0BjD,QAG7CA,EAAOwD,OAAO,EAAG,EAAG,CAACvE,MAAOwE,IAExBxB,IAAiCsB,EAAAA,GAAAA,MACnCvD,EAAO4D,QACFC,EAAAA,GAAAA,KAA6B5E,IACvB,CAACA,MAAAA,OAKdgE,EAA0BjD,OAASA,EAGrC,MAAM8D,EAAqB,CACzBC,yCAA0C,KACxC,MAAMC,EAjHV,SACEf,EACAD,GACA,MACA,MAAM,SAACiB,GAAYC,GAAwBrU,EAAU,CACnDsU,IAAG,QAAG,EAAArN,EAAoBzG,MAAAA,OAAH,EAAGA,EAAa8T,IAAM9T,MAAAA,OAAtB,EAAsBA,EAAc,gBAAxD,QAAqE,EACxE4R,6BAAAA,IAEIpC,EAAkBoD,EAA0B/D,UAAU,CAAC+E,EAASrP,OAEtE,GAAIqN,IAAiCsB,EAAAA,GAAAA,KAAmC,CACtE,MAAMvD,EAAS,IAEVH,EAAgBG,OAAOoE,MAAM,EAAGpB,EAAuBhR,SAI5D6N,EAAgBG,OAASA,EAAOqE,QAAO,IAAa,IAAZ,MAACpF,GAAW,EAClD,QAAQqF,EAAAA,EAAAA,IAAsCrF,MAGlD,OAAOY,EA4FoC0E,CACvCtB,EACAD,GAGF,OADAgB,EAAiClP,MAAQA,EAClCkP,GAETQ,yBAhIF,YACEnT,EAAAA,EAAAA,IAAoB,CAClBC,SAAU,uDACVC,UAAW,iEACXC,gBAAiBC,SAASrD,EAAasD,GAAI,QA+H/C,OACE,QAAC,EAAArF,SAAD,YACE,QAAC,KAAD,YACE,QAACoY,GAAD,YACE,QAAC,KAAD,CACErW,aAAcA,EACd8G,cAAe+M,EACfC,eAAgBA,KAElB,QAAC,IAAD,CAAewC,WAAS,EAAxB,WACE,QAAC,IAAD,KACA,QAAC,IAAD,CAAgBC,cAAc,aAEhC,QAACC,GAAD,CACEC,aAAa,sBACbzW,aAAcA,EACd0W,WAAYnV,EAAU6J,QACtB1E,MAAOA,EACPkL,OAAQrQ,EAAUqQ,OAClB+E,SA3MV,SAAsBjQ,GACpB,MAAMJ,GAAcgG,EAAAA,EAAAA,IAAwB,IACtC7K,EAASiF,OAAS,GACtBA,MAAAA,IAIIkQ,EAAoBhV,GAAAA,CAAK0E,EAAa,UAE5C+E,EAAAA,eAAAA,KAAoB,CAClB9D,SAAU9F,EAAS8F,SACnBb,MAAO,IACFkQ,EACHC,cAAc,MA+LVC,eAAgBC,EAAAA,MAElB,QAAC,IAAD,QAEF,QAAC,IAAD,CACE/W,aAAcA,EACdyB,SAAUA,EACVF,UAAWA,EACXU,YAAa+R,EACblN,cAAe+M,EACfmD,gBAAiBjD,KAEnB,QAAC,IAAD,CACEtS,SAAUA,EACVzB,aAAcA,EACduB,UAAWsT,KACPa,EACJuB,kBACEjQ,EAAAA,EAAAA,IACEvF,EAASiF,MAAMuQ,iBACfC,EAAAA,GAAAA,MAGJC,WAAWC,EAAAA,EAAAA,IAAyB3V,GACpC4V,OAAQzC,EACR0C,qBAzLR,SAA0C3S,GACxC,MAAMqG,EAAS,CACbzD,SAAU9F,EAAS8F,SACnBb,MAAO,IAAIjF,EAASiF,MAAOuQ,iBAAkBtS,EAAO4S,uBAAmBnL,IAGzEf,EAAAA,eAAAA,KAAoBL,IAoLdwM,aAAc,CACZlU,IAAImU,EAAAA,EAAAA,IAAwBhP,GAC5BiP,OAAOC,EAAAA,EAAAA,IAAkBpW,EAAUqW,uBAAuBnW,KAE5DoW,iBA/MR,SAA0BC,GACxB,MAAO,CAACC,EAAiBpT,KACvB,MAAMqT,GAAmBC,EAAAA,EAAAA,IAA0B1W,EAAUmF,QAE7DwR,EAAAA,EAAAA,IAAYF,EAAkBD,EAAQD,EAAQnT,GAE9C0G,EAAAA,eAAAA,KAAoB,CAClB9D,SAAU9F,EAAS8F,SACnBb,MAAO,IACFjF,EAASiF,MACZsJ,YAAQ5D,EACR1F,MAAOsR,EAAiB3Q,uBAqMpByO,GAAwBrU,EAAU,CACpCsU,IAAG,QAAG,EAAArN,EAAoBzG,MAAAA,OAAH,EAAGA,EAAa8T,IAAM9T,MAAAA,OAAtB,EAAsBA,EAAc,gBAAxD,QAAqE,EACxE4R,6BAAAA,IAEFsE,aAAc5X,KAEhB,QAAC,IAAD,CACE6X,YAAY,EACZnY,SAAU,CAAC,gDAFb,UAIE,QAACqR,GAAD,CACE7P,SAAUA,EACVzB,aAAcA,EACduB,UAAWA,EACX8G,QACEhH,EAAAA,EAAAA,IAAQY,MAAAA,OAAD,EAACA,EAAc,YAClB,CAAC,UAAWA,EAAa,YACzB,KAENsP,UAAWA,EACX9I,gBAAiBA,OAGrB,QAAC,MAAD,CACElH,UAAWA,EACXvB,aAAcA,EACdyB,SAAUA,EACVqQ,SAAUA,EACVrJ,gBAAiBA,EACjB3B,cAAe+M,KAEjB,QAAC,GAAD,CACE7T,aAAcA,EACdyB,SAAUA,EACV4E,YAAaoC,EACb5I,MAAO0B,EAAU1B,MACjBC,IAAKyB,EAAUzB,IACf+F,YAAatE,EAAUsE,kBAG3B,QAAC,KAAD,YACE,QAAC,GAAD,CACE7F,aAAcA,EACdyB,SAAUA,EACVlB,UAAWA,EACXiS,aAAcA,EACdhS,MAAOA,EACP6H,OAAQpG,EACRwG,gBAAiBA,EACjBlH,UAAWA,KAEXmT,IACA,QAAC,GAAD,CACEnT,UAAWA,EACXvB,aAAcA,EACdyB,SAAUA,KAGd,QAAC,KAAD,KACA,QAAC,GAAD,CACEzB,aAAcA,EACdO,UAAWA,EACXC,MAAOA,EACP6H,OAAQpG,EACRV,UAAWA,EACXkH,gBAAiBA,KAEnB,QAAC,KAAD,KACA,QAAC,IAAD,CACEpE,YA9RR,SAAwBK,EAAaC,GACnC,MAAM+B,GAAQ2R,EAAAA,EAAAA,IAAqB5W,EAASiF,MAAO,CAAChC,KAAK4T,EAAAA,EAAAA,IAAa5T,GAAMC,MAAAA,IAE5E,MAAO,IACFlD,EACHiF,MAAAA,IA0RIzE,YAAa+R,EACbzS,UAAWA,EACXvB,aAAcA,EACdyB,SAAUA,UAoEpB,SAASqU,GACPrU,EACA8W,GAEA,MAAMC,EAjER,YAMqB,IANK,IACxBzC,EADwB,6BAExBlC,GAImB,EACnB,GAAIA,IAAiCsB,EAAAA,GAAAA,KACnC,MAAO,CACL,CACE3O,KAAM,CAACmK,KAAM,MAAOE,MAAO,wBAC3BlM,MAAOuS,EAAAA,GAAAA,QACP9a,OAAO4H,EAAAA,EAAAA,GAAE,yBAEX,CACE0C,MAAO,CAAC,CAAC,uBAAyB,KAAIqP,EAAI5F,QAAQ,OAClD3J,KAAM,CAACmK,KAAM,OAAQE,MAAO,wBAC5BlM,MAAOuS,EAAAA,GAAAA,KACP9a,OAAO4H,EAAAA,EAAAA,GAAE,4BAEX,CACEwC,KAAM,CAACmK,KAAM,OAAQE,MAAO,wBAC5BlM,MAAOuS,EAAAA,GAAAA,QACP9a,OAAO4H,EAAAA,EAAAA,GAAE,gCAEX,CACEwC,KAAM,CAACmK,KAAM,OAAQE,MAAO,aAC5BlM,MAAOuS,EAAAA,GAAAA,OACP9a,OAAO4H,EAAAA,EAAAA,GAAE,yBAKf,MAAM6M,GAAQ0E,EAAAA,EAAAA,IAAc1B,GACtB4E,EAAgB5E,EAEtB,MAAO,CACL,CACErN,KAAM,CAACmK,KAAM,MAAOE,MAAAA,GACpBlM,MAAOuS,EAAAA,GAAAA,QACP9a,OAAO4H,EAAAA,EAAAA,GAAE,wBAAyByU,IAEpC,CACE/R,MAAO,CAAC,CAAC,uBAAyB,KAAIqP,EAAI5F,QAAQ,OAClD3J,KAAM,CAACmK,KAAM,OAAQE,MAAAA,GACrBlM,MAAOuS,EAAAA,GAAAA,KACP9a,OAAO4H,EAAAA,EAAAA,GAAE,2BAA4ByU,IAEvC,CACEjS,KAAM,CAACmK,KAAM,OAAQE,MAAAA,GACrBlM,MAAOuS,EAAAA,GAAAA,QACP9a,OAAO4H,EAAAA,EAAAA,GAAE,+BAAgCyU,IAE3C,CACEjS,KAAM,CAACmK,KAAM,OAAQE,MAAO,aAC5BlM,MAAOuS,EAAAA,GAAAA,OACP9a,OAAO4H,EAAAA,EAAAA,GAAE,yBASO0U,CAAiBH,GAC/BI,GAAW3R,EAAAA,EAAAA,IACfvF,EAASiF,MAAMuQ,iBACfC,EAAAA,GAAAA,MAGF,MAAO,CAACrB,SADa2C,EAAYvO,MAAK2O,GAAOA,EAAIjU,QAAUgU,KAAaH,EAAY,GACpDD,QAASC,GAlZlC5E,GAAAA,YAAAA,iBAqZT,MAAMyC,IAAgB,OAAO,MAAP,oBAAH,qBAEV1Q,EAAAA,EAAAA,GAAM,GAFI,mBAGAA,EAAAA,EAAAA,GAAM,GAHN,wBAKIzH,GAAKA,EAAEC,MAAMC,YAAYC,OAL7B,uEASIH,GAAKA,EAAEC,MAAMC,YAAYya,QAT7B,gDAcbrC,IAAkB,OAAOsC,EAAAA,EAAP,oBAAH,uBACE5a,GAAKA,EAAEC,MAAMC,YAAYC,OAD3B,kDAMEH,GAAKA,EAAEC,MAAMC,YAAYya,QAN3B,sCAYrB,IAAeE,EAAAA,EAAAA,GAAanF,IC1c5B,SAASoF,GAAoBpc,GAC3B,MAAM6F,GAAMoJ,EAAAA,EAAAA,MAEN,SAACpK,EAAD,UAAWwX,EAAX,aAAsBjZ,EAAtB,SAAoC8R,GAAYlV,EAWtD,OATAsc,EAAAA,EAAAA,YACE,MACEC,EAAAA,EAAAA,IAAqB1W,EAAKzC,EAAa6C,KAAMoW,IAC7CG,EAAAA,EAAAA,IAA2BH,KAG7B,CAACA,KAID,QAAC,KAAD,WACE,QAAC,KAAD,CACExX,SAAUA,EACVzB,aAAcA,EACd8R,SAAUA,EACVuH,IAAKC,EAAAA,EAAAA,mBACLC,iBAAkBA,GAClBpD,kBAAmBA,GACnBqD,eAAgBC,OAMxB,SAASA,GAAuB7c,GAC9B,MAAM,SACJ6E,EADI,aAEJzB,EAFI,UAGJuB,EAHI,UAIJgQ,EAJI,gBAKJ9I,EALI,qBAMJiR,EANI,2BAOJC,GACE/c,EACE4T,EAAYxQ,EAAaC,SAASC,SACtC,4CAGI2T,GAA+BuD,EAAAA,EAAAA,IAAyB3V,GAExDmY,EAwGR,SACEC,EACAtY,GAEA,MAAM6S,EAASF,EAAAA,GAAAA,KAAiB,QAAEE,OAAQ0F,GAAV,SAAkBA,KAAIpK,QAAO,CAACqK,EAAkBD,KAC9EA,EAAG5a,SAAQsU,GAASuG,EAAKvE,KAAKhC,KACvBuG,IACN,IAqCH,OAAOxY,EAAUmP,YAAY,CAlC3B,CACEC,KAAM,WACNC,SAAU,CAAC,MAAO,QAAIxE,OAAWA,IAEnC,CACEuE,KAAM,WACNC,SAAU,CAAC,QAAS,QAAIxE,OAAWA,IAErC,CACEuE,KAAM,WACNC,SAAU,CAAC,eAAgB,YAAQxE,OAAWA,IAEhD,CACEuE,KAAM,WACNC,SAAU,CAAC,eAAgB,QAAIxE,OAAWA,IAE5C,CACEuE,KAAM,WACNC,SAAU,CAAC,MAAO,QAAIxE,OAAWA,IAEnC,CACEuE,KAAM,WACNC,SAAU,CAAC,kBAAmB,YAAQxE,OAAWA,IAEnD,CACEuE,KAAM,WACNC,SAAU,CAAC,cAAe,QAAIxE,OAAWA,IAE3C,CACEuE,KAAM,WACNC,SAAU,CAAC,QAAS,QAAIxE,OAAWA,OAMlCgI,EAAOvQ,KACR2P,IAAK,CAED7C,KAAM,WACNC,SAAU,CAAC,aAAc4C,EAAOe,EAAAA,GAAAA,gBAA6BnI,SA1JlD4N,CAAmBha,EAAcuB,GAE9CuS,EAAkBmG,KACtBhX,EAAAA,EAAAA,IAAoB,CAClBE,UAAW,qCACXD,SAAU,8CACVE,gBAAiBC,SAASrD,EAAasD,GAAI,IAC3CyU,OAAQkC,IAGV,MAAMC,EAA+B,KAChCC,EAAAA,EAAAA,GAA4B1Y,EAAU,CAAC2Y,EAAAA,GAAYC,EAAAA,SACnDC,EAAAA,EAAAA,IAAsBL,IAGvBA,IAAc9E,EAAAA,GAAAA,aACT+E,EAAU/C,UAGnB9L,EAAAA,eAAAA,KAAoB,CAClB9D,SAAU9F,EAAS8F,SACnBb,MAAOwT,KAIX,OACE,QAAC,IAAD,CACE3Y,UAAWqY,EACX1O,QAASlL,EAAa6C,KACtBpB,SAAUA,EACViY,qBAAsBA,EACtBC,2BAA4BA,EAC5B5K,SAAS,sCACTyB,UAAWA,EAPb,SASG,IAAmC,YAAlC,UAACjQ,EAAD,MAAYC,EAAZ,UAAmBH,GAAe,EAClC,MAAMgI,EAA0B,UAC7BhI,MAAAA,GAD6B,UAC7BA,EAAWpB,YADkB,aAC7B,EAAkB,UADW,QACqB,KACrD,OACE,QAAC,GAAD,CACEwC,SAAUA,EACVzB,aAAcA,EACduB,UAAWA,EACXgQ,UAAWA,EACX9I,gBAAiBA,EACjBlI,UAAWA,EACXC,MAAOA,EACPyB,YAAaoG,EACbyL,eAAgBA,EAChBD,6BAA8BA,OAQ1C,SAAS0F,GAAiB9Q,GAIxB,MAF6B,iBAApBA,GAAgCyI,OAAOzI,GAAiBwM,OAAOrR,OAAS,EAGxE,CAACsN,OAAOzI,GAAiBwM,QAAQjR,EAAAA,EAAAA,GAAE,gBAAgBuW,KAAK,OAG1D,EAACvW,EAAAA,EAAAA,GAAE,YAAYA,EAAAA,EAAAA,GAAE,gBAAgBuW,KAAK,OAG/C,SAASpE,GAAT,GAMc,IANa,SACzB1U,EADyB,gBAEzBgH,GAIY,EAGZ,MAAM/B,GAAQM,EAAAA,EAAAA,IAAavF,EAASiF,MAAMA,MAAO,IAC3C8T,EAAa,IAAIzT,EAAAA,GAAcL,GAarC,OAXA8T,EAAWrT,gBAAgB,aAAc,CAAC,gBAC1CqT,EAAWrT,gBAAgB,cAAe,CAACsB,IAE3C9B,OAAOoT,KAAKS,EAAWC,SAASvb,SAAQ2R,KAClC6J,EAAAA,EAAAA,IAAiB7J,IACnB2J,EAAWrJ,aAAaN,MAMrB8J,EAAAA,GAAAA,yBACL,CACErX,QAAI8I,EACJwO,QAAS,EACTtQ,KAAM7B,EACNmJ,OAPW,CAAC,KAAM,eAAgB,uBAAwB,QAAS,aAQnElL,MAAO8T,EAAWnT,eAClByK,SAAU,IAEZrQ,GAjJKuX,GAAAA,YAAAA,sBA6BAS,GAAAA,YAAAA,yBAgLT,UAAeoB,EAAAA,EAAAA,IAAgB9B,EAAAA,EAAAA,IAAa+B,EAAAA,EAAAA,GAAiB9B,O,sZCjP7D,MAAM+B,EAA+C,CACnD,CAACC,EAAAA,GAAAA,QAAwBhX,EAAAA,EAAAA,GAAE,QAC3B,CAACgX,EAAAA,GAAAA,UAA0BhX,EAAAA,EAAAA,GAAE,mBAC7B,CAACgX,EAAAA,GAAAA,eAA+BhX,EAAAA,EAAAA,GAAE,kBA0B7B,SAASiX,IACd,OACE,QAAC,IAAD,CAAShb,SAAU,CAAC,2BAApB,UACE,QAACib,EAAD,MAKN,SAASA,IACP,MAAMpP,GAAaC,EAAAA,EAAAA,MAEbwM,EAlCR,SAAoB4C,GAClB,MAAMC,EAAWL,EAAYI,EAAWE,iBAClCC,GAAStX,EAAAA,EAAAA,GAAE,UAEjB,MAAO,CACL,CACE6M,MAAO0K,EAAAA,GAAAA,KACPD,OAAAA,EACAlf,MAAOgf,GAET,CACEvK,MAAO0K,EAAAA,GAAAA,YACPD,OAAAA,EACAlf,OAAO4H,EAAAA,EAAAA,GAAE,kBAEX,CACE6M,MAAO0K,EAAAA,GAAAA,iBACPD,OAAAA,EACAlf,OAAO4H,EAAAA,EAAAA,GAAE,iBAgBGwX,CAAW1P,GAErB2P,EACJlD,EAAQtO,MAAK,QAAC,MAAC4G,GAAF,SAAaA,IAAU/E,EAAW4P,uBAAuBnD,EAAQ,GAEhF,OACE,QAAC,KAAD,CACEjc,YAAa,CAACgf,OAAQG,EAAcH,QACpClf,MAAOqf,EAAcrf,MAFvB,SAIGmc,EAAQ1U,KAAI8X,IACX,QAAC,KAAD,CAEEzY,SAAUyY,EAAO9K,MACjB+K,SAAUD,EAAO9K,QAAU4K,EAAc5K,MACzCgL,SAAUnX,GAAOoH,EAAWgQ,sBAAsBpX,GAJpD,SAMGiX,EAAOvf,OALHuf,EAAO9K,WAvBNoK,EAAAA,YAAAA,wBAQPC,EAAAA,YAAAA,iB,8FCtCF,SAASa,EAAT,GAYJ,IAZuC,QACxC7Q,EADwC,YAExC7E,EAFwC,MAGxCK,EAHwC,SAIxCsV,EAJwC,UAKxC7Q,GAOC,EACD,MAAM5D,EAxBD,YAMI,IAN8B,QACvC2D,EADuC,SAEvC8Q,GAIS,EAET,MAAQ,kBAAiB9Q,+BADA+Q,mBAAmBD,EAASE,OAAOF,EAAS7H,SAiBpDgI,CAAyB,CACxCjR,QAAAA,EACA8Q,SAAAA,IAGF,MAAO,CACLzU,SAAAA,EACAb,MAAO,CACLL,YAAAA,EACA+E,QAASD,EACTkB,YAAa3F,EAAM2F,YACnBxG,YAAaa,EAAMb,YACnBhG,MAAO6G,EAAM7G,MACbC,IAAK4G,EAAM5G,IACX4G,MAAOA,EAAMA,QAKZ,IAAK0V,E,oCAAAA,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,IAAAA,M,CAAAA,IAAAA,EAAAA,M,6qBChBG,SAASC,EAAkBzf,GACxC,MAAM,SACJ6E,EADI,aAEJzB,EAFI,gBAGJyI,EAHI,UAIJlI,EAJI,aAKJsB,EALI,OAMJwG,EANI,KAOJ7B,EAPI,QAQJ4E,GACExO,EAEEqC,EAAiC4C,EAAagC,KAAIyY,IAAe,CACrEC,UAAWD,EAAYJ,GACvB/H,MAAOmI,EAAYnI,MACnBqI,YAAaF,EAAYE,YACzBxI,WAAYsI,EAAYtX,MACxByX,WAGEpb,EAAAA,EAAAA,IAAQib,EAAYG,aAAcpb,EAAAA,EAAAA,IAAQgH,MAAAA,OAAD,EAACA,EAAS,YAC/CxD,KAAK6X,IAAI,EAAGJ,EAAYG,UAAYpU,EAAQ,YAC5C,KACNsU,eAAgBL,EAAYK,eAC5BC,iBAAkBN,EAAYM,iBAC9BC,iBAAkBP,EAAYO,iBAC9BC,iBAAkBR,EAAYQ,iBAC9BC,iBAAkBT,EAAYS,iBAC9BC,iBAAkBV,EAAYU,qBAGhC,OACE,QAAC,KAAD,CACEzc,UAAWA,EACXtB,KAAMA,EACNge,YAAaC,EAAa1W,GAAM3C,KAAIiU,GAAUqF,EAAQrF,KACtDsF,aAAc,GACdvQ,KAAM,CACJwQ,eAAAA,EACAC,eAAgBC,EACd9b,EACAzB,EACAyI,EACA2C,IAGJ3J,SAAUA,IAKhB,SAAS4b,EAAevF,EAAqB0F,GAC3C,MAAMC,GAAQC,EAAAA,EAAAA,IAAe5F,EAAOpT,IAAKiZ,EAAY7F,EAAOpT,MAC5D,OACE,QAAC,IAAD,CACE3H,MAAO+a,EAAOxN,KACdmT,MAAOA,EACPG,eAAWxR,EACXyR,SAAS,EACTC,iBAAkB,SAKxB,SAASP,EACP9b,EACAzB,EACAyI,EACA2C,GAEA,MAAO,CAAC0M,EAAqBiG,KAC3B,MAAMC,GAAgBC,EAAAA,EAAAA,IAAiBnG,EAAOpT,IAAKiZ,GAEnD,GAAmB,gBAAf7F,EAAOpT,IAAuB,OAChC,MAAMsG,GAAS+Q,EAAAA,EAAAA,IAA0B,CACvC7Q,QAASlL,EAAa6C,KACtBwD,YAAaoC,EACb/B,MAAOjF,EAASiF,MAChBsV,SAAU,CAACE,GAAI6B,EAAQxB,UAAWpI,MAAO4J,EAAQ5J,OACjDhJ,UAAWC,MAAAA,OAAF,EAAEA,EAAS9H,KAEtB,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAMmE,GAAIuD,EAAV,mBAAmB+S,EAAQjG,EAAOpT,YAAlC,SAA0CV,EAAAA,EAAAA,GAAE,sBAKlD,OAAOga,EAAcD,EAAS,CAACtc,SAAAA,EAAUzB,aAAAA,KAxFrBqc,EAAAA,YAAAA,oBAmDfgB,EAAAA,YAAAA,iBA6DT,MAAMH,EAAmD,CACvD,CAACxL,EAAAA,EAAAA,OAAuB,CACtB,YACA,cACA,aACA,YACA,mBACA,oBAEF,CAACA,EAAAA,EAAAA,gBAAgC,CAC/B,YACA,cACA,iBACA,YACA,mBACA,oBAEF,CAACA,EAAAA,EAAAA,oBAAoC,CACnC,YACA,cACA,aACA,YACA,mBACA,oBAEF,CAACC,EAAAA,EAAAA,oBAAyC,CACxC,YACA,cACA,aACA,YACA,mBACA,oBAEF,CAACA,EAAAA,EAAAA,oBAAyC,CACxC,YACA,cACA,aACA,YACA,mBACA,oBAEF,CAACA,EAAAA,EAAAA,oBAAyC,CACxC,YACA,cACA,aACA,YACA,mBACA,oBAEF,CAACA,EAAAA,EAAAA,oBAAyC,CACxC,YACA,cACA,aACA,YACA,mBACA,qBAIEwL,EAA+C,CACnDZ,UAAW,CACT7X,IAAK,YACL4F,MAAMtG,EAAAA,EAAAA,GAAE,kBACRrG,MAAOugB,EAAAA,IAET1B,YAAa,CACX9X,IAAK,cACL4F,MAAMtG,EAAAA,EAAAA,GAAE,aACRrG,MAAOugB,EAAAA,IAETlK,WAAY,CACVtP,IAAK,aACL4F,MAAMtG,EAAAA,EAAAA,GAAE,eACRrG,MAAOugB,EAAAA,IAETzB,UAAW,CACT/X,IAAK,YACL4F,MAAMtG,EAAAA,EAAAA,GAAE,aACRrG,MAAOugB,EAAAA,IAETvB,eAAgB,CACdjY,IAAK,iBACL4F,MAAMtG,EAAAA,EAAAA,GAAE,uBACRrG,MAAOugB,EAAAA,IAETtB,iBAAkB,CAChBlY,IAAK,mBACL4F,MAAMtG,EAAAA,EAAAA,GAAE,iBACRrG,MAAOugB,EAAAA,IAETrB,iBAAkB,CAChBnY,IAAK,mBACL4F,MAAMtG,EAAAA,EAAAA,GAAE,iBACRrG,MAAOugB,EAAAA,IAETpB,iBAAkB,CAChBpY,IAAK,mBACL4F,MAAMtG,EAAAA,EAAAA,GAAE,iBACRrG,MAAOugB,EAAAA,IAETnB,iBAAkB,CAChBrY,IAAK,mBACL4F,MAAMtG,EAAAA,EAAAA,GAAE,iBACRrG,MAAOugB,EAAAA,IAETlB,iBAAkB,CAChBtY,IAAK,mBACL4F,MAAMtG,EAAAA,EAAAA,GAAE,mBACRrG,MAAOugB,EAAAA,KAILP,EAAkD,CACtDpB,UAAW,SACXC,YAAa,SACbxI,WAAY,UACZyI,UAAW,aACXE,eAAgB,SAChBC,iBAAkB,WAClBC,iBAAkB,WAClBC,iBAAkB,WAClBC,iBAAkB,WAClBC,iBAAkB,a,qUCpQb,MAAMmB,EAAc,IAEdC,EAAa,IAOpBC,EAAgB,CACpB,CACEjK,OAAQ,CAACX,EAAAA,GAAAA,GAAaA,EAAAA,GAAAA,IAAcA,EAAAA,GAAAA,KACpCiJ,IAAK,GAEP,CACEtI,OAAQ,CAACX,EAAAA,GAAAA,KACTiJ,IAAK,EACL4B,UAAW,GAEb,CACElK,OAAQ,CAACX,EAAAA,GAAAA,KACTiJ,IAAK,EACL4B,UAAW,IAITC,EAAU,IACXpgB,EAAAA,GAAAA,OAAAA,gBACDkgB,EAAc3O,QAAO,CAAC1K,EAAD,SAAQ,OAACoP,GAAT,SAAqBpP,EAAQoP,EAAOxQ,SAAQ,GAAK,IAExE4a,UAEWtK,EAA6BmK,EAAcxa,KAAIsQ,IAAS,IAChEA,EACHnI,OAAQuS,EAAQnJ,OAAO,EAAGjB,EAAMC,OAAOxQ,YAG5B6a,EAAYJ,EAAc3O,QAAO,CAACqK,EAAD,KAA8B,IAAb,OAAC3F,GAAY,EAM1E,OALAA,EAAOlV,SAAQsU,IACb,MAAMkL,EAAYC,EAAAA,GAAkBnL,GAAO3Q,KAC3CkX,EAAKvE,KAAM,GAAEkJ,UACb3E,EAAKvE,KAAM,GAAEkJ,WAER3E,IACN,K,6SCtBH,SAAS6E,EAAT,GASU,IATS,MACjBpL,EADiB,SAEjB/R,EAFiB,UAGjBlB,EAHiB,QAIjBse,EAJiB,WAKjBC,EALiB,sBAMjBC,EANiB,oBAOjBrL,EAPiB,mBAQjBC,GACQ,EACR,MAAMS,EAASjH,MAAM6R,QAAQxL,GAASA,EAAQ,CAACA,GACzC/E,EAAqB,CACzB+E,MAAAA,EACAyL,SAAUJ,EACVK,YAAaJ,EACbK,uBAAwBJ,EACxBK,qBAAsB1L,EACtB2L,oBAAqB1L,GAGvB,OACE,QAAC,IAAD,CAAyBlS,SAAUA,EAAU2S,OAAQA,EAArD,SACG,QAAE7T,UAAWwB,EAAZ,WAAqBud,GAAtB,SACC,QAAC,KAAD,IACM7Q,EACJlO,UAAWA,GAAawB,EACxB9C,KAAMqgB,OA1BPV,EAAAA,YAAAA,YAiCT","sources":["webpack:///./app/components/dropdownControl.tsx","webpack:///./app/utils/performance/anomalies/anomaliesQuery.tsx","webpack:///./app/utils/performance/suspectSpans/suspectSpansQuery.tsx","webpack:///./app/views/eventsV2/tags.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/relatedIssues.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/sidebarCharts.tsx","webpack:///./app/components/charts/breakdownBars.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/statusBreakdown.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/suspectSpans.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/userStats.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/content.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/index.tsx","webpack:///./app/views/performance/transactionSummary/transactionOverview/metricEvents/metricsEventsDropdown.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/spanDetails/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionSpans/suspectSpansTable.tsx","webpack:///./app/views/performance/transactionSummary/transactionVitals/constants.tsx","webpack:///./app/views/performance/vitalDetail/vitalInfo.tsx"],"sourcesContent":["import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport DropdownMenu, {\n  GetActorPropsFn,\n  GetMenuPropsFn,\n} from 'sentry/components/dropdownMenu';\nimport MenuItem from 'sentry/components/menuItem';\nimport Tooltip from 'sentry/components/tooltip';\n\ntype ButtonPriority = React.ComponentProps<typeof DropdownButton>['priority'];\n\ntype DefaultProps = {\n  /**\n   * Should the menu contents always be rendered?  Defaults to true.\n   * Set to false to have menu contents removed from the DOM on close.\n   */\n  alwaysRenderMenu: boolean;\n  /**\n   * Width of the menu. Defaults to 100% of the button width.\n   */\n  menuWidth: string;\n};\n\ntype ChildrenArgs = {\n  getMenuProps: GetMenuPropsFn;\n  isOpen: boolean;\n};\n\ntype ButtonArgs = {\n  getActorProps: GetActorPropsFn;\n  isOpen: boolean;\n};\n\ntype Props = DefaultProps & {\n  children:\n    | ((args: ChildrenArgs) => React.ReactElement)\n    | React.ReactElement\n    | Array<React.ReactElement>;\n  /**\n   * Align the dropdown menu to the right. (Default aligns to left)\n   */\n  alignRight?: boolean;\n  /**\n   * This makes the dropdown menu blend (e.g. corners are not rounded) with its\n   * actor (opener) component\n   */\n  blendWithActor?: boolean;\n  /**\n   * A closure that returns a styled button. Function will get {isOpen, getActorProps}\n   * as arguments. Use this if you need to style/replace the dropdown button.\n   */\n  button?: (args: ButtonArgs) => React.ReactNode;\n  /**\n   * Props to pass to DropdownButton\n   */\n  buttonProps?: React.ComponentProps<typeof DropdownButton>;\n  /**\n   * Tooltip to show on button when dropdown isn't open\n   */\n  buttonTooltipTitle?: string | null;\n  className?: string;\n  detached?: boolean;\n  fullWidth?: boolean;\n\n  /**\n   * String or element for the button contents.\n   */\n  label?: NonNullable<React.ReactNode>;\n\n  priority?: ButtonPriority;\n};\n\n/*\n * A higher level dropdown component that helps with building complete dropdowns\n * including the button + menu options. Use the `button` or `label` prop to set\n * the button content and `children` to provide menu options.\n */\nclass DropdownControl extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    alwaysRenderMenu: true,\n    menuWidth: '100%',\n  };\n\n  renderButton(isOpen: boolean, getActorProps: GetActorPropsFn) {\n    const {\n      label,\n      button,\n      buttonProps,\n      buttonTooltipTitle,\n      priority,\n      detached,\n      fullWidth,\n    } = this.props;\n\n    if (button) {\n      return button({isOpen, getActorProps});\n    }\n\n    if (buttonTooltipTitle && !isOpen) {\n      return (\n        <Tooltip skipWrapper position=\"top\" title={buttonTooltipTitle}>\n          <StyledDropdownButton\n            priority={priority}\n            {...getActorProps(buttonProps)}\n            isOpen={isOpen}\n            data-test-id=\"dropdown-control-button\"\n            detached={detached}\n            hideBottomBorder={!detached}\n            rightAlignChevron={fullWidth ?? false}\n          >\n            {label}\n          </StyledDropdownButton>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <StyledDropdownButton\n        priority={priority}\n        {...getActorProps(buttonProps)}\n        isOpen={isOpen}\n        data-test-id=\"dropdown-control-button\"\n        detached={detached}\n        hideBottomBorder={!detached}\n        rightAlignChevron={fullWidth ?? false}\n      >\n        {label}\n      </StyledDropdownButton>\n    );\n  }\n\n  renderChildren(isOpen: boolean, getMenuProps: GetMenuPropsFn) {\n    const {children, alignRight, menuWidth, blendWithActor, priority, detached} =\n      this.props;\n\n    if (typeof children === 'function') {\n      return children({isOpen, getMenuProps});\n    }\n\n    const alignMenu = alignRight ? 'right' : 'left';\n\n    return (\n      <Content\n        {...getMenuProps()}\n        priority={priority}\n        alignMenu={alignMenu}\n        width={menuWidth}\n        isOpen={isOpen}\n        blendWithActor={blendWithActor}\n        detached={detached}\n        blendCorner\n        data-test-id=\"dropdown-control\"\n      >\n        {children}\n      </Content>\n    );\n  }\n\n  render() {\n    const {alwaysRenderMenu, className, fullWidth} = this.props;\n\n    return (\n      <Container className={className} fullWidth={fullWidth ?? false}>\n        <DropdownMenu alwaysRenderMenu={alwaysRenderMenu}>\n          {({isOpen, getMenuProps, getActorProps}) => (\n            <Fragment>\n              {this.renderButton(isOpen, getActorProps)}\n              {this.renderChildren(isOpen, getMenuProps)}\n            </Fragment>\n          )}\n        </DropdownMenu>\n      </Container>\n    );\n  }\n}\n\nconst Container = styled('div')<{fullWidth: boolean}>`\n  display: inline-block;\n  position: relative;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    width: ${p => p.fullWidth && '100%'};\n  }\n`;\n\nconst StyledDropdownButton = styled(DropdownButton)`\n  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};\n  white-space: nowrap;\n`;\n\nconst Content = styled(DropdownBubble)<{isOpen: boolean; priority?: ButtonPriority}>`\n  display: ${p => (p.isOpen ? 'block' : 'none')};\n  border-color: ${p => p.theme.button[p.priority || 'form'].border};\n`;\n\nconst DropdownItem = styled(MenuItem)`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default DropdownControl;\nexport {DropdownItem, Content};\n","import {EventsStatsData, Organization} from 'sentry/types';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\nimport {ANOMALY_FLAG} from 'sentry/views/performance/transactionSummary/transactionAnomalies/utils';\n\ntype AnomaliesProps = {};\ntype RequestProps = DiscoverQueryProps & AnomaliesProps;\n\nexport type ChildrenProps = Omit<GenericChildrenProps<AnomaliesProps>, 'tableData'> & {\n  data: AnomalyPayload | null;\n};\n\ntype Props = Omit<RequestProps, 'orgSlug'> & {\n  children: (props: ChildrenProps) => React.ReactNode;\n  organization: Organization;\n};\n\nexport type AnomalyConfidence = 'high' | 'low';\n\n// Should match events stats data in format.\ntype AnomalyStatsData = {\n  data: EventsStatsData;\n  end?: number;\n  start?: number;\n};\n\n// Anomaly info describes what the anomaly service determines is an 'anomaly area'.\nexport type AnomalyInfo = {\n  confidence: AnomalyConfidence;\n  end: number;\n  expected: number;\n  id: string;\n  received: number;\n  start: number;\n};\n\nexport type AnomalyPayload = {\n  anomalies: AnomalyInfo[];\n  y: AnomalyStatsData;\n  yhat_lower: AnomalyStatsData;\n  yhat_upper: AnomalyStatsData;\n};\n\nfunction transformStatsTimes(stats: AnomalyStatsData) {\n  stats.data.forEach(d => (d[0] = d[0] * 1000));\n  return stats;\n}\nfunction transformAnomaliesTimes(anoms: AnomalyInfo[]) {\n  anoms.forEach(a => {\n    a.start = a.start * 1000;\n    a.end = a.end * 1000;\n  });\n  return anoms;\n}\n\nfunction transformPayload(payload: AnomalyPayload): AnomalyPayload {\n  const newPayload = {...payload};\n  if (!payload.y || !payload.yhat_lower || !payload.yhat_upper || !payload.anomalies) {\n    return newPayload;\n  }\n\n  newPayload.y = transformStatsTimes(payload.y);\n  newPayload.yhat_upper = transformStatsTimes(payload.yhat_upper);\n  newPayload.yhat_lower = transformStatsTimes(payload.yhat_lower);\n  newPayload.anomalies = transformAnomaliesTimes(payload.anomalies);\n  return newPayload;\n}\n\nfunction AnomaliesSeriesQuery(props: Props) {\n  if (!props.organization.features.includes(ANOMALY_FLAG)) {\n    return (\n      <div>\n        {props.children({data: null, isLoading: false, error: null, pageLinks: null})}\n      </div>\n    );\n  }\n\n  return (\n    <GenericDiscoverQuery<AnomalyPayload, {}>\n      route=\"transaction-anomaly-detection\"\n      {...props}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({\n          data: tableData && tableData.y ? transformPayload(tableData) : null,\n          ...rest,\n        });\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(AnomaliesSeriesQuery);\n","import omit from 'lodash/omit';\n\nimport {defined} from 'sentry/utils';\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from 'sentry/utils/discover/genericDiscoverQuery';\nimport withApi from 'sentry/utils/withApi';\n\nimport {SuspectSpans} from './types';\n\ntype SuspectSpansProps = {\n  maxExclusiveTime?: string;\n  minExclusiveTime?: string;\n  perSuspect?: number;\n  spanGroups?: string[];\n  spanOps?: string[];\n};\n\ntype RequestProps = DiscoverQueryProps & SuspectSpansProps;\n\nexport type ChildrenProps = Omit<GenericChildrenProps<SuspectSpansProps>, 'tableData'> & {\n  suspectSpans: SuspectSpans | null;\n};\n\ntype Props = RequestProps & {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction getSuspectSpanPayload(props: RequestProps) {\n  const {perSuspect, spanOps, spanGroups, minExclusiveTime, maxExclusiveTime} = props;\n  const payload = {\n    perSuspect,\n    spanOp: spanOps,\n    spanGroup: spanGroups,\n    min_exclusive_time: minExclusiveTime,\n    max_exclusive_time: maxExclusiveTime,\n  };\n  if (!defined(payload.perSuspect)) {\n    delete payload.perSuspect;\n  }\n  if (!defined(payload.spanOp)) {\n    delete payload.spanOp;\n  }\n  if (!defined(payload.spanGroup)) {\n    delete payload.spanGroup;\n  }\n  const additionalPayload = props.eventView.getEventsAPIPayload(props.location);\n  return {\n    ...payload,\n    ...additionalPayload,\n  };\n}\n\nfunction SuspectSpansQuery(props: Props) {\n  return (\n    <GenericDiscoverQuery<SuspectSpans, SuspectSpansProps>\n      route=\"events-spans-performance\"\n      getRequestPayload={getSuspectSpanPayload}\n      {...omit(props, 'children')}\n    >\n      {({tableData, ...rest}) => {\n        return props.children({suspectSpans: tableData, ...rest});\n      }}\n    </GenericDiscoverQuery>\n  );\n}\n\nexport default withApi(SuspectSpansQuery);\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport {Location, LocationDescriptor} from 'history';\n\nimport {fetchTagFacets, Tag, TagSegment} from 'sentry/actionCreators/events';\nimport {Client} from 'sentry/api';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Placeholder from 'sentry/components/placeholder';\nimport TagDistributionMeter from 'sentry/components/tagDistributionMeter';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView, {isAPIPayloadSimilar} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  eventView: EventView;\n  generateUrl: (key: string, value: string) => LocationDescriptor;\n  location: Location;\n  organization: Organization;\n  totalValues: null | number;\n  confirmedQuery?: boolean;\n};\n\ntype State = {\n  error: string;\n  loading: boolean;\n  tags: Tag[];\n  totalValues: null | number;\n};\n\nclass Tags extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    tags: [],\n    totalValues: null,\n    error: '',\n  };\n\n  componentDidMount() {\n    this.fetchData(true);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.shouldRefetchData(prevProps) ||\n      prevProps.confirmedQuery !== this.props.confirmedQuery\n    ) {\n      this.fetchData();\n    }\n  }\n\n  shouldRefetchData = (prevProps: Props): boolean => {\n    const thisAPIPayload = this.props.eventView.getFacetsAPIPayload(this.props.location);\n    const otherAPIPayload = prevProps.eventView.getFacetsAPIPayload(prevProps.location);\n\n    return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);\n  };\n\n  fetchData = async (forceFetchData = false) => {\n    const {api, organization, eventView, location, confirmedQuery} = this.props;\n    this.setState({loading: true, error: '', tags: []});\n\n    // Fetch should be forced after mounting as confirmedQuery isn't guaranteed\n    // since this component can mount/unmount via show/hide tags separate from\n    // data being loaded for the rest of the page.\n    if (!forceFetchData && confirmedQuery === false) {\n      return;\n    }\n\n    try {\n      const tags = await fetchTagFacets(\n        api,\n        organization.slug,\n        eventView.getFacetsAPIPayload(location)\n      );\n      this.setState({loading: false, tags});\n    } catch (err) {\n      Sentry.captureException(err);\n      this.setState({loading: false, error: err});\n    }\n  };\n\n  handleTagClick = (tag: string) => {\n    const {organization} = this.props;\n    // metrics\n    trackAnalyticsEvent({\n      eventKey: 'discover_v2.facet_map.clicked',\n      eventName: 'Discoverv2: Clicked on a tag on the facet map',\n      tag,\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  renderTag(tag: Tag) {\n    const {generateUrl, totalValues} = this.props;\n\n    const segments: TagSegment[] = tag.topValues.map(segment => {\n      segment.url = generateUrl(tag.key, segment.value);\n\n      return segment;\n    });\n    // Ensure we don't show >100% if there's a slight mismatch between the facets\n    // endpoint and the totals endpoint\n    const maxTotalValues =\n      segments.length > 0\n        ? Math.max(Number(totalValues), segments[0].count)\n        : totalValues;\n    return (\n      <TagDistributionMeter\n        key={tag.key}\n        title={tag.key}\n        segments={segments}\n        totalValues={Number(maxTotalValues)}\n        renderLoading={() => <StyledPlaceholder height=\"16px\" />}\n        onTagClick={this.handleTagClick}\n        showReleasePackage\n      />\n    );\n  }\n\n  renderPlaceholders() {\n    return (\n      <Fragment>\n        <StyledPlaceholderTitle key=\"title-1\" />\n        <StyledPlaceholder key=\"bar-1\" />\n        <StyledPlaceholderTitle key=\"title-2\" />\n        <StyledPlaceholder key=\"bar-2\" />\n        <StyledPlaceholderTitle key=\"title-3\" />\n        <StyledPlaceholder key=\"bar-3\" />\n      </Fragment>\n    );\n  }\n\n  renderBody = () => {\n    const {loading, error, tags} = this.state;\n    if (loading) {\n      return this.renderPlaceholders();\n    }\n    if (error) {\n      return (\n        <ErrorPanel height=\"132px\">\n          <IconWarning color=\"gray300\" size=\"lg\" />\n        </ErrorPanel>\n      );\n    }\n    if (tags.length > 0) {\n      return tags.map(tag => this.renderTag(tag));\n    }\n    return <StyledEmptyStateWarning small>{t('No tags found')}</StyledEmptyStateWarning>;\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <SectionHeading>{t('Tag Summary')}</SectionHeading>\n        {this.renderBody()}\n      </Fragment>\n    );\n  }\n}\n\nconst StyledEmptyStateWarning = styled(EmptyStateWarning)`\n  height: 132px;\n  padding: 54px 15%;\n`;\n\nconst StyledPlaceholder = styled(Placeholder)`\n  border-radius: ${p => p.theme.borderRadius};\n  height: 16px;\n  margin-bottom: ${space(1.5)};\n`;\n\nconst StyledPlaceholderTitle = styled(Placeholder)`\n  width: 100px;\n  height: 12px;\n  margin-bottom: ${space(0.5)};\n`;\n\nexport {Tags};\nexport default withApi(Tags);\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport pick from 'lodash/pick';\n\nimport Button from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport GroupList from 'sentry/components/issues/groupList';\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {DEFAULT_RELATIVE_PERIODS} from 'sentry/constants';\nimport {URL_PARAM} from 'sentry/constants/pageFilters';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {OrganizationSummary} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\n\nimport {removeTracingKeysFromSearch} from '../../utils';\n\ntype Props = {\n  location: Location;\n  organization: OrganizationSummary;\n  transaction: string;\n  end?: string;\n  start?: string;\n  statsPeriod?: string | null;\n};\n\nclass RelatedIssues extends Component<Props> {\n  getIssuesEndpoint() {\n    const {transaction, organization, start, end, statsPeriod, location} = this.props;\n\n    const queryParams = {\n      start,\n      end,\n      statsPeriod,\n      limit: 5,\n      sort: 'new',\n      ...pick(location.query, [...Object.values(URL_PARAM), 'cursor']),\n    };\n    const currentFilter = new MutableSearch(decodeScalar(location.query.query, ''));\n    removeTracingKeysFromSearch(currentFilter);\n    currentFilter\n      .addFreeText('is:unresolved')\n      .setFilterValues('transaction', [transaction]);\n\n    return {\n      path: `/organizations/${organization.slug}/issues/`,\n      queryParams: {\n        ...queryParams,\n        query: currentFilter.formatString(),\n      },\n    };\n  }\n\n  handleOpenClick = () => {\n    const {organization} = this.props;\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.open_issues',\n      eventName: 'Performance Views: Open issues from transaction summary',\n      organization_id: parseInt(organization.id, 10),\n    });\n  };\n\n  renderEmptyMessage = () => {\n    const {statsPeriod} = this.props;\n\n    const selectedTimePeriod = statsPeriod && DEFAULT_RELATIVE_PERIODS[statsPeriod];\n    const displayedPeriod = selectedTimePeriod\n      ? selectedTimePeriod.toLowerCase()\n      : t('given timeframe');\n\n    return (\n      <Panel>\n        <PanelBody>\n          <EmptyStateWarning>\n            <p>\n              {tct('No new issues for this transaction for the [timePeriod].', {\n                timePeriod: displayedPeriod,\n              })}\n            </p>\n          </EmptyStateWarning>\n        </PanelBody>\n      </Panel>\n    );\n  };\n\n  render() {\n    const {organization} = this.props;\n    const {path, queryParams} = this.getIssuesEndpoint();\n    const issueSearch = {\n      pathname: `/organizations/${organization.slug}/issues/`,\n      query: queryParams,\n    };\n\n    return (\n      <Fragment>\n        <ControlsWrapper>\n          <SectionHeading>{t('Related Issues')}</SectionHeading>\n          <Button\n            data-test-id=\"issues-open\"\n            size=\"xsmall\"\n            to={issueSearch}\n            onClick={this.handleOpenClick}\n          >\n            {t('Open in Issues')}\n          </Button>\n        </ControlsWrapper>\n\n        <TableWrapper>\n          <GroupList\n            orgId={organization.slug}\n            endpointPath={path}\n            queryParams={queryParams}\n            query=\"\"\n            canSelectGroups={false}\n            renderEmptyMessage={this.renderEmptyMessage}\n            withChart={false}\n            withPagination={false}\n          />\n        </TableWrapper>\n      </Fragment>\n    );\n  }\n}\n\nconst ControlsWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n`;\n\nconst TableWrapper = styled('div')`\n  margin-bottom: ${space(4)};\n  ${Panel} {\n    /* smaller space between table and pagination */\n    margin-bottom: -${space(1)};\n  }\n`;\n\nexport default RelatedIssues;\n","import {browserHistory, InjectedRouter, withRouter, WithRouterProps} from 'react-router';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport color from 'color';\nimport {Location} from 'history';\n\nimport ChartZoom from 'sentry/components/charts/chartZoom';\nimport MarkPoint from 'sentry/components/charts/components/markPoint';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport EventsRequest from 'sentry/components/charts/eventsRequest';\nimport {LineChart, LineChartProps} from 'sentry/components/charts/lineChart';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport TransitionChart from 'sentry/components/charts/transitionChart';\nimport TransparentLoadingMask from 'sentry/components/charts/transparentLoadingMask';\nimport {getInterval} from 'sentry/components/charts/utils';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {getUtcToLocalDateObject} from 'sentry/utils/dates';\nimport {tooltipFormatter} from 'sentry/utils/discover/charts';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {\n  formatAbbreviatedNumber,\n  formatFloat,\n  formatPercentage,\n} from 'sentry/utils/formatters';\nimport getDynamicText from 'sentry/utils/getDynamicText';\nimport AnomaliesQuery from 'sentry/utils/performance/anomalies/anomaliesQuery';\nimport {useMEPSettingContext} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useApi from 'sentry/utils/useApi';\nimport {getTermHelp, PERFORMANCE_TERM} from 'sentry/views/performance/data';\n\nimport {getMEPQueryParams} from '../../landing/widgets/utils';\nimport {\n  anomaliesRouteWithQuery,\n  ANOMALY_FLAG,\n  anomalyToColor,\n} from '../transactionAnomalies/utils';\n\ntype ContainerProps = WithRouterProps & {\n  error: QueryError | null;\n  eventView: EventView;\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  totals: Record<string, number> | null;\n  transactionName: string;\n};\n\ntype Props = Pick<ContainerProps, 'organization' | 'isLoading' | 'error' | 'totals'> & {\n  chartData: {\n    chartOptions: Omit<LineChartProps, 'series'>;\n    errored: boolean;\n    loading: boolean;\n    reloading: boolean;\n    series: LineChartProps['series'];\n  };\n  eventView: EventView;\n  location: Location;\n  router: InjectedRouter;\n  transactionName: string;\n  utc: boolean;\n  end?: Date;\n  start?: Date;\n  statsPeriod?: string | null;\n};\n\nfunction SidebarCharts({\n  organization,\n  isLoading,\n  error,\n  totals,\n  start,\n  end,\n  utc,\n  router,\n  statsPeriod,\n  chartData,\n  eventView,\n  location,\n  transactionName,\n}: Props) {\n  const useAggregateAlias = !organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n  const theme = useTheme();\n  return (\n    <RelativeBox>\n      <ChartLabel top=\"0px\">\n        <ChartTitle>\n          {t('Apdex')}\n          <QuestionTooltip\n            position=\"top\"\n            title={getTermHelp(organization, PERFORMANCE_TERM.APDEX)}\n            size=\"sm\"\n          />\n        </ChartTitle>\n        <ChartSummaryValue\n          data-test-id=\"apdex-summary-value\"\n          isLoading={isLoading}\n          error={error}\n          value={\n            totals\n              ? formatFloat(useAggregateAlias ? totals.apdex : totals['apdex()'], 4)\n              : null\n          }\n        />\n      </ChartLabel>\n\n      <ChartLabel top=\"160px\">\n        <ChartTitle>\n          {t('Failure Rate')}\n          <QuestionTooltip\n            position=\"top\"\n            title={getTermHelp(organization, PERFORMANCE_TERM.FAILURE_RATE)}\n            size=\"sm\"\n          />\n        </ChartTitle>\n        <ChartSummaryValue\n          data-test-id=\"failure-rate-summary-value\"\n          isLoading={isLoading}\n          error={error}\n          value={\n            totals\n              ? formatPercentage(\n                  useAggregateAlias ? totals.failure_rate : totals['failure_rate()']\n                )\n              : null\n          }\n        />\n      </ChartLabel>\n\n      <ChartLabel top=\"320px\">\n        <ChartTitle>\n          {t('TPM')}\n          <QuestionTooltip\n            position=\"top\"\n            title={getTermHelp(organization, PERFORMANCE_TERM.TPM)}\n            size=\"sm\"\n          />\n        </ChartTitle>\n        <ChartSummaryValue\n          data-test-id=\"tpm-summary-value\"\n          isLoading={isLoading}\n          error={error}\n          value={\n            totals\n              ? tct('[tpm] tpm', {\n                  tpm: formatFloat(useAggregateAlias ? totals.tpm : totals['tpm()'], 4),\n                })\n              : null\n          }\n        />\n      </ChartLabel>\n\n      <AnomaliesQuery\n        location={location}\n        organization={organization}\n        eventView={eventView}\n      >\n        {results => (\n          <ChartZoom\n            router={router}\n            period={statsPeriod}\n            start={start}\n            end={end}\n            utc={utc}\n            xAxisIndex={[0, 1, 2]}\n          >\n            {zoomRenderProps => {\n              const {errored, loading, reloading, chartOptions, series} = chartData;\n\n              if (errored) {\n                return (\n                  <ErrorPanel height=\"580px\">\n                    <IconWarning color=\"gray300\" size=\"lg\" />\n                  </ErrorPanel>\n                );\n              }\n\n              if (organization.features.includes(ANOMALY_FLAG)) {\n                const epmSeries = series.find(\n                  s => s.seriesName.includes('epm') || s.seriesName.includes('tpm')\n                );\n                if (epmSeries && results.data) {\n                  epmSeries.markPoint = MarkPoint({\n                    data: results.data.anomalies.map(a => ({\n                      name: a.id,\n                      yAxis: epmSeries.data.find(({name}) => name > (a.end + a.start) / 2)\n                        ?.value,\n                      // TODO: the above is O(n*m), remove after we change the api to include the midpoint of y.\n                      xAxis: a.start,\n                      itemStyle: {\n                        borderColor: color(anomalyToColor(a.confidence, theme)).string(),\n                        color: color(anomalyToColor(a.confidence, theme))\n                          .alpha(0.2)\n                          .rgb()\n                          .string(),\n                      },\n                      onClick: () => {\n                        const target = anomaliesRouteWithQuery({\n                          orgSlug: organization.slug,\n                          query: location.query,\n                          projectID: decodeScalar(location.query.project),\n                          transaction: transactionName,\n                        });\n                        browserHistory.push(target);\n                      },\n                    })),\n                    symbol: 'circle',\n                    symbolSize: 16,\n                  });\n                }\n              }\n\n              return (\n                <TransitionChart loading={loading} reloading={reloading} height=\"580px\">\n                  <TransparentLoadingMask visible={reloading} />\n                  {getDynamicText({\n                    value: (\n                      <LineChart {...zoomRenderProps} {...chartOptions} series={series} />\n                    ),\n                    fixed: <Placeholder height=\"480px\" testId=\"skeleton-ui\" />,\n                  })}\n                </TransitionChart>\n              );\n            }}\n          </ChartZoom>\n        )}\n      </AnomaliesQuery>\n    </RelativeBox>\n  );\n}\n\nfunction SidebarChartsContainer({\n  location,\n  eventView,\n  organization,\n  router,\n  isLoading,\n  error,\n  totals,\n  transactionName,\n}: ContainerProps) {\n  const api = useApi();\n  const theme = useTheme();\n  const mepSetting = useMEPSettingContext();\n\n  const colors = theme.charts.getColorPalette(3);\n  const statsPeriod = eventView.statsPeriod;\n  const start = eventView.start ? getUtcToLocalDateObject(eventView.start) : undefined;\n  const end = eventView.end ? getUtcToLocalDateObject(eventView.end) : undefined;\n  const project = eventView.project;\n  const environment = eventView.environment;\n  const query = eventView.query;\n  const utc = normalizeDateTimeParams(location.query).utc === 'true';\n\n  const axisLineConfig = {\n    scale: true,\n    axisLine: {\n      show: false,\n    },\n    axisTick: {\n      show: false,\n    },\n    splitLine: {\n      show: false,\n    },\n  };\n\n  const chartOptions: Omit<LineChartProps, 'series'> = {\n    height: 480,\n    grid: [\n      {\n        top: '60px',\n        left: '10px',\n        right: '10px',\n        height: '100px',\n      },\n      {\n        top: '220px',\n        left: '10px',\n        right: '10px',\n        height: '100px',\n      },\n      {\n        top: '380px',\n        left: '10px',\n        right: '10px',\n        height: '120px',\n      },\n    ],\n    axisPointer: {\n      // Link each x-axis together.\n      link: [{xAxisIndex: [0, 1, 2]}],\n    },\n    xAxes: Array.from(new Array(3)).map((_i, index) => ({\n      gridIndex: index,\n      type: 'time',\n      show: false,\n    })),\n    yAxes: [\n      {\n        // apdex\n        gridIndex: 0,\n        interval: 0.2,\n        axisLabel: {\n          formatter: (value: number) => `${formatFloat(value, 1)}`,\n          color: theme.chartLabel,\n        },\n        ...axisLineConfig,\n      },\n      {\n        // failure rate\n        gridIndex: 1,\n        splitNumber: 4,\n        interval: 0.5,\n        max: 1.0,\n        axisLabel: {\n          formatter: (value: number) => formatPercentage(value, 0),\n          color: theme.chartLabel,\n        },\n        ...axisLineConfig,\n      },\n      {\n        // throughput\n        gridIndex: 2,\n        splitNumber: 4,\n        axisLabel: {\n          formatter: formatAbbreviatedNumber,\n          color: theme.chartLabel,\n        },\n        ...axisLineConfig,\n      },\n    ],\n    utc,\n    isGroupedByDate: true,\n    showTimeInTooltip: true,\n    colors: [colors[0], colors[1], colors[2]],\n    tooltip: {\n      trigger: 'axis',\n      truncate: 80,\n      valueFormatter: tooltipFormatter,\n      nameFormatter(value: string) {\n        return value === 'epm()' ? 'tpm()' : value;\n      },\n    },\n  };\n\n  const requestCommonProps = {\n    api,\n    start,\n    end,\n    statsPeriod,\n    project,\n    environment,\n    query,\n  };\n\n  const contentCommonProps = {\n    organization,\n    router,\n    error,\n    isLoading,\n    start,\n    end,\n    utc,\n    totals,\n  };\n\n  const datetimeSelection = {\n    start: start || null,\n    end: end || null,\n    period: statsPeriod,\n  };\n\n  return (\n    <EventsRequest\n      {...requestCommonProps}\n      organization={organization}\n      interval={getInterval(datetimeSelection)}\n      showLoading={false}\n      includePrevious={false}\n      yAxis={['apdex()', 'failure_rate()', 'epm()']}\n      partial\n      referrer=\"api.performance.transaction-summary.sidebar-chart\"\n      queryExtras={getMEPQueryParams(mepSetting)}\n    >\n      {({results, errored, loading, reloading}) => {\n        const series = results\n          ? results.map((values, i: number) => ({\n              ...values,\n              yAxisIndex: i,\n              xAxisIndex: i,\n            }))\n          : [];\n\n        return (\n          <SidebarCharts\n            {...contentCommonProps}\n            transactionName={transactionName}\n            location={location}\n            eventView={eventView}\n            chartData={{series, errored, loading, reloading, chartOptions}}\n          />\n        );\n      }}\n    </EventsRequest>\n  );\n}\n\ntype ChartValueProps = {\n  'data-test-id': string;\n  error: QueryError | null;\n  isLoading: boolean;\n  value: React.ReactNode;\n};\n\nfunction ChartSummaryValue({error, isLoading, value, ...props}: ChartValueProps) {\n  if (error) {\n    return <div {...props}>{'\\u2014'}</div>;\n  }\n\n  if (isLoading) {\n    return <Placeholder height=\"24px\" {...props} />;\n  }\n\n  return <ChartValue {...props}>{value}</ChartValue>;\n}\n\nconst RelativeBox = styled('div')`\n  position: relative;\n`;\n\nconst ChartTitle = styled(SectionHeading)`\n  margin: 0;\n`;\n\nconst ChartLabel = styled('div')<{top: string}>`\n  position: absolute;\n  top: ${p => p.top};\n  z-index: 1;\n`;\n\nconst ChartValue = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n`;\n\nexport default withRouter(SidebarChartsContainer);\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {formatPercentage} from 'sentry/utils/formatters';\n\ntype Point = {\n  label: string;\n  value: number;\n  onClick?: () => void;\n};\n\ntype Props = {\n  /**\n   * The data to display. The caller should order the points\n   * in the order they want bars displayed.\n   */\n  data: Point[];\n};\n\nfunction BreakdownBars({data}: Props) {\n  const total = data.reduce((sum, point) => point.value + sum, 0);\n  return (\n    <BreakdownGrid>\n      {data.map((point, i) => (\n        <Fragment key={`${i}:${point.label}`}>\n          <Percentage>{formatPercentage(point.value / total, 0)}</Percentage>\n          <BarContainer\n            data-test-id={`status-${point.label}`}\n            cursor={point.onClick ? 'pointer' : 'default'}\n            onClick={point.onClick}\n          >\n            <Bar style={{width: `${((point.value / total) * 100).toFixed(2)}%`}} />\n            <Label>{point.label}</Label>\n          </BarContainer>\n        </Fragment>\n      ))}\n    </BreakdownGrid>\n  );\n}\n\nexport default BreakdownBars;\n\nconst BreakdownGrid = styled('div')`\n  display: grid;\n  grid-template-columns: min-content auto;\n  column-gap: ${space(1)};\n  row-gap: ${space(1)};\n`;\n\nconst Percentage = styled('div')`\n  font-size: ${p => p.theme.fontSizeExtraLarge};\n  text-align: right;\n`;\n\nconst BarContainer = styled('div')<{cursor: 'pointer' | 'default'}>`\n  padding-left: ${space(1)};\n  padding-right: ${space(1)};\n  position: relative;\n  cursor: ${p => p.cursor};\n`;\n\nconst Label = styled('span')`\n  position: relative;\n  color: ${p => p.theme.textColor};\n  z-index: 2;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nconst Bar = styled('div')`\n  border-radius: 2px;\n  background-color: ${p => p.theme.border};\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1;\n  height: 100%;\n  width: 0%;\n`;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport BreakdownBars from 'sentry/components/charts/breakdownBars';\nimport ErrorPanel from 'sentry/components/charts/errorPanel';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport EmptyStateWarning from 'sentry/components/emptyStateWarning';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconWarning} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport {getTermHelp, PERFORMANCE_TERM} from 'sentry/views/performance/data';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n};\n\nfunction StatusBreakdown({eventView, location, organization}: Props) {\n  const useEvents = organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n  const breakdownView = eventView\n    .withColumns([\n      {kind: 'function', function: ['count', '', '', undefined]},\n      {kind: 'field', field: 'transaction.status'},\n    ])\n    .withSorts([{kind: 'desc', field: 'count'}]);\n\n  return (\n    <Fragment>\n      <SectionHeading>\n        {t('Status Breakdown')}\n        <QuestionTooltip\n          position=\"top\"\n          title={getTermHelp(organization, PERFORMANCE_TERM.STATUS_BREAKDOWN)}\n          size=\"sm\"\n        />\n      </SectionHeading>\n      <DiscoverQuery\n        eventView={breakdownView}\n        location={location}\n        orgSlug={organization.slug}\n        referrer=\"api.performance.status-breakdown\"\n        useEvents={useEvents}\n      >\n        {({isLoading, error, tableData}) => {\n          if (isLoading) {\n            return <Placeholder height=\"124px\" />;\n          }\n          if (error) {\n            return (\n              <ErrorPanel height=\"124px\">\n                <IconWarning color=\"gray300\" size=\"lg\" />\n              </ErrorPanel>\n            );\n          }\n          if (!tableData || tableData.data.length === 0) {\n            return (\n              <EmptyStatusBreakdown small>{t('No statuses found')}</EmptyStatusBreakdown>\n            );\n          }\n          const points = tableData.data.map(row => ({\n            label: String(row['transaction.status']),\n            value: parseInt(String(row[useEvents ? 'count()' : 'count']), 10),\n            onClick: () => {\n              const query = new MutableSearch(eventView.query);\n              query\n                .removeFilter('!transaction.status')\n                .setFilterValues('transaction.status', [\n                  row['transaction.status'] as string,\n                ]);\n              browserHistory.push({\n                pathname: location.pathname,\n                query: {\n                  ...location.query,\n                  cursor: undefined,\n                  query: query.formatString(),\n                },\n              });\n\n              trackAdvancedAnalyticsEvent(\n                'performance_views.transaction_summary.status_breakdown_click',\n                {\n                  organization,\n                  status: row['transaction.status'] as string,\n                }\n              );\n            },\n          }));\n          return <BreakdownBars data={points} />;\n        }}\n      </DiscoverQuery>\n    </Fragment>\n  );\n}\n\nconst EmptyStatusBreakdown = styled(EmptyStateWarning)`\n  height: 124px;\n  padding: 50px 15%;\n`;\n\nexport default StatusBreakdown;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Button from 'sentry/components/button';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport SuspectSpansQuery from 'sentry/utils/performance/suspectSpans/suspectSpansQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport SuspectSpansTable from '../transactionSpans/suspectSpansTable';\nimport {\n  SpanSortOthers,\n  SpanSortPercentiles,\n  SpansTotalValues,\n} from '../transactionSpans/types';\nimport {\n  getSuspectSpanSortFromLocation,\n  SPAN_SORT_TO_FIELDS,\n  spansRouteWithQuery,\n} from '../transactionSpans/utils';\n\nconst SPANS_CURSOR_NAME = 'spansCursor';\n\ntype Props = {\n  eventView: EventView;\n  location: Location;\n  organization: Organization;\n  projectId: string;\n  totals: SpansTotalValues | null;\n  transactionName: string;\n};\n\nexport default function SuspectSpans(props: Props) {\n  const {location, organization, eventView, totals, projectId, transactionName} = props;\n  const sort = getSuspectSpanSortFromLocation(location, 'spanSort');\n  const cursor = decodeScalar(location.query?.[SPANS_CURSOR_NAME]);\n\n  const sortedEventView = eventView\n    .withColumns(\n      [...Object.values(SpanSortOthers), ...Object.values(SpanSortPercentiles)].map(\n        field => ({kind: 'field', field})\n      )\n    )\n    .withSorts([{kind: 'desc', field: sort.field}]);\n  const fields = SPAN_SORT_TO_FIELDS[sort.field];\n  sortedEventView.fields = fields ? fields.map(field => ({field})) : [];\n\n  const {projects} = useProjects();\n\n  return (\n    <SuspectSpansQuery\n      location={location}\n      orgSlug={organization.slug}\n      eventView={sortedEventView}\n      limit={4}\n      perSuspect={0}\n      cursor={cursor}\n    >\n      {({suspectSpans, isLoading, pageLinks}) => (\n        <Fragment>\n          <SuspectSpansHeader\n            location={location}\n            organization={organization}\n            projectId={projectId}\n            transactionName={transactionName}\n            pageLinks={pageLinks}\n          />\n          <SuspectSpansTable\n            location={location}\n            organization={organization}\n            transactionName={transactionName}\n            project={projects.find(p => p.id === projectId)}\n            isLoading={isLoading}\n            suspectSpans={suspectSpans ?? []}\n            totals={totals}\n            sort={SpanSortOthers.SUM_EXCLUSIVE_TIME}\n          />\n        </Fragment>\n      )}\n    </SuspectSpansQuery>\n  );\n}\n\ntype HeaderProps = {\n  location: Location;\n  organization: Organization;\n  pageLinks: string | null;\n  projectId: string;\n  transactionName: string;\n};\n\nfunction SuspectSpansHeader(props: HeaderProps) {\n  const {location, organization, projectId, transactionName, pageLinks} = props;\n\n  const viewAllTarget = spansRouteWithQuery({\n    orgSlug: organization.slug,\n    transaction: transactionName,\n    projectID: projectId,\n    query: location.query,\n  });\n\n  const handleCursor: CursorHandler = (cursor, pathname, query) => {\n    browserHistory.push({\n      pathname,\n      query: {...query, [SPANS_CURSOR_NAME]: cursor},\n    });\n  };\n\n  return (\n    <Header>\n      <div>\n        <SectionHeading>{t('Suspect Spans')}</SectionHeading>\n        <FeatureBadge type=\"new\" />\n      </div>\n      <Button to={viewAllTarget} size=\"xsmall\" data-test-id=\"suspect-spans-open-tab\">\n        {t('View All Spans')}\n      </Button>\n      <StyledPagination pageLinks={pageLinks} onCursor={handleCursor} size=\"xsmall\" />\n    </Header>\n  );\n}\n\nconst Header = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr auto auto;\n  margin-bottom: ${space(1)};\n  align-items: center;\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport UserMisery from 'sentry/components/userMisery';\nimport {IconOpen} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {getTermHelp, PERFORMANCE_TERM} from 'sentry/views/performance/data';\nimport {vitalsRouteWithQuery} from 'sentry/views/performance/transactionSummary/transactionVitals/utils';\nimport {SidebarSpacer} from 'sentry/views/performance/transactionSummary/utils';\nimport VitalInfo from 'sentry/views/performance/vitalDetail/vitalInfo';\n\ntype Props = {\n  error: QueryError | null;\n  eventView: EventView;\n  hasWebVitals: boolean;\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  totals: Record<string, number> | null;\n  transactionName: string;\n};\n\nfunction UserStats({\n  isLoading,\n  hasWebVitals,\n  error,\n  totals,\n  location,\n  organization,\n  transactionName,\n  eventView,\n}: Props) {\n  const useAggregateAlias = !organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n  let userMisery = error !== null ? <div>{'\\u2014'}</div> : <Placeholder height=\"34px\" />;\n\n  if (!isLoading && error === null && totals) {\n    const threshold: number | undefined = totals.project_threshold_config[1];\n    const miserableUsers: number | undefined = useAggregateAlias\n      ? totals.count_miserable_user\n      : totals['count_miserable_user()'];\n    const userMiseryScore: number = useAggregateAlias\n      ? totals.user_misery\n      : totals['user_misery()'];\n    const totalUsers = useAggregateAlias\n      ? totals.count_unique_user\n      : totals['count_unique_user()'];\n    userMisery = (\n      <UserMisery\n        bars={40}\n        barHeight={30}\n        userMisery={userMiseryScore}\n        miseryLimit={threshold}\n        totalUsers={totalUsers}\n        miserableUsers={miserableUsers}\n      />\n    );\n  }\n\n  const orgSlug = organization.slug;\n\n  const webVitalsTarget = vitalsRouteWithQuery({\n    orgSlug,\n    transaction: transactionName,\n    projectID: decodeScalar(location.query.project),\n    query: location.query,\n  });\n\n  return (\n    <Fragment>\n      {hasWebVitals && (\n        <Fragment>\n          <VitalsHeading>\n            <SectionHeading>\n              {t('Web Vitals')}\n              <QuestionTooltip\n                position=\"top\"\n                title={t(\n                  'Web Vitals with p75 better than the \"poor\" threshold, as defined by Google Web Vitals.'\n                )}\n                size=\"sm\"\n              />\n            </SectionHeading>\n            <Link to={webVitalsTarget}>\n              <IconOpen />\n            </Link>\n          </VitalsHeading>\n          <VitalInfo\n            location={location}\n            vital={[WebVital.FCP, WebVital.LCP, WebVital.FID, WebVital.CLS]}\n            orgSlug={orgSlug}\n            environment={eventView.environment}\n            start={eventView.start}\n            end={eventView.end}\n            statsPeriod={eventView.statsPeriod}\n            project={eventView.project}\n            hideVitalThresholds\n            hideDurationDetail\n          />\n          <SidebarSpacer />\n        </Fragment>\n      )}\n      <SectionHeading>\n        {t('User Misery')}\n        <QuestionTooltip\n          position=\"top\"\n          title={getTermHelp(organization, PERFORMANCE_TERM.USER_MISERY)}\n          size=\"sm\"\n        />\n      </SectionHeading>\n      {userMisery}\n      <SidebarSpacer />\n    </Fragment>\n  );\n}\n\nconst VitalsHeading = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport default UserStats;\n","import {Fragment} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\nimport omit from 'lodash/omit';\n\nimport Feature from 'sentry/components/acl/feature';\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport TransactionsList, {\n  DropdownOption,\n} from 'sentry/components/discover/transactionsList';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization, Project} from 'sentry/types';\nimport {defined, generateQueryWithTag} from 'sentry/utils';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  formatTagKey,\n  getAggregateAlias,\n  isRelativeSpanOperationBreakdownField,\n  SPAN_OP_BREAKDOWN_FIELDS,\n  SPAN_OP_RELATIVE_BREAKDOWN_FIELD,\n} from 'sentry/utils/discover/fields';\nimport {QueryError} from 'sentry/utils/discover/genericDiscoverQuery';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport withProjects from 'sentry/utils/withProjects';\nimport {Actions, updateQuery} from 'sentry/views/eventsV2/table/cellAction';\nimport {TableColumn} from 'sentry/views/eventsV2/table/types';\nimport Tags from 'sentry/views/eventsV2/tags';\nimport {\n  PERCENTILE as VITAL_PERCENTILE,\n  VITAL_GROUPS,\n} from 'sentry/views/performance/transactionSummary/transactionVitals/constants';\n\nimport {isSummaryViewFrontend, isSummaryViewFrontendPageLoad} from '../../utils';\nimport Filter, {\n  decodeFilterFromLocation,\n  filterToField,\n  filterToSearchConditions,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport {\n  generateTraceLink,\n  generateTransactionLink,\n  normalizeSearchConditions,\n  SidebarSpacer,\n  TransactionFilterOptions,\n} from '../utils';\n\nimport {MetricsEventsDropdown} from './metricEvents/metricsEventsDropdown';\nimport TransactionSummaryCharts from './charts';\nimport RelatedIssues from './relatedIssues';\nimport SidebarCharts from './sidebarCharts';\nimport StatusBreakdown from './statusBreakdown';\nimport SuspectSpans from './suspectSpans';\nimport {TagExplorer} from './tagExplorer';\nimport UserStats from './userStats';\n\ntype Props = {\n  error: QueryError | null;\n  eventView: EventView;\n  isLoading: boolean;\n  location: Location;\n  onChangeFilter: (newFilter: SpanOperationBreakdownFilter) => void;\n  organization: Organization;\n  projectId: string;\n  projects: Project[];\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n  totalValues: Record<string, number> | null;\n  transactionName: string;\n};\n\nfunction SummaryContent({\n  eventView,\n  location,\n  totalValues,\n  spanOperationBreakdownFilter,\n  organization,\n  projects,\n  isLoading,\n  error,\n  projectId,\n  transactionName,\n  onChangeFilter,\n}: Props) {\n  const useAggregateAlias = !organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n  function handleSearch(query: string) {\n    const queryParams = normalizeDateTimeParams({\n      ...(location.query || {}),\n      query,\n    });\n\n    // do not propagate pagination when making a new search\n    const searchQueryParams = omit(queryParams, 'cursor');\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...searchQueryParams,\n        userModified: true,\n      },\n    });\n  }\n\n  function generateTagUrl(key: string, value: string) {\n    const query = generateQueryWithTag(location.query, {key: formatTagKey(key), value});\n\n    return {\n      ...location,\n      query,\n    };\n  }\n\n  function handleCellAction(column: TableColumn<React.ReactText>) {\n    return (action: Actions, value: React.ReactText) => {\n      const searchConditions = normalizeSearchConditions(eventView.query);\n\n      updateQuery(searchConditions, action, column, value);\n\n      browserHistory.push({\n        pathname: location.pathname,\n        query: {\n          ...location.query,\n          cursor: undefined,\n          query: searchConditions.formatString(),\n        },\n      });\n    };\n  }\n\n  function handleTransactionsListSortChange(value: string) {\n    const target = {\n      pathname: location.pathname,\n      query: {...location.query, showTransactions: value, transactionCursor: undefined},\n    };\n\n    browserHistory.push(target);\n  }\n\n  function handleAllEventsViewClick() {\n    trackAnalyticsEvent({\n      eventKey: 'performance_views.summary.view_in_transaction_events',\n      eventName: 'Performance Views: View in All Events from Transaction Summary',\n      organization_id: parseInt(organization.id, 10),\n    });\n  }\n\n  function generateEventView(\n    transactionsListEventView: EventView,\n    transactionsListTitles: string[]\n  ) {\n    const {selected} = getTransactionsListSort(location, {\n      p95: (useAggregateAlias ? totalValues?.p95 : totalValues?.['p95()']) ?? 0,\n      spanOperationBreakdownFilter,\n    });\n    const sortedEventView = transactionsListEventView.withSorts([selected.sort]);\n\n    if (spanOperationBreakdownFilter === SpanOperationBreakdownFilter.None) {\n      const fields = [\n        // Remove the extra field columns\n        ...sortedEventView.fields.slice(0, transactionsListTitles.length),\n      ];\n\n      // omit \"Operation Duration\" column\n      sortedEventView.fields = fields.filter(({field}) => {\n        return !isRelativeSpanOperationBreakdownField(field);\n      });\n    }\n    return sortedEventView;\n  }\n\n  const hasPerformanceChartInterpolation = organization.features.includes(\n    'performance-chart-interpolation'\n  );\n\n  const query = decodeScalar(location.query.query, '');\n  const totalCount =\n    totalValues === null\n      ? null\n      : useAggregateAlias\n      ? totalValues.count\n      : totalValues['count()'];\n\n  // NOTE: This is not a robust check for whether or not a transaction is a front end\n  // transaction, however it will suffice for now.\n  const hasWebVitals =\n    isSummaryViewFrontendPageLoad(eventView, projects) ||\n    (totalValues !== null &&\n      VITAL_GROUPS.some(group =>\n        group.vitals.some(vital => {\n          const functionName = `percentile(${vital},${VITAL_PERCENTILE})`;\n          const field = useAggregateAlias\n            ? getAggregateAlias(functionName)\n            : functionName;\n          return Number.isFinite(totalValues[field]);\n        })\n      ));\n\n  const isFrontendView = isSummaryViewFrontend(eventView, projects);\n\n  const transactionsListTitles = [\n    t('event id'),\n    t('user'),\n    t('total duration'),\n    t('trace id'),\n    t('timestamp'),\n  ];\n\n  let transactionsListEventView = eventView.clone();\n\n  if (organization.features.includes('performance-ops-breakdown')) {\n    // update search conditions\n\n    const spanOperationBreakdownConditions = filterToSearchConditions(\n      spanOperationBreakdownFilter,\n      location\n    );\n\n    if (spanOperationBreakdownConditions) {\n      eventView = eventView.clone();\n      eventView.query = `${eventView.query} ${spanOperationBreakdownConditions}`.trim();\n      transactionsListEventView = eventView.clone();\n    }\n\n    // update header titles of transactions list\n\n    const operationDurationTableTitle =\n      spanOperationBreakdownFilter === SpanOperationBreakdownFilter.None\n        ? t('operation duration')\n        : `${spanOperationBreakdownFilter} duration`;\n\n    // add ops breakdown duration column as the 3rd column\n    transactionsListTitles.splice(2, 0, operationDurationTableTitle);\n\n    // span_ops_breakdown.relative is a preserved name and a marker for the associated\n    // field renderer to be used to generate the relative ops breakdown\n    let durationField = SPAN_OP_RELATIVE_BREAKDOWN_FIELD;\n\n    if (spanOperationBreakdownFilter !== SpanOperationBreakdownFilter.None) {\n      durationField = filterToField(spanOperationBreakdownFilter)!;\n    }\n\n    const fields = [...transactionsListEventView.fields];\n\n    // add ops breakdown duration column as the 3rd column\n    fields.splice(2, 0, {field: durationField});\n\n    if (spanOperationBreakdownFilter === SpanOperationBreakdownFilter.None) {\n      fields.push(\n        ...SPAN_OP_BREAKDOWN_FIELDS.map(field => {\n          return {field};\n        })\n      );\n    }\n\n    transactionsListEventView.fields = fields;\n  }\n\n  const openAllEventsProps = {\n    generatePerformanceTransactionEventsView: () => {\n      const performanceTransactionEventsView = generateEventView(\n        transactionsListEventView,\n        transactionsListTitles\n      );\n      performanceTransactionEventsView.query = query;\n      return performanceTransactionEventsView;\n    },\n    handleOpenAllEventsClick: handleAllEventsViewClick,\n  };\n\n  return (\n    <Fragment>\n      <Layout.Main>\n        <FilterActions>\n          <Filter\n            organization={organization}\n            currentFilter={spanOperationBreakdownFilter}\n            onChangeFilter={onChangeFilter}\n          />\n          <PageFilterBar condensed>\n            <EnvironmentPageFilter />\n            <DatePageFilter alignDropdown=\"left\" />\n          </PageFilterBar>\n          <StyledSearchBar\n            searchSource=\"transaction_summary\"\n            organization={organization}\n            projectIds={eventView.project}\n            query={query}\n            fields={eventView.fields}\n            onSearch={handleSearch}\n            maxQueryLength={MAX_QUERY_LENGTH}\n          />\n          <MetricsEventsDropdown />\n        </FilterActions>\n        <TransactionSummaryCharts\n          organization={organization}\n          location={location}\n          eventView={eventView}\n          totalValues={totalCount}\n          currentFilter={spanOperationBreakdownFilter}\n          withoutZerofill={hasPerformanceChartInterpolation}\n        />\n        <TransactionsList\n          location={location}\n          organization={organization}\n          eventView={transactionsListEventView}\n          {...openAllEventsProps}\n          showTransactions={\n            decodeScalar(\n              location.query.showTransactions,\n              TransactionFilterOptions.SLOW\n            ) as TransactionFilterOptions\n          }\n          breakdown={decodeFilterFromLocation(location)}\n          titles={transactionsListTitles}\n          handleDropdownChange={handleTransactionsListSortChange}\n          generateLink={{\n            id: generateTransactionLink(transactionName),\n            trace: generateTraceLink(eventView.normalizeDateSelection(location)),\n          }}\n          handleCellAction={handleCellAction}\n          {...getTransactionsListSort(location, {\n            p95: (useAggregateAlias ? totalValues?.p95 : totalValues?.['p95()']) ?? 0,\n            spanOperationBreakdownFilter,\n          })}\n          forceLoading={isLoading}\n        />\n        <Feature\n          requireAll={false}\n          features={['organizations:performance-suspect-spans-view']}\n        >\n          <SuspectSpans\n            location={location}\n            organization={organization}\n            eventView={eventView}\n            totals={\n              defined(totalValues?.['count()'])\n                ? {'count()': totalValues!['count()']}\n                : null\n            }\n            projectId={projectId}\n            transactionName={transactionName}\n          />\n        </Feature>\n        <TagExplorer\n          eventView={eventView}\n          organization={organization}\n          location={location}\n          projects={projects}\n          transactionName={transactionName}\n          currentFilter={spanOperationBreakdownFilter}\n        />\n        <RelatedIssues\n          organization={organization}\n          location={location}\n          transaction={transactionName}\n          start={eventView.start}\n          end={eventView.end}\n          statsPeriod={eventView.statsPeriod}\n        />\n      </Layout.Main>\n      <Layout.Side>\n        <UserStats\n          organization={organization}\n          location={location}\n          isLoading={isLoading}\n          hasWebVitals={hasWebVitals}\n          error={error}\n          totals={totalValues}\n          transactionName={transactionName}\n          eventView={eventView}\n        />\n        {!isFrontendView && (\n          <StatusBreakdown\n            eventView={eventView}\n            organization={organization}\n            location={location}\n          />\n        )}\n        <SidebarSpacer />\n        <SidebarCharts\n          organization={organization}\n          isLoading={isLoading}\n          error={error}\n          totals={totalValues}\n          eventView={eventView}\n          transactionName={transactionName}\n        />\n        <SidebarSpacer />\n        <Tags\n          generateUrl={generateTagUrl}\n          totalValues={totalCount}\n          eventView={eventView}\n          organization={organization}\n          location={location}\n        />\n      </Layout.Side>\n    </Fragment>\n  );\n}\n\nfunction getFilterOptions({\n  p95,\n  spanOperationBreakdownFilter,\n}: {\n  p95: number;\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter;\n}): DropdownOption[] {\n  if (spanOperationBreakdownFilter === SpanOperationBreakdownFilter.None) {\n    return [\n      {\n        sort: {kind: 'asc', field: 'transaction.duration'},\n        value: TransactionFilterOptions.FASTEST,\n        label: t('Fastest Transactions'),\n      },\n      {\n        query: [['transaction.duration', `<=${p95.toFixed(0)}`]],\n        sort: {kind: 'desc', field: 'transaction.duration'},\n        value: TransactionFilterOptions.SLOW,\n        label: t('Slow Transactions (p95)'),\n      },\n      {\n        sort: {kind: 'desc', field: 'transaction.duration'},\n        value: TransactionFilterOptions.OUTLIER,\n        label: t('Outlier Transactions (p100)'),\n      },\n      {\n        sort: {kind: 'desc', field: 'timestamp'},\n        value: TransactionFilterOptions.RECENT,\n        label: t('Recent Transactions'),\n      },\n    ];\n  }\n\n  const field = filterToField(spanOperationBreakdownFilter)!;\n  const operationName = spanOperationBreakdownFilter;\n\n  return [\n    {\n      sort: {kind: 'asc', field},\n      value: TransactionFilterOptions.FASTEST,\n      label: t('Fastest %s Operations', operationName),\n    },\n    {\n      query: [['transaction.duration', `<=${p95.toFixed(0)}`]],\n      sort: {kind: 'desc', field},\n      value: TransactionFilterOptions.SLOW,\n      label: t('Slow %s Operations (p95)', operationName),\n    },\n    {\n      sort: {kind: 'desc', field},\n      value: TransactionFilterOptions.OUTLIER,\n      label: t('Outlier %s Operations (p100)', operationName),\n    },\n    {\n      sort: {kind: 'desc', field: 'timestamp'},\n      value: TransactionFilterOptions.RECENT,\n      label: t('Recent Transactions'),\n    },\n  ];\n}\n\nfunction getTransactionsListSort(\n  location: Location,\n  options: {p95: number; spanOperationBreakdownFilter: SpanOperationBreakdownFilter}\n): {options: DropdownOption[]; selected: DropdownOption} {\n  const sortOptions = getFilterOptions(options);\n  const urlParam = decodeScalar(\n    location.query.showTransactions,\n    TransactionFilterOptions.SLOW\n  );\n  const selectedSort = sortOptions.find(opt => opt.value === urlParam) || sortOptions[0];\n  return {selected: selectedSort, options: sortOptions};\n}\n\nconst FilterActions = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  margin-bottom: ${space(2)};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: repeat(2, min-content);\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    grid-template-columns: auto auto 1fr auto;\n  }\n`;\n\nconst StyledSearchBar = styled(SearchBar)`\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    order: 1;\n    grid-column: 1/4;\n  }\n\n  @media (min-width: ${p => p.theme.breakpoints.xlarge}) {\n    order: initial;\n    grid-column: auto;\n  }\n`;\n\nexport default withProjects(SummaryContent);\n","import {useEffect} from 'react';\nimport {browserHistory} from 'react-router';\nimport {Location} from 'history';\n\nimport {loadOrganizationTags} from 'sentry/actionCreators/tags';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport {trackAnalyticsEvent} from 'sentry/utils/analytics';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Column,\n  isAggregateField,\n  QueryFieldValue,\n  WebVital,\n} from 'sentry/utils/discover/fields';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport {removeHistogramQueryStrings} from 'sentry/utils/performance/histogram';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withPageFilters from 'sentry/utils/withPageFilters';\nimport withProjects from 'sentry/utils/withProjects';\n\nimport {addRoutePerformanceContext} from '../../utils';\nimport {\n  decodeFilterFromLocation,\n  filterToLocationQuery,\n  SpanOperationBreakdownFilter,\n} from '../filter';\nimport PageLayout, {ChildProps} from '../pageLayout';\nimport Tab from '../tabs';\nimport {\n  PERCENTILE as VITAL_PERCENTILE,\n  VITAL_GROUPS,\n} from '../transactionVitals/constants';\n\nimport {ZOOM_END, ZOOM_START} from './latencyChart/utils';\nimport SummaryContent from './content';\n\n// Used to cast the totals request to numbers\n// as React.ReactText\ntype TotalValues = Record<string, number>;\n\ntype Props = {\n  location: Location;\n  organization: Organization;\n  projects: Project[];\n  selection: PageFilters;\n};\n\nfunction TransactionOverview(props: Props) {\n  const api = useApi();\n\n  const {location, selection, organization, projects} = props;\n\n  useEffect(\n    () => {\n      loadOrganizationTags(api, organization.slug, selection);\n      addRoutePerformanceContext(selection);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selection]\n  );\n\n  return (\n    <MEPSettingProvider>\n      <PageLayout\n        location={location}\n        organization={organization}\n        projects={projects}\n        tab={Tab.TransactionSummary}\n        getDocumentTitle={getDocumentTitle}\n        generateEventView={generateEventView}\n        childComponent={OverviewContentWrapper}\n      />\n    </MEPSettingProvider>\n  );\n}\n\nfunction OverviewContentWrapper(props: ChildProps) {\n  const {\n    location,\n    organization,\n    eventView,\n    projectId,\n    transactionName,\n    transactionThreshold,\n    transactionThresholdMetric,\n  } = props;\n  const useEvents = organization.features.includes(\n    'performance-frontend-use-events-endpoint'\n  );\n\n  const spanOperationBreakdownFilter = decodeFilterFromLocation(location);\n\n  const totalsView = getTotalsEventView(organization, eventView);\n\n  const onChangeFilter = (newFilter: SpanOperationBreakdownFilter) => {\n    trackAnalyticsEvent({\n      eventName: 'Performance Views: Filter Dropdown',\n      eventKey: 'performance_views.filter_dropdown.selection',\n      organization_id: parseInt(organization.id, 10),\n      action: newFilter as string,\n    });\n\n    const nextQuery: Location['query'] = {\n      ...removeHistogramQueryStrings(location, [ZOOM_START, ZOOM_END]),\n      ...filterToLocationQuery(newFilter),\n    };\n\n    if (newFilter === SpanOperationBreakdownFilter.None) {\n      delete nextQuery.breakdown;\n    }\n\n    browserHistory.push({\n      pathname: location.pathname,\n      query: nextQuery,\n    });\n  };\n\n  return (\n    <DiscoverQuery\n      eventView={totalsView}\n      orgSlug={organization.slug}\n      location={location}\n      transactionThreshold={transactionThreshold}\n      transactionThresholdMetric={transactionThresholdMetric}\n      referrer=\"api.performance.transaction-summary\"\n      useEvents={useEvents}\n    >\n      {({isLoading, error, tableData}) => {\n        const totals: TotalValues | null =\n          (tableData?.data?.[0] as {[k: string]: number}) ?? null;\n        return (\n          <SummaryContent\n            location={location}\n            organization={organization}\n            eventView={eventView}\n            projectId={projectId}\n            transactionName={transactionName}\n            isLoading={isLoading}\n            error={error}\n            totalValues={totals}\n            onChangeFilter={onChangeFilter}\n            spanOperationBreakdownFilter={spanOperationBreakdownFilter}\n          />\n        );\n      }}\n    </DiscoverQuery>\n  );\n}\n\nfunction getDocumentTitle(transactionName: string): string {\n  const hasTransactionName =\n    typeof transactionName === 'string' && String(transactionName).trim().length > 0;\n\n  if (hasTransactionName) {\n    return [String(transactionName).trim(), t('Performance')].join(' - ');\n  }\n\n  return [t('Summary'), t('Performance')].join(' - ');\n}\n\nfunction generateEventView({\n  location,\n  transactionName,\n}: {\n  location: Location;\n  transactionName: string;\n}): EventView {\n  // Use the user supplied query but overwrite any transaction or event type\n  // conditions they applied.\n  const query = decodeScalar(location.query.query, '');\n  const conditions = new MutableSearch(query);\n\n  conditions.setFilterValues('event.type', ['transaction']);\n  conditions.setFilterValues('transaction', [transactionName]);\n\n  Object.keys(conditions.filters).forEach(field => {\n    if (isAggregateField(field)) {\n      conditions.removeFilter(field);\n    }\n  });\n\n  const fields = ['id', 'user.display', 'transaction.duration', 'trace', 'timestamp'];\n\n  return EventView.fromNewQueryWithLocation(\n    {\n      id: undefined,\n      version: 2,\n      name: transactionName,\n      fields,\n      query: conditions.formatString(),\n      projects: [],\n    },\n    location\n  );\n}\n\nfunction getTotalsEventView(\n  _organization: Organization,\n  eventView: EventView\n): EventView {\n  const vitals = VITAL_GROUPS.map(({vitals: vs}) => vs).reduce((keys: WebVital[], vs) => {\n    vs.forEach(vital => keys.push(vital));\n    return keys;\n  }, []);\n\n  const totalsColumns: QueryFieldValue[] = [\n    {\n      kind: 'function',\n      function: ['p95', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['count', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['count_unique', 'user', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['failure_rate', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['tpm', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['count_miserable', 'user', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['user_misery', '', undefined, undefined],\n    },\n    {\n      kind: 'function',\n      function: ['apdex', '', undefined, undefined],\n    },\n  ];\n\n  return eventView.withColumns([\n    ...totalsColumns,\n    ...vitals.map(\n      vital =>\n        ({\n          kind: 'function',\n          function: ['percentile', vital, VITAL_PERCENTILE.toString(), undefined],\n        } as Column)\n    ),\n  ]);\n}\n\nexport default withPageFilters(withProjects(withOrganization(TransactionOverview)));\n","import Feature from 'sentry/components/acl/feature';\nimport DropdownControl, {DropdownItem} from 'sentry/components/dropdownControl';\nimport {t} from 'sentry/locale';\nimport {\n  AutoSampleState,\n  MEPState,\n  MetricsEnhancedSettingContext,\n  useMEPSettingContext,\n} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\n\ninterface MetricsEventsOption {\n  field: MEPState;\n  label: string;\n  prefix: string;\n}\n\nconst autoTextMap: Record<AutoSampleState, string> = {\n  [AutoSampleState.unset]: t('Auto'),\n  [AutoSampleState.metrics]: t('Auto (ingested)'),\n  [AutoSampleState.transactions]: t('Auto (stored)'),\n};\n\nfunction getOptions(mepContext: MetricsEnhancedSettingContext): MetricsEventsOption[] {\n  const autoText = autoTextMap[mepContext.autoSampleState];\n  const prefix = t('Sample');\n\n  return [\n    {\n      field: MEPState.auto,\n      prefix,\n      label: autoText,\n    },\n    {\n      field: MEPState.metricsOnly,\n      prefix,\n      label: t('Ingested only'),\n    },\n    {\n      field: MEPState.transactionsOnly,\n      prefix,\n      label: t('Stored only'),\n    },\n  ];\n}\n\nexport function MetricsEventsDropdown() {\n  return (\n    <Feature features={['performance-use-metrics']}>\n      <InnerDropdown />\n    </Feature>\n  );\n}\n\nfunction InnerDropdown() {\n  const mepSetting = useMEPSettingContext();\n\n  const options = getOptions(mepSetting);\n\n  const currentOption =\n    options.find(({field}) => field === mepSetting.metricSettingState) || options[0];\n\n  return (\n    <DropdownControl\n      buttonProps={{prefix: currentOption.prefix}}\n      label={currentOption.label}\n    >\n      {options.map(option => (\n        <DropdownItem\n          key={option.field}\n          eventKey={option.field}\n          isActive={option.field === currentOption.field}\n          onSelect={key => mepSetting.setMetricSettingState(key)}\n        >\n          {option.label}\n        </DropdownItem>\n      ))}\n    </DropdownControl>\n  );\n}\n","import {Query} from 'history';\n\nimport {SpanSlug} from 'sentry/utils/performance/suspectSpans/types';\n\nexport function generateSpanDetailsRoute({\n  orgSlug,\n  spanSlug,\n}: {\n  orgSlug: String;\n  spanSlug: SpanSlug;\n}): string {\n  const spanComponent = `${encodeURIComponent(spanSlug.op)}:${spanSlug.group}`;\n  return `/organizations/${orgSlug}/performance/summary/spans/${spanComponent}/`;\n}\n\nexport function spanDetailsRouteWithQuery({\n  orgSlug,\n  transaction,\n  query,\n  spanSlug,\n  projectID,\n}: {\n  orgSlug: string;\n  query: Query;\n  spanSlug: SpanSlug;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = generateSpanDetailsRoute({\n    orgSlug,\n    spanSlug,\n  });\n\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nexport enum ZoomKeys {\n  MIN = 'min',\n  MAX = 'max',\n}\n","import {ReactNode} from 'react';\nimport {Location} from 'history';\n\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\nimport Link from 'sentry/components/links/link';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {getFieldRenderer} from 'sentry/utils/discover/fieldRenderers';\nimport {ColumnType, fieldAlignment} from 'sentry/utils/discover/fields';\nimport {Container as TableCellContainer} from 'sentry/utils/discover/styles';\nimport {SuspectSpans} from 'sentry/utils/performance/suspectSpans/types';\n\nimport {spanDetailsRouteWithQuery} from './spanDetails/utils';\nimport {SpanSort, SpanSortOthers, SpanSortPercentiles, SpansTotalValues} from './types';\n\ntype Props = {\n  isLoading: boolean;\n  location: Location;\n  organization: Organization;\n  sort: SpanSort;\n  suspectSpans: SuspectSpans;\n  totals: SpansTotalValues | null;\n  transactionName: string;\n  project?: Project;\n};\n\nexport default function SuspectSpansTable(props: Props) {\n  const {\n    location,\n    organization,\n    transactionName,\n    isLoading,\n    suspectSpans,\n    totals,\n    sort,\n    project,\n  } = props;\n\n  const data: TableDataRowWithExtras[] = suspectSpans.map(suspectSpan => ({\n    operation: suspectSpan.op,\n    group: suspectSpan.group,\n    description: suspectSpan.description,\n    totalCount: suspectSpan.count,\n    frequency:\n      // Frequency is computed using the `uniq` function in ClickHouse.\n      // Because it is an approximation, it can occasionally exceed the number of events.\n      defined(suspectSpan.frequency) && defined(totals?.['count()'])\n        ? Math.min(1, suspectSpan.frequency / totals!['count()'])\n        : null,\n    avgOccurrences: suspectSpan.avgOccurrences,\n    p50ExclusiveTime: suspectSpan.p50ExclusiveTime,\n    p75ExclusiveTime: suspectSpan.p75ExclusiveTime,\n    p95ExclusiveTime: suspectSpan.p95ExclusiveTime,\n    p99ExclusiveTime: suspectSpan.p99ExclusiveTime,\n    sumExclusiveTime: suspectSpan.sumExclusiveTime,\n  }));\n\n  return (\n    <GridEditable\n      isLoading={isLoading}\n      data={data}\n      columnOrder={COLUMN_ORDER[sort].map(column => COLUMNS[column])}\n      columnSortBy={[]}\n      grid={{\n        renderHeadCell,\n        renderBodyCell: renderBodyCellWithMeta(\n          location,\n          organization,\n          transactionName,\n          project\n        ),\n      }}\n      location={location}\n    />\n  );\n}\n\nfunction renderHeadCell(column: TableColumn, _index: number): ReactNode {\n  const align = fieldAlignment(column.key, COLUMN_TYPE[column.key]);\n  return (\n    <SortLink\n      title={column.name}\n      align={align}\n      direction={undefined}\n      canSort={false}\n      generateSortLink={() => undefined}\n    />\n  );\n}\n\nfunction renderBodyCellWithMeta(\n  location: Location,\n  organization: Organization,\n  transactionName: string,\n  project?: Project\n) {\n  return (column: TableColumn, dataRow: TableDataRowWithExtras): React.ReactNode => {\n    const fieldRenderer = getFieldRenderer(column.key, COLUMN_TYPE);\n\n    if (column.key === 'description') {\n      const target = spanDetailsRouteWithQuery({\n        orgSlug: organization.slug,\n        transaction: transactionName,\n        query: location.query,\n        spanSlug: {op: dataRow.operation, group: dataRow.group},\n        projectID: project?.id,\n      });\n      return (\n        <TableCellContainer>\n          <Link to={target}>{dataRow[column.key] ?? t('(unnamed span)')}</Link>\n        </TableCellContainer>\n      );\n    }\n\n    return fieldRenderer(dataRow, {location, organization});\n  };\n}\n\ntype TableColumnKey =\n  | 'operation'\n  | 'description'\n  | 'totalCount'\n  | 'frequency'\n  | 'avgOccurrences'\n  | 'p50ExclusiveTime'\n  | 'p75ExclusiveTime'\n  | 'p95ExclusiveTime'\n  | 'p99ExclusiveTime'\n  | 'sumExclusiveTime';\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableDataRowWithExtras = TableDataRow & {\n  group: string;\n};\n\nconst COLUMN_ORDER: Record<SpanSort, TableColumnKey[]> = {\n  [SpanSortOthers.COUNT]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.AVG_OCCURRENCE]: [\n    'operation',\n    'description',\n    'avgOccurrences',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortOthers.SUM_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P50_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p50ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P75_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p75ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P95_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p95ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n  [SpanSortPercentiles.P99_EXCLUSIVE_TIME]: [\n    'operation',\n    'description',\n    'totalCount',\n    'frequency',\n    'p99ExclusiveTime',\n    'sumExclusiveTime',\n  ],\n};\n\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  operation: {\n    key: 'operation',\n    name: t('Span Operation'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  description: {\n    key: 'description',\n    name: t('Span Name'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  totalCount: {\n    key: 'totalCount',\n    name: t('Total Count'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  frequency: {\n    key: 'frequency',\n    name: t('Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  avgOccurrences: {\n    key: 'avgOccurrences',\n    name: t('Average Occurrences'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50ExclusiveTime: {\n    key: 'p50ExclusiveTime',\n    name: t('P50 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75ExclusiveTime: {\n    key: 'p75ExclusiveTime',\n    name: t('P75 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95ExclusiveTime: {\n    key: 'p95ExclusiveTime',\n    name: t('P95 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99ExclusiveTime: {\n    key: 'p99ExclusiveTime',\n    name: t('P99 Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  sumExclusiveTime: {\n    key: 'sumExclusiveTime',\n    name: t('Total Self Time'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst COLUMN_TYPE: Record<TableColumnKey, ColumnType> = {\n  operation: 'string',\n  description: 'string',\n  totalCount: 'integer',\n  frequency: 'percentage',\n  avgOccurrences: 'number',\n  p50ExclusiveTime: 'duration',\n  p75ExclusiveTime: 'duration',\n  p95ExclusiveTime: 'duration',\n  p99ExclusiveTime: 'duration',\n  sumExclusiveTime: 'duration',\n};\n","import {WebVital} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {VitalGroup} from 'sentry/utils/performance/vitals/types';\nimport theme from 'sentry/utils/theme';\n\nexport const NUM_BUCKETS = 100;\n\nexport const PERCENTILE = 0.75;\n\n/**\n * This defines the grouping for histograms. Histograms that are in the same group\n * will be queried together on initial load for alignment. However, the zoom controls\n * are defined for each measurement independently.\n */\nconst _VITAL_GROUPS = [\n  {\n    vitals: [WebVital.FP, WebVital.FCP, WebVital.LCP],\n    min: 0,\n  },\n  {\n    vitals: [WebVital.FID],\n    min: 0,\n    precision: 2,\n  },\n  {\n    vitals: [WebVital.CLS],\n    min: 0,\n    precision: 2,\n  },\n];\n\nconst _COLORS = [\n  ...theme.charts.getColorPalette(\n    _VITAL_GROUPS.reduce((count, {vitals}) => count + vitals.length, 0) - 1\n  ),\n].reverse();\n\nexport const VITAL_GROUPS: VitalGroup[] = _VITAL_GROUPS.map(group => ({\n  ...group,\n  colors: _COLORS.splice(0, group.vitals.length),\n}));\n\nexport const ZOOM_KEYS = _VITAL_GROUPS.reduce((keys: string[], {vitals}) => {\n  vitals.forEach(vital => {\n    const vitalSlug = WEB_VITAL_DETAILS[vital].slug;\n    keys.push(`${vitalSlug}Start`);\n    keys.push(`${vitalSlug}End`);\n  });\n  return keys;\n}, []);\n","import {Location} from 'history';\n\nimport {Organization} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {WebVital} from 'sentry/utils/discover/fields';\nimport VitalsCardDiscoverQuery from 'sentry/utils/performance/vitals/vitalsCardsDiscoverQuery';\n\nimport {VitalBar} from '../landing/vitalsCards';\n\ntype ViewProps = Pick<\n  EventView,\n  'environment' | 'project' | 'start' | 'end' | 'statsPeriod'\n>;\n\ntype Props = ViewProps & {\n  location: Location;\n  orgSlug: Organization['slug'];\n  vital: WebVital | WebVital[];\n  hideBar?: boolean;\n  hideDurationDetail?: boolean;\n  hideStates?: boolean;\n  hideVitalPercentNames?: boolean;\n  hideVitalThresholds?: boolean;\n  isLoading?: boolean;\n  p75AllTransactions?: number;\n};\n\nfunction VitalInfo({\n  vital,\n  location,\n  isLoading,\n  hideBar,\n  hideStates,\n  hideVitalPercentNames,\n  hideVitalThresholds,\n  hideDurationDetail,\n}: Props) {\n  const vitals = Array.isArray(vital) ? vital : [vital];\n  const contentCommonProps = {\n    vital,\n    showBar: !hideBar,\n    showStates: !hideStates,\n    showVitalPercentNames: !hideVitalPercentNames,\n    showVitalThresholds: !hideVitalThresholds,\n    showDurationDetail: !hideDurationDetail,\n  };\n\n  return (\n    <VitalsCardDiscoverQuery location={location} vitals={vitals}>\n      {({isLoading: loading, vitalsData}) => (\n        <VitalBar\n          {...contentCommonProps}\n          isLoading={isLoading || loading}\n          data={vitalsData}\n        />\n      )}\n    </VitalsCardDiscoverQuery>\n  );\n}\n\nexport default VitalInfo;\n"],"names":["DropdownControl","Component","renderButton","isOpen","getActorProps","label","button","buttonProps","buttonTooltipTitle","priority","detached","fullWidth","this","props","skipWrapper","position","title","StyledDropdownButton","hideBottomBorder","rightAlignChevron","renderChildren","getMenuProps","children","alignRight","menuWidth","blendWithActor","alignMenu","Content","width","blendCorner","render","alwaysRenderMenu","className","Container","Fragment","p","theme","breakpoints","small","DropdownButton","zIndex","dropdownAutocomplete","actor","DropdownBubble","border","DropdownItem","MenuItem","fontSizeMedium","transformStatsTimes","stats","data","forEach","d","transformPayload","payload","newPayload","y","yhat_lower","yhat_upper","anomalies","anoms","a","start","end","AnomaliesSeriesQuery","organization","features","includes","ANOMALY_FLAG","route","tableData","rest","isLoading","error","pageLinks","withApi","getSuspectSpanPayload","perSuspect","spanOps","spanGroups","minExclusiveTime","maxExclusiveTime","spanOp","spanGroup","min_exclusive_time","max_exclusive_time","defined","additionalPayload","eventView","getEventsAPIPayload","location","SuspectSpansQuery","getRequestPayload","omit","suspectSpans","Tags","loading","tags","totalValues","prevProps","thisAPIPayload","getFacetsAPIPayload","otherAPIPayload","isAPIPayloadSimilar","async","forceFetchData","api","confirmedQuery","setState","fetchTagFacets","slug","err","Sentry","tag","trackAnalyticsEvent","eventKey","eventName","organization_id","parseInt","id","state","renderPlaceholders","height","color","size","length","map","renderTag","StyledEmptyStateWarning","t","componentDidMount","fetchData","componentDidUpdate","shouldRefetchData","generateUrl","segments","topValues","segment","url","key","value","maxTotalValues","Math","max","Number","count","renderLoading","StyledPlaceholder","onTagClick","handleTagClick","showReleasePackage","StyledPlaceholderTitle","renderBody","EmptyStateWarning","Placeholder","borderRadius","space","RelatedIssues","statsPeriod","selectedTimePeriod","DEFAULT_RELATIVE_PERIODS","displayedPeriod","toLowerCase","tct","timePeriod","getIssuesEndpoint","transaction","queryParams","limit","sort","pick","query","Object","values","URL_PARAM","currentFilter","MutableSearch","decodeScalar","removeTracingKeysFromSearch","addFreeText","setFilterValues","path","formatString","issueSearch","pathname","ControlsWrapper","to","onClick","handleOpenClick","TableWrapper","orgId","endpointPath","canSelectGroups","renderEmptyMessage","withChart","withPagination","Panel","SidebarCharts","totals","utc","router","chartData","transactionName","useAggregateAlias","useTheme","RelativeBox","ChartLabel","top","ChartTitle","getTermHelp","PERFORMANCE_TERM","ChartSummaryValue","formatFloat","apdex","formatPercentage","failure_rate","tpm","results","period","xAxisIndex","zoomRenderProps","errored","reloading","chartOptions","series","epmSeries","find","s","seriesName","markPoint","MarkPoint","name","yAxis","xAxis","itemStyle","borderColor","anomalyToColor","confidence","string","alpha","rgb","target","anomaliesRouteWithQuery","orgSlug","projectID","project","browserHistory","symbol","symbolSize","visible","getDynamicText","fixed","testId","SidebarChartsContainer","useApi","mepSetting","useMEPSettingContext","colors","charts","getColorPalette","getUtcToLocalDateObject","undefined","environment","normalizeDateTimeParams","axisLineConfig","scale","axisLine","show","axisTick","splitLine","grid","left","right","axisPointer","link","xAxes","Array","from","_i","index","gridIndex","type","yAxes","interval","axisLabel","formatter","chartLabel","splitNumber","formatAbbreviatedNumber","isGroupedByDate","showTimeInTooltip","tooltip","trigger","truncate","valueFormatter","tooltipFormatter","nameFormatter","requestCommonProps","contentCommonProps","datetimeSelection","getInterval","showLoading","includePrevious","partial","referrer","queryExtras","getMEPQueryParams","i","yAxisIndex","ChartValue","SectionHeading","fontSizeExtraLarge","withRouter","BreakdownBars","total","reduce","sum","point","BreakdownGrid","Percentage","BarContainer","cursor","Bar","style","toFixed","Label","textColor","fontSizeSmall","StatusBreakdown","useEvents","breakdownView","withColumns","kind","function","field","withSorts","EmptyStatusBreakdown","points","row","String","removeFilter","trackAdvancedAnalyticsEvent","status","SuspectSpans","projectId","getSuspectSpanSortFromLocation","sortedEventView","SpanSortOthers","SpanSortPercentiles","fields","SPAN_SORT_TO_FIELDS","projects","useProjects","SuspectSpansHeader","viewAllTarget","spansRouteWithQuery","Header","StyledPagination","onCursor","Pagination","UserStats","hasWebVitals","userMisery","threshold","project_threshold_config","miserableUsers","count_miserable_user","userMiseryScore","user_misery","totalUsers","count_unique_user","bars","barHeight","miseryLimit","webVitalsTarget","vitalsRouteWithQuery","VitalsHeading","vital","WebVital","hideVitalThresholds","hideDurationDetail","SummaryContent","spanOperationBreakdownFilter","onChangeFilter","hasPerformanceChartInterpolation","totalCount","isSummaryViewFrontendPageLoad","VITAL_GROUPS","group","vitals","some","functionName","VITAL_PERCENTILE","getAggregateAlias","isFinite","isFrontendView","isSummaryViewFrontend","transactionsListTitles","transactionsListEventView","clone","spanOperationBreakdownConditions","filterToSearchConditions","trim","operationDurationTableTitle","SpanOperationBreakdownFilter","splice","durationField","SPAN_OP_RELATIVE_BREAKDOWN_FIELD","filterToField","push","SPAN_OP_BREAKDOWN_FIELDS","openAllEventsProps","generatePerformanceTransactionEventsView","performanceTransactionEventsView","selected","getTransactionsListSort","p95","slice","filter","isRelativeSpanOperationBreakdownField","generateEventView","handleOpenAllEventsClick","FilterActions","condensed","alignDropdown","StyledSearchBar","searchSource","projectIds","onSearch","searchQueryParams","userModified","maxQueryLength","MAX_QUERY_LENGTH","withoutZerofill","showTransactions","TransactionFilterOptions","breakdown","decodeFilterFromLocation","titles","handleDropdownChange","transactionCursor","generateLink","generateTransactionLink","trace","generateTraceLink","normalizeDateSelection","handleCellAction","column","action","searchConditions","normalizeSearchConditions","updateQuery","forceLoading","requireAll","generateQueryWithTag","formatTagKey","options","sortOptions","operationName","getFilterOptions","urlParam","opt","xlarge","SearchBar","withProjects","TransactionOverview","selection","useEffect","loadOrganizationTags","addRoutePerformanceContext","tab","Tab","getDocumentTitle","childComponent","OverviewContentWrapper","transactionThreshold","transactionThresholdMetric","totalsView","_organization","vs","keys","getTotalsEventView","newFilter","nextQuery","removeHistogramQueryStrings","ZOOM_START","ZOOM_END","filterToLocationQuery","join","conditions","filters","isAggregateField","EventView","version","withPageFilters","withOrganization","autoTextMap","AutoSampleState","MetricsEventsDropdown","InnerDropdown","mepContext","autoText","autoSampleState","prefix","MEPState","getOptions","currentOption","metricSettingState","option","isActive","onSelect","setMetricSettingState","spanDetailsRouteWithQuery","spanSlug","encodeURIComponent","op","generateSpanDetailsRoute","ZoomKeys","SuspectSpansTable","suspectSpan","operation","description","frequency","min","avgOccurrences","p50ExclusiveTime","p75ExclusiveTime","p95ExclusiveTime","p99ExclusiveTime","sumExclusiveTime","columnOrder","COLUMN_ORDER","COLUMNS","columnSortBy","renderHeadCell","renderBodyCell","renderBodyCellWithMeta","_index","align","fieldAlignment","COLUMN_TYPE","direction","canSort","generateSortLink","dataRow","fieldRenderer","getFieldRenderer","COL_WIDTH_UNDEFINED","NUM_BUCKETS","PERCENTILE","_VITAL_GROUPS","precision","_COLORS","reverse","ZOOM_KEYS","vitalSlug","WEB_VITAL_DETAILS","VitalInfo","hideBar","hideStates","hideVitalPercentNames","isArray","showBar","showStates","showVitalPercentNames","showVitalThresholds","showDurationDetail","vitalsData"],"sourceRoot":""}