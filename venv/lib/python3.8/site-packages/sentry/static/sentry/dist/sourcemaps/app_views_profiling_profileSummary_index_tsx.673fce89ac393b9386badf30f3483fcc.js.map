{"version":3,"file":"chunks/app_views_profiling_profileSummary_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/gridEditable/sortLink.tsx","webpack:///./app/components/performanceDuration.tsx","webpack:///./app/components/profiling/breadcrumb.tsx","webpack:///./app/utils/profiling/hooks/useProfileFilters.tsx","webpack:///./app/utils/profiling/hooks/useProfiles.tsx","webpack:///./app/utils/profiling/routes.tsx","webpack:///./app/utils/profiling/tableRenderer.tsx","webpack:///./app/utils/useLocation.tsx","webpack:///./app/components/profiling/arrayLinks.tsx","webpack:///./app/components/profiling/functionsTable.tsx","webpack:///./app/components/profiling/profilesTable.tsx","webpack:///./app/views/profiling/profileSummary/content.tsx","webpack:///./app/utils/profiling/hooks/useFunctions.tsx","webpack:///./app/views/profiling/profileSummary/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport {LocationDescriptorObject} from 'history';\nimport omit from 'lodash/omit';\n\nimport Link from 'sentry/components/links/link';\nimport {IconArrow} from 'sentry/icons';\n\nexport type Alignments = 'left' | 'right' | undefined;\nexport type Directions = 'desc' | 'asc' | undefined;\n\ntype Props = {\n  align: Alignments;\n  canSort: boolean;\n  direction: Directions;\n  generateSortLink: () => LocationDescriptorObject | undefined;\n\n  title: React.ReactNode;\n  onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void;\n};\n\nfunction SortLink({align, title, canSort, generateSortLink, onClick, direction}: Props) {\n  const target = generateSortLink();\n\n  if (!target || !canSort) {\n    return <StyledNonLink align={align}>{title}</StyledNonLink>;\n  }\n\n  const arrow = !direction ? null : (\n    <StyledIconArrow size=\"xs\" direction={direction === 'desc' ? 'down' : 'up'} />\n  );\n\n  return (\n    <StyledLink align={align} to={target} onClick={onClick}>\n      {title} {arrow}\n    </StyledLink>\n  );\n}\n\ntype LinkProps = React.ComponentPropsWithoutRef<typeof Link>;\ntype StyledLinkProps = LinkProps & {align: Alignments};\n\nconst StyledLink = styled((props: StyledLinkProps) => {\n  const forwardProps = omit(props, ['align']);\n  return <Link {...forwardProps} />;\n})`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  color: inherit;\n\n  &:hover,\n  &:active,\n  &:focus,\n  &:visited {\n    color: inherit;\n  }\n\n  ${(p: StyledLinkProps) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledNonLink = styled('div')<{align: Alignments}>`\n  display: block;\n  width: 100%;\n  white-space: nowrap;\n  ${(p: {align: Alignments}) => (p.align ? `text-align: ${p.align};` : '')}\n`;\n\nconst StyledIconArrow = styled(IconArrow)`\n  vertical-align: top;\n`;\n\nexport default SortLink;\n","import Duration from 'sentry/components/duration';\nimport {defined} from 'sentry/utils';\n\ninterface DurationProps {\n  abbreviation?: boolean;\n}\n\ninterface SecondsProps extends DurationProps {\n  seconds: number;\n}\n\ninterface MillisecondsProps extends DurationProps {\n  milliseconds: number;\n}\n\ninterface NanosecondsProps extends DurationProps {\n  nanoseconds: number;\n}\n\ntype PerformanceDurationProps = SecondsProps | MillisecondsProps | NanosecondsProps;\n\nfunction isMilliseconds(props: PerformanceDurationProps): props is MillisecondsProps {\n  return defined((props as MillisecondsProps).milliseconds);\n}\n\nfunction isNanoseconds(props: PerformanceDurationProps): props is NanosecondsProps {\n  return defined((props as NanosecondsProps).nanoseconds);\n}\n\nfunction PerformanceDuration(props: PerformanceDurationProps) {\n  const normalizedSeconds = isNanoseconds(props)\n    ? props.nanoseconds / 1_000_000_000\n    : isMilliseconds(props)\n    ? props.milliseconds / 1000\n    : props.seconds;\n\n  return (\n    <Duration\n      abbreviation={props.abbreviation}\n      seconds={normalizedSeconds}\n      fixedDigits={2}\n    />\n  );\n}\n\nexport default PerformanceDuration;\n","import {useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport Breadcrumbs, {Crumb} from 'sentry/components/breadcrumbs';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {\n  generateProfileFlamegraphRouteWithQuery,\n  generateProfileSummaryRouteWithQuery,\n  generateProfilingRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\n\ninterface BreadcrumbProps {\n  location: Location;\n  organization: Organization;\n  trails: Trail[];\n}\n\nfunction Breadcrumb({location, organization, trails}: BreadcrumbProps) {\n  const crumbs = useMemo(\n    () => trails.map(trail => trailToCrumb(trail, {location, organization})),\n    [location, organization, trails]\n  );\n  return <StyledBreadcrumbs crumbs={crumbs} />;\n}\n\nfunction trailToCrumb(\n  trail: Trail,\n  {\n    location,\n    organization,\n  }: {\n    location: Location;\n    organization: Organization;\n  }\n): Crumb {\n  switch (trail.type) {\n    case 'landing': {\n      return {\n        to: generateProfilingRouteWithQuery({\n          location,\n          orgSlug: organization.slug,\n        }),\n        label: t('Profiling'),\n        preservePageFilters: true,\n      };\n    }\n    case 'profile summary': {\n      return {\n        to: generateProfileSummaryRouteWithQuery({\n          location,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          transaction: trail.payload.transaction,\n        }),\n        label: t('Profile Summary'),\n        preservePageFilters: true,\n      };\n    }\n    case 'flamegraph': {\n      return {\n        to: generateProfileFlamegraphRouteWithQuery({\n          location,\n          orgSlug: organization.slug,\n          projectSlug: trail.payload.projectSlug,\n          profileId: trail.payload.profileId,\n        }),\n        label: trail.payload.transaction,\n        preservePageFilters: true,\n      };\n    }\n    default:\n      throw new Error(`Unknown breadcrumb type: ${JSON.stringify(trail)}`);\n  }\n}\n\ntype ProfilingTrail = {\n  type: 'landing';\n};\n\ntype ProfileSummaryTrail = {\n  payload: {\n    projectSlug: Project['slug'];\n    transaction: string;\n  };\n  type: 'profile summary';\n};\n\ntype FlamegraphTrail = {\n  payload: {\n    profileId: string;\n    projectSlug: string;\n    transaction: string;\n  };\n  type: 'flamegraph';\n};\n\ntype Trail = ProfilingTrail | ProfileSummaryTrail | FlamegraphTrail;\n\nconst StyledBreadcrumbs = styled(Breadcrumbs)`\n  padding: 0;\n`;\n\nexport {Breadcrumb};\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {Organization, PageFilters, Tag} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype ProfileFilters = Record<string, Tag>;\n\ninterface ProfileFiltersOptions {\n  query: string;\n  selection?: PageFilters;\n}\n\nfunction useProfileFilters({query, selection}: ProfileFiltersOptions): ProfileFilters {\n  const api = useApi();\n  const organization = useOrganization();\n\n  const [profileFilters, setProfileFilters] = useState<ProfileFilters>({});\n\n  useEffect(() => {\n    if (!selection) {\n      return undefined;\n    }\n\n    fetchProfileFilters(api, organization, query, selection).then(response => {\n      const withPredefinedFilters = response.reduce(\n        (filters: ProfileFilters, tag: Tag) => {\n          filters[tag.key] = {\n            ...tag,\n            // predefined allows us to specify a list of possible values\n            predefined: true,\n          };\n          return filters;\n        },\n        {}\n      );\n\n      setProfileFilters(withPredefinedFilters);\n    });\n\n    return () => api.clear();\n  }, [api, organization, query, selection]);\n\n  return profileFilters;\n}\n\nfunction fetchProfileFilters(\n  api: Client,\n  organization: Organization,\n  query: string,\n  selection: PageFilters\n): Promise<[Tag]> {\n  return api.requestPromise(`/organizations/${organization.slug}/profiling/filters/`, {\n    method: 'GET',\n    query: {\n      query,\n      project: selection.projects,\n      environment: selection.environments,\n      ...normalizeDateTimeParams(selection.datetime),\n    },\n  });\n}\n\nexport {useProfileFilters};\n","import {useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {Client} from 'sentry/api';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, RequestState} from 'sentry/types';\nimport {Trace} from 'sentry/types/profiling/core';\nimport {defined} from 'sentry/utils';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype ProfilesResult = {\n  pageLinks: string | null;\n  traces: Trace[];\n};\n\ninterface UseProfilesOptions {\n  query: string;\n  cursor?: string;\n  limit?: number;\n  selection?: PageFilters;\n}\n\nfunction useProfiles({\n  cursor,\n  limit,\n  query,\n  selection,\n}: UseProfilesOptions): RequestState<ProfilesResult> {\n  const api = useApi();\n  const organization = useOrganization();\n\n  const [requestState, setRequestState] = useState<RequestState<ProfilesResult>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    if (!defined(selection)) {\n      return undefined;\n    }\n\n    setRequestState({type: 'loading'});\n\n    fetchTraces(api, organization, {cursor, limit, query, selection})\n      .then(([traces, , response]) => {\n        setRequestState({\n          type: 'resolved',\n          data: {\n            traces,\n            pageLinks: response?.getResponseHeader('Link') ?? null,\n          },\n        });\n      })\n      .catch(err => {\n        setRequestState({type: 'errored', error: t('Error: Unable to load profiles')});\n        Sentry.captureException(err);\n      });\n\n    return () => api.clear();\n  }, [api, organization, cursor, limit, query, selection]);\n\n  return requestState;\n}\n\nfunction fetchTraces(\n  api: Client,\n  organization: Organization,\n  {\n    cursor,\n    limit,\n    query,\n    selection,\n  }: {\n    cursor: string | undefined;\n    limit: number | undefined;\n    query: string;\n    selection: PageFilters;\n  }\n) {\n  return api.requestPromise(`/organizations/${organization.slug}/profiling/profiles/`, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      cursor,\n      query,\n      per_page: limit,\n      project: selection.projects,\n      environment: selection.environments,\n      ...normalizeDateTimeParams(selection.datetime),\n    },\n  });\n}\n\nexport {useProfiles};\n","import {Location, LocationDescriptor, Path} from 'history';\n\nimport {Organization, Project} from 'sentry/types';\nimport {Trace} from 'sentry/types/profiling/core';\n\nexport function generateProfilingRoute({orgSlug}: {orgSlug: Organization['slug']}): Path {\n  return `/organizations/${orgSlug}/profiling/`;\n}\n\nexport function generateProfileSummaryRoute({\n  orgSlug,\n  projectSlug,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n}): Path {\n  return `/organizations/${orgSlug}/profiling/summary/${projectSlug}/`;\n}\n\nexport function generateProfileFlamegraphRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/flamegraph/`;\n}\n\nexport function generateProfileDetailsRoute({\n  orgSlug,\n  projectSlug,\n  profileId,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n}): string {\n  return `/organizations/${orgSlug}/profiling/profile/${projectSlug}/${profileId}/details/`;\n}\n\nexport function generateProfilingRouteWithQuery({\n  location,\n  orgSlug,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  location?: Location;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfilingRoute({orgSlug});\n  return {\n    pathname,\n    query: {\n      ...location?.query,\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileSummaryRouteWithQuery({\n  location,\n  orgSlug,\n  projectSlug,\n  transaction,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  projectSlug: Project['slug'];\n  transaction: string;\n  location?: Location;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileSummaryRoute({orgSlug, projectSlug});\n  return {\n    pathname,\n    query: {\n      ...location?.query,\n      ...query,\n      transaction,\n    },\n  };\n}\n\nexport function generateProfileFlamegraphRouteWithQuery({\n  location,\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  location?: Location;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileFlamegraphRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...location?.query,\n      ...query,\n    },\n  };\n}\n\nexport function generateProfileDetailsRouteWithQuery({\n  location,\n  orgSlug,\n  projectSlug,\n  profileId,\n  query,\n}: {\n  orgSlug: Organization['slug'];\n  profileId: Trace['id'];\n  projectSlug: Project['slug'];\n  location?: Location;\n  query?: Location['query'];\n}): LocationDescriptor {\n  const pathname = generateProfileDetailsRoute({orgSlug, projectSlug, profileId});\n  return {\n    pathname,\n    query: {\n      ...location?.query,\n      ...query,\n    },\n  };\n}\n","import {GridColumnOrder} from 'sentry/components/gridEditable';\nimport SortLink from 'sentry/components/gridEditable/sortLink';\n\nexport function renderTableHead<K>(rightAlignedColumns: Set<K>) {\n  return (column: GridColumnOrder<K>, _columnIndex: number) => {\n    return (\n      <SortLink\n        align={rightAlignedColumns.has(column.key) ? 'right' : 'left'}\n        title={column.name}\n        direction={undefined}\n        canSort={false}\n        generateSortLink={() => undefined}\n      />\n    );\n  };\n}\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import {useState} from 'react';\nimport {Link} from 'react-router';\nimport styled from '@emotion/styled';\nimport {LocationDescriptor} from 'history';\n\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype Item = {\n  target: LocationDescriptor;\n  value: string;\n};\n\ninterface ArrayLinksProps {\n  items: Item[];\n}\n\nfunction ArrayLinks({items}: ArrayLinksProps) {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <ArrayContainer expanded={expanded}>\n      {items.length > 0 && <LinkedItem item={items[0]} />}\n      {items.length > 1 &&\n        expanded &&\n        items\n          .slice(1, items.length)\n          .map(item => <LinkedItem key={item.value} item={item} />)}\n      {items.length > 1 ? (\n        <ButtonContainer>\n          <button onClick={() => setExpanded(!expanded)}>\n            {expanded ? t('[collapse]') : t('[+%s more]', items.length - 1)}\n          </button>\n        </ButtonContainer>\n      ) : null}\n    </ArrayContainer>\n  );\n}\n\nfunction LinkedItem({item}: {item: Item}) {\n  return (\n    <ArrayItem>\n      <Link to={item.target}>{item.value}</Link>\n    </ArrayItem>\n  );\n}\n\nconst ArrayContainer = styled('div')<{expanded: boolean}>`\n  display: flex;\n  flex-direction: ${p => (p.expanded ? 'column' : 'row')};\n`;\n\nconst ArrayItem = styled('span')`\n  flex-shrink: 1;\n  display: block;\n\n  ${p => p.theme.overflowEllipsis};\n  width: unset;\n`;\n\nconst ButtonContainer = styled('div')`\n  white-space: nowrap;\n\n  & button {\n    background: none;\n    border: 0;\n    outline: none;\n    padding: 0;\n    cursor: pointer;\n    color: ${p => p.theme.blue300};\n    margin-left: ${space(0.5)};\n  }\n`;\n\nexport {ArrayLinks};\n","import {Fragment, useMemo, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport Count from 'sentry/components/count';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {ArrayLinks} from 'sentry/components/profiling/arrayLinks';\nimport {IconChevron} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Project} from 'sentry/types';\nimport {FunctionCall} from 'sentry/types/profiling/core';\nimport {Container, NumberContainer} from 'sentry/utils/discover/styles';\nimport {getShortEventId} from 'sentry/utils/events';\nimport {formatPercentage} from 'sentry/utils/formatters';\nimport {generateProfileFlamegraphRouteWithQuery} from 'sentry/utils/profiling/routes';\nimport {renderTableHead} from 'sentry/utils/profiling/tableRenderer';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ninterface FunctionsTableProps {\n  error: string | null;\n  functionCalls: FunctionCall[];\n  isLoading: boolean;\n  project: Project;\n  limit?: number;\n}\n\nfunction FunctionsTable(props: FunctionsTableProps) {\n  const limit = props.limit ?? 5;\n  const [offset, setOffset] = useState(0);\n\n  const location = useLocation();\n  const organization = useOrganization();\n\n  const allFunctions: TableDataRow[] = useMemo(() => {\n    return props.functionCalls.map(functionCall => ({\n      symbol: functionCall.symbol,\n      image: functionCall.image,\n      p50Duration: functionCall.duration_ns.p50,\n      p75Duration: functionCall.duration_ns.p75,\n      p90Duration: functionCall.duration_ns.p90,\n      p95Duration: functionCall.duration_ns.p95,\n      p99Duration: functionCall.duration_ns.p99,\n      mainThreadPercent: functionCall.main_thread_percent,\n      p50Frequency: functionCall.frequency.p50,\n      p75Frequency: functionCall.frequency.p75,\n      p90Frequency: functionCall.frequency.p90,\n      p95Frequency: functionCall.frequency.p95,\n      p99Frequency: functionCall.frequency.p99,\n      profileIdToThreadId: Object.entries(functionCall.profile_id_to_thread_id).map(\n        ([profileId, threadId]) => {\n          return {\n            value: getShortEventId(profileId),\n            target: generateProfileFlamegraphRouteWithQuery({\n              orgSlug: organization.slug,\n              projectSlug: props.project.slug,\n              profileId,\n              query: {tid: threadId.toString()},\n            }),\n          };\n        }\n      ),\n    }));\n  }, [organization.slug, props.project.slug, props.functionCalls]);\n\n  const functions: TableDataRow[] = useMemo(() => {\n    return allFunctions.slice(offset, offset + limit);\n  }, [allFunctions, limit, offset]);\n\n  return (\n    <Fragment>\n      <TableHeader>\n        <SectionHeading>{t('Suspect Functions')}</SectionHeading>\n        <ButtonBar merged>\n          <Button\n            icon={<IconChevron direction=\"left\" size=\"sm\" />}\n            aria-label={t('Previous')}\n            size=\"xsmall\"\n            disabled={offset === 0}\n            onClick={() => setOffset(offset - limit)}\n          />\n          <Button\n            icon={<IconChevron direction=\"right\" size=\"sm\" />}\n            aria-label={t('Next')}\n            size=\"xsmall\"\n            disabled={offset + limit >= allFunctions.length}\n            onClick={() => setOffset(offset + limit)}\n          />\n        </ButtonBar>\n      </TableHeader>\n      <GridEditable\n        isLoading={props.isLoading}\n        error={props.error}\n        data={functions}\n        columnOrder={COLUMN_ORDER.map(key => COLUMNS[key])}\n        columnSortBy={[]}\n        grid={{\n          renderHeadCell: renderTableHead(RIGHT_ALIGNED_COLUMNS),\n          renderBodyCell: renderFunctionsTableCell,\n        }}\n        location={location}\n      />\n    </Fragment>\n  );\n}\n\nconst RIGHT_ALIGNED_COLUMNS = new Set<TableColumnKey>([\n  'p50Duration',\n  'p75Duration',\n  'p90Duration',\n  'p95Duration',\n  'p99Duration',\n  'mainThreadPercent',\n  'p50Frequency',\n  'p75Frequency',\n  'p90Frequency',\n  'p95Frequency',\n  'p99Frequency',\n]);\n\nfunction renderFunctionsTableCell(\n  column: TableColumn,\n  dataRow: TableDataRow,\n  rowIndex: number,\n  columnIndex: number\n) {\n  return (\n    <ProfilingFunctionsTableCell\n      column={column}\n      dataRow={dataRow}\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n    />\n  );\n}\n\ninterface ProfilingFunctionsTableCellProps {\n  column: TableColumn;\n  columnIndex: number;\n  dataRow: TableDataRow;\n  rowIndex: number;\n}\n\nfunction ProfilingFunctionsTableCell({\n  column,\n  dataRow,\n}: ProfilingFunctionsTableCellProps) {\n  const value = dataRow[column.key];\n\n  switch (column.key) {\n    case 'p50Frequency':\n    case 'p75Frequency':\n    case 'p90Frequency':\n    case 'p95Frequency':\n    case 'p99Frequency':\n      return (\n        <NumberContainer>\n          <Count value={value} />\n        </NumberContainer>\n      );\n    case 'mainThreadPercent':\n      return <NumberContainer>{formatPercentage(value)}</NumberContainer>;\n    case 'p50Duration':\n    case 'p75Duration':\n    case 'p90Duration':\n    case 'p95Duration':\n    case 'p99Duration':\n      return (\n        <NumberContainer>\n          <PerformanceDuration nanoseconds={value} abbreviation />\n        </NumberContainer>\n      );\n    case 'profileIdToThreadId':\n      return <ArrayLinks items={value} />;\n    default:\n      return <Container>{value}</Container>;\n  }\n}\n\ntype TableColumnKey =\n  | 'symbol'\n  | 'image'\n  | 'p50Duration'\n  | 'p75Duration'\n  | 'p90Duration'\n  | 'p95Duration'\n  | 'p99Duration'\n  | 'mainThreadPercent'\n  | 'p50Frequency'\n  | 'p75Frequency'\n  | 'p90Frequency'\n  | 'p95Frequency'\n  | 'p99Frequency'\n  | 'profileIdToThreadId';\n\ntype TableDataRow = Record<TableColumnKey, any>;\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\nconst COLUMN_ORDER: TableColumnKey[] = [\n  'symbol',\n  'image',\n  'p75Duration',\n  'p99Duration',\n  'mainThreadPercent',\n  'p75Frequency',\n  'p99Frequency',\n  'profileIdToThreadId',\n];\n\n// TODO: looks like these column names change depending on the platform?\nconst COLUMNS: Record<TableColumnKey, TableColumn> = {\n  symbol: {\n    key: 'symbol',\n    name: t('Symbol'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  image: {\n    key: 'image',\n    name: t('Binary'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50Duration: {\n    key: 'p50Duration',\n    name: t('P50 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75Duration: {\n    key: 'p75Duration',\n    name: t('P75 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p90Duration: {\n    key: 'p90Duration',\n    name: t('P90 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95Duration: {\n    key: 'p95Duration',\n    name: t('P95 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99Duration: {\n    key: 'p99Duration',\n    name: t('P99 Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  mainThreadPercent: {\n    key: 'mainThreadPercent',\n    name: t('Main Thread %'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p50Frequency: {\n    key: 'p50Frequency',\n    name: t('P50 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p75Frequency: {\n    key: 'p75Frequency',\n    name: t('P75 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p90Frequency: {\n    key: 'p90Frequency',\n    name: t('P90 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p95Frequency: {\n    key: 'p95Frequency',\n    name: t('P95 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  p99Frequency: {\n    key: 'p99Frequency',\n    name: t('P99 Frequency'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  profileIdToThreadId: {\n    key: 'profileIdToThreadId',\n    name: t('Example Profiles'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nconst TableHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n`;\n\nexport {FunctionsTable};\n","import {Fragment} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport DateTime from 'sentry/components/dateTime';\nimport GridEditable, {\n  COL_WIDTH_UNDEFINED,\n  GridColumnOrder,\n} from 'sentry/components/gridEditable';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport Link from 'sentry/components/links/link';\nimport PerformanceDuration from 'sentry/components/performanceDuration';\nimport {IconCheckmark, IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Trace} from 'sentry/types/profiling/core';\nimport {defined} from 'sentry/utils';\nimport {Container, NumberContainer} from 'sentry/utils/discover/styles';\nimport {getShortEventId} from 'sentry/utils/events';\nimport {\n  generateProfileDetailsRoute,\n  generateProfileSummaryRouteWithQuery,\n} from 'sentry/utils/profiling/routes';\nimport {renderTableHead} from 'sentry/utils/profiling/tableRenderer';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\nconst REQUIRE_PROJECT_COLUMNS: Set<TableColumnKey> = new Set([\n  'id',\n  'project_id',\n  'transaction_name',\n]);\n\ninterface ProfilesTableProps {\n  error: string | null;\n  isLoading: boolean;\n  traces: Trace[];\n  columnOrder?: Readonly<TableColumnKey[]>;\n}\n\nfunction ProfilesTable(props: ProfilesTableProps) {\n  const location = useLocation();\n\n  return (\n    <Fragment>\n      <GridEditable\n        isLoading={props.isLoading}\n        error={props.error}\n        data={props.traces}\n        columnOrder={(props.columnOrder ?? DEFAULT_COLUMN_ORDER).map(key => COLUMNS[key])}\n        columnSortBy={[]}\n        grid={{\n          renderHeadCell: renderTableHead(RIGHT_ALIGNED_COLUMNS),\n          renderBodyCell: renderProfilesTableCell,\n        }}\n        location={location}\n      />\n    </Fragment>\n  );\n}\n\nconst RIGHT_ALIGNED_COLUMNS = new Set<TableColumnKey>(['trace_duration_ms']);\n\nfunction renderProfilesTableCell(\n  column: TableColumn,\n  dataRow: TableDataRow,\n  rowIndex: number,\n  columnIndex: number\n) {\n  return (\n    <ProfilesTableCell\n      column={column}\n      dataRow={dataRow}\n      rowIndex={rowIndex}\n      columnIndex={columnIndex}\n    />\n  );\n}\n\ninterface ProfilesTableCellProps {\n  column: TableColumn;\n  columnIndex: number;\n  dataRow: TableDataRow;\n  rowIndex: number;\n}\n\nfunction ProfilesTableCell({column, dataRow}: ProfilesTableCellProps) {\n  const organization = useOrganization();\n  const {projects} = useProjects();\n  const location = useLocation();\n\n  // Not all columns need the project, so small optimization to avoid\n  // the linear lookup for every cell.\n  const project = REQUIRE_PROJECT_COLUMNS.has(column.key)\n    ? projects.find(proj => proj.id === dataRow.project_id)\n    : undefined;\n\n  if (REQUIRE_PROJECT_COLUMNS.has(column.key) && !defined(project)) {\n    Sentry.withScope(scope => {\n      scope.setFingerprint(['profiles table', 'cell', 'missing project']);\n      scope.setTag('cell_key', column.key);\n      scope.setTag('missing_project', dataRow.project_id);\n      scope.setTag('available_project', projects.length);\n      Sentry.captureMessage(`Project ${dataRow.project_id} missing for ${column.key}`);\n    });\n  }\n\n  const value = dataRow[column.key];\n\n  switch (column.key) {\n    case 'id':\n      if (!defined(project)) {\n        // should never happen but just in case\n        return <Container>{getShortEventId(dataRow.id)}</Container>;\n      }\n\n      const flamegraphTarget = generateProfileDetailsRoute({\n        orgSlug: organization.slug,\n        projectSlug: project.slug,\n        profileId: dataRow.id,\n      });\n\n      return (\n        <Container>\n          <Link to={flamegraphTarget}>{getShortEventId(dataRow.id)}</Link>\n        </Container>\n      );\n    case 'project_id':\n      if (!defined(project)) {\n        // should never happen but just in case\n        return <Container>{t('n/a')}</Container>;\n      }\n\n      return (\n        <Container>\n          <ProjectBadge project={project} avatarSize={16} />\n        </Container>\n      );\n    case 'transaction_name':\n      if (!defined(project)) {\n        // should never happen but just in case\n        return <Container>{t('n/a')}</Container>;\n      }\n\n      const profileSummaryTarget = generateProfileSummaryRouteWithQuery({\n        location,\n        orgSlug: organization.slug,\n        projectSlug: project.slug,\n        transaction: dataRow.transaction_name,\n      });\n\n      return (\n        <Container>\n          <Link to={profileSummaryTarget}>{value}</Link>\n        </Container>\n      );\n    case 'version_name':\n      return (\n        <Container>\n          {dataRow.version_code ? t('%s (build %s)', value, dataRow.version_code) : value}\n        </Container>\n      );\n    case 'failed':\n      return (\n        <Container>\n          {value ? (\n            <IconClose size=\"sm\" color=\"red300\" isCircled />\n          ) : (\n            <IconCheckmark size=\"sm\" color=\"green300\" isCircled />\n          )}\n        </Container>\n      );\n    case 'timestamp':\n      return (\n        <Container>\n          <DateTime date={value * 1000} />\n        </Container>\n      );\n    case 'trace_duration_ms':\n      return (\n        <NumberContainer>\n          <PerformanceDuration milliseconds={value} abbreviation />\n        </NumberContainer>\n      );\n    default:\n      return <Container>{value}</Container>;\n  }\n}\n\ntype TableColumnKey = keyof Trace;\n\ntype NonTableColumnKey =\n  | 'version_code'\n  | 'device_locale'\n  | 'device_manufacturer'\n  | 'backtrace_available'\n  | 'error_code'\n  | 'error_code_name'\n  | 'error_description'\n  | 'span_annotations'\n  | 'spans'\n  | 'trace_annotations';\n\ntype TableColumn = GridColumnOrder<TableColumnKey>;\n\ntype TableDataRow = Omit<Record<TableColumnKey, any>, NonTableColumnKey> &\n  Partial<Record<TableColumnKey, any>>;\n\ntype TableColumnOrders = Omit<Record<TableColumnKey, TableColumn>, NonTableColumnKey>;\n\nconst DEFAULT_COLUMN_ORDER: TableColumnKey[] = [\n  'failed',\n  'id',\n  'project_id',\n  'transaction_name',\n  'version_name',\n  'timestamp',\n  'trace_duration_ms',\n  'device_model',\n  'device_classification',\n];\n\nconst COLUMNS: TableColumnOrders = {\n  id: {\n    key: 'id',\n    name: t('Profile ID'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  project_id: {\n    key: 'project_id',\n    name: t('Project'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  failed: {\n    key: 'failed',\n    name: t('Status'),\n    width: 14, // make this as small as possible\n  },\n  version_name: {\n    key: 'version_name',\n    name: t('Version'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  transaction_name: {\n    key: 'transaction_name',\n    name: t('Transaction Name'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  timestamp: {\n    key: 'timestamp',\n    name: t('Timestamp'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  trace_duration_ms: {\n    key: 'trace_duration_ms',\n    name: t('Duration'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  device_model: {\n    key: 'device_model',\n    name: t('Device Model'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  device_classification: {\n    key: 'device_classification',\n    name: t('Device Classification'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n  device_os_version: {\n    key: 'device_os_version',\n    name: t('Device OS Version'),\n    width: COL_WIDTH_UNDEFINED,\n  },\n};\n\nexport {ProfilesTable};\n","import {useMemo} from 'react';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport {SectionHeading} from 'sentry/components/charts/styles';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Pagination from 'sentry/components/pagination';\nimport {FunctionsTable} from 'sentry/components/profiling/functionsTable';\nimport {ProfilesTable} from 'sentry/components/profiling/profilesTable';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {PageFilters, Project} from 'sentry/types';\nimport {useFunctions} from 'sentry/utils/profiling/hooks/useFunctions';\nimport {useProfiles} from 'sentry/utils/profiling/hooks/useProfiles';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nconst PROFILES_COLUMN_ORDER = [\n  'failed',\n  'id',\n  'timestamp',\n  'version_name',\n  'device_model',\n  'device_classification',\n  'trace_duration_ms',\n] as const;\n\ninterface ProfileSummaryContentProps {\n  location: Location;\n  project: Project;\n  query: string;\n  transaction: string;\n  selection?: PageFilters;\n}\n\nfunction ProfileSummaryContent(props: ProfileSummaryContentProps) {\n  const cursor = useMemo(\n    () => decodeScalar(props.location.query.cursor),\n    [props.location.query.cursor]\n  );\n\n  const profiles = useProfiles({\n    cursor,\n    limit: 5,\n    query: props.query,\n    selection: props.selection,\n  });\n\n  const functions = useFunctions({\n    project: props.project,\n    query: props.query,\n    selection: props.selection,\n    transaction: props.transaction,\n  });\n\n  return (\n    <Layout.Main fullWidth>\n      <TableHeader>\n        <SectionHeading>{t('Recent Profiles')}</SectionHeading>\n        <StyledPagination\n          pageLinks={profiles.type === 'resolved' ? profiles.data.pageLinks : null}\n          size=\"xsmall\"\n        />\n      </TableHeader>\n      <ProfilesTable\n        error={profiles.type === 'errored' ? profiles.error : null}\n        isLoading={profiles.type === 'initial' || profiles.type === 'loading'}\n        traces={profiles.type === 'resolved' ? profiles.data.traces : []}\n        columnOrder={PROFILES_COLUMN_ORDER}\n      />\n      <FunctionsTable\n        error={functions.type === 'errored' ? functions.error : null}\n        functionCalls={functions.type === 'resolved' ? functions.data : []}\n        isLoading={functions.type === 'initial' || functions.type === 'loading'}\n        project={props.project}\n      />\n    </Layout.Main>\n  );\n}\n\nconst TableHeader = styled('div')`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: ${space(1)};\n`;\n\nconst StyledPagination = styled(Pagination)`\n  margin: 0 0 0 ${space(1)};\n`;\n\nexport {ProfileSummaryContent};\n","import {useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {Client} from 'sentry/api';\nimport {normalizeDateTimeParams} from 'sentry/components/organizations/pageFilters/parse';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, Project, RequestState} from 'sentry/types';\nimport {FunctionCall} from 'sentry/types/profiling/core';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ninterface UseFunctionsOptions {\n  project: Project;\n  query: string;\n  transaction: string;\n  selection?: PageFilters;\n}\n\nfunction useFunctions({\n  project,\n  query,\n  transaction,\n  selection,\n}: UseFunctionsOptions): RequestState<FunctionCall[]> {\n  const api = useApi();\n  const organization = useOrganization();\n\n  const [requestState, setRequestState] = useState<RequestState<FunctionCall[]>>({\n    type: 'initial',\n  });\n\n  useEffect(() => {\n    if (selection === undefined) {\n      return undefined;\n    }\n\n    setRequestState({type: 'loading'});\n\n    fetchFunctions(api, organization, {\n      projectSlug: project.slug,\n      query,\n      selection,\n      transaction,\n    })\n      .then(functions => {\n        setRequestState({\n          type: 'resolved',\n          data: functions.functions ?? [],\n        });\n      })\n      .catch(err => {\n        setRequestState({type: 'errored', error: t('Error: Unable to load functions')});\n        Sentry.captureException(err);\n      });\n\n    return () => api.clear();\n  }, [api, organization, project.slug, query, selection, transaction]);\n\n  return requestState;\n}\n\nfunction fetchFunctions(\n  api: Client,\n  organization: Organization,\n  {\n    projectSlug,\n    query,\n    selection,\n    transaction,\n  }: {\n    projectSlug: Project['slug'];\n    query: string;\n    selection: PageFilters;\n    transaction: string;\n  }\n) {\n  const conditions = new MutableSearch(query);\n  conditions.setFilterValues('transaction_name', [transaction]);\n\n  return api.requestPromise(\n    `/projects/${organization.slug}/${projectSlug}/profiling/functions/`,\n    {\n      method: 'GET',\n      includeAllArgs: false,\n      query: {\n        environment: selection.environments,\n        ...normalizeDateTimeParams(selection.datetime),\n        query: conditions.formatString(),\n      },\n    }\n  );\n}\nexport {useFunctions};\n","import {Fragment, useCallback, useMemo} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\nimport {Location} from 'history';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport IdBadge from 'sentry/components/idBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport NoProjectMessage from 'sentry/components/noProjectMessage';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport {Breadcrumb} from 'sentry/components/profiling/breadcrumb';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport SmartSearchBar, {SmartSearchBarProps} from 'sentry/components/smartSearchBar';\nimport {MAX_QUERY_LENGTH} from 'sentry/constants';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {PageFilters, Project} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {useProfileFilters} from 'sentry/utils/profiling/hooks/useProfileFilters';\nimport {decodeScalar} from 'sentry/utils/queryString';\nimport {MutableSearch} from 'sentry/utils/tokenizeSearch';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport {ProfileSummaryContent} from './content';\n\ninterface ProfileSummaryPageProps {\n  location: Location;\n  params: {\n    projectId?: Project['slug'];\n  };\n  selection?: PageFilters;\n}\n\nfunction ProfileSummaryPage(props: ProfileSummaryPageProps) {\n  const organization = useOrganization();\n  const {projects} = useProjects({\n    slugs: defined(props.params.projectId) ? [props.params.projectId] : [],\n  });\n\n  // Extract the project matching the provided project slug,\n  // if it doesn't exist, set this to null and handle it accordingly.\n  const project = projects.length === 1 ? projects[0] : null;\n\n  const transaction = decodeScalar(props.location.query.transaction);\n\n  const rawQuery = useMemo(\n    () => decodeScalar(props.location.query.query, ''),\n    [props.location.query.query]\n  );\n\n  const query = useMemo(() => {\n    const search = new MutableSearch(rawQuery);\n\n    if (defined(transaction)) {\n      search.setFilterValues('transaction_name', [transaction]);\n    }\n\n    return search.formatString();\n  }, [rawQuery, transaction]);\n\n  const filtersQuery = useMemo(() => {\n    // To avoid querying for the filters each time the query changes,\n    // do not pass the user query to get the filters.\n    const search = new MutableSearch('');\n\n    if (defined(transaction)) {\n      search.setFilterValues('transaction_name', [transaction]);\n    }\n\n    return search.formatString();\n  }, [transaction]);\n\n  const profileFilters = useProfileFilters({\n    query: filtersQuery,\n    selection: props.selection,\n  });\n\n  const handleSearch: SmartSearchBarProps['onSearch'] = useCallback(\n    (searchQuery: string) => {\n      browserHistory.push({\n        ...props.location,\n        query: {\n          ...props.location.query,\n          query: searchQuery || undefined,\n        },\n      });\n    },\n    [props.location]\n  );\n\n  return (\n    <SentryDocumentTitle\n      title={t('Profiling \\u2014 Profile Summary')}\n      orgSlug={organization.slug}\n    >\n      <PageFiltersContainer\n        lockedMessageSubject={t('profile')}\n        shouldForceProject={defined(project)}\n        forceProject={project}\n        specificProjectSlugs={defined(project) ? [project.slug] : []}\n        disableMultipleProjectSelection\n        showProjectSettingsLink\n        hideGlobalHeader\n      >\n        <NoProjectMessage organization={organization}>\n          {project && transaction && (\n            <Fragment>\n              <Layout.Header>\n                <Layout.HeaderContent>\n                  <Breadcrumb\n                    location={props.location}\n                    organization={organization}\n                    trails={[\n                      {type: 'landing'},\n                      {\n                        type: 'profile summary',\n                        payload: {\n                          projectSlug: project.slug,\n                          transaction,\n                        },\n                      },\n                    ]}\n                  />\n                  <Layout.Title>\n                    <Title>\n                      <IdBadge\n                        project={project}\n                        avatarSize={28}\n                        hideName\n                        avatarProps={{hasTooltip: true, tooltip: project.slug}}\n                      />\n                      {transaction}\n                    </Title>\n                  </Layout.Title>\n                </Layout.HeaderContent>\n              </Layout.Header>\n              <Layout.Body>\n                <Layout.Main fullWidth>\n                  <ActionBar>\n                    <PageFilterBar condensed>\n                      <EnvironmentPageFilter />\n                      <DatePageFilter alignDropdown=\"left\" />\n                    </PageFilterBar>\n                    <SmartSearchBar\n                      organization={organization}\n                      hasRecentSearches\n                      searchSource=\"profile_summary\"\n                      supportedTags={profileFilters}\n                      query={rawQuery}\n                      onSearch={handleSearch}\n                      maxQueryLength={MAX_QUERY_LENGTH}\n                    />\n                  </ActionBar>\n                  <ProfileSummaryContent\n                    location={props.location}\n                    project={project}\n                    selection={props.selection}\n                    transaction={transaction}\n                    query={query}\n                  />\n                </Layout.Main>\n              </Layout.Body>\n            </Fragment>\n          )}\n        </NoProjectMessage>\n      </PageFiltersContainer>\n    </SentryDocumentTitle>\n  );\n}\n\nconst Title = styled('div')`\n  display: flex;\n  gap: ${space(1)};\n`;\n\nconst ActionBar = styled('div')`\n  display: grid;\n  gap: ${space(2)};\n  grid-template-columns: min-content auto;\n  margin-bottom: ${space(2)};\n`;\n\nexport default withPageFilters(ProfileSummaryPage);\n"],"names":["SortLink","align","title","canSort","generateSortLink","onClick","direction","target","StyledNonLink","arrow","StyledIconArrow","size","StyledLink","to","props","forwardProps","omit","p","IconArrow","PerformanceDuration","normalizedSeconds","defined","nanoseconds","isNanoseconds","milliseconds","isMilliseconds","seconds","abbreviation","fixedDigits","Breadcrumb","location","organization","trails","crumbs","useMemo","map","trail","type","generateProfilingRouteWithQuery","orgSlug","slug","label","t","preservePageFilters","generateProfileSummaryRouteWithQuery","projectSlug","payload","transaction","generateProfileFlamegraphRouteWithQuery","profileId","Error","JSON","stringify","trailToCrumb","StyledBreadcrumbs","Breadcrumbs","useProfileFilters","query","selection","api","useApi","useOrganization","profileFilters","setProfileFilters","useState","useEffect","requestPromise","method","project","projects","environment","environments","normalizeDateTimeParams","datetime","fetchProfileFilters","then","response","withPredefinedFilters","reduce","filters","tag","key","predefined","clear","useProfiles","cursor","limit","requestState","setRequestState","includeAllArgs","per_page","fetchTraces","traces","data","pageLinks","getResponseHeader","catch","err","error","Sentry","generateProfileDetailsRoute","pathname","generateProfilingRoute","generateProfileSummaryRoute","generateProfileFlamegraphRoute","generateProfileDetailsRouteWithQuery","renderTableHead","rightAlignedColumns","column","_columnIndex","has","name","undefined","useLocation","useRouteContext","ArrayLinks","items","expanded","setExpanded","ArrayContainer","length","LinkedItem","item","slice","value","ButtonContainer","ArrayItem","Link","theme","overflowEllipsis","blue300","space","FunctionsTable","offset","setOffset","allFunctions","functionCalls","functionCall","symbol","image","p50Duration","duration_ns","p50","p75Duration","p75","p90Duration","p90","p95Duration","p95","p99Duration","p99","mainThreadPercent","main_thread_percent","p50Frequency","frequency","p75Frequency","p90Frequency","p95Frequency","p99Frequency","profileIdToThreadId","Object","entries","profile_id_to_thread_id","threadId","getShortEventId","tid","toString","functions","Fragment","TableHeader","merged","icon","disabled","isLoading","columnOrder","COLUMN_ORDER","COLUMNS","columnSortBy","grid","renderHeadCell","RIGHT_ALIGNED_COLUMNS","renderBodyCell","renderFunctionsTableCell","Set","dataRow","rowIndex","columnIndex","ProfilingFunctionsTableCell","formatPercentage","width","COL_WIDTH_UNDEFINED","REQUIRE_PROJECT_COLUMNS","ProfilesTable","DEFAULT_COLUMN_ORDER","renderProfilesTableCell","ProfilesTableCell","useProjects","find","proj","id","project_id","scope","setFingerprint","setTag","flamegraphTarget","avatarSize","profileSummaryTarget","transaction_name","version_code","color","isCircled","date","failed","version_name","timestamp","trace_duration_ms","device_model","device_classification","device_os_version","PROFILES_COLUMN_ORDER","ProfileSummaryContent","decodeScalar","profiles","conditions","MutableSearch","setFilterValues","formatString","fetchFunctions","useFunctions","fullWidth","StyledPagination","Pagination","ProfileSummaryPage","slugs","params","projectId","rawQuery","search","filtersQuery","handleSearch","useCallback","searchQuery","browserHistory","lockedMessageSubject","shouldForceProject","forceProject","specificProjectSlugs","disableMultipleProjectSelection","showProjectSettingsLink","hideGlobalHeader","Title","hideName","avatarProps","hasTooltip","tooltip","ActionBar","condensed","alignDropdown","hasRecentSearches","searchSource","supportedTags","onSearch","maxQueryLength","MAX_QUERY_LENGTH","withPageFilters"],"sourceRoot":""}