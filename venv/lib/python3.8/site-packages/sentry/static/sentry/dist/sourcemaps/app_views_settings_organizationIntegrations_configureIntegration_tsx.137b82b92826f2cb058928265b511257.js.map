{"version":3,"file":"chunks/app_views_settings_organizationIntegrations_configureIntegration_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/actions/menuItemActionLink.tsx","webpack:///./app/stores/settingsBreadcrumbStore.tsx","webpack:///./app/views/organizationIntegrations/addIntegration.tsx","webpack:///./app/views/organizationIntegrations/integrationItem.tsx","webpack:///./app/views/organizationIntegrations/integrationAlertRules.tsx","webpack:///./app/components/repositoryProjectPathConfigForm.tsx","webpack:///./app/components/repositoryProjectPathConfigRow.tsx","webpack:///./app/views/organizationIntegrations/integrationCodeMappings.tsx","webpack:///./app/components/integrationExternalMappingForm.tsx","webpack:///./app/components/integrationExternalMappings.tsx","webpack:///./app/views/organizationIntegrations/integrationExternalTeamMappings.tsx","webpack:///./app/views/organizationIntegrations/integrationExternalUserMappings.tsx","webpack:///./app/views/organizationIntegrations/integrationMainSettings.tsx","webpack:///./app/views/organizationIntegrations/integrationRepos.tsx","webpack:///./app/views/organizationIntegrations/integrationServerlessRow.tsx","webpack:///./app/views/organizationIntegrations/integrationServerlessFunctions.tsx","webpack:///./app/views/settings/components/settingsBreadcrumb/breadcrumbTitle.tsx","webpack:///./app/views/settings/organizationIntegrations/configureIntegration.tsx"],"sourcesContent":["import {createActions} from 'reflux';\n\nconst RepositoryActions = createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n\nexport default RepositoryActions;\n","import styled from '@emotion/styled';\n\nimport ActionLink from 'sentry/components/actions/actionLink';\nimport MenuItem from 'sentry/components/menuItem';\n\nfunction MenuItemActionLink({\n  className,\n  ...props\n}: React.ComponentProps<typeof ActionLink>) {\n  return (\n    <MenuItem noAnchor withBorder disabled={props.disabled} className={className}>\n      <InnerActionLink {...props} />\n    </MenuItem>\n  );\n}\nconst InnerActionLink = styled(ActionLink)`\n  color: ${p => p.theme.textColor};\n  ${p => p.theme.overflowEllipsis}\n  &:hover {\n    color: ${p => p.theme.textColor};\n  }\n\n  .dropdown-menu > li > &,\n  .dropdown-menu > span > li > & {\n    &.disabled:hover {\n      background: ${p => p.theme.background};\n    }\n  }\n`;\n\nexport default MenuItemActionLink;\n","import {PlainRoute} from 'react-router';\nimport {createStore} from 'reflux';\n\nimport getRouteStringFromRoutes from 'sentry/utils/getRouteStringFromRoutes';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\nimport {CommonStoreDefinition} from './types';\n\ntype UpdateData = {\n  routes: PlainRoute<any>[];\n  title: string;\n};\n\ntype State = {\n  pathMap: Record<string, string>;\n};\n\ninterface SettingsBreadcrumbStoreDefinition extends CommonStoreDefinition<State> {\n  init(): void;\n  reset(): void;\n  trimMappings(routes: PlainRoute<any>[]): void;\n  updateRouteMap(update: UpdateData): void;\n}\n\nconst storeConfig: SettingsBreadcrumbStoreDefinition = {\n  pathMap: {},\n  unsubscribeListeners: [],\n\n  init() {\n    this.reset();\n  },\n\n  reset() {\n    this.pathMap = {};\n  },\n\n  getState() {\n    return {pathMap: this.pathMap};\n  },\n\n  get() {\n    return this.pathMap;\n  },\n\n  updateRouteMap({routes, title}) {\n    this.pathMap[getRouteStringFromRoutes(routes)] = title;\n    this.trigger(this.pathMap);\n  },\n\n  trimMappings(routes) {\n    const routePath = getRouteStringFromRoutes(routes);\n    for (const fullPath in this.pathMap) {\n      if (!routePath.startsWith(fullPath)) {\n        delete this.pathMap[fullPath];\n      }\n    }\n    this.trigger(this.pathMap);\n  },\n};\n\nconst SettingsBreadcrumbStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default SettingsBreadcrumbStore;\n","import {Component} from 'react';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  children: (\n    openDialog: (urlParams?: {[key: string]: string}) => void\n  ) => React.ReactNode;\n  onInstall: (data: IntegrationWithConfig) => void;\n  organization: Organization;\n  provider: IntegrationProvider;\n  account?: string; // for analytics\n  analyticsParams?: {\n    already_installed: boolean;\n    view:\n      | 'integrations_directory_integration_detail'\n      | 'integrations_directory'\n      | 'onboarding'\n      | 'project_creation';\n  };\n  modalParams?: {[key: string]: string};\n};\n\nexport default class AddIntegration extends Component<Props> {\n  componentDidMount() {\n    window.addEventListener('message', this.didReceiveMessage);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('message', this.didReceiveMessage);\n    this.dialog && this.dialog.close();\n  }\n\n  dialog: Window | null = null;\n\n  computeCenteredWindow(width: number, height: number) {\n    // Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen\n    const screenLeft =\n      window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n\n    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n    const innerWidth = window.innerWidth\n      ? window.innerWidth\n      : document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n\n    const innerHeight = window.innerHeight\n      ? window.innerHeight\n      : document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n\n    const left = innerWidth / 2 - width / 2 + screenLeft;\n    const top = innerHeight / 2 - height / 2 + screenTop;\n\n    return {left, top};\n  }\n\n  openDialog = (urlParams?: {[key: string]: string}) => {\n    const {account, analyticsParams, modalParams, organization, provider} = this.props;\n\n    trackIntegrationAnalytics('integrations.installation_start', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    const name = 'sentryAddIntegration';\n    const {url, width, height} = provider.setupDialog;\n    const {left, top} = this.computeCenteredWindow(width, height);\n\n    let query: {[key: string]: string} = {...urlParams};\n\n    if (account) {\n      query.account = account;\n    }\n\n    if (modalParams) {\n      query = {...query, ...modalParams};\n    }\n\n    const installUrl = `${url}?${qs.stringify(query)}`;\n    const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;\n\n    this.dialog = window.open(installUrl, name, opts);\n    this.dialog && this.dialog.focus();\n  };\n\n  didReceiveMessage = (message: MessageEvent) => {\n    const {analyticsParams, onInstall, organization, provider} = this.props;\n\n    if (message.origin !== document.location.origin) {\n      return;\n    }\n\n    if (message.source !== this.dialog) {\n      return;\n    }\n\n    const {success, data} = message.data;\n    this.dialog = null;\n\n    if (!success) {\n      addErrorMessage(data.error);\n      return;\n    }\n\n    if (!data) {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.installation_complete', {\n      integration: provider.key,\n      integration_type: 'first_party',\n      organization,\n      ...analyticsParams,\n    });\n    addSuccessMessage(t('%s added', provider.name));\n    onInstall(data);\n  };\n\n  render() {\n    const {children} = this.props;\n\n    return children(this.openDialog);\n  }\n}\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Integration} from 'sentry/types';\nimport IntegrationIcon from 'sentry/views/organizationIntegrations/integrationIcon';\n\ntype DefaultProps = {\n  compact: boolean;\n};\n\ntype Props = DefaultProps & {\n  integration: Integration;\n};\nexport default class IntegrationItem extends Component<Props> {\n  static defaultProps: DefaultProps = {\n    compact: false,\n  };\n\n  render() {\n    const {integration, compact} = this.props;\n    return (\n      <Flex>\n        <div>\n          <IntegrationIcon size={compact ? 22 : 32} integration={integration} />\n        </div>\n        <Labels compact={compact}>\n          <IntegrationName data-test-id=\"integration-name\">\n            {integration.name}\n          </IntegrationName>\n          <DomainName compact={compact}>{integration.domainName}</DomainName>\n        </Labels>\n      </Flex>\n    );\n  }\n}\n\nconst Flex = styled('div')`\n  display: flex;\n  align-items: center;\n`;\ntype StyledProps = Pick<Props, 'compact'>;\nconst Labels = styled('div')<StyledProps>`\n  box-sizing: border-box;\n  display: flex;\n  ${p => (p.compact ? 'align-items: center;' : '')};\n  flex-direction: ${p => (p.compact ? 'row' : 'column')};\n  padding-left: ${space(1)};\n  min-width: 0;\n  justify-content: center;\n`;\n\nconst IntegrationName = styled('div')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  font-weight: bold;\n`;\n\n// Not using the overflowEllipsis style import here\n// as it sets width 100% which causes layout issues in the\n// integration list.\nconst DomainName = styled('div')<StyledProps>`\n  color: ${p => p.theme.subText};\n  margin-left: ${p => (p.compact ? space(1) : 'inherit')};\n  margin-top: ${p => (!p.compact ? 0 : 'inherit')};\n  font-size: ${p => p.theme.fontSizeSmall};\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = {\n  organization: Organization;\n  projects: Project[];\n};\n\nconst IntegrationAlertRules = ({projects, organization}: Props) => (\n  <Panel>\n    <PanelHeader>{t('Project Configuration')}</PanelHeader>\n    <PanelBody>\n      {projects.length === 0 && (\n        <EmptyMessage size=\"large\">\n          {t('You have no projects to add Alert Rules to')}\n        </EmptyMessage>\n      )}\n      {projects.map(project => (\n        <ProjectItem key={project.slug}>\n          <ProjectBadge project={project} avatarSize={16} />\n          <Button\n            to={`/organizations/${organization.slug}/alerts/${project.slug}/wizard/`}\n            size=\"xsmall\"\n          >\n            {t('Add Alert Rule')}\n          </Button>\n        </ProjectItem>\n      ))}\n    </PanelBody>\n  </Panel>\n);\n\nconst ProjectItem = styled(PanelItem)`\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport default withOrganization(withProjects(IntegrationAlertRules));\n","import {Component} from 'react';\nimport pick from 'lodash/pick';\n\nimport {FieldFromConfig} from 'sentry/components/forms';\nimport Form from 'sentry/components/forms/form';\nimport {Field} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {\n  Integration,\n  Organization,\n  Project,\n  Repository,\n  RepositoryProjectPathConfig,\n} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\ntype Props = {\n  integration: Integration;\n  onCancel: Form['props']['onCancel'];\n  onSubmitSuccess: Form['props']['onSubmitSuccess'];\n  organization: Organization;\n  projects: Project[];\n  repos: Repository[];\n  existingConfig?: RepositoryProjectPathConfig;\n};\n\nexport default class RepositoryProjectPathConfigForm extends Component<Props> {\n  get initialData() {\n    const {existingConfig, integration} = this.props;\n    return {\n      defaultBranch: 'master',\n      stackRoot: '',\n      sourceRoot: '',\n      repositoryId: existingConfig?.repoId,\n      integrationId: integration.id,\n      ...pick(existingConfig, ['projectId', 'defaultBranch', 'stackRoot', 'sourceRoot']),\n    };\n  }\n\n  get formFields(): Field[] {\n    const {projects, repos} = this.props;\n    const repoChoices = repos.map(({name, id}) => ({value: id, label: name}));\n    return [\n      {\n        name: 'projectId',\n        type: 'sentry_project_selector',\n        required: true,\n        label: t('Project'),\n        projects,\n      },\n      {\n        name: 'repositoryId',\n        type: 'select',\n        required: true,\n        label: t('Repo'),\n        placeholder: t('Choose repo'),\n        options: repoChoices,\n      },\n      {\n        name: 'defaultBranch',\n        type: 'string',\n        required: true,\n        label: t('Branch'),\n        placeholder: t('Type your branch'),\n        showHelpInTooltip: true,\n        help: t(\n          'If an event does not have a release tied to a commit, we will use this branch when linking to your source code.'\n        ),\n      },\n      {\n        name: 'stackRoot',\n        type: 'string',\n        required: false,\n        label: t('Stack Trace Root'),\n        placeholder: t('Type root path of your stack traces'),\n        showHelpInTooltip: true,\n        help: t(\n          'Any stack trace starting with this path will be mapped with this rule. An empty string will match all paths.'\n        ),\n      },\n      {\n        name: 'sourceRoot',\n        type: 'string',\n        required: false,\n        label: t('Source Code Root'),\n        placeholder: t('Type root path of your source code, e.g. `src/`.'),\n        showHelpInTooltip: true,\n        help: t(\n          'When a rule matches, the stack trace root is replaced with this path to get the path in your repository. Leaving this empty means replacing the stack trace root with an empty string.'\n        ),\n      },\n    ];\n  }\n\n  handlePreSubmit() {\n    trackIntegrationAnalytics('integrations.stacktrace_submit_config', {\n      setup_type: 'manual',\n      view: 'integration_configuration_detail',\n      provider: this.props.integration.provider.key,\n      organization: this.props.organization,\n    });\n  }\n\n  render() {\n    const {organization, onSubmitSuccess, onCancel, existingConfig} = this.props;\n\n    // endpoint changes if we are making a new row or updating an existing one\n    const baseEndpoint = `/organizations/${organization.slug}/code-mappings/`;\n    const endpoint = existingConfig\n      ? `${baseEndpoint}${existingConfig.id}/`\n      : baseEndpoint;\n    const apiMethod = existingConfig ? 'PUT' : 'POST';\n\n    return (\n      <Form\n        onSubmitSuccess={onSubmitSuccess}\n        onPreSubmit={() => this.handlePreSubmit()}\n        initialData={this.initialData}\n        apiEndpoint={endpoint}\n        apiMethod={apiMethod}\n        onCancel={onCancel}\n      >\n        {this.formFields.map(field => (\n          <FieldFromConfig\n            key={field.name}\n            field={field}\n            inline={false}\n            stacked\n            flexibleControlStateSize\n          />\n        ))}\n      </Form>\n    );\n  }\n}\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Access from 'sentry/components/acl/access';\nimport Button from 'sentry/components/button';\nimport Confirm from 'sentry/components/confirm';\nimport IdBadge from 'sentry/components/idBadge';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconDelete, IconEdit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Project, RepositoryProjectPathConfig} from 'sentry/types';\n\ntype Props = {\n  onDelete: (pathConfig: RepositoryProjectPathConfig) => void;\n  onEdit: (pathConfig: RepositoryProjectPathConfig) => void;\n  pathConfig: RepositoryProjectPathConfig;\n  project: Project;\n};\n\nexport default class RepositoryProjectPathConfigRow extends Component<Props> {\n  render() {\n    const {pathConfig, project, onEdit, onDelete} = this.props;\n\n    return (\n      <Access access={['org:integrations']}>\n        {({hasAccess}) => (\n          <Fragment>\n            <NameRepoColumn>\n              <ProjectRepoHolder>\n                <RepoName>{pathConfig.repoName}</RepoName>\n                <ProjectAndBranch>\n                  <IdBadge\n                    project={project}\n                    avatarSize={14}\n                    displayName={project.slug}\n                    avatarProps={{consistentWidth: true}}\n                  />\n                  <BranchWrapper>&nbsp;|&nbsp;{pathConfig.defaultBranch}</BranchWrapper>\n                </ProjectAndBranch>\n              </ProjectRepoHolder>\n            </NameRepoColumn>\n            <OutputPathColumn>{pathConfig.sourceRoot}</OutputPathColumn>\n            <InputPathColumn>{pathConfig.stackRoot}</InputPathColumn>\n            <ButtonColumn>\n              <Tooltip\n                title={t(\n                  'You must be an organization owner, manager or admin to edit or remove a code mapping.'\n                )}\n                disabled={hasAccess}\n              >\n                <StyledButton\n                  size=\"small\"\n                  icon={<IconEdit size=\"sm\" />}\n                  aria-label={t('edit')}\n                  disabled={!hasAccess}\n                  onClick={() => onEdit(pathConfig)}\n                />\n                <Confirm\n                  disabled={!hasAccess}\n                  onConfirm={() => onDelete(pathConfig)}\n                  message={t('Are you sure you want to remove this code mapping?')}\n                >\n                  <StyledButton\n                    size=\"small\"\n                    icon={<IconDelete size=\"sm\" />}\n                    aria-label={t('delete')}\n                    disabled={!hasAccess}\n                  />\n                </Confirm>\n              </Tooltip>\n            </ButtonColumn>\n          </Fragment>\n        )}\n      </Access>\n    );\n  }\n}\n\nconst ProjectRepoHolder = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst RepoName = styled(`span`)`\n  padding-bottom: ${space(1)};\n`;\n\nconst StyledButton = styled(Button)`\n  margin: ${space(0.5)};\n`;\n\nconst ProjectAndBranch = styled('div')`\n  display: flex;\n  flex-direction: row;\n  color: ${p => p.theme.gray300};\n`;\n\n// match the line height of the badge\nconst BranchWrapper = styled('div')`\n  line-height: 1.2;\n`;\n\n// Columns below\nconst Column = styled('span')`\n  overflow: hidden;\n  overflow-wrap: break-word;\n`;\n\nexport const NameRepoColumn = styled(Column)`\n  grid-area: name-repo;\n`;\n\nexport const OutputPathColumn = styled(Column)`\n  grid-area: output-path;\n`;\n\nexport const InputPathColumn = styled(Column)`\n  grid-area: input-path;\n`;\n\nexport const ButtonColumn = styled(Column)`\n  grid-area: button;\n  text-align: right;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport sortBy from 'lodash/sortBy';\nimport * as qs from 'query-string';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport Access from 'sentry/components/acl/access';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport RepositoryProjectPathConfigForm from 'sentry/components/repositoryProjectPathConfigForm';\nimport RepositoryProjectPathConfigRow, {\n  ButtonColumn,\n  InputPathColumn,\n  NameRepoColumn,\n  OutputPathColumn,\n} from 'sentry/components/repositoryProjectPathConfigRow';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconAdd} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {\n  Integration,\n  Organization,\n  Project,\n  Repository,\n  RepositoryProjectPathConfig,\n} from 'sentry/types';\nimport {\n  getIntegrationIcon,\n  trackIntegrationAnalytics,\n} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport withProjects from 'sentry/utils/withProjects';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\n\ntype Props = AsyncComponent['props'] & {\n  integration: Integration;\n  organization: Organization;\n  projects: Project[];\n};\n\ntype State = AsyncComponent['state'] & {\n  pathConfigs: RepositoryProjectPathConfig[];\n  repos: Repository[];\n};\n\nclass IntegrationCodeMappings extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      pathConfigs: [],\n      repos: [],\n    };\n  }\n\n  get integrationId() {\n    return this.props.integration.id;\n  }\n\n  get pathConfigs() {\n    // we want to sort by the project slug and the\n    // id of the config\n    return sortBy(this.state.pathConfigs, [\n      ({projectSlug}) => projectSlug,\n      ({id}) => parseInt(id, 10),\n    ]);\n  }\n\n  get repos() {\n    // endpoint doesn't support loading only the repos for this integration\n    // but most people only have one source code repo so this should be fine\n    return this.state.repos.filter(repo => repo.integrationId === this.integrationId);\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const orgSlug = this.props.organization.slug;\n    return [\n      [\n        'pathConfigs',\n        `/organizations/${orgSlug}/code-mappings/`,\n        {query: {integrationId: this.integrationId}},\n      ],\n      ['repos', `/organizations/${orgSlug}/repos/`, {query: {status: 'active'}}],\n    ];\n  }\n\n  getMatchingProject(pathConfig: RepositoryProjectPathConfig) {\n    return this.props.projects.find(project => project.id === pathConfig.projectId);\n  }\n\n  componentDidMount() {\n    const {referrer} = qs.parse(window.location.search) || {};\n    // We don't start new session if the user was coming from choosing\n    // the manual setup option flow from the issue details page\n    const startSession = referrer === 'stacktrace-issue-details' ? false : true;\n    trackIntegrationAnalytics(\n      'integrations.code_mappings_viewed',\n      {\n        integration: this.props.integration.provider.key,\n        integration_type: 'first_party',\n        organization: this.props.organization,\n      },\n      {startSession}\n    );\n  }\n\n  handleDelete = async (pathConfig: RepositoryProjectPathConfig) => {\n    const {organization} = this.props;\n    const endpoint = `/organizations/${organization.slug}/code-mappings/${pathConfig.id}/`;\n    try {\n      await this.api.requestPromise(endpoint, {\n        method: 'DELETE',\n      });\n      // remove config and update state\n      let {pathConfigs} = this.state;\n      pathConfigs = pathConfigs.filter(config => config.id !== pathConfig.id);\n      this.setState({pathConfigs});\n      addSuccessMessage(t('Deletion successful'));\n    } catch (err) {\n      addErrorMessage(\n        tct('[status]: [text]', {\n          status: err.statusText,\n          text: err.responseText,\n        })\n      );\n    }\n  };\n\n  handleSubmitSuccess = (pathConfig: RepositoryProjectPathConfig) => {\n    trackIntegrationAnalytics('integrations.stacktrace_complete_setup', {\n      setup_type: 'manual',\n      view: 'integration_configuration_detail',\n      provider: this.props.integration.provider.key,\n      organization: this.props.organization,\n    });\n    let {pathConfigs} = this.state;\n    pathConfigs = pathConfigs.filter(config => config.id !== pathConfig.id);\n    // our getter handles the order of the configs\n    pathConfigs = pathConfigs.concat([pathConfig]);\n    this.setState({pathConfigs});\n    this.setState({pathConfig: undefined});\n  };\n\n  openModal = (pathConfig?: RepositoryProjectPathConfig) => {\n    const {organization, projects, integration} = this.props;\n    trackIntegrationAnalytics('integrations.stacktrace_start_setup', {\n      setup_type: 'manual',\n      view: 'integration_configuration_detail',\n      provider: this.props.integration.provider.key,\n      organization: this.props.organization,\n    });\n\n    openModal(({Body, Header, closeModal}) => (\n      <Fragment>\n        <Header closeButton>{t('Configure code path mapping')}</Header>\n        <Body>\n          <RepositoryProjectPathConfigForm\n            organization={organization}\n            integration={integration}\n            projects={projects}\n            repos={this.repos}\n            onSubmitSuccess={config => {\n              this.handleSubmitSuccess(config);\n              closeModal();\n            }}\n            existingConfig={pathConfig}\n            onCancel={closeModal}\n          />\n        </Body>\n      </Fragment>\n    ));\n  };\n\n  renderBody() {\n    const pathConfigs = this.pathConfigs;\n    const {integration} = this.props;\n\n    return (\n      <Fragment>\n        <TextBlock>\n          {tct(\n            `Code Mappings are used to map stack trace file paths to source code file paths. These mappings are the basis for features like Stack Trace Linking. To learn more, [link: read the docs].`,\n            {\n              link: (\n                <ExternalLink href=\"https://docs.sentry.io/product/integrations/source-code-mgmt/gitlab/#stack-trace-linking\" />\n              ),\n            }\n          )}\n        </TextBlock>\n\n        <Panel>\n          <PanelHeader disablePadding hasButtons>\n            <HeaderLayout>\n              <NameRepoColumn>{t('Code Mappings')}</NameRepoColumn>\n              <InputPathColumn>{t('Stack Trace Root')}</InputPathColumn>\n              <OutputPathColumn>{t('Source Code Root')}</OutputPathColumn>\n\n              <Access access={['org:integrations']}>\n                {({hasAccess}) => (\n                  <ButtonColumn>\n                    <Tooltip\n                      title={t(\n                        'You must be an organization owner, manager or admin to edit or remove a code mapping.'\n                      )}\n                      disabled={hasAccess}\n                    >\n                      <AddButton\n                        data-test-id=\"add-mapping-button\"\n                        onClick={() => this.openModal()}\n                        size=\"xsmall\"\n                        icon={<IconAdd size=\"xs\" isCircled />}\n                        disabled={!hasAccess}\n                      >\n                        {t('Add Code Mapping')}\n                      </AddButton>\n                    </Tooltip>\n                  </ButtonColumn>\n                )}\n              </Access>\n            </HeaderLayout>\n          </PanelHeader>\n          <PanelBody>\n            {pathConfigs.length === 0 && (\n              <EmptyMessage\n                icon={getIntegrationIcon(integration.provider.key, 'lg')}\n                action={\n                  <Button\n                    href={`https://docs.sentry.io/product/integrations/${integration.provider.key}/#stack-trace-linking`}\n                    size=\"small\"\n                    onClick={() => {\n                      trackIntegrationAnalytics('integrations.stacktrace_docs_clicked', {\n                        view: 'integration_configuration_detail',\n                        provider: this.props.integration.provider.key,\n                        organization: this.props.organization,\n                      });\n                    }}\n                  >\n                    View Documentation\n                  </Button>\n                }\n              >\n                Set up stack trace linking by adding a code mapping.\n              </EmptyMessage>\n            )}\n            {pathConfigs\n              .map(pathConfig => {\n                const project = this.getMatchingProject(pathConfig);\n                // this should never happen since our pathConfig would be deleted\n                // if project was deleted\n                if (!project) {\n                  return null;\n                }\n                return (\n                  <ConfigPanelItem key={pathConfig.id}>\n                    <Layout>\n                      <RepositoryProjectPathConfigRow\n                        pathConfig={pathConfig}\n                        project={project}\n                        onEdit={this.openModal}\n                        onDelete={this.handleDelete}\n                      />\n                    </Layout>\n                  </ConfigPanelItem>\n                );\n              })\n              .filter(item => !!item)}\n          </PanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default withProjects(withOrganization(IntegrationCodeMappings));\n\nconst AddButton = styled(Button)``;\n\nconst Layout = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n  width: 100%;\n  align-items: center;\n  grid-template-columns: 4.5fr 2.5fr 2.5fr 1.6fr;\n  grid-template-areas: 'name-repo input-path output-path button';\n`;\n\nconst HeaderLayout = styled(Layout)`\n  align-items: center;\n  margin: 0;\n  margin-left: ${space(2)};\n`;\n\nconst ConfigPanelItem = styled(PanelItem)``;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport {FieldFromConfig} from 'sentry/components/forms';\nimport Form from 'sentry/components/forms/form';\nimport FormModel from 'sentry/components/forms/model';\nimport {SelectAsyncControlProps} from 'sentry/components/forms/selectAsyncControl';\nimport {Field} from 'sentry/components/forms/type';\nimport {t, tct} from 'sentry/locale';\nimport {\n  ExternalActorMapping,\n  ExternalActorMappingOrSuggestion,\n  Integration,\n} from 'sentry/types';\nimport {\n  getExternalActorEndpointDetails,\n  isExternalActorMapping,\n  sentryNameToOption,\n} from 'sentry/utils/integrationUtil';\n\ntype Props = Pick<Form['props'], 'onCancel' | 'onSubmitSuccess' | 'onSubmitError'> &\n  Pick<SelectAsyncControlProps, 'defaultOptions'> & {\n    dataEndpoint: string;\n    getBaseFormEndpoint: (mapping?: ExternalActorMappingOrSuggestion) => string;\n    integration: Integration;\n    sentryNamesMapper: (v: any) => {id: string; name: string}[];\n    type: 'user' | 'team';\n    isInline?: boolean;\n    mapping?: ExternalActorMappingOrSuggestion;\n    mappingKey?: string;\n    onResults?: (data: any, mappingKey?: string) => void;\n  };\n\nexport default class IntegrationExternalMappingForm extends Component<Props> {\n  model = new FormModel();\n\n  get initialData() {\n    const {integration, mapping} = this.props;\n    return {\n      provider: integration.provider.key,\n      integrationId: integration.id,\n      ...mapping,\n    };\n  }\n\n  getDefaultOptions(mapping?: ExternalActorMappingOrSuggestion) {\n    const {defaultOptions, type} = this.props;\n    if (typeof defaultOptions !== 'object') {\n      return defaultOptions;\n    }\n    const options = [...(defaultOptions ?? [])];\n    if (!mapping || !isExternalActorMapping(mapping) || !mapping.sentryName) {\n      return options;\n    }\n    // For organizations with >100 entries, we want to make sure their\n    // saved mapping gets populated in the results if it wouldn't have\n    // been in the initial 100 API results, which is why we add it here\n    const mappingId = mapping[`${type}Id`];\n    const isMappingInOptionsAlready = options.some(\n      ({value}) => mappingId && value === mappingId\n    );\n    return isMappingInOptionsAlready\n      ? options\n      : [{value: mappingId, label: mapping.sentryName}, ...options];\n  }\n\n  get formFields(): Field[] {\n    const {\n      dataEndpoint,\n      isInline,\n      mapping,\n      mappingKey,\n      onResults,\n      sentryNamesMapper,\n      type,\n    } = this.props;\n    const fields: Field[] = [\n      {\n        name: `${type}Id`,\n        type: 'select_async',\n        required: true,\n        label: isInline ? undefined : tct('Sentry [type]', {type: capitalize(type)}),\n        placeholder: t(`Select Sentry ${capitalize(type)}`),\n        url: dataEndpoint,\n        defaultOptions: this.getDefaultOptions(mapping),\n        onResults: result => {\n          onResults?.(result, isInline ? mapping?.externalName : mappingKey);\n          return sentryNamesMapper(result).map(sentryNameToOption);\n        },\n      },\n    ];\n    // We only add the field for externalName if it's the full (not inline) form\n    if (!isInline) {\n      fields.unshift({\n        name: 'externalName',\n        type: 'string',\n        required: true,\n        label: isInline ? undefined : tct('External [type]', {type: capitalize(type)}),\n        placeholder: type === 'user' ? t('@username') : t('@org/teamname'),\n      });\n    }\n    return fields;\n  }\n\n  get extraFormFieldProps() {\n    const {isInline} = this.props;\n    return isInline\n      ? {\n          // We need to submit the entire model since it could be a new one or an update\n          getData: () => this.model.getData(),\n          // We need to update the model onBlur for inline forms since the model's 'onPreSubmit' hook\n          // does NOT run when using `saveOnBlur`.\n          onBlur: () => this.updateModel(),\n        }\n      : {flexibleControlStateSize: true};\n  }\n\n  // This function is necessary since the endpoint we submit to changes depending on the value selected\n  updateModel() {\n    const {getBaseFormEndpoint, mapping} = this.props;\n    const updatedMapping: ExternalActorMapping = {\n      ...mapping,\n      ...(this.model.getData() as ExternalActorMapping),\n    };\n    if (updatedMapping) {\n      const endpointDetails = getExternalActorEndpointDetails(\n        getBaseFormEndpoint(updatedMapping),\n        updatedMapping\n      );\n      this.model.setFormOptions({...this.model.options, ...endpointDetails});\n    }\n  }\n\n  render() {\n    const {isInline, onCancel, onSubmitError, onSubmitSuccess} = this.props;\n    return (\n      <FormWrapper>\n        <Form\n          requireChanges\n          model={this.model}\n          initialData={this.initialData}\n          onCancel={onCancel}\n          onSubmitSuccess={onSubmitSuccess}\n          onSubmitError={onSubmitError}\n          saveOnBlur={isInline}\n          allowUndo={isInline}\n          onPreSubmit={() => this.updateModel()}\n        >\n          {this.formFields.map(field => (\n            <FieldFromConfig\n              key={field.name}\n              field={field}\n              inline={false}\n              stacked\n              {...this.extraFormFieldProps}\n            />\n          ))}\n        </Form>\n      </FormWrapper>\n    );\n  }\n}\n\n// Prevents errors from appearing off the modal\nconst FormWrapper = styled('div')`\n  position: relative;\n`;\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport capitalize from 'lodash/capitalize';\n\nimport Access from 'sentry/components/acl/access';\nimport MenuItemActionLink from 'sentry/components/actions/menuItemActionLink';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport DropdownLink from 'sentry/components/dropdownLink';\nimport IntegrationExternalMappingForm from 'sentry/components/integrationExternalMappingForm';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconAdd, IconArrow, IconEllipsis, IconQuestion} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport PluginIcon from 'sentry/plugins/components/pluginIcon';\nimport space from 'sentry/styles/space';\nimport {\n  ExternalActorMapping,\n  ExternalActorMappingOrSuggestion,\n  ExternalActorSuggestion,\n  Integration,\n  Organization,\n} from 'sentry/types';\nimport {getIntegrationIcon, isExternalActorMapping} from 'sentry/utils/integrationUtil';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype CodeOwnersAssociationMappings = {\n  [projectSlug: string]: {\n    associations: {\n      [externalName: string]: string;\n    };\n    errors: {\n      [errorKey: string]: string;\n    };\n  };\n};\n\ntype Props = AsyncComponent['props'] &\n  WithRouterProps &\n  Pick<\n    IntegrationExternalMappingForm['props'],\n    | 'dataEndpoint'\n    | 'getBaseFormEndpoint'\n    | 'sentryNamesMapper'\n    | 'onResults'\n    | 'defaultOptions'\n  > & {\n    integration: Integration;\n    mappings: ExternalActorMapping[];\n    onCreate: (mapping?: ExternalActorMappingOrSuggestion) => void;\n    onDelete: (mapping: ExternalActorMapping) => void;\n    organization: Organization;\n    type: 'team' | 'user';\n    pageLinks?: string;\n  };\n\ntype State = AsyncComponent['state'] & {\n  associationMappings: CodeOwnersAssociationMappings;\n  newlyAssociatedMappings: ExternalActorMapping[];\n};\n\nclass IntegrationExternalMappings extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      associationMappings: {},\n      newlyAssociatedMappings: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, integration} = this.props;\n    return [\n      [\n        'associationMappings',\n        `/organizations/${organization.slug}/codeowners-associations/`,\n        {query: {provider: integration.provider.key}},\n      ],\n    ];\n  }\n\n  get isFirstPage(): boolean {\n    const {cursor} = this.props.location.query;\n    return cursor ? cursor?.split(':')[1] === '0' : true;\n  }\n\n  get unassociatedMappings(): ExternalActorSuggestion[] {\n    const {type} = this.props;\n    const {associationMappings} = this.state;\n    const errorKey = `missing_external_${type}s`;\n    const unassociatedMappings = Object.values(associationMappings).reduce(\n      (map, {errors}) => {\n        return new Set<string>([...map, ...errors[errorKey]]);\n      },\n      new Set<string>()\n    );\n    return Array.from(unassociatedMappings).map(externalName => ({externalName}));\n  }\n\n  get allMappings(): ExternalActorMappingOrSuggestion[] {\n    const {mappings} = this.props;\n    if (!this.isFirstPage) {\n      return mappings;\n    }\n    const {newlyAssociatedMappings} = this.state;\n    const inlineMappings = this.unassociatedMappings.map(mapping => {\n      // If this mapping has been changed, replace it with the new version from its change's response\n      // The new version will be used in IntegrationExternalMappingForm to update the apiMethod and apiEndpoint\n      const newlyAssociatedMapping = newlyAssociatedMappings.find(\n        ({externalName}) => externalName === mapping.externalName\n      );\n\n      return newlyAssociatedMapping ?? mapping;\n    });\n    return [...inlineMappings, ...mappings];\n  }\n\n  renderMappingName(mapping: ExternalActorMappingOrSuggestion, hasAccess: boolean) {\n    const {\n      type,\n      getBaseFormEndpoint,\n      integration,\n      dataEndpoint,\n      sentryNamesMapper,\n      onResults,\n      defaultOptions,\n    } = this.props;\n    const mappingName = isExternalActorMapping(mapping) ? mapping.sentryName : '';\n    return hasAccess ? (\n      <IntegrationExternalMappingForm\n        type={type}\n        integration={integration}\n        dataEndpoint={dataEndpoint}\n        getBaseFormEndpoint={getBaseFormEndpoint}\n        mapping={mapping}\n        sentryNamesMapper={sentryNamesMapper}\n        onResults={onResults}\n        onSubmitSuccess={(newMapping: ExternalActorMapping) => {\n          this.setState({\n            newlyAssociatedMappings: [\n              ...this.state.newlyAssociatedMappings.filter(\n                map => map.externalName !== newMapping.externalName\n              ),\n              newMapping as ExternalActorMapping,\n            ],\n          });\n        }}\n        isInline\n        defaultOptions={defaultOptions}\n      />\n    ) : (\n      mappingName\n    );\n  }\n\n  renderMappingOptions(mapping: ExternalActorMappingOrSuggestion, hasAccess: boolean) {\n    const {type, onDelete} = this.props;\n    return isExternalActorMapping(mapping) ? (\n      <Tooltip\n        title={t(\n          'You must be an organization owner, manager or admin to make changes to an external user mapping.'\n        )}\n        disabled={hasAccess}\n      >\n        <DropdownLink\n          anchorRight\n          customTitle={\n            <Button\n              borderless\n              size=\"small\"\n              icon={<IconEllipsisVertical size=\"sm\" />}\n              disabled={!hasAccess}\n              aria-label={t('Actions')}\n              data-test-id=\"mapping-option\"\n            />\n          }\n        >\n          <MenuItemActionLink\n            shouldConfirm\n            message={t(`Are you sure you want to remove this external ${type} mapping?`)}\n            disabled={!hasAccess}\n            onAction={() => onDelete(mapping)}\n            title={t(`Delete External ${capitalize(type)}`)}\n            data-test-id=\"delete-mapping-button\"\n          >\n            <RedText>{t('Delete')}</RedText>\n          </MenuItemActionLink>\n        </DropdownLink>\n      </Tooltip>\n    ) : (\n      <Tooltip\n        title={t(`This ${type} mapping suggestion was generated from a CODEOWNERS file`)}\n      >\n        <Button\n          disabled\n          borderless\n          size=\"small\"\n          icon={<IconQuestion size=\"sm\" />}\n          aria-label={t(\n            `This ${type} mapping suggestion was generated from a CODEOWNERS file`\n          )}\n          data-test-id=\"suggestion-option\"\n        />\n      </Tooltip>\n    );\n  }\n\n  renderBody() {\n    const {integration, type, onCreate, pageLinks} = this.props;\n    return (\n      <Fragment>\n        <Panel>\n          <PanelHeader disablePadding hasButtons>\n            <HeaderLayout>\n              <ExternalNameColumn header>\n                {tct('External [type]', {type})}\n              </ExternalNameColumn>\n              <ArrowColumn>\n                <IconArrow direction=\"right\" size=\"md\" />\n              </ArrowColumn>\n              <SentryNameColumn>{tct('Sentry [type]', {type})}</SentryNameColumn>\n              <Access access={['org:integrations']}>\n                {({hasAccess}) => (\n                  <ButtonColumn>\n                    <Tooltip\n                      title={tct(\n                        'You must be an organization owner, manager or admin to edit or remove a [type] mapping.',\n                        {type}\n                      )}\n                      disabled={hasAccess}\n                    >\n                      <AddButton\n                        data-test-id=\"add-mapping-button\"\n                        onClick={() => onCreate()}\n                        size=\"xsmall\"\n                        icon={<IconAdd size=\"xs\" isCircled />}\n                        disabled={!hasAccess}\n                      >\n                        <ButtonText>{tct('Add [type] Mapping', {type})}</ButtonText>\n                      </AddButton>\n                    </Tooltip>\n                  </ButtonColumn>\n                )}\n              </Access>\n            </HeaderLayout>\n          </PanelHeader>\n          <PanelBody data-test-id=\"mapping-table\">\n            {!this.allMappings.length && (\n              <EmptyMessage\n                icon={getIntegrationIcon(integration.provider.key, 'lg')}\n                data-test-id=\"empty-message\"\n              >\n                {tct('Set up External [type] Mappings.', {type: capitalize(type)})}\n              </EmptyMessage>\n            )}\n            {this.allMappings.map((mapping, index) => (\n              <Access access={['org:integrations']} key={index}>\n                {({hasAccess}) => (\n                  <ConfigPanelItem>\n                    <Layout>\n                      <ExternalNameColumn>\n                        <StyledPluginIcon pluginId={integration.provider.key} size={19} />\n                        <span>{mapping.externalName}</span>\n                      </ExternalNameColumn>\n                      <ArrowColumn>\n                        <IconArrow direction=\"right\" size=\"md\" />\n                      </ArrowColumn>\n                      <SentryNameColumn>\n                        {this.renderMappingName(mapping, hasAccess)}\n                      </SentryNameColumn>\n                      <ButtonColumn>\n                        {this.renderMappingOptions(mapping, hasAccess)}\n                      </ButtonColumn>\n                    </Layout>\n                  </ConfigPanelItem>\n                )}\n              </Access>\n            ))}\n          </PanelBody>\n        </Panel>\n        <Pagination pageLinks={pageLinks} />\n      </Fragment>\n    );\n  }\n}\n\nexport default withRouter(IntegrationExternalMappings);\n\nconst AddButton = styled(Button)`\n  text-transform: capitalize;\n  height: inherit;\n`;\n\nconst ButtonText = styled('div')`\n  white-space: break-spaces;\n`;\n\nconst Layout = styled('div')`\n  display: grid;\n  grid-column-gap: ${space(1)};\n  padding: ${space(1)};\n  width: 100%;\n  align-items: center;\n  grid-template-columns: 2.25fr 50px 2.75fr 100px;\n  grid-template-areas: 'external-name arrow sentry-name button';\n`;\n\nconst HeaderLayout = styled(Layout)`\n  align-items: center;\n  padding: 0 ${space(1)} 0 ${space(2)};\n  text-transform: uppercase;\n`;\n\nconst ConfigPanelItem = styled(PanelItem)`\n  padding: 0 ${space(1)};\n`;\n\nconst IconEllipsisVertical = styled(IconEllipsis)`\n  transform: rotate(90deg);\n`;\n\nconst StyledPluginIcon = styled(PluginIcon)`\n  min-width: ${p => p.size}px;\n  margin-right: ${space(2)};\n`;\n\n// Columns below\nconst Column = styled('span')`\n  overflow: hidden;\n  overflow-wrap: break-word;\n`;\n\nconst ExternalNameColumn = styled(Column)<{header?: boolean}>`\n  grid-area: external-name;\n  display: flex;\n  align-items: center;\n  font-family: ${p => (p.header ? 'inherit' : p.theme.text.familyMono)};\n`;\n\nconst ArrowColumn = styled(Column)`\n  grid-area: arrow;\n`;\n\nconst SentryNameColumn = styled(Column)`\n  grid-area: sentry-name;\n  overflow: visible;\n`;\n\nconst ButtonColumn = styled(Column)`\n  grid-area: button;\n  text-align: right;\n  overflow: visible;\n`;\n\nconst RedText = styled('span')`\n  color: ${p => p.theme.red300};\n`;\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\nimport uniqBy from 'lodash/uniqBy';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport IntegrationExternalMappingForm from 'sentry/components/integrationExternalMappingForm';\nimport IntegrationExternalMappings from 'sentry/components/integrationExternalMappings';\nimport {t} from 'sentry/locale';\nimport {\n  ExternalActorMapping,\n  ExternalActorMappingOrSuggestion,\n  Integration,\n  Organization,\n  Team,\n} from 'sentry/types';\nimport {sentryNameToOption} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = AsyncComponent['props'] &\n  WithRouterProps & {\n    integration: Integration;\n    organization: Organization;\n  };\n\ntype State = AsyncComponent['state'] & {\n  initialResults: Team[];\n  queryResults: {\n    // For inline forms, the mappingKey will be the external name (since multiple will be rendered at one time)\n    // For the modal form, the mappingKey will be this.modalMappingKey (since only one modal form is rendered at any time)\n    [mappingKey: string]: Team[];\n  };\n  teams: Team[];\n};\n\nclass IntegrationExternalTeamMappings extends AsyncComponent<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      teams: [],\n      initialResults: [],\n      queryResults: {},\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization, location} = this.props;\n    return [\n      // We paginate on this query, since we're filtering by hasExternalTeams:true\n      [\n        'teams',\n        `/organizations/${organization.slug}/teams/`,\n        {query: {...location?.query, query: 'hasExternalTeams:true'}},\n      ],\n      // We use this query as defaultOptions to reduce identical API calls\n      ['initialResults', `/organizations/${organization.slug}/teams/`],\n    ];\n  }\n\n  handleDelete = async (mapping: ExternalActorMapping) => {\n    try {\n      const {organization} = this.props;\n      const {teams} = this.state;\n      const team = teams.find(item => item.id === mapping.teamId);\n      if (!team) {\n        throw new Error('Cannot find correct team slug.');\n      }\n      const endpoint = `/teams/${organization.slug}/${team.slug}/external-teams/${mapping.id}/`;\n\n      await this.api.requestPromise(endpoint, {\n        method: 'DELETE',\n      });\n      // remove config and update state\n      addSuccessMessage(t('Deletion successful'));\n      this.fetchData();\n    } catch {\n      // no 4xx errors should happen on delete\n      addErrorMessage(t('An error occurred'));\n    }\n  };\n\n  handleSubmitSuccess = () => {\n    this.fetchData();\n  };\n\n  get mappings() {\n    const {integration} = this.props;\n    const {teams} = this.state;\n    const externalTeamMappings = teams.reduce((acc, team) => {\n      const {externalTeams} = team;\n      acc.push(\n        ...externalTeams\n          .filter(externalTeam => externalTeam.provider === integration.provider.key)\n          .map(externalTeam => ({...externalTeam, sentryName: team.slug}))\n      );\n      return acc;\n    }, [] as ExternalActorMapping[]);\n    return externalTeamMappings.sort((a, b) => parseInt(a.id, 10) - parseInt(b.id, 10));\n  }\n\n  modalMappingKey = '__MODAL_RESULTS__';\n\n  get dataEndpoint() {\n    const {organization} = this.props;\n    return `/organizations/${organization.slug}/teams/`;\n  }\n\n  get defaultTeamOptions() {\n    const {initialResults} = this.state;\n    return this.sentryNamesMapper(initialResults).map(sentryNameToOption);\n  }\n\n  getBaseFormEndpoint(mapping?: ExternalActorMappingOrSuggestion) {\n    if (!mapping) {\n      return '';\n    }\n    const {organization} = this.props;\n    const {queryResults, initialResults} = this.state;\n    const fieldResults =\n      queryResults[mapping.externalName] ?? queryResults[this.modalMappingKey];\n    const team =\n      // First, search for the team in the query results...\n      fieldResults?.find(item => item.id === mapping.teamId) ??\n      // Then in the initial results, if nothing was found.\n      initialResults?.find(item => item.id === mapping.teamId);\n    return `/teams/${organization.slug}/${team?.slug ?? ''}/external-teams/`;\n  }\n\n  sentryNamesMapper(teams: Team[]) {\n    return teams.map(({id, slug}) => ({id, name: slug}));\n  }\n\n  /**\n   * This method combines the results from searches made on a form dropping repeated entries\n   * that have identical 'id's. This is because we need the result of the the search query when\n   * the user submits to get the team slug, but it won't always be the last query they've made.\n   *\n   * If they search (but not select) after making a selection, and we didn't keep a running collection of results,\n   * we wouldn't have the team to generate the endpoint from.\n   */\n  combineResultsById = (resultList1, resultList2) => {\n    return uniqBy([...resultList1, ...resultList2], 'id');\n  };\n\n  handleResults = (results, mappingKey?: string) => {\n    if (mappingKey) {\n      const {queryResults} = this.state;\n      this.setState({\n        queryResults: {\n          ...queryResults,\n          // Ensure we always have a team to pull the slug from\n          [mappingKey]: this.combineResultsById(results, queryResults[mappingKey] ?? []),\n        },\n      });\n    }\n  };\n\n  openModal = (mapping?: ExternalActorMappingOrSuggestion) => {\n    const {integration} = this.props;\n    openModal(({Body, Header, closeModal}) => (\n      <Fragment>\n        <Header closeButton>{t('Configure External Team Mapping')}</Header>\n        <Body>\n          <IntegrationExternalMappingForm\n            type=\"team\"\n            integration={integration}\n            dataEndpoint={this.dataEndpoint}\n            getBaseFormEndpoint={map => this.getBaseFormEndpoint(map)}\n            defaultOptions={this.defaultTeamOptions}\n            mapping={mapping}\n            mappingKey={this.modalMappingKey}\n            sentryNamesMapper={this.sentryNamesMapper}\n            onCancel={closeModal}\n            onResults={this.handleResults}\n            onSubmitSuccess={() => {\n              this.handleSubmitSuccess();\n              closeModal();\n            }}\n          />\n        </Body>\n      </Fragment>\n    ));\n  };\n\n  renderBody() {\n    const {integration, organization} = this.props;\n    const {teamsPageLinks} = this.state;\n    return (\n      <IntegrationExternalMappings\n        type=\"team\"\n        integration={integration}\n        organization={organization}\n        mappings={this.mappings}\n        dataEndpoint={this.dataEndpoint}\n        getBaseFormEndpoint={mapping => this.getBaseFormEndpoint(mapping)}\n        defaultOptions={this.defaultTeamOptions}\n        sentryNamesMapper={this.sentryNamesMapper}\n        onCreate={this.openModal}\n        onDelete={this.handleDelete}\n        pageLinks={teamsPageLinks}\n        onResults={this.handleResults}\n      />\n    );\n  }\n}\n\nexport default withRouter(withOrganization(IntegrationExternalTeamMappings));\n","import {Fragment} from 'react';\nimport {withRouter, WithRouterProps} from 'react-router';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport IntegrationExternalMappingForm from 'sentry/components/integrationExternalMappingForm';\nimport IntegrationExternalMappings from 'sentry/components/integrationExternalMappings';\nimport {t} from 'sentry/locale';\nimport {\n  ExternalActorMapping,\n  ExternalActorMappingOrSuggestion,\n  ExternalUser,\n  Integration,\n  Member,\n  Organization,\n} from 'sentry/types';\nimport {sentryNameToOption} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = AsyncComponent['props'] &\n  WithRouterProps & {\n    integration: Integration;\n    organization: Organization;\n  };\n\ntype State = AsyncComponent['state'] & {\n  initialResults: Member[];\n  members: (Member & {externalUsers: ExternalUser[]})[];\n};\n\nclass IntegrationExternalUserMappings extends AsyncComponent<Props, State> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {organization} = this.props;\n    return [\n      // We paginate on this query, since we're filtering by hasExternalUsers:true\n      [\n        'members',\n        `/organizations/${organization.slug}/members/`,\n        {query: {query: 'hasExternalUsers:true', expand: 'externalUsers'}},\n      ],\n      // We use this query as defaultOptions to reduce identical API calls\n      ['initialResults', `/organizations/${organization.slug}/members/`],\n    ];\n  }\n\n  handleDelete = async (mapping: ExternalActorMapping) => {\n    const {organization} = this.props;\n    try {\n      await this.api.requestPromise(\n        `/organizations/${organization.slug}/external-users/${mapping.id}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      // remove config and update state\n      addSuccessMessage(t('Deletion successful'));\n      this.fetchData();\n    } catch {\n      // no 4xx errors should happen on delete\n      addErrorMessage(t('An error occurred'));\n    }\n  };\n\n  handleSubmitSuccess = () => {\n    // Don't bother updating state. The info is in array of objects for each object in another array of objects.\n    // Easier and less error-prone to re-fetch the data and re-calculate state.\n    this.fetchData();\n  };\n\n  get mappings() {\n    const {integration} = this.props;\n    const {members} = this.state;\n    const externalUserMappings = members.reduce((acc, member) => {\n      const {externalUsers, user} = member;\n\n      acc.push(\n        ...externalUsers\n          .filter(externalUser => externalUser.provider === integration.provider.key)\n          .map(externalUser => ({...externalUser, sentryName: user.name}))\n      );\n      return acc;\n    }, [] as ExternalActorMapping[]);\n    return externalUserMappings.sort((a, b) => parseInt(a.id, 10) - parseInt(b.id, 10));\n  }\n\n  get dataEndpoint() {\n    const {organization} = this.props;\n    return `/organizations/${organization.slug}/members/`;\n  }\n\n  get baseFormEndpoint() {\n    const {organization} = this.props;\n    return `/organizations/${organization.slug}/external-users/`;\n  }\n\n  get defaultUserOptions() {\n    const {initialResults} = this.state;\n    return this.sentryNamesMapper(initialResults).map(sentryNameToOption);\n  }\n\n  sentryNamesMapper(members: Member[]) {\n    return members\n      .filter(member => member.user)\n      .map(({user: {id}, email, name}) => {\n        const label = email !== name ? `${name} - ${email}` : `${email}`;\n        return {id, name: label};\n      });\n  }\n\n  openModal = (mapping?: ExternalActorMappingOrSuggestion) => {\n    const {integration} = this.props;\n    openModal(({Body, Header, closeModal}) => (\n      <Fragment>\n        <Header closeButton>{t('Configure External User Mapping')}</Header>\n        <Body>\n          <IntegrationExternalMappingForm\n            type=\"user\"\n            integration={integration}\n            dataEndpoint={this.dataEndpoint}\n            getBaseFormEndpoint={() => this.baseFormEndpoint}\n            defaultOptions={this.defaultUserOptions}\n            mapping={mapping}\n            sentryNamesMapper={this.sentryNamesMapper}\n            onCancel={closeModal}\n            onSubmitSuccess={() => {\n              this.handleSubmitSuccess();\n              closeModal();\n            }}\n          />\n        </Body>\n      </Fragment>\n    ));\n  };\n\n  renderBody() {\n    const {integration, organization} = this.props;\n    const {membersPageLinks} = this.state;\n    return (\n      <Fragment>\n        <IntegrationExternalMappings\n          type=\"user\"\n          integration={integration}\n          organization={organization}\n          mappings={this.mappings}\n          dataEndpoint={this.dataEndpoint}\n          getBaseFormEndpoint={() => this.baseFormEndpoint}\n          defaultOptions={this.defaultUserOptions}\n          sentryNamesMapper={this.sentryNamesMapper}\n          onCreate={this.openModal}\n          onDelete={this.handleDelete}\n          pageLinks={membersPageLinks}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default withRouter(withOrganization(IntegrationExternalUserMappings));\n","import {Component} from 'react';\n\nimport {addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport {Field} from 'sentry/components/forms/type';\nimport {t} from 'sentry/locale';\nimport {Integration, Organization} from 'sentry/types';\n\ntype Props = {\n  integration: Integration;\n  onUpdate: () => void;\n  organization: Organization;\n};\n\ntype State = {\n  integration: Integration;\n};\n\nclass IntegrationMainSettings extends Component<Props, State> {\n  state: State = {\n    integration: this.props.integration,\n  };\n\n  handleSubmitSuccess = (data: Integration) => {\n    addSuccessMessage(t('Integration updated.'));\n    this.props.onUpdate();\n    this.setState({integration: data});\n  };\n\n  get initialData() {\n    const {integration} = this.props;\n\n    return {\n      name: integration.name,\n      domain: integration.domainName || '',\n    };\n  }\n\n  get formFields(): Field[] {\n    const fields: any[] = [\n      {\n        name: 'name',\n        type: 'string',\n        required: false,\n        label: t('Integration Name'),\n      },\n      {\n        name: 'domain',\n        type: 'string',\n        required: false,\n        label: t('Full URL'),\n      },\n    ];\n    return fields;\n  }\n\n  render() {\n    const {integration} = this.state;\n    const {organization} = this.props;\n    return (\n      <Form\n        initialData={this.initialData}\n        apiMethod=\"PUT\"\n        apiEndpoint={`/organizations/${organization.slug}/integrations/${integration.id}/`}\n        onSubmitSuccess={this.handleSubmitSuccess}\n        submitLabel={t('Save Settings')}\n      >\n        <JsonForm fields={this.formFields} />\n      </Form>\n    );\n  }\n}\n\nexport default IntegrationMainSettings;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addRepository, migrateRepository} from 'sentry/actionCreators/integrations';\nimport RepositoryActions from 'sentry/actions/repositoryActions';\nimport Alert from 'sentry/components/alert';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Button from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport Pagination from 'sentry/components/pagination';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport RepositoryRow from 'sentry/components/repositoryRow';\nimport {IconCommit} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Integration, Organization, Repository} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = AsyncComponent['props'] & {\n  integration: Integration;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  adding: boolean;\n  dropdownBusy: boolean;\n  integrationRepos: {\n    repos: {identifier: string; name: string}[];\n    searchable: boolean;\n  };\n  itemList: Repository[];\n};\n\nclass IntegrationRepos extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      adding: false,\n      itemList: [],\n      integrationRepos: {repos: [], searchable: false},\n      dropdownBusy: false,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const orgId = this.props.organization.slug;\n    return [\n      ['itemList', `/organizations/${orgId}/repos/`, {query: {status: ''}}],\n      [\n        'integrationRepos',\n        `/organizations/${orgId}/integrations/${this.props.integration.id}/repos/`,\n      ],\n    ];\n  }\n\n  getIntegrationRepos() {\n    const integrationId = this.props.integration.id;\n    return this.state.itemList.filter(repo => repo.integrationId === integrationId);\n  }\n\n  // Called by row to signal repository change.\n  onRepositoryChange = data => {\n    const itemList = this.state.itemList;\n    itemList.forEach(item => {\n      if (item.id === data.id) {\n        item.status = data.status;\n        // allow for custom scm repositories to be updated, and\n        // url is optional and therefore can be an empty string\n        item.url = data.url === undefined ? item.url : data.url;\n        item.name = data.name || item.name;\n      }\n    });\n    this.setState({itemList});\n    RepositoryActions.resetRepositories();\n  };\n\n  debouncedSearchRepositoriesRequest = debounce(\n    query => this.searchRepositoriesRequest(query),\n    200\n  );\n\n  searchRepositoriesRequest = (searchQuery: string) => {\n    const orgId = this.props.organization.slug;\n    const query = {search: searchQuery};\n    const endpoint = `/organizations/${orgId}/integrations/${this.props.integration.id}/repos/`;\n    return this.api.request(endpoint, {\n      method: 'GET',\n      query,\n      success: data => {\n        this.setState({integrationRepos: data, dropdownBusy: false});\n      },\n      error: () => {\n        this.setState({dropdownBusy: false});\n      },\n    });\n  };\n\n  handleSearchRepositories = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedSearchRepositoriesRequest(e.target.value);\n  };\n\n  addRepo(selection: {label: JSX.Element; searchKey: string; value: string}) {\n    const {integration} = this.props;\n    const {itemList} = this.state;\n    const orgId = this.props.organization.slug;\n\n    this.setState({adding: true});\n\n    const migratableRepo = itemList.filter(item => {\n      if (!(selection.value && item.externalSlug)) {\n        return false;\n      }\n      return selection.value === item.externalSlug;\n    })[0];\n\n    let promise;\n    if (migratableRepo) {\n      promise = migrateRepository(this.api, orgId, migratableRepo.id, integration);\n    } else {\n      promise = addRepository(this.api, orgId, selection.value, integration);\n    }\n    promise.then(\n      (repo: Repository) => {\n        this.setState({adding: false, itemList: itemList.concat(repo)});\n        RepositoryActions.resetRepositories();\n      },\n      () => this.setState({adding: false})\n    );\n  }\n\n  renderDropdown() {\n    const access = new Set(this.props.organization.access);\n    if (!access.has('org:integrations')) {\n      return (\n        <DropdownButton\n          disabled\n          title={t(\n            'You must be an organization owner, manager or admin to add repositories'\n          )}\n          isOpen={false}\n          size=\"xsmall\"\n        >\n          {t('Add Repository')}\n        </DropdownButton>\n      );\n    }\n    const repositories = new Set(\n      this.state.itemList.filter(item => item.integrationId).map(i => i.externalSlug)\n    );\n    const repositoryOptions = (this.state.integrationRepos.repos || []).filter(\n      repo => !repositories.has(repo.identifier)\n    );\n    const items = repositoryOptions.map(repo => ({\n      searchKey: repo.name,\n      value: repo.identifier,\n      label: (\n        <StyledListElement>\n          <StyledName>{repo.name}</StyledName>\n        </StyledListElement>\n      ),\n    }));\n\n    const menuHeader = <StyledReposLabel>{t('Repositories')}</StyledReposLabel>;\n    const onChange = this.state.integrationRepos.searchable\n      ? this.handleSearchRepositories\n      : undefined;\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        onSelect={this.addRepo.bind(this)}\n        onChange={onChange}\n        menuHeader={menuHeader}\n        emptyMessage={t('No repositories available')}\n        noResultsMessage={t('No repositories found')}\n        busy={this.state.dropdownBusy}\n        alignMenu=\"right\"\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xsmall\" busy={this.state.adding}>\n            {t('Add Repository')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  renderError(error) {\n    const badRequest = Object.values(this.state.errors).find(\n      resp => resp && resp.status === 400\n    );\n    if (badRequest) {\n      return (\n        <Alert type=\"error\" showIcon>\n          {t(\n            'We were unable to fetch repositories for this integration. Try again later. If this error continues, please reconnect this integration by uninstalling and then reinstalling.'\n          )}\n        </Alert>\n      );\n    }\n\n    return super.renderError(error);\n  }\n\n  renderBody() {\n    const {itemListPageLinks} = this.state;\n    const orgId = this.props.organization.slug;\n    const itemList = this.getIntegrationRepos() || [];\n    const header = (\n      <PanelHeader disablePadding hasButtons>\n        <HeaderText>{t('Repositories')}</HeaderText>\n        <DropdownWrapper>{this.renderDropdown()}</DropdownWrapper>\n      </PanelHeader>\n    );\n\n    return (\n      <Fragment>\n        <Panel>\n          {header}\n          <PanelBody>\n            {itemList.length === 0 && (\n              <EmptyMessage\n                icon={<IconCommit />}\n                title={t('Sentry is better with commit data')}\n                description={t(\n                  'Add a repository to begin tracking its commit data. Then, set up release tracking to unlock features like suspect commits, suggested issue owners, and deploy emails.'\n                )}\n                action={\n                  <Button href=\"https://docs.sentry.io/product/releases/\">\n                    {t('Learn More')}\n                  </Button>\n                }\n              />\n            )}\n            {itemList.map(repo => (\n              <RepositoryRow\n                api={this.api}\n                key={repo.id}\n                repository={repo}\n                orgId={orgId}\n                onRepositoryChange={this.onRepositoryChange}\n              />\n            ))}\n          </PanelBody>\n        </Panel>\n        {itemListPageLinks && (\n          <Pagination pageLinks={itemListPageLinks} {...this.props} />\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IntegrationRepos);\n\nconst HeaderText = styled('div')`\n  padding-left: ${space(2)};\n  flex: 1;\n`;\n\nconst DropdownWrapper = styled('div')`\n  padding-right: ${space(1)};\n  text-transform: none;\n`;\n\nconst StyledReposLabel = styled('div')`\n  width: 250px;\n  font-size: 0.875em;\n  padding: ${space(1)} 0;\n  text-transform: uppercase;\n`;\n\nconst StyledListElement = styled('div')`\n  display: flex;\n  align-items: center;\n  padding: ${space(0.5)};\n`;\n\nconst StyledName = styled('div')`\n  flex-shrink: 1;\n  min-width: 0;\n  ${p => p.theme.overflowEllipsis};\n`;\n","import {Component, Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport Button from 'sentry/components/button';\nimport Switch from 'sentry/components/switchButton';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {IntegrationWithConfig, Organization, ServerlessFunction} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withApi from 'sentry/utils/withApi';\n\ntype Props = {\n  api: Client;\n  integration: IntegrationWithConfig;\n  onUpdateFunction: (serverlessFunctionUpdate: Partial<ServerlessFunction>) => void;\n  organization: Organization;\n  serverlessFunction: ServerlessFunction;\n};\n\ntype State = {\n  submitting: boolean;\n};\n\nclass IntegrationServerlessRow extends Component<Props, State> {\n  state: State = {\n    submitting: false,\n  };\n  get enabled() {\n    return this.props.serverlessFunction.enabled;\n  }\n  get endpoint() {\n    const orgSlug = this.props.organization.slug;\n    return `/organizations/${orgSlug}/integrations/${this.props.integration.id}/serverless-functions/`;\n  }\n\n  recordAction = (action: 'enable' | 'disable' | 'updateVersion') => {\n    trackIntegrationAnalytics('integrations.serverless_function_action', {\n      integration: this.props.integration.provider.key,\n      integration_type: 'first_party',\n      action,\n      organization: this.props.organization,\n    });\n  };\n  toggleEnable = async () => {\n    const {serverlessFunction} = this.props;\n    const action = this.enabled ? 'disable' : 'enable';\n    const data = {\n      action,\n      target: serverlessFunction.name,\n    };\n    try {\n      addLoadingMessage();\n      this.setState({submitting: true});\n      // optimistically update enable state\n      this.props.onUpdateFunction({enabled: !this.enabled});\n      this.recordAction(action);\n      const resp = await this.props.api.requestPromise(this.endpoint, {\n        method: 'POST',\n        data,\n      });\n      // update remaining after response\n      this.props.onUpdateFunction(resp);\n      addSuccessMessage(t('Success'));\n    } catch (err) {\n      // restore original on failure\n      this.props.onUpdateFunction(serverlessFunction);\n      addErrorMessage(err.responseJSON?.detail ?? t('Error occurred'));\n    }\n    this.setState({submitting: false});\n  };\n  updateVersion = async () => {\n    const {serverlessFunction} = this.props;\n    const data = {\n      action: 'updateVersion',\n      target: serverlessFunction.name,\n    };\n    try {\n      this.setState({submitting: true});\n      // don't know the latest version but at least optimistically remove the update button\n      this.props.onUpdateFunction({outOfDate: false});\n      addLoadingMessage();\n      this.recordAction('updateVersion');\n      const resp = await this.props.api.requestPromise(this.endpoint, {\n        method: 'POST',\n        data,\n      });\n      // update remaining after response\n      this.props.onUpdateFunction(resp);\n      addSuccessMessage(t('Success'));\n    } catch (err) {\n      // restore original on failure\n      this.props.onUpdateFunction(serverlessFunction);\n      addErrorMessage(err.responseJSON?.detail ?? t('Error occurred'));\n    }\n    this.setState({submitting: false});\n  };\n  renderLayerStatus() {\n    const {serverlessFunction} = this.props;\n    if (!serverlessFunction.outOfDate) {\n      return this.enabled ? t('Latest') : t('Disabled');\n    }\n    return (\n      <UpdateButton size=\"small\" priority=\"primary\" onClick={this.updateVersion}>\n        {t('Update')}\n      </UpdateButton>\n    );\n  }\n  render() {\n    const {serverlessFunction} = this.props;\n    const {version} = serverlessFunction;\n    // during optimistic update, we might be enabled without a version\n    const versionText =\n      this.enabled && version > 0 ? <Fragment>&nbsp;|&nbsp;v{version}</Fragment> : null;\n    return (\n      <Item>\n        <NameWrapper>\n          <NameRuntimeVersionWrapper>\n            <Name>{serverlessFunction.name}</Name>\n            <RuntimeAndVersion>\n              <DetailWrapper>{serverlessFunction.runtime}</DetailWrapper>\n              <DetailWrapper>{versionText}</DetailWrapper>\n            </RuntimeAndVersion>\n          </NameRuntimeVersionWrapper>\n        </NameWrapper>\n        <LayerStatusWrapper>{this.renderLayerStatus()}</LayerStatusWrapper>\n        <StyledSwitch\n          isActive={this.enabled}\n          isDisabled={this.state.submitting}\n          size=\"sm\"\n          toggle={this.toggleEnable}\n        />\n      </Item>\n    );\n  }\n}\n\nexport default withApi(IntegrationServerlessRow);\n\nconst Item = styled('div')`\n  padding: ${space(2)};\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${p => p.theme.innerBorder};\n  }\n\n  display: grid;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  grid-template-columns: 2fr 1fr 0.5fr;\n  grid-template-areas: 'function-name layer-status enable-switch';\n`;\n\nconst ItemWrapper = styled('span')`\n  height: 32px;\n  vertical-align: middle;\n  display: flex;\n  align-items: center;\n`;\n\nconst NameWrapper = styled(ItemWrapper)`\n  grid-area: function-name;\n`;\n\nconst LayerStatusWrapper = styled(ItemWrapper)`\n  grid-area: layer-status;\n`;\n\nconst StyledSwitch = styled(Switch)`\n  grid-area: enable-switch;\n`;\n\nconst UpdateButton = styled(Button)``;\n\nconst NameRuntimeVersionWrapper = styled('div')`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Name = styled(`span`)`\n  padding-bottom: ${space(1)};\n`;\n\nconst RuntimeAndVersion = styled('div')`\n  display: flex;\n  flex-direction: row;\n  color: ${p => p.theme.gray300};\n`;\n\nconst DetailWrapper = styled('div')`\n  line-height: 1.2;\n`;\n","// eslint-disable-next-line simple-import-sort/imports\nimport {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport {IntegrationWithConfig, Organization, ServerlessFunction} from 'sentry/types';\nimport {Panel, PanelBody, PanelHeader} from 'sentry/components/panels';\nimport space from 'sentry/styles/space';\nimport Alert from 'sentry/components/alert';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport {t} from 'sentry/locale';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\n\nimport IntegrationServerlessRow from './integrationServerlessRow';\n\ntype Props = AsyncComponent['props'] & {\n  integration: IntegrationWithConfig;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  serverlessFunctions: ServerlessFunction[];\n};\n\nclass IntegrationServerlessFunctions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      serverlessFunctions: [],\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const orgSlug = this.props.organization.slug;\n    return [\n      [\n        'serverlessFunctions',\n        `/organizations/${orgSlug}/integrations/${this.props.integration.id}/serverless-functions/`,\n      ],\n    ];\n  }\n\n  get serverlessFunctions() {\n    return this.state.serverlessFunctions;\n  }\n\n  onLoadAllEndpointsSuccess() {\n    trackIntegrationAnalytics('integrations.serverless_functions_viewed', {\n      integration: this.props.integration.provider.key,\n      integration_type: 'first_party',\n      num_functions: this.serverlessFunctions.length,\n      organization: this.props.organization,\n    });\n  }\n\n  handleFunctionUpdate = (\n    serverlessFunctionUpdate: Partial<ServerlessFunction>,\n    index: number\n  ) => {\n    const serverlessFunctions = [...this.serverlessFunctions];\n    const serverlessFunction = {\n      ...serverlessFunctions[index],\n      ...serverlessFunctionUpdate,\n    };\n    serverlessFunctions[index] = serverlessFunction;\n    this.setState({serverlessFunctions});\n  };\n\n  renderBody() {\n    return (\n      <Fragment>\n        <Alert type=\"info\">\n          {t(\n            'Manage your AWS Lambda functions below. Only Node and Python runtimes are currently supported.'\n          )}\n        </Alert>\n        <Panel>\n          <StyledPanelHeader disablePadding hasButtons>\n            <NameHeader>{t('Name')}</NameHeader>\n            <LayerStatusWrapper>{t('Layer Status')}</LayerStatusWrapper>\n            <EnableHeader>{t('Enabled')}</EnableHeader>\n          </StyledPanelHeader>\n          <StyledPanelBody>\n            {this.serverlessFunctions.map((serverlessFunction, i) => (\n              <IntegrationServerlessRow\n                key={serverlessFunction.name}\n                serverlessFunction={serverlessFunction}\n                onUpdateFunction={(update: Partial<ServerlessFunction>) =>\n                  this.handleFunctionUpdate(update, i)\n                }\n                {...this.props}\n              />\n            ))}\n          </StyledPanelBody>\n        </Panel>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IntegrationServerlessFunctions);\n\nconst StyledPanelHeader = styled(PanelHeader)`\n  padding: ${space(2)};\n  display: grid;\n  grid-column-gap: ${space(1)};\n  align-items: center;\n  grid-template-columns: 2fr 1fr 0.5fr;\n  grid-template-areas: 'function-name layer-status enable-switch';\n`;\n\nconst HeaderText = styled('div')`\n  flex: 1;\n`;\n\nconst StyledPanelBody = styled(PanelBody)``;\n\nconst NameHeader = styled(HeaderText)`\n  grid-area: function-name;\n`;\n\nconst LayerStatusWrapper = styled(HeaderText)`\n  grid-area: layer-status;\n`;\n\nconst EnableHeader = styled(HeaderText)`\n  grid-area: enable-switch;\n`;\n","import {useEffect} from 'react';\nimport {PlainRoute} from 'react-router';\n\nimport SettingsBreadcrumbStore from 'sentry/stores/settingsBreadcrumbStore';\n\ntype Props = {\n  routes: Array<PlainRoute>;\n  title: string;\n};\n\nfunction BreadcrumbTitle(props: Props) {\n  useEffect(\n    () => SettingsBreadcrumbStore.updateRouteMap(props),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return null;\n}\n\nexport default BreadcrumbTitle;\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport Button from 'sentry/components/button';\nimport Form from 'sentry/components/forms/form';\nimport JsonForm from 'sentry/components/forms/jsonForm';\nimport List from 'sentry/components/list';\nimport ListItem from 'sentry/components/list/listItem';\nimport NavTabs from 'sentry/components/navTabs';\nimport {IconAdd, IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {IntegrationProvider, IntegrationWithConfig, Organization} from 'sentry/types';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport {singleLineRenderer} from 'sentry/utils/marked';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport AsyncView from 'sentry/views/asyncView';\nimport AddIntegration from 'sentry/views/organizationIntegrations/addIntegration';\nimport IntegrationAlertRules from 'sentry/views/organizationIntegrations/integrationAlertRules';\nimport IntegrationCodeMappings from 'sentry/views/organizationIntegrations/integrationCodeMappings';\nimport IntegrationExternalTeamMappings from 'sentry/views/organizationIntegrations/integrationExternalTeamMappings';\nimport IntegrationExternalUserMappings from 'sentry/views/organizationIntegrations/integrationExternalUserMappings';\nimport IntegrationItem from 'sentry/views/organizationIntegrations/integrationItem';\nimport IntegrationMainSettings from 'sentry/views/organizationIntegrations/integrationMainSettings';\nimport IntegrationRepos from 'sentry/views/organizationIntegrations/integrationRepos';\nimport IntegrationServerlessFunctions from 'sentry/views/organizationIntegrations/integrationServerlessFunctions';\nimport BreadcrumbTitle from 'sentry/views/settings/components/settingsBreadcrumb/breadcrumbTitle';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\ntype RouteParams = {\n  integrationId: string;\n  orgId: string;\n  providerKey: string;\n};\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  organization: Organization;\n};\n\ntype Tab = 'repos' | 'codeMappings' | 'userMappings' | 'teamMappings' | 'settings';\n\ntype State = AsyncView['state'] & {\n  config: {providers: IntegrationProvider[]};\n  integration: IntegrationWithConfig;\n  tab?: Tab;\n};\nclass ConfigureIntegration extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {orgId, integrationId} = this.props.params;\n\n    return [\n      ['config', `/organizations/${orgId}/config/integrations/`],\n      ['integration', `/organizations/${orgId}/integrations/${integrationId}/`],\n    ];\n  }\n\n  componentDidMount() {\n    const {\n      location,\n      router,\n      organization,\n      params: {orgId, providerKey},\n    } = this.props;\n    // This page should not be accessible by members\n    if (!organization.access.includes('org:integrations')) {\n      router.push({\n        pathname: `/settings/${orgId}/integrations/${providerKey}/`,\n      });\n    }\n    const value =\n      (['codeMappings', 'userMappings', 'teamMappings'] as const).find(\n        tab => tab === location.query.tab\n      ) || 'repos';\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({tab: value});\n  }\n\n  onRequestSuccess({stateKey, data}) {\n    if (stateKey !== 'integration') {\n      return;\n    }\n    trackIntegrationAnalytics('integrations.details_viewed', {\n      integration: data.provider.key,\n      integration_type: 'first_party',\n      organization: this.props.organization,\n    });\n  }\n\n  getTitle() {\n    return this.state.integration\n      ? this.state.integration.provider.name\n      : 'Configure Integration';\n  }\n\n  hasStacktraceLinking(provider: IntegrationProvider) {\n    // CodeOwners will only work if the provider has StackTrace Linking\n    return (\n      provider.features.includes('stacktrace-link') &&\n      this.props.organization.features.includes('integrations-stacktrace-link')\n    );\n  }\n\n  hasCodeOwners() {\n    return this.props.organization.features.includes('integrations-codeowners');\n  }\n\n  isCustomIntegration() {\n    const {integration} = this.state;\n    const {organization} = this.props;\n    return (\n      organization.features.includes('integrations-custom-scm') &&\n      integration.provider.key === 'custom_scm'\n    );\n  }\n\n  onTabChange = (value: Tab) => {\n    this.setState({tab: value});\n  };\n\n  get tab() {\n    return this.state.tab || 'repos';\n  }\n\n  onUpdateIntegration = () => {\n    this.setState(this.getDefaultState(), this.fetchData);\n  };\n\n  getAction = (provider: IntegrationProvider | undefined) => {\n    const {integration} = this.state;\n    const action =\n      provider && provider.key === 'pagerduty' ? (\n        <AddIntegration\n          provider={provider}\n          onInstall={this.onUpdateIntegration}\n          account={integration.domainName}\n          organization={this.props.organization}\n        >\n          {onClick => (\n            <Button\n              priority=\"primary\"\n              size=\"small\"\n              icon={<IconAdd size=\"xs\" isCircled />}\n              onClick={() => onClick()}\n            >\n              {t('Add Services')}\n            </Button>\n          )}\n        </AddIntegration>\n      ) : null;\n\n    return action;\n  };\n\n  // TODO(Steve): Refactor components into separate tabs and use more generic tab logic\n  renderMainTab(provider: IntegrationProvider) {\n    const {orgId} = this.props.params;\n    const {integration} = this.state;\n\n    const instructions =\n      integration.dynamicDisplayInformation?.configure_integration?.instructions;\n\n    return (\n      <Fragment>\n        <BreadcrumbTitle routes={this.props.routes} title={integration.provider.name} />\n\n        {integration.configOrganization.length > 0 && (\n          <Form\n            hideFooter\n            saveOnBlur\n            allowUndo\n            apiMethod=\"POST\"\n            initialData={integration.configData || {}}\n            apiEndpoint={`/organizations/${orgId}/integrations/${integration.id}/`}\n          >\n            <JsonForm\n              fields={integration.configOrganization}\n              title={\n                integration.provider.aspects.configure_integration?.title ||\n                t('Organization Integration Settings')\n              }\n            />\n          </Form>\n        )}\n\n        {instructions && instructions.length > 0 && (\n          <Alert type=\"info\">\n            {instructions?.length === 1 ? (\n              <span\n                dangerouslySetInnerHTML={{__html: singleLineRenderer(instructions[0])}}\n              />\n            ) : (\n              <List symbol={<IconArrow size=\"xs\" direction=\"right\" />}>\n                {instructions?.map((instruction, i) => (\n                  <ListItem key={i}>\n                    <span\n                      dangerouslySetInnerHTML={{__html: singleLineRenderer(instruction)}}\n                    />\n                  </ListItem>\n                )) ?? []}\n              </List>\n            )}\n          </Alert>\n        )}\n\n        {provider.features.includes('alert-rule') && <IntegrationAlertRules />}\n\n        {provider.features.includes('commits') && (\n          <IntegrationRepos {...this.props} integration={integration} />\n        )}\n\n        {provider.features.includes('serverless') && (\n          <IntegrationServerlessFunctions integration={integration} />\n        )}\n      </Fragment>\n    );\n  }\n\n  renderBody() {\n    const {integration} = this.state;\n    const provider = this.state.config.providers.find(\n      p => p.key === integration.provider.key\n    );\n    if (!provider) {\n      return null;\n    }\n\n    const title = <IntegrationItem integration={integration} />;\n    const header = (\n      <SettingsPageHeader noTitleStyles title={title} action={this.getAction(provider)} />\n    );\n\n    return (\n      <Fragment>\n        {header}\n        {this.renderMainContent(provider)}\n      </Fragment>\n    );\n  }\n\n  // renders everything below header\n  renderMainContent(provider: IntegrationProvider) {\n    // if no code mappings, render the single tab\n    if (!this.hasStacktraceLinking(provider)) {\n      return this.renderMainTab(provider);\n    }\n    // otherwise render the tab view\n    const tabs = [\n      ['repos', t('Repositories')],\n      ['codeMappings', t('Code Mappings')],\n      ...(this.hasCodeOwners() ? [['userMappings', t('User Mappings')]] : []),\n      ...(this.hasCodeOwners() ? [['teamMappings', t('Team Mappings')]] : []),\n    ] as [id: Tab, label: string][];\n\n    if (this.isCustomIntegration()) {\n      tabs.unshift(['settings', t('Settings')]);\n    }\n\n    return (\n      <Fragment>\n        <NavTabs underlined>\n          {tabs.map(tabTuple => (\n            <li\n              key={tabTuple[0]}\n              className={this.tab === tabTuple[0] ? 'active' : ''}\n              onClick={() => this.onTabChange(tabTuple[0])}\n            >\n              <CapitalizedLink>{tabTuple[1]}</CapitalizedLink>\n            </li>\n          ))}\n        </NavTabs>\n        {this.renderTabContent(this.tab, provider)}\n      </Fragment>\n    );\n  }\n\n  renderTabContent(tab: Tab, provider: IntegrationProvider) {\n    const {integration} = this.state;\n    const {organization} = this.props;\n    switch (tab) {\n      case 'codeMappings':\n        return <IntegrationCodeMappings integration={integration} />;\n      case 'repos':\n        return this.renderMainTab(provider);\n      case 'userMappings':\n        return <IntegrationExternalUserMappings integration={integration} />;\n      case 'teamMappings':\n        return <IntegrationExternalTeamMappings integration={integration} />;\n      case 'settings':\n        return (\n          <IntegrationMainSettings\n            onUpdate={this.onUpdateIntegration}\n            organization={organization}\n            integration={integration}\n          />\n        );\n      default:\n        return this.renderMainTab(provider);\n    }\n  }\n}\n\nexport default withOrganization(ConfigureIntegration);\n\nconst CapitalizedLink = styled('a')`\n  text-transform: capitalize;\n`;\n"],"names":["createActions","MenuItemActionLink","className","props","noAnchor","withBorder","disabled","InnerActionLink","ActionLink","p","theme","textColor","overflowEllipsis","background","storeConfig","pathMap","unsubscribeListeners","init","this","reset","getState","get","updateRouteMap","routes","title","getRouteStringFromRoutes","trigger","trimMappings","routePath","fullPath","startsWith","createStore","makeSafeRefluxStore","AddIntegration","Component","urlParams","account","analyticsParams","modalParams","organization","provider","trackIntegrationAnalytics","integration","key","integration_type","url","width","height","setupDialog","left","top","computeCenteredWindow","query","installUrl","qs","opts","dialog","window","open","focus","message","onInstall","origin","document","location","source","success","data","addSuccessMessage","t","name","addErrorMessage","error","componentDidMount","addEventListener","didReceiveMessage","componentWillUnmount","removeEventListener","close","screenLeft","undefined","screenX","screenTop","screenY","innerWidth","documentElement","clientWidth","screen","innerHeight","clientHeight","render","children","openDialog","IntegrationItem","compact","Flex","size","Labels","IntegrationName","DomainName","domainName","space","fontSizeMedium","subText","fontSizeSmall","IntegrationAlertRules","projects","length","map","project","ProjectItem","avatarSize","to","slug","PanelItem","withOrganization","withProjects","RepositoryProjectPathConfigForm","initialData","existingConfig","defaultBranch","stackRoot","sourceRoot","repositoryId","repoId","integrationId","id","pick","formFields","repos","repoChoices","value","label","type","required","placeholder","options","showHelpInTooltip","help","handlePreSubmit","setup_type","view","onSubmitSuccess","onCancel","baseEndpoint","endpoint","apiMethod","onPreSubmit","apiEndpoint","field","inline","stacked","flexibleControlStateSize","RepositoryProjectPathConfigRow","pathConfig","onEdit","onDelete","access","hasAccess","Fragment","NameRepoColumn","ProjectRepoHolder","RepoName","repoName","ProjectAndBranch","displayName","avatarProps","consistentWidth","BranchWrapper","OutputPathColumn","InputPathColumn","ButtonColumn","StyledButton","icon","onClick","onConfirm","Button","gray300","Column","IntegrationCodeMappings","AsyncComponent","async","api","requestPromise","method","pathConfigs","state","filter","config","setState","err","tct","status","statusText","text","responseText","concat","openModal","Body","Header","closeModal","closeButton","handleSubmitSuccess","getDefaultState","super","sortBy","projectSlug","parseInt","repo","getEndpoints","orgSlug","getMatchingProject","find","projectId","referrer","search","startSession","renderBody","link","href","disablePadding","hasButtons","HeaderLayout","AddButton","isCircled","getIntegrationIcon","action","ConfigPanelItem","Layout","handleDelete","item","IntegrationExternalMappingForm","FormModel","mapping","getDefaultOptions","defaultOptions","isExternalActorMapping","sentryName","mappingId","some","dataEndpoint","isInline","mappingKey","onResults","sentryNamesMapper","fields","capitalize","result","externalName","sentryNameToOption","unshift","extraFormFieldProps","getData","model","onBlur","updateModel","getBaseFormEndpoint","updatedMapping","endpointDetails","getExternalActorEndpointDetails","setFormOptions","onSubmitError","FormWrapper","requireChanges","saveOnBlur","allowUndo","IntegrationExternalMappings","associationMappings","newlyAssociatedMappings","isFirstPage","cursor","split","unassociatedMappings","errorKey","Object","values","reduce","errors","Set","Array","from","allMappings","mappings","newlyAssociatedMapping","renderMappingName","mappingName","newMapping","renderMappingOptions","anchorRight","customTitle","borderless","IconEllipsisVertical","shouldConfirm","onAction","RedText","onCreate","pageLinks","ExternalNameColumn","header","ArrowColumn","direction","SentryNameColumn","ButtonText","index","StyledPluginIcon","pluginId","withRouter","IconEllipsis","PluginIcon","familyMono","red300","IntegrationExternalTeamMappings","teams","team","teamId","Error","fetchData","resultList1","resultList2","uniqBy","results","queryResults","combineResultsById","defaultTeamOptions","modalMappingKey","handleResults","initialResults","acc","externalTeams","push","externalTeam","sort","a","b","fieldResults","teamsPageLinks","IntegrationExternalUserMappings","baseFormEndpoint","defaultUserOptions","expand","members","member","externalUsers","user","externalUser","email","membersPageLinks","IntegrationMainSettings","onUpdate","domain","submitLabel","IntegrationRepos","itemList","forEach","RepositoryActions","debounce","searchRepositoriesRequest","searchQuery","request","integrationRepos","dropdownBusy","e","debouncedSearchRepositoriesRequest","target","adding","searchable","orgId","getIntegrationRepos","addRepo","selection","migratableRepo","externalSlug","promise","migrateRepository","addRepository","then","renderDropdown","has","isOpen","repositories","i","items","identifier","searchKey","StyledListElement","StyledName","menuHeader","StyledReposLabel","onChange","handleSearchRepositories","onSelect","bind","emptyMessage","noResultsMessage","busy","alignMenu","renderError","resp","showIcon","itemListPageLinks","HeaderText","DropdownWrapper","description","repository","onRepositoryChange","IntegrationServerlessRow","submitting","serverlessFunction","enabled","addLoadingMessage","onUpdateFunction","recordAction","responseJSON","detail","outOfDate","renderLayerStatus","UpdateButton","priority","updateVersion","version","versionText","Item","NameWrapper","NameRuntimeVersionWrapper","Name","RuntimeAndVersion","DetailWrapper","runtime","LayerStatusWrapper","StyledSwitch","isActive","isDisabled","toggle","toggleEnable","withApi","innerBorder","ItemWrapper","Switch","IntegrationServerlessFunctions","serverlessFunctionUpdate","serverlessFunctions","onLoadAllEndpointsSuccess","num_functions","StyledPanelHeader","NameHeader","EnableHeader","StyledPanelBody","update","handleFunctionUpdate","PanelHeader","PanelBody","useEffect","SettingsBreadcrumbStore","ConfigureIntegration","AsyncView","tab","onUpdateIntegration","params","router","providerKey","includes","pathname","onRequestSuccess","stateKey","getTitle","hasStacktraceLinking","features","hasCodeOwners","isCustomIntegration","renderMainTab","instructions","dynamicDisplayInformation","configure_integration","configOrganization","hideFooter","configData","aspects","dangerouslySetInnerHTML","__html","singleLineRenderer","symbol","instruction","providers","noTitleStyles","getAction","renderMainContent","tabs","underlined","tabTuple","onTabChange","CapitalizedLink","renderTabContent"],"sourceRoot":""}