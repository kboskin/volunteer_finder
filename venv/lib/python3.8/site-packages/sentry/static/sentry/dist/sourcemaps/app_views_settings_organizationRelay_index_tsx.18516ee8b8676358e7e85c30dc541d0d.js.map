{"version":3,"file":"chunks/app_views_settings_organizationRelay_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/confirmDelete.tsx","webpack:///./app/views/asyncView.tsx","webpack:///./app/views/settings/organization/permissionAlert.tsx","webpack:///./app/views/settings/organizationRelay/modals/form.tsx","webpack:///./app/views/settings/organizationRelay/modals/modal.tsx","webpack:///./app/views/settings/organizationRelay/modals/modalManager.tsx","webpack:///./app/views/settings/organizationRelay/modals/handleXhrErrorResponse.tsx","webpack:///./app/views/settings/organizationRelay/modals/add/item.tsx","webpack:///./app/views/settings/organizationRelay/modals/add/terminal.tsx","webpack:///./app/views/settings/organizationRelay/modals/add/index.tsx","webpack:///./app/views/settings/organizationRelay/modals/edit.tsx","webpack:///./app/views/settings/organizationRelay/emptyState.tsx","webpack:///./app/views/settings/organizationRelay/list/activityList.tsx","webpack:///./app/views/settings/organizationRelay/list/cardHeader.tsx","webpack:///./app/components/commandLine.tsx","webpack:///./app/views/settings/organizationRelay/list/waitingActivity.tsx","webpack:///./app/views/settings/organizationRelay/list/index.tsx","webpack:///./app/views/settings/organizationRelay/list/utils.tsx","webpack:///./app/views/settings/organizationRelay/relayWrapper.tsx","webpack:///./app/views/settings/organizationRelay/index.tsx","webpack:///../node_modules/lodash/orderBy.js"],"sourcesContent":["import {Fragment} from 'react';\n\nimport Alert from 'sentry/components/alert';\nimport Confirm from 'sentry/components/confirm';\nimport Input from 'sentry/components/forms/controls/input';\nimport Field from 'sentry/components/forms/field';\nimport {t} from 'sentry/locale';\n\ntype Props = Omit<React.ComponentProps<typeof Confirm>, 'renderConfirmMessage'> & {\n  /**\n   * The string that the user must enter to confirm the deletion\n   */\n  confirmInput: string;\n};\n\nconst ConfirmDelete = ({message, confirmInput, ...props}: Props) => (\n  <Confirm\n    {...props}\n    bypass={false}\n    disableConfirmButton\n    renderMessage={({disableConfirmButton}) => (\n      <Fragment>\n        <Alert type=\"error\">{message}</Alert>\n        <Field\n          flexibleControlStateSize\n          inline={false}\n          label={t(\n            'Please enter %s to confirm the deletion',\n            <code>{confirmInput}</code>\n          )}\n        >\n          <Input\n            type=\"text\"\n            placeholder={confirmInput}\n            onChange={e => disableConfirmButton(e.target.value !== confirmInput)}\n          />\n        </Field>\n      </Fragment>\n    )}\n  />\n);\n\nexport default ConfirmDelete;\n","import AsyncComponent from 'sentry/components/asyncComponent';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\n\ntype AsyncViewState = AsyncComponent['state'];\ntype AsyncViewProps = AsyncComponent['props'];\n\nexport default class AsyncView<\n  P extends AsyncViewProps = AsyncViewProps,\n  S extends AsyncViewState = AsyncViewState\n> extends AsyncComponent<P, S> {\n  getTitle() {\n    return '';\n  }\n\n  render() {\n    return (\n      <SentryDocumentTitle title={this.getTitle()}>\n        {this.renderComponent() as React.ReactChild}\n      </SentryDocumentTitle>\n    );\n  }\n}\n","import Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\n\ntype Props = React.ComponentPropsWithoutRef<typeof Alert> &\n  Pick<React.ComponentProps<typeof Access>, 'access'>;\n\nconst PermissionAlert = ({access = ['org:write'], ...props}: Props) => (\n  <Access access={access}>\n    {({hasAccess}) =>\n      !hasAccess && (\n        <Alert type=\"warning\" showIcon {...props}>\n          {t(\n            'These settings can only be edited by users with the organization owner or manager role.'\n          )}\n        </Alert>\n      )\n    }\n  </Access>\n);\n\nexport default PermissionAlert;\n","import styled from '@emotion/styled';\n\nimport Input from 'sentry/components/forms/controls/input';\nimport Textarea from 'sentry/components/forms/controls/textarea';\nimport Field from 'sentry/components/forms/field';\nimport FieldHelp from 'sentry/components/forms/field/fieldHelp';\nimport TextCopyInput from 'sentry/components/forms/textCopyInput';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Relay} from 'sentry/types';\n\ntype FormField = keyof Pick<Relay, 'name' | 'publicKey' | 'description'>;\ntype Values = Record<FormField, string>;\n\ntype Props = {\n  disables: Partial<Record<FormField, boolean>>;\n  errors: Partial<Values>;\n  isFormValid: boolean;\n  onChange: (field: FormField, value: string) => void;\n  onSave: () => void;\n  onValidate: (field: FormField) => () => void;\n  onValidateKey: () => void;\n  values: Values;\n};\n\nconst Form = ({\n  values,\n  onChange,\n  errors,\n  onValidate,\n  isFormValid,\n  disables,\n  onValidateKey,\n  onSave,\n}: Props) => {\n  const handleChange =\n    (field: FormField) =>\n    (\n      event: React.ChangeEvent<HTMLTextAreaElement> | React.ChangeEvent<HTMLInputElement>\n    ) => {\n      onChange(field, event.target.value);\n    };\n\n  const handleSubmit = () => {\n    if (isFormValid) {\n      onSave();\n    }\n  };\n\n  // code below copied from app/views/organizationIntegrations/SplitInstallationIdModal.tsx\n  // TODO: fix the common method selectText\n  const onCopy = (value: string) => async () =>\n    // This hack is needed because the normal copying methods with TextCopyInput do not work correctly\n    await navigator.clipboard.writeText(value);\n\n  return (\n    <form onSubmit={handleSubmit} id=\"relay-form\">\n      <Field\n        flexibleControlStateSize\n        label={t('Display Name')}\n        error={errors.name}\n        inline={false}\n        stacked\n        required\n      >\n        <Input\n          type=\"text\"\n          name=\"name\"\n          placeholder={t('Display Name')}\n          onChange={handleChange('name')}\n          value={values.name}\n          onBlur={onValidate('name')}\n          disabled={disables.name}\n        />\n      </Field>\n\n      {disables.publicKey ? (\n        <Field flexibleControlStateSize label={t('Public Key')} inline={false} stacked>\n          <TextCopyInput onCopy={onCopy(values.publicKey)}>\n            {values.publicKey}\n          </TextCopyInput>\n        </Field>\n      ) : (\n        <FieldWrapper>\n          <StyledField\n            label={t('Public Key')}\n            error={errors.publicKey}\n            flexibleControlStateSize\n            inline={false}\n            stacked\n            required\n          >\n            <Input\n              type=\"text\"\n              name=\"publicKey\"\n              placeholder={t('Public Key')}\n              onChange={handleChange('publicKey')}\n              value={values.publicKey}\n              onBlur={onValidateKey}\n            />\n          </StyledField>\n          <FieldHelp>\n            {t(\n              'Only enter the Public Key value from your credentials file. Never share the Secret key with Sentry or any third party'\n            )}\n          </FieldHelp>\n        </FieldWrapper>\n      )}\n      <Field flexibleControlStateSize label={t('Description')} inline={false} stacked>\n        <Textarea\n          name=\"description\"\n          placeholder={t('Description')}\n          onChange={handleChange('description')}\n          value={values.description}\n          disabled={disables.description}\n          autosize\n        />\n      </Field>\n    </form>\n  );\n};\n\nexport default Form;\n\nconst FieldWrapper = styled('div')`\n  padding-bottom: ${space(2)};\n`;\n\nconst StyledField = styled(Field)`\n  padding-bottom: 0;\n`;\n","import {Fragment} from 'react';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {t} from 'sentry/locale';\n\ntype Props = {\n  content: React.ReactElement;\n  disabled: boolean;\n  onSave: () => void;\n  title: string;\n  btnSaveLabel?: string;\n} & ModalRenderProps;\n\nconst Modal = ({\n  title,\n  onSave,\n  content,\n  disabled,\n  Header,\n  Body,\n  Footer,\n  closeModal,\n  btnSaveLabel = t('Save'),\n}: Props) => (\n  <Fragment>\n    <Header closeButton>{title}</Header>\n    <Body>{content}</Body>\n    <Footer>\n      <ButtonBar gap={1.5}>\n        <Button onClick={closeModal}>{t('Cancel')}</Button>\n        <Button\n          onClick={event => {\n            event.preventDefault();\n            onSave();\n          }}\n          disabled={disabled}\n          type=\"submit\"\n          priority=\"primary\"\n          form=\"relay-form\"\n        >\n          {btnSaveLabel}\n        </Button>\n      </ButtonBar>\n    </Footer>\n  </Fragment>\n);\n\nexport default Modal;\n","import {Component} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport {Organization, Relay} from 'sentry/types';\n\nimport Form from './form';\nimport handleXhrErrorResponse from './handleXhrErrorResponse';\nimport Modal from './modal';\n\ntype FormProps = React.ComponentProps<typeof Form>;\ntype Values = FormProps['values'];\n\ntype Props = ModalRenderProps & {\n  api: Client;\n  onSubmitSuccess: (organization: Organization) => void;\n  orgSlug: Organization['slug'];\n  savedRelays: Array<Relay>;\n};\n\ntype State = {\n  disables: FormProps['disables'];\n  errors: FormProps['errors'];\n  isFormValid: boolean;\n  requiredValues: Array<keyof Values>;\n  title: string;\n  values: Values;\n};\n\nclass DialogManager<P extends Props = Props, S extends State = State> extends Component<\n  P,\n  S\n> {\n  state = this.getDefaultState();\n\n  componentDidMount() {\n    this.validateForm();\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: S) {\n    if (!isEqual(prevState.values, this.state.values)) {\n      this.validateForm();\n    }\n    if (\n      !isEqual(prevState.errors, this.state.errors) &&\n      Object.keys(this.state.errors).length > 0\n    ) {\n      this.setValidForm(false);\n    }\n  }\n\n  getDefaultState(): Readonly<S> {\n    return {\n      values: {name: '', publicKey: '', description: ''},\n      requiredValues: ['name', 'publicKey'],\n      errors: {},\n      disables: {},\n      isFormValid: false,\n      title: this.getTitle(),\n    } as Readonly<S>;\n  }\n\n  getTitle(): string {\n    return '';\n  }\n\n  getData(): {trustedRelays: Array<Relay>} {\n    // Child has to implement this\n    throw new Error('Not implemented');\n  }\n\n  getBtnSaveLabel(): string | undefined {\n    return undefined;\n  }\n\n  setValidForm(isFormValid: boolean) {\n    this.setState({isFormValid});\n  }\n\n  validateForm() {\n    const {values, requiredValues, errors} = this.state;\n\n    const isFormValid = requiredValues.every(\n      requiredValue =>\n        !!values[requiredValue].replace(/\\s/g, '') && !errors[requiredValue]\n    );\n\n    this.setValidForm(isFormValid);\n  }\n\n  clearError<F extends keyof Values>(field: F) {\n    this.setState(prevState => ({\n      errors: omit(prevState.errors, field),\n    }));\n  }\n\n  convertErrorXhrResponse(error: ReturnType<typeof handleXhrErrorResponse>) {\n    switch (error.type) {\n      case 'invalid-key':\n      case 'missing-key':\n        this.setState(prevState => ({\n          errors: {...prevState.errors, publicKey: error.message},\n        }));\n        break;\n      case 'empty-name':\n      case 'missing-name':\n        this.setState(prevState => ({\n          errors: {...prevState.errors, name: error.message},\n        }));\n        break;\n      default:\n        addErrorMessage(error.message);\n    }\n  }\n\n  handleChange = <F extends keyof Values>(field: F, value: Values[F]) => {\n    this.setState(prevState => ({\n      values: {\n        ...prevState.values,\n        [field]: value,\n      },\n      errors: omit(prevState.errors, field),\n    }));\n  };\n\n  handleSave = async () => {\n    const {onSubmitSuccess, closeModal, orgSlug, api} = this.props;\n\n    const trustedRelays = this.getData().trustedRelays.map(trustedRelay =>\n      omit(trustedRelay, ['created', 'lastModified'])\n    );\n\n    try {\n      const response = await api.requestPromise(`/organizations/${orgSlug}/`, {\n        method: 'PUT',\n        data: {trustedRelays},\n      });\n      onSubmitSuccess(response);\n      closeModal();\n    } catch (error) {\n      this.convertErrorXhrResponse(handleXhrErrorResponse(error));\n    }\n  };\n\n  handleValidate =\n    <F extends keyof Values>(field: F) =>\n    () => {\n      const isFieldValueEmpty = !this.state.values[field].replace(/\\s/g, '');\n\n      const fieldErrorAlreadyExist = this.state.errors[field];\n\n      if (isFieldValueEmpty && fieldErrorAlreadyExist) {\n        return;\n      }\n\n      if (isFieldValueEmpty && !fieldErrorAlreadyExist) {\n        this.setState(prevState => ({\n          errors: {\n            ...prevState.errors,\n            [field]: t('Field Required'),\n          },\n        }));\n        return;\n      }\n\n      if (!isFieldValueEmpty && fieldErrorAlreadyExist) {\n        this.clearError(field);\n      }\n    };\n\n  handleValidateKey = () => {\n    const {savedRelays} = this.props;\n    const {values, errors} = this.state;\n    const isKeyAlreadyTaken = savedRelays.find(\n      savedRelay => savedRelay.publicKey === values.publicKey\n    );\n\n    if (isKeyAlreadyTaken && !errors.publicKey) {\n      this.setState({\n        errors: {\n          ...errors,\n          publicKey: t('Relay key already taken'),\n        },\n      });\n      return;\n    }\n\n    if (errors.publicKey) {\n      this.setState({\n        errors: omit(errors, 'publicKey'),\n      });\n    }\n\n    this.handleValidate('publicKey')();\n  };\n\n  getForm() {\n    const {values, errors, disables, isFormValid} = this.state;\n    return (\n      <Form\n        isFormValid={isFormValid}\n        onSave={this.handleSave}\n        onChange={this.handleChange}\n        onValidate={this.handleValidate}\n        onValidateKey={this.handleValidateKey}\n        errors={errors}\n        values={values}\n        disables={disables}\n      />\n    );\n  }\n\n  getContent(): React.ReactElement {\n    return this.getForm();\n  }\n\n  render() {\n    const {title, isFormValid} = this.state;\n    const btnSaveLabel = this.getBtnSaveLabel();\n    const content = this.getContent();\n\n    return (\n      <Modal\n        {...this.props}\n        title={title}\n        onSave={this.handleSave}\n        btnSaveLabel={btnSaveLabel}\n        disabled={!isFormValid}\n        content={content}\n      />\n    );\n  }\n}\n\nexport default DialogManager;\n","import {t} from 'sentry/locale';\n\ntype Error = {\n  message: string;\n  type:\n    | 'unknown'\n    | 'bad-structure'\n    | 'missing-name'\n    | 'empty-name'\n    | 'missing-key'\n    | 'invalid-key'\n    | 'duplicated-key';\n};\n\ntype XhrError = {\n  responseJSON?: {\n    trustedRelays: Array<string>;\n  };\n};\n\nfunction handleError(error: XhrError): Error {\n  const errorMessage = error.responseJSON?.trustedRelays[0];\n\n  if (!errorMessage) {\n    return {\n      type: 'unknown',\n      message: t('An unknown error occurred while saving Relay public key.'),\n    };\n  }\n\n  if (errorMessage === 'Bad structure received for Trusted Relays') {\n    return {\n      type: 'bad-structure',\n      message: t('An invalid structure was sent.'),\n    };\n  }\n\n  if (errorMessage === 'Relay key info with missing name in Trusted Relays') {\n    return {\n      type: 'missing-name',\n      message: t('Field Required'),\n    };\n  }\n\n  if (errorMessage === 'Relay key info with empty name in Trusted Relays') {\n    return {\n      type: 'empty-name',\n      message: t('Invalid Field'),\n    };\n  }\n\n  if (errorMessage.startsWith('Missing public key for Relay key info with name:')) {\n    return {\n      type: 'missing-key',\n      message: t('Field Required'),\n    };\n  }\n\n  if (errorMessage.startsWith('Invalid public key for relay key info with name:')) {\n    return {\n      type: 'invalid-key',\n      message: t('Invalid Relay key'),\n    };\n  }\n\n  if (errorMessage.startsWith('Duplicated key in Trusted Relays:')) {\n    return {\n      type: 'duplicated-key',\n      message: t('Relay key already taken'),\n    };\n  }\n\n  return {\n    type: 'unknown',\n    message: t('An unknown error occurred while saving Relay public key.'),\n  };\n}\n\nexport default handleError;\n","import styled from '@emotion/styled';\n\nimport ListItem from 'sentry/components/list/listItem';\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  children: React.ReactElement;\n  title: React.ReactNode;\n  className?: string;\n  subtitle?: React.ReactNode;\n};\n\nconst Item = styled(({title, subtitle, children, className}: Props) => (\n  <ListItem className={className}>\n    {title}\n    {subtitle && <small>{subtitle}</small>}\n    <div>{children}</div>\n  </ListItem>\n))`\n  display: grid;\n  gap: ${space(1.5)};\n`;\n\nexport default Item;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  command: string;\n};\n\nconst Terminal = ({command}: Props) => (\n  <Wrapper>\n    <Prompt>{'\\u0024'}</Prompt>\n    {command}\n  </Wrapper>\n);\n\nexport default Terminal;\n\nconst Wrapper = styled('div')`\n  background: ${p => p.theme.gray500};\n  padding: ${space(1.5)} ${space(3)};\n  font-family: ${p => p.theme.text.familyMono};\n  color: ${p => p.theme.white};\n  border-radius: ${p => p.theme.borderRadius};\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.75)};\n`;\n\nconst Prompt = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n","import styled from '@emotion/styled';\n\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport List from 'sentry/components/list';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nimport ModalManager from '../modalManager';\n\nimport Item from './item';\nimport Terminal from './terminal';\n\nclass Add extends ModalManager {\n  getTitle() {\n    return t('Register Key');\n  }\n\n  getBtnSaveLabel() {\n    return t('Register');\n  }\n\n  getData() {\n    const {savedRelays} = this.props;\n    const trustedRelays = [...savedRelays, this.state.values];\n\n    return {trustedRelays};\n  }\n\n  getContent() {\n    return (\n      <StyledList symbol=\"colored-numeric\">\n        <Item\n          title={tct('Initialize the configuration. [link: Learn how]', {\n            link: (\n              <ExternalLink href=\"https://docs.sentry.io/product/relay/getting-started/#initializing-configuration\" />\n            ),\n          })}\n          subtitle={t('Within your terminal:')}\n        >\n          <Terminal command=\"relay config init\" />\n        </Item>\n        <Item\n          title={tct(\n            'Go to the file [jsonFile: credentials.json] to find the public key and enter it below.',\n            {\n              jsonFile: (\n                <ExternalLink href=\"https://docs.sentry.io/product/relay/getting-started/#registering-relay-with-sentry\" />\n              ),\n            }\n          )}\n        >\n          {super.getForm()}\n        </Item>\n      </StyledList>\n    );\n  }\n}\n\nexport default Add;\n\nconst StyledList = styled(List)`\n  display: grid;\n  gap: ${space(3)};\n`;\n","import {t} from 'sentry/locale';\nimport {Relay} from 'sentry/types';\n\nimport ModalManager from './modalManager';\n\ntype Props = {\n  relay: Relay;\n} & ModalManager['props'];\n\ntype State = ModalManager['state'];\n\nclass Edit extends ModalManager<Props, State> {\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      values: {\n        name: this.props.relay.name,\n        publicKey: this.props.relay.publicKey,\n        description: this.props.relay.description || '',\n      },\n      disables: {publicKey: true},\n    };\n  }\n\n  getTitle() {\n    return t('Edit Key');\n  }\n\n  getData() {\n    const {savedRelays} = this.props;\n    const updatedRelay = this.state.values;\n\n    const trustedRelays = savedRelays.map(relay => {\n      if (relay.publicKey === updatedRelay.publicKey) {\n        return updatedRelay;\n      }\n      return relay;\n    });\n\n    return {trustedRelays};\n  }\n}\n\nexport default Edit;\n","import {Panel} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\nconst EmptyState = () => (\n  <Panel>\n    <EmptyMessage>{t('No Keys Registered.')}</EmptyMessage>\n  </Panel>\n);\n\nexport default EmptyState;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport DateTime from 'sentry/components/dateTime';\nimport {PanelTable} from 'sentry/components/panels';\nimport {t} from 'sentry/locale';\nimport {RelayActivity} from 'sentry/types';\n\ntype Props = {\n  activities: Array<RelayActivity>;\n};\n\nconst ActivityList = ({activities}: Props) => (\n  <StyledPanelTable headers={[t('Version'), t('First Used'), t('Last Used')]}>\n    {activities.map(({relayId, version, firstSeen, lastSeen}) => {\n      return (\n        <Fragment key={relayId}>\n          <Version>{version}</Version>\n          <DateTime date={firstSeen} seconds={false} />\n          <DateTime date={lastSeen} seconds={false} />\n        </Fragment>\n      );\n    })}\n  </StyledPanelTable>\n);\n\nexport default ActivityList;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: repeat(3, 2fr);\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: 2fr repeat(2, 1fr);\n  }\n`;\n\nconst Version = styled('div')`\n  font-variant-numeric: tabular-nums;\n`;\n","import styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport Clipboard from 'sentry/components/clipboard';\nimport ConfirmDelete from 'sentry/components/confirmDelete';\nimport DateTime from 'sentry/components/dateTime';\nimport QuestionTooltip from 'sentry/components/questionTooltip';\nimport {IconCopy, IconDelete, IconEdit} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Relay} from 'sentry/types';\n\ntype Props = Relay & {\n  disabled: boolean;\n  onDelete: (publicKey: Relay['publicKey']) => () => void;\n  onEdit: (publicKey: Relay['publicKey']) => () => void;\n};\n\nconst CardHeader = ({\n  publicKey,\n  name,\n  description,\n  created,\n  disabled,\n  onEdit,\n  onDelete,\n}: Props) => {\n  const deleteButton = (\n    <Button\n      size=\"small\"\n      icon={<IconDelete />}\n      aria-label={t('Delete Key')}\n      disabled={disabled}\n      title={disabled ? t('You do not have permission to delete keys') : undefined}\n    />\n  );\n  return (\n    <Header>\n      <KeyName>\n        {name}\n        {description && <QuestionTooltip position=\"top\" size=\"sm\" title={description} />}\n      </KeyName>\n      <DateCreated>\n        {tct('Created on [date]', {date: <DateTime date={created} timeAndDate />})}\n      </DateCreated>\n      <StyledButtonBar gap={1}>\n        <Clipboard value={publicKey}>\n          <Button size=\"small\" icon={<IconCopy />}>\n            {t('Copy Key')}\n          </Button>\n        </Clipboard>\n        <Button\n          size=\"small\"\n          onClick={onEdit(publicKey)}\n          icon={<IconEdit />}\n          aria-label={t('Edit Key')}\n          disabled={disabled}\n          title={disabled ? t('You do not have permission to edit keys') : undefined}\n        />\n        {disabled ? (\n          deleteButton\n        ) : (\n          <ConfirmDelete\n            message={t(\n              'After removing this Public Key, your Relay will no longer be able to communicate with Sentry and events will be dropped.'\n            )}\n            onConfirm={onDelete(publicKey)}\n            confirmInput={name}\n          >\n            {deleteButton}\n          </ConfirmDelete>\n        )}\n      </StyledButtonBar>\n    </Header>\n  );\n};\n\nexport default CardHeader;\n\nconst KeyName = styled('div')`\n  grid-row: 1/2;\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  grid-column-gap: ${space(0.5)};\n`;\n\nconst DateCreated = styled('div')`\n  grid-row: 2/3;\n  color: ${p => p.theme.gray300};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    grid-row: 1/3;\n  }\n`;\n\nconst Header = styled('div')`\n  display: grid;\n  grid-row-gap: ${space(1)};\n  margin-bottom: ${space(1)};\n\n  @media (min-width: ${p => p.theme.breakpoints.medium}) {\n    grid-template-columns: 1fr max-content;\n    grid-template-rows: repeat(2, max-content);\n  }\n`;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\ntype Props = {\n  /**\n   * The text interface\n   */\n  children: string;\n};\n\nconst CommandLine = ({children}: Props) => <Wrapper>{children}</Wrapper>;\n\nexport default CommandLine;\n\nconst Wrapper = styled('code')`\n  padding: ${space(0.5)} ${space(1)};\n  color: ${p => p.theme.pink300};\n  background: ${p => p.theme.pink100};\n  border: 1px solid ${p => p.theme.pink200};\n  font-family: ${p => p.theme.text.familyMono};\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: nowrap;\n`;\n","import Button from 'sentry/components/button';\nimport CommandLine from 'sentry/components/commandLine';\nimport {Panel} from 'sentry/components/panels';\nimport {IconRefresh} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype Props = {\n  disabled: boolean;\n  onRefresh: () => void;\n};\n\nconst WaitingActivity = ({onRefresh, disabled}: Props) => (\n  <Panel>\n    <EmptyMessage\n      title={t('Waiting on Activity!')}\n      description={\n        disabled\n          ? undefined\n          : tct('Run relay in your terminal with [commandLine]', {\n              commandLine: <CommandLine>{'relay run'}</CommandLine>,\n            })\n      }\n      action={\n        <Button icon={<IconRefresh />} onClick={onRefresh}>\n          {t('Refresh')}\n        </Button>\n      }\n    />\n  </Panel>\n);\n\nexport default WaitingActivity;\n","import orderBy from 'lodash/orderBy';\n\nimport {Relay, RelayActivity} from 'sentry/types';\n\nimport ActivityList from './activityList';\nimport CardHeader from './cardHeader';\nimport {getRelaysByPublicKey} from './utils';\nimport WaitingActivity from './waitingActivity';\n\ntype CardHeaderProps = React.ComponentProps<typeof CardHeader>;\ntype WaitingActivityProps = React.ComponentProps<typeof WaitingActivity>;\n\ntype Props = {\n  disabled: boolean;\n  relayActivities: Array<RelayActivity>;\n  relays: Array<Relay>;\n} & Pick<CardHeaderProps, 'onDelete' | 'onEdit'> &\n  Pick<WaitingActivityProps, 'onRefresh'>;\n\nconst List = ({\n  relays,\n  relayActivities,\n  onRefresh,\n  onDelete,\n  onEdit,\n  disabled,\n}: Props) => {\n  const orderedRelays = orderBy(relays, relay => relay.created, ['desc']);\n\n  const relaysByPublicKey = getRelaysByPublicKey(orderedRelays, relayActivities);\n\n  const renderCardContent = (activities: Array<RelayActivity>) => {\n    if (!activities.length) {\n      return <WaitingActivity onRefresh={onRefresh} disabled={disabled} />;\n    }\n\n    return <ActivityList activities={activities} />;\n  };\n\n  return (\n    <div>\n      {Object.keys(relaysByPublicKey).map(relayByPublicKey => {\n        const {name, description, created, activities} =\n          relaysByPublicKey[relayByPublicKey];\n        return (\n          <div key={relayByPublicKey}>\n            <CardHeader\n              publicKey={relayByPublicKey}\n              name={name}\n              description={description}\n              created={created}\n              onEdit={onEdit}\n              onDelete={onDelete}\n              disabled={disabled}\n            />\n            {renderCardContent(activities)}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default List;\n","import {Relay, RelayActivity, RelaysByPublickey} from 'sentry/types';\n\n/**\n * Convert list of individual relay objects into a per-file summary grouped by publicKey\n */\nexport function getRelaysByPublicKey(\n  relays: Array<Relay>,\n  relayActivities: Array<RelayActivity>\n) {\n  return relays.reduce<RelaysByPublickey>((relaysByPublicKey, relay) => {\n    const {name, description, created, publicKey} = relay;\n\n    if (!relaysByPublicKey.hasOwnProperty(publicKey)) {\n      relaysByPublicKey[publicKey] = {name, description, created, activities: []};\n    }\n\n    if (!relaysByPublicKey[publicKey].activities.length) {\n      relaysByPublicKey[publicKey].activities = relayActivities.filter(\n        activity => activity.publicKey === publicKey\n      );\n    }\n\n    return relaysByPublicKey;\n  }, {});\n}\n\n/**\n * Returns a short publicKey with only 20 characters\n */\nexport function getShortPublicKey(publicKey: Relay['publicKey']) {\n  return publicKey.substring(0, 20);\n}\n","import {Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport isEqual from 'lodash/isEqual';\nimport omit from 'lodash/omit';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {openModal} from 'sentry/actionCreators/modal';\nimport {updateOrganization} from 'sentry/actionCreators/organizations';\nimport Button from 'sentry/components/button';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {IconAdd} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Relay, RelayActivity} from 'sentry/types';\nimport AsyncView from 'sentry/views/asyncView';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\nimport TextBlock from 'sentry/views/settings/components/text/textBlock';\nimport PermissionAlert from 'sentry/views/settings/organization/permissionAlert';\n\nimport Add from './modals/add';\nimport Edit from './modals/edit';\nimport EmptyState from './emptyState';\nimport List from './list';\n\nconst RELAY_DOCS_LINK = 'https://getsentry.github.io/relay/';\n\ntype Props = {\n  organization: Organization;\n} & RouteComponentProps<{orgId: string}, {}>;\n\ntype State = {\n  relayActivities: Array<RelayActivity>;\n  relays: Array<Relay>;\n} & AsyncView['state'];\n\nclass RelayWrapper extends AsyncView<Props, State> {\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    if (!isEqual(prevState.relays, this.state.relays)) {\n      // Fetch fresh activities\n      this.fetchData();\n      updateOrganization({...prevProps.organization, trustedRelays: this.state.relays});\n    }\n\n    super.componentDidUpdate(prevProps, prevState);\n  }\n\n  getTitle() {\n    return t('Relay');\n  }\n\n  getDefaultState() {\n    return {\n      ...super.getDefaultState(),\n      relays: this.props.organization.trustedRelays,\n    };\n  }\n\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {organization} = this.props;\n    return [['relayActivities', `/organizations/${organization.slug}/relay_usage/`]];\n  }\n\n  setRelays(trustedRelays: Array<Relay>) {\n    this.setState({relays: trustedRelays});\n  }\n\n  handleDelete = (publicKey: Relay['publicKey']) => async () => {\n    const {relays} = this.state;\n\n    const trustedRelays = relays\n      .filter(relay => relay.publicKey !== publicKey)\n      .map(relay => omit(relay, ['created', 'lastModified']));\n\n    try {\n      const response = await this.api.requestPromise(\n        `/organizations/${this.props.organization.slug}/`,\n        {\n          method: 'PUT',\n          data: {trustedRelays},\n        }\n      );\n      addSuccessMessage(t('Successfully deleted Relay public key'));\n      this.setRelays(response.trustedRelays);\n    } catch {\n      addErrorMessage(t('An unknown error occurred while deleting Relay public key'));\n    }\n  };\n\n  successfullySaved(response: Organization, successMessage: string) {\n    addSuccessMessage(successMessage);\n    this.setRelays(response.trustedRelays);\n  }\n\n  handleOpenEditDialog = (publicKey: Relay['publicKey']) => () => {\n    const editRelay = this.state.relays.find(relay => relay.publicKey === publicKey);\n\n    if (!editRelay) {\n      return;\n    }\n\n    openModal(modalProps => (\n      <Edit\n        {...modalProps}\n        savedRelays={this.state.relays}\n        api={this.api}\n        orgSlug={this.props.organization.slug}\n        relay={editRelay}\n        onSubmitSuccess={response => {\n          this.successfullySaved(response, t('Successfully updated Relay public key'));\n        }}\n      />\n    ));\n  };\n\n  handleOpenAddDialog = () => {\n    openModal(modalProps => (\n      <Add\n        {...modalProps}\n        savedRelays={this.state.relays}\n        api={this.api}\n        orgSlug={this.props.organization.slug}\n        onSubmitSuccess={response => {\n          this.successfullySaved(response, t('Successfully added Relay public key'));\n        }}\n      />\n    ));\n  };\n\n  handleRefresh = () => {\n    // Fetch fresh activities\n    this.fetchData();\n  };\n\n  renderContent(disabled: boolean) {\n    const {relays, relayActivities, loading} = this.state;\n\n    if (loading) {\n      return this.renderLoading();\n    }\n\n    if (!relays.length) {\n      return <EmptyState />;\n    }\n\n    return (\n      <List\n        relays={relays}\n        relayActivities={relayActivities}\n        onEdit={this.handleOpenEditDialog}\n        onRefresh={this.handleRefresh}\n        onDelete={this.handleDelete}\n        disabled={disabled}\n      />\n    );\n  }\n\n  renderBody() {\n    const {organization} = this.props;\n    const disabled = !organization.access.includes('org:write');\n    return (\n      <Fragment>\n        <SettingsPageHeader\n          title={t('Relay')}\n          action={\n            <Button\n              title={\n                disabled ? t('You do not have permission to register keys') : undefined\n              }\n              priority=\"primary\"\n              size=\"small\"\n              icon={<IconAdd size=\"xs\" isCircled />}\n              onClick={this.handleOpenAddDialog}\n              disabled={disabled}\n            >\n              {t('Register Key')}\n            </Button>\n          }\n        />\n        <PermissionAlert />\n        <TextBlock>\n          {tct(\n            'Sentry Relay offers enterprise-grade data security by providing a standalone service that acts as a middle layer between your application and sentry.io. Go to [link:Relay Documentation] for setup and details.',\n            {link: <ExternalLink href={RELAY_DOCS_LINK} />}\n          )}\n        </TextBlock>\n        {this.renderContent(disabled)}\n      </Fragment>\n    );\n  }\n}\n\nexport default RelayWrapper;\n","import Feature from 'sentry/components/acl/feature';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport RelayWrapper from './relayWrapper';\n\nfunction OrganizationRelay(props: Omit<RelayWrapper['props'], 'organization'>) {\n  const organization = useOrganization();\n  return (\n    <Feature\n      organization={organization}\n      features={['relay']}\n      hookName=\"feature-disabled:relay\"\n    >\n      <RelayWrapper\n        organization={organization as RelayWrapper['props']['organization']}\n        {...props}\n      />\n    </Feature>\n  );\n}\n\nexport default OrganizationRelay;\n","var baseOrderBy = require('./_baseOrderBy'),\n    isArray = require('./isArray');\n\n/**\n * This method is like `_.sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @param {string[]} [orders] The sort orders of `iteratees`.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ];\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n */\nfunction orderBy(collection, iteratees, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  if (!isArray(iteratees)) {\n    iteratees = iteratees == null ? [] : [iteratees];\n  }\n  orders = guard ? undefined : orders;\n  if (!isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  return baseOrderBy(collection, iteratees, orders);\n}\n\nmodule.exports = orderBy;\n"],"names":["ConfirmDelete","message","confirmInput","props","bypass","disableConfirmButton","renderMessage","Fragment","type","flexibleControlStateSize","inline","label","t","placeholder","onChange","e","target","value","AsyncView","AsyncComponent","getTitle","render","title","this","renderComponent","PermissionAlert","access","hasAccess","showIcon","Form","values","errors","onValidate","isFormValid","disables","onValidateKey","onSave","handleChange","field","event","onSubmit","id","error","name","stacked","required","onBlur","disabled","publicKey","onCopy","async","navigator","clipboard","writeText","FieldWrapper","StyledField","description","autosize","space","Field","Modal","content","Header","Body","Footer","closeModal","btnSaveLabel","closeButton","gap","onClick","preventDefault","priority","form","DialogManager","Component","getDefaultState","setState","prevState","omit","onSubmitSuccess","orgSlug","api","trustedRelays","getData","map","trustedRelay","requestPromise","method","data","convertErrorXhrResponse","errorMessage","responseJSON","startsWith","handleXhrErrorResponse","isFieldValueEmpty","state","replace","fieldErrorAlreadyExist","clearError","savedRelays","find","savedRelay","handleValidate","componentDidMount","validateForm","componentDidUpdate","_prevProps","isEqual","Object","keys","length","setValidForm","requiredValues","Error","getBtnSaveLabel","every","requiredValue","addErrorMessage","getForm","handleSave","handleValidateKey","getContent","subtitle","children","className","Terminal","command","Wrapper","Prompt","p","theme","gray500","text","familyMono","white","borderRadius","gray300","ModalManager","StyledList","symbol","tct","link","href","jsonFile","super","List","relay","updatedRelay","EmptyState","ActivityList","activities","StyledPanelTable","headers","relayId","version","firstSeen","lastSeen","Version","date","seconds","PanelTable","breakpoints","large","CardHeader","created","onEdit","onDelete","deleteButton","size","icon","undefined","KeyName","position","DateCreated","timeAndDate","StyledButtonBar","onConfirm","fontSizeMedium","ButtonBar","medium","CommandLine","pink300","pink100","pink200","WaitingActivity","onRefresh","commandLine","action","relays","relayActivities","relaysByPublicKey","reduce","hasOwnProperty","filter","activity","getRelaysByPublicKey","orderBy","renderCardContent","relayByPublicKey","RelayWrapper","response","organization","slug","addSuccessMessage","setRelays","editRelay","openModal","modalProps","successfullySaved","fetchData","prevProps","updateOrganization","getEndpoints","successMessage","renderContent","loading","renderLoading","handleOpenEditDialog","handleRefresh","handleDelete","renderBody","includes","isCircled","handleOpenAddDialog","OrganizationRelay","useOrganization","features","hookName","baseOrderBy","isArray","module","exports","collection","iteratees","orders","guard"],"sourceRoot":""}